
RF-Module-Firmware-HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce10  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d78  0800cfa0  0800cfa0  0000dfa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd18  0800dd18  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd18  0800dd18  0000ed18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd20  0800dd20  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd20  0800dd20  0000ed20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd24  0800dd24  0000ed24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800dd28  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000229c  200001d8  0800df00  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002474  0800df00  0000f474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000244df  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f29  00000000  00000000  000336e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d18  00000000  00000000  00038610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000167d  00000000  00000000  0003a328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263d7  00000000  00000000  0003b9a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000234ac  00000000  00000000  00061d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2e90  00000000  00000000  00085228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  001680b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089e0  00000000  00000000  00168140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  00170b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cf88 	.word	0x0800cf88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800cf88 	.word	0x0800cf88

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8000f18 <MX_CAN1_Init+0x80>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000ea4:	2210      	movs	r2, #16
 8000ea6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000eaa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eae:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000eb8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ebc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ebe:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000ec0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000ec4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ed2:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ede:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000eea:	480a      	ldr	r0, [pc, #40]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000eec:	f001 fd5c 	bl	80029a8 <HAL_CAN_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000ef6:	f000 fbb5 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000efa:	4806      	ldr	r0, [pc, #24]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000efc:	f001 ff19 	bl	8002d32 <HAL_CAN_Start>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d004      	beq.n	8000f10 <MX_CAN1_Init+0x78>
		printf("[!SYSTEM ERROR]CAN Initialization Error At CAN Start");
 8000f06:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <MX_CAN1_Init+0x84>)
 8000f08:	f00a f810 	bl	800af2c <iprintf>
		Error_Handler();
 8000f0c:	f000 fbaa 	bl	8001664 <Error_Handler>
	}
  /* USER CODE END CAN1_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200001f4 	.word	0x200001f4
 8000f18:	40006400 	.word	0x40006400
 8000f1c:	0800cfa0 	.word	0x0800cfa0

08000f20 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	@ 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a21      	ldr	r2, [pc, #132]	@ (8000fc4 <HAL_CAN_MspInit+0xa4>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d13b      	bne.n	8000fba <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f42:	4b21      	ldr	r3, [pc, #132]	@ (8000fc8 <HAL_CAN_MspInit+0xa8>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f46:	4a20      	ldr	r2, [pc, #128]	@ (8000fc8 <HAL_CAN_MspInit+0xa8>)
 8000f48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <HAL_CAN_MspInit+0xa8>)
 8000f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <HAL_CAN_MspInit+0xa8>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	4a1a      	ldr	r2, [pc, #104]	@ (8000fc8 <HAL_CAN_MspInit+0xa8>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f66:	4b18      	ldr	r3, [pc, #96]	@ (8000fc8 <HAL_CAN_MspInit+0xa8>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f84:	2309      	movs	r3, #9
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f92:	f002 f9e7 	bl	8003364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fa8:	2309      	movs	r3, #9
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb6:	f002 f9d5 	bl	8003364 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	@ 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40006400 	.word	0x40006400
 8000fc8:	40021000 	.word	0x40021000

08000fcc <CAN_Initialize>:
  }
}

/* USER CODE BEGIN 1 */

void CAN_Initialize() {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b094      	sub	sp, #80	@ 0x50
 8000fd0:	af00      	add	r7, sp, #0
	MX_CAN1_Init();
 8000fd2:	f7ff ff61 	bl	8000e98 <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	CAN_FilterTypeDef high_priority_filter;
	high_priority_filter.FilterIdHigh = 0x100 << 5;
 8000fd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fda:	62bb      	str	r3, [r7, #40]	@ 0x28
	high_priority_filter.FilterMaskIdHigh = 0x700 << 5;
 8000fdc:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000fe0:	633b      	str	r3, [r7, #48]	@ 0x30
	high_priority_filter.FilterIdLow = 0x0000;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	high_priority_filter.FilterMaskIdLow = 0x0000;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	637b      	str	r3, [r7, #52]	@ 0x34
	high_priority_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	63bb      	str	r3, [r7, #56]	@ 0x38
	high_priority_filter.FilterBank = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	high_priority_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	643b      	str	r3, [r7, #64]	@ 0x40
	high_priority_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	647b      	str	r3, [r7, #68]	@ 0x44
	high_priority_filter.FilterActivation = CAN_FILTER_ENABLE;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	64bb      	str	r3, [r7, #72]	@ 0x48

	if (HAL_CAN_ConfigFilter(&hcan1, &high_priority_filter) != HAL_OK) {
 8000ffe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001002:	4619      	mov	r1, r3
 8001004:	480f      	ldr	r0, [pc, #60]	@ (8001044 <CAN_Initialize+0x78>)
 8001006:	f001 fdca 	bl	8002b9e <HAL_CAN_ConfigFilter>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <CAN_Initialize+0x48>
		/* Filter configuration Error */
		Error_Handler();
 8001010:	f000 fb28 	bl	8001664 <Error_Handler>
	}

	CAN_FilterTypeDef low_priority_filter;
	low_priority_filter.FilterIdHigh = 0x100 << 5;
 8001014:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001018:	603b      	str	r3, [r7, #0]
	low_priority_filter.FilterMaskIdHigh = 0x700 << 5;
 800101a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800101e:	60bb      	str	r3, [r7, #8]
	low_priority_filter.FilterIdLow = 0x0000;
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
	low_priority_filter.FilterMaskIdLow = 0x0000;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
	low_priority_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
	low_priority_filter.FilterBank = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
	low_priority_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001030:	2300      	movs	r3, #0
 8001032:	61bb      	str	r3, [r7, #24]
	low_priority_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001034:	2301      	movs	r3, #1
 8001036:	61fb      	str	r3, [r7, #28]
	low_priority_filter.FilterActivation = CAN_FILTER_ENABLE;
 8001038:	2301      	movs	r3, #1
 800103a:	623b      	str	r3, [r7, #32]
//	}
//	TxHeader.RTR = CAN_RTR_DATA;
//	TxHeader.IDE = CAN_ID_STD;
//	TxHeader.DLC = 8;
//	TxHeader.TransmitGlobalTime = DISABLE;
}
 800103c:	bf00      	nop
 800103e:	3750      	adds	r7, #80	@ 0x50
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200001f4 	.word	0x200001f4

08001048 <HAL_CAN_SafeAddTxMessage>:
//	}
//
//	return 1;
//}
HAL_StatusTypeDef HAL_CAN_SafeAddTxMessage(uint8_t *msg, uint32_t msg_id,
		uint32_t msg_length, uint32_t *TxMailbox, uint32_t rtr) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	@ 0x30
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	603b      	str	r3, [r7, #0]
	uint32_t fc_tick;
	HAL_StatusTypeDef hal_stat;
	CAN_TxHeaderTypeDef _TxHeader;

	// These will never change
	_TxHeader.IDE = CAN_ID_STD;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
	_TxHeader.ExtId = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
	_TxHeader.TransmitGlobalTime = DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	// User will give us this information
	_TxHeader.RTR = rtr;
 8001064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001066:	61fb      	str	r3, [r7, #28]
	_TxHeader.StdId = msg_id;
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	613b      	str	r3, [r7, #16]
	_TxHeader.DLC = msg_length;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	623b      	str	r3, [r7, #32]

	// Start a timer to check timeout conditions
	fc_tick = HAL_GetTick();
 8001070:	f001 fc8e 	bl	8002990 <HAL_GetTick>
 8001074:	62f8      	str	r0, [r7, #44]	@ 0x2c

	/* Try to add a Tx message. Returns HAL_ERROR if there are no avail
	 * mailboxes or if the peripheral is not initialized. */
	do {
		hal_stat = HAL_CAN_AddTxMessage(&hcan1, &_TxHeader, msg, TxMailbox);
 8001076:	f107 0110 	add.w	r1, r7, #16
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	480c      	ldr	r0, [pc, #48]	@ (80010b0 <HAL_CAN_SafeAddTxMessage+0x68>)
 8001080:	f001 fe9b 	bl	8002dba <HAL_CAN_AddTxMessage>
 8001084:	4603      	mov	r3, r0
 8001086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	} while (hal_stat != HAL_OK && (HAL_GetTick() - fc_tick < 500));
 800108a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800108e:	2b00      	cmp	r3, #0
 8001090:	d007      	beq.n	80010a2 <HAL_CAN_SafeAddTxMessage+0x5a>
 8001092:	f001 fc7d 	bl	8002990 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010a0:	d3e9      	bcc.n	8001076 <HAL_CAN_SafeAddTxMessage+0x2e>

	return hal_stat;
 80010a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3730      	adds	r7, #48	@ 0x30
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200001f4 	.word	0x200001f4

080010b4 <set_time>:
	};
} rf_packet_test;

rf_packet_test test_packet = { 0 };

void set_time(uint8_t hr, uint8_t min, uint8_t sec) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
 80010be:	460b      	mov	r3, r1
 80010c0:	71bb      	strb	r3, [r7, #6]
 80010c2:	4613      	mov	r3, r2
 80010c4:	717b      	strb	r3, [r7, #5]
	RTC_TimeTypeDef sTime = { 0 };
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	611a      	str	r2, [r3, #16]
	sTime.Hours = hr;
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = min;
 80010da:	79bb      	ldrb	r3, [r7, #6]
 80010dc:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = sec;
 80010de:	797b      	ldrb	r3, [r7, #5]
 80010e0:	73bb      	strb	r3, [r7, #14]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	2200      	movs	r2, #0
 80010f0:	4619      	mov	r1, r3
 80010f2:	4806      	ldr	r0, [pc, #24]	@ (800110c <set_time+0x58>)
 80010f4:	f003 fd56 	bl	8004ba4 <HAL_RTC_SetTime>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <set_time+0x4e>
		Error_Handler();
 80010fe:	f000 fab1 	bl	8001664 <Error_Handler>
	}
}
 8001102:	bf00      	nop
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000078c 	.word	0x2000078c

08001110 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Init */
	set_time(0, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff ffcb 	bl	80010b4 <set_time>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 800111e:	4a0d      	ldr	r2, [pc, #52]	@ (8001154 <MX_FREERTOS_Init+0x44>)
 8001120:	2100      	movs	r1, #0
 8001122:	480d      	ldr	r0, [pc, #52]	@ (8001158 <MX_FREERTOS_Init+0x48>)
 8001124:	f006 fc80 	bl	8007a28 <osThreadNew>
 8001128:	4603      	mov	r3, r0
 800112a:	4a0c      	ldr	r2, [pc, #48]	@ (800115c <MX_FREERTOS_Init+0x4c>)
 800112c:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of CanRxTask */
	CanRxTaskHandle = osThreadNew(StartCanRxTask, NULL, &CanRxTask_attributes);
 800112e:	4a0c      	ldr	r2, [pc, #48]	@ (8001160 <MX_FREERTOS_Init+0x50>)
 8001130:	2100      	movs	r1, #0
 8001132:	480c      	ldr	r0, [pc, #48]	@ (8001164 <MX_FREERTOS_Init+0x54>)
 8001134:	f006 fc78 	bl	8007a28 <osThreadNew>
 8001138:	4603      	mov	r3, r0
 800113a:	4a0b      	ldr	r2, [pc, #44]	@ (8001168 <MX_FREERTOS_Init+0x58>)
 800113c:	6013      	str	r3, [r2, #0]

	/* creation of CanRtrTask */
	CanRtrTaskHandle = osThreadNew(StartCanRtrTask, NULL,
 800113e:	4a0b      	ldr	r2, [pc, #44]	@ (800116c <MX_FREERTOS_Init+0x5c>)
 8001140:	2100      	movs	r1, #0
 8001142:	480b      	ldr	r0, [pc, #44]	@ (8001170 <MX_FREERTOS_Init+0x60>)
 8001144:	f006 fc70 	bl	8007a28 <osThreadNew>
 8001148:	4603      	mov	r3, r0
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <MX_FREERTOS_Init+0x64>)
 800114c:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	0800d8f0 	.word	0x0800d8f0
 8001158:	08001179 	.word	0x08001179
 800115c:	2000021c 	.word	0x2000021c
 8001160:	0800d914 	.word	0x0800d914
 8001164:	0800127d 	.word	0x0800127d
 8001168:	20000220 	.word	0x20000220
 800116c:	0800d938 	.word	0x0800d938
 8001170:	08001301 	.word	0x08001301
 8001174:	200004cc 	.word	0x200004cc

08001178 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b096      	sub	sp, #88	@ 0x58
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDefaultTask */
	//	rfm95_init();
	//	uint8_t version = 0, temp = 0;
	rf_handle_t rfm95 = { .rf_nreset_port = RF_NRST_GPIO_Port, .rf_nreset_pin =
 8001180:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001184:	222c      	movs	r2, #44	@ 0x2c
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f00a f817 	bl	800b1bc <memset>
 800118e:	4b32      	ldr	r3, [pc, #200]	@ (8001258 <StartDefaultTask+0xe0>)
 8001190:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
 8001196:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001198:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800119c:	633b      	str	r3, [r7, #48]	@ 0x30
 800119e:	2310      	movs	r3, #16
 80011a0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80011a2:	4b2e      	ldr	r3, [pc, #184]	@ (800125c <StartDefaultTask+0xe4>)
 80011a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80011a6:	2320      	movs	r3, #32
 80011a8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80011aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <StartDefaultTask+0xe8>)
 80011ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80011ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001264 <StartDefaultTask+0xec>)
 80011b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RF_NRST_Pin, .rf_nss_port = SPI1_NSS_GPIO_Port, .rf_nss_pin =
	SPI1_NSS_Pin, .rf_spi_handle = &hspi1, .rf_delay_func = osDelay,
			.rf_spi_timeout = HAL_MAX_DELAY, .rf_carrier_frequency = 868000000 };

	rf_initialize_radio(&rfm95);
 80011b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fae6 	bl	8001788 <rf_initialize_radio>
	rf_set_tx_power(&rfm95, 5);
 80011bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011c0:	2105      	movs	r1, #5
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 fd7c 	bl	8001cc0 <rf_set_tx_power>

	rf_set_frequency(&rfm95, 868000000);
 80011c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011cc:	4925      	ldr	r1, [pc, #148]	@ (8001264 <StartDefaultTask+0xec>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 fd24 	bl	8001c1c <rf_set_frequency>
	uint8_t testdata = 347u;
 80011d4:	235b      	movs	r3, #91	@ 0x5b
 80011d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	//	rf_set_op_mode(&rfm95, RF_OP_MODE_RX_SINGLE);

	//	rf_listen_implicit(&rfm95, 1);
	//	rf_listen(&rfm95);

	const char test[] = "Hello.78\0";
 80011da:	4a23      	ldr	r2, [pc, #140]	@ (8001268 <StartDefaultTask+0xf0>)
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80011e2:	c303      	stmia	r3!, {r0, r1}
 80011e4:	801a      	strh	r2, [r3, #0]

	uint8_t rec_legth = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

	RTC_TimeTypeDef gTime = { 0 };
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]

	/* Infinite loop */
	for (;;) {
		//osDelay(100);
		log_info("Sending message %s", test);
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	22cf      	movs	r2, #207	@ 0xcf
 8001202:	491a      	ldr	r1, [pc, #104]	@ (800126c <StartDefaultTask+0xf4>)
 8001204:	481a      	ldr	r0, [pc, #104]	@ (8001270 <StartDefaultTask+0xf8>)
 8001206:	f009 fe91 	bl	800af2c <iprintf>
		HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_SET);
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001210:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001214:	f002 fa10 	bl	8003638 <HAL_GPIO_WritePin>
		//rf_initialize_radio(&rfm95);

		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	2200      	movs	r2, #0
 800121e:	4619      	mov	r1, r3
 8001220:	4814      	ldr	r0, [pc, #80]	@ (8001274 <StartDefaultTask+0xfc>)
 8001222:	f003 fd5c 	bl	8004cde <HAL_RTC_GetTime>

		rf_send(&rfm95, test_packet.packet_raw, 16);
 8001226:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800122a:	2210      	movs	r2, #16
 800122c:	4912      	ldr	r1, [pc, #72]	@ (8001278 <StartDefaultTask+0x100>)
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fb96 	bl	8001960 <rf_send>
		testdata += 1;
 8001234:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001238:	3301      	adds	r3, #1
 800123a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001244:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001248:	f002 f9f6 	bl	8003638 <HAL_GPIO_WritePin>
		osDelay(100);
 800124c:	2064      	movs	r0, #100	@ 0x64
 800124e:	f006 fc7d 	bl	8007b4c <osDelay>
		log_info("Sending message %s", test);
 8001252:	bf00      	nop
 8001254:	e7d2      	b.n	80011fc <StartDefaultTask+0x84>
 8001256:	bf00      	nop
 8001258:	200007b0 	.word	0x200007b0
 800125c:	48000400 	.word	0x48000400
 8001260:	08007b4d 	.word	0x08007b4d
 8001264:	33bca100 	.word	0x33bca100
 8001268:	0800d038 	.word	0x0800d038
 800126c:	0800cffc 	.word	0x0800cffc
 8001270:	0800d014 	.word	0x0800d014
 8001274:	2000078c 	.word	0x2000078c
 8001278:	20000778 	.word	0x20000778

0800127c <StartCanRxTask>:
 * @brief Function implementing the CanRxTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanRxTask */
void StartCanRxTask(void *argument) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af02      	add	r7, sp, #8
 8001282:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for (;;) {

//		CAN_Transmit(CAN_LUCY_FC_VI, NULL, NULL, CAN_RTR_REMOTE);
		if (!HAL_CAN_SafeAddTxMessage(NULL, CAN_LUCY_FC_VI, 0, &TxMailbox,
 8001284:	2302      	movs	r3, #2
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <StartCanRxTask+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	f240 1103 	movw	r1, #259	@ 0x103
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fed9 	bl	8001048 <HAL_CAN_SafeAddTxMessage>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d105      	bne.n	80012a8 <StartCanRxTask+0x2c>
		CAN_RTR_REMOTE)) {
			log_info("Sending CAN REQUEST");
 800129c:	22ff      	movs	r2, #255	@ 0xff
 800129e:	4915      	ldr	r1, [pc, #84]	@ (80012f4 <StartCanRxTask+0x78>)
 80012a0:	4815      	ldr	r0, [pc, #84]	@ (80012f8 <StartCanRxTask+0x7c>)
 80012a2:	f009 fe43 	bl	800af2c <iprintf>
 80012a6:	e005      	b.n	80012b4 <StartCanRxTask+0x38>
		} else {
			log_info("CAN TIMED OUT");
 80012a8:	f240 1201 	movw	r2, #257	@ 0x101
 80012ac:	4911      	ldr	r1, [pc, #68]	@ (80012f4 <StartCanRxTask+0x78>)
 80012ae:	4813      	ldr	r0, [pc, #76]	@ (80012fc <StartCanRxTask+0x80>)
 80012b0:	f009 fe3c 	bl	800af2c <iprintf>
		}

		if (!HAL_CAN_SafeAddTxMessage(NULL, CAN_LUCY_MOTOR_VI, 0, &TxMailbox,
 80012b4:	2302      	movs	r3, #2
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	4b0d      	ldr	r3, [pc, #52]	@ (80012f0 <StartCanRxTask+0x74>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff fec1 	bl	8001048 <HAL_CAN_SafeAddTxMessage>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d106      	bne.n	80012da <StartCanRxTask+0x5e>
		CAN_RTR_REMOTE)) {
			log_info("Sending CAN REQUEST");
 80012cc:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80012d0:	4908      	ldr	r1, [pc, #32]	@ (80012f4 <StartCanRxTask+0x78>)
 80012d2:	4809      	ldr	r0, [pc, #36]	@ (80012f8 <StartCanRxTask+0x7c>)
 80012d4:	f009 fe2a 	bl	800af2c <iprintf>
 80012d8:	e005      	b.n	80012e6 <StartCanRxTask+0x6a>
		} else {
			log_info("CAN TIMED OUT");
 80012da:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80012de:	4905      	ldr	r1, [pc, #20]	@ (80012f4 <StartCanRxTask+0x78>)
 80012e0:	4806      	ldr	r0, [pc, #24]	@ (80012fc <StartCanRxTask+0x80>)
 80012e2:	f009 fe23 	bl	800af2c <iprintf>
		}
		osDelay(1000);
 80012e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012ea:	f006 fc2f 	bl	8007b4c <osDelay>
		if (!HAL_CAN_SafeAddTxMessage(NULL, CAN_LUCY_FC_VI, 0, &TxMailbox,
 80012ee:	e7c9      	b.n	8001284 <StartCanRxTask+0x8>
 80012f0:	20000788 	.word	0x20000788
 80012f4:	0800cffc 	.word	0x0800cffc
 80012f8:	0800d044 	.word	0x0800d044
 80012fc:	0800d06c 	.word	0x0800d06c

08001300 <StartCanRtrTask>:
 * @brief Function implementing the CanRtrTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanRtrTask */
void StartCanRtrTask(void *argument) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b08e      	sub	sp, #56	@ 0x38
 8001304:	af02      	add	r7, sp, #8
 8001306:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCanRtrTask */
	CAN_Initialize();
 8001308:	f7ff fe60 	bl	8000fcc <CAN_Initialize>
	/* Infinite loop */
	uint8_t RxData[8];
	HAL_StatusTypeDef hal_stat;
	CAN_RxHeaderTypeDef RxHeader = { 0 };
 800130c:	f107 0308 	add.w	r3, r7, #8
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
 800131c:	615a      	str	r2, [r3, #20]
 800131e:	619a      	str	r2, [r3, #24]
	for (;;) {
//		HAL_CAN_GetRxFifoFillLevel(&hcan1, RxFifo);
		hal_stat = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader,
 8001320:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001324:	f107 0208 	add.w	r2, r7, #8
 8001328:	2100      	movs	r1, #0
 800132a:	4825      	ldr	r0, [pc, #148]	@ (80013c0 <StartCanRtrTask+0xc0>)
 800132c:	f001 fe15 	bl	8002f5a <HAL_CAN_GetRxMessage>
 8001330:	4603      	mov	r3, r0
 8001332:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				RxData);
		if (!hal_stat) {
 8001336:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800133a:	2b00      	cmp	r3, #0
 800133c:	d13c      	bne.n	80013b8 <StartCanRtrTask+0xb8>
			log_info("Got message");
 800133e:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8001342:	4920      	ldr	r1, [pc, #128]	@ (80013c4 <StartCanRtrTask+0xc4>)
 8001344:	4820      	ldr	r0, [pc, #128]	@ (80013c8 <StartCanRtrTask+0xc8>)
 8001346:	f009 fdf1 	bl	800af2c <iprintf>

			log_info("0x%x %d RTR: %d", RxHeader.StdId, RxHeader.DLC,
 800134a:	68b9      	ldr	r1, [r7, #8]
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	9201      	str	r2, [sp, #4]
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	460b      	mov	r3, r1
 8001356:	f44f 7292 	mov.w	r2, #292	@ 0x124
 800135a:	491a      	ldr	r1, [pc, #104]	@ (80013c4 <StartCanRtrTask+0xc4>)
 800135c:	481b      	ldr	r0, [pc, #108]	@ (80013cc <StartCanRtrTask+0xcc>)
 800135e:	f009 fde5 	bl	800af2c <iprintf>
					RxHeader.RTR);

			if (RxHeader.StdId == CAN_LUCY_FC_VI && RxHeader.DLC != 0) {
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	f240 1203 	movw	r2, #259	@ 0x103
 8001368:	4293      	cmp	r3, r2
 800136a:	d110      	bne.n	800138e <StartCanRtrTask+0x8e>
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00d      	beq.n	800138e <StartCanRtrTask+0x8e>

				memcpy(test_packet.packet_fc.can_raw_lucy_fc_vi, RxData, 8);
 8001372:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <StartCanRtrTask+0xd0>)
 8001374:	461a      	mov	r2, r3
 8001376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800137e:	e882 0003 	stmia.w	r2, {r0, r1}
				log_info("Copying 103");
 8001382:	f44f 7295 	mov.w	r2, #298	@ 0x12a
 8001386:	490f      	ldr	r1, [pc, #60]	@ (80013c4 <StartCanRtrTask+0xc4>)
 8001388:	4812      	ldr	r0, [pc, #72]	@ (80013d4 <StartCanRtrTask+0xd4>)
 800138a:	f009 fdcf 	bl	800af2c <iprintf>
			}

			if (RxHeader.StdId == CAN_LUCY_MOTOR_VI && RxHeader.DLC != 0) {
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001394:	d110      	bne.n	80013b8 <StartCanRtrTask+0xb8>
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00d      	beq.n	80013b8 <StartCanRtrTask+0xb8>

				memcpy(test_packet.packet_mtr.can_raw_lucy_motor_vi, RxData, 8);
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <StartCanRtrTask+0xd0>)
 800139e:	3308      	adds	r3, #8
 80013a0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80013a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013a8:	e883 0003 	stmia.w	r3, {r0, r1}
				log_info("Copying 102");
 80013ac:	f44f 7298 	mov.w	r2, #304	@ 0x130
 80013b0:	4904      	ldr	r1, [pc, #16]	@ (80013c4 <StartCanRtrTask+0xc4>)
 80013b2:	4809      	ldr	r0, [pc, #36]	@ (80013d8 <StartCanRtrTask+0xd8>)
 80013b4:	f009 fdba 	bl	800af2c <iprintf>
			}

		}
		osDelay(5);
 80013b8:	2005      	movs	r0, #5
 80013ba:	f006 fbc7 	bl	8007b4c <osDelay>
		hal_stat = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader,
 80013be:	e7af      	b.n	8001320 <StartCanRtrTask+0x20>
 80013c0:	200001f4 	.word	0x200001f4
 80013c4:	0800cffc 	.word	0x0800cffc
 80013c8:	0800d08c 	.word	0x0800d08c
 80013cc:	0800d0ac 	.word	0x0800d0ac
 80013d0:	20000778 	.word	0x20000778
 80013d4:	0800d0d0 	.word	0x0800d0d0
 80013d8:	0800d0f0 	.word	0x0800d0f0

080013dc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f2:	4b4a      	ldr	r3, [pc, #296]	@ (800151c <MX_GPIO_Init+0x140>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	4a49      	ldr	r2, [pc, #292]	@ (800151c <MX_GPIO_Init+0x140>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fe:	4b47      	ldr	r3, [pc, #284]	@ (800151c <MX_GPIO_Init+0x140>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b44      	ldr	r3, [pc, #272]	@ (800151c <MX_GPIO_Init+0x140>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	4a43      	ldr	r2, [pc, #268]	@ (800151c <MX_GPIO_Init+0x140>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001416:	4b41      	ldr	r3, [pc, #260]	@ (800151c <MX_GPIO_Init+0x140>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	4b3e      	ldr	r3, [pc, #248]	@ (800151c <MX_GPIO_Init+0x140>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	4a3d      	ldr	r2, [pc, #244]	@ (800151c <MX_GPIO_Init+0x140>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142e:	4b3b      	ldr	r3, [pc, #236]	@ (800151c <MX_GPIO_Init+0x140>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001440:	4837      	ldr	r0, [pc, #220]	@ (8001520 <MX_GPIO_Init+0x144>)
 8001442:	f002 f8f9 	bl	8003638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|LED_D1_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800144c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001450:	f002 f8f2 	bl	8003638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_NRST_GPIO_Port, RF_NRST_Pin, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	2120      	movs	r1, #32
 8001458:	4832      	ldr	r0, [pc, #200]	@ (8001524 <MX_GPIO_Init+0x148>)
 800145a:	f002 f8ed 	bl	8003638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_STBY_Pin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 800145e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001462:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001464:	2301      	movs	r3, #1
 8001466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	4619      	mov	r1, r3
 8001476:	482a      	ldr	r0, [pc, #168]	@ (8001520 <MX_GPIO_Init+0x144>)
 8001478:	f001 ff74 	bl	8003364 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_NSS_Pin LED_D1_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin|LED_D1_Pin;
 800147c:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8001480:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	4619      	mov	r1, r3
 8001494:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001498:	f001 ff64 	bl	8003364 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin DIO1_Pin DIO2_Pin DIO3_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin|DIO2_Pin|DIO3_Pin;
 800149c:	23c3      	movs	r3, #195	@ 0xc3
 800149e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014aa:	f107 030c 	add.w	r3, r7, #12
 80014ae:	4619      	mov	r1, r3
 80014b0:	481c      	ldr	r0, [pc, #112]	@ (8001524 <MX_GPIO_Init+0x148>)
 80014b2:	f001 ff57 	bl	8003364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	4619      	mov	r1, r3
 80014d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014d6:	f001 ff45 	bl	8003364 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO4_Pin */
  GPIO_InitStruct.Pin = DIO4_Pin;
 80014da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO4_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	4619      	mov	r1, r3
 80014f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014f4:	f001 ff36 	bl	8003364 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_NRST_Pin */
  GPIO_InitStruct.Pin = RF_NRST_Pin;
 80014f8:	2320      	movs	r3, #32
 80014fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_NRST_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	4619      	mov	r1, r3
 800150e:	4805      	ldr	r0, [pc, #20]	@ (8001524 <MX_GPIO_Init+0x148>)
 8001510:	f001 ff28 	bl	8003364 <HAL_GPIO_Init>

}
 8001514:	bf00      	nop
 8001516:	3720      	adds	r7, #32
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021000 	.word	0x40021000
 8001520:	48000800 	.word	0x48000800
 8001524:	48000400 	.word	0x48000400

08001528 <_write>:
int _write(int file, char *ptr, int len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	b29a      	uxth	r2, r3
 8001538:	f04f 33ff 	mov.w	r3, #4294967295
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	4804      	ldr	r0, [pc, #16]	@ (8001550 <_write+0x28>)
 8001540:	f005 fd12 	bl	8006f68 <HAL_UART_Transmit>
	return len;
 8001544:	687b      	ldr	r3, [r7, #4]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200008fc 	.word	0x200008fc

08001554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001558:	f001 f9ed 	bl	8002936 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155c:	f000 f816 	bl	800158c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001560:	f7ff ff3c 	bl	80013dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001564:	f001 f936 	bl	80027d4 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001568:	f7ff fc96 	bl	8000e98 <MX_CAN1_Init>
  MX_TIM1_Init();
 800156c:	f000 ff7e 	bl	800246c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001570:	f001 f828 	bl	80025c4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001574:	f000 fd74 	bl	8002060 <MX_SPI1_Init>
  MX_RTC_Init();
 8001578:	f000 fd1a 	bl	8001fb0 <MX_RTC_Init>
//  CAN_Initialize();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800157c:	f006 fa0a 	bl	8007994 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001580:	f7ff fdc6 	bl	8001110 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001584:	f006 fa2a 	bl	80079dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <main+0x34>

0800158c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b096      	sub	sp, #88	@ 0x58
 8001590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	2244      	movs	r2, #68	@ 0x44
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f009 fe0e 	bl	800b1bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a0:	463b      	mov	r3, r7
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015ae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80015b2:	f002 f867 	bl	8003684 <HAL_PWREx_ControlVoltageScaling>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015bc:	f000 f852 	bl	8001664 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80015c0:	2309      	movs	r3, #9
 80015c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015c4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80015c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015ca:	2301      	movs	r3, #1
 80015cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ce:	2302      	movs	r3, #2
 80015d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d2:	2303      	movs	r3, #3
 80015d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015d6:	2301      	movs	r3, #1
 80015d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80015da:	2314      	movs	r3, #20
 80015dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015de:	2307      	movs	r3, #7
 80015e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015e2:	2302      	movs	r3, #2
 80015e4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015e6:	2302      	movs	r3, #2
 80015e8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	4618      	mov	r0, r3
 80015f0:	f002 f89e 	bl	8003730 <HAL_RCC_OscConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0x72>
  {
    Error_Handler();
 80015fa:	f000 f833 	bl	8001664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fe:	230f      	movs	r3, #15
 8001600:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001602:	2303      	movs	r3, #3
 8001604:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001612:	463b      	mov	r3, r7
 8001614:	2104      	movs	r1, #4
 8001616:	4618      	mov	r0, r3
 8001618:	f002 fc9e 	bl	8003f58 <HAL_RCC_ClockConfig>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001622:	f000 f81f 	bl	8001664 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_16);
 8001626:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800162a:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800162e:	2000      	movs	r0, #0
 8001630:	f002 fd92 	bl	8004158 <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001634:	f002 feba 	bl	80043ac <HAL_RCC_EnableCSS>
}
 8001638:	bf00      	nop
 800163a:	3758      	adds	r7, #88	@ 0x58
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a04      	ldr	r2, [pc, #16]	@ (8001660 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d101      	bne.n	8001656 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001652:	f001 f989 	bl	8002968 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40014400 	.word	0x40014400

08001664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800166a:	b672      	cpsid	i
}
 800166c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	e002      	b.n	800167a <Error_Handler+0x16>
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	4a1a      	ldr	r2, [pc, #104]	@ (80016e8 <Error_Handler+0x84>)
 800167e:	4293      	cmp	r3, r2
 8001680:	ddf8      	ble.n	8001674 <Error_Handler+0x10>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D1_PWM_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	e002      	b.n	800168e <Error_Handler+0x2a>
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	3301      	adds	r3, #1
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4a15      	ldr	r2, [pc, #84]	@ (80016e8 <Error_Handler+0x84>)
 8001692:	4293      	cmp	r3, r2
 8001694:	ddf8      	ble.n	8001688 <Error_Handler+0x24>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D2_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	e002      	b.n	80016a2 <Error_Handler+0x3e>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3301      	adds	r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4a10      	ldr	r2, [pc, #64]	@ (80016e8 <Error_Handler+0x84>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	ddf8      	ble.n	800169c <Error_Handler+0x38>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D3_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	e002      	b.n	80016b6 <Error_Handler+0x52>
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	3301      	adds	r3, #1
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	4a0b      	ldr	r2, [pc, #44]	@ (80016e8 <Error_Handler+0x84>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	ddf8      	ble.n	80016b0 <Error_Handler+0x4c>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D1_Pin, GPIO_PIN_RESET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	e002      	b.n	80016ca <Error_Handler+0x66>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3301      	adds	r3, #1
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a06      	ldr	r2, [pc, #24]	@ (80016e8 <Error_Handler+0x84>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	ddf8      	ble.n	80016c4 <Error_Handler+0x60>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D2_Pin, GPIO_PIN_RESET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	e002      	b.n	80016de <Error_Handler+0x7a>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	3301      	adds	r3, #1
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	4a01      	ldr	r2, [pc, #4]	@ (80016e8 <Error_Handler+0x84>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	ddf8      	ble.n	80016d8 <Error_Handler+0x74>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80016e6:	e7c2      	b.n	800166e <Error_Handler+0xa>
 80016e8:	000c34ff 	.word	0x000c34ff

080016ec <rf_set_op_mode>:

#define LOG_WARN(M, ...) printf("[Abi's RFlib]" SETFG_YELLOW "[WARN] " M GR_RESET "\r\n", ##__VA_ARGS__)

#define LOG_INFO(M, ...) printf("[Abi's RFlib][INFO] " M "\r\n", ##__VA_ARGS__)

int rf_set_op_mode(rf_handle_t *rf_handle, rf_op_mode_t rf_op_mode) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	70fb      	strb	r3, [r7, #3]

	rf_register_op_mode_config_t opmode = { 0 };
 80016f8:	2300      	movs	r3, #0
 80016fa:	733b      	strb	r3, [r7, #12]

	if (!rf_spi_read_register(rf_handle, RegOpMode, &opmode.op_mode)) {
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	461a      	mov	r2, r3
 8001702:	2101      	movs	r1, #1
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 fb5b 	bl	8001dc0 <rf_spi_read_register>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d106      	bne.n	800171e <rf_set_op_mode+0x32>
		LOG_ERROR("SPI ERROR Setting op mode");
 8001710:	2216      	movs	r2, #22
 8001712:	491b      	ldr	r1, [pc, #108]	@ (8001780 <rf_set_op_mode+0x94>)
 8001714:	481b      	ldr	r0, [pc, #108]	@ (8001784 <rf_set_op_mode+0x98>)
 8001716:	f009 fc09 	bl	800af2c <iprintf>
		return 0;
 800171a:	2300      	movs	r3, #0
 800171c:	e02b      	b.n	8001776 <rf_set_op_mode+0x8a>

//	opmode.access_shared_reg = 0;

//	opmode.long_range_mode = 1; // just assume we are long range mode only.

	opmode.mode = rf_op_mode;
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	b2da      	uxtb	r2, r3
 8001726:	7b3b      	ldrb	r3, [r7, #12]
 8001728:	f362 0302 	bfi	r3, r2, #0, #3
 800172c:	733b      	strb	r3, [r7, #12]

	if (!rf_spi_write_register(rf_handle, RegOpMode, opmode.op_mode)) {
 800172e:	7b3b      	ldrb	r3, [r7, #12]
 8001730:	461a      	mov	r2, r3
 8001732:	2101      	movs	r1, #1
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 fb91 	bl	8001e5c <rf_spi_write_register>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d106      	bne.n	800174e <rf_set_op_mode+0x62>
		LOG_ERROR("SPI ERROR Setting op mode");
 8001740:	2223      	movs	r2, #35	@ 0x23
 8001742:	490f      	ldr	r1, [pc, #60]	@ (8001780 <rf_set_op_mode+0x94>)
 8001744:	480f      	ldr	r0, [pc, #60]	@ (8001784 <rf_set_op_mode+0x98>)
 8001746:	f009 fbf1 	bl	800af2c <iprintf>
		return 0;
 800174a:	2300      	movs	r3, #0
 800174c:	e013      	b.n	8001776 <rf_set_op_mode+0x8a>
	}

	opmode.op_mode = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	733b      	strb	r3, [r7, #12]

	if (!rf_spi_read_register(rf_handle, RegOpMode, &opmode.op_mode)) {
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	461a      	mov	r2, r3
 8001758:	2101      	movs	r1, #1
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 fb30 	bl	8001dc0 <rf_spi_read_register>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d106      	bne.n	8001774 <rf_set_op_mode+0x88>
		LOG_ERROR("SPI ERROR Setting op mode");
 8001766:	222a      	movs	r2, #42	@ 0x2a
 8001768:	4905      	ldr	r1, [pc, #20]	@ (8001780 <rf_set_op_mode+0x94>)
 800176a:	4806      	ldr	r0, [pc, #24]	@ (8001784 <rf_set_op_mode+0x98>)
 800176c:	f009 fbde 	bl	800af2c <iprintf>
		return 0;
 8001770:	2300      	movs	r3, #0
 8001772:	e000      	b.n	8001776 <rf_set_op_mode+0x8a>
	}

	return 1;
 8001774:	2301      	movs	r3, #1

}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	0800d110 	.word	0x0800d110
 8001784:	0800d128 	.word	0x0800d128

08001788 <rf_initialize_radio>:

int rf_initialize_radio(rf_handle_t *rf_handle) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	if (rf_handle == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <rf_initialize_radio+0x12>
		return 0;
 8001796:	2300      	movs	r3, #0
 8001798:	e0cd      	b.n	8001936 <rf_initialize_radio+0x1ae>

	if (rf_handle->rf_spi_timeout == NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <rf_initialize_radio+0x20>
		rf_handle->rf_spi_timeout = 100;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2264      	movs	r2, #100	@ 0x64
 80017a6:	605a      	str	r2, [r3, #4]

	if (rf_handle->rf_module_identifier == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d103      	bne.n	80017ba <rf_initialize_radio+0x32>
		rf_handle->rf_module_identifier = -1;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	22ff      	movs	r2, #255	@ 0xff
 80017b6:	f883 2020 	strb.w	r2, [r3, #32]

	if (rf_handle->rf_carrier_frequency == NULL) {
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d106      	bne.n	80017d0 <rf_initialize_radio+0x48>
		LOG_ERROR("Carrier Frequency not defined.");
 80017c2:	223d      	movs	r2, #61	@ 0x3d
 80017c4:	495e      	ldr	r1, [pc, #376]	@ (8001940 <rf_initialize_radio+0x1b8>)
 80017c6:	485f      	ldr	r0, [pc, #380]	@ (8001944 <rf_initialize_radio+0x1bc>)
 80017c8:	f009 fbb0 	bl	800af2c <iprintf>
		return 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	e0b2      	b.n	8001936 <rf_initialize_radio+0x1ae>
	}

	printf("\r\n");
 80017d0:	485d      	ldr	r0, [pc, #372]	@ (8001948 <rf_initialize_radio+0x1c0>)
 80017d2:	f009 fc13 	bl	800affc <puts>

	LOG_INFO(SETFG_GREEN "Initializing module" GR_RESET,
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017dc:	4619      	mov	r1, r3
 80017de:	485b      	ldr	r0, [pc, #364]	@ (800194c <rf_initialize_radio+0x1c4>)
 80017e0:	f009 fba4 	bl	800af2c <iprintf>
			rf_handle->rf_module_identifier);

	rf_reset(rf_handle);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 fb79 	bl	8001edc <rf_reset>

// check version
	uint8_t version;
	if (!rf_spi_read_register(rf_handle, RegVersion, &version)) {
 80017ea:	f107 0317 	add.w	r3, r7, #23
 80017ee:	461a      	mov	r2, r3
 80017f0:	2142      	movs	r1, #66	@ 0x42
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 fae4 	bl	8001dc0 <rf_spi_read_register>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d106      	bne.n	800180c <rf_initialize_radio+0x84>
		LOG_ERROR("Module did not return a version; SPI Error");
 80017fe:	224b      	movs	r2, #75	@ 0x4b
 8001800:	494f      	ldr	r1, [pc, #316]	@ (8001940 <rf_initialize_radio+0x1b8>)
 8001802:	4853      	ldr	r0, [pc, #332]	@ (8001950 <rf_initialize_radio+0x1c8>)
 8001804:	f009 fb92 	bl	800af2c <iprintf>
		return 0;
 8001808:	2300      	movs	r3, #0
 800180a:	e094      	b.n	8001936 <rf_initialize_radio+0x1ae>
	}

	if (RFM9x_VER != version) {
 800180c:	7dfb      	ldrb	r3, [r7, #23]
 800180e:	2b12      	cmp	r3, #18
 8001810:	d006      	beq.n	8001820 <rf_initialize_radio+0x98>
		LOG_ERROR("Module did not return the correct version");
 8001812:	2250      	movs	r2, #80	@ 0x50
 8001814:	494a      	ldr	r1, [pc, #296]	@ (8001940 <rf_initialize_radio+0x1b8>)
 8001816:	484f      	ldr	r0, [pc, #316]	@ (8001954 <rf_initialize_radio+0x1cc>)
 8001818:	f009 fb88 	bl	800af2c <iprintf>
		return 0;
 800181c:	2300      	movs	r3, #0
 800181e:	e08a      	b.n	8001936 <rf_initialize_radio+0x1ae>
	}

	LOG_INFO("Module Available; \x1b[34;1;4mVersion: 0x%x\x1b[0m", version);
 8001820:	7dfb      	ldrb	r3, [r7, #23]
 8001822:	4619      	mov	r1, r3
 8001824:	484c      	ldr	r0, [pc, #304]	@ (8001958 <rf_initialize_radio+0x1d0>)
 8001826:	f009 fb81 	bl	800af2c <iprintf>

// Module must be placed in sleep mode before switching to lora.
	rf_register_op_mode_config_t opmode = { 0 };
 800182a:	2300      	movs	r3, #0
 800182c:	753b      	strb	r3, [r7, #20]
	opmode.long_range_mode = 1;
 800182e:	7d3b      	ldrb	r3, [r7, #20]
 8001830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001834:	753b      	strb	r3, [r7, #20]
	opmode.mode = RF_OP_MODE_SLEEP;
 8001836:	7d3b      	ldrb	r3, [r7, #20]
 8001838:	f36f 0302 	bfc	r3, #0, #3
 800183c:	753b      	strb	r3, [r7, #20]
	if (!rf_spi_write_register(rf_handle, RegOpMode, opmode.op_mode))
 800183e:	7d3b      	ldrb	r3, [r7, #20]
 8001840:	461a      	mov	r2, r3
 8001842:	2101      	movs	r1, #1
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 fb09 	bl	8001e5c <rf_spi_write_register>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <rf_initialize_radio+0xcc>
		return 0;
 8001850:	2300      	movs	r3, #0
 8001852:	e070      	b.n	8001936 <rf_initialize_radio+0x1ae>
//	rf_register_dio_mapping_2_config_t diomapping2 = { 0 };
//	if (!rf_spi_write_register(rf_handle, RegDioMapping2,
//			diomapping2.dio_mapping_2))
//		return 0;

	if (rf_handle->rf_post_init_clbk != NULL) {
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <rf_initialize_radio+0xda>
		rf_handle->rf_post_init_clbk();
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4798      	blx	r3
	}

// Set up TX and RX FIFO base addresses.
	if (!rf_spi_write_register(rf_handle, RegFifoTxBaseAddr, 0x00)) // previously 0x80
 8001862:	2200      	movs	r2, #0
 8001864:	210e      	movs	r1, #14
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 faf8 	bl	8001e5c <rf_spi_write_register>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <rf_initialize_radio+0xee>
		return 0;
 8001872:	2300      	movs	r3, #0
 8001874:	e05f      	b.n	8001936 <rf_initialize_radio+0x1ae>
	if (!rf_spi_write_register(rf_handle, RegFifoRxBaseAddr, 0x00))
 8001876:	2200      	movs	r2, #0
 8001878:	210f      	movs	r1, #15
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 faee 	bl	8001e5c <rf_spi_write_register>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <rf_initialize_radio+0x102>
		return 0;
 8001886:	2300      	movs	r3, #0
 8001888:	e055      	b.n	8001936 <rf_initialize_radio+0x1ae>

// Maximum payload length of the RFM95 is 64.
	if (!rf_spi_write_register(rf_handle, RegMaxPayloadLength, 64))
 800188a:	2240      	movs	r2, #64	@ 0x40
 800188c:	2123      	movs	r1, #35	@ 0x23
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 fae4 	bl	8001e5c <rf_spi_write_register>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <rf_initialize_radio+0x116>
		return 0;
 800189a:	2300      	movs	r3, #0
 800189c:	e04b      	b.n	8001936 <rf_initialize_radio+0x1ae>

// make sure this is defined
	rf_set_frequency(rf_handle, rf_handle->rf_carrier_frequency);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a2:	4619      	mov	r1, r3
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 f9b9 	bl	8001c1c <rf_set_frequency>

// Set LNA to the highest gain with 150% boost.
	rf_register_lna_config_t lnaboost = { 0 };
 80018aa:	2300      	movs	r3, #0
 80018ac:	743b      	strb	r3, [r7, #16]
	if (!rf_spi_read_register(rf_handle, RegLna, &lnaboost.lna_config))
 80018ae:	f107 0310 	add.w	r3, r7, #16
 80018b2:	461a      	mov	r2, r3
 80018b4:	210c      	movs	r1, #12
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 fa82 	bl	8001dc0 <rf_spi_read_register>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <rf_initialize_radio+0x13e>
		return 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e037      	b.n	8001936 <rf_initialize_radio+0x1ae>
	lnaboost.LnaBoostHf = 0b11;
 80018c6:	7c3b      	ldrb	r3, [r7, #16]
 80018c8:	f043 0303 	orr.w	r3, r3, #3
 80018cc:	743b      	strb	r3, [r7, #16]
	if (!rf_spi_write_register(rf_handle, RegLna, lnaboost.lna_config))
 80018ce:	7c3b      	ldrb	r3, [r7, #16]
 80018d0:	461a      	mov	r2, r3
 80018d2:	210c      	movs	r1, #12
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fac1 	bl	8001e5c <rf_spi_write_register>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <rf_initialize_radio+0x15c>
		return 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	e028      	b.n	8001936 <rf_initialize_radio+0x1ae>

// Set auto AGC
	rf_register_modem_config_3_t autoagc = { 0 };
 80018e4:	2300      	movs	r3, #0
 80018e6:	733b      	strb	r3, [r7, #12]
	autoagc.agc_auto_on = 1;
 80018e8:	7b3b      	ldrb	r3, [r7, #12]
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	733b      	strb	r3, [r7, #12]
	if (!rf_spi_write_register(rf_handle, RegModemConfig3,
 80018f0:	7b3b      	ldrb	r3, [r7, #12]
 80018f2:	461a      	mov	r2, r3
 80018f4:	2126      	movs	r1, #38	@ 0x26
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 fab0 	bl	8001e5c <rf_spi_write_register>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <rf_initialize_radio+0x17e>
			autoagc.modem_config_3))
		return 0;
 8001902:	2300      	movs	r3, #0
 8001904:	e017      	b.n	8001936 <rf_initialize_radio+0x1ae>

// Set module power to 17dbm.
	if (!rf_set_tx_power(rf_handle, 10))
 8001906:	210a      	movs	r1, #10
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f9d9 	bl	8001cc0 <rf_set_tx_power>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <rf_initialize_radio+0x190>
		return 0;
 8001914:	2300      	movs	r3, #0
 8001916:	e00e      	b.n	8001936 <rf_initialize_radio+0x1ae>
//	idle.long_range_mode = 1;
//	idle.mode = RF_OP_MODE_STDBY;
//	if (!rf_spi_write_register(rf_handle, RegOpMode, idle.op_mode))
//		return 0;

	if (!rf_set_op_mode(rf_handle, RF_OP_MODE_STDBY)) {
 8001918:	2101      	movs	r1, #1
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff fee6 	bl	80016ec <rf_set_op_mode>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d106      	bne.n	8001934 <rf_initialize_radio+0x1ac>
		LOG_ERROR("OP Mode Init error");
 8001926:	2295      	movs	r2, #149	@ 0x95
 8001928:	4905      	ldr	r1, [pc, #20]	@ (8001940 <rf_initialize_radio+0x1b8>)
 800192a:	480c      	ldr	r0, [pc, #48]	@ (800195c <rf_initialize_radio+0x1d4>)
 800192c:	f009 fafe 	bl	800af2c <iprintf>
		return 0;
 8001930:	2300      	movs	r3, #0
 8001932:	e000      	b.n	8001936 <rf_initialize_radio+0x1ae>
	}

	return 1;
 8001934:	2301      	movs	r3, #1
}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	0800d110 	.word	0x0800d110
 8001944:	0800d16c 	.word	0x0800d16c
 8001948:	0800d1b4 	.word	0x0800d1b4
 800194c:	0800d1b8 	.word	0x0800d1b8
 8001950:	0800d1ec 	.word	0x0800d1ec
 8001954:	0800d240 	.word	0x0800d240
 8001958:	0800d294 	.word	0x0800d294
 800195c:	0800d2d8 	.word	0x0800d2d8

08001960 <rf_send>:

int rf_send(rf_handle_t *rf_handle, uint8_t *buffer, uint8_t length_bytes) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b08e      	sub	sp, #56	@ 0x38
 8001964:	af02      	add	r7, sp, #8
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	4613      	mov	r3, r2
 800196c:	71fb      	strb	r3, [r7, #7]

	rf_register_op_mode_config_t current_op_mode = { 0 };
 800196e:	2300      	movs	r3, #0
 8001970:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	if (!rf_spi_read_register(rf_handle, RegOpMode, &current_op_mode.op_mode))
 8001974:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001978:	461a      	mov	r2, r3
 800197a:	2101      	movs	r1, #1
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 fa1f 	bl	8001dc0 <rf_spi_read_register>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <rf_send+0x2c>
		return 0;
 8001988:	2300      	movs	r3, #0
 800198a:	e138      	b.n	8001bfe <rf_send+0x29e>

// check if in transmit mode.
	if (RF_OP_MODE_TX == current_op_mode.mode) {
 800198c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b03      	cmp	r3, #3
 8001998:	d104      	bne.n	80019a4 <rf_send+0x44>
		LOG_WARN("Module in TX unable to send.");
 800199a:	489b      	ldr	r0, [pc, #620]	@ (8001c08 <rf_send+0x2a8>)
 800199c:	f009 fb2e 	bl	800affc <puts>
		return 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	e12c      	b.n	8001bfe <rf_send+0x29e>
	}
// here, since the module is not transmitting lets clear the inturrpt flags for tx done.
	rf_register_irq_flags_t irq_flags = { 0 };
 80019a4:	2300      	movs	r3, #0
 80019a6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	if (!rf_spi_read_register(rf_handle, RegIrqFlags, &irq_flags.irq_flags))
 80019aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ae:	461a      	mov	r2, r3
 80019b0:	2112      	movs	r1, #18
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 fa04 	bl	8001dc0 <rf_spi_read_register>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <rf_send+0x62>
		return 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	e11d      	b.n	8001bfe <rf_send+0x29e>
// if the flag is still set
	if (irq_flags.tx_done) {
 80019c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d014      	beq.n	80019fa <rf_send+0x9a>
		// then clear it.
		irq_flags.irq_flags = 0b0; // first set all else to 0
 80019d0:	2300      	movs	r3, #0
 80019d2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		irq_flags.tx_done = 1;
 80019d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80019da:	f043 0308 	orr.w	r3, r3, #8
 80019de:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		if (!rf_spi_write_register(rf_handle, RegIrqFlags, irq_flags.irq_flags))
 80019e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80019e6:	461a      	mov	r2, r3
 80019e8:	2112      	movs	r1, #18
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 fa36 	bl	8001e5c <rf_spi_write_register>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <rf_send+0x9a>
			return 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e101      	b.n	8001bfe <rf_send+0x29e>
	}

// put in idle lora
	rf_register_op_mode_config_t idle_op_mode = { 0 };
 80019fa:	2300      	movs	r3, #0
 80019fc:	f887 3020 	strb.w	r3, [r7, #32]
	idle_op_mode.long_range_mode = 1;
 8001a00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a08:	f887 3020 	strb.w	r3, [r7, #32]
	idle_op_mode.mode = RF_OP_MODE_STDBY;
 8001a0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f362 0302 	bfi	r3, r2, #0, #3
 8001a16:	f887 3020 	strb.w	r3, [r7, #32]
	if (!rf_spi_write_register(rf_handle, RegOpMode, idle_op_mode.op_mode))
 8001a1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	2101      	movs	r1, #1
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 fa1a 	bl	8001e5c <rf_spi_write_register>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <rf_send+0xd2>
		return 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e0e5      	b.n	8001bfe <rf_send+0x29e>

// TODO: add a global that configures the implicit or explicit header mode.

	rf_register_modem_config_1_t modem_config_1 = { 0 };
 8001a32:	2300      	movs	r3, #0
 8001a34:	773b      	strb	r3, [r7, #28]
	if (!rf_spi_read_register(rf_handle, RegModemConfig1,
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	211d      	movs	r1, #29
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f000 f9be 	bl	8001dc0 <rf_spi_read_register>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <rf_send+0xee>
			&modem_config_1.modem_config_1))
		return 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e0d7      	b.n	8001bfe <rf_send+0x29e>

// Default to explicit header.
	modem_config_1.implicit_header_mode_on = 0;
 8001a4e:	7f3b      	ldrb	r3, [r7, #28]
 8001a50:	f36f 0300 	bfc	r3, #0, #1
 8001a54:	773b      	strb	r3, [r7, #28]
	if (!rf_spi_write_register(rf_handle, RegModemConfig1,
 8001a56:	7f3b      	ldrb	r3, [r7, #28]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	211d      	movs	r1, #29
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 f9fd 	bl	8001e5c <rf_spi_write_register>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <rf_send+0x10c>
			modem_config_1.modem_config_1))
		return 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e0c8      	b.n	8001bfe <rf_send+0x29e>

// Reset fifo address and payload length

	if (!rf_spi_write_register(rf_handle, RegFifoAddrPtr, 0))
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	210d      	movs	r1, #13
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 f9f3 	bl	8001e5c <rf_spi_write_register>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <rf_send+0x120>
		return 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e0be      	b.n	8001bfe <rf_send+0x29e>

	if (!rf_spi_write_register(rf_handle, RegPayloadLength, 0)) // set to 0 for now.
 8001a80:	2200      	movs	r2, #0
 8001a82:	2122      	movs	r1, #34	@ 0x22
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f000 f9e9 	bl	8001e5c <rf_spi_write_register>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <rf_send+0x134>
		return 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	e0b4      	b.n	8001bfe <rf_send+0x29e>

// add data

// check size TODO: optimize this since it is constant.
	uint8_t max_payload_length = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	76fb      	strb	r3, [r7, #27]
	if (!rf_spi_read_register(rf_handle, RegMaxPayloadLength,
 8001a98:	f107 031b 	add.w	r3, r7, #27
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	2123      	movs	r1, #35	@ 0x23
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 f98d 	bl	8001dc0 <rf_spi_read_register>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <rf_send+0x150>
			&max_payload_length))
		return 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	e0a6      	b.n	8001bfe <rf_send+0x29e>

	if (max_payload_length < length_bytes) {
 8001ab0:	7efb      	ldrb	r3, [r7, #27]
 8001ab2:	79fa      	ldrb	r2, [r7, #7]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d909      	bls.n	8001acc <rf_send+0x16c>
		printf(
				"\x1b[31;4;3;1m[Abi's RFlib] [%d] [ERROR] Max payload length exceeded with %d; max is %d.\x1b[0m\r\n",
				rf_handle->rf_module_identifier, max_payload_length,
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f893 3020 	ldrb.w	r3, [r3, #32]
		printf(
 8001abe:	4619      	mov	r1, r3
 8001ac0:	7efb      	ldrb	r3, [r7, #27]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	4851      	ldr	r0, [pc, #324]	@ (8001c0c <rf_send+0x2ac>)
 8001ac8:	f009 fa30 	bl	800af2c <iprintf>
				length_bytes);
	}

	uint8_t current_payload_length = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	76bb      	strb	r3, [r7, #26]
	if (!rf_spi_read_register(rf_handle, RegPayloadLength,
 8001ad0:	f107 031a 	add.w	r3, r7, #26
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	2122      	movs	r1, #34	@ 0x22
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f971 	bl	8001dc0 <rf_spi_read_register>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <rf_send+0x188>
			&current_payload_length))
		return 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e08a      	b.n	8001bfe <rf_send+0x29e>

// never should happen cuz we reset the payload length above
	if (current_payload_length + length_bytes > max_payload_length) {
 8001ae8:	7ebb      	ldrb	r3, [r7, #26]
 8001aea:	461a      	mov	r2, r3
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	4413      	add	r3, r2
 8001af0:	7efa      	ldrb	r2, [r7, #27]
 8001af2:	4293      	cmp	r3, r2
 8001af4:	dd0d      	ble.n	8001b12 <rf_send+0x1b2>
		printf(
				"\x1b[31;4;3;1m[Abi's RFlib] [%d] [ERROR] Old buffer not clear and adding current bytes exceeds max payload %d, prev %d, new %d.\x1b[0m\r\n",
				rf_handle->rf_module_identifier, max_payload_length,
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f893 3020 	ldrb.w	r3, [r3, #32]
		printf(
 8001afc:	4619      	mov	r1, r3
 8001afe:	7efb      	ldrb	r3, [r7, #27]
 8001b00:	461a      	mov	r2, r3
 8001b02:	7ebb      	ldrb	r3, [r7, #26]
 8001b04:	4618      	mov	r0, r3
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4840      	ldr	r0, [pc, #256]	@ (8001c10 <rf_send+0x2b0>)
 8001b0e:	f009 fa0d 	bl	800af2c <iprintf>
				current_payload_length, length_bytes);
	}

// fill fifo
// write data to module
	for (int i = 0; i < length_bytes; i++) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b16:	e015      	b.n	8001b44 <rf_send+0x1e4>
		if (!rf_spi_write_register(rf_handle, RegFifo, buffer[i])) {
 8001b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	2100      	movs	r1, #0
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f999 	bl	8001e5c <rf_spi_write_register>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d106      	bne.n	8001b3e <rf_send+0x1de>
			LOG_ERROR("FIFO Write ERROR");
 8001b30:	22f0      	movs	r2, #240	@ 0xf0
 8001b32:	4938      	ldr	r1, [pc, #224]	@ (8001c14 <rf_send+0x2b4>)
 8001b34:	4838      	ldr	r0, [pc, #224]	@ (8001c18 <rf_send+0x2b8>)
 8001b36:	f009 f9f9 	bl	800af2c <iprintf>
			return 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e05f      	b.n	8001bfe <rf_send+0x29e>
	for (int i = 0; i < length_bytes; i++) {
 8001b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b40:	3301      	adds	r3, #1
 8001b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	dbe5      	blt.n	8001b18 <rf_send+0x1b8>
		}
	}

// update the payload length
	if (!rf_spi_write_register(rf_handle, RegPayloadLength, length_bytes))
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	2122      	movs	r1, #34	@ 0x22
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 f982 	bl	8001e5c <rf_spi_write_register>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <rf_send+0x202>
		return 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e04d      	b.n	8001bfe <rf_send+0x29e>

// end packet and send
	rf_register_dio_mapping_1_config_t dio_mapping_1 = { 0 };
 8001b62:	2300      	movs	r3, #0
 8001b64:	763b      	strb	r3, [r7, #24]

// TODO: use dio0 inturrupt

// put in tx mode
	rf_register_op_mode_config_t tx_mode_config = { 0 };
 8001b66:	2300      	movs	r3, #0
 8001b68:	753b      	strb	r3, [r7, #20]
	tx_mode_config.long_range_mode = 1;
 8001b6a:	7d3b      	ldrb	r3, [r7, #20]
 8001b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b70:	753b      	strb	r3, [r7, #20]
	tx_mode_config.mode = RF_OP_MODE_TX;
 8001b72:	7d3b      	ldrb	r3, [r7, #20]
 8001b74:	2203      	movs	r2, #3
 8001b76:	f362 0302 	bfi	r3, r2, #0, #3
 8001b7a:	753b      	strb	r3, [r7, #20]

	if (!rf_spi_write_register(rf_handle, RegOpMode, tx_mode_config.op_mode))
 8001b7c:	7d3b      	ldrb	r3, [r7, #20]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2101      	movs	r1, #1
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 f96a 	bl	8001e5c <rf_spi_write_register>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <rf_send+0x232>
		return 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e035      	b.n	8001bfe <rf_send+0x29e>

// Blocking

	rf_register_irq_flags_t tx_done_flags = { 0 };
 8001b92:	2300      	movs	r3, #0
 8001b94:	743b      	strb	r3, [r7, #16]
	if (!rf_spi_read_register(rf_handle, RegIrqFlags, &tx_done_flags.irq_flags))
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2112      	movs	r1, #18
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 f90e 	bl	8001dc0 <rf_spi_read_register>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d111      	bne.n	8001bce <rf_send+0x26e>
		return 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e027      	b.n	8001bfe <rf_send+0x29e>

	while (!tx_done_flags.tx_done) {
		rf_handle->rf_delay_func(10);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	200a      	movs	r0, #10
 8001bb4:	4798      	blx	r3
		if (!rf_spi_read_register(rf_handle, RegIrqFlags,
 8001bb6:	f107 0310 	add.w	r3, r7, #16
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2112      	movs	r1, #18
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 f8fe 	bl	8001dc0 <rf_spi_read_register>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <rf_send+0x26e>
				&tx_done_flags.irq_flags))
			return 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e017      	b.n	8001bfe <rf_send+0x29e>
	while (!tx_done_flags.tx_done) {
 8001bce:	7c3b      	ldrb	r3, [r7, #16]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0e9      	beq.n	8001bae <rf_send+0x24e>
	}

// done sending
// clear flags
	tx_done_flags.irq_flags = 0; // 0 out the rest
 8001bda:	2300      	movs	r3, #0
 8001bdc:	743b      	strb	r3, [r7, #16]
	tx_done_flags.tx_done = 1;	 // set the tx done bit to clear.
 8001bde:	7c3b      	ldrb	r3, [r7, #16]
 8001be0:	f043 0308 	orr.w	r3, r3, #8
 8001be4:	743b      	strb	r3, [r7, #16]

// clear the tx done flag for next packet.
	if (!rf_spi_write_register(rf_handle, RegIrqFlags, tx_done_flags.irq_flags))
 8001be6:	7c3b      	ldrb	r3, [r7, #16]
 8001be8:	461a      	mov	r2, r3
 8001bea:	2112      	movs	r1, #18
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 f935 	bl	8001e5c <rf_spi_write_register>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <rf_send+0x29c>
		return 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	e000      	b.n	8001bfe <rf_send+0x29e>

	return 1;
 8001bfc:	2301      	movs	r3, #1
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3730      	adds	r7, #48	@ 0x30
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	0800d314 	.word	0x0800d314
 8001c0c:	0800d350 	.word	0x0800d350
 8001c10:	0800d3ac 	.word	0x0800d3ac
 8001c14:	0800d110 	.word	0x0800d110
 8001c18:	0800d430 	.word	0x0800d430

08001c1c <rf_set_frequency>:

int rf_set_frequency(rf_handle_t *rf_handle, uint32_t rf_carrier_frequency) {
 8001c1c:	b5b0      	push	{r4, r5, r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]

// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t) rf_carrier_frequency << 19) / 32000000;
 8001c26:	6839      	ldr	r1, [r7, #0]
 8001c28:	2000      	movs	r0, #0
 8001c2a:	460a      	mov	r2, r1
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	0b55      	lsrs	r5, r2, #13
 8001c30:	04d4      	lsls	r4, r2, #19
 8001c32:	4a22      	ldr	r2, [pc, #136]	@ (8001cbc <rf_set_frequency+0xa0>)
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	4620      	mov	r0, r4
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	f7fe ffb4 	bl	8000ba8 <__aeabi_uldivmod>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!rf_spi_write_register(rf_handle, RegFrfMsb, (uint8_t) (frf >> 16)))
 8001c48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	0c02      	lsrs	r2, r0, #16
 8001c56:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001c5a:	0c0b      	lsrs	r3, r1, #16
 8001c5c:	b2d3      	uxtb	r3, r2
 8001c5e:	461a      	mov	r2, r3
 8001c60:	2106      	movs	r1, #6
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f8fa 	bl	8001e5c <rf_spi_write_register>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <rf_set_frequency+0x56>
		return 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e020      	b.n	8001cb4 <rf_set_frequency+0x98>
	if (!rf_spi_write_register(rf_handle, RegFrfMid, (uint8_t) (frf >> 8)))
 8001c72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	0a02      	lsrs	r2, r0, #8
 8001c80:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001c84:	0a0b      	lsrs	r3, r1, #8
 8001c86:	b2d3      	uxtb	r3, r2
 8001c88:	461a      	mov	r2, r3
 8001c8a:	2107      	movs	r1, #7
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f8e5 	bl	8001e5c <rf_spi_write_register>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <rf_set_frequency+0x80>
		return 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e00b      	b.n	8001cb4 <rf_set_frequency+0x98>
	if (!rf_spi_write_register(rf_handle, RegFrfLsb, (uint8_t) (frf >> 0)))
 8001c9c:	7a3b      	ldrb	r3, [r7, #8]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	2108      	movs	r1, #8
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f8da 	bl	8001e5c <rf_spi_write_register>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <rf_set_frequency+0x96>
		return 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e000      	b.n	8001cb4 <rf_set_frequency+0x98>

	return 1;
 8001cb2:	2301      	movs	r3, #1
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bdb0      	pop	{r4, r5, r7, pc}
 8001cbc:	01e84800 	.word	0x01e84800

08001cc0 <rf_set_tx_power>:

int rf_set_tx_power(rf_handle_t *rf_handle, uint8_t rf_power_dbm) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	70fb      	strb	r3, [r7, #3]

	if (!((rf_power_dbm >= 2 && rf_power_dbm <= 17) || (rf_power_dbm == 20))) {
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d902      	bls.n	8001cd8 <rf_set_tx_power+0x18>
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	2b11      	cmp	r3, #17
 8001cd6:	d90b      	bls.n	8001cf0 <rf_set_tx_power+0x30>
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	2b14      	cmp	r3, #20
 8001cdc:	d008      	beq.n	8001cf0 <rf_set_tx_power+0x30>

		LOG_ERROR("Unable to set power to %d out of range.", rf_power_dbm);
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8001ce4:	4932      	ldr	r1, [pc, #200]	@ (8001db0 <rf_set_tx_power+0xf0>)
 8001ce6:	4833      	ldr	r0, [pc, #204]	@ (8001db4 <rf_set_tx_power+0xf4>)
 8001ce8:	f009 f920 	bl	800af2c <iprintf>
		return 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	e05b      	b.n	8001da8 <rf_set_tx_power+0xe8>
	}

	rf_register_pa_config_t reg_pa_config;
	uint8_t reg_pa_dac_config = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]

	if (rf_power_dbm >= 2 || rf_power_dbm <= 17) {
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d802      	bhi.n	8001d00 <rf_set_tx_power+0x40>
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	2b11      	cmp	r3, #17
 8001cfe:	d814      	bhi.n	8001d2a <rf_set_tx_power+0x6a>
		reg_pa_config.max_power = 7;
 8001d00:	7b3b      	ldrb	r3, [r7, #12]
 8001d02:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001d06:	733b      	strb	r3, [r7, #12]
		reg_pa_config.pa_select = 1;
 8001d08:	7b3b      	ldrb	r3, [r7, #12]
 8001d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d0e:	733b      	strb	r3, [r7, #12]
		reg_pa_config.output_power = (rf_power_dbm - 2);
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	3b02      	subs	r3, #2
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	7b3b      	ldrb	r3, [r7, #12]
 8001d1e:	f362 0303 	bfi	r3, r2, #0, #4
 8001d22:	733b      	strb	r3, [r7, #12]
		reg_pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 8001d24:	2384      	movs	r3, #132	@ 0x84
 8001d26:	73fb      	strb	r3, [r7, #15]
 8001d28:	e010      	b.n	8001d4c <rf_set_tx_power+0x8c>
	} else if (rf_power_dbm == 20) {
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	2b14      	cmp	r3, #20
 8001d2e:	d10d      	bne.n	8001d4c <rf_set_tx_power+0x8c>
		reg_pa_config.max_power = 7;
 8001d30:	7b3b      	ldrb	r3, [r7, #12]
 8001d32:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001d36:	733b      	strb	r3, [r7, #12]
		reg_pa_config.pa_select = 1;
 8001d38:	7b3b      	ldrb	r3, [r7, #12]
 8001d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d3e:	733b      	strb	r3, [r7, #12]
		reg_pa_config.output_power = 15;
 8001d40:	7b3b      	ldrb	r3, [r7, #12]
 8001d42:	f043 030f 	orr.w	r3, r3, #15
 8001d46:	733b      	strb	r3, [r7, #12]
		reg_pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8001d48:	2387      	movs	r3, #135	@ 0x87
 8001d4a:	73fb      	strb	r3, [r7, #15]
	}

	if (!rf_spi_write_register(rf_handle, RegPaConfig,
 8001d4c:	7b3b      	ldrb	r3, [r7, #12]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	2109      	movs	r1, #9
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f882 	bl	8001e5c <rf_spi_write_register>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d108      	bne.n	8001d70 <rf_set_tx_power+0xb0>
			reg_pa_config.pa_config)) {

		LOG_ERROR("Unable to set power to %d SPI write error.", rf_power_dbm);
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 8001d64:	4912      	ldr	r1, [pc, #72]	@ (8001db0 <rf_set_tx_power+0xf0>)
 8001d66:	4814      	ldr	r0, [pc, #80]	@ (8001db8 <rf_set_tx_power+0xf8>)
 8001d68:	f009 f8e0 	bl	800af2c <iprintf>
		return 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e01b      	b.n	8001da8 <rf_set_tx_power+0xe8>
	}
	if (!rf_spi_write_register(rf_handle, RegPaDac, reg_pa_dac_config)) {
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	461a      	mov	r2, r3
 8001d74:	214d      	movs	r1, #77	@ 0x4d
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f870 	bl	8001e5c <rf_spi_write_register>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d108      	bne.n	8001d94 <rf_set_tx_power+0xd4>

		LOG_ERROR("Unable to set power to %d SPI write error.", rf_power_dbm);
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	f240 124d 	movw	r2, #333	@ 0x14d
 8001d88:	4909      	ldr	r1, [pc, #36]	@ (8001db0 <rf_set_tx_power+0xf0>)
 8001d8a:	480b      	ldr	r0, [pc, #44]	@ (8001db8 <rf_set_tx_power+0xf8>)
 8001d8c:	f009 f8ce 	bl	800af2c <iprintf>
		return 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e009      	b.n	8001da8 <rf_set_tx_power+0xe8>
	}

	rf_set_ocp(rf_handle, 240);
 8001d94:	21f0      	movs	r1, #240	@ 0xf0
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f8c6 	bl	8001f28 <rf_set_ocp>

	LOG_INFO("Set power to %d.", rf_power_dbm);
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4806      	ldr	r0, [pc, #24]	@ (8001dbc <rf_set_tx_power+0xfc>)
 8001da2:	f009 f8c3 	bl	800af2c <iprintf>

	return 1;
 8001da6:	2301      	movs	r3, #1
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	0800d110 	.word	0x0800d110
 8001db4:	0800d46c 	.word	0x0800d46c
 8001db8:	0800d4c0 	.word	0x0800d4c0
 8001dbc:	0800d514 	.word	0x0800d514

08001dc0 <rf_spi_read_register>:

	return 1;
}

int rf_spi_read_register(rf_handle_t *rf_handle, uint8_t rf_register_address,
		uint8_t *rf_register_result) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	72fb      	strb	r3, [r7, #11]

// 0 the MSB since that is the wnr bit. we are reading so it must be 0.
	uint8_t prep_register = rf_register_address & 0x7f;
 8001dce:	7afb      	ldrb	r3, [r7, #11]
 8001dd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(rf_handle->rf_nss_port, rf_handle->rf_nss_pin,
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6898      	ldr	r0, [r3, #8]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	899b      	ldrh	r3, [r3, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	4619      	mov	r1, r3
 8001de4:	f001 fc28 	bl	8003638 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	if (HAL_SPI_Transmit(rf_handle->rf_spi_handle, &prep_register, 1,
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f107 0117 	add.w	r1, r7, #23
 8001df4:	2201      	movs	r2, #1
 8001df6:	f003 f942 	bl	800507e <HAL_SPI_Transmit>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d008      	beq.n	8001e12 <rf_spi_read_register+0x52>
			rf_handle->rf_spi_timeout) != HAL_OK) {
		LOG_ERROR("Failed to read register 0x%x", rf_register_address);
 8001e00:	7afb      	ldrb	r3, [r7, #11]
 8001e02:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001e06:	4913      	ldr	r1, [pc, #76]	@ (8001e54 <rf_spi_read_register+0x94>)
 8001e08:	4813      	ldr	r0, [pc, #76]	@ (8001e58 <rf_spi_read_register+0x98>)
 8001e0a:	f009 f88f 	bl	800af2c <iprintf>
		return 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e01c      	b.n	8001e4c <rf_spi_read_register+0x8c>
	}

	if (HAL_SPI_Receive(rf_handle->rf_spi_handle, rf_register_result, 1,
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6818      	ldr	r0, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	f003 faa4 	bl	800536a <HAL_SPI_Receive>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d008      	beq.n	8001e3a <rf_spi_read_register+0x7a>
			rf_handle->rf_spi_timeout) != HAL_OK) {
		LOG_ERROR("Failed to read register 0x%x", rf_register_address);
 8001e28:	7afb      	ldrb	r3, [r7, #11]
 8001e2a:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8001e2e:	4909      	ldr	r1, [pc, #36]	@ (8001e54 <rf_spi_read_register+0x94>)
 8001e30:	4809      	ldr	r0, [pc, #36]	@ (8001e58 <rf_spi_read_register+0x98>)
 8001e32:	f009 f87b 	bl	800af2c <iprintf>
		return 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e008      	b.n	8001e4c <rf_spi_read_register+0x8c>
	}

	HAL_GPIO_WritePin(rf_handle->rf_nss_port, rf_handle->rf_nss_pin,
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6898      	ldr	r0, [r3, #8]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	899b      	ldrh	r3, [r3, #12]
 8001e42:	2201      	movs	r2, #1
 8001e44:	4619      	mov	r1, r3
 8001e46:	f001 fbf7 	bl	8003638 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	return 1;
 8001e4a:	2301      	movs	r3, #1
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	0800d110 	.word	0x0800d110
 8001e58:	0800d53c 	.word	0x0800d53c

08001e5c <rf_spi_write_register>:

int rf_spi_write_register(rf_handle_t *rf_handle, uint8_t rf_register_address,
		uint8_t rf_register_value) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af02      	add	r7, sp, #8
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	70fb      	strb	r3, [r7, #3]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	70bb      	strb	r3, [r7, #2]
// 1 the MSB since that is the wnr bit. we are writing so it must be 1.
	uint8_t prep_register_buffer[2] = { ((uint8_t) rf_register_address | 0x80u),
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	733b      	strb	r3, [r7, #12]
 8001e76:	78bb      	ldrb	r3, [r7, #2]
 8001e78:	737b      	strb	r3, [r7, #13]
			rf_register_value };

	HAL_GPIO_WritePin(rf_handle->rf_nss_port, rf_handle->rf_nss_pin,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6898      	ldr	r0, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	899b      	ldrh	r3, [r3, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	4619      	mov	r1, r3
 8001e86:	f001 fbd7 	bl	8003638 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	if (HAL_SPI_Transmit(rf_handle->rf_spi_handle, prep_register_buffer, 2,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6818      	ldr	r0, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f107 010c 	add.w	r1, r7, #12
 8001e96:	2202      	movs	r2, #2
 8001e98:	f003 f8f1 	bl	800507e <HAL_SPI_Transmit>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00b      	beq.n	8001eba <rf_spi_write_register+0x5e>
			rf_handle->rf_spi_timeout) != HAL_OK) {
		LOG_ERROR("Failed to set register 0x%x : 0x%x", rf_register_address,
 8001ea2:	78fa      	ldrb	r2, [r7, #3]
 8001ea4:	78bb      	ldrb	r3, [r7, #2]
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8001eae:	4909      	ldr	r1, [pc, #36]	@ (8001ed4 <rf_spi_write_register+0x78>)
 8001eb0:	4809      	ldr	r0, [pc, #36]	@ (8001ed8 <rf_spi_write_register+0x7c>)
 8001eb2:	f009 f83b 	bl	800af2c <iprintf>
				rf_register_value);
		return 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e008      	b.n	8001ecc <rf_spi_write_register+0x70>
	}

	HAL_GPIO_WritePin(rf_handle->rf_nss_port, rf_handle->rf_nss_pin,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6898      	ldr	r0, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	899b      	ldrh	r3, [r3, #12]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f001 fbb7 	bl	8003638 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	return 1;
 8001eca:	2301      	movs	r3, #1
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	0800d110 	.word	0x0800d110
 8001ed8:	0800d584 	.word	0x0800d584

08001edc <rf_reset>:

int rf_reset(rf_handle_t *rf_handle) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]

//	printf(
//			"\x1b[33;1;3;4m[Abi's RFlib] [%d] [WARN] : Reseting module\x1b[0m\r\n",
//			rf_handle->rf_module_identifier);

	LOG_WARN("Reseting module");
 8001ee4:	480f      	ldr	r0, [pc, #60]	@ (8001f24 <rf_reset+0x48>)
 8001ee6:	f009 f889 	bl	800affc <puts>

	HAL_GPIO_WritePin(rf_handle->rf_nreset_port, rf_handle->rf_nreset_pin,
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6918      	ldr	r0, [r3, #16]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	8a9b      	ldrh	r3, [r3, #20]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f001 fb9f 	bl	8003638 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	rf_handle->rf_delay_func(100);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	2064      	movs	r0, #100	@ 0x64
 8001f00:	4798      	blx	r3
	HAL_GPIO_WritePin(rf_handle->rf_nreset_port, rf_handle->rf_nreset_pin,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6918      	ldr	r0, [r3, #16]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	8a9b      	ldrh	r3, [r3, #20]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f001 fb93 	bl	8003638 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	rf_handle->rf_delay_func(100);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	2064      	movs	r0, #100	@ 0x64
 8001f18:	4798      	blx	r3

	return 1;
 8001f1a:	2301      	movs	r3, #1
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	0800d5d0 	.word	0x0800d5d0

08001f28 <rf_set_ocp>:
	}

	return 1;
}

int rf_set_ocp(rf_handle_t *rf_handle, uint8_t rf_ocp_level) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	70fb      	strb	r3, [r7, #3]
	uint8_t ocpTrim = 27;
 8001f34:	231b      	movs	r3, #27
 8001f36:	73fb      	strb	r3, [r7, #15]

	if (rf_ocp_level <= 120) {
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	2b78      	cmp	r3, #120	@ 0x78
 8001f3c:	d809      	bhi.n	8001f52 <rf_set_ocp+0x2a>
		ocpTrim = (rf_ocp_level - 45) / 5;
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	3b2d      	subs	r3, #45	@ 0x2d
 8001f42:	4a18      	ldr	r2, [pc, #96]	@ (8001fa4 <rf_set_ocp+0x7c>)
 8001f44:	fb82 1203 	smull	r1, r2, r2, r3
 8001f48:	1052      	asrs	r2, r2, #1
 8001f4a:	17db      	asrs	r3, r3, #31
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	73fb      	strb	r3, [r7, #15]
 8001f50:	e00b      	b.n	8001f6a <rf_set_ocp+0x42>
	} else if (rf_ocp_level <= 240) {
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	2bf0      	cmp	r3, #240	@ 0xf0
 8001f56:	d808      	bhi.n	8001f6a <rf_set_ocp+0x42>
		ocpTrim = (rf_ocp_level + 30) / 10;
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	331e      	adds	r3, #30
 8001f5c:	4a11      	ldr	r2, [pc, #68]	@ (8001fa4 <rf_set_ocp+0x7c>)
 8001f5e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f62:	1092      	asrs	r2, r2, #2
 8001f64:	17db      	asrs	r3, r3, #31
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	73fb      	strb	r3, [r7, #15]
	}

	if (!rf_spi_write_register(rf_handle, RegOcp, 0x20 | (0x1F & ocpTrim))) {
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	f043 0320 	orr.w	r3, r3, #32
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	210b      	movs	r1, #11
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff6d 	bl	8001e5c <rf_spi_write_register>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d107      	bne.n	8001f98 <rf_set_ocp+0x70>
		LOG_ERROR("OCP ERROR");
 8001f88:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8001f8c:	4906      	ldr	r1, [pc, #24]	@ (8001fa8 <rf_set_ocp+0x80>)
 8001f8e:	4807      	ldr	r0, [pc, #28]	@ (8001fac <rf_set_ocp+0x84>)
 8001f90:	f008 ffcc 	bl	800af2c <iprintf>
		return 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	e000      	b.n	8001f9a <rf_set_ocp+0x72>
	}

	return 1;
 8001f98:	2301      	movs	r3, #1

}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	66666667 	.word	0x66666667
 8001fa8:	0800d110 	.word	0x0800d110
 8001fac:	0800d870 	.word	0x0800d870

08001fb0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001fb4:	4b10      	ldr	r3, [pc, #64]	@ (8001ff8 <MX_RTC_Init+0x48>)
 8001fb6:	4a11      	ldr	r2, [pc, #68]	@ (8001ffc <MX_RTC_Init+0x4c>)
 8001fb8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001fba:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff8 <MX_RTC_Init+0x48>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff8 <MX_RTC_Init+0x48>)
 8001fc2:	227f      	movs	r2, #127	@ 0x7f
 8001fc4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <MX_RTC_Init+0x48>)
 8001fc8:	22ff      	movs	r2, #255	@ 0xff
 8001fca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff8 <MX_RTC_Init+0x48>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001fd2:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <MX_RTC_Init+0x48>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001fd8:	4b07      	ldr	r3, [pc, #28]	@ (8001ff8 <MX_RTC_Init+0x48>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001fde:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <MX_RTC_Init+0x48>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001fe4:	4804      	ldr	r0, [pc, #16]	@ (8001ff8 <MX_RTC_Init+0x48>)
 8001fe6:	f002 fd55 	bl	8004a94 <HAL_RTC_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001ff0:	f7ff fb38 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	2000078c 	.word	0x2000078c
 8001ffc:	40002800 	.word	0x40002800

08002000 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b098      	sub	sp, #96	@ 0x60
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002008:	f107 030c 	add.w	r3, r7, #12
 800200c:	2254      	movs	r2, #84	@ 0x54
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f009 f8d3 	bl	800b1bc <memset>
  if(rtcHandle->Instance==RTC)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a0f      	ldr	r2, [pc, #60]	@ (8002058 <HAL_RTC_MspInit+0x58>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d117      	bne.n	8002050 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002020:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002024:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002026:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800202a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	4618      	mov	r0, r3
 8002032:	f002 fa47 	bl	80044c4 <HAL_RCCEx_PeriphCLKConfig>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800203c:	f7ff fb12 	bl	8001664 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002040:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_RTC_MspInit+0x5c>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002046:	4a05      	ldr	r2, [pc, #20]	@ (800205c <HAL_RTC_MspInit+0x5c>)
 8002048:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800204c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002050:	bf00      	nop
 8002052:	3760      	adds	r7, #96	@ 0x60
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40002800 	.word	0x40002800
 800205c:	40021000 	.word	0x40021000

08002060 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002064:	4b1b      	ldr	r3, [pc, #108]	@ (80020d4 <MX_SPI1_Init+0x74>)
 8002066:	4a1c      	ldr	r2, [pc, #112]	@ (80020d8 <MX_SPI1_Init+0x78>)
 8002068:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800206a:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <MX_SPI1_Init+0x74>)
 800206c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002070:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002072:	4b18      	ldr	r3, [pc, #96]	@ (80020d4 <MX_SPI1_Init+0x74>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002078:	4b16      	ldr	r3, [pc, #88]	@ (80020d4 <MX_SPI1_Init+0x74>)
 800207a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800207e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002080:	4b14      	ldr	r3, [pc, #80]	@ (80020d4 <MX_SPI1_Init+0x74>)
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002086:	4b13      	ldr	r3, [pc, #76]	@ (80020d4 <MX_SPI1_Init+0x74>)
 8002088:	2200      	movs	r2, #0
 800208a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800208c:	4b11      	ldr	r3, [pc, #68]	@ (80020d4 <MX_SPI1_Init+0x74>)
 800208e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002092:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002094:	4b0f      	ldr	r3, [pc, #60]	@ (80020d4 <MX_SPI1_Init+0x74>)
 8002096:	2228      	movs	r2, #40	@ 0x28
 8002098:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800209a:	4b0e      	ldr	r3, [pc, #56]	@ (80020d4 <MX_SPI1_Init+0x74>)
 800209c:	2200      	movs	r2, #0
 800209e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020a0:	4b0c      	ldr	r3, [pc, #48]	@ (80020d4 <MX_SPI1_Init+0x74>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a6:	4b0b      	ldr	r3, [pc, #44]	@ (80020d4 <MX_SPI1_Init+0x74>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80020ac:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <MX_SPI1_Init+0x74>)
 80020ae:	2207      	movs	r2, #7
 80020b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020b2:	4b08      	ldr	r3, [pc, #32]	@ (80020d4 <MX_SPI1_Init+0x74>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020b8:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <MX_SPI1_Init+0x74>)
 80020ba:	2208      	movs	r2, #8
 80020bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020be:	4805      	ldr	r0, [pc, #20]	@ (80020d4 <MX_SPI1_Init+0x74>)
 80020c0:	f002 ff3a 	bl	8004f38 <HAL_SPI_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80020ca:	f7ff facb 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200007b0 	.word	0x200007b0
 80020d8:	40013000 	.word	0x40013000

080020dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	@ 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a17      	ldr	r2, [pc, #92]	@ (8002158 <HAL_SPI_MspInit+0x7c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d128      	bne.n	8002150 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020fe:	4b17      	ldr	r3, [pc, #92]	@ (800215c <HAL_SPI_MspInit+0x80>)
 8002100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002102:	4a16      	ldr	r2, [pc, #88]	@ (800215c <HAL_SPI_MspInit+0x80>)
 8002104:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002108:	6613      	str	r3, [r2, #96]	@ 0x60
 800210a:	4b14      	ldr	r3, [pc, #80]	@ (800215c <HAL_SPI_MspInit+0x80>)
 800210c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800210e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002116:	4b11      	ldr	r3, [pc, #68]	@ (800215c <HAL_SPI_MspInit+0x80>)
 8002118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211a:	4a10      	ldr	r2, [pc, #64]	@ (800215c <HAL_SPI_MspInit+0x80>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002122:	4b0e      	ldr	r3, [pc, #56]	@ (800215c <HAL_SPI_MspInit+0x80>)
 8002124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800212e:	23e0      	movs	r3, #224	@ 0xe0
 8002130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800213e:	2305      	movs	r3, #5
 8002140:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	4619      	mov	r1, r3
 8002148:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800214c:	f001 f90a 	bl	8003364 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002150:	bf00      	nop
 8002152:	3728      	adds	r7, #40	@ 0x28
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40013000 	.word	0x40013000
 800215c:	40021000 	.word	0x40021000

08002160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002166:	4b11      	ldr	r3, [pc, #68]	@ (80021ac <HAL_MspInit+0x4c>)
 8002168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800216a:	4a10      	ldr	r2, [pc, #64]	@ (80021ac <HAL_MspInit+0x4c>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6613      	str	r3, [r2, #96]	@ 0x60
 8002172:	4b0e      	ldr	r3, [pc, #56]	@ (80021ac <HAL_MspInit+0x4c>)
 8002174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	4b0b      	ldr	r3, [pc, #44]	@ (80021ac <HAL_MspInit+0x4c>)
 8002180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002182:	4a0a      	ldr	r2, [pc, #40]	@ (80021ac <HAL_MspInit+0x4c>)
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002188:	6593      	str	r3, [r2, #88]	@ 0x58
 800218a:	4b08      	ldr	r3, [pc, #32]	@ (80021ac <HAL_MspInit+0x4c>)
 800218c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002196:	2200      	movs	r2, #0
 8002198:	210f      	movs	r1, #15
 800219a:	f06f 0001 	mvn.w	r0, #1
 800219e:	f001 f8b7 	bl	8003310 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000

080021b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08c      	sub	sp, #48	@ 0x30
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80021be:	4b2e      	ldr	r3, [pc, #184]	@ (8002278 <HAL_InitTick+0xc8>)
 80021c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002278 <HAL_InitTick+0xc8>)
 80021c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80021ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002278 <HAL_InitTick+0xc8>)
 80021cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021d6:	f107 020c 	add.w	r2, r7, #12
 80021da:	f107 0310 	add.w	r3, r7, #16
 80021de:	4611      	mov	r1, r2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f002 f8b1 	bl	8004348 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80021e6:	f002 f899 	bl	800431c <HAL_RCC_GetPCLK2Freq>
 80021ea:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ee:	4a23      	ldr	r2, [pc, #140]	@ (800227c <HAL_InitTick+0xcc>)
 80021f0:	fba2 2303 	umull	r2, r3, r2, r3
 80021f4:	0c9b      	lsrs	r3, r3, #18
 80021f6:	3b01      	subs	r3, #1
 80021f8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80021fa:	4b21      	ldr	r3, [pc, #132]	@ (8002280 <HAL_InitTick+0xd0>)
 80021fc:	4a21      	ldr	r2, [pc, #132]	@ (8002284 <HAL_InitTick+0xd4>)
 80021fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8002200:	4b1f      	ldr	r3, [pc, #124]	@ (8002280 <HAL_InitTick+0xd0>)
 8002202:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002206:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8002208:	4a1d      	ldr	r2, [pc, #116]	@ (8002280 <HAL_InitTick+0xd0>)
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 800220e:	4b1c      	ldr	r3, [pc, #112]	@ (8002280 <HAL_InitTick+0xd0>)
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002214:	4b1a      	ldr	r3, [pc, #104]	@ (8002280 <HAL_InitTick+0xd0>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800221a:	4b19      	ldr	r3, [pc, #100]	@ (8002280 <HAL_InitTick+0xd0>)
 800221c:	2200      	movs	r2, #0
 800221e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8002220:	4817      	ldr	r0, [pc, #92]	@ (8002280 <HAL_InitTick+0xd0>)
 8002222:	f003 fdb5 	bl	8005d90 <HAL_TIM_Base_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800222c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002230:	2b00      	cmp	r3, #0
 8002232:	d11b      	bne.n	800226c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8002234:	4812      	ldr	r0, [pc, #72]	@ (8002280 <HAL_InitTick+0xd0>)
 8002236:	f003 fe03 	bl	8005e40 <HAL_TIM_Base_Start_IT>
 800223a:	4603      	mov	r3, r0
 800223c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002240:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002244:	2b00      	cmp	r3, #0
 8002246:	d111      	bne.n	800226c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002248:	2019      	movs	r0, #25
 800224a:	f001 f87d 	bl	8003348 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b0f      	cmp	r3, #15
 8002252:	d808      	bhi.n	8002266 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002254:	2200      	movs	r2, #0
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	2019      	movs	r0, #25
 800225a:	f001 f859 	bl	8003310 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800225e:	4a0a      	ldr	r2, [pc, #40]	@ (8002288 <HAL_InitTick+0xd8>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	e002      	b.n	800226c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800226c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002270:	4618      	mov	r0, r3
 8002272:	3730      	adds	r7, #48	@ 0x30
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000
 800227c:	431bde83 	.word	0x431bde83
 8002280:	20000814 	.word	0x20000814
 8002284:	40014400 	.word	0x40014400
 8002288:	20000004 	.word	0x20000004

0800228c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002290:	f002 f89c 	bl	80043cc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <NMI_Handler+0x8>

08002298 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.Pin = LED_D3_PWM_Pin;
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	HAL_GPIO_Init(LED_D3_PWM_GPIO_Port, &GPIO_InitStruct);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800229c:	bf00      	nop
 800229e:	e7fd      	b.n	800229c <HardFault_Handler+0x4>

080022a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a4:	bf00      	nop
 80022a6:	e7fd      	b.n	80022a4 <MemManage_Handler+0x4>

080022a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ac:	bf00      	nop
 80022ae:	e7fd      	b.n	80022ac <BusFault_Handler+0x4>

080022b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b4:	bf00      	nop
 80022b6:	e7fd      	b.n	80022b4 <UsageFault_Handler+0x4>

080022b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  if (htim1.Instance != NULL)
 80022cc:	4b07      	ldr	r3, [pc, #28]	@ (80022ec <TIM1_UP_TIM16_IRQHandler+0x24>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <TIM1_UP_TIM16_IRQHandler+0x12>
  {
    HAL_TIM_IRQHandler(&htim1);
 80022d4:	4805      	ldr	r0, [pc, #20]	@ (80022ec <TIM1_UP_TIM16_IRQHandler+0x24>)
 80022d6:	f003 fe68 	bl	8005faa <HAL_TIM_IRQHandler>
  }
  if (htim16.Instance != NULL)
 80022da:	4b05      	ldr	r3, [pc, #20]	@ (80022f0 <TIM1_UP_TIM16_IRQHandler+0x28>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <TIM1_UP_TIM16_IRQHandler+0x20>
  {
    HAL_TIM_IRQHandler(&htim16);
 80022e2:	4803      	ldr	r0, [pc, #12]	@ (80022f0 <TIM1_UP_TIM16_IRQHandler+0x28>)
 80022e4:	f003 fe61 	bl	8005faa <HAL_TIM_IRQHandler>
  }
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000864 	.word	0x20000864
 80022f0:	20000814 	.word	0x20000814

080022f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return 1;
 80022f8:	2301      	movs	r3, #1
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <_kill>:

int _kill(int pid, int sig)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800230e:	f008 fffd 	bl	800b30c <__errno>
 8002312:	4603      	mov	r3, r0
 8002314:	2216      	movs	r2, #22
 8002316:	601a      	str	r2, [r3, #0]
  return -1;
 8002318:	f04f 33ff 	mov.w	r3, #4294967295
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <_exit>:

void _exit (int status)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800232c:	f04f 31ff 	mov.w	r1, #4294967295
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff ffe7 	bl	8002304 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002336:	bf00      	nop
 8002338:	e7fd      	b.n	8002336 <_exit+0x12>

0800233a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e00a      	b.n	8002362 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800234c:	f3af 8000 	nop.w
 8002350:	4601      	mov	r1, r0
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	60ba      	str	r2, [r7, #8]
 8002358:	b2ca      	uxtb	r2, r1
 800235a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	3301      	adds	r3, #1
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	429a      	cmp	r2, r3
 8002368:	dbf0      	blt.n	800234c <_read+0x12>
  }

  return len;
 800236a:	687b      	ldr	r3, [r7, #4]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800237c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800239c:	605a      	str	r2, [r3, #4]
  return 0;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_isatty>:

int _isatty(int file)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023b4:	2301      	movs	r3, #1
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e4:	4a14      	ldr	r2, [pc, #80]	@ (8002438 <_sbrk+0x5c>)
 80023e6:	4b15      	ldr	r3, [pc, #84]	@ (800243c <_sbrk+0x60>)
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f0:	4b13      	ldr	r3, [pc, #76]	@ (8002440 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f8:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <_sbrk+0x64>)
 80023fa:	4a12      	ldr	r2, [pc, #72]	@ (8002444 <_sbrk+0x68>)
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023fe:	4b10      	ldr	r3, [pc, #64]	@ (8002440 <_sbrk+0x64>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	429a      	cmp	r2, r3
 800240a:	d207      	bcs.n	800241c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800240c:	f008 ff7e 	bl	800b30c <__errno>
 8002410:	4603      	mov	r3, r0
 8002412:	220c      	movs	r2, #12
 8002414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002416:	f04f 33ff 	mov.w	r3, #4294967295
 800241a:	e009      	b.n	8002430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800241c:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002422:	4b07      	ldr	r3, [pc, #28]	@ (8002440 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	4a05      	ldr	r2, [pc, #20]	@ (8002440 <_sbrk+0x64>)
 800242c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800242e:	68fb      	ldr	r3, [r7, #12]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20010000 	.word	0x20010000
 800243c:	00000400 	.word	0x00000400
 8002440:	20000860 	.word	0x20000860
 8002444:	20002478 	.word	0x20002478

08002448 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800244c:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <SystemInit+0x20>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002452:	4a05      	ldr	r2, [pc, #20]	@ (8002468 <SystemInit+0x20>)
 8002454:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002458:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b09a      	sub	sp, #104	@ 0x68
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002472:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002480:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800248c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
 800249c:	615a      	str	r2, [r3, #20]
 800249e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024a0:	1d3b      	adds	r3, r7, #4
 80024a2:	222c      	movs	r2, #44	@ 0x2c
 80024a4:	2100      	movs	r1, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	f008 fe88 	bl	800b1bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024ac:	4b43      	ldr	r3, [pc, #268]	@ (80025bc <MX_TIM1_Init+0x150>)
 80024ae:	4a44      	ldr	r2, [pc, #272]	@ (80025c0 <MX_TIM1_Init+0x154>)
 80024b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 80024b2:	4b42      	ldr	r3, [pc, #264]	@ (80025bc <MX_TIM1_Init+0x150>)
 80024b4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80024b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ba:	4b40      	ldr	r3, [pc, #256]	@ (80025bc <MX_TIM1_Init+0x150>)
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80024c0:	4b3e      	ldr	r3, [pc, #248]	@ (80025bc <MX_TIM1_Init+0x150>)
 80024c2:	2263      	movs	r2, #99	@ 0x63
 80024c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c6:	4b3d      	ldr	r3, [pc, #244]	@ (80025bc <MX_TIM1_Init+0x150>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024cc:	4b3b      	ldr	r3, [pc, #236]	@ (80025bc <MX_TIM1_Init+0x150>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024d2:	4b3a      	ldr	r3, [pc, #232]	@ (80025bc <MX_TIM1_Init+0x150>)
 80024d4:	2280      	movs	r2, #128	@ 0x80
 80024d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024d8:	4838      	ldr	r0, [pc, #224]	@ (80025bc <MX_TIM1_Init+0x150>)
 80024da:	f003 fc59 	bl	8005d90 <HAL_TIM_Base_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80024e4:	f7ff f8be 	bl	8001664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80024f2:	4619      	mov	r1, r3
 80024f4:	4831      	ldr	r0, [pc, #196]	@ (80025bc <MX_TIM1_Init+0x150>)
 80024f6:	f003 ff73 	bl	80063e0 <HAL_TIM_ConfigClockSource>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002500:	f7ff f8b0 	bl	8001664 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002504:	482d      	ldr	r0, [pc, #180]	@ (80025bc <MX_TIM1_Init+0x150>)
 8002506:	f003 fcef 	bl	8005ee8 <HAL_TIM_PWM_Init>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002510:	f7ff f8a8 	bl	8001664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002514:	2300      	movs	r3, #0
 8002516:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002518:	2300      	movs	r3, #0
 800251a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800251c:	2300      	movs	r3, #0
 800251e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002520:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002524:	4619      	mov	r1, r3
 8002526:	4825      	ldr	r0, [pc, #148]	@ (80025bc <MX_TIM1_Init+0x150>)
 8002528:	f004 fbd4 	bl	8006cd4 <HAL_TIMEx_MasterConfigSynchronization>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002532:	f7ff f897 	bl	8001664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002536:	2360      	movs	r3, #96	@ 0x60
 8002538:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800253e:	2300      	movs	r3, #0
 8002540:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002542:	2300      	movs	r3, #0
 8002544:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002552:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002556:	2204      	movs	r2, #4
 8002558:	4619      	mov	r1, r3
 800255a:	4818      	ldr	r0, [pc, #96]	@ (80025bc <MX_TIM1_Init+0x150>)
 800255c:	f003 fe2c 	bl	80061b8 <HAL_TIM_PWM_ConfigChannel>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002566:	f7ff f87d 	bl	8001664 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800256a:	2300      	movs	r3, #0
 800256c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800257e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002582:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002588:	2300      	movs	r3, #0
 800258a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800258c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002590:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002596:	2300      	movs	r3, #0
 8002598:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800259a:	1d3b      	adds	r3, r7, #4
 800259c:	4619      	mov	r1, r3
 800259e:	4807      	ldr	r0, [pc, #28]	@ (80025bc <MX_TIM1_Init+0x150>)
 80025a0:	f004 fbfe 	bl	8006da0 <HAL_TIMEx_ConfigBreakDeadTime>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80025aa:	f7ff f85b 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80025ae:	4803      	ldr	r0, [pc, #12]	@ (80025bc <MX_TIM1_Init+0x150>)
 80025b0:	f000 f8b6 	bl	8002720 <HAL_TIM_MspPostInit>

}
 80025b4:	bf00      	nop
 80025b6:	3768      	adds	r7, #104	@ 0x68
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20000864 	.word	0x20000864
 80025c0:	40012c00 	.word	0x40012c00

080025c4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08e      	sub	sp, #56	@ 0x38
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d8:	f107 031c 	add.w	r3, r7, #28
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025e4:	463b      	mov	r3, r7
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	60da      	str	r2, [r3, #12]
 80025f0:	611a      	str	r2, [r3, #16]
 80025f2:	615a      	str	r2, [r3, #20]
 80025f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025f6:	4b2d      	ldr	r3, [pc, #180]	@ (80026ac <MX_TIM2_Init+0xe8>)
 80025f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 80025fe:	4b2b      	ldr	r3, [pc, #172]	@ (80026ac <MX_TIM2_Init+0xe8>)
 8002600:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002604:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002606:	4b29      	ldr	r3, [pc, #164]	@ (80026ac <MX_TIM2_Init+0xe8>)
 8002608:	2200      	movs	r2, #0
 800260a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800260c:	4b27      	ldr	r3, [pc, #156]	@ (80026ac <MX_TIM2_Init+0xe8>)
 800260e:	2263      	movs	r2, #99	@ 0x63
 8002610:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002612:	4b26      	ldr	r3, [pc, #152]	@ (80026ac <MX_TIM2_Init+0xe8>)
 8002614:	2200      	movs	r2, #0
 8002616:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002618:	4b24      	ldr	r3, [pc, #144]	@ (80026ac <MX_TIM2_Init+0xe8>)
 800261a:	2280      	movs	r2, #128	@ 0x80
 800261c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800261e:	4823      	ldr	r0, [pc, #140]	@ (80026ac <MX_TIM2_Init+0xe8>)
 8002620:	f003 fbb6 	bl	8005d90 <HAL_TIM_Base_Init>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800262a:	f7ff f81b 	bl	8001664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800262e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002632:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002634:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002638:	4619      	mov	r1, r3
 800263a:	481c      	ldr	r0, [pc, #112]	@ (80026ac <MX_TIM2_Init+0xe8>)
 800263c:	f003 fed0 	bl	80063e0 <HAL_TIM_ConfigClockSource>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002646:	f7ff f80d 	bl	8001664 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800264a:	4818      	ldr	r0, [pc, #96]	@ (80026ac <MX_TIM2_Init+0xe8>)
 800264c:	f003 fc4c 	bl	8005ee8 <HAL_TIM_PWM_Init>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002656:	f7ff f805 	bl	8001664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002662:	f107 031c 	add.w	r3, r7, #28
 8002666:	4619      	mov	r1, r3
 8002668:	4810      	ldr	r0, [pc, #64]	@ (80026ac <MX_TIM2_Init+0xe8>)
 800266a:	f004 fb33 	bl	8006cd4 <HAL_TIMEx_MasterConfigSynchronization>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002674:	f7fe fff6 	bl	8001664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002678:	2360      	movs	r3, #96	@ 0x60
 800267a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002680:	2300      	movs	r3, #0
 8002682:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002688:	463b      	mov	r3, r7
 800268a:	2204      	movs	r2, #4
 800268c:	4619      	mov	r1, r3
 800268e:	4807      	ldr	r0, [pc, #28]	@ (80026ac <MX_TIM2_Init+0xe8>)
 8002690:	f003 fd92 	bl	80061b8 <HAL_TIM_PWM_ConfigChannel>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800269a:	f7fe ffe3 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800269e:	4803      	ldr	r0, [pc, #12]	@ (80026ac <MX_TIM2_Init+0xe8>)
 80026a0:	f000 f83e 	bl	8002720 <HAL_TIM_MspPostInit>

}
 80026a4:	bf00      	nop
 80026a6:	3738      	adds	r7, #56	@ 0x38
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	200008b0 	.word	0x200008b0

080026b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a16      	ldr	r2, [pc, #88]	@ (8002718 <HAL_TIM_Base_MspInit+0x68>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d114      	bne.n	80026ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026c2:	4b16      	ldr	r3, [pc, #88]	@ (800271c <HAL_TIM_Base_MspInit+0x6c>)
 80026c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c6:	4a15      	ldr	r2, [pc, #84]	@ (800271c <HAL_TIM_Base_MspInit+0x6c>)
 80026c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80026ce:	4b13      	ldr	r3, [pc, #76]	@ (800271c <HAL_TIM_Base_MspInit+0x6c>)
 80026d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	210f      	movs	r1, #15
 80026de:	2019      	movs	r0, #25
 80026e0:	f000 fe16 	bl	8003310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80026e4:	2019      	movs	r0, #25
 80026e6:	f000 fe2f 	bl	8003348 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80026ea:	e010      	b.n	800270e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026f4:	d10b      	bne.n	800270e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026f6:	4b09      	ldr	r3, [pc, #36]	@ (800271c <HAL_TIM_Base_MspInit+0x6c>)
 80026f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fa:	4a08      	ldr	r2, [pc, #32]	@ (800271c <HAL_TIM_Base_MspInit+0x6c>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6593      	str	r3, [r2, #88]	@ 0x58
 8002702:	4b06      	ldr	r3, [pc, #24]	@ (800271c <HAL_TIM_Base_MspInit+0x6c>)
 8002704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
}
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40012c00 	.word	0x40012c00
 800271c:	40021000 	.word	0x40021000

08002720 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08a      	sub	sp, #40	@ 0x28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a23      	ldr	r2, [pc, #140]	@ (80027cc <HAL_TIM_MspPostInit+0xac>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d11e      	bne.n	8002780 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002742:	4b23      	ldr	r3, [pc, #140]	@ (80027d0 <HAL_TIM_MspPostInit+0xb0>)
 8002744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002746:	4a22      	ldr	r2, [pc, #136]	@ (80027d0 <HAL_TIM_MspPostInit+0xb0>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800274e:	4b20      	ldr	r3, [pc, #128]	@ (80027d0 <HAL_TIM_MspPostInit+0xb0>)
 8002750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LED_D2_PWM_Pin;
 800275a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800275e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002768:	2300      	movs	r3, #0
 800276a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800276c:	2301      	movs	r3, #1
 800276e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_D2_PWM_GPIO_Port, &GPIO_InitStruct);
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	4619      	mov	r1, r3
 8002776:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800277a:	f000 fdf3 	bl	8003364 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800277e:	e021      	b.n	80027c4 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM2)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002788:	d11c      	bne.n	80027c4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278a:	4b11      	ldr	r3, [pc, #68]	@ (80027d0 <HAL_TIM_MspPostInit+0xb0>)
 800278c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278e:	4a10      	ldr	r2, [pc, #64]	@ (80027d0 <HAL_TIM_MspPostInit+0xb0>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002796:	4b0e      	ldr	r3, [pc, #56]	@ (80027d0 <HAL_TIM_MspPostInit+0xb0>)
 8002798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_D3_PWM_Pin;
 80027a2:	2302      	movs	r3, #2
 80027a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ae:	2300      	movs	r3, #0
 80027b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027b2:	2301      	movs	r3, #1
 80027b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	4619      	mov	r1, r3
 80027bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027c0:	f000 fdd0 	bl	8003364 <HAL_GPIO_Init>
}
 80027c4:	bf00      	nop
 80027c6:	3728      	adds	r7, #40	@ 0x28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40012c00 	.word	0x40012c00
 80027d0:	40021000 	.word	0x40021000

080027d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027d8:	4b14      	ldr	r3, [pc, #80]	@ (800282c <MX_USART2_UART_Init+0x58>)
 80027da:	4a15      	ldr	r2, [pc, #84]	@ (8002830 <MX_USART2_UART_Init+0x5c>)
 80027dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027de:	4b13      	ldr	r3, [pc, #76]	@ (800282c <MX_USART2_UART_Init+0x58>)
 80027e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027e6:	4b11      	ldr	r3, [pc, #68]	@ (800282c <MX_USART2_UART_Init+0x58>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027ec:	4b0f      	ldr	r3, [pc, #60]	@ (800282c <MX_USART2_UART_Init+0x58>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027f2:	4b0e      	ldr	r3, [pc, #56]	@ (800282c <MX_USART2_UART_Init+0x58>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027f8:	4b0c      	ldr	r3, [pc, #48]	@ (800282c <MX_USART2_UART_Init+0x58>)
 80027fa:	220c      	movs	r2, #12
 80027fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027fe:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <MX_USART2_UART_Init+0x58>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002804:	4b09      	ldr	r3, [pc, #36]	@ (800282c <MX_USART2_UART_Init+0x58>)
 8002806:	2200      	movs	r2, #0
 8002808:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800280a:	4b08      	ldr	r3, [pc, #32]	@ (800282c <MX_USART2_UART_Init+0x58>)
 800280c:	2200      	movs	r2, #0
 800280e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002810:	4b06      	ldr	r3, [pc, #24]	@ (800282c <MX_USART2_UART_Init+0x58>)
 8002812:	2200      	movs	r2, #0
 8002814:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002816:	4805      	ldr	r0, [pc, #20]	@ (800282c <MX_USART2_UART_Init+0x58>)
 8002818:	f004 fb58 	bl	8006ecc <HAL_UART_Init>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002822:	f7fe ff1f 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200008fc 	.word	0x200008fc
 8002830:	40004400 	.word	0x40004400

08002834 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b09e      	sub	sp, #120	@ 0x78
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800284c:	f107 0310 	add.w	r3, r7, #16
 8002850:	2254      	movs	r2, #84	@ 0x54
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f008 fcb1 	bl	800b1bc <memset>
  if(uartHandle->Instance==USART2)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1f      	ldr	r2, [pc, #124]	@ (80028dc <HAL_UART_MspInit+0xa8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d136      	bne.n	80028d2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002864:	2302      	movs	r3, #2
 8002866:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002868:	2300      	movs	r3, #0
 800286a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800286c:	f107 0310 	add.w	r3, r7, #16
 8002870:	4618      	mov	r0, r3
 8002872:	f001 fe27 	bl	80044c4 <HAL_RCCEx_PeriphCLKConfig>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800287c:	f7fe fef2 	bl	8001664 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002880:	4b17      	ldr	r3, [pc, #92]	@ (80028e0 <HAL_UART_MspInit+0xac>)
 8002882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002884:	4a16      	ldr	r2, [pc, #88]	@ (80028e0 <HAL_UART_MspInit+0xac>)
 8002886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800288a:	6593      	str	r3, [r2, #88]	@ 0x58
 800288c:	4b14      	ldr	r3, [pc, #80]	@ (80028e0 <HAL_UART_MspInit+0xac>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002898:	4b11      	ldr	r3, [pc, #68]	@ (80028e0 <HAL_UART_MspInit+0xac>)
 800289a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289c:	4a10      	ldr	r2, [pc, #64]	@ (80028e0 <HAL_UART_MspInit+0xac>)
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028a4:	4b0e      	ldr	r3, [pc, #56]	@ (80028e0 <HAL_UART_MspInit+0xac>)
 80028a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028b0:	230c      	movs	r3, #12
 80028b2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	2302      	movs	r3, #2
 80028b6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028bc:	2303      	movs	r3, #3
 80028be:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028c0:	2307      	movs	r3, #7
 80028c2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80028c8:	4619      	mov	r1, r3
 80028ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028ce:	f000 fd49 	bl	8003364 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80028d2:	bf00      	nop
 80028d4:	3778      	adds	r7, #120	@ 0x78
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40004400 	.word	0x40004400
 80028e0:	40021000 	.word	0x40021000

080028e4 <Reset_Handler>:
 80028e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800291c <LoopForever+0x2>
 80028e8:	f7ff fdae 	bl	8002448 <SystemInit>
 80028ec:	480c      	ldr	r0, [pc, #48]	@ (8002920 <LoopForever+0x6>)
 80028ee:	490d      	ldr	r1, [pc, #52]	@ (8002924 <LoopForever+0xa>)
 80028f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002928 <LoopForever+0xe>)
 80028f2:	2300      	movs	r3, #0
 80028f4:	e002      	b.n	80028fc <LoopCopyDataInit>

080028f6 <CopyDataInit>:
 80028f6:	58d4      	ldr	r4, [r2, r3]
 80028f8:	50c4      	str	r4, [r0, r3]
 80028fa:	3304      	adds	r3, #4

080028fc <LoopCopyDataInit>:
 80028fc:	18c4      	adds	r4, r0, r3
 80028fe:	428c      	cmp	r4, r1
 8002900:	d3f9      	bcc.n	80028f6 <CopyDataInit>
 8002902:	4a0a      	ldr	r2, [pc, #40]	@ (800292c <LoopForever+0x12>)
 8002904:	4c0a      	ldr	r4, [pc, #40]	@ (8002930 <LoopForever+0x16>)
 8002906:	2300      	movs	r3, #0
 8002908:	e001      	b.n	800290e <LoopFillZerobss>

0800290a <FillZerobss>:
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	3204      	adds	r2, #4

0800290e <LoopFillZerobss>:
 800290e:	42a2      	cmp	r2, r4
 8002910:	d3fb      	bcc.n	800290a <FillZerobss>
 8002912:	f008 fd01 	bl	800b318 <__libc_init_array>
 8002916:	f7fe fe1d 	bl	8001554 <main>

0800291a <LoopForever>:
 800291a:	e7fe      	b.n	800291a <LoopForever>
 800291c:	20010000 	.word	0x20010000
 8002920:	20000000 	.word	0x20000000
 8002924:	200001d8 	.word	0x200001d8
 8002928:	0800dd28 	.word	0x0800dd28
 800292c:	200001d8 	.word	0x200001d8
 8002930:	20002474 	.word	0x20002474

08002934 <ADC1_IRQHandler>:
 8002934:	e7fe      	b.n	8002934 <ADC1_IRQHandler>

08002936 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002940:	2003      	movs	r0, #3
 8002942:	f000 fcda 	bl	80032fa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002946:	200f      	movs	r0, #15
 8002948:	f7ff fc32 	bl	80021b0 <HAL_InitTick>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	71fb      	strb	r3, [r7, #7]
 8002956:	e001      	b.n	800295c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002958:	f7ff fc02 	bl	8002160 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800295c:	79fb      	ldrb	r3, [r7, #7]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800296c:	4b06      	ldr	r3, [pc, #24]	@ (8002988 <HAL_IncTick+0x20>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	4b06      	ldr	r3, [pc, #24]	@ (800298c <HAL_IncTick+0x24>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4413      	add	r3, r2
 8002978:	4a04      	ldr	r2, [pc, #16]	@ (800298c <HAL_IncTick+0x24>)
 800297a:	6013      	str	r3, [r2, #0]
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	20000008 	.word	0x20000008
 800298c:	20000984 	.word	0x20000984

08002990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return uwTick;
 8002994:	4b03      	ldr	r3, [pc, #12]	@ (80029a4 <HAL_GetTick+0x14>)
 8002996:	681b      	ldr	r3, [r3, #0]
}
 8002998:	4618      	mov	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000984 	.word	0x20000984

080029a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e0ed      	b.n	8002b96 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d102      	bne.n	80029cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fe faaa 	bl	8000f20 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029dc:	f7ff ffd8 	bl	8002990 <HAL_GetTick>
 80029e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029e2:	e012      	b.n	8002a0a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029e4:	f7ff ffd4 	bl	8002990 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b0a      	cmp	r3, #10
 80029f0:	d90b      	bls.n	8002a0a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2205      	movs	r2, #5
 8002a02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e0c5      	b.n	8002b96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0e5      	beq.n	80029e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0202 	bic.w	r2, r2, #2
 8002a26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a28:	f7ff ffb2 	bl	8002990 <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a2e:	e012      	b.n	8002a56 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a30:	f7ff ffae 	bl	8002990 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b0a      	cmp	r3, #10
 8002a3c:	d90b      	bls.n	8002a56 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2205      	movs	r2, #5
 8002a4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e09f      	b.n	8002b96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1e5      	bne.n	8002a30 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	7e1b      	ldrb	r3, [r3, #24]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d108      	bne.n	8002a7e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e007      	b.n	8002a8e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	7e5b      	ldrb	r3, [r3, #25]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d108      	bne.n	8002aa8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	e007      	b.n	8002ab8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ab6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	7e9b      	ldrb	r3, [r3, #26]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d108      	bne.n	8002ad2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0220 	orr.w	r2, r2, #32
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	e007      	b.n	8002ae2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0220 	bic.w	r2, r2, #32
 8002ae0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	7edb      	ldrb	r3, [r3, #27]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d108      	bne.n	8002afc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0210 	bic.w	r2, r2, #16
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	e007      	b.n	8002b0c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0210 	orr.w	r2, r2, #16
 8002b0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	7f1b      	ldrb	r3, [r3, #28]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d108      	bne.n	8002b26 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0208 	orr.w	r2, r2, #8
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	e007      	b.n	8002b36 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0208 	bic.w	r2, r2, #8
 8002b34:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	7f5b      	ldrb	r3, [r3, #29]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d108      	bne.n	8002b50 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0204 	orr.w	r2, r2, #4
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	e007      	b.n	8002b60 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0204 	bic.w	r2, r2, #4
 8002b5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	ea42 0103 	orr.w	r1, r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	1e5a      	subs	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b087      	sub	sp, #28
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002bb6:	7cfb      	ldrb	r3, [r7, #19]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d003      	beq.n	8002bc4 <HAL_CAN_ConfigFilter+0x26>
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	f040 80aa 	bne.w	8002d18 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002bca:	f043 0201 	orr.w	r2, r3, #1
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	2201      	movs	r2, #1
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	401a      	ands	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d123      	bne.n	8002c46 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	401a      	ands	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002c20:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	3248      	adds	r2, #72	@ 0x48
 8002c26:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c3a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c3c:	6979      	ldr	r1, [r7, #20]
 8002c3e:	3348      	adds	r3, #72	@ 0x48
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	440b      	add	r3, r1
 8002c44:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d122      	bne.n	8002c94 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c6e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	3248      	adds	r2, #72	@ 0x48
 8002c74:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c88:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c8a:	6979      	ldr	r1, [r7, #20]
 8002c8c:	3348      	adds	r3, #72	@ 0x48
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	440b      	add	r3, r1
 8002c92:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d109      	bne.n	8002cb0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	401a      	ands	r2, r3
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002cae:	e007      	b.n	8002cc0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d109      	bne.n	8002cdc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	401a      	ands	r2, r3
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002cda:	e007      	b.n	8002cec <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d107      	bne.n	8002d04 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002d0a:	f023 0201 	bic.w	r2, r3, #1
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	e006      	b.n	8002d26 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
  }
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d12e      	bne.n	8002da4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d5e:	f7ff fe17 	bl	8002990 <HAL_GetTick>
 8002d62:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d64:	e012      	b.n	8002d8c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d66:	f7ff fe13 	bl	8002990 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b0a      	cmp	r3, #10
 8002d72:	d90b      	bls.n	8002d8c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d78:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2205      	movs	r2, #5
 8002d84:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e012      	b.n	8002db2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1e5      	bne.n	8002d66 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	e006      	b.n	8002db2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
  }
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b089      	sub	sp, #36	@ 0x24
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dce:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002dd8:	7ffb      	ldrb	r3, [r7, #31]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d003      	beq.n	8002de6 <HAL_CAN_AddTxMessage+0x2c>
 8002dde:	7ffb      	ldrb	r3, [r7, #31]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	f040 80ad 	bne.w	8002f40 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10a      	bne.n	8002e06 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d105      	bne.n	8002e06 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 8095 	beq.w	8002f30 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	0e1b      	lsrs	r3, r3, #24
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002e10:	2201      	movs	r2, #1
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	409a      	lsls	r2, r3
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10d      	bne.n	8002e3e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e2c:	68f9      	ldr	r1, [r7, #12]
 8002e2e:	6809      	ldr	r1, [r1, #0]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	3318      	adds	r3, #24
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	440b      	add	r3, r1
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	e00f      	b.n	8002e5e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e48:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e4e:	68f9      	ldr	r1, [r7, #12]
 8002e50:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002e52:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	3318      	adds	r3, #24
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	440b      	add	r3, r1
 8002e5c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6819      	ldr	r1, [r3, #0]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	3318      	adds	r3, #24
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3304      	adds	r3, #4
 8002e70:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	7d1b      	ldrb	r3, [r3, #20]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d111      	bne.n	8002e9e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	3318      	adds	r3, #24
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	4413      	add	r3, r2
 8002e86:	3304      	adds	r3, #4
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	6811      	ldr	r1, [r2, #0]
 8002e8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	3318      	adds	r3, #24
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	440b      	add	r3, r1
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3307      	adds	r3, #7
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	061a      	lsls	r2, r3, #24
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3306      	adds	r3, #6
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	041b      	lsls	r3, r3, #16
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3305      	adds	r3, #5
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	3204      	adds	r2, #4
 8002ebe:	7812      	ldrb	r2, [r2, #0]
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	6811      	ldr	r1, [r2, #0]
 8002ec6:	ea43 0200 	orr.w	r2, r3, r0
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	440b      	add	r3, r1
 8002ed0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002ed4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3303      	adds	r3, #3
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	061a      	lsls	r2, r3, #24
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	041b      	lsls	r3, r3, #16
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3301      	adds	r3, #1
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	021b      	lsls	r3, r3, #8
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	7812      	ldrb	r2, [r2, #0]
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	6811      	ldr	r1, [r2, #0]
 8002efc:	ea43 0200 	orr.w	r2, r3, r0
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	440b      	add	r3, r1
 8002f06:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002f0a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	3318      	adds	r3, #24
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	4413      	add	r3, r2
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	6811      	ldr	r1, [r2, #0]
 8002f1e:	f043 0201 	orr.w	r2, r3, #1
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	3318      	adds	r3, #24
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	440b      	add	r3, r1
 8002f2a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e00e      	b.n	8002f4e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f34:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e006      	b.n	8002f4e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f44:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
  }
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3724      	adds	r7, #36	@ 0x24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b087      	sub	sp, #28
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	60f8      	str	r0, [r7, #12]
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f6e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f70:	7dfb      	ldrb	r3, [r7, #23]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d003      	beq.n	8002f7e <HAL_CAN_GetRxMessage+0x24>
 8002f76:	7dfb      	ldrb	r3, [r7, #23]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	f040 8103 	bne.w	8003184 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10e      	bne.n	8002fa2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d116      	bne.n	8002fc0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e0f7      	b.n	8003192 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d107      	bne.n	8002fc0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0e8      	b.n	8003192 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	331b      	adds	r3, #27
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	4413      	add	r3, r2
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0204 	and.w	r2, r3, #4
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	331b      	adds	r3, #27
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	4413      	add	r3, r2
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	0d5b      	lsrs	r3, r3, #21
 8002fee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	e00b      	b.n	8003010 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	331b      	adds	r3, #27
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	4413      	add	r3, r2
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	08db      	lsrs	r3, r3, #3
 8003008:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	331b      	adds	r3, #27
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	4413      	add	r3, r2
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0202 	and.w	r2, r3, #2
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	331b      	adds	r3, #27
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	4413      	add	r3, r2
 8003032:	3304      	adds	r3, #4
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2208      	movs	r2, #8
 8003042:	611a      	str	r2, [r3, #16]
 8003044:	e00b      	b.n	800305e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	331b      	adds	r3, #27
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	4413      	add	r3, r2
 8003052:	3304      	adds	r3, #4
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 020f 	and.w	r2, r3, #15
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	331b      	adds	r3, #27
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	4413      	add	r3, r2
 800306a:	3304      	adds	r3, #4
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	b2da      	uxtb	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	331b      	adds	r3, #27
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	4413      	add	r3, r2
 8003082:	3304      	adds	r3, #4
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	0c1b      	lsrs	r3, r3, #16
 8003088:	b29a      	uxth	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	4413      	add	r3, r2
 8003098:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	0a1a      	lsrs	r2, r3, #8
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	3301      	adds	r3, #1
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	0c1a      	lsrs	r2, r3, #16
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	3302      	adds	r3, #2
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	0e1a      	lsrs	r2, r3, #24
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	3303      	adds	r3, #3
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	3304      	adds	r3, #4
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	4413      	add	r3, r2
 8003114:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	0a1a      	lsrs	r2, r3, #8
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	3305      	adds	r3, #5
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	4413      	add	r3, r2
 800312e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	0c1a      	lsrs	r2, r3, #16
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	3306      	adds	r3, #6
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	4413      	add	r3, r2
 8003148:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	0e1a      	lsrs	r2, r3, #24
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	3307      	adds	r3, #7
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d108      	bne.n	8003170 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0220 	orr.w	r2, r2, #32
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	e007      	b.n	8003180 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691a      	ldr	r2, [r3, #16]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0220 	orr.w	r2, r2, #32
 800317e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	e006      	b.n	8003192 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003188:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
  }
}
 8003192:	4618      	mov	r0, r3
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b0:	4b0c      	ldr	r3, [pc, #48]	@ (80031e4 <__NVIC_SetPriorityGrouping+0x44>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031bc:	4013      	ands	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d2:	4a04      	ldr	r2, [pc, #16]	@ (80031e4 <__NVIC_SetPriorityGrouping+0x44>)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	60d3      	str	r3, [r2, #12]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031ec:	4b04      	ldr	r3, [pc, #16]	@ (8003200 <__NVIC_GetPriorityGrouping+0x18>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	f003 0307 	and.w	r3, r3, #7
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	2b00      	cmp	r3, #0
 8003214:	db0b      	blt.n	800322e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	f003 021f 	and.w	r2, r3, #31
 800321c:	4907      	ldr	r1, [pc, #28]	@ (800323c <__NVIC_EnableIRQ+0x38>)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	2001      	movs	r0, #1
 8003226:	fa00 f202 	lsl.w	r2, r0, r2
 800322a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	e000e100 	.word	0xe000e100

08003240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	6039      	str	r1, [r7, #0]
 800324a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003250:	2b00      	cmp	r3, #0
 8003252:	db0a      	blt.n	800326a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	b2da      	uxtb	r2, r3
 8003258:	490c      	ldr	r1, [pc, #48]	@ (800328c <__NVIC_SetPriority+0x4c>)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	0112      	lsls	r2, r2, #4
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	440b      	add	r3, r1
 8003264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003268:	e00a      	b.n	8003280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	4908      	ldr	r1, [pc, #32]	@ (8003290 <__NVIC_SetPriority+0x50>)
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	3b04      	subs	r3, #4
 8003278:	0112      	lsls	r2, r2, #4
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	440b      	add	r3, r1
 800327e:	761a      	strb	r2, [r3, #24]
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000e100 	.word	0xe000e100
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	@ 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f1c3 0307 	rsb	r3, r3, #7
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	bf28      	it	cs
 80032b2:	2304      	movcs	r3, #4
 80032b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3304      	adds	r3, #4
 80032ba:	2b06      	cmp	r3, #6
 80032bc:	d902      	bls.n	80032c4 <NVIC_EncodePriority+0x30>
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	3b03      	subs	r3, #3
 80032c2:	e000      	b.n	80032c6 <NVIC_EncodePriority+0x32>
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c8:	f04f 32ff 	mov.w	r2, #4294967295
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43da      	mvns	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	401a      	ands	r2, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032dc:	f04f 31ff 	mov.w	r1, #4294967295
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	43d9      	mvns	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ec:	4313      	orrs	r3, r2
         );
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3724      	adds	r7, #36	@ 0x24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff ff4c 	bl	80031a0 <__NVIC_SetPriorityGrouping>
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003322:	f7ff ff61 	bl	80031e8 <__NVIC_GetPriorityGrouping>
 8003326:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	6978      	ldr	r0, [r7, #20]
 800332e:	f7ff ffb1 	bl	8003294 <NVIC_EncodePriority>
 8003332:	4602      	mov	r2, r0
 8003334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff ff80 	bl	8003240 <__NVIC_SetPriority>
}
 8003340:	bf00      	nop
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff ff54 	bl	8003204 <__NVIC_EnableIRQ>
}
 800335c:	bf00      	nop
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003372:	e148      	b.n	8003606 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	2101      	movs	r1, #1
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	fa01 f303 	lsl.w	r3, r1, r3
 8003380:	4013      	ands	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 813a 	beq.w	8003600 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d005      	beq.n	80033a4 <HAL_GPIO_Init+0x40>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d130      	bne.n	8003406 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	2203      	movs	r2, #3
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4013      	ands	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033da:	2201      	movs	r2, #1
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4013      	ands	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	091b      	lsrs	r3, r3, #4
 80033f0:	f003 0201 	and.w	r2, r3, #1
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	2b03      	cmp	r3, #3
 8003410:	d017      	beq.n	8003442 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	2203      	movs	r2, #3
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4013      	ands	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d123      	bne.n	8003496 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	08da      	lsrs	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3208      	adds	r2, #8
 8003456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800345a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	220f      	movs	r2, #15
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4013      	ands	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	08da      	lsrs	r2, r3, #3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3208      	adds	r2, #8
 8003490:	6939      	ldr	r1, [r7, #16]
 8003492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	2203      	movs	r2, #3
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4013      	ands	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 0203 	and.w	r2, r3, #3
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 8094 	beq.w	8003600 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d8:	4b52      	ldr	r3, [pc, #328]	@ (8003624 <HAL_GPIO_Init+0x2c0>)
 80034da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034dc:	4a51      	ldr	r2, [pc, #324]	@ (8003624 <HAL_GPIO_Init+0x2c0>)
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80034e4:	4b4f      	ldr	r3, [pc, #316]	@ (8003624 <HAL_GPIO_Init+0x2c0>)
 80034e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034f0:	4a4d      	ldr	r2, [pc, #308]	@ (8003628 <HAL_GPIO_Init+0x2c4>)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	089b      	lsrs	r3, r3, #2
 80034f6:	3302      	adds	r3, #2
 80034f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	220f      	movs	r2, #15
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4013      	ands	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800351a:	d00d      	beq.n	8003538 <HAL_GPIO_Init+0x1d4>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a43      	ldr	r2, [pc, #268]	@ (800362c <HAL_GPIO_Init+0x2c8>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d007      	beq.n	8003534 <HAL_GPIO_Init+0x1d0>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a42      	ldr	r2, [pc, #264]	@ (8003630 <HAL_GPIO_Init+0x2cc>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d101      	bne.n	8003530 <HAL_GPIO_Init+0x1cc>
 800352c:	2302      	movs	r3, #2
 800352e:	e004      	b.n	800353a <HAL_GPIO_Init+0x1d6>
 8003530:	2307      	movs	r3, #7
 8003532:	e002      	b.n	800353a <HAL_GPIO_Init+0x1d6>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <HAL_GPIO_Init+0x1d6>
 8003538:	2300      	movs	r3, #0
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	f002 0203 	and.w	r2, r2, #3
 8003540:	0092      	lsls	r2, r2, #2
 8003542:	4093      	lsls	r3, r2
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800354a:	4937      	ldr	r1, [pc, #220]	@ (8003628 <HAL_GPIO_Init+0x2c4>)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	089b      	lsrs	r3, r3, #2
 8003550:	3302      	adds	r3, #2
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003558:	4b36      	ldr	r3, [pc, #216]	@ (8003634 <HAL_GPIO_Init+0x2d0>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	43db      	mvns	r3, r3
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4013      	ands	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800357c:	4a2d      	ldr	r2, [pc, #180]	@ (8003634 <HAL_GPIO_Init+0x2d0>)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003582:	4b2c      	ldr	r3, [pc, #176]	@ (8003634 <HAL_GPIO_Init+0x2d0>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	43db      	mvns	r3, r3
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4013      	ands	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035a6:	4a23      	ldr	r2, [pc, #140]	@ (8003634 <HAL_GPIO_Init+0x2d0>)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035ac:	4b21      	ldr	r3, [pc, #132]	@ (8003634 <HAL_GPIO_Init+0x2d0>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035d0:	4a18      	ldr	r2, [pc, #96]	@ (8003634 <HAL_GPIO_Init+0x2d0>)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035d6:	4b17      	ldr	r3, [pc, #92]	@ (8003634 <HAL_GPIO_Init+0x2d0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	43db      	mvns	r3, r3
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4013      	ands	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003634 <HAL_GPIO_Init+0x2d0>)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	3301      	adds	r3, #1
 8003604:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	f47f aeaf 	bne.w	8003374 <HAL_GPIO_Init+0x10>
  }
}
 8003616:	bf00      	nop
 8003618:	bf00      	nop
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	40021000 	.word	0x40021000
 8003628:	40010000 	.word	0x40010000
 800362c:	48000400 	.word	0x48000400
 8003630:	48000800 	.word	0x48000800
 8003634:	40010400 	.word	0x40010400

08003638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	807b      	strh	r3, [r7, #2]
 8003644:	4613      	mov	r3, r2
 8003646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003648:	787b      	ldrb	r3, [r7, #1]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800364e:	887a      	ldrh	r2, [r7, #2]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003654:	e002      	b.n	800365c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003656:	887a      	ldrh	r2, [r7, #2]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800366c:	4b04      	ldr	r3, [pc, #16]	@ (8003680 <HAL_PWREx_GetVoltageRange+0x18>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003674:	4618      	mov	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40007000 	.word	0x40007000

08003684 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003692:	d130      	bne.n	80036f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003694:	4b23      	ldr	r3, [pc, #140]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800369c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036a0:	d038      	beq.n	8003714 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036a2:	4b20      	ldr	r3, [pc, #128]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2232      	movs	r2, #50	@ 0x32
 80036b8:	fb02 f303 	mul.w	r3, r2, r3
 80036bc:	4a1b      	ldr	r2, [pc, #108]	@ (800372c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036be:	fba2 2303 	umull	r2, r3, r2, r3
 80036c2:	0c9b      	lsrs	r3, r3, #18
 80036c4:	3301      	adds	r3, #1
 80036c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036c8:	e002      	b.n	80036d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036d0:	4b14      	ldr	r3, [pc, #80]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036dc:	d102      	bne.n	80036e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1f2      	bne.n	80036ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036f0:	d110      	bne.n	8003714 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e00f      	b.n	8003716 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003702:	d007      	beq.n	8003714 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003704:	4b07      	ldr	r3, [pc, #28]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800370c:	4a05      	ldr	r2, [pc, #20]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800370e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003712:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40007000 	.word	0x40007000
 8003728:	20000000 	.word	0x20000000
 800372c:	431bde83 	.word	0x431bde83

08003730 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d102      	bne.n	8003744 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	f000 bc02 	b.w	8003f48 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003744:	4b96      	ldr	r3, [pc, #600]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 030c 	and.w	r3, r3, #12
 800374c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800374e:	4b94      	ldr	r3, [pc, #592]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80e4 	beq.w	800392e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d007      	beq.n	800377c <HAL_RCC_OscConfig+0x4c>
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	2b0c      	cmp	r3, #12
 8003770:	f040 808b 	bne.w	800388a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2b01      	cmp	r3, #1
 8003778:	f040 8087 	bne.w	800388a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800377c:	4b88      	ldr	r3, [pc, #544]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_OscConfig+0x64>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e3d9      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1a      	ldr	r2, [r3, #32]
 8003798:	4b81      	ldr	r3, [pc, #516]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d004      	beq.n	80037ae <HAL_RCC_OscConfig+0x7e>
 80037a4:	4b7e      	ldr	r3, [pc, #504]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037ac:	e005      	b.n	80037ba <HAL_RCC_OscConfig+0x8a>
 80037ae:	4b7c      	ldr	r3, [pc, #496]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037b4:	091b      	lsrs	r3, r3, #4
 80037b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d223      	bcs.n	8003806 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fe1e 	bl	8004404 <RCC_SetFlashLatencyFromMSIRange>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e3ba      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037d2:	4b73      	ldr	r3, [pc, #460]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a72      	ldr	r2, [pc, #456]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037d8:	f043 0308 	orr.w	r3, r3, #8
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	4b70      	ldr	r3, [pc, #448]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	496d      	ldr	r1, [pc, #436]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037f0:	4b6b      	ldr	r3, [pc, #428]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	021b      	lsls	r3, r3, #8
 80037fe:	4968      	ldr	r1, [pc, #416]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]
 8003804:	e025      	b.n	8003852 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003806:	4b66      	ldr	r3, [pc, #408]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a65      	ldr	r2, [pc, #404]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 800380c:	f043 0308 	orr.w	r3, r3, #8
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	4b63      	ldr	r3, [pc, #396]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	4960      	ldr	r1, [pc, #384]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003820:	4313      	orrs	r3, r2
 8003822:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003824:	4b5e      	ldr	r3, [pc, #376]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	021b      	lsls	r3, r3, #8
 8003832:	495b      	ldr	r1, [pc, #364]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003834:	4313      	orrs	r3, r2
 8003836:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fdde 	bl	8004404 <RCC_SetFlashLatencyFromMSIRange>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e37a      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003852:	f000 fcb5 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 8003856:	4602      	mov	r2, r0
 8003858:	4b51      	ldr	r3, [pc, #324]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	4950      	ldr	r1, [pc, #320]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 8003864:	5ccb      	ldrb	r3, [r1, r3]
 8003866:	f003 031f 	and.w	r3, r3, #31
 800386a:	fa22 f303 	lsr.w	r3, r2, r3
 800386e:	4a4e      	ldr	r2, [pc, #312]	@ (80039a8 <HAL_RCC_OscConfig+0x278>)
 8003870:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003872:	4b4e      	ldr	r3, [pc, #312]	@ (80039ac <HAL_RCC_OscConfig+0x27c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe fc9a 	bl	80021b0 <HAL_InitTick>
 800387c:	4603      	mov	r3, r0
 800387e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d052      	beq.n	800392c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	e35e      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d032      	beq.n	80038f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003892:	4b43      	ldr	r3, [pc, #268]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a42      	ldr	r2, [pc, #264]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800389e:	f7ff f877 	bl	8002990 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038a6:	f7ff f873 	bl	8002990 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e347      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038b8:	4b39      	ldr	r3, [pc, #228]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038c4:	4b36      	ldr	r3, [pc, #216]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a35      	ldr	r2, [pc, #212]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038ca:	f043 0308 	orr.w	r3, r3, #8
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	4b33      	ldr	r3, [pc, #204]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	4930      	ldr	r1, [pc, #192]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038e2:	4b2f      	ldr	r3, [pc, #188]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	492b      	ldr	r1, [pc, #172]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]
 80038f6:	e01a      	b.n	800392e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038f8:	4b29      	ldr	r3, [pc, #164]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a28      	ldr	r2, [pc, #160]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038fe:	f023 0301 	bic.w	r3, r3, #1
 8003902:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003904:	f7ff f844 	bl	8002990 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800390c:	f7ff f840 	bl	8002990 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e314      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800391e:	4b20      	ldr	r3, [pc, #128]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0x1dc>
 800392a:	e000      	b.n	800392e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800392c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d073      	beq.n	8003a22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b08      	cmp	r3, #8
 800393e:	d005      	beq.n	800394c <HAL_RCC_OscConfig+0x21c>
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b0c      	cmp	r3, #12
 8003944:	d10e      	bne.n	8003964 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d10b      	bne.n	8003964 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	4b14      	ldr	r3, [pc, #80]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d063      	beq.n	8003a20 <HAL_RCC_OscConfig+0x2f0>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d15f      	bne.n	8003a20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e2f1      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800396c:	d106      	bne.n	800397c <HAL_RCC_OscConfig+0x24c>
 800396e:	4b0c      	ldr	r3, [pc, #48]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a0b      	ldr	r2, [pc, #44]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e025      	b.n	80039c8 <HAL_RCC_OscConfig+0x298>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003984:	d114      	bne.n	80039b0 <HAL_RCC_OscConfig+0x280>
 8003986:	4b06      	ldr	r3, [pc, #24]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a05      	ldr	r2, [pc, #20]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 800398c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	4b03      	ldr	r3, [pc, #12]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a02      	ldr	r2, [pc, #8]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e013      	b.n	80039c8 <HAL_RCC_OscConfig+0x298>
 80039a0:	40021000 	.word	0x40021000
 80039a4:	0800d95c 	.word	0x0800d95c
 80039a8:	20000000 	.word	0x20000000
 80039ac:	20000004 	.word	0x20000004
 80039b0:	4ba0      	ldr	r3, [pc, #640]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a9f      	ldr	r2, [pc, #636]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 80039b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	4b9d      	ldr	r3, [pc, #628]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a9c      	ldr	r2, [pc, #624]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 80039c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d013      	beq.n	80039f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fe ffde 	bl	8002990 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d8:	f7fe ffda 	bl	8002990 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	@ 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e2ae      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ea:	4b92      	ldr	r3, [pc, #584]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x2a8>
 80039f6:	e014      	b.n	8003a22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fe ffca 	bl	8002990 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a00:	f7fe ffc6 	bl	8002990 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b64      	cmp	r3, #100	@ 0x64
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e29a      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a12:	4b88      	ldr	r3, [pc, #544]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x2d0>
 8003a1e:	e000      	b.n	8003a22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d060      	beq.n	8003af0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_OscConfig+0x310>
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b0c      	cmp	r3, #12
 8003a38:	d119      	bne.n	8003a6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d116      	bne.n	8003a6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a40:	4b7c      	ldr	r3, [pc, #496]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_OscConfig+0x328>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e277      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a58:	4b76      	ldr	r3, [pc, #472]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	061b      	lsls	r3, r3, #24
 8003a66:	4973      	ldr	r1, [pc, #460]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a6c:	e040      	b.n	8003af0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d023      	beq.n	8003abe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a76:	4b6f      	ldr	r3, [pc, #444]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a6e      	ldr	r2, [pc, #440]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a82:	f7fe ff85 	bl	8002990 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8a:	f7fe ff81 	bl	8002990 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e255      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a9c:	4b65      	ldr	r3, [pc, #404]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa8:	4b62      	ldr	r3, [pc, #392]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	061b      	lsls	r3, r3, #24
 8003ab6:	495f      	ldr	r1, [pc, #380]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	604b      	str	r3, [r1, #4]
 8003abc:	e018      	b.n	8003af0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003abe:	4b5d      	ldr	r3, [pc, #372]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a5c      	ldr	r2, [pc, #368]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003ac4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aca:	f7fe ff61 	bl	8002990 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad2:	f7fe ff5d 	bl	8002990 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e231      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ae4:	4b53      	ldr	r3, [pc, #332]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f0      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d03c      	beq.n	8003b76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d01c      	beq.n	8003b3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b04:	4b4b      	ldr	r3, [pc, #300]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b0a:	4a4a      	ldr	r2, [pc, #296]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fe ff3c 	bl	8002990 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b1c:	f7fe ff38 	bl	8002990 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e20c      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b2e:	4b41      	ldr	r3, [pc, #260]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0ef      	beq.n	8003b1c <HAL_RCC_OscConfig+0x3ec>
 8003b3c:	e01b      	b.n	8003b76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b44:	4a3b      	ldr	r2, [pc, #236]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4e:	f7fe ff1f 	bl	8002990 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b56:	f7fe ff1b 	bl	8002990 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e1ef      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b68:	4b32      	ldr	r3, [pc, #200]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1ef      	bne.n	8003b56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 80a6 	beq.w	8003cd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b84:	2300      	movs	r3, #0
 8003b86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b88:	4b2a      	ldr	r3, [pc, #168]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10d      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b94:	4b27      	ldr	r3, [pc, #156]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b98:	4a26      	ldr	r2, [pc, #152]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ba0:	4b24      	ldr	r3, [pc, #144]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bac:	2301      	movs	r3, #1
 8003bae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb0:	4b21      	ldr	r3, [pc, #132]	@ (8003c38 <HAL_RCC_OscConfig+0x508>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d118      	bne.n	8003bee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8003c38 <HAL_RCC_OscConfig+0x508>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8003c38 <HAL_RCC_OscConfig+0x508>)
 8003bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc8:	f7fe fee2 	bl	8002990 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd0:	f7fe fede 	bl	8002990 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e1b2      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003be2:	4b15      	ldr	r3, [pc, #84]	@ (8003c38 <HAL_RCC_OscConfig+0x508>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d108      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4d8>
 8003bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c06:	e029      	b.n	8003c5c <HAL_RCC_OscConfig+0x52c>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b05      	cmp	r3, #5
 8003c0e:	d115      	bne.n	8003c3c <HAL_RCC_OscConfig+0x50c>
 8003c10:	4b08      	ldr	r3, [pc, #32]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c16:	4a07      	ldr	r2, [pc, #28]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003c18:	f043 0304 	orr.w	r3, r3, #4
 8003c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c20:	4b04      	ldr	r3, [pc, #16]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c26:	4a03      	ldr	r2, [pc, #12]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c30:	e014      	b.n	8003c5c <HAL_RCC_OscConfig+0x52c>
 8003c32:	bf00      	nop
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40007000 	.word	0x40007000
 8003c3c:	4b9a      	ldr	r3, [pc, #616]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c42:	4a99      	ldr	r2, [pc, #612]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c4c:	4b96      	ldr	r3, [pc, #600]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c52:	4a95      	ldr	r2, [pc, #596]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003c54:	f023 0304 	bic.w	r3, r3, #4
 8003c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d016      	beq.n	8003c92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c64:	f7fe fe94 	bl	8002990 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6c:	f7fe fe90 	bl	8002990 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e162      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c82:	4b89      	ldr	r3, [pc, #548]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0ed      	beq.n	8003c6c <HAL_RCC_OscConfig+0x53c>
 8003c90:	e015      	b.n	8003cbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c92:	f7fe fe7d 	bl	8002990 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c98:	e00a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9a:	f7fe fe79 	bl	8002990 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e14b      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cb0:	4b7d      	ldr	r3, [pc, #500]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1ed      	bne.n	8003c9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cbe:	7ffb      	ldrb	r3, [r7, #31]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d105      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc4:	4b78      	ldr	r3, [pc, #480]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc8:	4a77      	ldr	r2, [pc, #476]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003cca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d03c      	beq.n	8003d56 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01c      	beq.n	8003d1e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ce4:	4b70      	ldr	r3, [pc, #448]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003ce6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cea:	4a6f      	ldr	r2, [pc, #444]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf4:	f7fe fe4c 	bl	8002990 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cfc:	f7fe fe48 	bl	8002990 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e11c      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d0e:	4b66      	ldr	r3, [pc, #408]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ef      	beq.n	8003cfc <HAL_RCC_OscConfig+0x5cc>
 8003d1c:	e01b      	b.n	8003d56 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d1e:	4b62      	ldr	r3, [pc, #392]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003d20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d24:	4a60      	ldr	r2, [pc, #384]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2e:	f7fe fe2f 	bl	8002990 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d36:	f7fe fe2b 	bl	8002990 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e0ff      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d48:	4b57      	ldr	r3, [pc, #348]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1ef      	bne.n	8003d36 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80f3 	beq.w	8003f46 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	f040 80c9 	bne.w	8003efc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d6a:	4b4f      	ldr	r3, [pc, #316]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f003 0203 	and.w	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d12c      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d123      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d9a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d11b      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003daa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d113      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dba:	085b      	lsrs	r3, r3, #1
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d109      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	085b      	lsrs	r3, r3, #1
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d06b      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2b0c      	cmp	r3, #12
 8003ddc:	d062      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003dde:	4b32      	ldr	r3, [pc, #200]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e0ac      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003dee:	4b2e      	ldr	r3, [pc, #184]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a2d      	ldr	r2, [pc, #180]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003df4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003df8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dfa:	f7fe fdc9 	bl	8002990 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e02:	f7fe fdc5 	bl	8002990 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e099      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e14:	4b24      	ldr	r3, [pc, #144]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f0      	bne.n	8003e02 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e20:	4b21      	ldr	r3, [pc, #132]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	4b21      	ldr	r3, [pc, #132]	@ (8003eac <HAL_RCC_OscConfig+0x77c>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e30:	3a01      	subs	r2, #1
 8003e32:	0112      	lsls	r2, r2, #4
 8003e34:	4311      	orrs	r1, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e3a:	0212      	lsls	r2, r2, #8
 8003e3c:	4311      	orrs	r1, r2
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e42:	0852      	lsrs	r2, r2, #1
 8003e44:	3a01      	subs	r2, #1
 8003e46:	0552      	lsls	r2, r2, #21
 8003e48:	4311      	orrs	r1, r2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003e4e:	0852      	lsrs	r2, r2, #1
 8003e50:	3a01      	subs	r2, #1
 8003e52:	0652      	lsls	r2, r2, #25
 8003e54:	4311      	orrs	r1, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e5a:	06d2      	lsls	r2, r2, #27
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	4912      	ldr	r1, [pc, #72]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e64:	4b10      	ldr	r3, [pc, #64]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a0f      	ldr	r2, [pc, #60]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003e6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e70:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4a0c      	ldr	r2, [pc, #48]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003e76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e7c:	f7fe fd88 	bl	8002990 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e84:	f7fe fd84 	bl	8002990 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e058      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e96:	4b04      	ldr	r3, [pc, #16]	@ (8003ea8 <HAL_RCC_OscConfig+0x778>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ea2:	e050      	b.n	8003f46 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e04f      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eb0:	4b27      	ldr	r3, [pc, #156]	@ (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d144      	bne.n	8003f46 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ebc:	4b24      	ldr	r3, [pc, #144]	@ (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a23      	ldr	r2, [pc, #140]	@ (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003ec2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ec6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ec8:	4b21      	ldr	r3, [pc, #132]	@ (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	4a20      	ldr	r2, [pc, #128]	@ (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003ece:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ed2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ed4:	f7fe fd5c 	bl	8002990 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003edc:	f7fe fd58 	bl	8002990 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e02c      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eee:	4b18      	ldr	r3, [pc, #96]	@ (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0x7ac>
 8003efa:	e024      	b.n	8003f46 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2b0c      	cmp	r3, #12
 8003f00:	d01f      	beq.n	8003f42 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f02:	4b13      	ldr	r3, [pc, #76]	@ (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a12      	ldr	r2, [pc, #72]	@ (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003f08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0e:	f7fe fd3f 	bl	8002990 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f16:	f7fe fd3b 	bl	8002990 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e00f      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f28:	4b09      	ldr	r3, [pc, #36]	@ (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f0      	bne.n	8003f16 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f34:	4b06      	ldr	r3, [pc, #24]	@ (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	4905      	ldr	r1, [pc, #20]	@ (8003f50 <HAL_RCC_OscConfig+0x820>)
 8003f3a:	4b06      	ldr	r3, [pc, #24]	@ (8003f54 <HAL_RCC_OscConfig+0x824>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	60cb      	str	r3, [r1, #12]
 8003f40:	e001      	b.n	8003f46 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3720      	adds	r7, #32
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40021000 	.word	0x40021000
 8003f54:	feeefffc 	.word	0xfeeefffc

08003f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0e7      	b.n	800413c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f6c:	4b75      	ldr	r3, [pc, #468]	@ (8004144 <HAL_RCC_ClockConfig+0x1ec>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d910      	bls.n	8003f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7a:	4b72      	ldr	r3, [pc, #456]	@ (8004144 <HAL_RCC_ClockConfig+0x1ec>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 0207 	bic.w	r2, r3, #7
 8003f82:	4970      	ldr	r1, [pc, #448]	@ (8004144 <HAL_RCC_ClockConfig+0x1ec>)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8a:	4b6e      	ldr	r3, [pc, #440]	@ (8004144 <HAL_RCC_ClockConfig+0x1ec>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0cf      	b.n	800413c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d010      	beq.n	8003fca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	4b66      	ldr	r3, [pc, #408]	@ (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d908      	bls.n	8003fca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb8:	4b63      	ldr	r3, [pc, #396]	@ (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	4960      	ldr	r1, [pc, #384]	@ (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d04c      	beq.n	8004070 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d107      	bne.n	8003fee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fde:	4b5a      	ldr	r3, [pc, #360]	@ (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d121      	bne.n	800402e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e0a6      	b.n	800413c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d107      	bne.n	8004006 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ff6:	4b54      	ldr	r3, [pc, #336]	@ (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d115      	bne.n	800402e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e09a      	b.n	800413c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d107      	bne.n	800401e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800400e:	4b4e      	ldr	r3, [pc, #312]	@ (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e08e      	b.n	800413c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800401e:	4b4a      	ldr	r3, [pc, #296]	@ (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e086      	b.n	800413c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800402e:	4b46      	ldr	r3, [pc, #280]	@ (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f023 0203 	bic.w	r2, r3, #3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	4943      	ldr	r1, [pc, #268]	@ (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 800403c:	4313      	orrs	r3, r2
 800403e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004040:	f7fe fca6 	bl	8002990 <HAL_GetTick>
 8004044:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004046:	e00a      	b.n	800405e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004048:	f7fe fca2 	bl	8002990 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e06e      	b.n	800413c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405e:	4b3a      	ldr	r3, [pc, #232]	@ (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 020c 	and.w	r2, r3, #12
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	429a      	cmp	r2, r3
 800406e:	d1eb      	bne.n	8004048 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d010      	beq.n	800409e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	4b31      	ldr	r3, [pc, #196]	@ (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004088:	429a      	cmp	r2, r3
 800408a:	d208      	bcs.n	800409e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800408c:	4b2e      	ldr	r3, [pc, #184]	@ (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	492b      	ldr	r1, [pc, #172]	@ (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 800409a:	4313      	orrs	r3, r2
 800409c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800409e:	4b29      	ldr	r3, [pc, #164]	@ (8004144 <HAL_RCC_ClockConfig+0x1ec>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d210      	bcs.n	80040ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ac:	4b25      	ldr	r3, [pc, #148]	@ (8004144 <HAL_RCC_ClockConfig+0x1ec>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f023 0207 	bic.w	r2, r3, #7
 80040b4:	4923      	ldr	r1, [pc, #140]	@ (8004144 <HAL_RCC_ClockConfig+0x1ec>)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040bc:	4b21      	ldr	r3, [pc, #132]	@ (8004144 <HAL_RCC_ClockConfig+0x1ec>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d001      	beq.n	80040ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e036      	b.n	800413c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040da:	4b1b      	ldr	r3, [pc, #108]	@ (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	4918      	ldr	r1, [pc, #96]	@ (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d009      	beq.n	800410c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040f8:	4b13      	ldr	r3, [pc, #76]	@ (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	4910      	ldr	r1, [pc, #64]	@ (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8004108:	4313      	orrs	r3, r2
 800410a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800410c:	f000 f858 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 8004110:	4602      	mov	r2, r0
 8004112:	4b0d      	ldr	r3, [pc, #52]	@ (8004148 <HAL_RCC_ClockConfig+0x1f0>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	490b      	ldr	r1, [pc, #44]	@ (800414c <HAL_RCC_ClockConfig+0x1f4>)
 800411e:	5ccb      	ldrb	r3, [r1, r3]
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	fa22 f303 	lsr.w	r3, r2, r3
 8004128:	4a09      	ldr	r2, [pc, #36]	@ (8004150 <HAL_RCC_ClockConfig+0x1f8>)
 800412a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800412c:	4b09      	ldr	r3, [pc, #36]	@ (8004154 <HAL_RCC_ClockConfig+0x1fc>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f7fe f83d 	bl	80021b0 <HAL_InitTick>
 8004136:	4603      	mov	r3, r0
 8004138:	72fb      	strb	r3, [r7, #11]

  return status;
 800413a:	7afb      	ldrb	r3, [r7, #11]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40022000 	.word	0x40022000
 8004148:	40021000 	.word	0x40021000
 800414c:	0800d95c 	.word	0x0800d95c
 8004150:	20000000 	.word	0x20000000
 8004154:	20000004 	.word	0x20000004

08004158 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08a      	sub	sp, #40	@ 0x28
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8004164:	4b15      	ldr	r3, [pc, #84]	@ (80041bc <HAL_RCC_MCOConfig+0x64>)
 8004166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004168:	4a14      	ldr	r2, [pc, #80]	@ (80041bc <HAL_RCC_MCOConfig+0x64>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004170:	4b12      	ldr	r3, [pc, #72]	@ (80041bc <HAL_RCC_MCOConfig+0x64>)
 8004172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 800417c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004182:	2302      	movs	r3, #2
 8004184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004186:	2302      	movs	r3, #2
 8004188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800418e:	2300      	movs	r3, #0
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004192:	f107 0314 	add.w	r3, r7, #20
 8004196:	4619      	mov	r1, r3
 8004198:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800419c:	f7ff f8e2 	bl	8003364 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 80041a0:	4b06      	ldr	r3, [pc, #24]	@ (80041bc <HAL_RCC_MCOConfig+0x64>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	430b      	orrs	r3, r1
 80041ae:	4903      	ldr	r1, [pc, #12]	@ (80041bc <HAL_RCC_MCOConfig+0x64>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	608b      	str	r3, [r1, #8]
}
 80041b4:	bf00      	nop
 80041b6:	3728      	adds	r7, #40	@ 0x28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40021000 	.word	0x40021000

080041c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b089      	sub	sp, #36	@ 0x24
 80041c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	2300      	movs	r3, #0
 80041cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ce:	4b3e      	ldr	r3, [pc, #248]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041d8:	4b3b      	ldr	r3, [pc, #236]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0303 	and.w	r3, r3, #3
 80041e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq+0x34>
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2b0c      	cmp	r3, #12
 80041ec:	d121      	bne.n	8004232 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d11e      	bne.n	8004232 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041f4:	4b34      	ldr	r3, [pc, #208]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d107      	bne.n	8004210 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004200:	4b31      	ldr	r3, [pc, #196]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004202:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	e005      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004210:	4b2d      	ldr	r3, [pc, #180]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	091b      	lsrs	r3, r3, #4
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800421c:	4a2b      	ldr	r2, [pc, #172]	@ (80042cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004224:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10d      	bne.n	8004248 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004230:	e00a      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	2b04      	cmp	r3, #4
 8004236:	d102      	bne.n	800423e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004238:	4b25      	ldr	r3, [pc, #148]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	e004      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b08      	cmp	r3, #8
 8004242:	d101      	bne.n	8004248 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004244:	4b23      	ldr	r3, [pc, #140]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004246:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	2b0c      	cmp	r3, #12
 800424c:	d134      	bne.n	80042b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800424e:	4b1e      	ldr	r3, [pc, #120]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b02      	cmp	r3, #2
 800425c:	d003      	beq.n	8004266 <HAL_RCC_GetSysClockFreq+0xa6>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b03      	cmp	r3, #3
 8004262:	d003      	beq.n	800426c <HAL_RCC_GetSysClockFreq+0xac>
 8004264:	e005      	b.n	8004272 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004266:	4b1a      	ldr	r3, [pc, #104]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004268:	617b      	str	r3, [r7, #20]
      break;
 800426a:	e005      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800426c:	4b19      	ldr	r3, [pc, #100]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800426e:	617b      	str	r3, [r7, #20]
      break;
 8004270:	e002      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	617b      	str	r3, [r7, #20]
      break;
 8004276:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004278:	4b13      	ldr	r3, [pc, #76]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	3301      	adds	r3, #1
 8004284:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004286:	4b10      	ldr	r3, [pc, #64]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	0a1b      	lsrs	r3, r3, #8
 800428c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	fb03 f202 	mul.w	r2, r3, r2
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	fbb2 f3f3 	udiv	r3, r2, r3
 800429c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800429e:	4b0a      	ldr	r3, [pc, #40]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	0e5b      	lsrs	r3, r3, #25
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	3301      	adds	r3, #1
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042b8:	69bb      	ldr	r3, [r7, #24]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3724      	adds	r7, #36	@ 0x24
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40021000 	.word	0x40021000
 80042cc:	0800d974 	.word	0x0800d974
 80042d0:	00f42400 	.word	0x00f42400
 80042d4:	007a1200 	.word	0x007a1200

080042d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042dc:	4b03      	ldr	r3, [pc, #12]	@ (80042ec <HAL_RCC_GetHCLKFreq+0x14>)
 80042de:	681b      	ldr	r3, [r3, #0]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20000000 	.word	0x20000000

080042f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042f4:	f7ff fff0 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 80042f8:	4602      	mov	r2, r0
 80042fa:	4b06      	ldr	r3, [pc, #24]	@ (8004314 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	0a1b      	lsrs	r3, r3, #8
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	4904      	ldr	r1, [pc, #16]	@ (8004318 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004306:	5ccb      	ldrb	r3, [r1, r3]
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40021000 	.word	0x40021000
 8004318:	0800d96c 	.word	0x0800d96c

0800431c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004320:	f7ff ffda 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 8004324:	4602      	mov	r2, r0
 8004326:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	0adb      	lsrs	r3, r3, #11
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	4904      	ldr	r1, [pc, #16]	@ (8004344 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004332:	5ccb      	ldrb	r3, [r1, r3]
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800433c:	4618      	mov	r0, r3
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40021000 	.word	0x40021000
 8004344:	0800d96c 	.word	0x0800d96c

08004348 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	220f      	movs	r2, #15
 8004356:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004358:	4b12      	ldr	r3, [pc, #72]	@ (80043a4 <HAL_RCC_GetClockConfig+0x5c>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 0203 	and.w	r2, r3, #3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004364:	4b0f      	ldr	r3, [pc, #60]	@ (80043a4 <HAL_RCC_GetClockConfig+0x5c>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004370:	4b0c      	ldr	r3, [pc, #48]	@ (80043a4 <HAL_RCC_GetClockConfig+0x5c>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800437c:	4b09      	ldr	r3, [pc, #36]	@ (80043a4 <HAL_RCC_GetClockConfig+0x5c>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	08db      	lsrs	r3, r3, #3
 8004382:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800438a:	4b07      	ldr	r3, [pc, #28]	@ (80043a8 <HAL_RCC_GetClockConfig+0x60>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0207 	and.w	r2, r3, #7
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	601a      	str	r2, [r3, #0]
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40021000 	.word	0x40021000
 80043a8:	40022000 	.word	0x40022000

080043ac <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80043b0:	4b05      	ldr	r3, [pc, #20]	@ (80043c8 <HAL_RCC_EnableCSS+0x1c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a04      	ldr	r2, [pc, #16]	@ (80043c8 <HAL_RCC_EnableCSS+0x1c>)
 80043b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043ba:	6013      	str	r3, [r2, #0]
}
 80043bc:	bf00      	nop
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40021000 	.word	0x40021000

080043cc <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80043d0:	4b07      	ldr	r3, [pc, #28]	@ (80043f0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043dc:	d105      	bne.n	80043ea <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80043de:	f000 f809 	bl	80043f4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80043e2:	4b03      	ldr	r3, [pc, #12]	@ (80043f0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80043e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80043e8:	621a      	str	r2, [r3, #32]
  }
}
 80043ea:	bf00      	nop
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000

080043f4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
	...

08004404 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800440c:	2300      	movs	r3, #0
 800440e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004410:	4b2a      	ldr	r3, [pc, #168]	@ (80044bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004414:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800441c:	f7ff f924 	bl	8003668 <HAL_PWREx_GetVoltageRange>
 8004420:	6178      	str	r0, [r7, #20]
 8004422:	e014      	b.n	800444e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004424:	4b25      	ldr	r3, [pc, #148]	@ (80044bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004428:	4a24      	ldr	r2, [pc, #144]	@ (80044bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800442a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800442e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004430:	4b22      	ldr	r3, [pc, #136]	@ (80044bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800443c:	f7ff f914 	bl	8003668 <HAL_PWREx_GetVoltageRange>
 8004440:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004442:	4b1e      	ldr	r3, [pc, #120]	@ (80044bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004446:	4a1d      	ldr	r2, [pc, #116]	@ (80044bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004448:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800444c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004454:	d10b      	bne.n	800446e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b80      	cmp	r3, #128	@ 0x80
 800445a:	d919      	bls.n	8004490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004460:	d902      	bls.n	8004468 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004462:	2302      	movs	r3, #2
 8004464:	613b      	str	r3, [r7, #16]
 8004466:	e013      	b.n	8004490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004468:	2301      	movs	r3, #1
 800446a:	613b      	str	r3, [r7, #16]
 800446c:	e010      	b.n	8004490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b80      	cmp	r3, #128	@ 0x80
 8004472:	d902      	bls.n	800447a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004474:	2303      	movs	r3, #3
 8004476:	613b      	str	r3, [r7, #16]
 8004478:	e00a      	b.n	8004490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b80      	cmp	r3, #128	@ 0x80
 800447e:	d102      	bne.n	8004486 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004480:	2302      	movs	r3, #2
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	e004      	b.n	8004490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b70      	cmp	r3, #112	@ 0x70
 800448a:	d101      	bne.n	8004490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800448c:	2301      	movs	r3, #1
 800448e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004490:	4b0b      	ldr	r3, [pc, #44]	@ (80044c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f023 0207 	bic.w	r2, r3, #7
 8004498:	4909      	ldr	r1, [pc, #36]	@ (80044c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044a0:	4b07      	ldr	r3, [pc, #28]	@ (80044c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d001      	beq.n	80044b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40022000 	.word	0x40022000

080044c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044cc:	2300      	movs	r3, #0
 80044ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044d0:	2300      	movs	r3, #0
 80044d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d031      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80044e8:	d01a      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80044ea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80044ee:	d814      	bhi.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d009      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044f8:	d10f      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80044fa:	4b5d      	ldr	r3, [pc, #372]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	4a5c      	ldr	r2, [pc, #368]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004504:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004506:	e00c      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3304      	adds	r3, #4
 800450c:	2100      	movs	r1, #0
 800450e:	4618      	mov	r0, r3
 8004510:	f000 f9ce 	bl	80048b0 <RCCEx_PLLSAI1_Config>
 8004514:	4603      	mov	r3, r0
 8004516:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004518:	e003      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	74fb      	strb	r3, [r7, #19]
      break;
 800451e:	e000      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004520:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004522:	7cfb      	ldrb	r3, [r7, #19]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10b      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004528:	4b51      	ldr	r3, [pc, #324]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004536:	494e      	ldr	r1, [pc, #312]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004538:	4313      	orrs	r3, r2
 800453a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800453e:	e001      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004540:	7cfb      	ldrb	r3, [r7, #19]
 8004542:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 809e 	beq.w	800468e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004552:	2300      	movs	r3, #0
 8004554:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004556:	4b46      	ldr	r3, [pc, #280]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800455a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004566:	2300      	movs	r3, #0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00d      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800456c:	4b40      	ldr	r3, [pc, #256]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800456e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004570:	4a3f      	ldr	r2, [pc, #252]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004576:	6593      	str	r3, [r2, #88]	@ 0x58
 8004578:	4b3d      	ldr	r3, [pc, #244]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800457a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004580:	60bb      	str	r3, [r7, #8]
 8004582:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004584:	2301      	movs	r3, #1
 8004586:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004588:	4b3a      	ldr	r3, [pc, #232]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a39      	ldr	r2, [pc, #228]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800458e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004592:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004594:	f7fe f9fc 	bl	8002990 <HAL_GetTick>
 8004598:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800459a:	e009      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800459c:	f7fe f9f8 	bl	8002990 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d902      	bls.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	74fb      	strb	r3, [r7, #19]
        break;
 80045ae:	e005      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045b0:	4b30      	ldr	r3, [pc, #192]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0ef      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80045bc:	7cfb      	ldrb	r3, [r7, #19]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d15a      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01e      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d019      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045de:	4b24      	ldr	r3, [pc, #144]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045ea:	4b21      	ldr	r3, [pc, #132]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004600:	4a1b      	ldr	r2, [pc, #108]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004606:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800460a:	4a19      	ldr	r2, [pc, #100]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d016      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7fe f9b8 	bl	8002990 <HAL_GetTick>
 8004620:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004622:	e00b      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004624:	f7fe f9b4 	bl	8002990 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d902      	bls.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	74fb      	strb	r3, [r7, #19]
            break;
 800463a:	e006      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800463c:	4b0c      	ldr	r3, [pc, #48]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800463e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0ec      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800464a:	7cfb      	ldrb	r3, [r7, #19]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10b      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004650:	4b07      	ldr	r3, [pc, #28]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004656:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800465e:	4904      	ldr	r1, [pc, #16]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004666:	e009      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004668:	7cfb      	ldrb	r3, [r7, #19]
 800466a:	74bb      	strb	r3, [r7, #18]
 800466c:	e006      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800466e:	bf00      	nop
 8004670:	40021000 	.word	0x40021000
 8004674:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004678:	7cfb      	ldrb	r3, [r7, #19]
 800467a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800467c:	7c7b      	ldrb	r3, [r7, #17]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d105      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004682:	4b8a      	ldr	r3, [pc, #552]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004686:	4a89      	ldr	r2, [pc, #548]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004688:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800468c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800469a:	4b84      	ldr	r3, [pc, #528]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800469c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a0:	f023 0203 	bic.w	r2, r3, #3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	4980      	ldr	r1, [pc, #512]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046bc:	4b7b      	ldr	r3, [pc, #492]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c2:	f023 020c 	bic.w	r2, r3, #12
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ca:	4978      	ldr	r1, [pc, #480]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0320 	and.w	r3, r3, #32
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046de:	4b73      	ldr	r3, [pc, #460]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ec:	496f      	ldr	r1, [pc, #444]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004700:	4b6a      	ldr	r3, [pc, #424]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004706:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800470e:	4967      	ldr	r1, [pc, #412]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004710:	4313      	orrs	r3, r2
 8004712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004722:	4b62      	ldr	r3, [pc, #392]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004728:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004730:	495e      	ldr	r1, [pc, #376]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004744:	4b59      	ldr	r3, [pc, #356]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800474a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004752:	4956      	ldr	r1, [pc, #344]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004766:	4b51      	ldr	r3, [pc, #324]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004774:	494d      	ldr	r1, [pc, #308]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d028      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004788:	4b48      	ldr	r3, [pc, #288]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004796:	4945      	ldr	r1, [pc, #276]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047a6:	d106      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047a8:	4b40      	ldr	r3, [pc, #256]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4a3f      	ldr	r2, [pc, #252]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047b2:	60d3      	str	r3, [r2, #12]
 80047b4:	e011      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047be:	d10c      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3304      	adds	r3, #4
 80047c4:	2101      	movs	r1, #1
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 f872 	bl	80048b0 <RCCEx_PLLSAI1_Config>
 80047cc:	4603      	mov	r3, r0
 80047ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047d0:	7cfb      	ldrb	r3, [r7, #19]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d028      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047e6:	4b31      	ldr	r3, [pc, #196]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ec:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f4:	492d      	ldr	r1, [pc, #180]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004800:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004804:	d106      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004806:	4b29      	ldr	r3, [pc, #164]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	4a28      	ldr	r2, [pc, #160]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800480c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004810:	60d3      	str	r3, [r2, #12]
 8004812:	e011      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004818:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800481c:	d10c      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3304      	adds	r3, #4
 8004822:	2101      	movs	r1, #1
 8004824:	4618      	mov	r0, r3
 8004826:	f000 f843 	bl	80048b0 <RCCEx_PLLSAI1_Config>
 800482a:	4603      	mov	r3, r0
 800482c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800482e:	7cfb      	ldrb	r3, [r7, #19]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004834:	7cfb      	ldrb	r3, [r7, #19]
 8004836:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01c      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004844:	4b19      	ldr	r3, [pc, #100]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004852:	4916      	ldr	r1, [pc, #88]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800485e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004862:	d10c      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3304      	adds	r3, #4
 8004868:	2102      	movs	r1, #2
 800486a:	4618      	mov	r0, r3
 800486c:	f000 f820 	bl	80048b0 <RCCEx_PLLSAI1_Config>
 8004870:	4603      	mov	r3, r0
 8004872:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004874:	7cfb      	ldrb	r3, [r7, #19]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800487a:	7cfb      	ldrb	r3, [r7, #19]
 800487c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800488a:	4b08      	ldr	r3, [pc, #32]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004890:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004898:	4904      	ldr	r1, [pc, #16]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40021000 	.word	0x40021000

080048b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048be:	4b74      	ldr	r3, [pc, #464]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d018      	beq.n	80048fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048ca:	4b71      	ldr	r3, [pc, #452]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f003 0203 	and.w	r2, r3, #3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d10d      	bne.n	80048f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
       ||
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d009      	beq.n	80048f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048e2:	4b6b      	ldr	r3, [pc, #428]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
       ||
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d047      	beq.n	8004986 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	73fb      	strb	r3, [r7, #15]
 80048fa:	e044      	b.n	8004986 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b03      	cmp	r3, #3
 8004902:	d018      	beq.n	8004936 <RCCEx_PLLSAI1_Config+0x86>
 8004904:	2b03      	cmp	r3, #3
 8004906:	d825      	bhi.n	8004954 <RCCEx_PLLSAI1_Config+0xa4>
 8004908:	2b01      	cmp	r3, #1
 800490a:	d002      	beq.n	8004912 <RCCEx_PLLSAI1_Config+0x62>
 800490c:	2b02      	cmp	r3, #2
 800490e:	d009      	beq.n	8004924 <RCCEx_PLLSAI1_Config+0x74>
 8004910:	e020      	b.n	8004954 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004912:	4b5f      	ldr	r3, [pc, #380]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d11d      	bne.n	800495a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004922:	e01a      	b.n	800495a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004924:	4b5a      	ldr	r3, [pc, #360]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800492c:	2b00      	cmp	r3, #0
 800492e:	d116      	bne.n	800495e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004934:	e013      	b.n	800495e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004936:	4b56      	ldr	r3, [pc, #344]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10f      	bne.n	8004962 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004942:	4b53      	ldr	r3, [pc, #332]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004952:	e006      	b.n	8004962 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	73fb      	strb	r3, [r7, #15]
      break;
 8004958:	e004      	b.n	8004964 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800495a:	bf00      	nop
 800495c:	e002      	b.n	8004964 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800495e:	bf00      	nop
 8004960:	e000      	b.n	8004964 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004962:	bf00      	nop
    }

    if(status == HAL_OK)
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10d      	bne.n	8004986 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800496a:	4b49      	ldr	r3, [pc, #292]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6819      	ldr	r1, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	3b01      	subs	r3, #1
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	430b      	orrs	r3, r1
 8004980:	4943      	ldr	r1, [pc, #268]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004982:	4313      	orrs	r3, r2
 8004984:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004986:	7bfb      	ldrb	r3, [r7, #15]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d17c      	bne.n	8004a86 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800498c:	4b40      	ldr	r3, [pc, #256]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a3f      	ldr	r2, [pc, #252]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004992:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004998:	f7fd fffa 	bl	8002990 <HAL_GetTick>
 800499c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800499e:	e009      	b.n	80049b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049a0:	f7fd fff6 	bl	8002990 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d902      	bls.n	80049b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	73fb      	strb	r3, [r7, #15]
        break;
 80049b2:	e005      	b.n	80049c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049b4:	4b36      	ldr	r3, [pc, #216]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1ef      	bne.n	80049a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d15f      	bne.n	8004a86 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d110      	bne.n	80049ee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049cc:	4b30      	ldr	r3, [pc, #192]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80049d4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6892      	ldr	r2, [r2, #8]
 80049dc:	0211      	lsls	r1, r2, #8
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	68d2      	ldr	r2, [r2, #12]
 80049e2:	06d2      	lsls	r2, r2, #27
 80049e4:	430a      	orrs	r2, r1
 80049e6:	492a      	ldr	r1, [pc, #168]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	610b      	str	r3, [r1, #16]
 80049ec:	e027      	b.n	8004a3e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d112      	bne.n	8004a1a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049f4:	4b26      	ldr	r3, [pc, #152]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80049fc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6892      	ldr	r2, [r2, #8]
 8004a04:	0211      	lsls	r1, r2, #8
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6912      	ldr	r2, [r2, #16]
 8004a0a:	0852      	lsrs	r2, r2, #1
 8004a0c:	3a01      	subs	r2, #1
 8004a0e:	0552      	lsls	r2, r2, #21
 8004a10:	430a      	orrs	r2, r1
 8004a12:	491f      	ldr	r1, [pc, #124]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	610b      	str	r3, [r1, #16]
 8004a18:	e011      	b.n	8004a3e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a22:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6892      	ldr	r2, [r2, #8]
 8004a2a:	0211      	lsls	r1, r2, #8
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6952      	ldr	r2, [r2, #20]
 8004a30:	0852      	lsrs	r2, r2, #1
 8004a32:	3a01      	subs	r2, #1
 8004a34:	0652      	lsls	r2, r2, #25
 8004a36:	430a      	orrs	r2, r1
 8004a38:	4915      	ldr	r1, [pc, #84]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a3e:	4b14      	ldr	r3, [pc, #80]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a13      	ldr	r2, [pc, #76]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a48:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4a:	f7fd ffa1 	bl	8002990 <HAL_GetTick>
 8004a4e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a50:	e009      	b.n	8004a66 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a52:	f7fd ff9d 	bl	8002990 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d902      	bls.n	8004a66 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	73fb      	strb	r3, [r7, #15]
          break;
 8004a64:	e005      	b.n	8004a72 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a66:	4b0a      	ldr	r3, [pc, #40]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0ef      	beq.n	8004a52 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d106      	bne.n	8004a86 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a78:	4b05      	ldr	r3, [pc, #20]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	4903      	ldr	r1, [pc, #12]	@ (8004a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40021000 	.word	0x40021000

08004a94 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d079      	beq.n	8004b9a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d106      	bne.n	8004ac0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7fd faa0 	bl	8002000 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f003 0310 	and.w	r3, r3, #16
 8004ad2:	2b10      	cmp	r3, #16
 8004ad4:	d058      	beq.n	8004b88 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	22ca      	movs	r2, #202	@ 0xca
 8004adc:	625a      	str	r2, [r3, #36]	@ 0x24
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2253      	movs	r2, #83	@ 0x53
 8004ae4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f97a 	bl	8004de0 <RTC_EnterInitMode>
 8004aec:	4603      	mov	r3, r0
 8004aee:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d127      	bne.n	8004b46 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6812      	ldr	r2, [r2, #0]
 8004b00:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004b04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b08:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6899      	ldr	r1, [r3, #8]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	68d2      	ldr	r2, [r2, #12]
 8004b30:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6919      	ldr	r1, [r3, #16]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	041a      	lsls	r2, r3, #16
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f97e 	bl	8004e48 <RTC_ExitInitMode>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d113      	bne.n	8004b7e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0203 	bic.w	r2, r2, #3
 8004b64:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	22ff      	movs	r2, #255	@ 0xff
 8004b84:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b86:	e001      	b.n	8004b8c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d103      	bne.n	8004b9a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ba4:	b590      	push	{r4, r7, lr}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <HAL_RTC_SetTime+0x1a>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	e08b      	b.n	8004cd6 <HAL_RTC_SetTime+0x132>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	22ca      	movs	r2, #202	@ 0xca
 8004bd4:	625a      	str	r2, [r3, #36]	@ 0x24
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2253      	movs	r2, #83	@ 0x53
 8004bdc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 f8fe 	bl	8004de0 <RTC_EnterInitMode>
 8004be4:	4603      	mov	r3, r0
 8004be6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004be8:	7cfb      	ldrb	r3, [r7, #19]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d163      	bne.n	8004cb6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d126      	bne.n	8004c42 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d102      	bne.n	8004c08 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2200      	movs	r2, #0
 8004c06:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 f959 	bl	8004ec4 <RTC_ByteToBcd2>
 8004c12:	4603      	mov	r3, r0
 8004c14:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	785b      	ldrb	r3, [r3, #1]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 f952 	bl	8004ec4 <RTC_ByteToBcd2>
 8004c20:	4603      	mov	r3, r0
 8004c22:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c24:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	789b      	ldrb	r3, [r3, #2]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 f94a 	bl	8004ec4 <RTC_ByteToBcd2>
 8004c30:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004c32:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	78db      	ldrb	r3, [r3, #3]
 8004c3a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	e018      	b.n	8004c74 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d102      	bne.n	8004c56 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2200      	movs	r2, #0
 8004c54:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	785b      	ldrb	r3, [r3, #1]
 8004c60:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c62:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004c68:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	78db      	ldrb	r3, [r3, #3]
 8004c6e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004c7e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004c82:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004c92:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6899      	ldr	r1, [r3, #8]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 f8cb 	bl	8004e48 <RTC_ExitInitMode>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	22ff      	movs	r2, #255	@ 0xff
 8004cbc:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004cbe:	7cfb      	ldrb	r3, [r7, #19]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d103      	bne.n	8004ccc <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004cd4:	7cfb      	ldrb	r3, [r7, #19]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd90      	pop	{r4, r7, pc}

08004cde <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b086      	sub	sp, #24
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	60f8      	str	r0, [r7, #12]
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004d0c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004d10:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	0c1b      	lsrs	r3, r3, #16
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	0a1b      	lsrs	r3, r3, #8
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	0d9b      	lsrs	r3, r3, #22
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d11a      	bne.n	8004d8c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 f8d2 	bl	8004f04 <RTC_Bcd2ToByte>
 8004d60:	4603      	mov	r3, r0
 8004d62:	461a      	mov	r2, r3
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	785b      	ldrb	r3, [r3, #1]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 f8c9 	bl	8004f04 <RTC_Bcd2ToByte>
 8004d72:	4603      	mov	r3, r0
 8004d74:	461a      	mov	r2, r3
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	789b      	ldrb	r3, [r3, #2]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 f8c0 	bl	8004f04 <RTC_Bcd2ToByte>
 8004d84:	4603      	mov	r3, r0
 8004d86:	461a      	mov	r2, r3
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a0d      	ldr	r2, [pc, #52]	@ (8004ddc <HAL_RTC_WaitForSynchro+0x44>)
 8004da6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004da8:	f7fd fdf2 	bl	8002990 <HAL_GetTick>
 8004dac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004dae:	e009      	b.n	8004dc4 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004db0:	f7fd fdee 	bl	8002990 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e007      	b.n	8004dd4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0320 	and.w	r3, r3, #32
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d0ee      	beq.n	8004db0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	0003ff5f 	.word	0x0003ff5f

08004de0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d120      	bne.n	8004e3c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8004e02:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004e04:	f7fd fdc4 	bl	8002990 <HAL_GetTick>
 8004e08:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004e0a:	e00d      	b.n	8004e28 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004e0c:	f7fd fdc0 	bl	8002990 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e1a:	d905      	bls.n	8004e28 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2203      	movs	r2, #3
 8004e24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d102      	bne.n	8004e3c <RTC_EnterInitMode+0x5c>
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
 8004e38:	2b03      	cmp	r3, #3
 8004e3a:	d1e7      	bne.n	8004e0c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004e54:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec0 <RTC_ExitInitMode+0x78>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4a19      	ldr	r2, [pc, #100]	@ (8004ec0 <RTC_ExitInitMode+0x78>)
 8004e5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e5e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004e60:	4b17      	ldr	r3, [pc, #92]	@ (8004ec0 <RTC_ExitInitMode+0x78>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 0320 	and.w	r3, r3, #32
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10c      	bne.n	8004e86 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff ff93 	bl	8004d98 <HAL_RTC_WaitForSynchro>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d01e      	beq.n	8004eb6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2203      	movs	r2, #3
 8004e7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	73fb      	strb	r3, [r7, #15]
 8004e84:	e017      	b.n	8004eb6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004e86:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec0 <RTC_ExitInitMode+0x78>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	4a0d      	ldr	r2, [pc, #52]	@ (8004ec0 <RTC_ExitInitMode+0x78>)
 8004e8c:	f023 0320 	bic.w	r3, r3, #32
 8004e90:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff ff80 	bl	8004d98 <HAL_RTC_WaitForSynchro>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d005      	beq.n	8004eaa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2203      	movs	r2, #3
 8004ea2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004eaa:	4b05      	ldr	r3, [pc, #20]	@ (8004ec0 <RTC_ExitInitMode+0x78>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	4a04      	ldr	r2, [pc, #16]	@ (8004ec0 <RTC_ExitInitMode+0x78>)
 8004eb0:	f043 0320 	orr.w	r3, r3, #32
 8004eb4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40002800 	.word	0x40002800

08004ec4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	4603      	mov	r3, r0
 8004ecc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004ed2:	79fb      	ldrb	r3, [r7, #7]
 8004ed4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004ed6:	e005      	b.n	8004ee4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3301      	adds	r3, #1
 8004edc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004ede:	7afb      	ldrb	r3, [r7, #11]
 8004ee0:	3b0a      	subs	r3, #10
 8004ee2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004ee4:	7afb      	ldrb	r3, [r7, #11]
 8004ee6:	2b09      	cmp	r3, #9
 8004ee8:	d8f6      	bhi.n	8004ed8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	7afb      	ldrb	r3, [r7, #11]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	b2db      	uxtb	r3, r3
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8004f0e:	79fb      	ldrb	r3, [r7, #7]
 8004f10:	091b      	lsrs	r3, r3, #4
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	461a      	mov	r2, r3
 8004f16:	0092      	lsls	r2, r2, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
 8004f20:	f003 030f 	and.w	r3, r3, #15
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
 8004f28:	4413      	add	r3, r2
 8004f2a:	b2db      	uxtb	r3, r3
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e095      	b.n	8005076 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d108      	bne.n	8004f64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f5a:	d009      	beq.n	8004f70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	61da      	str	r2, [r3, #28]
 8004f62:	e005      	b.n	8004f70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fd f8a6 	bl	80020dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fa6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004fb0:	d902      	bls.n	8004fb8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	e002      	b.n	8004fbe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004fb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004fbc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004fc6:	d007      	beq.n	8004fd8 <HAL_SPI_Init+0xa0>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004fd0:	d002      	beq.n	8004fd8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800501a:	ea42 0103 	orr.w	r1, r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005022:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	0c1b      	lsrs	r3, r3, #16
 8005034:	f003 0204 	and.w	r2, r3, #4
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	431a      	orrs	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005054:	ea42 0103 	orr.w	r1, r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b088      	sub	sp, #32
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	603b      	str	r3, [r7, #0]
 800508a:	4613      	mov	r3, r2
 800508c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800508e:	f7fd fc7f 	bl	8002990 <HAL_GetTick>
 8005092:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005094:	88fb      	ldrh	r3, [r7, #6]
 8005096:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d001      	beq.n	80050a8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80050a4:	2302      	movs	r3, #2
 80050a6:	e15c      	b.n	8005362 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <HAL_SPI_Transmit+0x36>
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e154      	b.n	8005362 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_SPI_Transmit+0x48>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e14d      	b.n	8005362 <HAL_SPI_Transmit+0x2e4>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2203      	movs	r2, #3
 80050d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	88fa      	ldrh	r2, [r7, #6]
 80050e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	88fa      	ldrh	r2, [r7, #6]
 80050ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005118:	d10f      	bne.n	800513a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005128:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005138:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005144:	2b40      	cmp	r3, #64	@ 0x40
 8005146:	d007      	beq.n	8005158 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005156:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005160:	d952      	bls.n	8005208 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <HAL_SPI_Transmit+0xf2>
 800516a:	8b7b      	ldrh	r3, [r7, #26]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d145      	bne.n	80051fc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005174:	881a      	ldrh	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005180:	1c9a      	adds	r2, r3, #2
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005194:	e032      	b.n	80051fc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d112      	bne.n	80051ca <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a8:	881a      	ldrh	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b4:	1c9a      	adds	r2, r3, #2
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051be:	b29b      	uxth	r3, r3
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051c8:	e018      	b.n	80051fc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051ca:	f7fd fbe1 	bl	8002990 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d803      	bhi.n	80051e2 <HAL_SPI_Transmit+0x164>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e0:	d102      	bne.n	80051e8 <HAL_SPI_Transmit+0x16a>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d109      	bne.n	80051fc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e0b2      	b.n	8005362 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1c7      	bne.n	8005196 <HAL_SPI_Transmit+0x118>
 8005206:	e083      	b.n	8005310 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <HAL_SPI_Transmit+0x198>
 8005210:	8b7b      	ldrh	r3, [r7, #26]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d177      	bne.n	8005306 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800521a:	b29b      	uxth	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	d912      	bls.n	8005246 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005224:	881a      	ldrh	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005230:	1c9a      	adds	r2, r3, #2
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b02      	subs	r3, #2
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005244:	e05f      	b.n	8005306 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	330c      	adds	r3, #12
 8005250:	7812      	ldrb	r2, [r2, #0]
 8005252:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800526c:	e04b      	b.n	8005306 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b02      	cmp	r3, #2
 800527a:	d12b      	bne.n	80052d4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b01      	cmp	r3, #1
 8005284:	d912      	bls.n	80052ac <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528a:	881a      	ldrh	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005296:	1c9a      	adds	r2, r3, #2
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3b02      	subs	r3, #2
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80052aa:	e02c      	b.n	8005306 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	330c      	adds	r3, #12
 80052b6:	7812      	ldrb	r2, [r2, #0]
 80052b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80052d2:	e018      	b.n	8005306 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052d4:	f7fd fb5c 	bl	8002990 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d803      	bhi.n	80052ec <HAL_SPI_Transmit+0x26e>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d102      	bne.n	80052f2 <HAL_SPI_Transmit+0x274>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d109      	bne.n	8005306 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e02d      	b.n	8005362 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800530a:	b29b      	uxth	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1ae      	bne.n	800526e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	6839      	ldr	r1, [r7, #0]
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 fcf5 	bl	8005d04 <SPI_EndRxTxTransaction>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2220      	movs	r2, #32
 8005324:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10a      	bne.n	8005344 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800532e:	2300      	movs	r3, #0
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e000      	b.n	8005362 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005360:	2300      	movs	r3, #0
  }
}
 8005362:	4618      	mov	r0, r3
 8005364:	3720      	adds	r7, #32
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b088      	sub	sp, #32
 800536e:	af02      	add	r7, sp, #8
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	603b      	str	r3, [r7, #0]
 8005376:	4613      	mov	r3, r2
 8005378:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b01      	cmp	r3, #1
 8005384:	d001      	beq.n	800538a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005386:	2302      	movs	r3, #2
 8005388:	e123      	b.n	80055d2 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005392:	d112      	bne.n	80053ba <HAL_SPI_Receive+0x50>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10e      	bne.n	80053ba <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2204      	movs	r2, #4
 80053a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80053a4:	88fa      	ldrh	r2, [r7, #6]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	4613      	mov	r3, r2
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	68b9      	ldr	r1, [r7, #8]
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 f912 	bl	80055da <HAL_SPI_TransmitReceive>
 80053b6:	4603      	mov	r3, r0
 80053b8:	e10b      	b.n	80055d2 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053ba:	f7fd fae9 	bl	8002990 <HAL_GetTick>
 80053be:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <HAL_SPI_Receive+0x62>
 80053c6:	88fb      	ldrh	r3, [r7, #6]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e100      	b.n	80055d2 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d101      	bne.n	80053de <HAL_SPI_Receive+0x74>
 80053da:	2302      	movs	r3, #2
 80053dc:	e0f9      	b.n	80055d2 <HAL_SPI_Receive+0x268>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2204      	movs	r2, #4
 80053ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	88fa      	ldrh	r2, [r7, #6]
 80053fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	88fa      	ldrh	r2, [r7, #6]
 8005406:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005430:	d908      	bls.n	8005444 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005440:	605a      	str	r2, [r3, #4]
 8005442:	e007      	b.n	8005454 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005452:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800545c:	d10f      	bne.n	800547e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800546c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800547c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005488:	2b40      	cmp	r3, #64	@ 0x40
 800548a:	d007      	beq.n	800549c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800549a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054a4:	d875      	bhi.n	8005592 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80054a6:	e037      	b.n	8005518 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d117      	bne.n	80054e6 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f103 020c 	add.w	r2, r3, #12
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c2:	7812      	ldrb	r2, [r2, #0]
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80054e4:	e018      	b.n	8005518 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054e6:	f7fd fa53 	bl	8002990 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d803      	bhi.n	80054fe <HAL_SPI_Receive+0x194>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fc:	d102      	bne.n	8005504 <HAL_SPI_Receive+0x19a>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d109      	bne.n	8005518 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e05c      	b.n	80055d2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800551e:	b29b      	uxth	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1c1      	bne.n	80054a8 <HAL_SPI_Receive+0x13e>
 8005524:	e03b      	b.n	800559e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b01      	cmp	r3, #1
 8005532:	d115      	bne.n	8005560 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553e:	b292      	uxth	r2, r2
 8005540:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005546:	1c9a      	adds	r2, r3, #2
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005552:	b29b      	uxth	r3, r3
 8005554:	3b01      	subs	r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800555e:	e018      	b.n	8005592 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005560:	f7fd fa16 	bl	8002990 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d803      	bhi.n	8005578 <HAL_SPI_Receive+0x20e>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005576:	d102      	bne.n	800557e <HAL_SPI_Receive+0x214>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d109      	bne.n	8005592 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e01f      	b.n	80055d2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005598:	b29b      	uxth	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1c3      	bne.n	8005526 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	6839      	ldr	r1, [r7, #0]
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 fb56 	bl	8005c54 <SPI_EndRxTransaction>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2220      	movs	r2, #32
 80055b2:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e000      	b.n	80055d2 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80055d0:	2300      	movs	r3, #0
  }
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b08a      	sub	sp, #40	@ 0x28
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	607a      	str	r2, [r7, #4]
 80055e6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80055e8:	2301      	movs	r3, #1
 80055ea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055ec:	f7fd f9d0 	bl	8002990 <HAL_GetTick>
 80055f0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80055f8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005600:	887b      	ldrh	r3, [r7, #2]
 8005602:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005604:	887b      	ldrh	r3, [r7, #2]
 8005606:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005608:	7ffb      	ldrb	r3, [r7, #31]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d00c      	beq.n	8005628 <HAL_SPI_TransmitReceive+0x4e>
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005614:	d106      	bne.n	8005624 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d102      	bne.n	8005624 <HAL_SPI_TransmitReceive+0x4a>
 800561e:	7ffb      	ldrb	r3, [r7, #31]
 8005620:	2b04      	cmp	r3, #4
 8005622:	d001      	beq.n	8005628 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005624:	2302      	movs	r3, #2
 8005626:	e1f3      	b.n	8005a10 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d005      	beq.n	800563a <HAL_SPI_TransmitReceive+0x60>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <HAL_SPI_TransmitReceive+0x60>
 8005634:	887b      	ldrh	r3, [r7, #2]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e1e8      	b.n	8005a10 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_SPI_TransmitReceive+0x72>
 8005648:	2302      	movs	r3, #2
 800564a:	e1e1      	b.n	8005a10 <HAL_SPI_TransmitReceive+0x436>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b04      	cmp	r3, #4
 800565e:	d003      	beq.n	8005668 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2205      	movs	r2, #5
 8005664:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	887a      	ldrh	r2, [r7, #2]
 8005678:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	887a      	ldrh	r2, [r7, #2]
 8005680:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	887a      	ldrh	r2, [r7, #2]
 800568e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	887a      	ldrh	r2, [r7, #2]
 8005694:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056aa:	d802      	bhi.n	80056b2 <HAL_SPI_TransmitReceive+0xd8>
 80056ac:	8abb      	ldrh	r3, [r7, #20]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d908      	bls.n	80056c4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80056c0:	605a      	str	r2, [r3, #4]
 80056c2:	e007      	b.n	80056d4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80056d2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056de:	2b40      	cmp	r3, #64	@ 0x40
 80056e0:	d007      	beq.n	80056f2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056fa:	f240 8083 	bls.w	8005804 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <HAL_SPI_TransmitReceive+0x132>
 8005706:	8afb      	ldrh	r3, [r7, #22]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d16f      	bne.n	80057ec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005710:	881a      	ldrh	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571c:	1c9a      	adds	r2, r3, #2
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005730:	e05c      	b.n	80057ec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b02      	cmp	r3, #2
 800573e:	d11b      	bne.n	8005778 <HAL_SPI_TransmitReceive+0x19e>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d016      	beq.n	8005778 <HAL_SPI_TransmitReceive+0x19e>
 800574a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574c:	2b01      	cmp	r3, #1
 800574e:	d113      	bne.n	8005778 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005754:	881a      	ldrh	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005760:	1c9a      	adds	r2, r3, #2
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800576a:	b29b      	uxth	r3, r3
 800576c:	3b01      	subs	r3, #1
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b01      	cmp	r3, #1
 8005784:	d11c      	bne.n	80057c0 <HAL_SPI_TransmitReceive+0x1e6>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d016      	beq.n	80057c0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579c:	b292      	uxth	r2, r2
 800579e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a4:	1c9a      	adds	r2, r3, #2
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057bc:	2301      	movs	r3, #1
 80057be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80057c0:	f7fd f8e6 	bl	8002990 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d80d      	bhi.n	80057ec <HAL_SPI_TransmitReceive+0x212>
 80057d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d6:	d009      	beq.n	80057ec <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e111      	b.n	8005a10 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d19d      	bne.n	8005732 <HAL_SPI_TransmitReceive+0x158>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d197      	bne.n	8005732 <HAL_SPI_TransmitReceive+0x158>
 8005802:	e0e5      	b.n	80059d0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <HAL_SPI_TransmitReceive+0x23a>
 800580c:	8afb      	ldrh	r3, [r7, #22]
 800580e:	2b01      	cmp	r3, #1
 8005810:	f040 80d1 	bne.w	80059b6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b01      	cmp	r3, #1
 800581c:	d912      	bls.n	8005844 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005822:	881a      	ldrh	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582e:	1c9a      	adds	r2, r3, #2
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005838:	b29b      	uxth	r3, r3
 800583a:	3b02      	subs	r3, #2
 800583c:	b29a      	uxth	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005842:	e0b8      	b.n	80059b6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	330c      	adds	r3, #12
 800584e:	7812      	ldrb	r2, [r2, #0]
 8005850:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005860:	b29b      	uxth	r3, r3
 8005862:	3b01      	subs	r3, #1
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800586a:	e0a4      	b.n	80059b6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b02      	cmp	r3, #2
 8005878:	d134      	bne.n	80058e4 <HAL_SPI_TransmitReceive+0x30a>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d02f      	beq.n	80058e4 <HAL_SPI_TransmitReceive+0x30a>
 8005884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005886:	2b01      	cmp	r3, #1
 8005888:	d12c      	bne.n	80058e4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800588e:	b29b      	uxth	r3, r3
 8005890:	2b01      	cmp	r3, #1
 8005892:	d912      	bls.n	80058ba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005898:	881a      	ldrh	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a4:	1c9a      	adds	r2, r3, #2
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b02      	subs	r3, #2
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80058b8:	e012      	b.n	80058e0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	330c      	adds	r3, #12
 80058c4:	7812      	ldrb	r2, [r2, #0]
 80058c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29a      	uxth	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d148      	bne.n	8005984 <HAL_SPI_TransmitReceive+0x3aa>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d042      	beq.n	8005984 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005904:	b29b      	uxth	r3, r3
 8005906:	2b01      	cmp	r3, #1
 8005908:	d923      	bls.n	8005952 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005914:	b292      	uxth	r2, r2
 8005916:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591c:	1c9a      	adds	r2, r3, #2
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005928:	b29b      	uxth	r3, r3
 800592a:	3b02      	subs	r3, #2
 800592c:	b29a      	uxth	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800593a:	b29b      	uxth	r3, r3
 800593c:	2b01      	cmp	r3, #1
 800593e:	d81f      	bhi.n	8005980 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800594e:	605a      	str	r2, [r3, #4]
 8005950:	e016      	b.n	8005980 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f103 020c 	add.w	r2, r3, #12
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595e:	7812      	ldrb	r2, [r2, #0]
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005974:	b29b      	uxth	r3, r3
 8005976:	3b01      	subs	r3, #1
 8005978:	b29a      	uxth	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005980:	2301      	movs	r3, #1
 8005982:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005984:	f7fd f804 	bl	8002990 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005990:	429a      	cmp	r2, r3
 8005992:	d803      	bhi.n	800599c <HAL_SPI_TransmitReceive+0x3c2>
 8005994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599a:	d102      	bne.n	80059a2 <HAL_SPI_TransmitReceive+0x3c8>
 800599c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d109      	bne.n	80059b6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e02c      	b.n	8005a10 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f47f af55 	bne.w	800586c <HAL_SPI_TransmitReceive+0x292>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f47f af4e 	bne.w	800586c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059d0:	6a3a      	ldr	r2, [r7, #32]
 80059d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 f995 	bl	8005d04 <SPI_EndRxTxTransaction>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d008      	beq.n	80059f2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2220      	movs	r2, #32
 80059e4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e00e      	b.n	8005a10 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e000      	b.n	8005a10 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
  }
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3728      	adds	r7, #40	@ 0x28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b088      	sub	sp, #32
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	603b      	str	r3, [r7, #0]
 8005a24:	4613      	mov	r3, r2
 8005a26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a28:	f7fc ffb2 	bl	8002990 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a30:	1a9b      	subs	r3, r3, r2
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	4413      	add	r3, r2
 8005a36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a38:	f7fc ffaa 	bl	8002990 <HAL_GetTick>
 8005a3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a3e:	4b39      	ldr	r3, [pc, #228]	@ (8005b24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	015b      	lsls	r3, r3, #5
 8005a44:	0d1b      	lsrs	r3, r3, #20
 8005a46:	69fa      	ldr	r2, [r7, #28]
 8005a48:	fb02 f303 	mul.w	r3, r2, r3
 8005a4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a4e:	e054      	b.n	8005afa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a56:	d050      	beq.n	8005afa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a58:	f7fc ff9a 	bl	8002990 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d902      	bls.n	8005a6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d13d      	bne.n	8005aea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a86:	d111      	bne.n	8005aac <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a90:	d004      	beq.n	8005a9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a9a:	d107      	bne.n	8005aac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005aaa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ab4:	d10f      	bne.n	8005ad6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ad4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e017      	b.n	8005b1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	3b01      	subs	r3, #1
 8005af8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	4013      	ands	r3, r2
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	bf0c      	ite	eq
 8005b0a:	2301      	moveq	r3, #1
 8005b0c:	2300      	movne	r3, #0
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	461a      	mov	r2, r3
 8005b12:	79fb      	ldrb	r3, [r7, #7]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d19b      	bne.n	8005a50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3720      	adds	r7, #32
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000000 	.word	0x20000000

08005b28 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08a      	sub	sp, #40	@ 0x28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005b36:	2300      	movs	r3, #0
 8005b38:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005b3a:	f7fc ff29 	bl	8002990 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b42:	1a9b      	subs	r3, r3, r2
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	4413      	add	r3, r2
 8005b48:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005b4a:	f7fc ff21 	bl	8002990 <HAL_GetTick>
 8005b4e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	330c      	adds	r3, #12
 8005b56:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005b58:	4b3d      	ldr	r3, [pc, #244]	@ (8005c50 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	00da      	lsls	r2, r3, #3
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	0d1b      	lsrs	r3, r3, #20
 8005b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b6a:	fb02 f303 	mul.w	r3, r2, r3
 8005b6e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005b70:	e060      	b.n	8005c34 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005b78:	d107      	bne.n	8005b8a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d104      	bne.n	8005b8a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005b88:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b90:	d050      	beq.n	8005c34 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b92:	f7fc fefd 	bl	8002990 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d902      	bls.n	8005ba8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d13d      	bne.n	8005c24 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005bb6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bc0:	d111      	bne.n	8005be6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bca:	d004      	beq.n	8005bd6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bd4:	d107      	bne.n	8005be6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005be4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bee:	d10f      	bne.n	8005c10 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e010      	b.n	8005c46 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	3b01      	subs	r3, #1
 8005c32:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689a      	ldr	r2, [r3, #8]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d196      	bne.n	8005b72 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3728      	adds	r7, #40	@ 0x28
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	20000000 	.word	0x20000000

08005c54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c68:	d111      	bne.n	8005c8e <SPI_EndRxTransaction+0x3a>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c72:	d004      	beq.n	8005c7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c7c:	d107      	bne.n	8005c8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c8c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2200      	movs	r2, #0
 8005c96:	2180      	movs	r1, #128	@ 0x80
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f7ff febd 	bl	8005a18 <SPI_WaitFlagStateUntilTimeout>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d007      	beq.n	8005cb4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ca8:	f043 0220 	orr.w	r2, r3, #32
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e023      	b.n	8005cfc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cbc:	d11d      	bne.n	8005cfa <SPI_EndRxTransaction+0xa6>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cc6:	d004      	beq.n	8005cd2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cd0:	d113      	bne.n	8005cfa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f7ff ff22 	bl	8005b28 <SPI_WaitFifoStateUntilTimeout>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d007      	beq.n	8005cfa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cee:	f043 0220 	orr.w	r2, r3, #32
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e000      	b.n	8005cfc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af02      	add	r7, sp, #8
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f7ff ff03 	bl	8005b28 <SPI_WaitFifoStateUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d007      	beq.n	8005d38 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d2c:	f043 0220 	orr.w	r2, r3, #32
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e027      	b.n	8005d88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	2180      	movs	r1, #128	@ 0x80
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f7ff fe68 	bl	8005a18 <SPI_WaitFlagStateUntilTimeout>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d007      	beq.n	8005d5e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d52:	f043 0220 	orr.w	r2, r3, #32
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e014      	b.n	8005d88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f7ff fedc 	bl	8005b28 <SPI_WaitFifoStateUntilTimeout>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d007      	beq.n	8005d86 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d7a:	f043 0220 	orr.w	r2, r3, #32
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e000      	b.n	8005d88 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e049      	b.n	8005e36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d106      	bne.n	8005dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7fc fc7a 	bl	80026b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3304      	adds	r3, #4
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4610      	mov	r0, r2
 8005dd0:	f000 fbf8 	bl	80065c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d001      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e03b      	b.n	8005ed0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0201 	orr.w	r2, r2, #1
 8005e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a19      	ldr	r2, [pc, #100]	@ (8005edc <HAL_TIM_Base_Start_IT+0x9c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d009      	beq.n	8005e8e <HAL_TIM_Base_Start_IT+0x4e>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e82:	d004      	beq.n	8005e8e <HAL_TIM_Base_Start_IT+0x4e>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a15      	ldr	r2, [pc, #84]	@ (8005ee0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d115      	bne.n	8005eba <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	4b13      	ldr	r3, [pc, #76]	@ (8005ee4 <HAL_TIM_Base_Start_IT+0xa4>)
 8005e96:	4013      	ands	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2b06      	cmp	r3, #6
 8005e9e:	d015      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x8c>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ea6:	d011      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0201 	orr.w	r2, r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb8:	e008      	b.n	8005ecc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f042 0201 	orr.w	r2, r2, #1
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	e000      	b.n	8005ece <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ecc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	40012c00 	.word	0x40012c00
 8005ee0:	40014000 	.word	0x40014000
 8005ee4:	00010007 	.word	0x00010007

08005ee8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e049      	b.n	8005f8e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d106      	bne.n	8005f14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f841 	bl	8005f96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3304      	adds	r3, #4
 8005f24:	4619      	mov	r1, r3
 8005f26:	4610      	mov	r0, r2
 8005f28:	f000 fb4c 	bl	80065c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d020      	beq.n	800600e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d01b      	beq.n	800600e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f06f 0202 	mvn.w	r2, #2
 8005fde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	f003 0303 	and.w	r3, r3, #3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fac6 	bl	8006586 <HAL_TIM_IC_CaptureCallback>
 8005ffa:	e005      	b.n	8006008 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fab8 	bl	8006572 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fac9 	bl	800659a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	d020      	beq.n	800605a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	2b00      	cmp	r3, #0
 8006020:	d01b      	beq.n	800605a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f06f 0204 	mvn.w	r2, #4
 800602a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 faa0 	bl	8006586 <HAL_TIM_IC_CaptureCallback>
 8006046:	e005      	b.n	8006054 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fa92 	bl	8006572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 faa3 	bl	800659a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f003 0308 	and.w	r3, r3, #8
 8006060:	2b00      	cmp	r3, #0
 8006062:	d020      	beq.n	80060a6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f003 0308 	and.w	r3, r3, #8
 800606a:	2b00      	cmp	r3, #0
 800606c:	d01b      	beq.n	80060a6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f06f 0208 	mvn.w	r2, #8
 8006076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2204      	movs	r2, #4
 800607c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	f003 0303 	and.w	r3, r3, #3
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fa7a 	bl	8006586 <HAL_TIM_IC_CaptureCallback>
 8006092:	e005      	b.n	80060a0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fa6c 	bl	8006572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fa7d 	bl	800659a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f003 0310 	and.w	r3, r3, #16
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d020      	beq.n	80060f2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d01b      	beq.n	80060f2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f06f 0210 	mvn.w	r2, #16
 80060c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2208      	movs	r2, #8
 80060c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fa54 	bl	8006586 <HAL_TIM_IC_CaptureCallback>
 80060de:	e005      	b.n	80060ec <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fa46 	bl	8006572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fa57 	bl	800659a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00c      	beq.n	8006116 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d007      	beq.n	8006116 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f06f 0201 	mvn.w	r2, #1
 800610e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7fb fa95 	bl	8001640 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800611c:	2b00      	cmp	r3, #0
 800611e:	d104      	bne.n	800612a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00c      	beq.n	8006144 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006130:	2b00      	cmp	r3, #0
 8006132:	d007      	beq.n	8006144 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800613c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 feb0 	bl	8006ea4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00c      	beq.n	8006168 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006154:	2b00      	cmp	r3, #0
 8006156:	d007      	beq.n	8006168 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fea8 	bl	8006eb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00c      	beq.n	800618c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006178:	2b00      	cmp	r3, #0
 800617a:	d007      	beq.n	800618c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fa11 	bl	80065ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00c      	beq.n	80061b0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f003 0320 	and.w	r3, r3, #32
 800619c:	2b00      	cmp	r3, #0
 800619e:	d007      	beq.n	80061b0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f06f 0220 	mvn.w	r2, #32
 80061a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fe70 	bl	8006e90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061b0:	bf00      	nop
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061c4:	2300      	movs	r3, #0
 80061c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d101      	bne.n	80061d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061d2:	2302      	movs	r3, #2
 80061d4:	e0ff      	b.n	80063d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b14      	cmp	r3, #20
 80061e2:	f200 80f0 	bhi.w	80063c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80061e6:	a201      	add	r2, pc, #4	@ (adr r2, 80061ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ec:	08006241 	.word	0x08006241
 80061f0:	080063c7 	.word	0x080063c7
 80061f4:	080063c7 	.word	0x080063c7
 80061f8:	080063c7 	.word	0x080063c7
 80061fc:	08006281 	.word	0x08006281
 8006200:	080063c7 	.word	0x080063c7
 8006204:	080063c7 	.word	0x080063c7
 8006208:	080063c7 	.word	0x080063c7
 800620c:	080062c3 	.word	0x080062c3
 8006210:	080063c7 	.word	0x080063c7
 8006214:	080063c7 	.word	0x080063c7
 8006218:	080063c7 	.word	0x080063c7
 800621c:	08006303 	.word	0x08006303
 8006220:	080063c7 	.word	0x080063c7
 8006224:	080063c7 	.word	0x080063c7
 8006228:	080063c7 	.word	0x080063c7
 800622c:	08006345 	.word	0x08006345
 8006230:	080063c7 	.word	0x080063c7
 8006234:	080063c7 	.word	0x080063c7
 8006238:	080063c7 	.word	0x080063c7
 800623c:	08006385 	.word	0x08006385
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fa2c 	bl	80066a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0208 	orr.w	r2, r2, #8
 800625a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699a      	ldr	r2, [r3, #24]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0204 	bic.w	r2, r2, #4
 800626a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6999      	ldr	r1, [r3, #24]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	691a      	ldr	r2, [r3, #16]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	619a      	str	r2, [r3, #24]
      break;
 800627e:	e0a5      	b.n	80063cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68b9      	ldr	r1, [r7, #8]
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fa88 	bl	800679c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800629a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	699a      	ldr	r2, [r3, #24]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6999      	ldr	r1, [r3, #24]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	021a      	lsls	r2, r3, #8
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	619a      	str	r2, [r3, #24]
      break;
 80062c0:	e084      	b.n	80063cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68b9      	ldr	r1, [r7, #8]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 fae1 	bl	8006890 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69da      	ldr	r2, [r3, #28]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0208 	orr.w	r2, r2, #8
 80062dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	69da      	ldr	r2, [r3, #28]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 0204 	bic.w	r2, r2, #4
 80062ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69d9      	ldr	r1, [r3, #28]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	691a      	ldr	r2, [r3, #16]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	61da      	str	r2, [r3, #28]
      break;
 8006300:	e064      	b.n	80063cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68b9      	ldr	r1, [r7, #8]
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fb39 	bl	8006980 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69da      	ldr	r2, [r3, #28]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800631c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69da      	ldr	r2, [r3, #28]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800632c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69d9      	ldr	r1, [r3, #28]
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	021a      	lsls	r2, r3, #8
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	61da      	str	r2, [r3, #28]
      break;
 8006342:	e043      	b.n	80063cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68b9      	ldr	r1, [r7, #8]
 800634a:	4618      	mov	r0, r3
 800634c:	f000 fb76 	bl	8006a3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0208 	orr.w	r2, r2, #8
 800635e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0204 	bic.w	r2, r2, #4
 800636e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	691a      	ldr	r2, [r3, #16]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006382:	e023      	b.n	80063cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68b9      	ldr	r1, [r7, #8]
 800638a:	4618      	mov	r0, r3
 800638c:	f000 fbae 	bl	8006aec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800639e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	021a      	lsls	r2, r3, #8
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80063c4:	e002      	b.n	80063cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	75fb      	strb	r3, [r7, #23]
      break;
 80063ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop

080063e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <HAL_TIM_ConfigClockSource+0x1c>
 80063f8:	2302      	movs	r3, #2
 80063fa:	e0b6      	b.n	800656a <HAL_TIM_ConfigClockSource+0x18a>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800641a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800641e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006426:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006438:	d03e      	beq.n	80064b8 <HAL_TIM_ConfigClockSource+0xd8>
 800643a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800643e:	f200 8087 	bhi.w	8006550 <HAL_TIM_ConfigClockSource+0x170>
 8006442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006446:	f000 8086 	beq.w	8006556 <HAL_TIM_ConfigClockSource+0x176>
 800644a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800644e:	d87f      	bhi.n	8006550 <HAL_TIM_ConfigClockSource+0x170>
 8006450:	2b70      	cmp	r3, #112	@ 0x70
 8006452:	d01a      	beq.n	800648a <HAL_TIM_ConfigClockSource+0xaa>
 8006454:	2b70      	cmp	r3, #112	@ 0x70
 8006456:	d87b      	bhi.n	8006550 <HAL_TIM_ConfigClockSource+0x170>
 8006458:	2b60      	cmp	r3, #96	@ 0x60
 800645a:	d050      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x11e>
 800645c:	2b60      	cmp	r3, #96	@ 0x60
 800645e:	d877      	bhi.n	8006550 <HAL_TIM_ConfigClockSource+0x170>
 8006460:	2b50      	cmp	r3, #80	@ 0x50
 8006462:	d03c      	beq.n	80064de <HAL_TIM_ConfigClockSource+0xfe>
 8006464:	2b50      	cmp	r3, #80	@ 0x50
 8006466:	d873      	bhi.n	8006550 <HAL_TIM_ConfigClockSource+0x170>
 8006468:	2b40      	cmp	r3, #64	@ 0x40
 800646a:	d058      	beq.n	800651e <HAL_TIM_ConfigClockSource+0x13e>
 800646c:	2b40      	cmp	r3, #64	@ 0x40
 800646e:	d86f      	bhi.n	8006550 <HAL_TIM_ConfigClockSource+0x170>
 8006470:	2b30      	cmp	r3, #48	@ 0x30
 8006472:	d064      	beq.n	800653e <HAL_TIM_ConfigClockSource+0x15e>
 8006474:	2b30      	cmp	r3, #48	@ 0x30
 8006476:	d86b      	bhi.n	8006550 <HAL_TIM_ConfigClockSource+0x170>
 8006478:	2b20      	cmp	r3, #32
 800647a:	d060      	beq.n	800653e <HAL_TIM_ConfigClockSource+0x15e>
 800647c:	2b20      	cmp	r3, #32
 800647e:	d867      	bhi.n	8006550 <HAL_TIM_ConfigClockSource+0x170>
 8006480:	2b00      	cmp	r3, #0
 8006482:	d05c      	beq.n	800653e <HAL_TIM_ConfigClockSource+0x15e>
 8006484:	2b10      	cmp	r3, #16
 8006486:	d05a      	beq.n	800653e <HAL_TIM_ConfigClockSource+0x15e>
 8006488:	e062      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800649a:	f000 fbfb 	bl	8006c94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80064ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	609a      	str	r2, [r3, #8]
      break;
 80064b6:	e04f      	b.n	8006558 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064c8:	f000 fbe4 	bl	8006c94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689a      	ldr	r2, [r3, #8]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064da:	609a      	str	r2, [r3, #8]
      break;
 80064dc:	e03c      	b.n	8006558 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ea:	461a      	mov	r2, r3
 80064ec:	f000 fb58 	bl	8006ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2150      	movs	r1, #80	@ 0x50
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 fbb1 	bl	8006c5e <TIM_ITRx_SetConfig>
      break;
 80064fc:	e02c      	b.n	8006558 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800650a:	461a      	mov	r2, r3
 800650c:	f000 fb77 	bl	8006bfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2160      	movs	r1, #96	@ 0x60
 8006516:	4618      	mov	r0, r3
 8006518:	f000 fba1 	bl	8006c5e <TIM_ITRx_SetConfig>
      break;
 800651c:	e01c      	b.n	8006558 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800652a:	461a      	mov	r2, r3
 800652c:	f000 fb38 	bl	8006ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2140      	movs	r1, #64	@ 0x40
 8006536:	4618      	mov	r0, r3
 8006538:	f000 fb91 	bl	8006c5e <TIM_ITRx_SetConfig>
      break;
 800653c:	e00c      	b.n	8006558 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4619      	mov	r1, r3
 8006548:	4610      	mov	r0, r2
 800654a:	f000 fb88 	bl	8006c5e <TIM_ITRx_SetConfig>
      break;
 800654e:	e003      	b.n	8006558 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	73fb      	strb	r3, [r7, #15]
      break;
 8006554:	e000      	b.n	8006558 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006556:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006568:	7bfb      	ldrb	r3, [r7, #15]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800657a:	bf00      	nop
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800658e:	bf00      	nop
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800659a:	b480      	push	{r7}
 800659c:	b083      	sub	sp, #12
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065a2:	bf00      	nop
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065b6:	bf00      	nop
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
	...

080065c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a30      	ldr	r2, [pc, #192]	@ (8006698 <TIM_Base_SetConfig+0xd4>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d003      	beq.n	80065e4 <TIM_Base_SetConfig+0x20>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e2:	d108      	bne.n	80065f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a27      	ldr	r2, [pc, #156]	@ (8006698 <TIM_Base_SetConfig+0xd4>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00b      	beq.n	8006616 <TIM_Base_SetConfig+0x52>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006604:	d007      	beq.n	8006616 <TIM_Base_SetConfig+0x52>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a24      	ldr	r2, [pc, #144]	@ (800669c <TIM_Base_SetConfig+0xd8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d003      	beq.n	8006616 <TIM_Base_SetConfig+0x52>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a23      	ldr	r2, [pc, #140]	@ (80066a0 <TIM_Base_SetConfig+0xdc>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d108      	bne.n	8006628 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800661c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	4313      	orrs	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a12      	ldr	r2, [pc, #72]	@ (8006698 <TIM_Base_SetConfig+0xd4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d007      	beq.n	8006664 <TIM_Base_SetConfig+0xa0>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a11      	ldr	r2, [pc, #68]	@ (800669c <TIM_Base_SetConfig+0xd8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <TIM_Base_SetConfig+0xa0>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a10      	ldr	r2, [pc, #64]	@ (80066a0 <TIM_Base_SetConfig+0xdc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d103      	bne.n	800666c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	691a      	ldr	r2, [r3, #16]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b01      	cmp	r3, #1
 800667c:	d105      	bne.n	800668a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f023 0201 	bic.w	r2, r3, #1
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	611a      	str	r2, [r3, #16]
  }
}
 800668a:	bf00      	nop
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	40012c00 	.word	0x40012c00
 800669c:	40014000 	.word	0x40014000
 80066a0:	40014400 	.word	0x40014400

080066a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	f023 0201 	bic.w	r2, r3, #1
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 0303 	bic.w	r3, r3, #3
 80066de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f023 0302 	bic.w	r3, r3, #2
 80066f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a24      	ldr	r2, [pc, #144]	@ (8006790 <TIM_OC1_SetConfig+0xec>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d007      	beq.n	8006714 <TIM_OC1_SetConfig+0x70>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a23      	ldr	r2, [pc, #140]	@ (8006794 <TIM_OC1_SetConfig+0xf0>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d003      	beq.n	8006714 <TIM_OC1_SetConfig+0x70>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a22      	ldr	r2, [pc, #136]	@ (8006798 <TIM_OC1_SetConfig+0xf4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d10c      	bne.n	800672e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f023 0308 	bic.w	r3, r3, #8
 800671a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	4313      	orrs	r3, r2
 8006724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f023 0304 	bic.w	r3, r3, #4
 800672c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a17      	ldr	r2, [pc, #92]	@ (8006790 <TIM_OC1_SetConfig+0xec>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d007      	beq.n	8006746 <TIM_OC1_SetConfig+0xa2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a16      	ldr	r2, [pc, #88]	@ (8006794 <TIM_OC1_SetConfig+0xf0>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d003      	beq.n	8006746 <TIM_OC1_SetConfig+0xa2>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a15      	ldr	r2, [pc, #84]	@ (8006798 <TIM_OC1_SetConfig+0xf4>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d111      	bne.n	800676a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800674c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	4313      	orrs	r3, r2
 800675e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	4313      	orrs	r3, r2
 8006768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	621a      	str	r2, [r3, #32]
}
 8006784:	bf00      	nop
 8006786:	371c      	adds	r7, #28
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	40012c00 	.word	0x40012c00
 8006794:	40014000 	.word	0x40014000
 8006798:	40014400 	.word	0x40014400

0800679c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	f023 0210 	bic.w	r2, r3, #16
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	021b      	lsls	r3, r3, #8
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f023 0320 	bic.w	r3, r3, #32
 80067ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a22      	ldr	r2, [pc, #136]	@ (8006884 <TIM_OC2_SetConfig+0xe8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d10d      	bne.n	800681c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4313      	orrs	r3, r2
 8006812:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800681a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a19      	ldr	r2, [pc, #100]	@ (8006884 <TIM_OC2_SetConfig+0xe8>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d007      	beq.n	8006834 <TIM_OC2_SetConfig+0x98>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a18      	ldr	r2, [pc, #96]	@ (8006888 <TIM_OC2_SetConfig+0xec>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d003      	beq.n	8006834 <TIM_OC2_SetConfig+0x98>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a17      	ldr	r2, [pc, #92]	@ (800688c <TIM_OC2_SetConfig+0xf0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d113      	bne.n	800685c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800683a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006842:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	4313      	orrs	r3, r2
 800684e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	4313      	orrs	r3, r2
 800685a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	621a      	str	r2, [r3, #32]
}
 8006876:	bf00      	nop
 8006878:	371c      	adds	r7, #28
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	40012c00 	.word	0x40012c00
 8006888:	40014000 	.word	0x40014000
 800688c:	40014400 	.word	0x40014400

08006890 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006890:	b480      	push	{r7}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 0303 	bic.w	r3, r3, #3
 80068ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	021b      	lsls	r3, r3, #8
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a21      	ldr	r2, [pc, #132]	@ (8006974 <TIM_OC3_SetConfig+0xe4>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d10d      	bne.n	800690e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	021b      	lsls	r3, r3, #8
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	4313      	orrs	r3, r2
 8006904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800690c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a18      	ldr	r2, [pc, #96]	@ (8006974 <TIM_OC3_SetConfig+0xe4>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d007      	beq.n	8006926 <TIM_OC3_SetConfig+0x96>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a17      	ldr	r2, [pc, #92]	@ (8006978 <TIM_OC3_SetConfig+0xe8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d003      	beq.n	8006926 <TIM_OC3_SetConfig+0x96>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a16      	ldr	r2, [pc, #88]	@ (800697c <TIM_OC3_SetConfig+0xec>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d113      	bne.n	800694e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800692c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	011b      	lsls	r3, r3, #4
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	4313      	orrs	r3, r2
 8006940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	011b      	lsls	r3, r3, #4
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	4313      	orrs	r3, r2
 800694c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	621a      	str	r2, [r3, #32]
}
 8006968:	bf00      	nop
 800696a:	371c      	adds	r7, #28
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	40012c00 	.word	0x40012c00
 8006978:	40014000 	.word	0x40014000
 800697c:	40014400 	.word	0x40014400

08006980 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	021b      	lsls	r3, r3, #8
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	031b      	lsls	r3, r3, #12
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	4313      	orrs	r3, r2
 80069da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a14      	ldr	r2, [pc, #80]	@ (8006a30 <TIM_OC4_SetConfig+0xb0>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d007      	beq.n	80069f4 <TIM_OC4_SetConfig+0x74>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a13      	ldr	r2, [pc, #76]	@ (8006a34 <TIM_OC4_SetConfig+0xb4>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d003      	beq.n	80069f4 <TIM_OC4_SetConfig+0x74>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a12      	ldr	r2, [pc, #72]	@ (8006a38 <TIM_OC4_SetConfig+0xb8>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d109      	bne.n	8006a08 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	019b      	lsls	r3, r3, #6
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	621a      	str	r2, [r3, #32]
}
 8006a22:	bf00      	nop
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	40012c00 	.word	0x40012c00
 8006a34:	40014000 	.word	0x40014000
 8006a38:	40014400 	.word	0x40014400

08006a3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b087      	sub	sp, #28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006a80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	041b      	lsls	r3, r3, #16
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a13      	ldr	r2, [pc, #76]	@ (8006ae0 <TIM_OC5_SetConfig+0xa4>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d007      	beq.n	8006aa6 <TIM_OC5_SetConfig+0x6a>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a12      	ldr	r2, [pc, #72]	@ (8006ae4 <TIM_OC5_SetConfig+0xa8>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d003      	beq.n	8006aa6 <TIM_OC5_SetConfig+0x6a>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a11      	ldr	r2, [pc, #68]	@ (8006ae8 <TIM_OC5_SetConfig+0xac>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d109      	bne.n	8006aba <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006aac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	021b      	lsls	r3, r3, #8
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	621a      	str	r2, [r3, #32]
}
 8006ad4:	bf00      	nop
 8006ad6:	371c      	adds	r7, #28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	40012c00 	.word	0x40012c00
 8006ae4:	40014000 	.word	0x40014000
 8006ae8:	40014400 	.word	0x40014400

08006aec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a1b      	ldr	r3, [r3, #32]
 8006b00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	021b      	lsls	r3, r3, #8
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	051b      	lsls	r3, r3, #20
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a14      	ldr	r2, [pc, #80]	@ (8006b94 <TIM_OC6_SetConfig+0xa8>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d007      	beq.n	8006b58 <TIM_OC6_SetConfig+0x6c>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a13      	ldr	r2, [pc, #76]	@ (8006b98 <TIM_OC6_SetConfig+0xac>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d003      	beq.n	8006b58 <TIM_OC6_SetConfig+0x6c>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a12      	ldr	r2, [pc, #72]	@ (8006b9c <TIM_OC6_SetConfig+0xb0>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d109      	bne.n	8006b6c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	029b      	lsls	r3, r3, #10
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	621a      	str	r2, [r3, #32]
}
 8006b86:	bf00      	nop
 8006b88:	371c      	adds	r7, #28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	40012c00 	.word	0x40012c00
 8006b98:	40014000 	.word	0x40014000
 8006b9c:	40014400 	.word	0x40014400

08006ba0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6a1b      	ldr	r3, [r3, #32]
 8006bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	f023 0201 	bic.w	r2, r3, #1
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	011b      	lsls	r3, r3, #4
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f023 030a 	bic.w	r3, r3, #10
 8006bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	621a      	str	r2, [r3, #32]
}
 8006bf2:	bf00      	nop
 8006bf4:	371c      	adds	r7, #28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b087      	sub	sp, #28
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	60f8      	str	r0, [r7, #12]
 8006c06:	60b9      	str	r1, [r7, #8]
 8006c08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	f023 0210 	bic.w	r2, r3, #16
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	031b      	lsls	r3, r3, #12
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	011b      	lsls	r3, r3, #4
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	621a      	str	r2, [r3, #32]
}
 8006c52:	bf00      	nop
 8006c54:	371c      	adds	r7, #28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b085      	sub	sp, #20
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	f043 0307 	orr.w	r3, r3, #7
 8006c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	609a      	str	r2, [r3, #8]
}
 8006c88:	bf00      	nop
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	021a      	lsls	r2, r3, #8
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	609a      	str	r2, [r3, #8]
}
 8006cc8:	bf00      	nop
 8006cca:	371c      	adds	r7, #28
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d101      	bne.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e04f      	b.n	8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a21      	ldr	r2, [pc, #132]	@ (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d108      	bne.n	8006d28 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006d1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a14      	ldr	r2, [pc, #80]	@ (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d009      	beq.n	8006d60 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d54:	d004      	beq.n	8006d60 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a10      	ldr	r2, [pc, #64]	@ (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d10c      	bne.n	8006d7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	40012c00 	.word	0x40012c00
 8006d9c:	40014000 	.word	0x40014000

08006da0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d101      	bne.n	8006dbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006db8:	2302      	movs	r3, #2
 8006dba:	e060      	b.n	8006e7e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	041b      	lsls	r3, r3, #16
 8006e32:	4313      	orrs	r3, r2
 8006e34:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a14      	ldr	r2, [pc, #80]	@ (8006e8c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d115      	bne.n	8006e6c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4a:	051b      	lsls	r3, r3, #20
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	40012c00 	.word	0x40012c00

08006e90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e040      	b.n	8006f60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d106      	bne.n	8006ef4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7fb fca0 	bl	8002834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2224      	movs	r2, #36	@ 0x24
 8006ef8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0201 	bic.w	r2, r2, #1
 8006f08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d002      	beq.n	8006f18 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fade 	bl	80074d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f8af 	bl	800707c <UART_SetConfig>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e01b      	b.n	8006f60 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f042 0201 	orr.w	r2, r2, #1
 8006f56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fb5d 	bl	8007618 <UART_CheckIdleState>
 8006f5e:	4603      	mov	r3, r0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08a      	sub	sp, #40	@ 0x28
 8006f6c:	af02      	add	r7, sp, #8
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	603b      	str	r3, [r7, #0]
 8006f74:	4613      	mov	r3, r2
 8006f76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f7c:	2b20      	cmp	r3, #32
 8006f7e:	d177      	bne.n	8007070 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <HAL_UART_Transmit+0x24>
 8006f86:	88fb      	ldrh	r3, [r7, #6]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e070      	b.n	8007072 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2221      	movs	r2, #33	@ 0x21
 8006f9c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f9e:	f7fb fcf7 	bl	8002990 <HAL_GetTick>
 8006fa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	88fa      	ldrh	r2, [r7, #6]
 8006fa8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	88fa      	ldrh	r2, [r7, #6]
 8006fb0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fbc:	d108      	bne.n	8006fd0 <HAL_UART_Transmit+0x68>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d104      	bne.n	8006fd0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	61bb      	str	r3, [r7, #24]
 8006fce:	e003      	b.n	8006fd8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006fd8:	e02f      	b.n	800703a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2180      	movs	r1, #128	@ 0x80
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 fbbf 	bl	8007768 <UART_WaitOnFlagUntilTimeout>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d004      	beq.n	8006ffa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e03b      	b.n	8007072 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10b      	bne.n	8007018 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	881a      	ldrh	r2, [r3, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800700c:	b292      	uxth	r2, r2
 800700e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	3302      	adds	r3, #2
 8007014:	61bb      	str	r3, [r7, #24]
 8007016:	e007      	b.n	8007028 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	781a      	ldrb	r2, [r3, #0]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	3301      	adds	r3, #1
 8007026:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007040:	b29b      	uxth	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1c9      	bne.n	8006fda <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2200      	movs	r2, #0
 800704e:	2140      	movs	r1, #64	@ 0x40
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 fb89 	bl	8007768 <UART_WaitOnFlagUntilTimeout>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d004      	beq.n	8007066 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2220      	movs	r2, #32
 8007060:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e005      	b.n	8007072 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2220      	movs	r2, #32
 800706a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800706c:	2300      	movs	r3, #0
 800706e:	e000      	b.n	8007072 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007070:	2302      	movs	r3, #2
  }
}
 8007072:	4618      	mov	r0, r3
 8007074:	3720      	adds	r7, #32
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
	...

0800707c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800707c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007080:	b08a      	sub	sp, #40	@ 0x28
 8007082:	af00      	add	r7, sp, #0
 8007084:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	431a      	orrs	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	431a      	orrs	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	4bb4      	ldr	r3, [pc, #720]	@ (800737c <UART_SetConfig+0x300>)
 80070ac:	4013      	ands	r3, r2
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	6812      	ldr	r2, [r2, #0]
 80070b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070b4:	430b      	orrs	r3, r1
 80070b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	68da      	ldr	r2, [r3, #12]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4aa9      	ldr	r2, [pc, #676]	@ (8007380 <UART_SetConfig+0x304>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d004      	beq.n	80070e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070e4:	4313      	orrs	r3, r2
 80070e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070f8:	430a      	orrs	r2, r1
 80070fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4aa0      	ldr	r2, [pc, #640]	@ (8007384 <UART_SetConfig+0x308>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d126      	bne.n	8007154 <UART_SetConfig+0xd8>
 8007106:	4ba0      	ldr	r3, [pc, #640]	@ (8007388 <UART_SetConfig+0x30c>)
 8007108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	2b03      	cmp	r3, #3
 8007112:	d81b      	bhi.n	800714c <UART_SetConfig+0xd0>
 8007114:	a201      	add	r2, pc, #4	@ (adr r2, 800711c <UART_SetConfig+0xa0>)
 8007116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711a:	bf00      	nop
 800711c:	0800712d 	.word	0x0800712d
 8007120:	0800713d 	.word	0x0800713d
 8007124:	08007135 	.word	0x08007135
 8007128:	08007145 	.word	0x08007145
 800712c:	2301      	movs	r3, #1
 800712e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007132:	e080      	b.n	8007236 <UART_SetConfig+0x1ba>
 8007134:	2302      	movs	r3, #2
 8007136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800713a:	e07c      	b.n	8007236 <UART_SetConfig+0x1ba>
 800713c:	2304      	movs	r3, #4
 800713e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007142:	e078      	b.n	8007236 <UART_SetConfig+0x1ba>
 8007144:	2308      	movs	r3, #8
 8007146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800714a:	e074      	b.n	8007236 <UART_SetConfig+0x1ba>
 800714c:	2310      	movs	r3, #16
 800714e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007152:	e070      	b.n	8007236 <UART_SetConfig+0x1ba>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a8c      	ldr	r2, [pc, #560]	@ (800738c <UART_SetConfig+0x310>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d138      	bne.n	80071d0 <UART_SetConfig+0x154>
 800715e:	4b8a      	ldr	r3, [pc, #552]	@ (8007388 <UART_SetConfig+0x30c>)
 8007160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007164:	f003 030c 	and.w	r3, r3, #12
 8007168:	2b0c      	cmp	r3, #12
 800716a:	d82d      	bhi.n	80071c8 <UART_SetConfig+0x14c>
 800716c:	a201      	add	r2, pc, #4	@ (adr r2, 8007174 <UART_SetConfig+0xf8>)
 800716e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007172:	bf00      	nop
 8007174:	080071a9 	.word	0x080071a9
 8007178:	080071c9 	.word	0x080071c9
 800717c:	080071c9 	.word	0x080071c9
 8007180:	080071c9 	.word	0x080071c9
 8007184:	080071b9 	.word	0x080071b9
 8007188:	080071c9 	.word	0x080071c9
 800718c:	080071c9 	.word	0x080071c9
 8007190:	080071c9 	.word	0x080071c9
 8007194:	080071b1 	.word	0x080071b1
 8007198:	080071c9 	.word	0x080071c9
 800719c:	080071c9 	.word	0x080071c9
 80071a0:	080071c9 	.word	0x080071c9
 80071a4:	080071c1 	.word	0x080071c1
 80071a8:	2300      	movs	r3, #0
 80071aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ae:	e042      	b.n	8007236 <UART_SetConfig+0x1ba>
 80071b0:	2302      	movs	r3, #2
 80071b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071b6:	e03e      	b.n	8007236 <UART_SetConfig+0x1ba>
 80071b8:	2304      	movs	r3, #4
 80071ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071be:	e03a      	b.n	8007236 <UART_SetConfig+0x1ba>
 80071c0:	2308      	movs	r3, #8
 80071c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071c6:	e036      	b.n	8007236 <UART_SetConfig+0x1ba>
 80071c8:	2310      	movs	r3, #16
 80071ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ce:	e032      	b.n	8007236 <UART_SetConfig+0x1ba>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a6a      	ldr	r2, [pc, #424]	@ (8007380 <UART_SetConfig+0x304>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d12a      	bne.n	8007230 <UART_SetConfig+0x1b4>
 80071da:	4b6b      	ldr	r3, [pc, #428]	@ (8007388 <UART_SetConfig+0x30c>)
 80071dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80071e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071e8:	d01a      	beq.n	8007220 <UART_SetConfig+0x1a4>
 80071ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071ee:	d81b      	bhi.n	8007228 <UART_SetConfig+0x1ac>
 80071f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071f4:	d00c      	beq.n	8007210 <UART_SetConfig+0x194>
 80071f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071fa:	d815      	bhi.n	8007228 <UART_SetConfig+0x1ac>
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d003      	beq.n	8007208 <UART_SetConfig+0x18c>
 8007200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007204:	d008      	beq.n	8007218 <UART_SetConfig+0x19c>
 8007206:	e00f      	b.n	8007228 <UART_SetConfig+0x1ac>
 8007208:	2300      	movs	r3, #0
 800720a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800720e:	e012      	b.n	8007236 <UART_SetConfig+0x1ba>
 8007210:	2302      	movs	r3, #2
 8007212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007216:	e00e      	b.n	8007236 <UART_SetConfig+0x1ba>
 8007218:	2304      	movs	r3, #4
 800721a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800721e:	e00a      	b.n	8007236 <UART_SetConfig+0x1ba>
 8007220:	2308      	movs	r3, #8
 8007222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007226:	e006      	b.n	8007236 <UART_SetConfig+0x1ba>
 8007228:	2310      	movs	r3, #16
 800722a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800722e:	e002      	b.n	8007236 <UART_SetConfig+0x1ba>
 8007230:	2310      	movs	r3, #16
 8007232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a51      	ldr	r2, [pc, #324]	@ (8007380 <UART_SetConfig+0x304>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d17a      	bne.n	8007336 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007240:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007244:	2b08      	cmp	r3, #8
 8007246:	d824      	bhi.n	8007292 <UART_SetConfig+0x216>
 8007248:	a201      	add	r2, pc, #4	@ (adr r2, 8007250 <UART_SetConfig+0x1d4>)
 800724a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724e:	bf00      	nop
 8007250:	08007275 	.word	0x08007275
 8007254:	08007293 	.word	0x08007293
 8007258:	0800727d 	.word	0x0800727d
 800725c:	08007293 	.word	0x08007293
 8007260:	08007283 	.word	0x08007283
 8007264:	08007293 	.word	0x08007293
 8007268:	08007293 	.word	0x08007293
 800726c:	08007293 	.word	0x08007293
 8007270:	0800728b 	.word	0x0800728b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007274:	f7fd f83c 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 8007278:	61f8      	str	r0, [r7, #28]
        break;
 800727a:	e010      	b.n	800729e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800727c:	4b44      	ldr	r3, [pc, #272]	@ (8007390 <UART_SetConfig+0x314>)
 800727e:	61fb      	str	r3, [r7, #28]
        break;
 8007280:	e00d      	b.n	800729e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007282:	f7fc ff9d 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 8007286:	61f8      	str	r0, [r7, #28]
        break;
 8007288:	e009      	b.n	800729e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800728a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800728e:	61fb      	str	r3, [r7, #28]
        break;
 8007290:	e005      	b.n	800729e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007292:	2300      	movs	r3, #0
 8007294:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800729c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 8107 	beq.w	80074b4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	4613      	mov	r3, r2
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	4413      	add	r3, r2
 80072b0:	69fa      	ldr	r2, [r7, #28]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d305      	bcc.n	80072c2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072bc:	69fa      	ldr	r2, [r7, #28]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d903      	bls.n	80072ca <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80072c8:	e0f4      	b.n	80074b4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	2200      	movs	r2, #0
 80072ce:	461c      	mov	r4, r3
 80072d0:	4615      	mov	r5, r2
 80072d2:	f04f 0200 	mov.w	r2, #0
 80072d6:	f04f 0300 	mov.w	r3, #0
 80072da:	022b      	lsls	r3, r5, #8
 80072dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80072e0:	0222      	lsls	r2, r4, #8
 80072e2:	68f9      	ldr	r1, [r7, #12]
 80072e4:	6849      	ldr	r1, [r1, #4]
 80072e6:	0849      	lsrs	r1, r1, #1
 80072e8:	2000      	movs	r0, #0
 80072ea:	4688      	mov	r8, r1
 80072ec:	4681      	mov	r9, r0
 80072ee:	eb12 0a08 	adds.w	sl, r2, r8
 80072f2:	eb43 0b09 	adc.w	fp, r3, r9
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	603b      	str	r3, [r7, #0]
 80072fe:	607a      	str	r2, [r7, #4]
 8007300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007304:	4650      	mov	r0, sl
 8007306:	4659      	mov	r1, fp
 8007308:	f7f9 fc4e 	bl	8000ba8 <__aeabi_uldivmod>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	4613      	mov	r3, r2
 8007312:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800731a:	d308      	bcc.n	800732e <UART_SetConfig+0x2b2>
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007322:	d204      	bcs.n	800732e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	60da      	str	r2, [r3, #12]
 800732c:	e0c2      	b.n	80074b4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007334:	e0be      	b.n	80074b4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800733e:	d16a      	bne.n	8007416 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007340:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007344:	2b08      	cmp	r3, #8
 8007346:	d834      	bhi.n	80073b2 <UART_SetConfig+0x336>
 8007348:	a201      	add	r2, pc, #4	@ (adr r2, 8007350 <UART_SetConfig+0x2d4>)
 800734a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734e:	bf00      	nop
 8007350:	08007375 	.word	0x08007375
 8007354:	08007395 	.word	0x08007395
 8007358:	0800739d 	.word	0x0800739d
 800735c:	080073b3 	.word	0x080073b3
 8007360:	080073a3 	.word	0x080073a3
 8007364:	080073b3 	.word	0x080073b3
 8007368:	080073b3 	.word	0x080073b3
 800736c:	080073b3 	.word	0x080073b3
 8007370:	080073ab 	.word	0x080073ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007374:	f7fc ffbc 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 8007378:	61f8      	str	r0, [r7, #28]
        break;
 800737a:	e020      	b.n	80073be <UART_SetConfig+0x342>
 800737c:	efff69f3 	.word	0xefff69f3
 8007380:	40008000 	.word	0x40008000
 8007384:	40013800 	.word	0x40013800
 8007388:	40021000 	.word	0x40021000
 800738c:	40004400 	.word	0x40004400
 8007390:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007394:	f7fc ffc2 	bl	800431c <HAL_RCC_GetPCLK2Freq>
 8007398:	61f8      	str	r0, [r7, #28]
        break;
 800739a:	e010      	b.n	80073be <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800739c:	4b4c      	ldr	r3, [pc, #304]	@ (80074d0 <UART_SetConfig+0x454>)
 800739e:	61fb      	str	r3, [r7, #28]
        break;
 80073a0:	e00d      	b.n	80073be <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073a2:	f7fc ff0d 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 80073a6:	61f8      	str	r0, [r7, #28]
        break;
 80073a8:	e009      	b.n	80073be <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073ae:	61fb      	str	r3, [r7, #28]
        break;
 80073b0:	e005      	b.n	80073be <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80073bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d077      	beq.n	80074b4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	005a      	lsls	r2, r3, #1
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	085b      	lsrs	r3, r3, #1
 80073ce:	441a      	add	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	2b0f      	cmp	r3, #15
 80073de:	d916      	bls.n	800740e <UART_SetConfig+0x392>
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073e6:	d212      	bcs.n	800740e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	f023 030f 	bic.w	r3, r3, #15
 80073f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	085b      	lsrs	r3, r3, #1
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	f003 0307 	and.w	r3, r3, #7
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	8afb      	ldrh	r3, [r7, #22]
 8007400:	4313      	orrs	r3, r2
 8007402:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	8afa      	ldrh	r2, [r7, #22]
 800740a:	60da      	str	r2, [r3, #12]
 800740c:	e052      	b.n	80074b4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007414:	e04e      	b.n	80074b4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007416:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800741a:	2b08      	cmp	r3, #8
 800741c:	d827      	bhi.n	800746e <UART_SetConfig+0x3f2>
 800741e:	a201      	add	r2, pc, #4	@ (adr r2, 8007424 <UART_SetConfig+0x3a8>)
 8007420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007424:	08007449 	.word	0x08007449
 8007428:	08007451 	.word	0x08007451
 800742c:	08007459 	.word	0x08007459
 8007430:	0800746f 	.word	0x0800746f
 8007434:	0800745f 	.word	0x0800745f
 8007438:	0800746f 	.word	0x0800746f
 800743c:	0800746f 	.word	0x0800746f
 8007440:	0800746f 	.word	0x0800746f
 8007444:	08007467 	.word	0x08007467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007448:	f7fc ff52 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 800744c:	61f8      	str	r0, [r7, #28]
        break;
 800744e:	e014      	b.n	800747a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007450:	f7fc ff64 	bl	800431c <HAL_RCC_GetPCLK2Freq>
 8007454:	61f8      	str	r0, [r7, #28]
        break;
 8007456:	e010      	b.n	800747a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007458:	4b1d      	ldr	r3, [pc, #116]	@ (80074d0 <UART_SetConfig+0x454>)
 800745a:	61fb      	str	r3, [r7, #28]
        break;
 800745c:	e00d      	b.n	800747a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800745e:	f7fc feaf 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 8007462:	61f8      	str	r0, [r7, #28]
        break;
 8007464:	e009      	b.n	800747a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800746a:	61fb      	str	r3, [r7, #28]
        break;
 800746c:	e005      	b.n	800747a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007478:	bf00      	nop
    }

    if (pclk != 0U)
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d019      	beq.n	80074b4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	085a      	lsrs	r2, r3, #1
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	441a      	add	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007492:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	2b0f      	cmp	r3, #15
 8007498:	d909      	bls.n	80074ae <UART_SetConfig+0x432>
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074a0:	d205      	bcs.n	80074ae <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60da      	str	r2, [r3, #12]
 80074ac:	e002      	b.n	80074b4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80074c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3728      	adds	r7, #40	@ 0x28
 80074c8:	46bd      	mov	sp, r7
 80074ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074ce:	bf00      	nop
 80074d0:	00f42400 	.word	0x00f42400

080074d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e0:	f003 0308 	and.w	r3, r3, #8
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007502:	f003 0301 	and.w	r3, r3, #1
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00a      	beq.n	8007542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007546:	f003 0304 	and.w	r3, r3, #4
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007568:	f003 0310 	and.w	r3, r3, #16
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00a      	beq.n	8007586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800758a:	f003 0320 	and.w	r3, r3, #32
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00a      	beq.n	80075a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d01a      	beq.n	80075ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075d2:	d10a      	bne.n	80075ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	430a      	orrs	r2, r1
 80075e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00a      	beq.n	800760c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	430a      	orrs	r2, r1
 800760a:	605a      	str	r2, [r3, #4]
  }
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b098      	sub	sp, #96	@ 0x60
 800761c:	af02      	add	r7, sp, #8
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007628:	f7fb f9b2 	bl	8002990 <HAL_GetTick>
 800762c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0308 	and.w	r3, r3, #8
 8007638:	2b08      	cmp	r3, #8
 800763a:	d12e      	bne.n	800769a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800763c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007644:	2200      	movs	r2, #0
 8007646:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f88c 	bl	8007768 <UART_WaitOnFlagUntilTimeout>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d021      	beq.n	800769a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765e:	e853 3f00 	ldrex	r3, [r3]
 8007662:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007666:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800766a:	653b      	str	r3, [r7, #80]	@ 0x50
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	461a      	mov	r2, r3
 8007672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007674:	647b      	str	r3, [r7, #68]	@ 0x44
 8007676:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007678:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800767a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800767c:	e841 2300 	strex	r3, r2, [r1]
 8007680:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1e6      	bne.n	8007656 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2220      	movs	r2, #32
 800768c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e062      	b.n	8007760 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0304 	and.w	r3, r3, #4
 80076a4:	2b04      	cmp	r3, #4
 80076a6:	d149      	bne.n	800773c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076b0:	2200      	movs	r2, #0
 80076b2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f856 	bl	8007768 <UART_WaitOnFlagUntilTimeout>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d03c      	beq.n	800773c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ca:	e853 3f00 	ldrex	r3, [r3]
 80076ce:	623b      	str	r3, [r7, #32]
   return(result);
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	461a      	mov	r2, r3
 80076de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80076e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076e8:	e841 2300 	strex	r3, r2, [r1]
 80076ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e6      	bne.n	80076c2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	3308      	adds	r3, #8
 80076fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	e853 3f00 	ldrex	r3, [r3]
 8007702:	60fb      	str	r3, [r7, #12]
   return(result);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f023 0301 	bic.w	r3, r3, #1
 800770a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3308      	adds	r3, #8
 8007712:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007714:	61fa      	str	r2, [r7, #28]
 8007716:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007718:	69b9      	ldr	r1, [r7, #24]
 800771a:	69fa      	ldr	r2, [r7, #28]
 800771c:	e841 2300 	strex	r3, r2, [r1]
 8007720:	617b      	str	r3, [r7, #20]
   return(result);
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1e5      	bne.n	80076f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2220      	movs	r2, #32
 800772c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007738:	2303      	movs	r3, #3
 800773a:	e011      	b.n	8007760 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2220      	movs	r2, #32
 8007740:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2220      	movs	r2, #32
 8007746:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3758      	adds	r7, #88	@ 0x58
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	603b      	str	r3, [r7, #0]
 8007774:	4613      	mov	r3, r2
 8007776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007778:	e04f      	b.n	800781a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007780:	d04b      	beq.n	800781a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007782:	f7fb f905 	bl	8002990 <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	69ba      	ldr	r2, [r7, #24]
 800778e:	429a      	cmp	r2, r3
 8007790:	d302      	bcc.n	8007798 <UART_WaitOnFlagUntilTimeout+0x30>
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e04e      	b.n	800783a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0304 	and.w	r3, r3, #4
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d037      	beq.n	800781a <UART_WaitOnFlagUntilTimeout+0xb2>
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	2b80      	cmp	r3, #128	@ 0x80
 80077ae:	d034      	beq.n	800781a <UART_WaitOnFlagUntilTimeout+0xb2>
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2b40      	cmp	r3, #64	@ 0x40
 80077b4:	d031      	beq.n	800781a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	f003 0308 	and.w	r3, r3, #8
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d110      	bne.n	80077e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2208      	movs	r2, #8
 80077ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 f838 	bl	8007842 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2208      	movs	r2, #8
 80077d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e029      	b.n	800783a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	69db      	ldr	r3, [r3, #28]
 80077ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077f4:	d111      	bne.n	800781a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 f81e 	bl	8007842 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2220      	movs	r2, #32
 800780a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e00f      	b.n	800783a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69da      	ldr	r2, [r3, #28]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	4013      	ands	r3, r2
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	429a      	cmp	r2, r3
 8007828:	bf0c      	ite	eq
 800782a:	2301      	moveq	r3, #1
 800782c:	2300      	movne	r3, #0
 800782e:	b2db      	uxtb	r3, r3
 8007830:	461a      	mov	r2, r3
 8007832:	79fb      	ldrb	r3, [r7, #7]
 8007834:	429a      	cmp	r2, r3
 8007836:	d0a0      	beq.n	800777a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007842:	b480      	push	{r7}
 8007844:	b095      	sub	sp, #84	@ 0x54
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007852:	e853 3f00 	ldrex	r3, [r3]
 8007856:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800785e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	461a      	mov	r2, r3
 8007866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007868:	643b      	str	r3, [r7, #64]	@ 0x40
 800786a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800786e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007870:	e841 2300 	strex	r3, r2, [r1]
 8007874:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e6      	bne.n	800784a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3308      	adds	r3, #8
 8007882:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	e853 3f00 	ldrex	r3, [r3]
 800788a:	61fb      	str	r3, [r7, #28]
   return(result);
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	f023 0301 	bic.w	r3, r3, #1
 8007892:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3308      	adds	r3, #8
 800789a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800789c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800789e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078a4:	e841 2300 	strex	r3, r2, [r1]
 80078a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e5      	bne.n	800787c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d118      	bne.n	80078ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	e853 3f00 	ldrex	r3, [r3]
 80078c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	f023 0310 	bic.w	r3, r3, #16
 80078cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078d6:	61bb      	str	r3, [r7, #24]
 80078d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078da:	6979      	ldr	r1, [r7, #20]
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	e841 2300 	strex	r3, r2, [r1]
 80078e2:	613b      	str	r3, [r7, #16]
   return(result);
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1e6      	bne.n	80078b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2220      	movs	r2, #32
 80078ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80078fe:	bf00      	nop
 8007900:	3754      	adds	r7, #84	@ 0x54
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
	...

0800790c <__NVIC_SetPriority>:
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	4603      	mov	r3, r0
 8007914:	6039      	str	r1, [r7, #0]
 8007916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800791c:	2b00      	cmp	r3, #0
 800791e:	db0a      	blt.n	8007936 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	b2da      	uxtb	r2, r3
 8007924:	490c      	ldr	r1, [pc, #48]	@ (8007958 <__NVIC_SetPriority+0x4c>)
 8007926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800792a:	0112      	lsls	r2, r2, #4
 800792c:	b2d2      	uxtb	r2, r2
 800792e:	440b      	add	r3, r1
 8007930:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007934:	e00a      	b.n	800794c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	b2da      	uxtb	r2, r3
 800793a:	4908      	ldr	r1, [pc, #32]	@ (800795c <__NVIC_SetPriority+0x50>)
 800793c:	79fb      	ldrb	r3, [r7, #7]
 800793e:	f003 030f 	and.w	r3, r3, #15
 8007942:	3b04      	subs	r3, #4
 8007944:	0112      	lsls	r2, r2, #4
 8007946:	b2d2      	uxtb	r2, r2
 8007948:	440b      	add	r3, r1
 800794a:	761a      	strb	r2, [r3, #24]
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	e000e100 	.word	0xe000e100
 800795c:	e000ed00 	.word	0xe000ed00

08007960 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007964:	4b05      	ldr	r3, [pc, #20]	@ (800797c <SysTick_Handler+0x1c>)
 8007966:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007968:	f001 fd46 	bl	80093f8 <xTaskGetSchedulerState>
 800796c:	4603      	mov	r3, r0
 800796e:	2b01      	cmp	r3, #1
 8007970:	d001      	beq.n	8007976 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007972:	f002 fb41 	bl	8009ff8 <xPortSysTickHandler>
  }
}
 8007976:	bf00      	nop
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	e000e010 	.word	0xe000e010

08007980 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007984:	2100      	movs	r1, #0
 8007986:	f06f 0004 	mvn.w	r0, #4
 800798a:	f7ff ffbf 	bl	800790c <__NVIC_SetPriority>
#endif
}
 800798e:	bf00      	nop
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800799a:	f3ef 8305 	mrs	r3, IPSR
 800799e:	603b      	str	r3, [r7, #0]
  return(result);
 80079a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80079a6:	f06f 0305 	mvn.w	r3, #5
 80079aa:	607b      	str	r3, [r7, #4]
 80079ac:	e00c      	b.n	80079c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80079ae:	4b0a      	ldr	r3, [pc, #40]	@ (80079d8 <osKernelInitialize+0x44>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d105      	bne.n	80079c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80079b6:	4b08      	ldr	r3, [pc, #32]	@ (80079d8 <osKernelInitialize+0x44>)
 80079b8:	2201      	movs	r2, #1
 80079ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80079bc:	2300      	movs	r3, #0
 80079be:	607b      	str	r3, [r7, #4]
 80079c0:	e002      	b.n	80079c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80079c2:	f04f 33ff 	mov.w	r3, #4294967295
 80079c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80079c8:	687b      	ldr	r3, [r7, #4]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	20000988 	.word	0x20000988

080079dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079e2:	f3ef 8305 	mrs	r3, IPSR
 80079e6:	603b      	str	r3, [r7, #0]
  return(result);
 80079e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d003      	beq.n	80079f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80079ee:	f06f 0305 	mvn.w	r3, #5
 80079f2:	607b      	str	r3, [r7, #4]
 80079f4:	e010      	b.n	8007a18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80079f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007a24 <osKernelStart+0x48>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d109      	bne.n	8007a12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80079fe:	f7ff ffbf 	bl	8007980 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007a02:	4b08      	ldr	r3, [pc, #32]	@ (8007a24 <osKernelStart+0x48>)
 8007a04:	2202      	movs	r2, #2
 8007a06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007a08:	f001 f892 	bl	8008b30 <vTaskStartScheduler>
      stat = osOK;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	607b      	str	r3, [r7, #4]
 8007a10:	e002      	b.n	8007a18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007a12:	f04f 33ff 	mov.w	r3, #4294967295
 8007a16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a18:	687b      	ldr	r3, [r7, #4]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	20000988 	.word	0x20000988

08007a28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08e      	sub	sp, #56	@ 0x38
 8007a2c:	af04      	add	r7, sp, #16
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007a34:	2300      	movs	r3, #0
 8007a36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a38:	f3ef 8305 	mrs	r3, IPSR
 8007a3c:	617b      	str	r3, [r7, #20]
  return(result);
 8007a3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d17e      	bne.n	8007b42 <osThreadNew+0x11a>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d07b      	beq.n	8007b42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007a4a:	2380      	movs	r3, #128	@ 0x80
 8007a4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007a4e:	2318      	movs	r3, #24
 8007a50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007a56:	f04f 33ff 	mov.w	r3, #4294967295
 8007a5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d045      	beq.n	8007aee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <osThreadNew+0x48>
        name = attr->name;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d002      	beq.n	8007a7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d008      	beq.n	8007a96 <osThreadNew+0x6e>
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	2b38      	cmp	r3, #56	@ 0x38
 8007a88:	d805      	bhi.n	8007a96 <osThreadNew+0x6e>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <osThreadNew+0x72>
        return (NULL);
 8007a96:	2300      	movs	r3, #0
 8007a98:	e054      	b.n	8007b44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	089b      	lsrs	r3, r3, #2
 8007aa8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00e      	beq.n	8007ad0 <osThreadNew+0xa8>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	2ba7      	cmp	r3, #167	@ 0xa7
 8007ab8:	d90a      	bls.n	8007ad0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d006      	beq.n	8007ad0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <osThreadNew+0xa8>
        mem = 1;
 8007aca:	2301      	movs	r3, #1
 8007acc:	61bb      	str	r3, [r7, #24]
 8007ace:	e010      	b.n	8007af2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10c      	bne.n	8007af2 <osThreadNew+0xca>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d108      	bne.n	8007af2 <osThreadNew+0xca>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d104      	bne.n	8007af2 <osThreadNew+0xca>
          mem = 0;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	61bb      	str	r3, [r7, #24]
 8007aec:	e001      	b.n	8007af2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d110      	bne.n	8007b1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b00:	9202      	str	r2, [sp, #8]
 8007b02:	9301      	str	r3, [sp, #4]
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	6a3a      	ldr	r2, [r7, #32]
 8007b0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 fe1a 	bl	8008748 <xTaskCreateStatic>
 8007b14:	4603      	mov	r3, r0
 8007b16:	613b      	str	r3, [r7, #16]
 8007b18:	e013      	b.n	8007b42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d110      	bne.n	8007b42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	f107 0310 	add.w	r3, r7, #16
 8007b28:	9301      	str	r3, [sp, #4]
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f000 fe68 	bl	8008808 <xTaskCreate>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d001      	beq.n	8007b42 <osThreadNew+0x11a>
            hTask = NULL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007b42:	693b      	ldr	r3, [r7, #16]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3728      	adds	r7, #40	@ 0x28
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b54:	f3ef 8305 	mrs	r3, IPSR
 8007b58:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d003      	beq.n	8007b68 <osDelay+0x1c>
    stat = osErrorISR;
 8007b60:	f06f 0305 	mvn.w	r3, #5
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	e007      	b.n	8007b78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 ffa6 	bl	8008ac4 <vTaskDelay>
    }
  }

  return (stat);
 8007b78:	68fb      	ldr	r3, [r7, #12]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
	...

08007b84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4a07      	ldr	r2, [pc, #28]	@ (8007bb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007b94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	4a06      	ldr	r2, [pc, #24]	@ (8007bb4 <vApplicationGetIdleTaskMemory+0x30>)
 8007b9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2280      	movs	r2, #128	@ 0x80
 8007ba0:	601a      	str	r2, [r3, #0]
}
 8007ba2:	bf00      	nop
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	2000098c 	.word	0x2000098c
 8007bb4:	20000a34 	.word	0x20000a34

08007bb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4a07      	ldr	r2, [pc, #28]	@ (8007be4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007bc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	4a06      	ldr	r2, [pc, #24]	@ (8007be8 <vApplicationGetTimerTaskMemory+0x30>)
 8007bce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007bd6:	601a      	str	r2, [r3, #0]
}
 8007bd8:	bf00      	nop
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	20000c34 	.word	0x20000c34
 8007be8:	20000cdc 	.word	0x20000cdc

08007bec <vListInitialise>:
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f103 0208 	add.w	r2, r3, #8
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	605a      	str	r2, [r3, #4]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f04f 32ff 	mov.w	r2, #4294967295
 8007c04:	609a      	str	r2, [r3, #8]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f103 0208 	add.w	r2, r3, #8
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	60da      	str	r2, [r3, #12]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f103 0208 	add.w	r2, r3, #8
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	611a      	str	r2, [r3, #16]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	601a      	str	r2, [r3, #0]
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <vListInitialiseItem>:
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	611a      	str	r2, [r3, #16]
 8007c3a:	bf00      	nop
 8007c3c:	370c      	adds	r7, #12
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <vListInsertEnd>:
 8007c46:	b480      	push	{r7}
 8007c48:	b085      	sub	sp, #20
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	6039      	str	r1, [r7, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	60fb      	str	r3, [r7, #12]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	605a      	str	r2, [r3, #4]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	689a      	ldr	r2, [r3, #8]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	609a      	str	r2, [r3, #8]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	605a      	str	r2, [r3, #4]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	609a      	str	r2, [r3, #8]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	611a      	str	r2, [r3, #16]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	1c5a      	adds	r2, r3, #1
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	bf00      	nop
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <vListInsert>:
 8007c8e:	b480      	push	{r7}
 8007c90:	b085      	sub	sp, #20
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	6039      	str	r1, [r7, #0]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	60bb      	str	r3, [r7, #8]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca4:	d103      	bne.n	8007cae <vListInsert+0x20>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	60fb      	str	r3, [r7, #12]
 8007cac:	e00c      	b.n	8007cc8 <vListInsert+0x3a>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	3308      	adds	r3, #8
 8007cb2:	60fb      	str	r3, [r7, #12]
 8007cb4:	e002      	b.n	8007cbc <vListInsert+0x2e>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	60fb      	str	r3, [r7, #12]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d2f6      	bcs.n	8007cb6 <vListInsert+0x28>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	605a      	str	r2, [r3, #4]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	609a      	str	r2, [r3, #8]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	609a      	str	r2, [r3, #8]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	605a      	str	r2, [r3, #4]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	611a      	str	r2, [r3, #16]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	1c5a      	adds	r2, r3, #1
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	bf00      	nop
 8007cf6:	3714      	adds	r7, #20
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <uxListRemove>:
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	6892      	ldr	r2, [r2, #8]
 8007d16:	609a      	str	r2, [r3, #8]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	6852      	ldr	r2, [r2, #4]
 8007d20:	605a      	str	r2, [r3, #4]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d103      	bne.n	8007d34 <uxListRemove+0x34>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	689a      	ldr	r2, [r3, #8]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	605a      	str	r2, [r3, #4]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	611a      	str	r2, [r3, #16]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	1e5a      	subs	r2, r3, #1
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3714      	adds	r7, #20
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <xQueueGenericReset>:
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	60fb      	str	r3, [r7, #12]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10b      	bne.n	8007d80 <xQueueGenericReset+0x2c>
 8007d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	60bb      	str	r3, [r7, #8]
 8007d7a:	bf00      	nop
 8007d7c:	bf00      	nop
 8007d7e:	e7fd      	b.n	8007d7c <xQueueGenericReset+0x28>
 8007d80:	f002 f8aa 	bl	8009ed8 <vPortEnterCritical>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d8c:	68f9      	ldr	r1, [r7, #12]
 8007d8e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007d90:	fb01 f303 	mul.w	r3, r1, r3
 8007d94:	441a      	add	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	609a      	str	r2, [r3, #8]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	605a      	str	r2, [r3, #4]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007db0:	3b01      	subs	r3, #1
 8007db2:	68f9      	ldr	r1, [r7, #12]
 8007db4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007db6:	fb01 f303 	mul.w	r3, r1, r3
 8007dba:	441a      	add	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	60da      	str	r2, [r3, #12]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	22ff      	movs	r2, #255	@ 0xff
 8007dc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	22ff      	movs	r2, #255	@ 0xff
 8007dcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d114      	bne.n	8007e00 <xQueueGenericReset+0xac>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d01a      	beq.n	8007e14 <xQueueGenericReset+0xc0>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3310      	adds	r3, #16
 8007de2:	4618      	mov	r0, r3
 8007de4:	f001 f942 	bl	800906c <xTaskRemoveFromEventList>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d012      	beq.n	8007e14 <xQueueGenericReset+0xc0>
 8007dee:	4b0d      	ldr	r3, [pc, #52]	@ (8007e24 <xQueueGenericReset+0xd0>)
 8007df0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	e009      	b.n	8007e14 <xQueueGenericReset+0xc0>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	3310      	adds	r3, #16
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7ff fef1 	bl	8007bec <vListInitialise>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3324      	adds	r3, #36	@ 0x24
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7ff feec 	bl	8007bec <vListInitialise>
 8007e14:	f002 f892 	bl	8009f3c <vPortExitCritical>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	e000ed04 	.word	0xe000ed04

08007e28 <xQueueGenericCreateStatic>:
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b08e      	sub	sp, #56	@ 0x38
 8007e2c:	af02      	add	r7, sp, #8
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	607a      	str	r2, [r7, #4]
 8007e34:	603b      	str	r3, [r7, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10b      	bne.n	8007e54 <xQueueGenericCreateStatic+0x2c>
 8007e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e4e:	bf00      	nop
 8007e50:	bf00      	nop
 8007e52:	e7fd      	b.n	8007e50 <xQueueGenericCreateStatic+0x28>
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10b      	bne.n	8007e72 <xQueueGenericCreateStatic+0x4a>
 8007e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5e:	f383 8811 	msr	BASEPRI, r3
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e6c:	bf00      	nop
 8007e6e:	bf00      	nop
 8007e70:	e7fd      	b.n	8007e6e <xQueueGenericCreateStatic+0x46>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d002      	beq.n	8007e7e <xQueueGenericCreateStatic+0x56>
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d001      	beq.n	8007e82 <xQueueGenericCreateStatic+0x5a>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e000      	b.n	8007e84 <xQueueGenericCreateStatic+0x5c>
 8007e82:	2300      	movs	r3, #0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10b      	bne.n	8007ea0 <xQueueGenericCreateStatic+0x78>
 8007e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	623b      	str	r3, [r7, #32]
 8007e9a:	bf00      	nop
 8007e9c:	bf00      	nop
 8007e9e:	e7fd      	b.n	8007e9c <xQueueGenericCreateStatic+0x74>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d102      	bne.n	8007eac <xQueueGenericCreateStatic+0x84>
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <xQueueGenericCreateStatic+0x88>
 8007eac:	2301      	movs	r3, #1
 8007eae:	e000      	b.n	8007eb2 <xQueueGenericCreateStatic+0x8a>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10b      	bne.n	8007ece <xQueueGenericCreateStatic+0xa6>
 8007eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	61fb      	str	r3, [r7, #28]
 8007ec8:	bf00      	nop
 8007eca:	bf00      	nop
 8007ecc:	e7fd      	b.n	8007eca <xQueueGenericCreateStatic+0xa2>
 8007ece:	2350      	movs	r3, #80	@ 0x50
 8007ed0:	617b      	str	r3, [r7, #20]
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	2b50      	cmp	r3, #80	@ 0x50
 8007ed6:	d00b      	beq.n	8007ef0 <xQueueGenericCreateStatic+0xc8>
 8007ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	61bb      	str	r3, [r7, #24]
 8007eea:	bf00      	nop
 8007eec:	bf00      	nop
 8007eee:	e7fd      	b.n	8007eec <xQueueGenericCreateStatic+0xc4>
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00d      	beq.n	8007f18 <xQueueGenericCreateStatic+0xf0>
 8007efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f04:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	68b9      	ldr	r1, [r7, #8]
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f000 f805 	bl	8007f22 <prvInitialiseNewQueue>
 8007f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3730      	adds	r7, #48	@ 0x30
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <prvInitialiseNewQueue>:
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b084      	sub	sp, #16
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	60b9      	str	r1, [r7, #8]
 8007f2c:	607a      	str	r2, [r7, #4]
 8007f2e:	70fb      	strb	r3, [r7, #3]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d103      	bne.n	8007f3e <prvInitialiseNewQueue+0x1c>
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	e002      	b.n	8007f44 <prvInitialiseNewQueue+0x22>
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8007f50:	2101      	movs	r1, #1
 8007f52:	69b8      	ldr	r0, [r7, #24]
 8007f54:	f7ff fefe 	bl	8007d54 <xQueueGenericReset>
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	78fa      	ldrb	r2, [r7, #3]
 8007f5c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8007f60:	bf00      	nop
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <xQueueGenericSend>:
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b08e      	sub	sp, #56	@ 0x38
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
 8007f74:	603b      	str	r3, [r7, #0]
 8007f76:	2300      	movs	r3, #0
 8007f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10b      	bne.n	8007f9c <xQueueGenericSend+0x34>
 8007f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f96:	bf00      	nop
 8007f98:	bf00      	nop
 8007f9a:	e7fd      	b.n	8007f98 <xQueueGenericSend+0x30>
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d103      	bne.n	8007faa <xQueueGenericSend+0x42>
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d101      	bne.n	8007fae <xQueueGenericSend+0x46>
 8007faa:	2301      	movs	r3, #1
 8007fac:	e000      	b.n	8007fb0 <xQueueGenericSend+0x48>
 8007fae:	2300      	movs	r3, #0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10b      	bne.n	8007fcc <xQueueGenericSend+0x64>
 8007fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fc6:	bf00      	nop
 8007fc8:	bf00      	nop
 8007fca:	e7fd      	b.n	8007fc8 <xQueueGenericSend+0x60>
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d103      	bne.n	8007fda <xQueueGenericSend+0x72>
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d101      	bne.n	8007fde <xQueueGenericSend+0x76>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e000      	b.n	8007fe0 <xQueueGenericSend+0x78>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10b      	bne.n	8007ffc <xQueueGenericSend+0x94>
 8007fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	623b      	str	r3, [r7, #32]
 8007ff6:	bf00      	nop
 8007ff8:	bf00      	nop
 8007ffa:	e7fd      	b.n	8007ff8 <xQueueGenericSend+0x90>
 8007ffc:	f001 f9fc 	bl	80093f8 <xTaskGetSchedulerState>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d102      	bne.n	800800c <xQueueGenericSend+0xa4>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <xQueueGenericSend+0xa8>
 800800c:	2301      	movs	r3, #1
 800800e:	e000      	b.n	8008012 <xQueueGenericSend+0xaa>
 8008010:	2300      	movs	r3, #0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d10b      	bne.n	800802e <xQueueGenericSend+0xc6>
 8008016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	61fb      	str	r3, [r7, #28]
 8008028:	bf00      	nop
 800802a:	bf00      	nop
 800802c:	e7fd      	b.n	800802a <xQueueGenericSend+0xc2>
 800802e:	f001 ff53 	bl	8009ed8 <vPortEnterCritical>
 8008032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008034:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800803a:	429a      	cmp	r2, r3
 800803c:	d302      	bcc.n	8008044 <xQueueGenericSend+0xdc>
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b02      	cmp	r3, #2
 8008042:	d129      	bne.n	8008098 <xQueueGenericSend+0x130>
 8008044:	683a      	ldr	r2, [r7, #0]
 8008046:	68b9      	ldr	r1, [r7, #8]
 8008048:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800804a:	f000 fa0f 	bl	800846c <prvCopyDataToQueue>
 800804e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008054:	2b00      	cmp	r3, #0
 8008056:	d010      	beq.n	800807a <xQueueGenericSend+0x112>
 8008058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805a:	3324      	adds	r3, #36	@ 0x24
 800805c:	4618      	mov	r0, r3
 800805e:	f001 f805 	bl	800906c <xTaskRemoveFromEventList>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d013      	beq.n	8008090 <xQueueGenericSend+0x128>
 8008068:	4b3f      	ldr	r3, [pc, #252]	@ (8008168 <xQueueGenericSend+0x200>)
 800806a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	e00a      	b.n	8008090 <xQueueGenericSend+0x128>
 800807a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807c:	2b00      	cmp	r3, #0
 800807e:	d007      	beq.n	8008090 <xQueueGenericSend+0x128>
 8008080:	4b39      	ldr	r3, [pc, #228]	@ (8008168 <xQueueGenericSend+0x200>)
 8008082:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008086:	601a      	str	r2, [r3, #0]
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f001 ff54 	bl	8009f3c <vPortExitCritical>
 8008094:	2301      	movs	r3, #1
 8008096:	e063      	b.n	8008160 <xQueueGenericSend+0x1f8>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d103      	bne.n	80080a6 <xQueueGenericSend+0x13e>
 800809e:	f001 ff4d 	bl	8009f3c <vPortExitCritical>
 80080a2:	2300      	movs	r3, #0
 80080a4:	e05c      	b.n	8008160 <xQueueGenericSend+0x1f8>
 80080a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d106      	bne.n	80080ba <xQueueGenericSend+0x152>
 80080ac:	f107 0314 	add.w	r3, r7, #20
 80080b0:	4618      	mov	r0, r3
 80080b2:	f001 f83f 	bl	8009134 <vTaskInternalSetTimeOutState>
 80080b6:	2301      	movs	r3, #1
 80080b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ba:	f001 ff3f 	bl	8009f3c <vPortExitCritical>
 80080be:	f000 fda7 	bl	8008c10 <vTaskSuspendAll>
 80080c2:	f001 ff09 	bl	8009ed8 <vPortEnterCritical>
 80080c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080cc:	b25b      	sxtb	r3, r3
 80080ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d2:	d103      	bne.n	80080dc <xQueueGenericSend+0x174>
 80080d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080e2:	b25b      	sxtb	r3, r3
 80080e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e8:	d103      	bne.n	80080f2 <xQueueGenericSend+0x18a>
 80080ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080f2:	f001 ff23 	bl	8009f3c <vPortExitCritical>
 80080f6:	1d3a      	adds	r2, r7, #4
 80080f8:	f107 0314 	add.w	r3, r7, #20
 80080fc:	4611      	mov	r1, r2
 80080fe:	4618      	mov	r0, r3
 8008100:	f001 f82e 	bl	8009160 <xTaskCheckForTimeOut>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d124      	bne.n	8008154 <xQueueGenericSend+0x1ec>
 800810a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800810c:	f000 faa6 	bl	800865c <prvIsQueueFull>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d018      	beq.n	8008148 <xQueueGenericSend+0x1e0>
 8008116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008118:	3310      	adds	r3, #16
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	4611      	mov	r1, r2
 800811e:	4618      	mov	r0, r3
 8008120:	f000 ff52 	bl	8008fc8 <vTaskPlaceOnEventList>
 8008124:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008126:	f000 fa31 	bl	800858c <prvUnlockQueue>
 800812a:	f000 fd7f 	bl	8008c2c <xTaskResumeAll>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	f47f af7c 	bne.w	800802e <xQueueGenericSend+0xc6>
 8008136:	4b0c      	ldr	r3, [pc, #48]	@ (8008168 <xQueueGenericSend+0x200>)
 8008138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	e772      	b.n	800802e <xQueueGenericSend+0xc6>
 8008148:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800814a:	f000 fa1f 	bl	800858c <prvUnlockQueue>
 800814e:	f000 fd6d 	bl	8008c2c <xTaskResumeAll>
 8008152:	e76c      	b.n	800802e <xQueueGenericSend+0xc6>
 8008154:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008156:	f000 fa19 	bl	800858c <prvUnlockQueue>
 800815a:	f000 fd67 	bl	8008c2c <xTaskResumeAll>
 800815e:	2300      	movs	r3, #0
 8008160:	4618      	mov	r0, r3
 8008162:	3738      	adds	r7, #56	@ 0x38
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	e000ed04 	.word	0xe000ed04

0800816c <xQueueGenericSendFromISR>:
 800816c:	b580      	push	{r7, lr}
 800816e:	b090      	sub	sp, #64	@ 0x40
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
 8008178:	603b      	str	r3, [r7, #0]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800817e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10b      	bne.n	800819c <xQueueGenericSendFromISR+0x30>
 8008184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008188:	f383 8811 	msr	BASEPRI, r3
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008196:	bf00      	nop
 8008198:	bf00      	nop
 800819a:	e7fd      	b.n	8008198 <xQueueGenericSendFromISR+0x2c>
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d103      	bne.n	80081aa <xQueueGenericSendFromISR+0x3e>
 80081a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d101      	bne.n	80081ae <xQueueGenericSendFromISR+0x42>
 80081aa:	2301      	movs	r3, #1
 80081ac:	e000      	b.n	80081b0 <xQueueGenericSendFromISR+0x44>
 80081ae:	2300      	movs	r3, #0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10b      	bne.n	80081cc <xQueueGenericSendFromISR+0x60>
 80081b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b8:	f383 8811 	msr	BASEPRI, r3
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80081c6:	bf00      	nop
 80081c8:	bf00      	nop
 80081ca:	e7fd      	b.n	80081c8 <xQueueGenericSendFromISR+0x5c>
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d103      	bne.n	80081da <xQueueGenericSendFromISR+0x6e>
 80081d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d101      	bne.n	80081de <xQueueGenericSendFromISR+0x72>
 80081da:	2301      	movs	r3, #1
 80081dc:	e000      	b.n	80081e0 <xQueueGenericSendFromISR+0x74>
 80081de:	2300      	movs	r3, #0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d10b      	bne.n	80081fc <xQueueGenericSendFromISR+0x90>
 80081e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	623b      	str	r3, [r7, #32]
 80081f6:	bf00      	nop
 80081f8:	bf00      	nop
 80081fa:	e7fd      	b.n	80081f8 <xQueueGenericSendFromISR+0x8c>
 80081fc:	f001 ff4c 	bl	800a098 <vPortValidateInterruptPriority>
 8008200:	f3ef 8211 	mrs	r2, BASEPRI
 8008204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	61fa      	str	r2, [r7, #28]
 8008216:	61bb      	str	r3, [r7, #24]
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	637b      	str	r3, [r7, #52]	@ 0x34
 800821c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800821e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008224:	429a      	cmp	r2, r3
 8008226:	d302      	bcc.n	800822e <xQueueGenericSendFromISR+0xc2>
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	2b02      	cmp	r3, #2
 800822c:	d12f      	bne.n	800828e <xQueueGenericSendFromISR+0x122>
 800822e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008230:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008234:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800823a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800823c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	68b9      	ldr	r1, [r7, #8]
 8008242:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008244:	f000 f912 	bl	800846c <prvCopyDataToQueue>
 8008248:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800824c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008250:	d112      	bne.n	8008278 <xQueueGenericSendFromISR+0x10c>
 8008252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008256:	2b00      	cmp	r3, #0
 8008258:	d016      	beq.n	8008288 <xQueueGenericSendFromISR+0x11c>
 800825a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800825c:	3324      	adds	r3, #36	@ 0x24
 800825e:	4618      	mov	r0, r3
 8008260:	f000 ff04 	bl	800906c <xTaskRemoveFromEventList>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00e      	beq.n	8008288 <xQueueGenericSendFromISR+0x11c>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00b      	beq.n	8008288 <xQueueGenericSendFromISR+0x11c>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	601a      	str	r2, [r3, #0]
 8008276:	e007      	b.n	8008288 <xQueueGenericSendFromISR+0x11c>
 8008278:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800827c:	3301      	adds	r3, #1
 800827e:	b2db      	uxtb	r3, r3
 8008280:	b25a      	sxtb	r2, r3
 8008282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008284:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008288:	2301      	movs	r3, #1
 800828a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800828c:	e001      	b.n	8008292 <xQueueGenericSendFromISR+0x126>
 800828e:	2300      	movs	r3, #0
 8008290:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008294:	617b      	str	r3, [r7, #20]
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	bf00      	nop
 800829e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082a0:	4618      	mov	r0, r3
 80082a2:	3740      	adds	r7, #64	@ 0x40
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <xQueueReceive>:
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08c      	sub	sp, #48	@ 0x30
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
 80082b4:	2300      	movs	r3, #0
 80082b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10b      	bne.n	80082da <xQueueReceive+0x32>
 80082c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	623b      	str	r3, [r7, #32]
 80082d4:	bf00      	nop
 80082d6:	bf00      	nop
 80082d8:	e7fd      	b.n	80082d6 <xQueueReceive+0x2e>
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d103      	bne.n	80082e8 <xQueueReceive+0x40>
 80082e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <xQueueReceive+0x44>
 80082e8:	2301      	movs	r3, #1
 80082ea:	e000      	b.n	80082ee <xQueueReceive+0x46>
 80082ec:	2300      	movs	r3, #0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10b      	bne.n	800830a <xQueueReceive+0x62>
 80082f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f6:	f383 8811 	msr	BASEPRI, r3
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	61fb      	str	r3, [r7, #28]
 8008304:	bf00      	nop
 8008306:	bf00      	nop
 8008308:	e7fd      	b.n	8008306 <xQueueReceive+0x5e>
 800830a:	f001 f875 	bl	80093f8 <xTaskGetSchedulerState>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d102      	bne.n	800831a <xQueueReceive+0x72>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <xQueueReceive+0x76>
 800831a:	2301      	movs	r3, #1
 800831c:	e000      	b.n	8008320 <xQueueReceive+0x78>
 800831e:	2300      	movs	r3, #0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10b      	bne.n	800833c <xQueueReceive+0x94>
 8008324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	61bb      	str	r3, [r7, #24]
 8008336:	bf00      	nop
 8008338:	bf00      	nop
 800833a:	e7fd      	b.n	8008338 <xQueueReceive+0x90>
 800833c:	f001 fdcc 	bl	8009ed8 <vPortEnterCritical>
 8008340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008344:	627b      	str	r3, [r7, #36]	@ 0x24
 8008346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008348:	2b00      	cmp	r3, #0
 800834a:	d01f      	beq.n	800838c <xQueueReceive+0xe4>
 800834c:	68b9      	ldr	r1, [r7, #8]
 800834e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008350:	f000 f8f6 	bl	8008540 <prvCopyDataFromQueue>
 8008354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008356:	1e5a      	subs	r2, r3, #1
 8008358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835a:	639a      	str	r2, [r3, #56]	@ 0x38
 800835c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00f      	beq.n	8008384 <xQueueReceive+0xdc>
 8008364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008366:	3310      	adds	r3, #16
 8008368:	4618      	mov	r0, r3
 800836a:	f000 fe7f 	bl	800906c <xTaskRemoveFromEventList>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d007      	beq.n	8008384 <xQueueReceive+0xdc>
 8008374:	4b3c      	ldr	r3, [pc, #240]	@ (8008468 <xQueueReceive+0x1c0>)
 8008376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f001 fdda 	bl	8009f3c <vPortExitCritical>
 8008388:	2301      	movs	r3, #1
 800838a:	e069      	b.n	8008460 <xQueueReceive+0x1b8>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d103      	bne.n	800839a <xQueueReceive+0xf2>
 8008392:	f001 fdd3 	bl	8009f3c <vPortExitCritical>
 8008396:	2300      	movs	r3, #0
 8008398:	e062      	b.n	8008460 <xQueueReceive+0x1b8>
 800839a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800839c:	2b00      	cmp	r3, #0
 800839e:	d106      	bne.n	80083ae <xQueueReceive+0x106>
 80083a0:	f107 0310 	add.w	r3, r7, #16
 80083a4:	4618      	mov	r0, r3
 80083a6:	f000 fec5 	bl	8009134 <vTaskInternalSetTimeOutState>
 80083aa:	2301      	movs	r3, #1
 80083ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083ae:	f001 fdc5 	bl	8009f3c <vPortExitCritical>
 80083b2:	f000 fc2d 	bl	8008c10 <vTaskSuspendAll>
 80083b6:	f001 fd8f 	bl	8009ed8 <vPortEnterCritical>
 80083ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083c0:	b25b      	sxtb	r3, r3
 80083c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c6:	d103      	bne.n	80083d0 <xQueueReceive+0x128>
 80083c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083d6:	b25b      	sxtb	r3, r3
 80083d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083dc:	d103      	bne.n	80083e6 <xQueueReceive+0x13e>
 80083de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083e6:	f001 fda9 	bl	8009f3c <vPortExitCritical>
 80083ea:	1d3a      	adds	r2, r7, #4
 80083ec:	f107 0310 	add.w	r3, r7, #16
 80083f0:	4611      	mov	r1, r2
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 feb4 	bl	8009160 <xTaskCheckForTimeOut>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d123      	bne.n	8008446 <xQueueReceive+0x19e>
 80083fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008400:	f000 f916 	bl	8008630 <prvIsQueueEmpty>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d017      	beq.n	800843a <xQueueReceive+0x192>
 800840a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840c:	3324      	adds	r3, #36	@ 0x24
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	4611      	mov	r1, r2
 8008412:	4618      	mov	r0, r3
 8008414:	f000 fdd8 	bl	8008fc8 <vTaskPlaceOnEventList>
 8008418:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800841a:	f000 f8b7 	bl	800858c <prvUnlockQueue>
 800841e:	f000 fc05 	bl	8008c2c <xTaskResumeAll>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d189      	bne.n	800833c <xQueueReceive+0x94>
 8008428:	4b0f      	ldr	r3, [pc, #60]	@ (8008468 <xQueueReceive+0x1c0>)
 800842a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800842e:	601a      	str	r2, [r3, #0]
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	e780      	b.n	800833c <xQueueReceive+0x94>
 800843a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800843c:	f000 f8a6 	bl	800858c <prvUnlockQueue>
 8008440:	f000 fbf4 	bl	8008c2c <xTaskResumeAll>
 8008444:	e77a      	b.n	800833c <xQueueReceive+0x94>
 8008446:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008448:	f000 f8a0 	bl	800858c <prvUnlockQueue>
 800844c:	f000 fbee 	bl	8008c2c <xTaskResumeAll>
 8008450:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008452:	f000 f8ed 	bl	8008630 <prvIsQueueEmpty>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	f43f af6f 	beq.w	800833c <xQueueReceive+0x94>
 800845e:	2300      	movs	r3, #0
 8008460:	4618      	mov	r0, r3
 8008462:	3730      	adds	r7, #48	@ 0x30
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	e000ed04 	.word	0xe000ed04

0800846c <prvCopyDataToQueue>:
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
 8008478:	2300      	movs	r3, #0
 800847a:	617b      	str	r3, [r7, #20]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008480:	613b      	str	r3, [r7, #16]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10d      	bne.n	80084a6 <prvCopyDataToQueue+0x3a>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d14d      	bne.n	800852e <prvCopyDataToQueue+0xc2>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	4618      	mov	r0, r3
 8008498:	f000 ffcc 	bl	8009434 <xTaskPriorityDisinherit>
 800849c:	6178      	str	r0, [r7, #20]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	609a      	str	r2, [r3, #8]
 80084a4:	e043      	b.n	800852e <prvCopyDataToQueue+0xc2>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d119      	bne.n	80084e0 <prvCopyDataToQueue+0x74>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6858      	ldr	r0, [r3, #4]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b4:	461a      	mov	r2, r3
 80084b6:	68b9      	ldr	r1, [r7, #8]
 80084b8:	f002 ff55 	bl	800b366 <memcpy>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084c4:	441a      	add	r2, r3
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	605a      	str	r2, [r3, #4]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d32b      	bcc.n	800852e <prvCopyDataToQueue+0xc2>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	605a      	str	r2, [r3, #4]
 80084de:	e026      	b.n	800852e <prvCopyDataToQueue+0xc2>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	68d8      	ldr	r0, [r3, #12]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e8:	461a      	mov	r2, r3
 80084ea:	68b9      	ldr	r1, [r7, #8]
 80084ec:	f002 ff3b 	bl	800b366 <memcpy>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	68da      	ldr	r2, [r3, #12]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f8:	425b      	negs	r3, r3
 80084fa:	441a      	add	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	60da      	str	r2, [r3, #12]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	68da      	ldr	r2, [r3, #12]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	429a      	cmp	r2, r3
 800850a:	d207      	bcs.n	800851c <prvCopyDataToQueue+0xb0>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	689a      	ldr	r2, [r3, #8]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008514:	425b      	negs	r3, r3
 8008516:	441a      	add	r2, r3
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	60da      	str	r2, [r3, #12]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b02      	cmp	r3, #2
 8008520:	d105      	bne.n	800852e <prvCopyDataToQueue+0xc2>
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d002      	beq.n	800852e <prvCopyDataToQueue+0xc2>
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	3b01      	subs	r3, #1
 800852c:	613b      	str	r3, [r7, #16]
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	1c5a      	adds	r2, r3, #1
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	639a      	str	r2, [r3, #56]	@ 0x38
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	4618      	mov	r0, r3
 800853a:	3718      	adds	r7, #24
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <prvCopyDataFromQueue>:
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800854e:	2b00      	cmp	r3, #0
 8008550:	d018      	beq.n	8008584 <prvCopyDataFromQueue+0x44>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68da      	ldr	r2, [r3, #12]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855a:	441a      	add	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	60da      	str	r2, [r3, #12]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	68da      	ldr	r2, [r3, #12]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	429a      	cmp	r2, r3
 800856a:	d303      	bcc.n	8008574 <prvCopyDataFromQueue+0x34>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	60da      	str	r2, [r3, #12]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	68d9      	ldr	r1, [r3, #12]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800857c:	461a      	mov	r2, r3
 800857e:	6838      	ldr	r0, [r7, #0]
 8008580:	f002 fef1 	bl	800b366 <memcpy>
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <prvUnlockQueue>:
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	f001 fca0 	bl	8009ed8 <vPortEnterCritical>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800859e:	73fb      	strb	r3, [r7, #15]
 80085a0:	e011      	b.n	80085c6 <prvUnlockQueue+0x3a>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d012      	beq.n	80085d0 <prvUnlockQueue+0x44>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	3324      	adds	r3, #36	@ 0x24
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fd5c 	bl	800906c <xTaskRemoveFromEventList>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <prvUnlockQueue+0x32>
 80085ba:	f000 fe35 	bl	8009228 <vTaskMissedYield>
 80085be:	7bfb      	ldrb	r3, [r7, #15]
 80085c0:	3b01      	subs	r3, #1
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	73fb      	strb	r3, [r7, #15]
 80085c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	dce9      	bgt.n	80085a2 <prvUnlockQueue+0x16>
 80085ce:	e000      	b.n	80085d2 <prvUnlockQueue+0x46>
 80085d0:	bf00      	nop
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	22ff      	movs	r2, #255	@ 0xff
 80085d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085da:	f001 fcaf 	bl	8009f3c <vPortExitCritical>
 80085de:	f001 fc7b 	bl	8009ed8 <vPortEnterCritical>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80085e8:	73bb      	strb	r3, [r7, #14]
 80085ea:	e011      	b.n	8008610 <prvUnlockQueue+0x84>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d012      	beq.n	800861a <prvUnlockQueue+0x8e>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3310      	adds	r3, #16
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 fd37 	bl	800906c <xTaskRemoveFromEventList>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d001      	beq.n	8008608 <prvUnlockQueue+0x7c>
 8008604:	f000 fe10 	bl	8009228 <vTaskMissedYield>
 8008608:	7bbb      	ldrb	r3, [r7, #14]
 800860a:	3b01      	subs	r3, #1
 800860c:	b2db      	uxtb	r3, r3
 800860e:	73bb      	strb	r3, [r7, #14]
 8008610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008614:	2b00      	cmp	r3, #0
 8008616:	dce9      	bgt.n	80085ec <prvUnlockQueue+0x60>
 8008618:	e000      	b.n	800861c <prvUnlockQueue+0x90>
 800861a:	bf00      	nop
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	22ff      	movs	r2, #255	@ 0xff
 8008620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008624:	f001 fc8a 	bl	8009f3c <vPortExitCritical>
 8008628:	bf00      	nop
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <prvIsQueueEmpty>:
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	f001 fc4e 	bl	8009ed8 <vPortEnterCritical>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008640:	2b00      	cmp	r3, #0
 8008642:	d102      	bne.n	800864a <prvIsQueueEmpty+0x1a>
 8008644:	2301      	movs	r3, #1
 8008646:	60fb      	str	r3, [r7, #12]
 8008648:	e001      	b.n	800864e <prvIsQueueEmpty+0x1e>
 800864a:	2300      	movs	r3, #0
 800864c:	60fb      	str	r3, [r7, #12]
 800864e:	f001 fc75 	bl	8009f3c <vPortExitCritical>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <prvIsQueueFull>:
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	f001 fc38 	bl	8009ed8 <vPortEnterCritical>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008670:	429a      	cmp	r2, r3
 8008672:	d102      	bne.n	800867a <prvIsQueueFull+0x1e>
 8008674:	2301      	movs	r3, #1
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	e001      	b.n	800867e <prvIsQueueFull+0x22>
 800867a:	2300      	movs	r3, #0
 800867c:	60fb      	str	r3, [r7, #12]
 800867e:	f001 fc5d 	bl	8009f3c <vPortExitCritical>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <vQueueAddToRegistry>:
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
 8008696:	2300      	movs	r3, #0
 8008698:	60fb      	str	r3, [r7, #12]
 800869a:	e014      	b.n	80086c6 <vQueueAddToRegistry+0x3a>
 800869c:	4a0f      	ldr	r2, [pc, #60]	@ (80086dc <vQueueAddToRegistry+0x50>)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10b      	bne.n	80086c0 <vQueueAddToRegistry+0x34>
 80086a8:	490c      	ldr	r1, [pc, #48]	@ (80086dc <vQueueAddToRegistry+0x50>)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80086b2:	4a0a      	ldr	r2, [pc, #40]	@ (80086dc <vQueueAddToRegistry+0x50>)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	00db      	lsls	r3, r3, #3
 80086b8:	4413      	add	r3, r2
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	605a      	str	r2, [r3, #4]
 80086be:	e006      	b.n	80086ce <vQueueAddToRegistry+0x42>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	3301      	adds	r3, #1
 80086c4:	60fb      	str	r3, [r7, #12]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2b07      	cmp	r3, #7
 80086ca:	d9e7      	bls.n	800869c <vQueueAddToRegistry+0x10>
 80086cc:	bf00      	nop
 80086ce:	bf00      	nop
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	200010dc 	.word	0x200010dc

080086e0 <vQueueWaitForMessageRestricted>:
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	617b      	str	r3, [r7, #20]
 80086f0:	f001 fbf2 	bl	8009ed8 <vPortEnterCritical>
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086fa:	b25b      	sxtb	r3, r3
 80086fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008700:	d103      	bne.n	800870a <vQueueWaitForMessageRestricted+0x2a>
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008710:	b25b      	sxtb	r3, r3
 8008712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008716:	d103      	bne.n	8008720 <vQueueWaitForMessageRestricted+0x40>
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008720:	f001 fc0c 	bl	8009f3c <vPortExitCritical>
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008728:	2b00      	cmp	r3, #0
 800872a:	d106      	bne.n	800873a <vQueueWaitForMessageRestricted+0x5a>
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	3324      	adds	r3, #36	@ 0x24
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	68b9      	ldr	r1, [r7, #8]
 8008734:	4618      	mov	r0, r3
 8008736:	f000 fc6d 	bl	8009014 <vTaskPlaceOnEventListRestricted>
 800873a:	6978      	ldr	r0, [r7, #20]
 800873c:	f7ff ff26 	bl	800858c <prvUnlockQueue>
 8008740:	bf00      	nop
 8008742:	3718      	adds	r7, #24
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <xTaskCreateStatic>:
 8008748:	b580      	push	{r7, lr}
 800874a:	b08e      	sub	sp, #56	@ 0x38
 800874c:	af04      	add	r7, sp, #16
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
 8008754:	603b      	str	r3, [r7, #0]
 8008756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10b      	bne.n	8008774 <xTaskCreateStatic+0x2c>
 800875c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	623b      	str	r3, [r7, #32]
 800876e:	bf00      	nop
 8008770:	bf00      	nop
 8008772:	e7fd      	b.n	8008770 <xTaskCreateStatic+0x28>
 8008774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10b      	bne.n	8008792 <xTaskCreateStatic+0x4a>
 800877a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	61fb      	str	r3, [r7, #28]
 800878c:	bf00      	nop
 800878e:	bf00      	nop
 8008790:	e7fd      	b.n	800878e <xTaskCreateStatic+0x46>
 8008792:	23a8      	movs	r3, #168	@ 0xa8
 8008794:	613b      	str	r3, [r7, #16]
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	2ba8      	cmp	r3, #168	@ 0xa8
 800879a:	d00b      	beq.n	80087b4 <xTaskCreateStatic+0x6c>
 800879c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	61bb      	str	r3, [r7, #24]
 80087ae:	bf00      	nop
 80087b0:	bf00      	nop
 80087b2:	e7fd      	b.n	80087b0 <xTaskCreateStatic+0x68>
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d01e      	beq.n	80087fa <xTaskCreateStatic+0xb2>
 80087bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d01b      	beq.n	80087fa <xTaskCreateStatic+0xb2>
 80087c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80087c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80087cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ce:	2202      	movs	r2, #2
 80087d0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 80087d4:	2300      	movs	r3, #0
 80087d6:	9303      	str	r3, [sp, #12]
 80087d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087da:	9302      	str	r3, [sp, #8]
 80087dc:	f107 0314 	add.w	r3, r7, #20
 80087e0:	9301      	str	r3, [sp, #4]
 80087e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	68b9      	ldr	r1, [r7, #8]
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 f851 	bl	8008894 <prvInitialiseNewTask>
 80087f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80087f4:	f000 f8f6 	bl	80089e4 <prvAddNewTaskToReadyList>
 80087f8:	e001      	b.n	80087fe <xTaskCreateStatic+0xb6>
 80087fa:	2300      	movs	r3, #0
 80087fc:	617b      	str	r3, [r7, #20]
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	4618      	mov	r0, r3
 8008802:	3728      	adds	r7, #40	@ 0x28
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <xTaskCreate>:
 8008808:	b580      	push	{r7, lr}
 800880a:	b08c      	sub	sp, #48	@ 0x30
 800880c:	af04      	add	r7, sp, #16
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	603b      	str	r3, [r7, #0]
 8008814:	4613      	mov	r3, r2
 8008816:	80fb      	strh	r3, [r7, #6]
 8008818:	88fb      	ldrh	r3, [r7, #6]
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4618      	mov	r0, r3
 800881e:	f001 fc7d 	bl	800a11c <pvPortMalloc>
 8008822:	6178      	str	r0, [r7, #20]
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00e      	beq.n	8008848 <xTaskCreate+0x40>
 800882a:	20a8      	movs	r0, #168	@ 0xa8
 800882c:	f001 fc76 	bl	800a11c <pvPortMalloc>
 8008830:	61f8      	str	r0, [r7, #28]
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d003      	beq.n	8008840 <xTaskCreate+0x38>
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	697a      	ldr	r2, [r7, #20]
 800883c:	631a      	str	r2, [r3, #48]	@ 0x30
 800883e:	e005      	b.n	800884c <xTaskCreate+0x44>
 8008840:	6978      	ldr	r0, [r7, #20]
 8008842:	f001 fd39 	bl	800a2b8 <vPortFree>
 8008846:	e001      	b.n	800884c <xTaskCreate+0x44>
 8008848:	2300      	movs	r3, #0
 800884a:	61fb      	str	r3, [r7, #28]
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d017      	beq.n	8008882 <xTaskCreate+0x7a>
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 800885a:	88fa      	ldrh	r2, [r7, #6]
 800885c:	2300      	movs	r3, #0
 800885e:	9303      	str	r3, [sp, #12]
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	9302      	str	r3, [sp, #8]
 8008864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008866:	9301      	str	r3, [sp, #4]
 8008868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	68b9      	ldr	r1, [r7, #8]
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 f80f 	bl	8008894 <prvInitialiseNewTask>
 8008876:	69f8      	ldr	r0, [r7, #28]
 8008878:	f000 f8b4 	bl	80089e4 <prvAddNewTaskToReadyList>
 800887c:	2301      	movs	r3, #1
 800887e:	61bb      	str	r3, [r7, #24]
 8008880:	e002      	b.n	8008888 <xTaskCreate+0x80>
 8008882:	f04f 33ff 	mov.w	r3, #4294967295
 8008886:	61bb      	str	r3, [r7, #24]
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	4618      	mov	r0, r3
 800888c:	3720      	adds	r7, #32
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
	...

08008894 <prvInitialiseNewTask>:
 8008894:	b580      	push	{r7, lr}
 8008896:	b088      	sub	sp, #32
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
 80088a0:	603b      	str	r3, [r7, #0]
 80088a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	461a      	mov	r2, r3
 80088ac:	21a5      	movs	r1, #165	@ 0xa5
 80088ae:	f002 fc85 	bl	800b1bc <memset>
 80088b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80088bc:	3b01      	subs	r3, #1
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	61bb      	str	r3, [r7, #24]
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	f023 0307 	bic.w	r3, r3, #7
 80088ca:	61bb      	str	r3, [r7, #24]
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	f003 0307 	and.w	r3, r3, #7
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00b      	beq.n	80088ee <prvInitialiseNewTask+0x5a>
 80088d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088da:	f383 8811 	msr	BASEPRI, r3
 80088de:	f3bf 8f6f 	isb	sy
 80088e2:	f3bf 8f4f 	dsb	sy
 80088e6:	617b      	str	r3, [r7, #20]
 80088e8:	bf00      	nop
 80088ea:	bf00      	nop
 80088ec:	e7fd      	b.n	80088ea <prvInitialiseNewTask+0x56>
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d01f      	beq.n	8008934 <prvInitialiseNewTask+0xa0>
 80088f4:	2300      	movs	r3, #0
 80088f6:	61fb      	str	r3, [r7, #28]
 80088f8:	e012      	b.n	8008920 <prvInitialiseNewTask+0x8c>
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	4413      	add	r3, r2
 8008900:	7819      	ldrb	r1, [r3, #0]
 8008902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	4413      	add	r3, r2
 8008908:	3334      	adds	r3, #52	@ 0x34
 800890a:	460a      	mov	r2, r1
 800890c:	701a      	strb	r2, [r3, #0]
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	4413      	add	r3, r2
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d006      	beq.n	8008928 <prvInitialiseNewTask+0x94>
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	3301      	adds	r3, #1
 800891e:	61fb      	str	r3, [r7, #28]
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	2b0f      	cmp	r3, #15
 8008924:	d9e9      	bls.n	80088fa <prvInitialiseNewTask+0x66>
 8008926:	e000      	b.n	800892a <prvInitialiseNewTask+0x96>
 8008928:	bf00      	nop
 800892a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008932:	e003      	b.n	800893c <prvInitialiseNewTask+0xa8>
 8008934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008936:	2200      	movs	r2, #0
 8008938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800893c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800893e:	2b37      	cmp	r3, #55	@ 0x37
 8008940:	d901      	bls.n	8008946 <prvInitialiseNewTask+0xb2>
 8008942:	2337      	movs	r3, #55	@ 0x37
 8008944:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008948:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800894a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800894c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008950:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008954:	2200      	movs	r2, #0
 8008956:	651a      	str	r2, [r3, #80]	@ 0x50
 8008958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895a:	3304      	adds	r3, #4
 800895c:	4618      	mov	r0, r3
 800895e:	f7ff f965 	bl	8007c2c <vListInitialiseItem>
 8008962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008964:	3318      	adds	r3, #24
 8008966:	4618      	mov	r0, r3
 8008968:	f7ff f960 	bl	8007c2c <vListInitialiseItem>
 800896c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008970:	611a      	str	r2, [r3, #16]
 8008972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008974:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897a:	619a      	str	r2, [r3, #24]
 800897c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008980:	625a      	str	r2, [r3, #36]	@ 0x24
 8008982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008984:	2200      	movs	r2, #0
 8008986:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800898a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898c:	2200      	movs	r2, #0
 800898e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 8008992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008994:	3354      	adds	r3, #84	@ 0x54
 8008996:	224c      	movs	r2, #76	@ 0x4c
 8008998:	2100      	movs	r1, #0
 800899a:	4618      	mov	r0, r3
 800899c:	f002 fc0e 	bl	800b1bc <memset>
 80089a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a2:	4a0d      	ldr	r2, [pc, #52]	@ (80089d8 <prvInitialiseNewTask+0x144>)
 80089a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80089a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a8:	4a0c      	ldr	r2, [pc, #48]	@ (80089dc <prvInitialiseNewTask+0x148>)
 80089aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80089ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ae:	4a0c      	ldr	r2, [pc, #48]	@ (80089e0 <prvInitialiseNewTask+0x14c>)
 80089b0:	661a      	str	r2, [r3, #96]	@ 0x60
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	68f9      	ldr	r1, [r7, #12]
 80089b6:	69b8      	ldr	r0, [r7, #24]
 80089b8:	f001 f95a 	bl	8009c70 <pxPortInitialiseStack>
 80089bc:	4602      	mov	r2, r0
 80089be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d002      	beq.n	80089ce <prvInitialiseNewTask+0x13a>
 80089c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089cc:	601a      	str	r2, [r3, #0]
 80089ce:	bf00      	nop
 80089d0:	3720      	adds	r7, #32
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	20002328 	.word	0x20002328
 80089dc:	20002390 	.word	0x20002390
 80089e0:	200023f8 	.word	0x200023f8

080089e4 <prvAddNewTaskToReadyList>:
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	f001 fa74 	bl	8009ed8 <vPortEnterCritical>
 80089f0:	4b2d      	ldr	r3, [pc, #180]	@ (8008aa8 <prvAddNewTaskToReadyList+0xc4>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	3301      	adds	r3, #1
 80089f6:	4a2c      	ldr	r2, [pc, #176]	@ (8008aa8 <prvAddNewTaskToReadyList+0xc4>)
 80089f8:	6013      	str	r3, [r2, #0]
 80089fa:	4b2c      	ldr	r3, [pc, #176]	@ (8008aac <prvAddNewTaskToReadyList+0xc8>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d109      	bne.n	8008a16 <prvAddNewTaskToReadyList+0x32>
 8008a02:	4a2a      	ldr	r2, [pc, #168]	@ (8008aac <prvAddNewTaskToReadyList+0xc8>)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	4b27      	ldr	r3, [pc, #156]	@ (8008aa8 <prvAddNewTaskToReadyList+0xc4>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d110      	bne.n	8008a32 <prvAddNewTaskToReadyList+0x4e>
 8008a10:	f000 fc2e 	bl	8009270 <prvInitialiseTaskLists>
 8008a14:	e00d      	b.n	8008a32 <prvAddNewTaskToReadyList+0x4e>
 8008a16:	4b26      	ldr	r3, [pc, #152]	@ (8008ab0 <prvAddNewTaskToReadyList+0xcc>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d109      	bne.n	8008a32 <prvAddNewTaskToReadyList+0x4e>
 8008a1e:	4b23      	ldr	r3, [pc, #140]	@ (8008aac <prvAddNewTaskToReadyList+0xc8>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d802      	bhi.n	8008a32 <prvAddNewTaskToReadyList+0x4e>
 8008a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8008aac <prvAddNewTaskToReadyList+0xc8>)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6013      	str	r3, [r2, #0]
 8008a32:	4b20      	ldr	r3, [pc, #128]	@ (8008ab4 <prvAddNewTaskToReadyList+0xd0>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3301      	adds	r3, #1
 8008a38:	4a1e      	ldr	r2, [pc, #120]	@ (8008ab4 <prvAddNewTaskToReadyList+0xd0>)
 8008a3a:	6013      	str	r3, [r2, #0]
 8008a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8008ab4 <prvAddNewTaskToReadyList+0xd0>)
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	645a      	str	r2, [r3, #68]	@ 0x44
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a48:	4b1b      	ldr	r3, [pc, #108]	@ (8008ab8 <prvAddNewTaskToReadyList+0xd4>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d903      	bls.n	8008a58 <prvAddNewTaskToReadyList+0x74>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a54:	4a18      	ldr	r2, [pc, #96]	@ (8008ab8 <prvAddNewTaskToReadyList+0xd4>)
 8008a56:	6013      	str	r3, [r2, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	4413      	add	r3, r2
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	4a15      	ldr	r2, [pc, #84]	@ (8008abc <prvAddNewTaskToReadyList+0xd8>)
 8008a66:	441a      	add	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	3304      	adds	r3, #4
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	4610      	mov	r0, r2
 8008a70:	f7ff f8e9 	bl	8007c46 <vListInsertEnd>
 8008a74:	f001 fa62 	bl	8009f3c <vPortExitCritical>
 8008a78:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab0 <prvAddNewTaskToReadyList+0xcc>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00e      	beq.n	8008a9e <prvAddNewTaskToReadyList+0xba>
 8008a80:	4b0a      	ldr	r3, [pc, #40]	@ (8008aac <prvAddNewTaskToReadyList+0xc8>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d207      	bcs.n	8008a9e <prvAddNewTaskToReadyList+0xba>
 8008a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ac0 <prvAddNewTaskToReadyList+0xdc>)
 8008a90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	bf00      	nop
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	200015f0 	.word	0x200015f0
 8008aac:	2000111c 	.word	0x2000111c
 8008ab0:	200015fc 	.word	0x200015fc
 8008ab4:	2000160c 	.word	0x2000160c
 8008ab8:	200015f8 	.word	0x200015f8
 8008abc:	20001120 	.word	0x20001120
 8008ac0:	e000ed04 	.word	0xe000ed04

08008ac4 <vTaskDelay>:
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	2300      	movs	r3, #0
 8008ace:	60fb      	str	r3, [r7, #12]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d018      	beq.n	8008b08 <vTaskDelay+0x44>
 8008ad6:	4b14      	ldr	r3, [pc, #80]	@ (8008b28 <vTaskDelay+0x64>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00b      	beq.n	8008af6 <vTaskDelay+0x32>
 8008ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	60bb      	str	r3, [r7, #8]
 8008af0:	bf00      	nop
 8008af2:	bf00      	nop
 8008af4:	e7fd      	b.n	8008af2 <vTaskDelay+0x2e>
 8008af6:	f000 f88b 	bl	8008c10 <vTaskSuspendAll>
 8008afa:	2100      	movs	r1, #0
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fd09 	bl	8009514 <prvAddCurrentTaskToDelayedList>
 8008b02:	f000 f893 	bl	8008c2c <xTaskResumeAll>
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d107      	bne.n	8008b1e <vTaskDelay+0x5a>
 8008b0e:	4b07      	ldr	r3, [pc, #28]	@ (8008b2c <vTaskDelay+0x68>)
 8008b10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b14:	601a      	str	r2, [r3, #0]
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	bf00      	nop
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	20001618 	.word	0x20001618
 8008b2c:	e000ed04 	.word	0xe000ed04

08008b30 <vTaskStartScheduler>:
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b08a      	sub	sp, #40	@ 0x28
 8008b34:	af04      	add	r7, sp, #16
 8008b36:	2300      	movs	r3, #0
 8008b38:	60bb      	str	r3, [r7, #8]
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	607b      	str	r3, [r7, #4]
 8008b3e:	463a      	mov	r2, r7
 8008b40:	1d39      	adds	r1, r7, #4
 8008b42:	f107 0308 	add.w	r3, r7, #8
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7ff f81c 	bl	8007b84 <vApplicationGetIdleTaskMemory>
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	9202      	str	r2, [sp, #8]
 8008b54:	9301      	str	r3, [sp, #4]
 8008b56:	2300      	movs	r3, #0
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	460a      	mov	r2, r1
 8008b5e:	4924      	ldr	r1, [pc, #144]	@ (8008bf0 <vTaskStartScheduler+0xc0>)
 8008b60:	4824      	ldr	r0, [pc, #144]	@ (8008bf4 <vTaskStartScheduler+0xc4>)
 8008b62:	f7ff fdf1 	bl	8008748 <xTaskCreateStatic>
 8008b66:	4603      	mov	r3, r0
 8008b68:	4a23      	ldr	r2, [pc, #140]	@ (8008bf8 <vTaskStartScheduler+0xc8>)
 8008b6a:	6013      	str	r3, [r2, #0]
 8008b6c:	4b22      	ldr	r3, [pc, #136]	@ (8008bf8 <vTaskStartScheduler+0xc8>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d002      	beq.n	8008b7a <vTaskStartScheduler+0x4a>
 8008b74:	2301      	movs	r3, #1
 8008b76:	617b      	str	r3, [r7, #20]
 8008b78:	e001      	b.n	8008b7e <vTaskStartScheduler+0x4e>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	617b      	str	r3, [r7, #20]
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d102      	bne.n	8008b8a <vTaskStartScheduler+0x5a>
 8008b84:	f000 fd1a 	bl	80095bc <xTimerCreateTimerTask>
 8008b88:	6178      	str	r0, [r7, #20]
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d11b      	bne.n	8008bc8 <vTaskStartScheduler+0x98>
 8008b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	613b      	str	r3, [r7, #16]
 8008ba2:	bf00      	nop
 8008ba4:	4b15      	ldr	r3, [pc, #84]	@ (8008bfc <vTaskStartScheduler+0xcc>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	3354      	adds	r3, #84	@ 0x54
 8008baa:	4a15      	ldr	r2, [pc, #84]	@ (8008c00 <vTaskStartScheduler+0xd0>)
 8008bac:	6013      	str	r3, [r2, #0]
 8008bae:	4b15      	ldr	r3, [pc, #84]	@ (8008c04 <vTaskStartScheduler+0xd4>)
 8008bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb4:	601a      	str	r2, [r3, #0]
 8008bb6:	4b14      	ldr	r3, [pc, #80]	@ (8008c08 <vTaskStartScheduler+0xd8>)
 8008bb8:	2201      	movs	r2, #1
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	4b13      	ldr	r3, [pc, #76]	@ (8008c0c <vTaskStartScheduler+0xdc>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	601a      	str	r2, [r3, #0]
 8008bc2:	f001 f8e5 	bl	8009d90 <xPortStartScheduler>
 8008bc6:	e00f      	b.n	8008be8 <vTaskStartScheduler+0xb8>
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bce:	d10b      	bne.n	8008be8 <vTaskStartScheduler+0xb8>
 8008bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd4:	f383 8811 	msr	BASEPRI, r3
 8008bd8:	f3bf 8f6f 	isb	sy
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	60fb      	str	r3, [r7, #12]
 8008be2:	bf00      	nop
 8008be4:	bf00      	nop
 8008be6:	e7fd      	b.n	8008be4 <vTaskStartScheduler+0xb4>
 8008be8:	bf00      	nop
 8008bea:	3718      	adds	r7, #24
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	0800d8d8 	.word	0x0800d8d8
 8008bf4:	08009241 	.word	0x08009241
 8008bf8:	20001614 	.word	0x20001614
 8008bfc:	2000111c 	.word	0x2000111c
 8008c00:	2000001c 	.word	0x2000001c
 8008c04:	20001610 	.word	0x20001610
 8008c08:	200015fc 	.word	0x200015fc
 8008c0c:	200015f4 	.word	0x200015f4

08008c10 <vTaskSuspendAll>:
 8008c10:	b480      	push	{r7}
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	4b04      	ldr	r3, [pc, #16]	@ (8008c28 <vTaskSuspendAll+0x18>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	4a03      	ldr	r2, [pc, #12]	@ (8008c28 <vTaskSuspendAll+0x18>)
 8008c1c:	6013      	str	r3, [r2, #0]
 8008c1e:	bf00      	nop
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr
 8008c28:	20001618 	.word	0x20001618

08008c2c <xTaskResumeAll>:
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	2300      	movs	r3, #0
 8008c34:	60fb      	str	r3, [r7, #12]
 8008c36:	2300      	movs	r3, #0
 8008c38:	60bb      	str	r3, [r7, #8]
 8008c3a:	4b42      	ldr	r3, [pc, #264]	@ (8008d44 <xTaskResumeAll+0x118>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d10b      	bne.n	8008c5a <xTaskResumeAll+0x2e>
 8008c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c46:	f383 8811 	msr	BASEPRI, r3
 8008c4a:	f3bf 8f6f 	isb	sy
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	603b      	str	r3, [r7, #0]
 8008c54:	bf00      	nop
 8008c56:	bf00      	nop
 8008c58:	e7fd      	b.n	8008c56 <xTaskResumeAll+0x2a>
 8008c5a:	f001 f93d 	bl	8009ed8 <vPortEnterCritical>
 8008c5e:	4b39      	ldr	r3, [pc, #228]	@ (8008d44 <xTaskResumeAll+0x118>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	3b01      	subs	r3, #1
 8008c64:	4a37      	ldr	r2, [pc, #220]	@ (8008d44 <xTaskResumeAll+0x118>)
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	4b36      	ldr	r3, [pc, #216]	@ (8008d44 <xTaskResumeAll+0x118>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d162      	bne.n	8008d36 <xTaskResumeAll+0x10a>
 8008c70:	4b35      	ldr	r3, [pc, #212]	@ (8008d48 <xTaskResumeAll+0x11c>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d05e      	beq.n	8008d36 <xTaskResumeAll+0x10a>
 8008c78:	e02f      	b.n	8008cda <xTaskResumeAll+0xae>
 8008c7a:	4b34      	ldr	r3, [pc, #208]	@ (8008d4c <xTaskResumeAll+0x120>)
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	60fb      	str	r3, [r7, #12]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	3318      	adds	r3, #24
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7ff f83a 	bl	8007d00 <uxListRemove>
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	3304      	adds	r3, #4
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7ff f835 	bl	8007d00 <uxListRemove>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8008d50 <xTaskResumeAll+0x124>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d903      	bls.n	8008caa <xTaskResumeAll+0x7e>
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca6:	4a2a      	ldr	r2, [pc, #168]	@ (8008d50 <xTaskResumeAll+0x124>)
 8008ca8:	6013      	str	r3, [r2, #0]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cae:	4613      	mov	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4413      	add	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4a27      	ldr	r2, [pc, #156]	@ (8008d54 <xTaskResumeAll+0x128>)
 8008cb8:	441a      	add	r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	f7fe ffc0 	bl	8007c46 <vListInsertEnd>
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cca:	4b23      	ldr	r3, [pc, #140]	@ (8008d58 <xTaskResumeAll+0x12c>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d302      	bcc.n	8008cda <xTaskResumeAll+0xae>
 8008cd4:	4b21      	ldr	r3, [pc, #132]	@ (8008d5c <xTaskResumeAll+0x130>)
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	601a      	str	r2, [r3, #0]
 8008cda:	4b1c      	ldr	r3, [pc, #112]	@ (8008d4c <xTaskResumeAll+0x120>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1cb      	bne.n	8008c7a <xTaskResumeAll+0x4e>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d001      	beq.n	8008cec <xTaskResumeAll+0xc0>
 8008ce8:	f000 fb66 	bl	80093b8 <prvResetNextTaskUnblockTime>
 8008cec:	4b1c      	ldr	r3, [pc, #112]	@ (8008d60 <xTaskResumeAll+0x134>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	607b      	str	r3, [r7, #4]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d010      	beq.n	8008d1a <xTaskResumeAll+0xee>
 8008cf8:	f000 f846 	bl	8008d88 <xTaskIncrementTick>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d002      	beq.n	8008d08 <xTaskResumeAll+0xdc>
 8008d02:	4b16      	ldr	r3, [pc, #88]	@ (8008d5c <xTaskResumeAll+0x130>)
 8008d04:	2201      	movs	r2, #1
 8008d06:	601a      	str	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	607b      	str	r3, [r7, #4]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1f1      	bne.n	8008cf8 <xTaskResumeAll+0xcc>
 8008d14:	4b12      	ldr	r3, [pc, #72]	@ (8008d60 <xTaskResumeAll+0x134>)
 8008d16:	2200      	movs	r2, #0
 8008d18:	601a      	str	r2, [r3, #0]
 8008d1a:	4b10      	ldr	r3, [pc, #64]	@ (8008d5c <xTaskResumeAll+0x130>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d009      	beq.n	8008d36 <xTaskResumeAll+0x10a>
 8008d22:	2301      	movs	r3, #1
 8008d24:	60bb      	str	r3, [r7, #8]
 8008d26:	4b0f      	ldr	r3, [pc, #60]	@ (8008d64 <xTaskResumeAll+0x138>)
 8008d28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f001 f901 	bl	8009f3c <vPortExitCritical>
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	20001618 	.word	0x20001618
 8008d48:	200015f0 	.word	0x200015f0
 8008d4c:	200015b0 	.word	0x200015b0
 8008d50:	200015f8 	.word	0x200015f8
 8008d54:	20001120 	.word	0x20001120
 8008d58:	2000111c 	.word	0x2000111c
 8008d5c:	20001604 	.word	0x20001604
 8008d60:	20001600 	.word	0x20001600
 8008d64:	e000ed04 	.word	0xe000ed04

08008d68 <xTaskGetTickCount>:
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	4b05      	ldr	r3, [pc, #20]	@ (8008d84 <xTaskGetTickCount+0x1c>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	607b      	str	r3, [r7, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4618      	mov	r0, r3
 8008d78:	370c      	adds	r7, #12
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	200015f4 	.word	0x200015f4

08008d88 <xTaskIncrementTick>:
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	2300      	movs	r3, #0
 8008d90:	617b      	str	r3, [r7, #20]
 8008d92:	4b4f      	ldr	r3, [pc, #316]	@ (8008ed0 <xTaskIncrementTick+0x148>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f040 8090 	bne.w	8008ebc <xTaskIncrementTick+0x134>
 8008d9c:	4b4d      	ldr	r3, [pc, #308]	@ (8008ed4 <xTaskIncrementTick+0x14c>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3301      	adds	r3, #1
 8008da2:	613b      	str	r3, [r7, #16]
 8008da4:	4a4b      	ldr	r2, [pc, #300]	@ (8008ed4 <xTaskIncrementTick+0x14c>)
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	6013      	str	r3, [r2, #0]
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d121      	bne.n	8008df4 <xTaskIncrementTick+0x6c>
 8008db0:	4b49      	ldr	r3, [pc, #292]	@ (8008ed8 <xTaskIncrementTick+0x150>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00b      	beq.n	8008dd2 <xTaskIncrementTick+0x4a>
 8008dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	603b      	str	r3, [r7, #0]
 8008dcc:	bf00      	nop
 8008dce:	bf00      	nop
 8008dd0:	e7fd      	b.n	8008dce <xTaskIncrementTick+0x46>
 8008dd2:	4b41      	ldr	r3, [pc, #260]	@ (8008ed8 <xTaskIncrementTick+0x150>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	60fb      	str	r3, [r7, #12]
 8008dd8:	4b40      	ldr	r3, [pc, #256]	@ (8008edc <xTaskIncrementTick+0x154>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a3e      	ldr	r2, [pc, #248]	@ (8008ed8 <xTaskIncrementTick+0x150>)
 8008dde:	6013      	str	r3, [r2, #0]
 8008de0:	4a3e      	ldr	r2, [pc, #248]	@ (8008edc <xTaskIncrementTick+0x154>)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6013      	str	r3, [r2, #0]
 8008de6:	4b3e      	ldr	r3, [pc, #248]	@ (8008ee0 <xTaskIncrementTick+0x158>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	3301      	adds	r3, #1
 8008dec:	4a3c      	ldr	r2, [pc, #240]	@ (8008ee0 <xTaskIncrementTick+0x158>)
 8008dee:	6013      	str	r3, [r2, #0]
 8008df0:	f000 fae2 	bl	80093b8 <prvResetNextTaskUnblockTime>
 8008df4:	4b3b      	ldr	r3, [pc, #236]	@ (8008ee4 <xTaskIncrementTick+0x15c>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d349      	bcc.n	8008e92 <xTaskIncrementTick+0x10a>
 8008dfe:	4b36      	ldr	r3, [pc, #216]	@ (8008ed8 <xTaskIncrementTick+0x150>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d104      	bne.n	8008e12 <xTaskIncrementTick+0x8a>
 8008e08:	4b36      	ldr	r3, [pc, #216]	@ (8008ee4 <xTaskIncrementTick+0x15c>)
 8008e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	e03f      	b.n	8008e92 <xTaskIncrementTick+0x10a>
 8008e12:	4b31      	ldr	r3, [pc, #196]	@ (8008ed8 <xTaskIncrementTick+0x150>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	60bb      	str	r3, [r7, #8]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	607b      	str	r3, [r7, #4]
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d203      	bcs.n	8008e32 <xTaskIncrementTick+0xaa>
 8008e2a:	4a2e      	ldr	r2, [pc, #184]	@ (8008ee4 <xTaskIncrementTick+0x15c>)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6013      	str	r3, [r2, #0]
 8008e30:	e02f      	b.n	8008e92 <xTaskIncrementTick+0x10a>
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	3304      	adds	r3, #4
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fe ff62 	bl	8007d00 <uxListRemove>
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d004      	beq.n	8008e4e <xTaskIncrementTick+0xc6>
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	3318      	adds	r3, #24
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7fe ff59 	bl	8007d00 <uxListRemove>
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e52:	4b25      	ldr	r3, [pc, #148]	@ (8008ee8 <xTaskIncrementTick+0x160>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d903      	bls.n	8008e62 <xTaskIncrementTick+0xda>
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e5e:	4a22      	ldr	r2, [pc, #136]	@ (8008ee8 <xTaskIncrementTick+0x160>)
 8008e60:	6013      	str	r3, [r2, #0]
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e66:	4613      	mov	r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4413      	add	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8008eec <xTaskIncrementTick+0x164>)
 8008e70:	441a      	add	r2, r3
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	3304      	adds	r3, #4
 8008e76:	4619      	mov	r1, r3
 8008e78:	4610      	mov	r0, r2
 8008e7a:	f7fe fee4 	bl	8007c46 <vListInsertEnd>
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e82:	4b1b      	ldr	r3, [pc, #108]	@ (8008ef0 <xTaskIncrementTick+0x168>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d3b8      	bcc.n	8008dfe <xTaskIncrementTick+0x76>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	617b      	str	r3, [r7, #20]
 8008e90:	e7b5      	b.n	8008dfe <xTaskIncrementTick+0x76>
 8008e92:	4b17      	ldr	r3, [pc, #92]	@ (8008ef0 <xTaskIncrementTick+0x168>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e98:	4914      	ldr	r1, [pc, #80]	@ (8008eec <xTaskIncrementTick+0x164>)
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	4413      	add	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	440b      	add	r3, r1
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d901      	bls.n	8008eae <xTaskIncrementTick+0x126>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	617b      	str	r3, [r7, #20]
 8008eae:	4b11      	ldr	r3, [pc, #68]	@ (8008ef4 <xTaskIncrementTick+0x16c>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d007      	beq.n	8008ec6 <xTaskIncrementTick+0x13e>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	617b      	str	r3, [r7, #20]
 8008eba:	e004      	b.n	8008ec6 <xTaskIncrementTick+0x13e>
 8008ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8008ef8 <xTaskIncrementTick+0x170>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	4a0d      	ldr	r2, [pc, #52]	@ (8008ef8 <xTaskIncrementTick+0x170>)
 8008ec4:	6013      	str	r3, [r2, #0]
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3718      	adds	r7, #24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	20001618 	.word	0x20001618
 8008ed4:	200015f4 	.word	0x200015f4
 8008ed8:	200015a8 	.word	0x200015a8
 8008edc:	200015ac 	.word	0x200015ac
 8008ee0:	20001608 	.word	0x20001608
 8008ee4:	20001610 	.word	0x20001610
 8008ee8:	200015f8 	.word	0x200015f8
 8008eec:	20001120 	.word	0x20001120
 8008ef0:	2000111c 	.word	0x2000111c
 8008ef4:	20001604 	.word	0x20001604
 8008ef8:	20001600 	.word	0x20001600

08008efc <vTaskSwitchContext>:
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	4b2b      	ldr	r3, [pc, #172]	@ (8008fb0 <vTaskSwitchContext+0xb4>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d003      	beq.n	8008f12 <vTaskSwitchContext+0x16>
 8008f0a:	4b2a      	ldr	r3, [pc, #168]	@ (8008fb4 <vTaskSwitchContext+0xb8>)
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	601a      	str	r2, [r3, #0]
 8008f10:	e047      	b.n	8008fa2 <vTaskSwitchContext+0xa6>
 8008f12:	4b28      	ldr	r3, [pc, #160]	@ (8008fb4 <vTaskSwitchContext+0xb8>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	601a      	str	r2, [r3, #0]
 8008f18:	4b27      	ldr	r3, [pc, #156]	@ (8008fb8 <vTaskSwitchContext+0xbc>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	e011      	b.n	8008f44 <vTaskSwitchContext+0x48>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10b      	bne.n	8008f3e <vTaskSwitchContext+0x42>
 8008f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	607b      	str	r3, [r7, #4]
 8008f38:	bf00      	nop
 8008f3a:	bf00      	nop
 8008f3c:	e7fd      	b.n	8008f3a <vTaskSwitchContext+0x3e>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	3b01      	subs	r3, #1
 8008f42:	60fb      	str	r3, [r7, #12]
 8008f44:	491d      	ldr	r1, [pc, #116]	@ (8008fbc <vTaskSwitchContext+0xc0>)
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	4613      	mov	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	4413      	add	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	440b      	add	r3, r1
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d0e3      	beq.n	8008f20 <vTaskSwitchContext+0x24>
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4413      	add	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	4a16      	ldr	r2, [pc, #88]	@ (8008fbc <vTaskSwitchContext+0xc0>)
 8008f64:	4413      	add	r3, r2
 8008f66:	60bb      	str	r3, [r7, #8]
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	685a      	ldr	r2, [r3, #4]
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	605a      	str	r2, [r3, #4]
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	3308      	adds	r3, #8
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d104      	bne.n	8008f88 <vTaskSwitchContext+0x8c>
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	685a      	ldr	r2, [r3, #4]
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	605a      	str	r2, [r3, #4]
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8008fc0 <vTaskSwitchContext+0xc4>)
 8008f90:	6013      	str	r3, [r2, #0]
 8008f92:	4a09      	ldr	r2, [pc, #36]	@ (8008fb8 <vTaskSwitchContext+0xbc>)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6013      	str	r3, [r2, #0]
 8008f98:	4b09      	ldr	r3, [pc, #36]	@ (8008fc0 <vTaskSwitchContext+0xc4>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	3354      	adds	r3, #84	@ 0x54
 8008f9e:	4a09      	ldr	r2, [pc, #36]	@ (8008fc4 <vTaskSwitchContext+0xc8>)
 8008fa0:	6013      	str	r3, [r2, #0]
 8008fa2:	bf00      	nop
 8008fa4:	3714      	adds	r7, #20
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	20001618 	.word	0x20001618
 8008fb4:	20001604 	.word	0x20001604
 8008fb8:	200015f8 	.word	0x200015f8
 8008fbc:	20001120 	.word	0x20001120
 8008fc0:	2000111c 	.word	0x2000111c
 8008fc4:	2000001c 	.word	0x2000001c

08008fc8 <vTaskPlaceOnEventList>:
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10b      	bne.n	8008ff0 <vTaskPlaceOnEventList+0x28>
 8008fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fdc:	f383 8811 	msr	BASEPRI, r3
 8008fe0:	f3bf 8f6f 	isb	sy
 8008fe4:	f3bf 8f4f 	dsb	sy
 8008fe8:	60fb      	str	r3, [r7, #12]
 8008fea:	bf00      	nop
 8008fec:	bf00      	nop
 8008fee:	e7fd      	b.n	8008fec <vTaskPlaceOnEventList+0x24>
 8008ff0:	4b07      	ldr	r3, [pc, #28]	@ (8009010 <vTaskPlaceOnEventList+0x48>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	3318      	adds	r3, #24
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f7fe fe48 	bl	8007c8e <vListInsert>
 8008ffe:	2101      	movs	r1, #1
 8009000:	6838      	ldr	r0, [r7, #0]
 8009002:	f000 fa87 	bl	8009514 <prvAddCurrentTaskToDelayedList>
 8009006:	bf00      	nop
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	2000111c 	.word	0x2000111c

08009014 <vTaskPlaceOnEventListRestricted>:
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10b      	bne.n	800903e <vTaskPlaceOnEventListRestricted+0x2a>
 8009026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800902a:	f383 8811 	msr	BASEPRI, r3
 800902e:	f3bf 8f6f 	isb	sy
 8009032:	f3bf 8f4f 	dsb	sy
 8009036:	617b      	str	r3, [r7, #20]
 8009038:	bf00      	nop
 800903a:	bf00      	nop
 800903c:	e7fd      	b.n	800903a <vTaskPlaceOnEventListRestricted+0x26>
 800903e:	4b0a      	ldr	r3, [pc, #40]	@ (8009068 <vTaskPlaceOnEventListRestricted+0x54>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3318      	adds	r3, #24
 8009044:	4619      	mov	r1, r3
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f7fe fdfd 	bl	8007c46 <vListInsertEnd>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d002      	beq.n	8009058 <vTaskPlaceOnEventListRestricted+0x44>
 8009052:	f04f 33ff 	mov.w	r3, #4294967295
 8009056:	60bb      	str	r3, [r7, #8]
 8009058:	6879      	ldr	r1, [r7, #4]
 800905a:	68b8      	ldr	r0, [r7, #8]
 800905c:	f000 fa5a 	bl	8009514 <prvAddCurrentTaskToDelayedList>
 8009060:	bf00      	nop
 8009062:	3718      	adds	r7, #24
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	2000111c 	.word	0x2000111c

0800906c <xTaskRemoveFromEventList>:
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	613b      	str	r3, [r7, #16]
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10b      	bne.n	800909a <xTaskRemoveFromEventList+0x2e>
 8009082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009086:	f383 8811 	msr	BASEPRI, r3
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	60fb      	str	r3, [r7, #12]
 8009094:	bf00      	nop
 8009096:	bf00      	nop
 8009098:	e7fd      	b.n	8009096 <xTaskRemoveFromEventList+0x2a>
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	3318      	adds	r3, #24
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fe fe2e 	bl	8007d00 <uxListRemove>
 80090a4:	4b1d      	ldr	r3, [pc, #116]	@ (800911c <xTaskRemoveFromEventList+0xb0>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d11d      	bne.n	80090e8 <xTaskRemoveFromEventList+0x7c>
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	3304      	adds	r3, #4
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7fe fe25 	bl	8007d00 <uxListRemove>
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ba:	4b19      	ldr	r3, [pc, #100]	@ (8009120 <xTaskRemoveFromEventList+0xb4>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d903      	bls.n	80090ca <xTaskRemoveFromEventList+0x5e>
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c6:	4a16      	ldr	r2, [pc, #88]	@ (8009120 <xTaskRemoveFromEventList+0xb4>)
 80090c8:	6013      	str	r3, [r2, #0]
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ce:	4613      	mov	r3, r2
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	4413      	add	r3, r2
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4a13      	ldr	r2, [pc, #76]	@ (8009124 <xTaskRemoveFromEventList+0xb8>)
 80090d8:	441a      	add	r2, r3
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	3304      	adds	r3, #4
 80090de:	4619      	mov	r1, r3
 80090e0:	4610      	mov	r0, r2
 80090e2:	f7fe fdb0 	bl	8007c46 <vListInsertEnd>
 80090e6:	e005      	b.n	80090f4 <xTaskRemoveFromEventList+0x88>
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	3318      	adds	r3, #24
 80090ec:	4619      	mov	r1, r3
 80090ee:	480e      	ldr	r0, [pc, #56]	@ (8009128 <xTaskRemoveFromEventList+0xbc>)
 80090f0:	f7fe fda9 	bl	8007c46 <vListInsertEnd>
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090f8:	4b0c      	ldr	r3, [pc, #48]	@ (800912c <xTaskRemoveFromEventList+0xc0>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090fe:	429a      	cmp	r2, r3
 8009100:	d905      	bls.n	800910e <xTaskRemoveFromEventList+0xa2>
 8009102:	2301      	movs	r3, #1
 8009104:	617b      	str	r3, [r7, #20]
 8009106:	4b0a      	ldr	r3, [pc, #40]	@ (8009130 <xTaskRemoveFromEventList+0xc4>)
 8009108:	2201      	movs	r2, #1
 800910a:	601a      	str	r2, [r3, #0]
 800910c:	e001      	b.n	8009112 <xTaskRemoveFromEventList+0xa6>
 800910e:	2300      	movs	r3, #0
 8009110:	617b      	str	r3, [r7, #20]
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	4618      	mov	r0, r3
 8009116:	3718      	adds	r7, #24
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	20001618 	.word	0x20001618
 8009120:	200015f8 	.word	0x200015f8
 8009124:	20001120 	.word	0x20001120
 8009128:	200015b0 	.word	0x200015b0
 800912c:	2000111c 	.word	0x2000111c
 8009130:	20001604 	.word	0x20001604

08009134 <vTaskInternalSetTimeOutState>:
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	4b06      	ldr	r3, [pc, #24]	@ (8009158 <vTaskInternalSetTimeOutState+0x24>)
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	4b05      	ldr	r3, [pc, #20]	@ (800915c <vTaskInternalSetTimeOutState+0x28>)
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	605a      	str	r2, [r3, #4]
 800914c:	bf00      	nop
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr
 8009158:	20001608 	.word	0x20001608
 800915c:	200015f4 	.word	0x200015f4

08009160 <xTaskCheckForTimeOut>:
 8009160:	b580      	push	{r7, lr}
 8009162:	b088      	sub	sp, #32
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10b      	bne.n	8009188 <xTaskCheckForTimeOut+0x28>
 8009170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	613b      	str	r3, [r7, #16]
 8009182:	bf00      	nop
 8009184:	bf00      	nop
 8009186:	e7fd      	b.n	8009184 <xTaskCheckForTimeOut+0x24>
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d10b      	bne.n	80091a6 <xTaskCheckForTimeOut+0x46>
 800918e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	60fb      	str	r3, [r7, #12]
 80091a0:	bf00      	nop
 80091a2:	bf00      	nop
 80091a4:	e7fd      	b.n	80091a2 <xTaskCheckForTimeOut+0x42>
 80091a6:	f000 fe97 	bl	8009ed8 <vPortEnterCritical>
 80091aa:	4b1d      	ldr	r3, [pc, #116]	@ (8009220 <xTaskCheckForTimeOut+0xc0>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	61bb      	str	r3, [r7, #24]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	69ba      	ldr	r2, [r7, #24]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	617b      	str	r3, [r7, #20]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c2:	d102      	bne.n	80091ca <xTaskCheckForTimeOut+0x6a>
 80091c4:	2300      	movs	r3, #0
 80091c6:	61fb      	str	r3, [r7, #28]
 80091c8:	e023      	b.n	8009212 <xTaskCheckForTimeOut+0xb2>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	4b15      	ldr	r3, [pc, #84]	@ (8009224 <xTaskCheckForTimeOut+0xc4>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d007      	beq.n	80091e6 <xTaskCheckForTimeOut+0x86>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	69ba      	ldr	r2, [r7, #24]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d302      	bcc.n	80091e6 <xTaskCheckForTimeOut+0x86>
 80091e0:	2301      	movs	r3, #1
 80091e2:	61fb      	str	r3, [r7, #28]
 80091e4:	e015      	b.n	8009212 <xTaskCheckForTimeOut+0xb2>
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d20b      	bcs.n	8009208 <xTaskCheckForTimeOut+0xa8>
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	1ad2      	subs	r2, r2, r3
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	601a      	str	r2, [r3, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f7ff ff99 	bl	8009134 <vTaskInternalSetTimeOutState>
 8009202:	2300      	movs	r3, #0
 8009204:	61fb      	str	r3, [r7, #28]
 8009206:	e004      	b.n	8009212 <xTaskCheckForTimeOut+0xb2>
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	2200      	movs	r2, #0
 800920c:	601a      	str	r2, [r3, #0]
 800920e:	2301      	movs	r3, #1
 8009210:	61fb      	str	r3, [r7, #28]
 8009212:	f000 fe93 	bl	8009f3c <vPortExitCritical>
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	4618      	mov	r0, r3
 800921a:	3720      	adds	r7, #32
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	200015f4 	.word	0x200015f4
 8009224:	20001608 	.word	0x20001608

08009228 <vTaskMissedYield>:
 8009228:	b480      	push	{r7}
 800922a:	af00      	add	r7, sp, #0
 800922c:	4b03      	ldr	r3, [pc, #12]	@ (800923c <vTaskMissedYield+0x14>)
 800922e:	2201      	movs	r2, #1
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	bf00      	nop
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	20001604 	.word	0x20001604

08009240 <prvIdleTask>:
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	f000 f852 	bl	80092f0 <prvCheckTasksWaitingTermination>
 800924c:	4b06      	ldr	r3, [pc, #24]	@ (8009268 <prvIdleTask+0x28>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d9f9      	bls.n	8009248 <prvIdleTask+0x8>
 8009254:	4b05      	ldr	r3, [pc, #20]	@ (800926c <prvIdleTask+0x2c>)
 8009256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800925a:	601a      	str	r2, [r3, #0]
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	e7f0      	b.n	8009248 <prvIdleTask+0x8>
 8009266:	bf00      	nop
 8009268:	20001120 	.word	0x20001120
 800926c:	e000ed04 	.word	0xe000ed04

08009270 <prvInitialiseTaskLists>:
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	2300      	movs	r3, #0
 8009278:	607b      	str	r3, [r7, #4]
 800927a:	e00c      	b.n	8009296 <prvInitialiseTaskLists+0x26>
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	4613      	mov	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4a12      	ldr	r2, [pc, #72]	@ (80092d0 <prvInitialiseTaskLists+0x60>)
 8009288:	4413      	add	r3, r2
 800928a:	4618      	mov	r0, r3
 800928c:	f7fe fcae 	bl	8007bec <vListInitialise>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	3301      	adds	r3, #1
 8009294:	607b      	str	r3, [r7, #4]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b37      	cmp	r3, #55	@ 0x37
 800929a:	d9ef      	bls.n	800927c <prvInitialiseTaskLists+0xc>
 800929c:	480d      	ldr	r0, [pc, #52]	@ (80092d4 <prvInitialiseTaskLists+0x64>)
 800929e:	f7fe fca5 	bl	8007bec <vListInitialise>
 80092a2:	480d      	ldr	r0, [pc, #52]	@ (80092d8 <prvInitialiseTaskLists+0x68>)
 80092a4:	f7fe fca2 	bl	8007bec <vListInitialise>
 80092a8:	480c      	ldr	r0, [pc, #48]	@ (80092dc <prvInitialiseTaskLists+0x6c>)
 80092aa:	f7fe fc9f 	bl	8007bec <vListInitialise>
 80092ae:	480c      	ldr	r0, [pc, #48]	@ (80092e0 <prvInitialiseTaskLists+0x70>)
 80092b0:	f7fe fc9c 	bl	8007bec <vListInitialise>
 80092b4:	480b      	ldr	r0, [pc, #44]	@ (80092e4 <prvInitialiseTaskLists+0x74>)
 80092b6:	f7fe fc99 	bl	8007bec <vListInitialise>
 80092ba:	4b0b      	ldr	r3, [pc, #44]	@ (80092e8 <prvInitialiseTaskLists+0x78>)
 80092bc:	4a05      	ldr	r2, [pc, #20]	@ (80092d4 <prvInitialiseTaskLists+0x64>)
 80092be:	601a      	str	r2, [r3, #0]
 80092c0:	4b0a      	ldr	r3, [pc, #40]	@ (80092ec <prvInitialiseTaskLists+0x7c>)
 80092c2:	4a05      	ldr	r2, [pc, #20]	@ (80092d8 <prvInitialiseTaskLists+0x68>)
 80092c4:	601a      	str	r2, [r3, #0]
 80092c6:	bf00      	nop
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	20001120 	.word	0x20001120
 80092d4:	20001580 	.word	0x20001580
 80092d8:	20001594 	.word	0x20001594
 80092dc:	200015b0 	.word	0x200015b0
 80092e0:	200015c4 	.word	0x200015c4
 80092e4:	200015dc 	.word	0x200015dc
 80092e8:	200015a8 	.word	0x200015a8
 80092ec:	200015ac 	.word	0x200015ac

080092f0 <prvCheckTasksWaitingTermination>:
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	e019      	b.n	800932c <prvCheckTasksWaitingTermination+0x3c>
 80092f8:	f000 fdee 	bl	8009ed8 <vPortEnterCritical>
 80092fc:	4b10      	ldr	r3, [pc, #64]	@ (8009340 <prvCheckTasksWaitingTermination+0x50>)
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	607b      	str	r3, [r7, #4]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	3304      	adds	r3, #4
 8009308:	4618      	mov	r0, r3
 800930a:	f7fe fcf9 	bl	8007d00 <uxListRemove>
 800930e:	4b0d      	ldr	r3, [pc, #52]	@ (8009344 <prvCheckTasksWaitingTermination+0x54>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3b01      	subs	r3, #1
 8009314:	4a0b      	ldr	r2, [pc, #44]	@ (8009344 <prvCheckTasksWaitingTermination+0x54>)
 8009316:	6013      	str	r3, [r2, #0]
 8009318:	4b0b      	ldr	r3, [pc, #44]	@ (8009348 <prvCheckTasksWaitingTermination+0x58>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3b01      	subs	r3, #1
 800931e:	4a0a      	ldr	r2, [pc, #40]	@ (8009348 <prvCheckTasksWaitingTermination+0x58>)
 8009320:	6013      	str	r3, [r2, #0]
 8009322:	f000 fe0b 	bl	8009f3c <vPortExitCritical>
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f810 	bl	800934c <prvDeleteTCB>
 800932c:	4b06      	ldr	r3, [pc, #24]	@ (8009348 <prvCheckTasksWaitingTermination+0x58>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1e1      	bne.n	80092f8 <prvCheckTasksWaitingTermination+0x8>
 8009334:	bf00      	nop
 8009336:	bf00      	nop
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	200015c4 	.word	0x200015c4
 8009344:	200015f0 	.word	0x200015f0
 8009348:	200015d8 	.word	0x200015d8

0800934c <prvDeleteTCB>:
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	3354      	adds	r3, #84	@ 0x54
 8009358:	4618      	mov	r0, r3
 800935a:	f001 ff4b 	bl	800b1f4 <_reclaim_reent>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009364:	2b00      	cmp	r3, #0
 8009366:	d108      	bne.n	800937a <prvDeleteTCB+0x2e>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800936c:	4618      	mov	r0, r3
 800936e:	f000 ffa3 	bl	800a2b8 <vPortFree>
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 ffa0 	bl	800a2b8 <vPortFree>
 8009378:	e019      	b.n	80093ae <prvDeleteTCB+0x62>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009380:	2b01      	cmp	r3, #1
 8009382:	d103      	bne.n	800938c <prvDeleteTCB+0x40>
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 ff97 	bl	800a2b8 <vPortFree>
 800938a:	e010      	b.n	80093ae <prvDeleteTCB+0x62>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009392:	2b02      	cmp	r3, #2
 8009394:	d00b      	beq.n	80093ae <prvDeleteTCB+0x62>
 8009396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939a:	f383 8811 	msr	BASEPRI, r3
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	60fb      	str	r3, [r7, #12]
 80093a8:	bf00      	nop
 80093aa:	bf00      	nop
 80093ac:	e7fd      	b.n	80093aa <prvDeleteTCB+0x5e>
 80093ae:	bf00      	nop
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
	...

080093b8 <prvResetNextTaskUnblockTime>:
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	4b0c      	ldr	r3, [pc, #48]	@ (80093f0 <prvResetNextTaskUnblockTime+0x38>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d104      	bne.n	80093d2 <prvResetNextTaskUnblockTime+0x1a>
 80093c8:	4b0a      	ldr	r3, [pc, #40]	@ (80093f4 <prvResetNextTaskUnblockTime+0x3c>)
 80093ca:	f04f 32ff 	mov.w	r2, #4294967295
 80093ce:	601a      	str	r2, [r3, #0]
 80093d0:	e008      	b.n	80093e4 <prvResetNextTaskUnblockTime+0x2c>
 80093d2:	4b07      	ldr	r3, [pc, #28]	@ (80093f0 <prvResetNextTaskUnblockTime+0x38>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	607b      	str	r3, [r7, #4]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	4a04      	ldr	r2, [pc, #16]	@ (80093f4 <prvResetNextTaskUnblockTime+0x3c>)
 80093e2:	6013      	str	r3, [r2, #0]
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	200015a8 	.word	0x200015a8
 80093f4:	20001610 	.word	0x20001610

080093f8 <xTaskGetSchedulerState>:
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	4b0b      	ldr	r3, [pc, #44]	@ (800942c <xTaskGetSchedulerState+0x34>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d102      	bne.n	800940c <xTaskGetSchedulerState+0x14>
 8009406:	2301      	movs	r3, #1
 8009408:	607b      	str	r3, [r7, #4]
 800940a:	e008      	b.n	800941e <xTaskGetSchedulerState+0x26>
 800940c:	4b08      	ldr	r3, [pc, #32]	@ (8009430 <xTaskGetSchedulerState+0x38>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d102      	bne.n	800941a <xTaskGetSchedulerState+0x22>
 8009414:	2302      	movs	r3, #2
 8009416:	607b      	str	r3, [r7, #4]
 8009418:	e001      	b.n	800941e <xTaskGetSchedulerState+0x26>
 800941a:	2300      	movs	r3, #0
 800941c:	607b      	str	r3, [r7, #4]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4618      	mov	r0, r3
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	200015fc 	.word	0x200015fc
 8009430:	20001618 	.word	0x20001618

08009434 <xTaskPriorityDisinherit>:
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	613b      	str	r3, [r7, #16]
 8009440:	2300      	movs	r3, #0
 8009442:	617b      	str	r3, [r7, #20]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d058      	beq.n	80094fc <xTaskPriorityDisinherit+0xc8>
 800944a:	4b2f      	ldr	r3, [pc, #188]	@ (8009508 <xTaskPriorityDisinherit+0xd4>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	693a      	ldr	r2, [r7, #16]
 8009450:	429a      	cmp	r2, r3
 8009452:	d00b      	beq.n	800946c <xTaskPriorityDisinherit+0x38>
 8009454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	60fb      	str	r3, [r7, #12]
 8009466:	bf00      	nop
 8009468:	bf00      	nop
 800946a:	e7fd      	b.n	8009468 <xTaskPriorityDisinherit+0x34>
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10b      	bne.n	800948c <xTaskPriorityDisinherit+0x58>
 8009474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009478:	f383 8811 	msr	BASEPRI, r3
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	f3bf 8f4f 	dsb	sy
 8009484:	60bb      	str	r3, [r7, #8]
 8009486:	bf00      	nop
 8009488:	bf00      	nop
 800948a:	e7fd      	b.n	8009488 <xTaskPriorityDisinherit+0x54>
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009490:	1e5a      	subs	r2, r3, #1
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	651a      	str	r2, [r3, #80]	@ 0x50
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800949e:	429a      	cmp	r2, r3
 80094a0:	d02c      	beq.n	80094fc <xTaskPriorityDisinherit+0xc8>
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d128      	bne.n	80094fc <xTaskPriorityDisinherit+0xc8>
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	3304      	adds	r3, #4
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7fe fc26 	bl	8007d00 <uxListRemove>
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	619a      	str	r2, [r3, #24]
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094cc:	4b0f      	ldr	r3, [pc, #60]	@ (800950c <xTaskPriorityDisinherit+0xd8>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d903      	bls.n	80094dc <xTaskPriorityDisinherit+0xa8>
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d8:	4a0c      	ldr	r2, [pc, #48]	@ (800950c <xTaskPriorityDisinherit+0xd8>)
 80094da:	6013      	str	r3, [r2, #0]
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094e0:	4613      	mov	r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	4413      	add	r3, r2
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4a09      	ldr	r2, [pc, #36]	@ (8009510 <xTaskPriorityDisinherit+0xdc>)
 80094ea:	441a      	add	r2, r3
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	3304      	adds	r3, #4
 80094f0:	4619      	mov	r1, r3
 80094f2:	4610      	mov	r0, r2
 80094f4:	f7fe fba7 	bl	8007c46 <vListInsertEnd>
 80094f8:	2301      	movs	r3, #1
 80094fa:	617b      	str	r3, [r7, #20]
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	4618      	mov	r0, r3
 8009500:	3718      	adds	r7, #24
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	2000111c 	.word	0x2000111c
 800950c:	200015f8 	.word	0x200015f8
 8009510:	20001120 	.word	0x20001120

08009514 <prvAddCurrentTaskToDelayedList>:
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
 800951e:	4b21      	ldr	r3, [pc, #132]	@ (80095a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	60fb      	str	r3, [r7, #12]
 8009524:	4b20      	ldr	r3, [pc, #128]	@ (80095a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	3304      	adds	r3, #4
 800952a:	4618      	mov	r0, r3
 800952c:	f7fe fbe8 	bl	8007d00 <uxListRemove>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009536:	d10a      	bne.n	800954e <prvAddCurrentTaskToDelayedList+0x3a>
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d007      	beq.n	800954e <prvAddCurrentTaskToDelayedList+0x3a>
 800953e:	4b1a      	ldr	r3, [pc, #104]	@ (80095a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	3304      	adds	r3, #4
 8009544:	4619      	mov	r1, r3
 8009546:	4819      	ldr	r0, [pc, #100]	@ (80095ac <prvAddCurrentTaskToDelayedList+0x98>)
 8009548:	f7fe fb7d 	bl	8007c46 <vListInsertEnd>
 800954c:	e026      	b.n	800959c <prvAddCurrentTaskToDelayedList+0x88>
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4413      	add	r3, r2
 8009554:	60bb      	str	r3, [r7, #8]
 8009556:	4b14      	ldr	r3, [pc, #80]	@ (80095a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	605a      	str	r2, [r3, #4]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	429a      	cmp	r2, r3
 8009564:	d209      	bcs.n	800957a <prvAddCurrentTaskToDelayedList+0x66>
 8009566:	4b12      	ldr	r3, [pc, #72]	@ (80095b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	4b0f      	ldr	r3, [pc, #60]	@ (80095a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	3304      	adds	r3, #4
 8009570:	4619      	mov	r1, r3
 8009572:	4610      	mov	r0, r2
 8009574:	f7fe fb8b 	bl	8007c8e <vListInsert>
 8009578:	e010      	b.n	800959c <prvAddCurrentTaskToDelayedList+0x88>
 800957a:	4b0e      	ldr	r3, [pc, #56]	@ (80095b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	4b0a      	ldr	r3, [pc, #40]	@ (80095a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	3304      	adds	r3, #4
 8009584:	4619      	mov	r1, r3
 8009586:	4610      	mov	r0, r2
 8009588:	f7fe fb81 	bl	8007c8e <vListInsert>
 800958c:	4b0a      	ldr	r3, [pc, #40]	@ (80095b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	429a      	cmp	r2, r3
 8009594:	d202      	bcs.n	800959c <prvAddCurrentTaskToDelayedList+0x88>
 8009596:	4a08      	ldr	r2, [pc, #32]	@ (80095b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	6013      	str	r3, [r2, #0]
 800959c:	bf00      	nop
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	200015f4 	.word	0x200015f4
 80095a8:	2000111c 	.word	0x2000111c
 80095ac:	200015dc 	.word	0x200015dc
 80095b0:	200015ac 	.word	0x200015ac
 80095b4:	200015a8 	.word	0x200015a8
 80095b8:	20001610 	.word	0x20001610

080095bc <xTimerCreateTimerTask>:
 80095bc:	b580      	push	{r7, lr}
 80095be:	b08a      	sub	sp, #40	@ 0x28
 80095c0:	af04      	add	r7, sp, #16
 80095c2:	2300      	movs	r3, #0
 80095c4:	617b      	str	r3, [r7, #20]
 80095c6:	f000 fb13 	bl	8009bf0 <prvCheckForValidListAndQueue>
 80095ca:	4b1d      	ldr	r3, [pc, #116]	@ (8009640 <xTimerCreateTimerTask+0x84>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d021      	beq.n	8009616 <xTimerCreateTimerTask+0x5a>
 80095d2:	2300      	movs	r3, #0
 80095d4:	60fb      	str	r3, [r7, #12]
 80095d6:	2300      	movs	r3, #0
 80095d8:	60bb      	str	r3, [r7, #8]
 80095da:	1d3a      	adds	r2, r7, #4
 80095dc:	f107 0108 	add.w	r1, r7, #8
 80095e0:	f107 030c 	add.w	r3, r7, #12
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fe fae7 	bl	8007bb8 <vApplicationGetTimerTaskMemory>
 80095ea:	6879      	ldr	r1, [r7, #4]
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	9202      	str	r2, [sp, #8]
 80095f2:	9301      	str	r3, [sp, #4]
 80095f4:	2302      	movs	r3, #2
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	2300      	movs	r3, #0
 80095fa:	460a      	mov	r2, r1
 80095fc:	4911      	ldr	r1, [pc, #68]	@ (8009644 <xTimerCreateTimerTask+0x88>)
 80095fe:	4812      	ldr	r0, [pc, #72]	@ (8009648 <xTimerCreateTimerTask+0x8c>)
 8009600:	f7ff f8a2 	bl	8008748 <xTaskCreateStatic>
 8009604:	4603      	mov	r3, r0
 8009606:	4a11      	ldr	r2, [pc, #68]	@ (800964c <xTimerCreateTimerTask+0x90>)
 8009608:	6013      	str	r3, [r2, #0]
 800960a:	4b10      	ldr	r3, [pc, #64]	@ (800964c <xTimerCreateTimerTask+0x90>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <xTimerCreateTimerTask+0x5a>
 8009612:	2301      	movs	r3, #1
 8009614:	617b      	str	r3, [r7, #20]
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10b      	bne.n	8009634 <xTimerCreateTimerTask+0x78>
 800961c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	613b      	str	r3, [r7, #16]
 800962e:	bf00      	nop
 8009630:	bf00      	nop
 8009632:	e7fd      	b.n	8009630 <xTimerCreateTimerTask+0x74>
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	4618      	mov	r0, r3
 8009638:	3718      	adds	r7, #24
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	2000164c 	.word	0x2000164c
 8009644:	0800d8e0 	.word	0x0800d8e0
 8009648:	08009789 	.word	0x08009789
 800964c:	20001650 	.word	0x20001650

08009650 <xTimerGenericCommand>:
 8009650:	b580      	push	{r7, lr}
 8009652:	b08a      	sub	sp, #40	@ 0x28
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
 800965c:	603b      	str	r3, [r7, #0]
 800965e:	2300      	movs	r3, #0
 8009660:	627b      	str	r3, [r7, #36]	@ 0x24
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10b      	bne.n	8009680 <xTimerGenericCommand+0x30>
 8009668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	623b      	str	r3, [r7, #32]
 800967a:	bf00      	nop
 800967c:	bf00      	nop
 800967e:	e7fd      	b.n	800967c <xTimerGenericCommand+0x2c>
 8009680:	4b19      	ldr	r3, [pc, #100]	@ (80096e8 <xTimerGenericCommand+0x98>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d02a      	beq.n	80096de <xTimerGenericCommand+0x8e>
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	613b      	str	r3, [r7, #16]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	617b      	str	r3, [r7, #20]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	61bb      	str	r3, [r7, #24]
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	2b05      	cmp	r3, #5
 8009698:	dc18      	bgt.n	80096cc <xTimerGenericCommand+0x7c>
 800969a:	f7ff fead 	bl	80093f8 <xTaskGetSchedulerState>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	d109      	bne.n	80096b8 <xTimerGenericCommand+0x68>
 80096a4:	4b10      	ldr	r3, [pc, #64]	@ (80096e8 <xTimerGenericCommand+0x98>)
 80096a6:	6818      	ldr	r0, [r3, #0]
 80096a8:	f107 0110 	add.w	r1, r7, #16
 80096ac:	2300      	movs	r3, #0
 80096ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096b0:	f7fe fc5a 	bl	8007f68 <xQueueGenericSend>
 80096b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80096b6:	e012      	b.n	80096de <xTimerGenericCommand+0x8e>
 80096b8:	4b0b      	ldr	r3, [pc, #44]	@ (80096e8 <xTimerGenericCommand+0x98>)
 80096ba:	6818      	ldr	r0, [r3, #0]
 80096bc:	f107 0110 	add.w	r1, r7, #16
 80096c0:	2300      	movs	r3, #0
 80096c2:	2200      	movs	r2, #0
 80096c4:	f7fe fc50 	bl	8007f68 <xQueueGenericSend>
 80096c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80096ca:	e008      	b.n	80096de <xTimerGenericCommand+0x8e>
 80096cc:	4b06      	ldr	r3, [pc, #24]	@ (80096e8 <xTimerGenericCommand+0x98>)
 80096ce:	6818      	ldr	r0, [r3, #0]
 80096d0:	f107 0110 	add.w	r1, r7, #16
 80096d4:	2300      	movs	r3, #0
 80096d6:	683a      	ldr	r2, [r7, #0]
 80096d8:	f7fe fd48 	bl	800816c <xQueueGenericSendFromISR>
 80096dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80096de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e0:	4618      	mov	r0, r3
 80096e2:	3728      	adds	r7, #40	@ 0x28
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	2000164c 	.word	0x2000164c

080096ec <prvProcessExpiredTimer>:
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b088      	sub	sp, #32
 80096f0:	af02      	add	r7, sp, #8
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
 80096f6:	4b23      	ldr	r3, [pc, #140]	@ (8009784 <prvProcessExpiredTimer+0x98>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	617b      	str	r3, [r7, #20]
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	3304      	adds	r3, #4
 8009704:	4618      	mov	r0, r3
 8009706:	f7fe fafb 	bl	8007d00 <uxListRemove>
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009710:	f003 0304 	and.w	r3, r3, #4
 8009714:	2b00      	cmp	r3, #0
 8009716:	d023      	beq.n	8009760 <prvProcessExpiredTimer+0x74>
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	699a      	ldr	r2, [r3, #24]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	18d1      	adds	r1, r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	6978      	ldr	r0, [r7, #20]
 8009726:	f000 f8d5 	bl	80098d4 <prvInsertTimerInActiveList>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d020      	beq.n	8009772 <prvProcessExpiredTimer+0x86>
 8009730:	2300      	movs	r3, #0
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	2300      	movs	r3, #0
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	2100      	movs	r1, #0
 800973a:	6978      	ldr	r0, [r7, #20]
 800973c:	f7ff ff88 	bl	8009650 <xTimerGenericCommand>
 8009740:	6138      	str	r0, [r7, #16]
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d114      	bne.n	8009772 <prvProcessExpiredTimer+0x86>
 8009748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800974c:	f383 8811 	msr	BASEPRI, r3
 8009750:	f3bf 8f6f 	isb	sy
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	60fb      	str	r3, [r7, #12]
 800975a:	bf00      	nop
 800975c:	bf00      	nop
 800975e:	e7fd      	b.n	800975c <prvProcessExpiredTimer+0x70>
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009766:	f023 0301 	bic.w	r3, r3, #1
 800976a:	b2da      	uxtb	r2, r3
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	6978      	ldr	r0, [r7, #20]
 8009778:	4798      	blx	r3
 800977a:	bf00      	nop
 800977c:	3718      	adds	r7, #24
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	20001644 	.word	0x20001644

08009788 <prvTimerTask>:
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	f107 0308 	add.w	r3, r7, #8
 8009794:	4618      	mov	r0, r3
 8009796:	f000 f859 	bl	800984c <prvGetNextExpireTime>
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	4619      	mov	r1, r3
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f000 f805 	bl	80097b0 <prvProcessTimerOrBlockTask>
 80097a6:	f000 f8d7 	bl	8009958 <prvProcessReceivedCommands>
 80097aa:	bf00      	nop
 80097ac:	e7f0      	b.n	8009790 <prvTimerTask+0x8>
	...

080097b0 <prvProcessTimerOrBlockTask>:
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
 80097ba:	f7ff fa29 	bl	8008c10 <vTaskSuspendAll>
 80097be:	f107 0308 	add.w	r3, r7, #8
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 f866 	bl	8009894 <prvSampleTimeNow>
 80097c8:	60f8      	str	r0, [r7, #12]
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d130      	bne.n	8009832 <prvProcessTimerOrBlockTask+0x82>
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10a      	bne.n	80097ec <prvProcessTimerOrBlockTask+0x3c>
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d806      	bhi.n	80097ec <prvProcessTimerOrBlockTask+0x3c>
 80097de:	f7ff fa25 	bl	8008c2c <xTaskResumeAll>
 80097e2:	68f9      	ldr	r1, [r7, #12]
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f7ff ff81 	bl	80096ec <prvProcessExpiredTimer>
 80097ea:	e024      	b.n	8009836 <prvProcessTimerOrBlockTask+0x86>
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d008      	beq.n	8009804 <prvProcessTimerOrBlockTask+0x54>
 80097f2:	4b13      	ldr	r3, [pc, #76]	@ (8009840 <prvProcessTimerOrBlockTask+0x90>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d101      	bne.n	8009800 <prvProcessTimerOrBlockTask+0x50>
 80097fc:	2301      	movs	r3, #1
 80097fe:	e000      	b.n	8009802 <prvProcessTimerOrBlockTask+0x52>
 8009800:	2300      	movs	r3, #0
 8009802:	603b      	str	r3, [r7, #0]
 8009804:	4b0f      	ldr	r3, [pc, #60]	@ (8009844 <prvProcessTimerOrBlockTask+0x94>)
 8009806:	6818      	ldr	r0, [r3, #0]
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	4619      	mov	r1, r3
 8009812:	f7fe ff65 	bl	80086e0 <vQueueWaitForMessageRestricted>
 8009816:	f7ff fa09 	bl	8008c2c <xTaskResumeAll>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10a      	bne.n	8009836 <prvProcessTimerOrBlockTask+0x86>
 8009820:	4b09      	ldr	r3, [pc, #36]	@ (8009848 <prvProcessTimerOrBlockTask+0x98>)
 8009822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	f3bf 8f4f 	dsb	sy
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	e001      	b.n	8009836 <prvProcessTimerOrBlockTask+0x86>
 8009832:	f7ff f9fb 	bl	8008c2c <xTaskResumeAll>
 8009836:	bf00      	nop
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	20001648 	.word	0x20001648
 8009844:	2000164c 	.word	0x2000164c
 8009848:	e000ed04 	.word	0xe000ed04

0800984c <prvGetNextExpireTime>:
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	4b0e      	ldr	r3, [pc, #56]	@ (8009890 <prvGetNextExpireTime+0x44>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d101      	bne.n	8009862 <prvGetNextExpireTime+0x16>
 800985e:	2201      	movs	r2, #1
 8009860:	e000      	b.n	8009864 <prvGetNextExpireTime+0x18>
 8009862:	2200      	movs	r2, #0
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	601a      	str	r2, [r3, #0]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d105      	bne.n	800987c <prvGetNextExpireTime+0x30>
 8009870:	4b07      	ldr	r3, [pc, #28]	@ (8009890 <prvGetNextExpireTime+0x44>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	60fb      	str	r3, [r7, #12]
 800987a:	e001      	b.n	8009880 <prvGetNextExpireTime+0x34>
 800987c:	2300      	movs	r3, #0
 800987e:	60fb      	str	r3, [r7, #12]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	4618      	mov	r0, r3
 8009884:	3714      	adds	r7, #20
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	20001644 	.word	0x20001644

08009894 <prvSampleTimeNow>:
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	f7ff fa64 	bl	8008d68 <xTaskGetTickCount>
 80098a0:	60f8      	str	r0, [r7, #12]
 80098a2:	4b0b      	ldr	r3, [pc, #44]	@ (80098d0 <prvSampleTimeNow+0x3c>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d205      	bcs.n	80098b8 <prvSampleTimeNow+0x24>
 80098ac:	f000 f93a 	bl	8009b24 <prvSwitchTimerLists>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	601a      	str	r2, [r3, #0]
 80098b6:	e002      	b.n	80098be <prvSampleTimeNow+0x2a>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	601a      	str	r2, [r3, #0]
 80098be:	4a04      	ldr	r2, [pc, #16]	@ (80098d0 <prvSampleTimeNow+0x3c>)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6013      	str	r3, [r2, #0]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	20001654 	.word	0x20001654

080098d4 <prvInsertTimerInActiveList>:
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
 80098e0:	603b      	str	r3, [r7, #0]
 80098e2:	2300      	movs	r3, #0
 80098e4:	617b      	str	r3, [r7, #20]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	68ba      	ldr	r2, [r7, #8]
 80098ea:	605a      	str	r2, [r3, #4]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	611a      	str	r2, [r3, #16]
 80098f2:	68ba      	ldr	r2, [r7, #8]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d812      	bhi.n	8009920 <prvInsertTimerInActiveList+0x4c>
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	1ad2      	subs	r2, r2, r3
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	429a      	cmp	r2, r3
 8009906:	d302      	bcc.n	800990e <prvInsertTimerInActiveList+0x3a>
 8009908:	2301      	movs	r3, #1
 800990a:	617b      	str	r3, [r7, #20]
 800990c:	e01b      	b.n	8009946 <prvInsertTimerInActiveList+0x72>
 800990e:	4b10      	ldr	r3, [pc, #64]	@ (8009950 <prvInsertTimerInActiveList+0x7c>)
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	3304      	adds	r3, #4
 8009916:	4619      	mov	r1, r3
 8009918:	4610      	mov	r0, r2
 800991a:	f7fe f9b8 	bl	8007c8e <vListInsert>
 800991e:	e012      	b.n	8009946 <prvInsertTimerInActiveList+0x72>
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	429a      	cmp	r2, r3
 8009926:	d206      	bcs.n	8009936 <prvInsertTimerInActiveList+0x62>
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	429a      	cmp	r2, r3
 800992e:	d302      	bcc.n	8009936 <prvInsertTimerInActiveList+0x62>
 8009930:	2301      	movs	r3, #1
 8009932:	617b      	str	r3, [r7, #20]
 8009934:	e007      	b.n	8009946 <prvInsertTimerInActiveList+0x72>
 8009936:	4b07      	ldr	r3, [pc, #28]	@ (8009954 <prvInsertTimerInActiveList+0x80>)
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	3304      	adds	r3, #4
 800993e:	4619      	mov	r1, r3
 8009940:	4610      	mov	r0, r2
 8009942:	f7fe f9a4 	bl	8007c8e <vListInsert>
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	4618      	mov	r0, r3
 800994a:	3718      	adds	r7, #24
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	20001648 	.word	0x20001648
 8009954:	20001644 	.word	0x20001644

08009958 <prvProcessReceivedCommands>:
 8009958:	b580      	push	{r7, lr}
 800995a:	b08e      	sub	sp, #56	@ 0x38
 800995c:	af02      	add	r7, sp, #8
 800995e:	e0ce      	b.n	8009afe <prvProcessReceivedCommands+0x1a6>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	da19      	bge.n	800999a <prvProcessReceivedCommands+0x42>
 8009966:	1d3b      	adds	r3, r7, #4
 8009968:	3304      	adds	r3, #4
 800996a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800996c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800996e:	2b00      	cmp	r3, #0
 8009970:	d10b      	bne.n	800998a <prvProcessReceivedCommands+0x32>
 8009972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009976:	f383 8811 	msr	BASEPRI, r3
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	61fb      	str	r3, [r7, #28]
 8009984:	bf00      	nop
 8009986:	bf00      	nop
 8009988:	e7fd      	b.n	8009986 <prvProcessReceivedCommands+0x2e>
 800998a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009990:	6850      	ldr	r0, [r2, #4]
 8009992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009994:	6892      	ldr	r2, [r2, #8]
 8009996:	4611      	mov	r1, r2
 8009998:	4798      	blx	r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	f2c0 80ae 	blt.w	8009afe <prvProcessReceivedCommands+0x1a6>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80099a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d004      	beq.n	80099b8 <prvProcessReceivedCommands+0x60>
 80099ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b0:	3304      	adds	r3, #4
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7fe f9a4 	bl	8007d00 <uxListRemove>
 80099b8:	463b      	mov	r3, r7
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7ff ff6a 	bl	8009894 <prvSampleTimeNow>
 80099c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b09      	cmp	r3, #9
 80099c6:	f200 8097 	bhi.w	8009af8 <prvProcessReceivedCommands+0x1a0>
 80099ca:	a201      	add	r2, pc, #4	@ (adr r2, 80099d0 <prvProcessReceivedCommands+0x78>)
 80099cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d0:	080099f9 	.word	0x080099f9
 80099d4:	080099f9 	.word	0x080099f9
 80099d8:	080099f9 	.word	0x080099f9
 80099dc:	08009a6f 	.word	0x08009a6f
 80099e0:	08009a83 	.word	0x08009a83
 80099e4:	08009acf 	.word	0x08009acf
 80099e8:	080099f9 	.word	0x080099f9
 80099ec:	080099f9 	.word	0x080099f9
 80099f0:	08009a6f 	.word	0x08009a6f
 80099f4:	08009a83 	.word	0x08009a83
 80099f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099fe:	f043 0301 	orr.w	r3, r3, #1
 8009a02:	b2da      	uxtb	r2, r3
 8009a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	18d1      	adds	r1, r2, r3
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a18:	f7ff ff5c 	bl	80098d4 <prvInsertTimerInActiveList>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d06c      	beq.n	8009afc <prvProcessReceivedCommands+0x1a4>
 8009a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a28:	4798      	blx	r3
 8009a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a30:	f003 0304 	and.w	r3, r3, #4
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d061      	beq.n	8009afc <prvProcessReceivedCommands+0x1a4>
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	441a      	add	r2, r3
 8009a40:	2300      	movs	r3, #0
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	2300      	movs	r3, #0
 8009a46:	2100      	movs	r1, #0
 8009a48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a4a:	f7ff fe01 	bl	8009650 <xTimerGenericCommand>
 8009a4e:	6238      	str	r0, [r7, #32]
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d152      	bne.n	8009afc <prvProcessReceivedCommands+0x1a4>
 8009a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a5a:	f383 8811 	msr	BASEPRI, r3
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f3bf 8f4f 	dsb	sy
 8009a66:	61bb      	str	r3, [r7, #24]
 8009a68:	bf00      	nop
 8009a6a:	bf00      	nop
 8009a6c:	e7fd      	b.n	8009a6a <prvProcessReceivedCommands+0x112>
 8009a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a74:	f023 0301 	bic.w	r3, r3, #1
 8009a78:	b2da      	uxtb	r2, r3
 8009a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8009a80:	e03d      	b.n	8009afe <prvProcessReceivedCommands+0x1a6>
 8009a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a88:	f043 0301 	orr.w	r3, r3, #1
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a98:	619a      	str	r2, [r3, #24]
 8009a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10b      	bne.n	8009aba <prvProcessReceivedCommands+0x162>
 8009aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa6:	f383 8811 	msr	BASEPRI, r3
 8009aaa:	f3bf 8f6f 	isb	sy
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	617b      	str	r3, [r7, #20]
 8009ab4:	bf00      	nop
 8009ab6:	bf00      	nop
 8009ab8:	e7fd      	b.n	8009ab6 <prvProcessReceivedCommands+0x15e>
 8009aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009abc:	699a      	ldr	r2, [r3, #24]
 8009abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac0:	18d1      	adds	r1, r2, r3
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ac6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ac8:	f7ff ff04 	bl	80098d4 <prvInsertTimerInActiveList>
 8009acc:	e017      	b.n	8009afe <prvProcessReceivedCommands+0x1a6>
 8009ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ad4:	f003 0302 	and.w	r3, r3, #2
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d103      	bne.n	8009ae4 <prvProcessReceivedCommands+0x18c>
 8009adc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ade:	f000 fbeb 	bl	800a2b8 <vPortFree>
 8009ae2:	e00c      	b.n	8009afe <prvProcessReceivedCommands+0x1a6>
 8009ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009aea:	f023 0301 	bic.w	r3, r3, #1
 8009aee:	b2da      	uxtb	r2, r3
 8009af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8009af6:	e002      	b.n	8009afe <prvProcessReceivedCommands+0x1a6>
 8009af8:	bf00      	nop
 8009afa:	e000      	b.n	8009afe <prvProcessReceivedCommands+0x1a6>
 8009afc:	bf00      	nop
 8009afe:	4b08      	ldr	r3, [pc, #32]	@ (8009b20 <prvProcessReceivedCommands+0x1c8>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	1d39      	adds	r1, r7, #4
 8009b04:	2200      	movs	r2, #0
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fe fbce 	bl	80082a8 <xQueueReceive>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f47f af26 	bne.w	8009960 <prvProcessReceivedCommands+0x8>
 8009b14:	bf00      	nop
 8009b16:	bf00      	nop
 8009b18:	3730      	adds	r7, #48	@ 0x30
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	2000164c 	.word	0x2000164c

08009b24 <prvSwitchTimerLists>:
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b088      	sub	sp, #32
 8009b28:	af02      	add	r7, sp, #8
 8009b2a:	e049      	b.n	8009bc0 <prvSwitchTimerLists+0x9c>
 8009b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8009be8 <prvSwitchTimerLists+0xc4>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	613b      	str	r3, [r7, #16]
 8009b36:	4b2c      	ldr	r3, [pc, #176]	@ (8009be8 <prvSwitchTimerLists+0xc4>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	60fb      	str	r3, [r7, #12]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	3304      	adds	r3, #4
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fe f8db 	bl	8007d00 <uxListRemove>
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	4798      	blx	r3
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b58:	f003 0304 	and.w	r3, r3, #4
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d02f      	beq.n	8009bc0 <prvSwitchTimerLists+0x9c>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	699b      	ldr	r3, [r3, #24]
 8009b64:	693a      	ldr	r2, [r7, #16]
 8009b66:	4413      	add	r3, r2
 8009b68:	60bb      	str	r3, [r7, #8]
 8009b6a:	68ba      	ldr	r2, [r7, #8]
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d90e      	bls.n	8009b90 <prvSwitchTimerLists+0x6c>
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	68ba      	ldr	r2, [r7, #8]
 8009b76:	605a      	str	r2, [r3, #4]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	611a      	str	r2, [r3, #16]
 8009b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8009be8 <prvSwitchTimerLists+0xc4>)
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3304      	adds	r3, #4
 8009b86:	4619      	mov	r1, r3
 8009b88:	4610      	mov	r0, r2
 8009b8a:	f7fe f880 	bl	8007c8e <vListInsert>
 8009b8e:	e017      	b.n	8009bc0 <prvSwitchTimerLists+0x9c>
 8009b90:	2300      	movs	r3, #0
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	2300      	movs	r3, #0
 8009b96:	693a      	ldr	r2, [r7, #16]
 8009b98:	2100      	movs	r1, #0
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f7ff fd58 	bl	8009650 <xTimerGenericCommand>
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d10b      	bne.n	8009bc0 <prvSwitchTimerLists+0x9c>
 8009ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bac:	f383 8811 	msr	BASEPRI, r3
 8009bb0:	f3bf 8f6f 	isb	sy
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	603b      	str	r3, [r7, #0]
 8009bba:	bf00      	nop
 8009bbc:	bf00      	nop
 8009bbe:	e7fd      	b.n	8009bbc <prvSwitchTimerLists+0x98>
 8009bc0:	4b09      	ldr	r3, [pc, #36]	@ (8009be8 <prvSwitchTimerLists+0xc4>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1b0      	bne.n	8009b2c <prvSwitchTimerLists+0x8>
 8009bca:	4b07      	ldr	r3, [pc, #28]	@ (8009be8 <prvSwitchTimerLists+0xc4>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	617b      	str	r3, [r7, #20]
 8009bd0:	4b06      	ldr	r3, [pc, #24]	@ (8009bec <prvSwitchTimerLists+0xc8>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a04      	ldr	r2, [pc, #16]	@ (8009be8 <prvSwitchTimerLists+0xc4>)
 8009bd6:	6013      	str	r3, [r2, #0]
 8009bd8:	4a04      	ldr	r2, [pc, #16]	@ (8009bec <prvSwitchTimerLists+0xc8>)
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	6013      	str	r3, [r2, #0]
 8009bde:	bf00      	nop
 8009be0:	3718      	adds	r7, #24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	20001644 	.word	0x20001644
 8009bec:	20001648 	.word	0x20001648

08009bf0 <prvCheckForValidListAndQueue>:
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af02      	add	r7, sp, #8
 8009bf6:	f000 f96f 	bl	8009ed8 <vPortEnterCritical>
 8009bfa:	4b15      	ldr	r3, [pc, #84]	@ (8009c50 <prvCheckForValidListAndQueue+0x60>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d120      	bne.n	8009c44 <prvCheckForValidListAndQueue+0x54>
 8009c02:	4814      	ldr	r0, [pc, #80]	@ (8009c54 <prvCheckForValidListAndQueue+0x64>)
 8009c04:	f7fd fff2 	bl	8007bec <vListInitialise>
 8009c08:	4813      	ldr	r0, [pc, #76]	@ (8009c58 <prvCheckForValidListAndQueue+0x68>)
 8009c0a:	f7fd ffef 	bl	8007bec <vListInitialise>
 8009c0e:	4b13      	ldr	r3, [pc, #76]	@ (8009c5c <prvCheckForValidListAndQueue+0x6c>)
 8009c10:	4a10      	ldr	r2, [pc, #64]	@ (8009c54 <prvCheckForValidListAndQueue+0x64>)
 8009c12:	601a      	str	r2, [r3, #0]
 8009c14:	4b12      	ldr	r3, [pc, #72]	@ (8009c60 <prvCheckForValidListAndQueue+0x70>)
 8009c16:	4a10      	ldr	r2, [pc, #64]	@ (8009c58 <prvCheckForValidListAndQueue+0x68>)
 8009c18:	601a      	str	r2, [r3, #0]
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	4b11      	ldr	r3, [pc, #68]	@ (8009c64 <prvCheckForValidListAndQueue+0x74>)
 8009c20:	4a11      	ldr	r2, [pc, #68]	@ (8009c68 <prvCheckForValidListAndQueue+0x78>)
 8009c22:	2110      	movs	r1, #16
 8009c24:	200a      	movs	r0, #10
 8009c26:	f7fe f8ff 	bl	8007e28 <xQueueGenericCreateStatic>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	4a08      	ldr	r2, [pc, #32]	@ (8009c50 <prvCheckForValidListAndQueue+0x60>)
 8009c2e:	6013      	str	r3, [r2, #0]
 8009c30:	4b07      	ldr	r3, [pc, #28]	@ (8009c50 <prvCheckForValidListAndQueue+0x60>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d005      	beq.n	8009c44 <prvCheckForValidListAndQueue+0x54>
 8009c38:	4b05      	ldr	r3, [pc, #20]	@ (8009c50 <prvCheckForValidListAndQueue+0x60>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	490b      	ldr	r1, [pc, #44]	@ (8009c6c <prvCheckForValidListAndQueue+0x7c>)
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7fe fd24 	bl	800868c <vQueueAddToRegistry>
 8009c44:	f000 f97a 	bl	8009f3c <vPortExitCritical>
 8009c48:	bf00      	nop
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	2000164c 	.word	0x2000164c
 8009c54:	2000161c 	.word	0x2000161c
 8009c58:	20001630 	.word	0x20001630
 8009c5c:	20001644 	.word	0x20001644
 8009c60:	20001648 	.word	0x20001648
 8009c64:	200016f8 	.word	0x200016f8
 8009c68:	20001658 	.word	0x20001658
 8009c6c:	0800d8e8 	.word	0x0800d8e8

08009c70 <pxPortInitialiseStack>:
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	3b04      	subs	r3, #4
 8009c80:	60fb      	str	r3, [r7, #12]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	3b04      	subs	r3, #4
 8009c8e:	60fb      	str	r3, [r7, #12]
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	f023 0201 	bic.w	r2, r3, #1
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	3b04      	subs	r3, #4
 8009c9e:	60fb      	str	r3, [r7, #12]
 8009ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8009cd4 <pxPortInitialiseStack+0x64>)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	3b14      	subs	r3, #20
 8009caa:	60fb      	str	r3, [r7, #12]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	601a      	str	r2, [r3, #0]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	3b04      	subs	r3, #4
 8009cb6:	60fb      	str	r3, [r7, #12]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f06f 0202 	mvn.w	r2, #2
 8009cbe:	601a      	str	r2, [r3, #0]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	3b20      	subs	r3, #32
 8009cc4:	60fb      	str	r3, [r7, #12]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3714      	adds	r7, #20
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr
 8009cd4:	08009cd9 	.word	0x08009cd9

08009cd8 <prvTaskExitError>:
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	2300      	movs	r3, #0
 8009ce0:	607b      	str	r3, [r7, #4]
 8009ce2:	4b13      	ldr	r3, [pc, #76]	@ (8009d30 <prvTaskExitError+0x58>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cea:	d00b      	beq.n	8009d04 <prvTaskExitError+0x2c>
 8009cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf0:	f383 8811 	msr	BASEPRI, r3
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	60fb      	str	r3, [r7, #12]
 8009cfe:	bf00      	nop
 8009d00:	bf00      	nop
 8009d02:	e7fd      	b.n	8009d00 <prvTaskExitError+0x28>
 8009d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d08:	f383 8811 	msr	BASEPRI, r3
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	60bb      	str	r3, [r7, #8]
 8009d16:	bf00      	nop
 8009d18:	bf00      	nop
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d0fc      	beq.n	8009d1a <prvTaskExitError+0x42>
 8009d20:	bf00      	nop
 8009d22:	bf00      	nop
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	2000000c 	.word	0x2000000c
	...

08009d40 <SVC_Handler>:
 8009d40:	4b07      	ldr	r3, [pc, #28]	@ (8009d60 <pxCurrentTCBConst2>)
 8009d42:	6819      	ldr	r1, [r3, #0]
 8009d44:	6808      	ldr	r0, [r1, #0]
 8009d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4a:	f380 8809 	msr	PSP, r0
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f04f 0000 	mov.w	r0, #0
 8009d56:	f380 8811 	msr	BASEPRI, r0
 8009d5a:	4770      	bx	lr
 8009d5c:	f3af 8000 	nop.w

08009d60 <pxCurrentTCBConst2>:
 8009d60:	2000111c 	.word	0x2000111c
 8009d64:	bf00      	nop
 8009d66:	bf00      	nop

08009d68 <prvPortStartFirstTask>:
 8009d68:	4808      	ldr	r0, [pc, #32]	@ (8009d8c <prvPortStartFirstTask+0x24>)
 8009d6a:	6800      	ldr	r0, [r0, #0]
 8009d6c:	6800      	ldr	r0, [r0, #0]
 8009d6e:	f380 8808 	msr	MSP, r0
 8009d72:	f04f 0000 	mov.w	r0, #0
 8009d76:	f380 8814 	msr	CONTROL, r0
 8009d7a:	b662      	cpsie	i
 8009d7c:	b661      	cpsie	f
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	df00      	svc	0
 8009d88:	bf00      	nop
 8009d8a:	bf00      	nop
 8009d8c:	e000ed08 	.word	0xe000ed08

08009d90 <xPortStartScheduler>:
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	4b47      	ldr	r3, [pc, #284]	@ (8009eb4 <xPortStartScheduler+0x124>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a47      	ldr	r2, [pc, #284]	@ (8009eb8 <xPortStartScheduler+0x128>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d10b      	bne.n	8009db8 <xPortStartScheduler+0x28>
 8009da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	613b      	str	r3, [r7, #16]
 8009db2:	bf00      	nop
 8009db4:	bf00      	nop
 8009db6:	e7fd      	b.n	8009db4 <xPortStartScheduler+0x24>
 8009db8:	4b3e      	ldr	r3, [pc, #248]	@ (8009eb4 <xPortStartScheduler+0x124>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a3f      	ldr	r2, [pc, #252]	@ (8009ebc <xPortStartScheduler+0x12c>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d10b      	bne.n	8009dda <xPortStartScheduler+0x4a>
 8009dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc6:	f383 8811 	msr	BASEPRI, r3
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	60fb      	str	r3, [r7, #12]
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop
 8009dd8:	e7fd      	b.n	8009dd6 <xPortStartScheduler+0x46>
 8009dda:	4b39      	ldr	r3, [pc, #228]	@ (8009ec0 <xPortStartScheduler+0x130>)
 8009ddc:	617b      	str	r3, [r7, #20]
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	607b      	str	r3, [r7, #4]
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	22ff      	movs	r2, #255	@ 0xff
 8009dea:	701a      	strb	r2, [r3, #0]
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	70fb      	strb	r3, [r7, #3]
 8009df4:	78fb      	ldrb	r3, [r7, #3]
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009dfc:	b2da      	uxtb	r2, r3
 8009dfe:	4b31      	ldr	r3, [pc, #196]	@ (8009ec4 <xPortStartScheduler+0x134>)
 8009e00:	701a      	strb	r2, [r3, #0]
 8009e02:	4b31      	ldr	r3, [pc, #196]	@ (8009ec8 <xPortStartScheduler+0x138>)
 8009e04:	2207      	movs	r2, #7
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	e009      	b.n	8009e1e <xPortStartScheduler+0x8e>
 8009e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8009ec8 <xPortStartScheduler+0x138>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	4a2d      	ldr	r2, [pc, #180]	@ (8009ec8 <xPortStartScheduler+0x138>)
 8009e12:	6013      	str	r3, [r2, #0]
 8009e14:	78fb      	ldrb	r3, [r7, #3]
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	005b      	lsls	r3, r3, #1
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	70fb      	strb	r3, [r7, #3]
 8009e1e:	78fb      	ldrb	r3, [r7, #3]
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e26:	2b80      	cmp	r3, #128	@ 0x80
 8009e28:	d0ef      	beq.n	8009e0a <xPortStartScheduler+0x7a>
 8009e2a:	4b27      	ldr	r3, [pc, #156]	@ (8009ec8 <xPortStartScheduler+0x138>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f1c3 0307 	rsb	r3, r3, #7
 8009e32:	2b04      	cmp	r3, #4
 8009e34:	d00b      	beq.n	8009e4e <xPortStartScheduler+0xbe>
 8009e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e3a:	f383 8811 	msr	BASEPRI, r3
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	60bb      	str	r3, [r7, #8]
 8009e48:	bf00      	nop
 8009e4a:	bf00      	nop
 8009e4c:	e7fd      	b.n	8009e4a <xPortStartScheduler+0xba>
 8009e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8009ec8 <xPortStartScheduler+0x138>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	021b      	lsls	r3, r3, #8
 8009e54:	4a1c      	ldr	r2, [pc, #112]	@ (8009ec8 <xPortStartScheduler+0x138>)
 8009e56:	6013      	str	r3, [r2, #0]
 8009e58:	4b1b      	ldr	r3, [pc, #108]	@ (8009ec8 <xPortStartScheduler+0x138>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009e60:	4a19      	ldr	r2, [pc, #100]	@ (8009ec8 <xPortStartScheduler+0x138>)
 8009e62:	6013      	str	r3, [r2, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	b2da      	uxtb	r2, r3
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	701a      	strb	r2, [r3, #0]
 8009e6c:	4b17      	ldr	r3, [pc, #92]	@ (8009ecc <xPortStartScheduler+0x13c>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a16      	ldr	r2, [pc, #88]	@ (8009ecc <xPortStartScheduler+0x13c>)
 8009e72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009e76:	6013      	str	r3, [r2, #0]
 8009e78:	4b14      	ldr	r3, [pc, #80]	@ (8009ecc <xPortStartScheduler+0x13c>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a13      	ldr	r2, [pc, #76]	@ (8009ecc <xPortStartScheduler+0x13c>)
 8009e7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009e82:	6013      	str	r3, [r2, #0]
 8009e84:	f000 f8da 	bl	800a03c <vPortSetupTimerInterrupt>
 8009e88:	4b11      	ldr	r3, [pc, #68]	@ (8009ed0 <xPortStartScheduler+0x140>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	601a      	str	r2, [r3, #0]
 8009e8e:	f000 f8f9 	bl	800a084 <vPortEnableVFP>
 8009e92:	4b10      	ldr	r3, [pc, #64]	@ (8009ed4 <xPortStartScheduler+0x144>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a0f      	ldr	r2, [pc, #60]	@ (8009ed4 <xPortStartScheduler+0x144>)
 8009e98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009e9c:	6013      	str	r3, [r2, #0]
 8009e9e:	f7ff ff63 	bl	8009d68 <prvPortStartFirstTask>
 8009ea2:	f7ff f82b 	bl	8008efc <vTaskSwitchContext>
 8009ea6:	f7ff ff17 	bl	8009cd8 <prvTaskExitError>
 8009eaa:	2300      	movs	r3, #0
 8009eac:	4618      	mov	r0, r3
 8009eae:	3718      	adds	r7, #24
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	e000ed00 	.word	0xe000ed00
 8009eb8:	410fc271 	.word	0x410fc271
 8009ebc:	410fc270 	.word	0x410fc270
 8009ec0:	e000e400 	.word	0xe000e400
 8009ec4:	20001748 	.word	0x20001748
 8009ec8:	2000174c 	.word	0x2000174c
 8009ecc:	e000ed20 	.word	0xe000ed20
 8009ed0:	2000000c 	.word	0x2000000c
 8009ed4:	e000ef34 	.word	0xe000ef34

08009ed8 <vPortEnterCritical>:
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee2:	f383 8811 	msr	BASEPRI, r3
 8009ee6:	f3bf 8f6f 	isb	sy
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	607b      	str	r3, [r7, #4]
 8009ef0:	bf00      	nop
 8009ef2:	4b10      	ldr	r3, [pc, #64]	@ (8009f34 <vPortEnterCritical+0x5c>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	4a0e      	ldr	r2, [pc, #56]	@ (8009f34 <vPortEnterCritical+0x5c>)
 8009efa:	6013      	str	r3, [r2, #0]
 8009efc:	4b0d      	ldr	r3, [pc, #52]	@ (8009f34 <vPortEnterCritical+0x5c>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d110      	bne.n	8009f26 <vPortEnterCritical+0x4e>
 8009f04:	4b0c      	ldr	r3, [pc, #48]	@ (8009f38 <vPortEnterCritical+0x60>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00b      	beq.n	8009f26 <vPortEnterCritical+0x4e>
 8009f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f12:	f383 8811 	msr	BASEPRI, r3
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	603b      	str	r3, [r7, #0]
 8009f20:	bf00      	nop
 8009f22:	bf00      	nop
 8009f24:	e7fd      	b.n	8009f22 <vPortEnterCritical+0x4a>
 8009f26:	bf00      	nop
 8009f28:	370c      	adds	r7, #12
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	2000000c 	.word	0x2000000c
 8009f38:	e000ed04 	.word	0xe000ed04

08009f3c <vPortExitCritical>:
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	4b12      	ldr	r3, [pc, #72]	@ (8009f8c <vPortExitCritical+0x50>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d10b      	bne.n	8009f62 <vPortExitCritical+0x26>
 8009f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f4e:	f383 8811 	msr	BASEPRI, r3
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	607b      	str	r3, [r7, #4]
 8009f5c:	bf00      	nop
 8009f5e:	bf00      	nop
 8009f60:	e7fd      	b.n	8009f5e <vPortExitCritical+0x22>
 8009f62:	4b0a      	ldr	r3, [pc, #40]	@ (8009f8c <vPortExitCritical+0x50>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	3b01      	subs	r3, #1
 8009f68:	4a08      	ldr	r2, [pc, #32]	@ (8009f8c <vPortExitCritical+0x50>)
 8009f6a:	6013      	str	r3, [r2, #0]
 8009f6c:	4b07      	ldr	r3, [pc, #28]	@ (8009f8c <vPortExitCritical+0x50>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d105      	bne.n	8009f80 <vPortExitCritical+0x44>
 8009f74:	2300      	movs	r3, #0
 8009f76:	603b      	str	r3, [r7, #0]
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	f383 8811 	msr	BASEPRI, r3
 8009f7e:	bf00      	nop
 8009f80:	bf00      	nop
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	2000000c 	.word	0x2000000c

08009f90 <PendSV_Handler>:
 8009f90:	f3ef 8009 	mrs	r0, PSP
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	4b15      	ldr	r3, [pc, #84]	@ (8009ff0 <pxCurrentTCBConst>)
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	f01e 0f10 	tst.w	lr, #16
 8009fa0:	bf08      	it	eq
 8009fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009faa:	6010      	str	r0, [r2, #0]
 8009fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009fb4:	f380 8811 	msr	BASEPRI, r0
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f7fe ff9c 	bl	8008efc <vTaskSwitchContext>
 8009fc4:	f04f 0000 	mov.w	r0, #0
 8009fc8:	f380 8811 	msr	BASEPRI, r0
 8009fcc:	bc09      	pop	{r0, r3}
 8009fce:	6819      	ldr	r1, [r3, #0]
 8009fd0:	6808      	ldr	r0, [r1, #0]
 8009fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd6:	f01e 0f10 	tst.w	lr, #16
 8009fda:	bf08      	it	eq
 8009fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009fe0:	f380 8809 	msr	PSP, r0
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	f3af 8000 	nop.w

08009ff0 <pxCurrentTCBConst>:
 8009ff0:	2000111c 	.word	0x2000111c
 8009ff4:	bf00      	nop
 8009ff6:	bf00      	nop

08009ff8 <xPortSysTickHandler>:
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	607b      	str	r3, [r7, #4]
 800a010:	bf00      	nop
 800a012:	f7fe feb9 	bl	8008d88 <xTaskIncrementTick>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d003      	beq.n	800a024 <xPortSysTickHandler+0x2c>
 800a01c:	4b06      	ldr	r3, [pc, #24]	@ (800a038 <xPortSysTickHandler+0x40>)
 800a01e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a022:	601a      	str	r2, [r3, #0]
 800a024:	2300      	movs	r3, #0
 800a026:	603b      	str	r3, [r7, #0]
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	f383 8811 	msr	BASEPRI, r3
 800a02e:	bf00      	nop
 800a030:	bf00      	nop
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	e000ed04 	.word	0xe000ed04

0800a03c <vPortSetupTimerInterrupt>:
 800a03c:	b480      	push	{r7}
 800a03e:	af00      	add	r7, sp, #0
 800a040:	4b0b      	ldr	r3, [pc, #44]	@ (800a070 <vPortSetupTimerInterrupt+0x34>)
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]
 800a046:	4b0b      	ldr	r3, [pc, #44]	@ (800a074 <vPortSetupTimerInterrupt+0x38>)
 800a048:	2200      	movs	r2, #0
 800a04a:	601a      	str	r2, [r3, #0]
 800a04c:	4b0a      	ldr	r3, [pc, #40]	@ (800a078 <vPortSetupTimerInterrupt+0x3c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a0a      	ldr	r2, [pc, #40]	@ (800a07c <vPortSetupTimerInterrupt+0x40>)
 800a052:	fba2 2303 	umull	r2, r3, r2, r3
 800a056:	099b      	lsrs	r3, r3, #6
 800a058:	4a09      	ldr	r2, [pc, #36]	@ (800a080 <vPortSetupTimerInterrupt+0x44>)
 800a05a:	3b01      	subs	r3, #1
 800a05c:	6013      	str	r3, [r2, #0]
 800a05e:	4b04      	ldr	r3, [pc, #16]	@ (800a070 <vPortSetupTimerInterrupt+0x34>)
 800a060:	2207      	movs	r2, #7
 800a062:	601a      	str	r2, [r3, #0]
 800a064:	bf00      	nop
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	e000e010 	.word	0xe000e010
 800a074:	e000e018 	.word	0xe000e018
 800a078:	20000000 	.word	0x20000000
 800a07c:	10624dd3 	.word	0x10624dd3
 800a080:	e000e014 	.word	0xe000e014

0800a084 <vPortEnableVFP>:
 800a084:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a094 <vPortEnableVFP+0x10>
 800a088:	6801      	ldr	r1, [r0, #0]
 800a08a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a08e:	6001      	str	r1, [r0, #0]
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	e000ed88 	.word	0xe000ed88

0800a098 <vPortValidateInterruptPriority>:
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	f3ef 8305 	mrs	r3, IPSR
 800a0a2:	60fb      	str	r3, [r7, #12]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2b0f      	cmp	r3, #15
 800a0a8:	d915      	bls.n	800a0d6 <vPortValidateInterruptPriority+0x3e>
 800a0aa:	4a18      	ldr	r2, [pc, #96]	@ (800a10c <vPortValidateInterruptPriority+0x74>)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	72fb      	strb	r3, [r7, #11]
 800a0b4:	4b16      	ldr	r3, [pc, #88]	@ (800a110 <vPortValidateInterruptPriority+0x78>)
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	7afa      	ldrb	r2, [r7, #11]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d20b      	bcs.n	800a0d6 <vPortValidateInterruptPriority+0x3e>
 800a0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c2:	f383 8811 	msr	BASEPRI, r3
 800a0c6:	f3bf 8f6f 	isb	sy
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	607b      	str	r3, [r7, #4]
 800a0d0:	bf00      	nop
 800a0d2:	bf00      	nop
 800a0d4:	e7fd      	b.n	800a0d2 <vPortValidateInterruptPriority+0x3a>
 800a0d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a114 <vPortValidateInterruptPriority+0x7c>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a0de:	4b0e      	ldr	r3, [pc, #56]	@ (800a118 <vPortValidateInterruptPriority+0x80>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d90b      	bls.n	800a0fe <vPortValidateInterruptPriority+0x66>
 800a0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ea:	f383 8811 	msr	BASEPRI, r3
 800a0ee:	f3bf 8f6f 	isb	sy
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	603b      	str	r3, [r7, #0]
 800a0f8:	bf00      	nop
 800a0fa:	bf00      	nop
 800a0fc:	e7fd      	b.n	800a0fa <vPortValidateInterruptPriority+0x62>
 800a0fe:	bf00      	nop
 800a100:	3714      	adds	r7, #20
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	e000e3f0 	.word	0xe000e3f0
 800a110:	20001748 	.word	0x20001748
 800a114:	e000ed0c 	.word	0xe000ed0c
 800a118:	2000174c 	.word	0x2000174c

0800a11c <pvPortMalloc>:
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b08a      	sub	sp, #40	@ 0x28
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	2300      	movs	r3, #0
 800a126:	61fb      	str	r3, [r7, #28]
 800a128:	f7fe fd72 	bl	8008c10 <vTaskSuspendAll>
 800a12c:	4b5c      	ldr	r3, [pc, #368]	@ (800a2a0 <pvPortMalloc+0x184>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d101      	bne.n	800a138 <pvPortMalloc+0x1c>
 800a134:	f000 f924 	bl	800a380 <prvHeapInit>
 800a138:	4b5a      	ldr	r3, [pc, #360]	@ (800a2a4 <pvPortMalloc+0x188>)
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4013      	ands	r3, r2
 800a140:	2b00      	cmp	r3, #0
 800a142:	f040 8095 	bne.w	800a270 <pvPortMalloc+0x154>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d01e      	beq.n	800a18a <pvPortMalloc+0x6e>
 800a14c:	2208      	movs	r2, #8
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4413      	add	r3, r2
 800a152:	607b      	str	r3, [r7, #4]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f003 0307 	and.w	r3, r3, #7
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d015      	beq.n	800a18a <pvPortMalloc+0x6e>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f023 0307 	bic.w	r3, r3, #7
 800a164:	3308      	adds	r3, #8
 800a166:	607b      	str	r3, [r7, #4]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f003 0307 	and.w	r3, r3, #7
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00b      	beq.n	800a18a <pvPortMalloc+0x6e>
 800a172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a176:	f383 8811 	msr	BASEPRI, r3
 800a17a:	f3bf 8f6f 	isb	sy
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	617b      	str	r3, [r7, #20]
 800a184:	bf00      	nop
 800a186:	bf00      	nop
 800a188:	e7fd      	b.n	800a186 <pvPortMalloc+0x6a>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d06f      	beq.n	800a270 <pvPortMalloc+0x154>
 800a190:	4b45      	ldr	r3, [pc, #276]	@ (800a2a8 <pvPortMalloc+0x18c>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	429a      	cmp	r2, r3
 800a198:	d86a      	bhi.n	800a270 <pvPortMalloc+0x154>
 800a19a:	4b44      	ldr	r3, [pc, #272]	@ (800a2ac <pvPortMalloc+0x190>)
 800a19c:	623b      	str	r3, [r7, #32]
 800a19e:	4b43      	ldr	r3, [pc, #268]	@ (800a2ac <pvPortMalloc+0x190>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1a4:	e004      	b.n	800a1b0 <pvPortMalloc+0x94>
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a8:	623b      	str	r3, [r7, #32]
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d903      	bls.n	800a1c2 <pvPortMalloc+0xa6>
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1f1      	bne.n	800a1a6 <pvPortMalloc+0x8a>
 800a1c2:	4b37      	ldr	r3, [pc, #220]	@ (800a2a0 <pvPortMalloc+0x184>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d051      	beq.n	800a270 <pvPortMalloc+0x154>
 800a1cc:	6a3b      	ldr	r3, [r7, #32]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2208      	movs	r2, #8
 800a1d2:	4413      	add	r3, r2
 800a1d4:	61fb      	str	r3, [r7, #28]
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	6a3b      	ldr	r3, [r7, #32]
 800a1dc:	601a      	str	r2, [r3, #0]
 800a1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e0:	685a      	ldr	r2, [r3, #4]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	1ad2      	subs	r2, r2, r3
 800a1e6:	2308      	movs	r3, #8
 800a1e8:	005b      	lsls	r3, r3, #1
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d920      	bls.n	800a230 <pvPortMalloc+0x114>
 800a1ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	61bb      	str	r3, [r7, #24]
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	f003 0307 	and.w	r3, r3, #7
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d00b      	beq.n	800a218 <pvPortMalloc+0xfc>
 800a200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a204:	f383 8811 	msr	BASEPRI, r3
 800a208:	f3bf 8f6f 	isb	sy
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	613b      	str	r3, [r7, #16]
 800a212:	bf00      	nop
 800a214:	bf00      	nop
 800a216:	e7fd      	b.n	800a214 <pvPortMalloc+0xf8>
 800a218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21a:	685a      	ldr	r2, [r3, #4]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	1ad2      	subs	r2, r2, r3
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	605a      	str	r2, [r3, #4]
 800a224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	605a      	str	r2, [r3, #4]
 800a22a:	69b8      	ldr	r0, [r7, #24]
 800a22c:	f000 f90a 	bl	800a444 <prvInsertBlockIntoFreeList>
 800a230:	4b1d      	ldr	r3, [pc, #116]	@ (800a2a8 <pvPortMalloc+0x18c>)
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	1ad3      	subs	r3, r2, r3
 800a23a:	4a1b      	ldr	r2, [pc, #108]	@ (800a2a8 <pvPortMalloc+0x18c>)
 800a23c:	6013      	str	r3, [r2, #0]
 800a23e:	4b1a      	ldr	r3, [pc, #104]	@ (800a2a8 <pvPortMalloc+0x18c>)
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	4b1b      	ldr	r3, [pc, #108]	@ (800a2b0 <pvPortMalloc+0x194>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	429a      	cmp	r2, r3
 800a248:	d203      	bcs.n	800a252 <pvPortMalloc+0x136>
 800a24a:	4b17      	ldr	r3, [pc, #92]	@ (800a2a8 <pvPortMalloc+0x18c>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a18      	ldr	r2, [pc, #96]	@ (800a2b0 <pvPortMalloc+0x194>)
 800a250:	6013      	str	r3, [r2, #0]
 800a252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a254:	685a      	ldr	r2, [r3, #4]
 800a256:	4b13      	ldr	r3, [pc, #76]	@ (800a2a4 <pvPortMalloc+0x188>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	431a      	orrs	r2, r3
 800a25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a25e:	605a      	str	r2, [r3, #4]
 800a260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a262:	2200      	movs	r2, #0
 800a264:	601a      	str	r2, [r3, #0]
 800a266:	4b13      	ldr	r3, [pc, #76]	@ (800a2b4 <pvPortMalloc+0x198>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3301      	adds	r3, #1
 800a26c:	4a11      	ldr	r2, [pc, #68]	@ (800a2b4 <pvPortMalloc+0x198>)
 800a26e:	6013      	str	r3, [r2, #0]
 800a270:	f7fe fcdc 	bl	8008c2c <xTaskResumeAll>
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	f003 0307 	and.w	r3, r3, #7
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00b      	beq.n	800a296 <pvPortMalloc+0x17a>
 800a27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	60fb      	str	r3, [r7, #12]
 800a290:	bf00      	nop
 800a292:	bf00      	nop
 800a294:	e7fd      	b.n	800a292 <pvPortMalloc+0x176>
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	4618      	mov	r0, r3
 800a29a:	3728      	adds	r7, #40	@ 0x28
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	20002310 	.word	0x20002310
 800a2a4:	20002324 	.word	0x20002324
 800a2a8:	20002314 	.word	0x20002314
 800a2ac:	20002308 	.word	0x20002308
 800a2b0:	20002318 	.word	0x20002318
 800a2b4:	2000231c 	.word	0x2000231c

0800a2b8 <vPortFree>:
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	617b      	str	r3, [r7, #20]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d04f      	beq.n	800a36a <vPortFree+0xb2>
 800a2ca:	2308      	movs	r3, #8
 800a2cc:	425b      	negs	r3, r3
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	617b      	str	r3, [r7, #20]
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	613b      	str	r3, [r7, #16]
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	4b25      	ldr	r3, [pc, #148]	@ (800a374 <vPortFree+0xbc>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d10b      	bne.n	800a2fe <vPortFree+0x46>
 800a2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ea:	f383 8811 	msr	BASEPRI, r3
 800a2ee:	f3bf 8f6f 	isb	sy
 800a2f2:	f3bf 8f4f 	dsb	sy
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	bf00      	nop
 800a2fa:	bf00      	nop
 800a2fc:	e7fd      	b.n	800a2fa <vPortFree+0x42>
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00b      	beq.n	800a31e <vPortFree+0x66>
 800a306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a30a:	f383 8811 	msr	BASEPRI, r3
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	60bb      	str	r3, [r7, #8]
 800a318:	bf00      	nop
 800a31a:	bf00      	nop
 800a31c:	e7fd      	b.n	800a31a <vPortFree+0x62>
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	4b14      	ldr	r3, [pc, #80]	@ (800a374 <vPortFree+0xbc>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4013      	ands	r3, r2
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d01e      	beq.n	800a36a <vPortFree+0xb2>
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d11a      	bne.n	800a36a <vPortFree+0xb2>
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	4b0e      	ldr	r3, [pc, #56]	@ (800a374 <vPortFree+0xbc>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	43db      	mvns	r3, r3
 800a33e:	401a      	ands	r2, r3
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	605a      	str	r2, [r3, #4]
 800a344:	f7fe fc64 	bl	8008c10 <vTaskSuspendAll>
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	685a      	ldr	r2, [r3, #4]
 800a34c:	4b0a      	ldr	r3, [pc, #40]	@ (800a378 <vPortFree+0xc0>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4413      	add	r3, r2
 800a352:	4a09      	ldr	r2, [pc, #36]	@ (800a378 <vPortFree+0xc0>)
 800a354:	6013      	str	r3, [r2, #0]
 800a356:	6938      	ldr	r0, [r7, #16]
 800a358:	f000 f874 	bl	800a444 <prvInsertBlockIntoFreeList>
 800a35c:	4b07      	ldr	r3, [pc, #28]	@ (800a37c <vPortFree+0xc4>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3301      	adds	r3, #1
 800a362:	4a06      	ldr	r2, [pc, #24]	@ (800a37c <vPortFree+0xc4>)
 800a364:	6013      	str	r3, [r2, #0]
 800a366:	f7fe fc61 	bl	8008c2c <xTaskResumeAll>
 800a36a:	bf00      	nop
 800a36c:	3718      	adds	r7, #24
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	20002324 	.word	0x20002324
 800a378:	20002314 	.word	0x20002314
 800a37c:	20002320 	.word	0x20002320

0800a380 <prvHeapInit>:
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a38a:	60bb      	str	r3, [r7, #8]
 800a38c:	4b27      	ldr	r3, [pc, #156]	@ (800a42c <prvHeapInit+0xac>)
 800a38e:	60fb      	str	r3, [r7, #12]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f003 0307 	and.w	r3, r3, #7
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00c      	beq.n	800a3b4 <prvHeapInit+0x34>
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	3307      	adds	r3, #7
 800a39e:	60fb      	str	r3, [r7, #12]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f023 0307 	bic.w	r3, r3, #7
 800a3a6:	60fb      	str	r3, [r7, #12]
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	4a1f      	ldr	r2, [pc, #124]	@ (800a42c <prvHeapInit+0xac>)
 800a3b0:	4413      	add	r3, r2
 800a3b2:	60bb      	str	r3, [r7, #8]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	607b      	str	r3, [r7, #4]
 800a3b8:	4a1d      	ldr	r2, [pc, #116]	@ (800a430 <prvHeapInit+0xb0>)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6013      	str	r3, [r2, #0]
 800a3be:	4b1c      	ldr	r3, [pc, #112]	@ (800a430 <prvHeapInit+0xb0>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	605a      	str	r2, [r3, #4]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	68ba      	ldr	r2, [r7, #8]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	60fb      	str	r3, [r7, #12]
 800a3cc:	2208      	movs	r2, #8
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	1a9b      	subs	r3, r3, r2
 800a3d2:	60fb      	str	r3, [r7, #12]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f023 0307 	bic.w	r3, r3, #7
 800a3da:	60fb      	str	r3, [r7, #12]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	4a15      	ldr	r2, [pc, #84]	@ (800a434 <prvHeapInit+0xb4>)
 800a3e0:	6013      	str	r3, [r2, #0]
 800a3e2:	4b14      	ldr	r3, [pc, #80]	@ (800a434 <prvHeapInit+0xb4>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	605a      	str	r2, [r3, #4]
 800a3ea:	4b12      	ldr	r3, [pc, #72]	@ (800a434 <prvHeapInit+0xb4>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	601a      	str	r2, [r3, #0]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	603b      	str	r3, [r7, #0]
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	1ad2      	subs	r2, r2, r3
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	605a      	str	r2, [r3, #4]
 800a400:	4b0c      	ldr	r3, [pc, #48]	@ (800a434 <prvHeapInit+0xb4>)
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	601a      	str	r2, [r3, #0]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	4a0a      	ldr	r2, [pc, #40]	@ (800a438 <prvHeapInit+0xb8>)
 800a40e:	6013      	str	r3, [r2, #0]
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	4a09      	ldr	r2, [pc, #36]	@ (800a43c <prvHeapInit+0xbc>)
 800a416:	6013      	str	r3, [r2, #0]
 800a418:	4b09      	ldr	r3, [pc, #36]	@ (800a440 <prvHeapInit+0xc0>)
 800a41a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a41e:	601a      	str	r2, [r3, #0]
 800a420:	bf00      	nop
 800a422:	3714      	adds	r7, #20
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr
 800a42c:	20001750 	.word	0x20001750
 800a430:	20002308 	.word	0x20002308
 800a434:	20002310 	.word	0x20002310
 800a438:	20002318 	.word	0x20002318
 800a43c:	20002314 	.word	0x20002314
 800a440:	20002324 	.word	0x20002324

0800a444 <prvInsertBlockIntoFreeList>:
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	4b28      	ldr	r3, [pc, #160]	@ (800a4f0 <prvInsertBlockIntoFreeList+0xac>)
 800a44e:	60fb      	str	r3, [r7, #12]
 800a450:	e002      	b.n	800a458 <prvInsertBlockIntoFreeList+0x14>
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	60fb      	str	r3, [r7, #12]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d8f7      	bhi.n	800a452 <prvInsertBlockIntoFreeList+0xe>
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	60bb      	str	r3, [r7, #8]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	4413      	add	r3, r2
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	429a      	cmp	r2, r3
 800a472:	d108      	bne.n	800a486 <prvInsertBlockIntoFreeList+0x42>
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	685a      	ldr	r2, [r3, #4]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	441a      	add	r2, r3
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	605a      	str	r2, [r3, #4]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	607b      	str	r3, [r7, #4]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	60bb      	str	r3, [r7, #8]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	441a      	add	r2, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	429a      	cmp	r2, r3
 800a498:	d118      	bne.n	800a4cc <prvInsertBlockIntoFreeList+0x88>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	4b15      	ldr	r3, [pc, #84]	@ (800a4f4 <prvInsertBlockIntoFreeList+0xb0>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d00d      	beq.n	800a4c2 <prvInsertBlockIntoFreeList+0x7e>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	685a      	ldr	r2, [r3, #4]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	441a      	add	r2, r3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	605a      	str	r2, [r3, #4]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	601a      	str	r2, [r3, #0]
 800a4c0:	e008      	b.n	800a4d4 <prvInsertBlockIntoFreeList+0x90>
 800a4c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a4f4 <prvInsertBlockIntoFreeList+0xb0>)
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	601a      	str	r2, [r3, #0]
 800a4ca:	e003      	b.n	800a4d4 <prvInsertBlockIntoFreeList+0x90>
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	601a      	str	r2, [r3, #0]
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d002      	beq.n	800a4e2 <prvInsertBlockIntoFreeList+0x9e>
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	601a      	str	r2, [r3, #0]
 800a4e2:	bf00      	nop
 800a4e4:	3714      	adds	r7, #20
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	20002308 	.word	0x20002308
 800a4f4:	20002310 	.word	0x20002310

0800a4f8 <__cvt>:
 800a4f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4fc:	ec57 6b10 	vmov	r6, r7, d0
 800a500:	2f00      	cmp	r7, #0
 800a502:	460c      	mov	r4, r1
 800a504:	4619      	mov	r1, r3
 800a506:	463b      	mov	r3, r7
 800a508:	bfbb      	ittet	lt
 800a50a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a50e:	461f      	movlt	r7, r3
 800a510:	2300      	movge	r3, #0
 800a512:	232d      	movlt	r3, #45	@ 0x2d
 800a514:	700b      	strb	r3, [r1, #0]
 800a516:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a518:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a51c:	4691      	mov	r9, r2
 800a51e:	f023 0820 	bic.w	r8, r3, #32
 800a522:	bfbc      	itt	lt
 800a524:	4632      	movlt	r2, r6
 800a526:	4616      	movlt	r6, r2
 800a528:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a52c:	d005      	beq.n	800a53a <__cvt+0x42>
 800a52e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a532:	d100      	bne.n	800a536 <__cvt+0x3e>
 800a534:	3401      	adds	r4, #1
 800a536:	2102      	movs	r1, #2
 800a538:	e000      	b.n	800a53c <__cvt+0x44>
 800a53a:	2103      	movs	r1, #3
 800a53c:	ab03      	add	r3, sp, #12
 800a53e:	9301      	str	r3, [sp, #4]
 800a540:	ab02      	add	r3, sp, #8
 800a542:	9300      	str	r3, [sp, #0]
 800a544:	ec47 6b10 	vmov	d0, r6, r7
 800a548:	4653      	mov	r3, sl
 800a54a:	4622      	mov	r2, r4
 800a54c:	f000 ffa4 	bl	800b498 <_dtoa_r>
 800a550:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a554:	4605      	mov	r5, r0
 800a556:	d119      	bne.n	800a58c <__cvt+0x94>
 800a558:	f019 0f01 	tst.w	r9, #1
 800a55c:	d00e      	beq.n	800a57c <__cvt+0x84>
 800a55e:	eb00 0904 	add.w	r9, r0, r4
 800a562:	2200      	movs	r2, #0
 800a564:	2300      	movs	r3, #0
 800a566:	4630      	mov	r0, r6
 800a568:	4639      	mov	r1, r7
 800a56a:	f7f6 faad 	bl	8000ac8 <__aeabi_dcmpeq>
 800a56e:	b108      	cbz	r0, 800a574 <__cvt+0x7c>
 800a570:	f8cd 900c 	str.w	r9, [sp, #12]
 800a574:	2230      	movs	r2, #48	@ 0x30
 800a576:	9b03      	ldr	r3, [sp, #12]
 800a578:	454b      	cmp	r3, r9
 800a57a:	d31e      	bcc.n	800a5ba <__cvt+0xc2>
 800a57c:	9b03      	ldr	r3, [sp, #12]
 800a57e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a580:	1b5b      	subs	r3, r3, r5
 800a582:	4628      	mov	r0, r5
 800a584:	6013      	str	r3, [r2, #0]
 800a586:	b004      	add	sp, #16
 800a588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a58c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a590:	eb00 0904 	add.w	r9, r0, r4
 800a594:	d1e5      	bne.n	800a562 <__cvt+0x6a>
 800a596:	7803      	ldrb	r3, [r0, #0]
 800a598:	2b30      	cmp	r3, #48	@ 0x30
 800a59a:	d10a      	bne.n	800a5b2 <__cvt+0xba>
 800a59c:	2200      	movs	r2, #0
 800a59e:	2300      	movs	r3, #0
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	4639      	mov	r1, r7
 800a5a4:	f7f6 fa90 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5a8:	b918      	cbnz	r0, 800a5b2 <__cvt+0xba>
 800a5aa:	f1c4 0401 	rsb	r4, r4, #1
 800a5ae:	f8ca 4000 	str.w	r4, [sl]
 800a5b2:	f8da 3000 	ldr.w	r3, [sl]
 800a5b6:	4499      	add	r9, r3
 800a5b8:	e7d3      	b.n	800a562 <__cvt+0x6a>
 800a5ba:	1c59      	adds	r1, r3, #1
 800a5bc:	9103      	str	r1, [sp, #12]
 800a5be:	701a      	strb	r2, [r3, #0]
 800a5c0:	e7d9      	b.n	800a576 <__cvt+0x7e>

0800a5c2 <__exponent>:
 800a5c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5c4:	2900      	cmp	r1, #0
 800a5c6:	bfba      	itte	lt
 800a5c8:	4249      	neglt	r1, r1
 800a5ca:	232d      	movlt	r3, #45	@ 0x2d
 800a5cc:	232b      	movge	r3, #43	@ 0x2b
 800a5ce:	2909      	cmp	r1, #9
 800a5d0:	7002      	strb	r2, [r0, #0]
 800a5d2:	7043      	strb	r3, [r0, #1]
 800a5d4:	dd29      	ble.n	800a62a <__exponent+0x68>
 800a5d6:	f10d 0307 	add.w	r3, sp, #7
 800a5da:	461d      	mov	r5, r3
 800a5dc:	270a      	movs	r7, #10
 800a5de:	461a      	mov	r2, r3
 800a5e0:	fbb1 f6f7 	udiv	r6, r1, r7
 800a5e4:	fb07 1416 	mls	r4, r7, r6, r1
 800a5e8:	3430      	adds	r4, #48	@ 0x30
 800a5ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a5ee:	460c      	mov	r4, r1
 800a5f0:	2c63      	cmp	r4, #99	@ 0x63
 800a5f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a5f6:	4631      	mov	r1, r6
 800a5f8:	dcf1      	bgt.n	800a5de <__exponent+0x1c>
 800a5fa:	3130      	adds	r1, #48	@ 0x30
 800a5fc:	1e94      	subs	r4, r2, #2
 800a5fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a602:	1c41      	adds	r1, r0, #1
 800a604:	4623      	mov	r3, r4
 800a606:	42ab      	cmp	r3, r5
 800a608:	d30a      	bcc.n	800a620 <__exponent+0x5e>
 800a60a:	f10d 0309 	add.w	r3, sp, #9
 800a60e:	1a9b      	subs	r3, r3, r2
 800a610:	42ac      	cmp	r4, r5
 800a612:	bf88      	it	hi
 800a614:	2300      	movhi	r3, #0
 800a616:	3302      	adds	r3, #2
 800a618:	4403      	add	r3, r0
 800a61a:	1a18      	subs	r0, r3, r0
 800a61c:	b003      	add	sp, #12
 800a61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a620:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a624:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a628:	e7ed      	b.n	800a606 <__exponent+0x44>
 800a62a:	2330      	movs	r3, #48	@ 0x30
 800a62c:	3130      	adds	r1, #48	@ 0x30
 800a62e:	7083      	strb	r3, [r0, #2]
 800a630:	70c1      	strb	r1, [r0, #3]
 800a632:	1d03      	adds	r3, r0, #4
 800a634:	e7f1      	b.n	800a61a <__exponent+0x58>
	...

0800a638 <_printf_float>:
 800a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	b08d      	sub	sp, #52	@ 0x34
 800a63e:	460c      	mov	r4, r1
 800a640:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a644:	4616      	mov	r6, r2
 800a646:	461f      	mov	r7, r3
 800a648:	4605      	mov	r5, r0
 800a64a:	f000 fdbf 	bl	800b1cc <_localeconv_r>
 800a64e:	6803      	ldr	r3, [r0, #0]
 800a650:	9304      	str	r3, [sp, #16]
 800a652:	4618      	mov	r0, r3
 800a654:	f7f5 fe0c 	bl	8000270 <strlen>
 800a658:	2300      	movs	r3, #0
 800a65a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a65c:	f8d8 3000 	ldr.w	r3, [r8]
 800a660:	9005      	str	r0, [sp, #20]
 800a662:	3307      	adds	r3, #7
 800a664:	f023 0307 	bic.w	r3, r3, #7
 800a668:	f103 0208 	add.w	r2, r3, #8
 800a66c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a670:	f8d4 b000 	ldr.w	fp, [r4]
 800a674:	f8c8 2000 	str.w	r2, [r8]
 800a678:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a67c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a680:	9307      	str	r3, [sp, #28]
 800a682:	f8cd 8018 	str.w	r8, [sp, #24]
 800a686:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a68a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a68e:	4b9c      	ldr	r3, [pc, #624]	@ (800a900 <_printf_float+0x2c8>)
 800a690:	f04f 32ff 	mov.w	r2, #4294967295
 800a694:	f7f6 fa4a 	bl	8000b2c <__aeabi_dcmpun>
 800a698:	bb70      	cbnz	r0, 800a6f8 <_printf_float+0xc0>
 800a69a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a69e:	4b98      	ldr	r3, [pc, #608]	@ (800a900 <_printf_float+0x2c8>)
 800a6a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6a4:	f7f6 fa24 	bl	8000af0 <__aeabi_dcmple>
 800a6a8:	bb30      	cbnz	r0, 800a6f8 <_printf_float+0xc0>
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	4640      	mov	r0, r8
 800a6b0:	4649      	mov	r1, r9
 800a6b2:	f7f6 fa13 	bl	8000adc <__aeabi_dcmplt>
 800a6b6:	b110      	cbz	r0, 800a6be <_printf_float+0x86>
 800a6b8:	232d      	movs	r3, #45	@ 0x2d
 800a6ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6be:	4a91      	ldr	r2, [pc, #580]	@ (800a904 <_printf_float+0x2cc>)
 800a6c0:	4b91      	ldr	r3, [pc, #580]	@ (800a908 <_printf_float+0x2d0>)
 800a6c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a6c6:	bf94      	ite	ls
 800a6c8:	4690      	movls	r8, r2
 800a6ca:	4698      	movhi	r8, r3
 800a6cc:	2303      	movs	r3, #3
 800a6ce:	6123      	str	r3, [r4, #16]
 800a6d0:	f02b 0304 	bic.w	r3, fp, #4
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	f04f 0900 	mov.w	r9, #0
 800a6da:	9700      	str	r7, [sp, #0]
 800a6dc:	4633      	mov	r3, r6
 800a6de:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a6e0:	4621      	mov	r1, r4
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	f000 f9d2 	bl	800aa8c <_printf_common>
 800a6e8:	3001      	adds	r0, #1
 800a6ea:	f040 808d 	bne.w	800a808 <_printf_float+0x1d0>
 800a6ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f2:	b00d      	add	sp, #52	@ 0x34
 800a6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f8:	4642      	mov	r2, r8
 800a6fa:	464b      	mov	r3, r9
 800a6fc:	4640      	mov	r0, r8
 800a6fe:	4649      	mov	r1, r9
 800a700:	f7f6 fa14 	bl	8000b2c <__aeabi_dcmpun>
 800a704:	b140      	cbz	r0, 800a718 <_printf_float+0xe0>
 800a706:	464b      	mov	r3, r9
 800a708:	2b00      	cmp	r3, #0
 800a70a:	bfbc      	itt	lt
 800a70c:	232d      	movlt	r3, #45	@ 0x2d
 800a70e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a712:	4a7e      	ldr	r2, [pc, #504]	@ (800a90c <_printf_float+0x2d4>)
 800a714:	4b7e      	ldr	r3, [pc, #504]	@ (800a910 <_printf_float+0x2d8>)
 800a716:	e7d4      	b.n	800a6c2 <_printf_float+0x8a>
 800a718:	6863      	ldr	r3, [r4, #4]
 800a71a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a71e:	9206      	str	r2, [sp, #24]
 800a720:	1c5a      	adds	r2, r3, #1
 800a722:	d13b      	bne.n	800a79c <_printf_float+0x164>
 800a724:	2306      	movs	r3, #6
 800a726:	6063      	str	r3, [r4, #4]
 800a728:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a72c:	2300      	movs	r3, #0
 800a72e:	6022      	str	r2, [r4, #0]
 800a730:	9303      	str	r3, [sp, #12]
 800a732:	ab0a      	add	r3, sp, #40	@ 0x28
 800a734:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a738:	ab09      	add	r3, sp, #36	@ 0x24
 800a73a:	9300      	str	r3, [sp, #0]
 800a73c:	6861      	ldr	r1, [r4, #4]
 800a73e:	ec49 8b10 	vmov	d0, r8, r9
 800a742:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a746:	4628      	mov	r0, r5
 800a748:	f7ff fed6 	bl	800a4f8 <__cvt>
 800a74c:	9b06      	ldr	r3, [sp, #24]
 800a74e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a750:	2b47      	cmp	r3, #71	@ 0x47
 800a752:	4680      	mov	r8, r0
 800a754:	d129      	bne.n	800a7aa <_printf_float+0x172>
 800a756:	1cc8      	adds	r0, r1, #3
 800a758:	db02      	blt.n	800a760 <_printf_float+0x128>
 800a75a:	6863      	ldr	r3, [r4, #4]
 800a75c:	4299      	cmp	r1, r3
 800a75e:	dd41      	ble.n	800a7e4 <_printf_float+0x1ac>
 800a760:	f1aa 0a02 	sub.w	sl, sl, #2
 800a764:	fa5f fa8a 	uxtb.w	sl, sl
 800a768:	3901      	subs	r1, #1
 800a76a:	4652      	mov	r2, sl
 800a76c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a770:	9109      	str	r1, [sp, #36]	@ 0x24
 800a772:	f7ff ff26 	bl	800a5c2 <__exponent>
 800a776:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a778:	1813      	adds	r3, r2, r0
 800a77a:	2a01      	cmp	r2, #1
 800a77c:	4681      	mov	r9, r0
 800a77e:	6123      	str	r3, [r4, #16]
 800a780:	dc02      	bgt.n	800a788 <_printf_float+0x150>
 800a782:	6822      	ldr	r2, [r4, #0]
 800a784:	07d2      	lsls	r2, r2, #31
 800a786:	d501      	bpl.n	800a78c <_printf_float+0x154>
 800a788:	3301      	adds	r3, #1
 800a78a:	6123      	str	r3, [r4, #16]
 800a78c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a790:	2b00      	cmp	r3, #0
 800a792:	d0a2      	beq.n	800a6da <_printf_float+0xa2>
 800a794:	232d      	movs	r3, #45	@ 0x2d
 800a796:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a79a:	e79e      	b.n	800a6da <_printf_float+0xa2>
 800a79c:	9a06      	ldr	r2, [sp, #24]
 800a79e:	2a47      	cmp	r2, #71	@ 0x47
 800a7a0:	d1c2      	bne.n	800a728 <_printf_float+0xf0>
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d1c0      	bne.n	800a728 <_printf_float+0xf0>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e7bd      	b.n	800a726 <_printf_float+0xee>
 800a7aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a7ae:	d9db      	bls.n	800a768 <_printf_float+0x130>
 800a7b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a7b4:	d118      	bne.n	800a7e8 <_printf_float+0x1b0>
 800a7b6:	2900      	cmp	r1, #0
 800a7b8:	6863      	ldr	r3, [r4, #4]
 800a7ba:	dd0b      	ble.n	800a7d4 <_printf_float+0x19c>
 800a7bc:	6121      	str	r1, [r4, #16]
 800a7be:	b913      	cbnz	r3, 800a7c6 <_printf_float+0x18e>
 800a7c0:	6822      	ldr	r2, [r4, #0]
 800a7c2:	07d0      	lsls	r0, r2, #31
 800a7c4:	d502      	bpl.n	800a7cc <_printf_float+0x194>
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	440b      	add	r3, r1
 800a7ca:	6123      	str	r3, [r4, #16]
 800a7cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a7ce:	f04f 0900 	mov.w	r9, #0
 800a7d2:	e7db      	b.n	800a78c <_printf_float+0x154>
 800a7d4:	b913      	cbnz	r3, 800a7dc <_printf_float+0x1a4>
 800a7d6:	6822      	ldr	r2, [r4, #0]
 800a7d8:	07d2      	lsls	r2, r2, #31
 800a7da:	d501      	bpl.n	800a7e0 <_printf_float+0x1a8>
 800a7dc:	3302      	adds	r3, #2
 800a7de:	e7f4      	b.n	800a7ca <_printf_float+0x192>
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e7f2      	b.n	800a7ca <_printf_float+0x192>
 800a7e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a7e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7ea:	4299      	cmp	r1, r3
 800a7ec:	db05      	blt.n	800a7fa <_printf_float+0x1c2>
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	6121      	str	r1, [r4, #16]
 800a7f2:	07d8      	lsls	r0, r3, #31
 800a7f4:	d5ea      	bpl.n	800a7cc <_printf_float+0x194>
 800a7f6:	1c4b      	adds	r3, r1, #1
 800a7f8:	e7e7      	b.n	800a7ca <_printf_float+0x192>
 800a7fa:	2900      	cmp	r1, #0
 800a7fc:	bfd4      	ite	le
 800a7fe:	f1c1 0202 	rsble	r2, r1, #2
 800a802:	2201      	movgt	r2, #1
 800a804:	4413      	add	r3, r2
 800a806:	e7e0      	b.n	800a7ca <_printf_float+0x192>
 800a808:	6823      	ldr	r3, [r4, #0]
 800a80a:	055a      	lsls	r2, r3, #21
 800a80c:	d407      	bmi.n	800a81e <_printf_float+0x1e6>
 800a80e:	6923      	ldr	r3, [r4, #16]
 800a810:	4642      	mov	r2, r8
 800a812:	4631      	mov	r1, r6
 800a814:	4628      	mov	r0, r5
 800a816:	47b8      	blx	r7
 800a818:	3001      	adds	r0, #1
 800a81a:	d12b      	bne.n	800a874 <_printf_float+0x23c>
 800a81c:	e767      	b.n	800a6ee <_printf_float+0xb6>
 800a81e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a822:	f240 80dd 	bls.w	800a9e0 <_printf_float+0x3a8>
 800a826:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a82a:	2200      	movs	r2, #0
 800a82c:	2300      	movs	r3, #0
 800a82e:	f7f6 f94b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a832:	2800      	cmp	r0, #0
 800a834:	d033      	beq.n	800a89e <_printf_float+0x266>
 800a836:	4a37      	ldr	r2, [pc, #220]	@ (800a914 <_printf_float+0x2dc>)
 800a838:	2301      	movs	r3, #1
 800a83a:	4631      	mov	r1, r6
 800a83c:	4628      	mov	r0, r5
 800a83e:	47b8      	blx	r7
 800a840:	3001      	adds	r0, #1
 800a842:	f43f af54 	beq.w	800a6ee <_printf_float+0xb6>
 800a846:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a84a:	4543      	cmp	r3, r8
 800a84c:	db02      	blt.n	800a854 <_printf_float+0x21c>
 800a84e:	6823      	ldr	r3, [r4, #0]
 800a850:	07d8      	lsls	r0, r3, #31
 800a852:	d50f      	bpl.n	800a874 <_printf_float+0x23c>
 800a854:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a858:	4631      	mov	r1, r6
 800a85a:	4628      	mov	r0, r5
 800a85c:	47b8      	blx	r7
 800a85e:	3001      	adds	r0, #1
 800a860:	f43f af45 	beq.w	800a6ee <_printf_float+0xb6>
 800a864:	f04f 0900 	mov.w	r9, #0
 800a868:	f108 38ff 	add.w	r8, r8, #4294967295
 800a86c:	f104 0a1a 	add.w	sl, r4, #26
 800a870:	45c8      	cmp	r8, r9
 800a872:	dc09      	bgt.n	800a888 <_printf_float+0x250>
 800a874:	6823      	ldr	r3, [r4, #0]
 800a876:	079b      	lsls	r3, r3, #30
 800a878:	f100 8103 	bmi.w	800aa82 <_printf_float+0x44a>
 800a87c:	68e0      	ldr	r0, [r4, #12]
 800a87e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a880:	4298      	cmp	r0, r3
 800a882:	bfb8      	it	lt
 800a884:	4618      	movlt	r0, r3
 800a886:	e734      	b.n	800a6f2 <_printf_float+0xba>
 800a888:	2301      	movs	r3, #1
 800a88a:	4652      	mov	r2, sl
 800a88c:	4631      	mov	r1, r6
 800a88e:	4628      	mov	r0, r5
 800a890:	47b8      	blx	r7
 800a892:	3001      	adds	r0, #1
 800a894:	f43f af2b 	beq.w	800a6ee <_printf_float+0xb6>
 800a898:	f109 0901 	add.w	r9, r9, #1
 800a89c:	e7e8      	b.n	800a870 <_printf_float+0x238>
 800a89e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	dc39      	bgt.n	800a918 <_printf_float+0x2e0>
 800a8a4:	4a1b      	ldr	r2, [pc, #108]	@ (800a914 <_printf_float+0x2dc>)
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	4631      	mov	r1, r6
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	47b8      	blx	r7
 800a8ae:	3001      	adds	r0, #1
 800a8b0:	f43f af1d 	beq.w	800a6ee <_printf_float+0xb6>
 800a8b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a8b8:	ea59 0303 	orrs.w	r3, r9, r3
 800a8bc:	d102      	bne.n	800a8c4 <_printf_float+0x28c>
 800a8be:	6823      	ldr	r3, [r4, #0]
 800a8c0:	07d9      	lsls	r1, r3, #31
 800a8c2:	d5d7      	bpl.n	800a874 <_printf_float+0x23c>
 800a8c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8c8:	4631      	mov	r1, r6
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	47b8      	blx	r7
 800a8ce:	3001      	adds	r0, #1
 800a8d0:	f43f af0d 	beq.w	800a6ee <_printf_float+0xb6>
 800a8d4:	f04f 0a00 	mov.w	sl, #0
 800a8d8:	f104 0b1a 	add.w	fp, r4, #26
 800a8dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8de:	425b      	negs	r3, r3
 800a8e0:	4553      	cmp	r3, sl
 800a8e2:	dc01      	bgt.n	800a8e8 <_printf_float+0x2b0>
 800a8e4:	464b      	mov	r3, r9
 800a8e6:	e793      	b.n	800a810 <_printf_float+0x1d8>
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	465a      	mov	r2, fp
 800a8ec:	4631      	mov	r1, r6
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	47b8      	blx	r7
 800a8f2:	3001      	adds	r0, #1
 800a8f4:	f43f aefb 	beq.w	800a6ee <_printf_float+0xb6>
 800a8f8:	f10a 0a01 	add.w	sl, sl, #1
 800a8fc:	e7ee      	b.n	800a8dc <_printf_float+0x2a4>
 800a8fe:	bf00      	nop
 800a900:	7fefffff 	.word	0x7fefffff
 800a904:	0800d9a4 	.word	0x0800d9a4
 800a908:	0800d9a8 	.word	0x0800d9a8
 800a90c:	0800d9ac 	.word	0x0800d9ac
 800a910:	0800d9b0 	.word	0x0800d9b0
 800a914:	0800d9b4 	.word	0x0800d9b4
 800a918:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a91a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a91e:	4553      	cmp	r3, sl
 800a920:	bfa8      	it	ge
 800a922:	4653      	movge	r3, sl
 800a924:	2b00      	cmp	r3, #0
 800a926:	4699      	mov	r9, r3
 800a928:	dc36      	bgt.n	800a998 <_printf_float+0x360>
 800a92a:	f04f 0b00 	mov.w	fp, #0
 800a92e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a932:	f104 021a 	add.w	r2, r4, #26
 800a936:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a938:	9306      	str	r3, [sp, #24]
 800a93a:	eba3 0309 	sub.w	r3, r3, r9
 800a93e:	455b      	cmp	r3, fp
 800a940:	dc31      	bgt.n	800a9a6 <_printf_float+0x36e>
 800a942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a944:	459a      	cmp	sl, r3
 800a946:	dc3a      	bgt.n	800a9be <_printf_float+0x386>
 800a948:	6823      	ldr	r3, [r4, #0]
 800a94a:	07da      	lsls	r2, r3, #31
 800a94c:	d437      	bmi.n	800a9be <_printf_float+0x386>
 800a94e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a950:	ebaa 0903 	sub.w	r9, sl, r3
 800a954:	9b06      	ldr	r3, [sp, #24]
 800a956:	ebaa 0303 	sub.w	r3, sl, r3
 800a95a:	4599      	cmp	r9, r3
 800a95c:	bfa8      	it	ge
 800a95e:	4699      	movge	r9, r3
 800a960:	f1b9 0f00 	cmp.w	r9, #0
 800a964:	dc33      	bgt.n	800a9ce <_printf_float+0x396>
 800a966:	f04f 0800 	mov.w	r8, #0
 800a96a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a96e:	f104 0b1a 	add.w	fp, r4, #26
 800a972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a974:	ebaa 0303 	sub.w	r3, sl, r3
 800a978:	eba3 0309 	sub.w	r3, r3, r9
 800a97c:	4543      	cmp	r3, r8
 800a97e:	f77f af79 	ble.w	800a874 <_printf_float+0x23c>
 800a982:	2301      	movs	r3, #1
 800a984:	465a      	mov	r2, fp
 800a986:	4631      	mov	r1, r6
 800a988:	4628      	mov	r0, r5
 800a98a:	47b8      	blx	r7
 800a98c:	3001      	adds	r0, #1
 800a98e:	f43f aeae 	beq.w	800a6ee <_printf_float+0xb6>
 800a992:	f108 0801 	add.w	r8, r8, #1
 800a996:	e7ec      	b.n	800a972 <_printf_float+0x33a>
 800a998:	4642      	mov	r2, r8
 800a99a:	4631      	mov	r1, r6
 800a99c:	4628      	mov	r0, r5
 800a99e:	47b8      	blx	r7
 800a9a0:	3001      	adds	r0, #1
 800a9a2:	d1c2      	bne.n	800a92a <_printf_float+0x2f2>
 800a9a4:	e6a3      	b.n	800a6ee <_printf_float+0xb6>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	4631      	mov	r1, r6
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	9206      	str	r2, [sp, #24]
 800a9ae:	47b8      	blx	r7
 800a9b0:	3001      	adds	r0, #1
 800a9b2:	f43f ae9c 	beq.w	800a6ee <_printf_float+0xb6>
 800a9b6:	9a06      	ldr	r2, [sp, #24]
 800a9b8:	f10b 0b01 	add.w	fp, fp, #1
 800a9bc:	e7bb      	b.n	800a936 <_printf_float+0x2fe>
 800a9be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9c2:	4631      	mov	r1, r6
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	47b8      	blx	r7
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	d1c0      	bne.n	800a94e <_printf_float+0x316>
 800a9cc:	e68f      	b.n	800a6ee <_printf_float+0xb6>
 800a9ce:	9a06      	ldr	r2, [sp, #24]
 800a9d0:	464b      	mov	r3, r9
 800a9d2:	4442      	add	r2, r8
 800a9d4:	4631      	mov	r1, r6
 800a9d6:	4628      	mov	r0, r5
 800a9d8:	47b8      	blx	r7
 800a9da:	3001      	adds	r0, #1
 800a9dc:	d1c3      	bne.n	800a966 <_printf_float+0x32e>
 800a9de:	e686      	b.n	800a6ee <_printf_float+0xb6>
 800a9e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a9e4:	f1ba 0f01 	cmp.w	sl, #1
 800a9e8:	dc01      	bgt.n	800a9ee <_printf_float+0x3b6>
 800a9ea:	07db      	lsls	r3, r3, #31
 800a9ec:	d536      	bpl.n	800aa5c <_printf_float+0x424>
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	4642      	mov	r2, r8
 800a9f2:	4631      	mov	r1, r6
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	47b8      	blx	r7
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	f43f ae78 	beq.w	800a6ee <_printf_float+0xb6>
 800a9fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa02:	4631      	mov	r1, r6
 800aa04:	4628      	mov	r0, r5
 800aa06:	47b8      	blx	r7
 800aa08:	3001      	adds	r0, #1
 800aa0a:	f43f ae70 	beq.w	800a6ee <_printf_float+0xb6>
 800aa0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aa12:	2200      	movs	r2, #0
 800aa14:	2300      	movs	r3, #0
 800aa16:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa1a:	f7f6 f855 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa1e:	b9c0      	cbnz	r0, 800aa52 <_printf_float+0x41a>
 800aa20:	4653      	mov	r3, sl
 800aa22:	f108 0201 	add.w	r2, r8, #1
 800aa26:	4631      	mov	r1, r6
 800aa28:	4628      	mov	r0, r5
 800aa2a:	47b8      	blx	r7
 800aa2c:	3001      	adds	r0, #1
 800aa2e:	d10c      	bne.n	800aa4a <_printf_float+0x412>
 800aa30:	e65d      	b.n	800a6ee <_printf_float+0xb6>
 800aa32:	2301      	movs	r3, #1
 800aa34:	465a      	mov	r2, fp
 800aa36:	4631      	mov	r1, r6
 800aa38:	4628      	mov	r0, r5
 800aa3a:	47b8      	blx	r7
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	f43f ae56 	beq.w	800a6ee <_printf_float+0xb6>
 800aa42:	f108 0801 	add.w	r8, r8, #1
 800aa46:	45d0      	cmp	r8, sl
 800aa48:	dbf3      	blt.n	800aa32 <_printf_float+0x3fa>
 800aa4a:	464b      	mov	r3, r9
 800aa4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aa50:	e6df      	b.n	800a812 <_printf_float+0x1da>
 800aa52:	f04f 0800 	mov.w	r8, #0
 800aa56:	f104 0b1a 	add.w	fp, r4, #26
 800aa5a:	e7f4      	b.n	800aa46 <_printf_float+0x40e>
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	4642      	mov	r2, r8
 800aa60:	e7e1      	b.n	800aa26 <_printf_float+0x3ee>
 800aa62:	2301      	movs	r3, #1
 800aa64:	464a      	mov	r2, r9
 800aa66:	4631      	mov	r1, r6
 800aa68:	4628      	mov	r0, r5
 800aa6a:	47b8      	blx	r7
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	f43f ae3e 	beq.w	800a6ee <_printf_float+0xb6>
 800aa72:	f108 0801 	add.w	r8, r8, #1
 800aa76:	68e3      	ldr	r3, [r4, #12]
 800aa78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa7a:	1a5b      	subs	r3, r3, r1
 800aa7c:	4543      	cmp	r3, r8
 800aa7e:	dcf0      	bgt.n	800aa62 <_printf_float+0x42a>
 800aa80:	e6fc      	b.n	800a87c <_printf_float+0x244>
 800aa82:	f04f 0800 	mov.w	r8, #0
 800aa86:	f104 0919 	add.w	r9, r4, #25
 800aa8a:	e7f4      	b.n	800aa76 <_printf_float+0x43e>

0800aa8c <_printf_common>:
 800aa8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa90:	4616      	mov	r6, r2
 800aa92:	4698      	mov	r8, r3
 800aa94:	688a      	ldr	r2, [r1, #8]
 800aa96:	690b      	ldr	r3, [r1, #16]
 800aa98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	bfb8      	it	lt
 800aaa0:	4613      	movlt	r3, r2
 800aaa2:	6033      	str	r3, [r6, #0]
 800aaa4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aaa8:	4607      	mov	r7, r0
 800aaaa:	460c      	mov	r4, r1
 800aaac:	b10a      	cbz	r2, 800aab2 <_printf_common+0x26>
 800aaae:	3301      	adds	r3, #1
 800aab0:	6033      	str	r3, [r6, #0]
 800aab2:	6823      	ldr	r3, [r4, #0]
 800aab4:	0699      	lsls	r1, r3, #26
 800aab6:	bf42      	ittt	mi
 800aab8:	6833      	ldrmi	r3, [r6, #0]
 800aaba:	3302      	addmi	r3, #2
 800aabc:	6033      	strmi	r3, [r6, #0]
 800aabe:	6825      	ldr	r5, [r4, #0]
 800aac0:	f015 0506 	ands.w	r5, r5, #6
 800aac4:	d106      	bne.n	800aad4 <_printf_common+0x48>
 800aac6:	f104 0a19 	add.w	sl, r4, #25
 800aaca:	68e3      	ldr	r3, [r4, #12]
 800aacc:	6832      	ldr	r2, [r6, #0]
 800aace:	1a9b      	subs	r3, r3, r2
 800aad0:	42ab      	cmp	r3, r5
 800aad2:	dc26      	bgt.n	800ab22 <_printf_common+0x96>
 800aad4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aad8:	6822      	ldr	r2, [r4, #0]
 800aada:	3b00      	subs	r3, #0
 800aadc:	bf18      	it	ne
 800aade:	2301      	movne	r3, #1
 800aae0:	0692      	lsls	r2, r2, #26
 800aae2:	d42b      	bmi.n	800ab3c <_printf_common+0xb0>
 800aae4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aae8:	4641      	mov	r1, r8
 800aaea:	4638      	mov	r0, r7
 800aaec:	47c8      	blx	r9
 800aaee:	3001      	adds	r0, #1
 800aaf0:	d01e      	beq.n	800ab30 <_printf_common+0xa4>
 800aaf2:	6823      	ldr	r3, [r4, #0]
 800aaf4:	6922      	ldr	r2, [r4, #16]
 800aaf6:	f003 0306 	and.w	r3, r3, #6
 800aafa:	2b04      	cmp	r3, #4
 800aafc:	bf02      	ittt	eq
 800aafe:	68e5      	ldreq	r5, [r4, #12]
 800ab00:	6833      	ldreq	r3, [r6, #0]
 800ab02:	1aed      	subeq	r5, r5, r3
 800ab04:	68a3      	ldr	r3, [r4, #8]
 800ab06:	bf0c      	ite	eq
 800ab08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab0c:	2500      	movne	r5, #0
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	bfc4      	itt	gt
 800ab12:	1a9b      	subgt	r3, r3, r2
 800ab14:	18ed      	addgt	r5, r5, r3
 800ab16:	2600      	movs	r6, #0
 800ab18:	341a      	adds	r4, #26
 800ab1a:	42b5      	cmp	r5, r6
 800ab1c:	d11a      	bne.n	800ab54 <_printf_common+0xc8>
 800ab1e:	2000      	movs	r0, #0
 800ab20:	e008      	b.n	800ab34 <_printf_common+0xa8>
 800ab22:	2301      	movs	r3, #1
 800ab24:	4652      	mov	r2, sl
 800ab26:	4641      	mov	r1, r8
 800ab28:	4638      	mov	r0, r7
 800ab2a:	47c8      	blx	r9
 800ab2c:	3001      	adds	r0, #1
 800ab2e:	d103      	bne.n	800ab38 <_printf_common+0xac>
 800ab30:	f04f 30ff 	mov.w	r0, #4294967295
 800ab34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab38:	3501      	adds	r5, #1
 800ab3a:	e7c6      	b.n	800aaca <_printf_common+0x3e>
 800ab3c:	18e1      	adds	r1, r4, r3
 800ab3e:	1c5a      	adds	r2, r3, #1
 800ab40:	2030      	movs	r0, #48	@ 0x30
 800ab42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ab46:	4422      	add	r2, r4
 800ab48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ab4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ab50:	3302      	adds	r3, #2
 800ab52:	e7c7      	b.n	800aae4 <_printf_common+0x58>
 800ab54:	2301      	movs	r3, #1
 800ab56:	4622      	mov	r2, r4
 800ab58:	4641      	mov	r1, r8
 800ab5a:	4638      	mov	r0, r7
 800ab5c:	47c8      	blx	r9
 800ab5e:	3001      	adds	r0, #1
 800ab60:	d0e6      	beq.n	800ab30 <_printf_common+0xa4>
 800ab62:	3601      	adds	r6, #1
 800ab64:	e7d9      	b.n	800ab1a <_printf_common+0x8e>
	...

0800ab68 <_printf_i>:
 800ab68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab6c:	7e0f      	ldrb	r7, [r1, #24]
 800ab6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ab70:	2f78      	cmp	r7, #120	@ 0x78
 800ab72:	4691      	mov	r9, r2
 800ab74:	4680      	mov	r8, r0
 800ab76:	460c      	mov	r4, r1
 800ab78:	469a      	mov	sl, r3
 800ab7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ab7e:	d807      	bhi.n	800ab90 <_printf_i+0x28>
 800ab80:	2f62      	cmp	r7, #98	@ 0x62
 800ab82:	d80a      	bhi.n	800ab9a <_printf_i+0x32>
 800ab84:	2f00      	cmp	r7, #0
 800ab86:	f000 80d2 	beq.w	800ad2e <_printf_i+0x1c6>
 800ab8a:	2f58      	cmp	r7, #88	@ 0x58
 800ab8c:	f000 80b9 	beq.w	800ad02 <_printf_i+0x19a>
 800ab90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab98:	e03a      	b.n	800ac10 <_printf_i+0xa8>
 800ab9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab9e:	2b15      	cmp	r3, #21
 800aba0:	d8f6      	bhi.n	800ab90 <_printf_i+0x28>
 800aba2:	a101      	add	r1, pc, #4	@ (adr r1, 800aba8 <_printf_i+0x40>)
 800aba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aba8:	0800ac01 	.word	0x0800ac01
 800abac:	0800ac15 	.word	0x0800ac15
 800abb0:	0800ab91 	.word	0x0800ab91
 800abb4:	0800ab91 	.word	0x0800ab91
 800abb8:	0800ab91 	.word	0x0800ab91
 800abbc:	0800ab91 	.word	0x0800ab91
 800abc0:	0800ac15 	.word	0x0800ac15
 800abc4:	0800ab91 	.word	0x0800ab91
 800abc8:	0800ab91 	.word	0x0800ab91
 800abcc:	0800ab91 	.word	0x0800ab91
 800abd0:	0800ab91 	.word	0x0800ab91
 800abd4:	0800ad15 	.word	0x0800ad15
 800abd8:	0800ac3f 	.word	0x0800ac3f
 800abdc:	0800accf 	.word	0x0800accf
 800abe0:	0800ab91 	.word	0x0800ab91
 800abe4:	0800ab91 	.word	0x0800ab91
 800abe8:	0800ad37 	.word	0x0800ad37
 800abec:	0800ab91 	.word	0x0800ab91
 800abf0:	0800ac3f 	.word	0x0800ac3f
 800abf4:	0800ab91 	.word	0x0800ab91
 800abf8:	0800ab91 	.word	0x0800ab91
 800abfc:	0800acd7 	.word	0x0800acd7
 800ac00:	6833      	ldr	r3, [r6, #0]
 800ac02:	1d1a      	adds	r2, r3, #4
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	6032      	str	r2, [r6, #0]
 800ac08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ac10:	2301      	movs	r3, #1
 800ac12:	e09d      	b.n	800ad50 <_printf_i+0x1e8>
 800ac14:	6833      	ldr	r3, [r6, #0]
 800ac16:	6820      	ldr	r0, [r4, #0]
 800ac18:	1d19      	adds	r1, r3, #4
 800ac1a:	6031      	str	r1, [r6, #0]
 800ac1c:	0606      	lsls	r6, r0, #24
 800ac1e:	d501      	bpl.n	800ac24 <_printf_i+0xbc>
 800ac20:	681d      	ldr	r5, [r3, #0]
 800ac22:	e003      	b.n	800ac2c <_printf_i+0xc4>
 800ac24:	0645      	lsls	r5, r0, #25
 800ac26:	d5fb      	bpl.n	800ac20 <_printf_i+0xb8>
 800ac28:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ac2c:	2d00      	cmp	r5, #0
 800ac2e:	da03      	bge.n	800ac38 <_printf_i+0xd0>
 800ac30:	232d      	movs	r3, #45	@ 0x2d
 800ac32:	426d      	negs	r5, r5
 800ac34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac38:	4859      	ldr	r0, [pc, #356]	@ (800ada0 <_printf_i+0x238>)
 800ac3a:	230a      	movs	r3, #10
 800ac3c:	e011      	b.n	800ac62 <_printf_i+0xfa>
 800ac3e:	6821      	ldr	r1, [r4, #0]
 800ac40:	6833      	ldr	r3, [r6, #0]
 800ac42:	0608      	lsls	r0, r1, #24
 800ac44:	f853 5b04 	ldr.w	r5, [r3], #4
 800ac48:	d402      	bmi.n	800ac50 <_printf_i+0xe8>
 800ac4a:	0649      	lsls	r1, r1, #25
 800ac4c:	bf48      	it	mi
 800ac4e:	b2ad      	uxthmi	r5, r5
 800ac50:	2f6f      	cmp	r7, #111	@ 0x6f
 800ac52:	4853      	ldr	r0, [pc, #332]	@ (800ada0 <_printf_i+0x238>)
 800ac54:	6033      	str	r3, [r6, #0]
 800ac56:	bf14      	ite	ne
 800ac58:	230a      	movne	r3, #10
 800ac5a:	2308      	moveq	r3, #8
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ac62:	6866      	ldr	r6, [r4, #4]
 800ac64:	60a6      	str	r6, [r4, #8]
 800ac66:	2e00      	cmp	r6, #0
 800ac68:	bfa2      	ittt	ge
 800ac6a:	6821      	ldrge	r1, [r4, #0]
 800ac6c:	f021 0104 	bicge.w	r1, r1, #4
 800ac70:	6021      	strge	r1, [r4, #0]
 800ac72:	b90d      	cbnz	r5, 800ac78 <_printf_i+0x110>
 800ac74:	2e00      	cmp	r6, #0
 800ac76:	d04b      	beq.n	800ad10 <_printf_i+0x1a8>
 800ac78:	4616      	mov	r6, r2
 800ac7a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac7e:	fb03 5711 	mls	r7, r3, r1, r5
 800ac82:	5dc7      	ldrb	r7, [r0, r7]
 800ac84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac88:	462f      	mov	r7, r5
 800ac8a:	42bb      	cmp	r3, r7
 800ac8c:	460d      	mov	r5, r1
 800ac8e:	d9f4      	bls.n	800ac7a <_printf_i+0x112>
 800ac90:	2b08      	cmp	r3, #8
 800ac92:	d10b      	bne.n	800acac <_printf_i+0x144>
 800ac94:	6823      	ldr	r3, [r4, #0]
 800ac96:	07df      	lsls	r7, r3, #31
 800ac98:	d508      	bpl.n	800acac <_printf_i+0x144>
 800ac9a:	6923      	ldr	r3, [r4, #16]
 800ac9c:	6861      	ldr	r1, [r4, #4]
 800ac9e:	4299      	cmp	r1, r3
 800aca0:	bfde      	ittt	le
 800aca2:	2330      	movle	r3, #48	@ 0x30
 800aca4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aca8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800acac:	1b92      	subs	r2, r2, r6
 800acae:	6122      	str	r2, [r4, #16]
 800acb0:	f8cd a000 	str.w	sl, [sp]
 800acb4:	464b      	mov	r3, r9
 800acb6:	aa03      	add	r2, sp, #12
 800acb8:	4621      	mov	r1, r4
 800acba:	4640      	mov	r0, r8
 800acbc:	f7ff fee6 	bl	800aa8c <_printf_common>
 800acc0:	3001      	adds	r0, #1
 800acc2:	d14a      	bne.n	800ad5a <_printf_i+0x1f2>
 800acc4:	f04f 30ff 	mov.w	r0, #4294967295
 800acc8:	b004      	add	sp, #16
 800acca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acce:	6823      	ldr	r3, [r4, #0]
 800acd0:	f043 0320 	orr.w	r3, r3, #32
 800acd4:	6023      	str	r3, [r4, #0]
 800acd6:	4833      	ldr	r0, [pc, #204]	@ (800ada4 <_printf_i+0x23c>)
 800acd8:	2778      	movs	r7, #120	@ 0x78
 800acda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800acde:	6823      	ldr	r3, [r4, #0]
 800ace0:	6831      	ldr	r1, [r6, #0]
 800ace2:	061f      	lsls	r7, r3, #24
 800ace4:	f851 5b04 	ldr.w	r5, [r1], #4
 800ace8:	d402      	bmi.n	800acf0 <_printf_i+0x188>
 800acea:	065f      	lsls	r7, r3, #25
 800acec:	bf48      	it	mi
 800acee:	b2ad      	uxthmi	r5, r5
 800acf0:	6031      	str	r1, [r6, #0]
 800acf2:	07d9      	lsls	r1, r3, #31
 800acf4:	bf44      	itt	mi
 800acf6:	f043 0320 	orrmi.w	r3, r3, #32
 800acfa:	6023      	strmi	r3, [r4, #0]
 800acfc:	b11d      	cbz	r5, 800ad06 <_printf_i+0x19e>
 800acfe:	2310      	movs	r3, #16
 800ad00:	e7ac      	b.n	800ac5c <_printf_i+0xf4>
 800ad02:	4827      	ldr	r0, [pc, #156]	@ (800ada0 <_printf_i+0x238>)
 800ad04:	e7e9      	b.n	800acda <_printf_i+0x172>
 800ad06:	6823      	ldr	r3, [r4, #0]
 800ad08:	f023 0320 	bic.w	r3, r3, #32
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	e7f6      	b.n	800acfe <_printf_i+0x196>
 800ad10:	4616      	mov	r6, r2
 800ad12:	e7bd      	b.n	800ac90 <_printf_i+0x128>
 800ad14:	6833      	ldr	r3, [r6, #0]
 800ad16:	6825      	ldr	r5, [r4, #0]
 800ad18:	6961      	ldr	r1, [r4, #20]
 800ad1a:	1d18      	adds	r0, r3, #4
 800ad1c:	6030      	str	r0, [r6, #0]
 800ad1e:	062e      	lsls	r6, r5, #24
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	d501      	bpl.n	800ad28 <_printf_i+0x1c0>
 800ad24:	6019      	str	r1, [r3, #0]
 800ad26:	e002      	b.n	800ad2e <_printf_i+0x1c6>
 800ad28:	0668      	lsls	r0, r5, #25
 800ad2a:	d5fb      	bpl.n	800ad24 <_printf_i+0x1bc>
 800ad2c:	8019      	strh	r1, [r3, #0]
 800ad2e:	2300      	movs	r3, #0
 800ad30:	6123      	str	r3, [r4, #16]
 800ad32:	4616      	mov	r6, r2
 800ad34:	e7bc      	b.n	800acb0 <_printf_i+0x148>
 800ad36:	6833      	ldr	r3, [r6, #0]
 800ad38:	1d1a      	adds	r2, r3, #4
 800ad3a:	6032      	str	r2, [r6, #0]
 800ad3c:	681e      	ldr	r6, [r3, #0]
 800ad3e:	6862      	ldr	r2, [r4, #4]
 800ad40:	2100      	movs	r1, #0
 800ad42:	4630      	mov	r0, r6
 800ad44:	f7f5 fa44 	bl	80001d0 <memchr>
 800ad48:	b108      	cbz	r0, 800ad4e <_printf_i+0x1e6>
 800ad4a:	1b80      	subs	r0, r0, r6
 800ad4c:	6060      	str	r0, [r4, #4]
 800ad4e:	6863      	ldr	r3, [r4, #4]
 800ad50:	6123      	str	r3, [r4, #16]
 800ad52:	2300      	movs	r3, #0
 800ad54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad58:	e7aa      	b.n	800acb0 <_printf_i+0x148>
 800ad5a:	6923      	ldr	r3, [r4, #16]
 800ad5c:	4632      	mov	r2, r6
 800ad5e:	4649      	mov	r1, r9
 800ad60:	4640      	mov	r0, r8
 800ad62:	47d0      	blx	sl
 800ad64:	3001      	adds	r0, #1
 800ad66:	d0ad      	beq.n	800acc4 <_printf_i+0x15c>
 800ad68:	6823      	ldr	r3, [r4, #0]
 800ad6a:	079b      	lsls	r3, r3, #30
 800ad6c:	d413      	bmi.n	800ad96 <_printf_i+0x22e>
 800ad6e:	68e0      	ldr	r0, [r4, #12]
 800ad70:	9b03      	ldr	r3, [sp, #12]
 800ad72:	4298      	cmp	r0, r3
 800ad74:	bfb8      	it	lt
 800ad76:	4618      	movlt	r0, r3
 800ad78:	e7a6      	b.n	800acc8 <_printf_i+0x160>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	4632      	mov	r2, r6
 800ad7e:	4649      	mov	r1, r9
 800ad80:	4640      	mov	r0, r8
 800ad82:	47d0      	blx	sl
 800ad84:	3001      	adds	r0, #1
 800ad86:	d09d      	beq.n	800acc4 <_printf_i+0x15c>
 800ad88:	3501      	adds	r5, #1
 800ad8a:	68e3      	ldr	r3, [r4, #12]
 800ad8c:	9903      	ldr	r1, [sp, #12]
 800ad8e:	1a5b      	subs	r3, r3, r1
 800ad90:	42ab      	cmp	r3, r5
 800ad92:	dcf2      	bgt.n	800ad7a <_printf_i+0x212>
 800ad94:	e7eb      	b.n	800ad6e <_printf_i+0x206>
 800ad96:	2500      	movs	r5, #0
 800ad98:	f104 0619 	add.w	r6, r4, #25
 800ad9c:	e7f5      	b.n	800ad8a <_printf_i+0x222>
 800ad9e:	bf00      	nop
 800ada0:	0800d9b6 	.word	0x0800d9b6
 800ada4:	0800d9c7 	.word	0x0800d9c7

0800ada8 <std>:
 800ada8:	2300      	movs	r3, #0
 800adaa:	b510      	push	{r4, lr}
 800adac:	4604      	mov	r4, r0
 800adae:	e9c0 3300 	strd	r3, r3, [r0]
 800adb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800adb6:	6083      	str	r3, [r0, #8]
 800adb8:	8181      	strh	r1, [r0, #12]
 800adba:	6643      	str	r3, [r0, #100]	@ 0x64
 800adbc:	81c2      	strh	r2, [r0, #14]
 800adbe:	6183      	str	r3, [r0, #24]
 800adc0:	4619      	mov	r1, r3
 800adc2:	2208      	movs	r2, #8
 800adc4:	305c      	adds	r0, #92	@ 0x5c
 800adc6:	f000 f9f9 	bl	800b1bc <memset>
 800adca:	4b0d      	ldr	r3, [pc, #52]	@ (800ae00 <std+0x58>)
 800adcc:	6263      	str	r3, [r4, #36]	@ 0x24
 800adce:	4b0d      	ldr	r3, [pc, #52]	@ (800ae04 <std+0x5c>)
 800add0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800add2:	4b0d      	ldr	r3, [pc, #52]	@ (800ae08 <std+0x60>)
 800add4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800add6:	4b0d      	ldr	r3, [pc, #52]	@ (800ae0c <std+0x64>)
 800add8:	6323      	str	r3, [r4, #48]	@ 0x30
 800adda:	4b0d      	ldr	r3, [pc, #52]	@ (800ae10 <std+0x68>)
 800addc:	6224      	str	r4, [r4, #32]
 800adde:	429c      	cmp	r4, r3
 800ade0:	d006      	beq.n	800adf0 <std+0x48>
 800ade2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ade6:	4294      	cmp	r4, r2
 800ade8:	d002      	beq.n	800adf0 <std+0x48>
 800adea:	33d0      	adds	r3, #208	@ 0xd0
 800adec:	429c      	cmp	r4, r3
 800adee:	d105      	bne.n	800adfc <std+0x54>
 800adf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800adf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adf8:	f000 bab2 	b.w	800b360 <__retarget_lock_init_recursive>
 800adfc:	bd10      	pop	{r4, pc}
 800adfe:	bf00      	nop
 800ae00:	0800b00d 	.word	0x0800b00d
 800ae04:	0800b02f 	.word	0x0800b02f
 800ae08:	0800b067 	.word	0x0800b067
 800ae0c:	0800b08b 	.word	0x0800b08b
 800ae10:	20002328 	.word	0x20002328

0800ae14 <stdio_exit_handler>:
 800ae14:	4a02      	ldr	r2, [pc, #8]	@ (800ae20 <stdio_exit_handler+0xc>)
 800ae16:	4903      	ldr	r1, [pc, #12]	@ (800ae24 <stdio_exit_handler+0x10>)
 800ae18:	4803      	ldr	r0, [pc, #12]	@ (800ae28 <stdio_exit_handler+0x14>)
 800ae1a:	f000 b869 	b.w	800aef0 <_fwalk_sglue>
 800ae1e:	bf00      	nop
 800ae20:	20000010 	.word	0x20000010
 800ae24:	0800ccb1 	.word	0x0800ccb1
 800ae28:	20000020 	.word	0x20000020

0800ae2c <cleanup_stdio>:
 800ae2c:	6841      	ldr	r1, [r0, #4]
 800ae2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ae60 <cleanup_stdio+0x34>)
 800ae30:	4299      	cmp	r1, r3
 800ae32:	b510      	push	{r4, lr}
 800ae34:	4604      	mov	r4, r0
 800ae36:	d001      	beq.n	800ae3c <cleanup_stdio+0x10>
 800ae38:	f001 ff3a 	bl	800ccb0 <_fflush_r>
 800ae3c:	68a1      	ldr	r1, [r4, #8]
 800ae3e:	4b09      	ldr	r3, [pc, #36]	@ (800ae64 <cleanup_stdio+0x38>)
 800ae40:	4299      	cmp	r1, r3
 800ae42:	d002      	beq.n	800ae4a <cleanup_stdio+0x1e>
 800ae44:	4620      	mov	r0, r4
 800ae46:	f001 ff33 	bl	800ccb0 <_fflush_r>
 800ae4a:	68e1      	ldr	r1, [r4, #12]
 800ae4c:	4b06      	ldr	r3, [pc, #24]	@ (800ae68 <cleanup_stdio+0x3c>)
 800ae4e:	4299      	cmp	r1, r3
 800ae50:	d004      	beq.n	800ae5c <cleanup_stdio+0x30>
 800ae52:	4620      	mov	r0, r4
 800ae54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae58:	f001 bf2a 	b.w	800ccb0 <_fflush_r>
 800ae5c:	bd10      	pop	{r4, pc}
 800ae5e:	bf00      	nop
 800ae60:	20002328 	.word	0x20002328
 800ae64:	20002390 	.word	0x20002390
 800ae68:	200023f8 	.word	0x200023f8

0800ae6c <global_stdio_init.part.0>:
 800ae6c:	b510      	push	{r4, lr}
 800ae6e:	4b0b      	ldr	r3, [pc, #44]	@ (800ae9c <global_stdio_init.part.0+0x30>)
 800ae70:	4c0b      	ldr	r4, [pc, #44]	@ (800aea0 <global_stdio_init.part.0+0x34>)
 800ae72:	4a0c      	ldr	r2, [pc, #48]	@ (800aea4 <global_stdio_init.part.0+0x38>)
 800ae74:	601a      	str	r2, [r3, #0]
 800ae76:	4620      	mov	r0, r4
 800ae78:	2200      	movs	r2, #0
 800ae7a:	2104      	movs	r1, #4
 800ae7c:	f7ff ff94 	bl	800ada8 <std>
 800ae80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ae84:	2201      	movs	r2, #1
 800ae86:	2109      	movs	r1, #9
 800ae88:	f7ff ff8e 	bl	800ada8 <std>
 800ae8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ae90:	2202      	movs	r2, #2
 800ae92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae96:	2112      	movs	r1, #18
 800ae98:	f7ff bf86 	b.w	800ada8 <std>
 800ae9c:	20002460 	.word	0x20002460
 800aea0:	20002328 	.word	0x20002328
 800aea4:	0800ae15 	.word	0x0800ae15

0800aea8 <__sfp_lock_acquire>:
 800aea8:	4801      	ldr	r0, [pc, #4]	@ (800aeb0 <__sfp_lock_acquire+0x8>)
 800aeaa:	f000 ba5a 	b.w	800b362 <__retarget_lock_acquire_recursive>
 800aeae:	bf00      	nop
 800aeb0:	20002469 	.word	0x20002469

0800aeb4 <__sfp_lock_release>:
 800aeb4:	4801      	ldr	r0, [pc, #4]	@ (800aebc <__sfp_lock_release+0x8>)
 800aeb6:	f000 ba55 	b.w	800b364 <__retarget_lock_release_recursive>
 800aeba:	bf00      	nop
 800aebc:	20002469 	.word	0x20002469

0800aec0 <__sinit>:
 800aec0:	b510      	push	{r4, lr}
 800aec2:	4604      	mov	r4, r0
 800aec4:	f7ff fff0 	bl	800aea8 <__sfp_lock_acquire>
 800aec8:	6a23      	ldr	r3, [r4, #32]
 800aeca:	b11b      	cbz	r3, 800aed4 <__sinit+0x14>
 800aecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aed0:	f7ff bff0 	b.w	800aeb4 <__sfp_lock_release>
 800aed4:	4b04      	ldr	r3, [pc, #16]	@ (800aee8 <__sinit+0x28>)
 800aed6:	6223      	str	r3, [r4, #32]
 800aed8:	4b04      	ldr	r3, [pc, #16]	@ (800aeec <__sinit+0x2c>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d1f5      	bne.n	800aecc <__sinit+0xc>
 800aee0:	f7ff ffc4 	bl	800ae6c <global_stdio_init.part.0>
 800aee4:	e7f2      	b.n	800aecc <__sinit+0xc>
 800aee6:	bf00      	nop
 800aee8:	0800ae2d 	.word	0x0800ae2d
 800aeec:	20002460 	.word	0x20002460

0800aef0 <_fwalk_sglue>:
 800aef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aef4:	4607      	mov	r7, r0
 800aef6:	4688      	mov	r8, r1
 800aef8:	4614      	mov	r4, r2
 800aefa:	2600      	movs	r6, #0
 800aefc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af00:	f1b9 0901 	subs.w	r9, r9, #1
 800af04:	d505      	bpl.n	800af12 <_fwalk_sglue+0x22>
 800af06:	6824      	ldr	r4, [r4, #0]
 800af08:	2c00      	cmp	r4, #0
 800af0a:	d1f7      	bne.n	800aefc <_fwalk_sglue+0xc>
 800af0c:	4630      	mov	r0, r6
 800af0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af12:	89ab      	ldrh	r3, [r5, #12]
 800af14:	2b01      	cmp	r3, #1
 800af16:	d907      	bls.n	800af28 <_fwalk_sglue+0x38>
 800af18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af1c:	3301      	adds	r3, #1
 800af1e:	d003      	beq.n	800af28 <_fwalk_sglue+0x38>
 800af20:	4629      	mov	r1, r5
 800af22:	4638      	mov	r0, r7
 800af24:	47c0      	blx	r8
 800af26:	4306      	orrs	r6, r0
 800af28:	3568      	adds	r5, #104	@ 0x68
 800af2a:	e7e9      	b.n	800af00 <_fwalk_sglue+0x10>

0800af2c <iprintf>:
 800af2c:	b40f      	push	{r0, r1, r2, r3}
 800af2e:	b507      	push	{r0, r1, r2, lr}
 800af30:	4906      	ldr	r1, [pc, #24]	@ (800af4c <iprintf+0x20>)
 800af32:	ab04      	add	r3, sp, #16
 800af34:	6808      	ldr	r0, [r1, #0]
 800af36:	f853 2b04 	ldr.w	r2, [r3], #4
 800af3a:	6881      	ldr	r1, [r0, #8]
 800af3c:	9301      	str	r3, [sp, #4]
 800af3e:	f001 fd1b 	bl	800c978 <_vfiprintf_r>
 800af42:	b003      	add	sp, #12
 800af44:	f85d eb04 	ldr.w	lr, [sp], #4
 800af48:	b004      	add	sp, #16
 800af4a:	4770      	bx	lr
 800af4c:	2000001c 	.word	0x2000001c

0800af50 <_puts_r>:
 800af50:	6a03      	ldr	r3, [r0, #32]
 800af52:	b570      	push	{r4, r5, r6, lr}
 800af54:	6884      	ldr	r4, [r0, #8]
 800af56:	4605      	mov	r5, r0
 800af58:	460e      	mov	r6, r1
 800af5a:	b90b      	cbnz	r3, 800af60 <_puts_r+0x10>
 800af5c:	f7ff ffb0 	bl	800aec0 <__sinit>
 800af60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af62:	07db      	lsls	r3, r3, #31
 800af64:	d405      	bmi.n	800af72 <_puts_r+0x22>
 800af66:	89a3      	ldrh	r3, [r4, #12]
 800af68:	0598      	lsls	r0, r3, #22
 800af6a:	d402      	bmi.n	800af72 <_puts_r+0x22>
 800af6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af6e:	f000 f9f8 	bl	800b362 <__retarget_lock_acquire_recursive>
 800af72:	89a3      	ldrh	r3, [r4, #12]
 800af74:	0719      	lsls	r1, r3, #28
 800af76:	d502      	bpl.n	800af7e <_puts_r+0x2e>
 800af78:	6923      	ldr	r3, [r4, #16]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d135      	bne.n	800afea <_puts_r+0x9a>
 800af7e:	4621      	mov	r1, r4
 800af80:	4628      	mov	r0, r5
 800af82:	f000 f8c5 	bl	800b110 <__swsetup_r>
 800af86:	b380      	cbz	r0, 800afea <_puts_r+0x9a>
 800af88:	f04f 35ff 	mov.w	r5, #4294967295
 800af8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af8e:	07da      	lsls	r2, r3, #31
 800af90:	d405      	bmi.n	800af9e <_puts_r+0x4e>
 800af92:	89a3      	ldrh	r3, [r4, #12]
 800af94:	059b      	lsls	r3, r3, #22
 800af96:	d402      	bmi.n	800af9e <_puts_r+0x4e>
 800af98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af9a:	f000 f9e3 	bl	800b364 <__retarget_lock_release_recursive>
 800af9e:	4628      	mov	r0, r5
 800afa0:	bd70      	pop	{r4, r5, r6, pc}
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	da04      	bge.n	800afb0 <_puts_r+0x60>
 800afa6:	69a2      	ldr	r2, [r4, #24]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	dc17      	bgt.n	800afdc <_puts_r+0x8c>
 800afac:	290a      	cmp	r1, #10
 800afae:	d015      	beq.n	800afdc <_puts_r+0x8c>
 800afb0:	6823      	ldr	r3, [r4, #0]
 800afb2:	1c5a      	adds	r2, r3, #1
 800afb4:	6022      	str	r2, [r4, #0]
 800afb6:	7019      	strb	r1, [r3, #0]
 800afb8:	68a3      	ldr	r3, [r4, #8]
 800afba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800afbe:	3b01      	subs	r3, #1
 800afc0:	60a3      	str	r3, [r4, #8]
 800afc2:	2900      	cmp	r1, #0
 800afc4:	d1ed      	bne.n	800afa2 <_puts_r+0x52>
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	da11      	bge.n	800afee <_puts_r+0x9e>
 800afca:	4622      	mov	r2, r4
 800afcc:	210a      	movs	r1, #10
 800afce:	4628      	mov	r0, r5
 800afd0:	f000 f85f 	bl	800b092 <__swbuf_r>
 800afd4:	3001      	adds	r0, #1
 800afd6:	d0d7      	beq.n	800af88 <_puts_r+0x38>
 800afd8:	250a      	movs	r5, #10
 800afda:	e7d7      	b.n	800af8c <_puts_r+0x3c>
 800afdc:	4622      	mov	r2, r4
 800afde:	4628      	mov	r0, r5
 800afe0:	f000 f857 	bl	800b092 <__swbuf_r>
 800afe4:	3001      	adds	r0, #1
 800afe6:	d1e7      	bne.n	800afb8 <_puts_r+0x68>
 800afe8:	e7ce      	b.n	800af88 <_puts_r+0x38>
 800afea:	3e01      	subs	r6, #1
 800afec:	e7e4      	b.n	800afb8 <_puts_r+0x68>
 800afee:	6823      	ldr	r3, [r4, #0]
 800aff0:	1c5a      	adds	r2, r3, #1
 800aff2:	6022      	str	r2, [r4, #0]
 800aff4:	220a      	movs	r2, #10
 800aff6:	701a      	strb	r2, [r3, #0]
 800aff8:	e7ee      	b.n	800afd8 <_puts_r+0x88>
	...

0800affc <puts>:
 800affc:	4b02      	ldr	r3, [pc, #8]	@ (800b008 <puts+0xc>)
 800affe:	4601      	mov	r1, r0
 800b000:	6818      	ldr	r0, [r3, #0]
 800b002:	f7ff bfa5 	b.w	800af50 <_puts_r>
 800b006:	bf00      	nop
 800b008:	2000001c 	.word	0x2000001c

0800b00c <__sread>:
 800b00c:	b510      	push	{r4, lr}
 800b00e:	460c      	mov	r4, r1
 800b010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b014:	f000 f956 	bl	800b2c4 <_read_r>
 800b018:	2800      	cmp	r0, #0
 800b01a:	bfab      	itete	ge
 800b01c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b01e:	89a3      	ldrhlt	r3, [r4, #12]
 800b020:	181b      	addge	r3, r3, r0
 800b022:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b026:	bfac      	ite	ge
 800b028:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b02a:	81a3      	strhlt	r3, [r4, #12]
 800b02c:	bd10      	pop	{r4, pc}

0800b02e <__swrite>:
 800b02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b032:	461f      	mov	r7, r3
 800b034:	898b      	ldrh	r3, [r1, #12]
 800b036:	05db      	lsls	r3, r3, #23
 800b038:	4605      	mov	r5, r0
 800b03a:	460c      	mov	r4, r1
 800b03c:	4616      	mov	r6, r2
 800b03e:	d505      	bpl.n	800b04c <__swrite+0x1e>
 800b040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b044:	2302      	movs	r3, #2
 800b046:	2200      	movs	r2, #0
 800b048:	f000 f92a 	bl	800b2a0 <_lseek_r>
 800b04c:	89a3      	ldrh	r3, [r4, #12]
 800b04e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b052:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b056:	81a3      	strh	r3, [r4, #12]
 800b058:	4632      	mov	r2, r6
 800b05a:	463b      	mov	r3, r7
 800b05c:	4628      	mov	r0, r5
 800b05e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b062:	f000 b941 	b.w	800b2e8 <_write_r>

0800b066 <__sseek>:
 800b066:	b510      	push	{r4, lr}
 800b068:	460c      	mov	r4, r1
 800b06a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b06e:	f000 f917 	bl	800b2a0 <_lseek_r>
 800b072:	1c43      	adds	r3, r0, #1
 800b074:	89a3      	ldrh	r3, [r4, #12]
 800b076:	bf15      	itete	ne
 800b078:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b07a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b07e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b082:	81a3      	strheq	r3, [r4, #12]
 800b084:	bf18      	it	ne
 800b086:	81a3      	strhne	r3, [r4, #12]
 800b088:	bd10      	pop	{r4, pc}

0800b08a <__sclose>:
 800b08a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b08e:	f000 b8a1 	b.w	800b1d4 <_close_r>

0800b092 <__swbuf_r>:
 800b092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b094:	460e      	mov	r6, r1
 800b096:	4614      	mov	r4, r2
 800b098:	4605      	mov	r5, r0
 800b09a:	b118      	cbz	r0, 800b0a4 <__swbuf_r+0x12>
 800b09c:	6a03      	ldr	r3, [r0, #32]
 800b09e:	b90b      	cbnz	r3, 800b0a4 <__swbuf_r+0x12>
 800b0a0:	f7ff ff0e 	bl	800aec0 <__sinit>
 800b0a4:	69a3      	ldr	r3, [r4, #24]
 800b0a6:	60a3      	str	r3, [r4, #8]
 800b0a8:	89a3      	ldrh	r3, [r4, #12]
 800b0aa:	071a      	lsls	r2, r3, #28
 800b0ac:	d501      	bpl.n	800b0b2 <__swbuf_r+0x20>
 800b0ae:	6923      	ldr	r3, [r4, #16]
 800b0b0:	b943      	cbnz	r3, 800b0c4 <__swbuf_r+0x32>
 800b0b2:	4621      	mov	r1, r4
 800b0b4:	4628      	mov	r0, r5
 800b0b6:	f000 f82b 	bl	800b110 <__swsetup_r>
 800b0ba:	b118      	cbz	r0, 800b0c4 <__swbuf_r+0x32>
 800b0bc:	f04f 37ff 	mov.w	r7, #4294967295
 800b0c0:	4638      	mov	r0, r7
 800b0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	6922      	ldr	r2, [r4, #16]
 800b0c8:	1a98      	subs	r0, r3, r2
 800b0ca:	6963      	ldr	r3, [r4, #20]
 800b0cc:	b2f6      	uxtb	r6, r6
 800b0ce:	4283      	cmp	r3, r0
 800b0d0:	4637      	mov	r7, r6
 800b0d2:	dc05      	bgt.n	800b0e0 <__swbuf_r+0x4e>
 800b0d4:	4621      	mov	r1, r4
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	f001 fdea 	bl	800ccb0 <_fflush_r>
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	d1ed      	bne.n	800b0bc <__swbuf_r+0x2a>
 800b0e0:	68a3      	ldr	r3, [r4, #8]
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	60a3      	str	r3, [r4, #8]
 800b0e6:	6823      	ldr	r3, [r4, #0]
 800b0e8:	1c5a      	adds	r2, r3, #1
 800b0ea:	6022      	str	r2, [r4, #0]
 800b0ec:	701e      	strb	r6, [r3, #0]
 800b0ee:	6962      	ldr	r2, [r4, #20]
 800b0f0:	1c43      	adds	r3, r0, #1
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d004      	beq.n	800b100 <__swbuf_r+0x6e>
 800b0f6:	89a3      	ldrh	r3, [r4, #12]
 800b0f8:	07db      	lsls	r3, r3, #31
 800b0fa:	d5e1      	bpl.n	800b0c0 <__swbuf_r+0x2e>
 800b0fc:	2e0a      	cmp	r6, #10
 800b0fe:	d1df      	bne.n	800b0c0 <__swbuf_r+0x2e>
 800b100:	4621      	mov	r1, r4
 800b102:	4628      	mov	r0, r5
 800b104:	f001 fdd4 	bl	800ccb0 <_fflush_r>
 800b108:	2800      	cmp	r0, #0
 800b10a:	d0d9      	beq.n	800b0c0 <__swbuf_r+0x2e>
 800b10c:	e7d6      	b.n	800b0bc <__swbuf_r+0x2a>
	...

0800b110 <__swsetup_r>:
 800b110:	b538      	push	{r3, r4, r5, lr}
 800b112:	4b29      	ldr	r3, [pc, #164]	@ (800b1b8 <__swsetup_r+0xa8>)
 800b114:	4605      	mov	r5, r0
 800b116:	6818      	ldr	r0, [r3, #0]
 800b118:	460c      	mov	r4, r1
 800b11a:	b118      	cbz	r0, 800b124 <__swsetup_r+0x14>
 800b11c:	6a03      	ldr	r3, [r0, #32]
 800b11e:	b90b      	cbnz	r3, 800b124 <__swsetup_r+0x14>
 800b120:	f7ff fece 	bl	800aec0 <__sinit>
 800b124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b128:	0719      	lsls	r1, r3, #28
 800b12a:	d422      	bmi.n	800b172 <__swsetup_r+0x62>
 800b12c:	06da      	lsls	r2, r3, #27
 800b12e:	d407      	bmi.n	800b140 <__swsetup_r+0x30>
 800b130:	2209      	movs	r2, #9
 800b132:	602a      	str	r2, [r5, #0]
 800b134:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b138:	81a3      	strh	r3, [r4, #12]
 800b13a:	f04f 30ff 	mov.w	r0, #4294967295
 800b13e:	e033      	b.n	800b1a8 <__swsetup_r+0x98>
 800b140:	0758      	lsls	r0, r3, #29
 800b142:	d512      	bpl.n	800b16a <__swsetup_r+0x5a>
 800b144:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b146:	b141      	cbz	r1, 800b15a <__swsetup_r+0x4a>
 800b148:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b14c:	4299      	cmp	r1, r3
 800b14e:	d002      	beq.n	800b156 <__swsetup_r+0x46>
 800b150:	4628      	mov	r0, r5
 800b152:	f000 ff65 	bl	800c020 <_free_r>
 800b156:	2300      	movs	r3, #0
 800b158:	6363      	str	r3, [r4, #52]	@ 0x34
 800b15a:	89a3      	ldrh	r3, [r4, #12]
 800b15c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b160:	81a3      	strh	r3, [r4, #12]
 800b162:	2300      	movs	r3, #0
 800b164:	6063      	str	r3, [r4, #4]
 800b166:	6923      	ldr	r3, [r4, #16]
 800b168:	6023      	str	r3, [r4, #0]
 800b16a:	89a3      	ldrh	r3, [r4, #12]
 800b16c:	f043 0308 	orr.w	r3, r3, #8
 800b170:	81a3      	strh	r3, [r4, #12]
 800b172:	6923      	ldr	r3, [r4, #16]
 800b174:	b94b      	cbnz	r3, 800b18a <__swsetup_r+0x7a>
 800b176:	89a3      	ldrh	r3, [r4, #12]
 800b178:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b17c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b180:	d003      	beq.n	800b18a <__swsetup_r+0x7a>
 800b182:	4621      	mov	r1, r4
 800b184:	4628      	mov	r0, r5
 800b186:	f001 fde1 	bl	800cd4c <__smakebuf_r>
 800b18a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b18e:	f013 0201 	ands.w	r2, r3, #1
 800b192:	d00a      	beq.n	800b1aa <__swsetup_r+0x9a>
 800b194:	2200      	movs	r2, #0
 800b196:	60a2      	str	r2, [r4, #8]
 800b198:	6962      	ldr	r2, [r4, #20]
 800b19a:	4252      	negs	r2, r2
 800b19c:	61a2      	str	r2, [r4, #24]
 800b19e:	6922      	ldr	r2, [r4, #16]
 800b1a0:	b942      	cbnz	r2, 800b1b4 <__swsetup_r+0xa4>
 800b1a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b1a6:	d1c5      	bne.n	800b134 <__swsetup_r+0x24>
 800b1a8:	bd38      	pop	{r3, r4, r5, pc}
 800b1aa:	0799      	lsls	r1, r3, #30
 800b1ac:	bf58      	it	pl
 800b1ae:	6962      	ldrpl	r2, [r4, #20]
 800b1b0:	60a2      	str	r2, [r4, #8]
 800b1b2:	e7f4      	b.n	800b19e <__swsetup_r+0x8e>
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	e7f7      	b.n	800b1a8 <__swsetup_r+0x98>
 800b1b8:	2000001c 	.word	0x2000001c

0800b1bc <memset>:
 800b1bc:	4402      	add	r2, r0
 800b1be:	4603      	mov	r3, r0
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d100      	bne.n	800b1c6 <memset+0xa>
 800b1c4:	4770      	bx	lr
 800b1c6:	f803 1b01 	strb.w	r1, [r3], #1
 800b1ca:	e7f9      	b.n	800b1c0 <memset+0x4>

0800b1cc <_localeconv_r>:
 800b1cc:	4800      	ldr	r0, [pc, #0]	@ (800b1d0 <_localeconv_r+0x4>)
 800b1ce:	4770      	bx	lr
 800b1d0:	2000015c 	.word	0x2000015c

0800b1d4 <_close_r>:
 800b1d4:	b538      	push	{r3, r4, r5, lr}
 800b1d6:	4d06      	ldr	r5, [pc, #24]	@ (800b1f0 <_close_r+0x1c>)
 800b1d8:	2300      	movs	r3, #0
 800b1da:	4604      	mov	r4, r0
 800b1dc:	4608      	mov	r0, r1
 800b1de:	602b      	str	r3, [r5, #0]
 800b1e0:	f7f7 f8c8 	bl	8002374 <_close>
 800b1e4:	1c43      	adds	r3, r0, #1
 800b1e6:	d102      	bne.n	800b1ee <_close_r+0x1a>
 800b1e8:	682b      	ldr	r3, [r5, #0]
 800b1ea:	b103      	cbz	r3, 800b1ee <_close_r+0x1a>
 800b1ec:	6023      	str	r3, [r4, #0]
 800b1ee:	bd38      	pop	{r3, r4, r5, pc}
 800b1f0:	20002464 	.word	0x20002464

0800b1f4 <_reclaim_reent>:
 800b1f4:	4b29      	ldr	r3, [pc, #164]	@ (800b29c <_reclaim_reent+0xa8>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4283      	cmp	r3, r0
 800b1fa:	b570      	push	{r4, r5, r6, lr}
 800b1fc:	4604      	mov	r4, r0
 800b1fe:	d04b      	beq.n	800b298 <_reclaim_reent+0xa4>
 800b200:	69c3      	ldr	r3, [r0, #28]
 800b202:	b1ab      	cbz	r3, 800b230 <_reclaim_reent+0x3c>
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	b16b      	cbz	r3, 800b224 <_reclaim_reent+0x30>
 800b208:	2500      	movs	r5, #0
 800b20a:	69e3      	ldr	r3, [r4, #28]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	5959      	ldr	r1, [r3, r5]
 800b210:	2900      	cmp	r1, #0
 800b212:	d13b      	bne.n	800b28c <_reclaim_reent+0x98>
 800b214:	3504      	adds	r5, #4
 800b216:	2d80      	cmp	r5, #128	@ 0x80
 800b218:	d1f7      	bne.n	800b20a <_reclaim_reent+0x16>
 800b21a:	69e3      	ldr	r3, [r4, #28]
 800b21c:	4620      	mov	r0, r4
 800b21e:	68d9      	ldr	r1, [r3, #12]
 800b220:	f000 fefe 	bl	800c020 <_free_r>
 800b224:	69e3      	ldr	r3, [r4, #28]
 800b226:	6819      	ldr	r1, [r3, #0]
 800b228:	b111      	cbz	r1, 800b230 <_reclaim_reent+0x3c>
 800b22a:	4620      	mov	r0, r4
 800b22c:	f000 fef8 	bl	800c020 <_free_r>
 800b230:	6961      	ldr	r1, [r4, #20]
 800b232:	b111      	cbz	r1, 800b23a <_reclaim_reent+0x46>
 800b234:	4620      	mov	r0, r4
 800b236:	f000 fef3 	bl	800c020 <_free_r>
 800b23a:	69e1      	ldr	r1, [r4, #28]
 800b23c:	b111      	cbz	r1, 800b244 <_reclaim_reent+0x50>
 800b23e:	4620      	mov	r0, r4
 800b240:	f000 feee 	bl	800c020 <_free_r>
 800b244:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b246:	b111      	cbz	r1, 800b24e <_reclaim_reent+0x5a>
 800b248:	4620      	mov	r0, r4
 800b24a:	f000 fee9 	bl	800c020 <_free_r>
 800b24e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b250:	b111      	cbz	r1, 800b258 <_reclaim_reent+0x64>
 800b252:	4620      	mov	r0, r4
 800b254:	f000 fee4 	bl	800c020 <_free_r>
 800b258:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b25a:	b111      	cbz	r1, 800b262 <_reclaim_reent+0x6e>
 800b25c:	4620      	mov	r0, r4
 800b25e:	f000 fedf 	bl	800c020 <_free_r>
 800b262:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b264:	b111      	cbz	r1, 800b26c <_reclaim_reent+0x78>
 800b266:	4620      	mov	r0, r4
 800b268:	f000 feda 	bl	800c020 <_free_r>
 800b26c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b26e:	b111      	cbz	r1, 800b276 <_reclaim_reent+0x82>
 800b270:	4620      	mov	r0, r4
 800b272:	f000 fed5 	bl	800c020 <_free_r>
 800b276:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b278:	b111      	cbz	r1, 800b280 <_reclaim_reent+0x8c>
 800b27a:	4620      	mov	r0, r4
 800b27c:	f000 fed0 	bl	800c020 <_free_r>
 800b280:	6a23      	ldr	r3, [r4, #32]
 800b282:	b14b      	cbz	r3, 800b298 <_reclaim_reent+0xa4>
 800b284:	4620      	mov	r0, r4
 800b286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b28a:	4718      	bx	r3
 800b28c:	680e      	ldr	r6, [r1, #0]
 800b28e:	4620      	mov	r0, r4
 800b290:	f000 fec6 	bl	800c020 <_free_r>
 800b294:	4631      	mov	r1, r6
 800b296:	e7bb      	b.n	800b210 <_reclaim_reent+0x1c>
 800b298:	bd70      	pop	{r4, r5, r6, pc}
 800b29a:	bf00      	nop
 800b29c:	2000001c 	.word	0x2000001c

0800b2a0 <_lseek_r>:
 800b2a0:	b538      	push	{r3, r4, r5, lr}
 800b2a2:	4d07      	ldr	r5, [pc, #28]	@ (800b2c0 <_lseek_r+0x20>)
 800b2a4:	4604      	mov	r4, r0
 800b2a6:	4608      	mov	r0, r1
 800b2a8:	4611      	mov	r1, r2
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	602a      	str	r2, [r5, #0]
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	f7f7 f887 	bl	80023c2 <_lseek>
 800b2b4:	1c43      	adds	r3, r0, #1
 800b2b6:	d102      	bne.n	800b2be <_lseek_r+0x1e>
 800b2b8:	682b      	ldr	r3, [r5, #0]
 800b2ba:	b103      	cbz	r3, 800b2be <_lseek_r+0x1e>
 800b2bc:	6023      	str	r3, [r4, #0]
 800b2be:	bd38      	pop	{r3, r4, r5, pc}
 800b2c0:	20002464 	.word	0x20002464

0800b2c4 <_read_r>:
 800b2c4:	b538      	push	{r3, r4, r5, lr}
 800b2c6:	4d07      	ldr	r5, [pc, #28]	@ (800b2e4 <_read_r+0x20>)
 800b2c8:	4604      	mov	r4, r0
 800b2ca:	4608      	mov	r0, r1
 800b2cc:	4611      	mov	r1, r2
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	602a      	str	r2, [r5, #0]
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	f7f7 f831 	bl	800233a <_read>
 800b2d8:	1c43      	adds	r3, r0, #1
 800b2da:	d102      	bne.n	800b2e2 <_read_r+0x1e>
 800b2dc:	682b      	ldr	r3, [r5, #0]
 800b2de:	b103      	cbz	r3, 800b2e2 <_read_r+0x1e>
 800b2e0:	6023      	str	r3, [r4, #0]
 800b2e2:	bd38      	pop	{r3, r4, r5, pc}
 800b2e4:	20002464 	.word	0x20002464

0800b2e8 <_write_r>:
 800b2e8:	b538      	push	{r3, r4, r5, lr}
 800b2ea:	4d07      	ldr	r5, [pc, #28]	@ (800b308 <_write_r+0x20>)
 800b2ec:	4604      	mov	r4, r0
 800b2ee:	4608      	mov	r0, r1
 800b2f0:	4611      	mov	r1, r2
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	602a      	str	r2, [r5, #0]
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	f7f6 f916 	bl	8001528 <_write>
 800b2fc:	1c43      	adds	r3, r0, #1
 800b2fe:	d102      	bne.n	800b306 <_write_r+0x1e>
 800b300:	682b      	ldr	r3, [r5, #0]
 800b302:	b103      	cbz	r3, 800b306 <_write_r+0x1e>
 800b304:	6023      	str	r3, [r4, #0]
 800b306:	bd38      	pop	{r3, r4, r5, pc}
 800b308:	20002464 	.word	0x20002464

0800b30c <__errno>:
 800b30c:	4b01      	ldr	r3, [pc, #4]	@ (800b314 <__errno+0x8>)
 800b30e:	6818      	ldr	r0, [r3, #0]
 800b310:	4770      	bx	lr
 800b312:	bf00      	nop
 800b314:	2000001c 	.word	0x2000001c

0800b318 <__libc_init_array>:
 800b318:	b570      	push	{r4, r5, r6, lr}
 800b31a:	4d0d      	ldr	r5, [pc, #52]	@ (800b350 <__libc_init_array+0x38>)
 800b31c:	4c0d      	ldr	r4, [pc, #52]	@ (800b354 <__libc_init_array+0x3c>)
 800b31e:	1b64      	subs	r4, r4, r5
 800b320:	10a4      	asrs	r4, r4, #2
 800b322:	2600      	movs	r6, #0
 800b324:	42a6      	cmp	r6, r4
 800b326:	d109      	bne.n	800b33c <__libc_init_array+0x24>
 800b328:	4d0b      	ldr	r5, [pc, #44]	@ (800b358 <__libc_init_array+0x40>)
 800b32a:	4c0c      	ldr	r4, [pc, #48]	@ (800b35c <__libc_init_array+0x44>)
 800b32c:	f001 fe2c 	bl	800cf88 <_init>
 800b330:	1b64      	subs	r4, r4, r5
 800b332:	10a4      	asrs	r4, r4, #2
 800b334:	2600      	movs	r6, #0
 800b336:	42a6      	cmp	r6, r4
 800b338:	d105      	bne.n	800b346 <__libc_init_array+0x2e>
 800b33a:	bd70      	pop	{r4, r5, r6, pc}
 800b33c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b340:	4798      	blx	r3
 800b342:	3601      	adds	r6, #1
 800b344:	e7ee      	b.n	800b324 <__libc_init_array+0xc>
 800b346:	f855 3b04 	ldr.w	r3, [r5], #4
 800b34a:	4798      	blx	r3
 800b34c:	3601      	adds	r6, #1
 800b34e:	e7f2      	b.n	800b336 <__libc_init_array+0x1e>
 800b350:	0800dd20 	.word	0x0800dd20
 800b354:	0800dd20 	.word	0x0800dd20
 800b358:	0800dd20 	.word	0x0800dd20
 800b35c:	0800dd24 	.word	0x0800dd24

0800b360 <__retarget_lock_init_recursive>:
 800b360:	4770      	bx	lr

0800b362 <__retarget_lock_acquire_recursive>:
 800b362:	4770      	bx	lr

0800b364 <__retarget_lock_release_recursive>:
 800b364:	4770      	bx	lr

0800b366 <memcpy>:
 800b366:	440a      	add	r2, r1
 800b368:	4291      	cmp	r1, r2
 800b36a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b36e:	d100      	bne.n	800b372 <memcpy+0xc>
 800b370:	4770      	bx	lr
 800b372:	b510      	push	{r4, lr}
 800b374:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b378:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b37c:	4291      	cmp	r1, r2
 800b37e:	d1f9      	bne.n	800b374 <memcpy+0xe>
 800b380:	bd10      	pop	{r4, pc}

0800b382 <quorem>:
 800b382:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b386:	6903      	ldr	r3, [r0, #16]
 800b388:	690c      	ldr	r4, [r1, #16]
 800b38a:	42a3      	cmp	r3, r4
 800b38c:	4607      	mov	r7, r0
 800b38e:	db7e      	blt.n	800b48e <quorem+0x10c>
 800b390:	3c01      	subs	r4, #1
 800b392:	f101 0814 	add.w	r8, r1, #20
 800b396:	00a3      	lsls	r3, r4, #2
 800b398:	f100 0514 	add.w	r5, r0, #20
 800b39c:	9300      	str	r3, [sp, #0]
 800b39e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3a2:	9301      	str	r3, [sp, #4]
 800b3a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b3a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b3b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b3b8:	d32e      	bcc.n	800b418 <quorem+0x96>
 800b3ba:	f04f 0a00 	mov.w	sl, #0
 800b3be:	46c4      	mov	ip, r8
 800b3c0:	46ae      	mov	lr, r5
 800b3c2:	46d3      	mov	fp, sl
 800b3c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b3c8:	b298      	uxth	r0, r3
 800b3ca:	fb06 a000 	mla	r0, r6, r0, sl
 800b3ce:	0c02      	lsrs	r2, r0, #16
 800b3d0:	0c1b      	lsrs	r3, r3, #16
 800b3d2:	fb06 2303 	mla	r3, r6, r3, r2
 800b3d6:	f8de 2000 	ldr.w	r2, [lr]
 800b3da:	b280      	uxth	r0, r0
 800b3dc:	b292      	uxth	r2, r2
 800b3de:	1a12      	subs	r2, r2, r0
 800b3e0:	445a      	add	r2, fp
 800b3e2:	f8de 0000 	ldr.w	r0, [lr]
 800b3e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b3f0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b3f4:	b292      	uxth	r2, r2
 800b3f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b3fa:	45e1      	cmp	r9, ip
 800b3fc:	f84e 2b04 	str.w	r2, [lr], #4
 800b400:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b404:	d2de      	bcs.n	800b3c4 <quorem+0x42>
 800b406:	9b00      	ldr	r3, [sp, #0]
 800b408:	58eb      	ldr	r3, [r5, r3]
 800b40a:	b92b      	cbnz	r3, 800b418 <quorem+0x96>
 800b40c:	9b01      	ldr	r3, [sp, #4]
 800b40e:	3b04      	subs	r3, #4
 800b410:	429d      	cmp	r5, r3
 800b412:	461a      	mov	r2, r3
 800b414:	d32f      	bcc.n	800b476 <quorem+0xf4>
 800b416:	613c      	str	r4, [r7, #16]
 800b418:	4638      	mov	r0, r7
 800b41a:	f001 f97b 	bl	800c714 <__mcmp>
 800b41e:	2800      	cmp	r0, #0
 800b420:	db25      	blt.n	800b46e <quorem+0xec>
 800b422:	4629      	mov	r1, r5
 800b424:	2000      	movs	r0, #0
 800b426:	f858 2b04 	ldr.w	r2, [r8], #4
 800b42a:	f8d1 c000 	ldr.w	ip, [r1]
 800b42e:	fa1f fe82 	uxth.w	lr, r2
 800b432:	fa1f f38c 	uxth.w	r3, ip
 800b436:	eba3 030e 	sub.w	r3, r3, lr
 800b43a:	4403      	add	r3, r0
 800b43c:	0c12      	lsrs	r2, r2, #16
 800b43e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b442:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b446:	b29b      	uxth	r3, r3
 800b448:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b44c:	45c1      	cmp	r9, r8
 800b44e:	f841 3b04 	str.w	r3, [r1], #4
 800b452:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b456:	d2e6      	bcs.n	800b426 <quorem+0xa4>
 800b458:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b45c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b460:	b922      	cbnz	r2, 800b46c <quorem+0xea>
 800b462:	3b04      	subs	r3, #4
 800b464:	429d      	cmp	r5, r3
 800b466:	461a      	mov	r2, r3
 800b468:	d30b      	bcc.n	800b482 <quorem+0x100>
 800b46a:	613c      	str	r4, [r7, #16]
 800b46c:	3601      	adds	r6, #1
 800b46e:	4630      	mov	r0, r6
 800b470:	b003      	add	sp, #12
 800b472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b476:	6812      	ldr	r2, [r2, #0]
 800b478:	3b04      	subs	r3, #4
 800b47a:	2a00      	cmp	r2, #0
 800b47c:	d1cb      	bne.n	800b416 <quorem+0x94>
 800b47e:	3c01      	subs	r4, #1
 800b480:	e7c6      	b.n	800b410 <quorem+0x8e>
 800b482:	6812      	ldr	r2, [r2, #0]
 800b484:	3b04      	subs	r3, #4
 800b486:	2a00      	cmp	r2, #0
 800b488:	d1ef      	bne.n	800b46a <quorem+0xe8>
 800b48a:	3c01      	subs	r4, #1
 800b48c:	e7ea      	b.n	800b464 <quorem+0xe2>
 800b48e:	2000      	movs	r0, #0
 800b490:	e7ee      	b.n	800b470 <quorem+0xee>
 800b492:	0000      	movs	r0, r0
 800b494:	0000      	movs	r0, r0
	...

0800b498 <_dtoa_r>:
 800b498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49c:	69c7      	ldr	r7, [r0, #28]
 800b49e:	b099      	sub	sp, #100	@ 0x64
 800b4a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b4a4:	ec55 4b10 	vmov	r4, r5, d0
 800b4a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b4aa:	9109      	str	r1, [sp, #36]	@ 0x24
 800b4ac:	4683      	mov	fp, r0
 800b4ae:	920e      	str	r2, [sp, #56]	@ 0x38
 800b4b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b4b2:	b97f      	cbnz	r7, 800b4d4 <_dtoa_r+0x3c>
 800b4b4:	2010      	movs	r0, #16
 800b4b6:	f000 fdfd 	bl	800c0b4 <malloc>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	f8cb 001c 	str.w	r0, [fp, #28]
 800b4c0:	b920      	cbnz	r0, 800b4cc <_dtoa_r+0x34>
 800b4c2:	4ba7      	ldr	r3, [pc, #668]	@ (800b760 <_dtoa_r+0x2c8>)
 800b4c4:	21ef      	movs	r1, #239	@ 0xef
 800b4c6:	48a7      	ldr	r0, [pc, #668]	@ (800b764 <_dtoa_r+0x2cc>)
 800b4c8:	f001 fcae 	bl	800ce28 <__assert_func>
 800b4cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b4d0:	6007      	str	r7, [r0, #0]
 800b4d2:	60c7      	str	r7, [r0, #12]
 800b4d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b4d8:	6819      	ldr	r1, [r3, #0]
 800b4da:	b159      	cbz	r1, 800b4f4 <_dtoa_r+0x5c>
 800b4dc:	685a      	ldr	r2, [r3, #4]
 800b4de:	604a      	str	r2, [r1, #4]
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	4093      	lsls	r3, r2
 800b4e4:	608b      	str	r3, [r1, #8]
 800b4e6:	4658      	mov	r0, fp
 800b4e8:	f000 feda 	bl	800c2a0 <_Bfree>
 800b4ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	601a      	str	r2, [r3, #0]
 800b4f4:	1e2b      	subs	r3, r5, #0
 800b4f6:	bfb9      	ittee	lt
 800b4f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b4fc:	9303      	strlt	r3, [sp, #12]
 800b4fe:	2300      	movge	r3, #0
 800b500:	6033      	strge	r3, [r6, #0]
 800b502:	9f03      	ldr	r7, [sp, #12]
 800b504:	4b98      	ldr	r3, [pc, #608]	@ (800b768 <_dtoa_r+0x2d0>)
 800b506:	bfbc      	itt	lt
 800b508:	2201      	movlt	r2, #1
 800b50a:	6032      	strlt	r2, [r6, #0]
 800b50c:	43bb      	bics	r3, r7
 800b50e:	d112      	bne.n	800b536 <_dtoa_r+0x9e>
 800b510:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b512:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b516:	6013      	str	r3, [r2, #0]
 800b518:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b51c:	4323      	orrs	r3, r4
 800b51e:	f000 854d 	beq.w	800bfbc <_dtoa_r+0xb24>
 800b522:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b524:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b77c <_dtoa_r+0x2e4>
 800b528:	2b00      	cmp	r3, #0
 800b52a:	f000 854f 	beq.w	800bfcc <_dtoa_r+0xb34>
 800b52e:	f10a 0303 	add.w	r3, sl, #3
 800b532:	f000 bd49 	b.w	800bfc8 <_dtoa_r+0xb30>
 800b536:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b53a:	2200      	movs	r2, #0
 800b53c:	ec51 0b17 	vmov	r0, r1, d7
 800b540:	2300      	movs	r3, #0
 800b542:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b546:	f7f5 fabf 	bl	8000ac8 <__aeabi_dcmpeq>
 800b54a:	4680      	mov	r8, r0
 800b54c:	b158      	cbz	r0, 800b566 <_dtoa_r+0xce>
 800b54e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b550:	2301      	movs	r3, #1
 800b552:	6013      	str	r3, [r2, #0]
 800b554:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b556:	b113      	cbz	r3, 800b55e <_dtoa_r+0xc6>
 800b558:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b55a:	4b84      	ldr	r3, [pc, #528]	@ (800b76c <_dtoa_r+0x2d4>)
 800b55c:	6013      	str	r3, [r2, #0]
 800b55e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b780 <_dtoa_r+0x2e8>
 800b562:	f000 bd33 	b.w	800bfcc <_dtoa_r+0xb34>
 800b566:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b56a:	aa16      	add	r2, sp, #88	@ 0x58
 800b56c:	a917      	add	r1, sp, #92	@ 0x5c
 800b56e:	4658      	mov	r0, fp
 800b570:	f001 f980 	bl	800c874 <__d2b>
 800b574:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b578:	4681      	mov	r9, r0
 800b57a:	2e00      	cmp	r6, #0
 800b57c:	d077      	beq.n	800b66e <_dtoa_r+0x1d6>
 800b57e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b580:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b58c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b590:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b594:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b598:	4619      	mov	r1, r3
 800b59a:	2200      	movs	r2, #0
 800b59c:	4b74      	ldr	r3, [pc, #464]	@ (800b770 <_dtoa_r+0x2d8>)
 800b59e:	f7f4 fe73 	bl	8000288 <__aeabi_dsub>
 800b5a2:	a369      	add	r3, pc, #420	@ (adr r3, 800b748 <_dtoa_r+0x2b0>)
 800b5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a8:	f7f5 f826 	bl	80005f8 <__aeabi_dmul>
 800b5ac:	a368      	add	r3, pc, #416	@ (adr r3, 800b750 <_dtoa_r+0x2b8>)
 800b5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b2:	f7f4 fe6b 	bl	800028c <__adddf3>
 800b5b6:	4604      	mov	r4, r0
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	460d      	mov	r5, r1
 800b5bc:	f7f4 ffb2 	bl	8000524 <__aeabi_i2d>
 800b5c0:	a365      	add	r3, pc, #404	@ (adr r3, 800b758 <_dtoa_r+0x2c0>)
 800b5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c6:	f7f5 f817 	bl	80005f8 <__aeabi_dmul>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	4629      	mov	r1, r5
 800b5d2:	f7f4 fe5b 	bl	800028c <__adddf3>
 800b5d6:	4604      	mov	r4, r0
 800b5d8:	460d      	mov	r5, r1
 800b5da:	f7f5 fabd 	bl	8000b58 <__aeabi_d2iz>
 800b5de:	2200      	movs	r2, #0
 800b5e0:	4607      	mov	r7, r0
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	4629      	mov	r1, r5
 800b5e8:	f7f5 fa78 	bl	8000adc <__aeabi_dcmplt>
 800b5ec:	b140      	cbz	r0, 800b600 <_dtoa_r+0x168>
 800b5ee:	4638      	mov	r0, r7
 800b5f0:	f7f4 ff98 	bl	8000524 <__aeabi_i2d>
 800b5f4:	4622      	mov	r2, r4
 800b5f6:	462b      	mov	r3, r5
 800b5f8:	f7f5 fa66 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5fc:	b900      	cbnz	r0, 800b600 <_dtoa_r+0x168>
 800b5fe:	3f01      	subs	r7, #1
 800b600:	2f16      	cmp	r7, #22
 800b602:	d851      	bhi.n	800b6a8 <_dtoa_r+0x210>
 800b604:	4b5b      	ldr	r3, [pc, #364]	@ (800b774 <_dtoa_r+0x2dc>)
 800b606:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b612:	f7f5 fa63 	bl	8000adc <__aeabi_dcmplt>
 800b616:	2800      	cmp	r0, #0
 800b618:	d048      	beq.n	800b6ac <_dtoa_r+0x214>
 800b61a:	3f01      	subs	r7, #1
 800b61c:	2300      	movs	r3, #0
 800b61e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b620:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b622:	1b9b      	subs	r3, r3, r6
 800b624:	1e5a      	subs	r2, r3, #1
 800b626:	bf44      	itt	mi
 800b628:	f1c3 0801 	rsbmi	r8, r3, #1
 800b62c:	2300      	movmi	r3, #0
 800b62e:	9208      	str	r2, [sp, #32]
 800b630:	bf54      	ite	pl
 800b632:	f04f 0800 	movpl.w	r8, #0
 800b636:	9308      	strmi	r3, [sp, #32]
 800b638:	2f00      	cmp	r7, #0
 800b63a:	db39      	blt.n	800b6b0 <_dtoa_r+0x218>
 800b63c:	9b08      	ldr	r3, [sp, #32]
 800b63e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b640:	443b      	add	r3, r7
 800b642:	9308      	str	r3, [sp, #32]
 800b644:	2300      	movs	r3, #0
 800b646:	930a      	str	r3, [sp, #40]	@ 0x28
 800b648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b64a:	2b09      	cmp	r3, #9
 800b64c:	d864      	bhi.n	800b718 <_dtoa_r+0x280>
 800b64e:	2b05      	cmp	r3, #5
 800b650:	bfc4      	itt	gt
 800b652:	3b04      	subgt	r3, #4
 800b654:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b658:	f1a3 0302 	sub.w	r3, r3, #2
 800b65c:	bfcc      	ite	gt
 800b65e:	2400      	movgt	r4, #0
 800b660:	2401      	movle	r4, #1
 800b662:	2b03      	cmp	r3, #3
 800b664:	d863      	bhi.n	800b72e <_dtoa_r+0x296>
 800b666:	e8df f003 	tbb	[pc, r3]
 800b66a:	372a      	.short	0x372a
 800b66c:	5535      	.short	0x5535
 800b66e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b672:	441e      	add	r6, r3
 800b674:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b678:	2b20      	cmp	r3, #32
 800b67a:	bfc1      	itttt	gt
 800b67c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b680:	409f      	lslgt	r7, r3
 800b682:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b686:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b68a:	bfd6      	itet	le
 800b68c:	f1c3 0320 	rsble	r3, r3, #32
 800b690:	ea47 0003 	orrgt.w	r0, r7, r3
 800b694:	fa04 f003 	lslle.w	r0, r4, r3
 800b698:	f7f4 ff34 	bl	8000504 <__aeabi_ui2d>
 800b69c:	2201      	movs	r2, #1
 800b69e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b6a2:	3e01      	subs	r6, #1
 800b6a4:	9214      	str	r2, [sp, #80]	@ 0x50
 800b6a6:	e777      	b.n	800b598 <_dtoa_r+0x100>
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e7b8      	b.n	800b61e <_dtoa_r+0x186>
 800b6ac:	9012      	str	r0, [sp, #72]	@ 0x48
 800b6ae:	e7b7      	b.n	800b620 <_dtoa_r+0x188>
 800b6b0:	427b      	negs	r3, r7
 800b6b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	eba8 0807 	sub.w	r8, r8, r7
 800b6ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b6bc:	e7c4      	b.n	800b648 <_dtoa_r+0x1b0>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	dc35      	bgt.n	800b734 <_dtoa_r+0x29c>
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	9300      	str	r3, [sp, #0]
 800b6cc:	9307      	str	r3, [sp, #28]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b6d2:	e00b      	b.n	800b6ec <_dtoa_r+0x254>
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	e7f3      	b.n	800b6c0 <_dtoa_r+0x228>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6de:	18fb      	adds	r3, r7, r3
 800b6e0:	9300      	str	r3, [sp, #0]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	9307      	str	r3, [sp, #28]
 800b6e8:	bfb8      	it	lt
 800b6ea:	2301      	movlt	r3, #1
 800b6ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	2204      	movs	r2, #4
 800b6f4:	f102 0514 	add.w	r5, r2, #20
 800b6f8:	429d      	cmp	r5, r3
 800b6fa:	d91f      	bls.n	800b73c <_dtoa_r+0x2a4>
 800b6fc:	6041      	str	r1, [r0, #4]
 800b6fe:	4658      	mov	r0, fp
 800b700:	f000 fd8e 	bl	800c220 <_Balloc>
 800b704:	4682      	mov	sl, r0
 800b706:	2800      	cmp	r0, #0
 800b708:	d13c      	bne.n	800b784 <_dtoa_r+0x2ec>
 800b70a:	4b1b      	ldr	r3, [pc, #108]	@ (800b778 <_dtoa_r+0x2e0>)
 800b70c:	4602      	mov	r2, r0
 800b70e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b712:	e6d8      	b.n	800b4c6 <_dtoa_r+0x2e>
 800b714:	2301      	movs	r3, #1
 800b716:	e7e0      	b.n	800b6da <_dtoa_r+0x242>
 800b718:	2401      	movs	r4, #1
 800b71a:	2300      	movs	r3, #0
 800b71c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b71e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b720:	f04f 33ff 	mov.w	r3, #4294967295
 800b724:	9300      	str	r3, [sp, #0]
 800b726:	9307      	str	r3, [sp, #28]
 800b728:	2200      	movs	r2, #0
 800b72a:	2312      	movs	r3, #18
 800b72c:	e7d0      	b.n	800b6d0 <_dtoa_r+0x238>
 800b72e:	2301      	movs	r3, #1
 800b730:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b732:	e7f5      	b.n	800b720 <_dtoa_r+0x288>
 800b734:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b736:	9300      	str	r3, [sp, #0]
 800b738:	9307      	str	r3, [sp, #28]
 800b73a:	e7d7      	b.n	800b6ec <_dtoa_r+0x254>
 800b73c:	3101      	adds	r1, #1
 800b73e:	0052      	lsls	r2, r2, #1
 800b740:	e7d8      	b.n	800b6f4 <_dtoa_r+0x25c>
 800b742:	bf00      	nop
 800b744:	f3af 8000 	nop.w
 800b748:	636f4361 	.word	0x636f4361
 800b74c:	3fd287a7 	.word	0x3fd287a7
 800b750:	8b60c8b3 	.word	0x8b60c8b3
 800b754:	3fc68a28 	.word	0x3fc68a28
 800b758:	509f79fb 	.word	0x509f79fb
 800b75c:	3fd34413 	.word	0x3fd34413
 800b760:	0800d9e5 	.word	0x0800d9e5
 800b764:	0800d9fc 	.word	0x0800d9fc
 800b768:	7ff00000 	.word	0x7ff00000
 800b76c:	0800d9b5 	.word	0x0800d9b5
 800b770:	3ff80000 	.word	0x3ff80000
 800b774:	0800daf8 	.word	0x0800daf8
 800b778:	0800da54 	.word	0x0800da54
 800b77c:	0800d9e1 	.word	0x0800d9e1
 800b780:	0800d9b4 	.word	0x0800d9b4
 800b784:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b788:	6018      	str	r0, [r3, #0]
 800b78a:	9b07      	ldr	r3, [sp, #28]
 800b78c:	2b0e      	cmp	r3, #14
 800b78e:	f200 80a4 	bhi.w	800b8da <_dtoa_r+0x442>
 800b792:	2c00      	cmp	r4, #0
 800b794:	f000 80a1 	beq.w	800b8da <_dtoa_r+0x442>
 800b798:	2f00      	cmp	r7, #0
 800b79a:	dd33      	ble.n	800b804 <_dtoa_r+0x36c>
 800b79c:	4bad      	ldr	r3, [pc, #692]	@ (800ba54 <_dtoa_r+0x5bc>)
 800b79e:	f007 020f 	and.w	r2, r7, #15
 800b7a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7a6:	ed93 7b00 	vldr	d7, [r3]
 800b7aa:	05f8      	lsls	r0, r7, #23
 800b7ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b7b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b7b4:	d516      	bpl.n	800b7e4 <_dtoa_r+0x34c>
 800b7b6:	4ba8      	ldr	r3, [pc, #672]	@ (800ba58 <_dtoa_r+0x5c0>)
 800b7b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b7c0:	f7f5 f844 	bl	800084c <__aeabi_ddiv>
 800b7c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7c8:	f004 040f 	and.w	r4, r4, #15
 800b7cc:	2603      	movs	r6, #3
 800b7ce:	4da2      	ldr	r5, [pc, #648]	@ (800ba58 <_dtoa_r+0x5c0>)
 800b7d0:	b954      	cbnz	r4, 800b7e8 <_dtoa_r+0x350>
 800b7d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7da:	f7f5 f837 	bl	800084c <__aeabi_ddiv>
 800b7de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7e2:	e028      	b.n	800b836 <_dtoa_r+0x39e>
 800b7e4:	2602      	movs	r6, #2
 800b7e6:	e7f2      	b.n	800b7ce <_dtoa_r+0x336>
 800b7e8:	07e1      	lsls	r1, r4, #31
 800b7ea:	d508      	bpl.n	800b7fe <_dtoa_r+0x366>
 800b7ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b7f4:	f7f4 ff00 	bl	80005f8 <__aeabi_dmul>
 800b7f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b7fc:	3601      	adds	r6, #1
 800b7fe:	1064      	asrs	r4, r4, #1
 800b800:	3508      	adds	r5, #8
 800b802:	e7e5      	b.n	800b7d0 <_dtoa_r+0x338>
 800b804:	f000 80d2 	beq.w	800b9ac <_dtoa_r+0x514>
 800b808:	427c      	negs	r4, r7
 800b80a:	4b92      	ldr	r3, [pc, #584]	@ (800ba54 <_dtoa_r+0x5bc>)
 800b80c:	4d92      	ldr	r5, [pc, #584]	@ (800ba58 <_dtoa_r+0x5c0>)
 800b80e:	f004 020f 	and.w	r2, r4, #15
 800b812:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b81e:	f7f4 feeb 	bl	80005f8 <__aeabi_dmul>
 800b822:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b826:	1124      	asrs	r4, r4, #4
 800b828:	2300      	movs	r3, #0
 800b82a:	2602      	movs	r6, #2
 800b82c:	2c00      	cmp	r4, #0
 800b82e:	f040 80b2 	bne.w	800b996 <_dtoa_r+0x4fe>
 800b832:	2b00      	cmp	r3, #0
 800b834:	d1d3      	bne.n	800b7de <_dtoa_r+0x346>
 800b836:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b838:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	f000 80b7 	beq.w	800b9b0 <_dtoa_r+0x518>
 800b842:	4b86      	ldr	r3, [pc, #536]	@ (800ba5c <_dtoa_r+0x5c4>)
 800b844:	2200      	movs	r2, #0
 800b846:	4620      	mov	r0, r4
 800b848:	4629      	mov	r1, r5
 800b84a:	f7f5 f947 	bl	8000adc <__aeabi_dcmplt>
 800b84e:	2800      	cmp	r0, #0
 800b850:	f000 80ae 	beq.w	800b9b0 <_dtoa_r+0x518>
 800b854:	9b07      	ldr	r3, [sp, #28]
 800b856:	2b00      	cmp	r3, #0
 800b858:	f000 80aa 	beq.w	800b9b0 <_dtoa_r+0x518>
 800b85c:	9b00      	ldr	r3, [sp, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	dd37      	ble.n	800b8d2 <_dtoa_r+0x43a>
 800b862:	1e7b      	subs	r3, r7, #1
 800b864:	9304      	str	r3, [sp, #16]
 800b866:	4620      	mov	r0, r4
 800b868:	4b7d      	ldr	r3, [pc, #500]	@ (800ba60 <_dtoa_r+0x5c8>)
 800b86a:	2200      	movs	r2, #0
 800b86c:	4629      	mov	r1, r5
 800b86e:	f7f4 fec3 	bl	80005f8 <__aeabi_dmul>
 800b872:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b876:	9c00      	ldr	r4, [sp, #0]
 800b878:	3601      	adds	r6, #1
 800b87a:	4630      	mov	r0, r6
 800b87c:	f7f4 fe52 	bl	8000524 <__aeabi_i2d>
 800b880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b884:	f7f4 feb8 	bl	80005f8 <__aeabi_dmul>
 800b888:	4b76      	ldr	r3, [pc, #472]	@ (800ba64 <_dtoa_r+0x5cc>)
 800b88a:	2200      	movs	r2, #0
 800b88c:	f7f4 fcfe 	bl	800028c <__adddf3>
 800b890:	4605      	mov	r5, r0
 800b892:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b896:	2c00      	cmp	r4, #0
 800b898:	f040 808d 	bne.w	800b9b6 <_dtoa_r+0x51e>
 800b89c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8a0:	4b71      	ldr	r3, [pc, #452]	@ (800ba68 <_dtoa_r+0x5d0>)
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f7f4 fcf0 	bl	8000288 <__aeabi_dsub>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b8b0:	462a      	mov	r2, r5
 800b8b2:	4633      	mov	r3, r6
 800b8b4:	f7f5 f930 	bl	8000b18 <__aeabi_dcmpgt>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	f040 828b 	bne.w	800bdd4 <_dtoa_r+0x93c>
 800b8be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8c2:	462a      	mov	r2, r5
 800b8c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b8c8:	f7f5 f908 	bl	8000adc <__aeabi_dcmplt>
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	f040 8128 	bne.w	800bb22 <_dtoa_r+0x68a>
 800b8d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b8d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b8da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	f2c0 815a 	blt.w	800bb96 <_dtoa_r+0x6fe>
 800b8e2:	2f0e      	cmp	r7, #14
 800b8e4:	f300 8157 	bgt.w	800bb96 <_dtoa_r+0x6fe>
 800b8e8:	4b5a      	ldr	r3, [pc, #360]	@ (800ba54 <_dtoa_r+0x5bc>)
 800b8ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b8ee:	ed93 7b00 	vldr	d7, [r3]
 800b8f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	ed8d 7b00 	vstr	d7, [sp]
 800b8fa:	da03      	bge.n	800b904 <_dtoa_r+0x46c>
 800b8fc:	9b07      	ldr	r3, [sp, #28]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	f340 8101 	ble.w	800bb06 <_dtoa_r+0x66e>
 800b904:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b908:	4656      	mov	r6, sl
 800b90a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b90e:	4620      	mov	r0, r4
 800b910:	4629      	mov	r1, r5
 800b912:	f7f4 ff9b 	bl	800084c <__aeabi_ddiv>
 800b916:	f7f5 f91f 	bl	8000b58 <__aeabi_d2iz>
 800b91a:	4680      	mov	r8, r0
 800b91c:	f7f4 fe02 	bl	8000524 <__aeabi_i2d>
 800b920:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b924:	f7f4 fe68 	bl	80005f8 <__aeabi_dmul>
 800b928:	4602      	mov	r2, r0
 800b92a:	460b      	mov	r3, r1
 800b92c:	4620      	mov	r0, r4
 800b92e:	4629      	mov	r1, r5
 800b930:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b934:	f7f4 fca8 	bl	8000288 <__aeabi_dsub>
 800b938:	f806 4b01 	strb.w	r4, [r6], #1
 800b93c:	9d07      	ldr	r5, [sp, #28]
 800b93e:	eba6 040a 	sub.w	r4, r6, sl
 800b942:	42a5      	cmp	r5, r4
 800b944:	4602      	mov	r2, r0
 800b946:	460b      	mov	r3, r1
 800b948:	f040 8117 	bne.w	800bb7a <_dtoa_r+0x6e2>
 800b94c:	f7f4 fc9e 	bl	800028c <__adddf3>
 800b950:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b954:	4604      	mov	r4, r0
 800b956:	460d      	mov	r5, r1
 800b958:	f7f5 f8de 	bl	8000b18 <__aeabi_dcmpgt>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	f040 80f9 	bne.w	800bb54 <_dtoa_r+0x6bc>
 800b962:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b966:	4620      	mov	r0, r4
 800b968:	4629      	mov	r1, r5
 800b96a:	f7f5 f8ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800b96e:	b118      	cbz	r0, 800b978 <_dtoa_r+0x4e0>
 800b970:	f018 0f01 	tst.w	r8, #1
 800b974:	f040 80ee 	bne.w	800bb54 <_dtoa_r+0x6bc>
 800b978:	4649      	mov	r1, r9
 800b97a:	4658      	mov	r0, fp
 800b97c:	f000 fc90 	bl	800c2a0 <_Bfree>
 800b980:	2300      	movs	r3, #0
 800b982:	7033      	strb	r3, [r6, #0]
 800b984:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b986:	3701      	adds	r7, #1
 800b988:	601f      	str	r7, [r3, #0]
 800b98a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	f000 831d 	beq.w	800bfcc <_dtoa_r+0xb34>
 800b992:	601e      	str	r6, [r3, #0]
 800b994:	e31a      	b.n	800bfcc <_dtoa_r+0xb34>
 800b996:	07e2      	lsls	r2, r4, #31
 800b998:	d505      	bpl.n	800b9a6 <_dtoa_r+0x50e>
 800b99a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b99e:	f7f4 fe2b 	bl	80005f8 <__aeabi_dmul>
 800b9a2:	3601      	adds	r6, #1
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	1064      	asrs	r4, r4, #1
 800b9a8:	3508      	adds	r5, #8
 800b9aa:	e73f      	b.n	800b82c <_dtoa_r+0x394>
 800b9ac:	2602      	movs	r6, #2
 800b9ae:	e742      	b.n	800b836 <_dtoa_r+0x39e>
 800b9b0:	9c07      	ldr	r4, [sp, #28]
 800b9b2:	9704      	str	r7, [sp, #16]
 800b9b4:	e761      	b.n	800b87a <_dtoa_r+0x3e2>
 800b9b6:	4b27      	ldr	r3, [pc, #156]	@ (800ba54 <_dtoa_r+0x5bc>)
 800b9b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b9ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b9be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b9c2:	4454      	add	r4, sl
 800b9c4:	2900      	cmp	r1, #0
 800b9c6:	d053      	beq.n	800ba70 <_dtoa_r+0x5d8>
 800b9c8:	4928      	ldr	r1, [pc, #160]	@ (800ba6c <_dtoa_r+0x5d4>)
 800b9ca:	2000      	movs	r0, #0
 800b9cc:	f7f4 ff3e 	bl	800084c <__aeabi_ddiv>
 800b9d0:	4633      	mov	r3, r6
 800b9d2:	462a      	mov	r2, r5
 800b9d4:	f7f4 fc58 	bl	8000288 <__aeabi_dsub>
 800b9d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b9dc:	4656      	mov	r6, sl
 800b9de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9e2:	f7f5 f8b9 	bl	8000b58 <__aeabi_d2iz>
 800b9e6:	4605      	mov	r5, r0
 800b9e8:	f7f4 fd9c 	bl	8000524 <__aeabi_i2d>
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	460b      	mov	r3, r1
 800b9f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9f4:	f7f4 fc48 	bl	8000288 <__aeabi_dsub>
 800b9f8:	3530      	adds	r5, #48	@ 0x30
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ba02:	f806 5b01 	strb.w	r5, [r6], #1
 800ba06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ba0a:	f7f5 f867 	bl	8000adc <__aeabi_dcmplt>
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	d171      	bne.n	800baf6 <_dtoa_r+0x65e>
 800ba12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba16:	4911      	ldr	r1, [pc, #68]	@ (800ba5c <_dtoa_r+0x5c4>)
 800ba18:	2000      	movs	r0, #0
 800ba1a:	f7f4 fc35 	bl	8000288 <__aeabi_dsub>
 800ba1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ba22:	f7f5 f85b 	bl	8000adc <__aeabi_dcmplt>
 800ba26:	2800      	cmp	r0, #0
 800ba28:	f040 8095 	bne.w	800bb56 <_dtoa_r+0x6be>
 800ba2c:	42a6      	cmp	r6, r4
 800ba2e:	f43f af50 	beq.w	800b8d2 <_dtoa_r+0x43a>
 800ba32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ba36:	4b0a      	ldr	r3, [pc, #40]	@ (800ba60 <_dtoa_r+0x5c8>)
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f7f4 fddd 	bl	80005f8 <__aeabi_dmul>
 800ba3e:	4b08      	ldr	r3, [pc, #32]	@ (800ba60 <_dtoa_r+0x5c8>)
 800ba40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ba44:	2200      	movs	r2, #0
 800ba46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba4a:	f7f4 fdd5 	bl	80005f8 <__aeabi_dmul>
 800ba4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba52:	e7c4      	b.n	800b9de <_dtoa_r+0x546>
 800ba54:	0800daf8 	.word	0x0800daf8
 800ba58:	0800dad0 	.word	0x0800dad0
 800ba5c:	3ff00000 	.word	0x3ff00000
 800ba60:	40240000 	.word	0x40240000
 800ba64:	401c0000 	.word	0x401c0000
 800ba68:	40140000 	.word	0x40140000
 800ba6c:	3fe00000 	.word	0x3fe00000
 800ba70:	4631      	mov	r1, r6
 800ba72:	4628      	mov	r0, r5
 800ba74:	f7f4 fdc0 	bl	80005f8 <__aeabi_dmul>
 800ba78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ba7c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ba7e:	4656      	mov	r6, sl
 800ba80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba84:	f7f5 f868 	bl	8000b58 <__aeabi_d2iz>
 800ba88:	4605      	mov	r5, r0
 800ba8a:	f7f4 fd4b 	bl	8000524 <__aeabi_i2d>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	460b      	mov	r3, r1
 800ba92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba96:	f7f4 fbf7 	bl	8000288 <__aeabi_dsub>
 800ba9a:	3530      	adds	r5, #48	@ 0x30
 800ba9c:	f806 5b01 	strb.w	r5, [r6], #1
 800baa0:	4602      	mov	r2, r0
 800baa2:	460b      	mov	r3, r1
 800baa4:	42a6      	cmp	r6, r4
 800baa6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800baaa:	f04f 0200 	mov.w	r2, #0
 800baae:	d124      	bne.n	800bafa <_dtoa_r+0x662>
 800bab0:	4bac      	ldr	r3, [pc, #688]	@ (800bd64 <_dtoa_r+0x8cc>)
 800bab2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bab6:	f7f4 fbe9 	bl	800028c <__adddf3>
 800baba:	4602      	mov	r2, r0
 800babc:	460b      	mov	r3, r1
 800babe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bac2:	f7f5 f829 	bl	8000b18 <__aeabi_dcmpgt>
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d145      	bne.n	800bb56 <_dtoa_r+0x6be>
 800baca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bace:	49a5      	ldr	r1, [pc, #660]	@ (800bd64 <_dtoa_r+0x8cc>)
 800bad0:	2000      	movs	r0, #0
 800bad2:	f7f4 fbd9 	bl	8000288 <__aeabi_dsub>
 800bad6:	4602      	mov	r2, r0
 800bad8:	460b      	mov	r3, r1
 800bada:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bade:	f7f4 fffd 	bl	8000adc <__aeabi_dcmplt>
 800bae2:	2800      	cmp	r0, #0
 800bae4:	f43f aef5 	beq.w	800b8d2 <_dtoa_r+0x43a>
 800bae8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800baea:	1e73      	subs	r3, r6, #1
 800baec:	9315      	str	r3, [sp, #84]	@ 0x54
 800baee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800baf2:	2b30      	cmp	r3, #48	@ 0x30
 800baf4:	d0f8      	beq.n	800bae8 <_dtoa_r+0x650>
 800baf6:	9f04      	ldr	r7, [sp, #16]
 800baf8:	e73e      	b.n	800b978 <_dtoa_r+0x4e0>
 800bafa:	4b9b      	ldr	r3, [pc, #620]	@ (800bd68 <_dtoa_r+0x8d0>)
 800bafc:	f7f4 fd7c 	bl	80005f8 <__aeabi_dmul>
 800bb00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb04:	e7bc      	b.n	800ba80 <_dtoa_r+0x5e8>
 800bb06:	d10c      	bne.n	800bb22 <_dtoa_r+0x68a>
 800bb08:	4b98      	ldr	r3, [pc, #608]	@ (800bd6c <_dtoa_r+0x8d4>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb10:	f7f4 fd72 	bl	80005f8 <__aeabi_dmul>
 800bb14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb18:	f7f4 fff4 	bl	8000b04 <__aeabi_dcmpge>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	f000 8157 	beq.w	800bdd0 <_dtoa_r+0x938>
 800bb22:	2400      	movs	r4, #0
 800bb24:	4625      	mov	r5, r4
 800bb26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb28:	43db      	mvns	r3, r3
 800bb2a:	9304      	str	r3, [sp, #16]
 800bb2c:	4656      	mov	r6, sl
 800bb2e:	2700      	movs	r7, #0
 800bb30:	4621      	mov	r1, r4
 800bb32:	4658      	mov	r0, fp
 800bb34:	f000 fbb4 	bl	800c2a0 <_Bfree>
 800bb38:	2d00      	cmp	r5, #0
 800bb3a:	d0dc      	beq.n	800baf6 <_dtoa_r+0x65e>
 800bb3c:	b12f      	cbz	r7, 800bb4a <_dtoa_r+0x6b2>
 800bb3e:	42af      	cmp	r7, r5
 800bb40:	d003      	beq.n	800bb4a <_dtoa_r+0x6b2>
 800bb42:	4639      	mov	r1, r7
 800bb44:	4658      	mov	r0, fp
 800bb46:	f000 fbab 	bl	800c2a0 <_Bfree>
 800bb4a:	4629      	mov	r1, r5
 800bb4c:	4658      	mov	r0, fp
 800bb4e:	f000 fba7 	bl	800c2a0 <_Bfree>
 800bb52:	e7d0      	b.n	800baf6 <_dtoa_r+0x65e>
 800bb54:	9704      	str	r7, [sp, #16]
 800bb56:	4633      	mov	r3, r6
 800bb58:	461e      	mov	r6, r3
 800bb5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb5e:	2a39      	cmp	r2, #57	@ 0x39
 800bb60:	d107      	bne.n	800bb72 <_dtoa_r+0x6da>
 800bb62:	459a      	cmp	sl, r3
 800bb64:	d1f8      	bne.n	800bb58 <_dtoa_r+0x6c0>
 800bb66:	9a04      	ldr	r2, [sp, #16]
 800bb68:	3201      	adds	r2, #1
 800bb6a:	9204      	str	r2, [sp, #16]
 800bb6c:	2230      	movs	r2, #48	@ 0x30
 800bb6e:	f88a 2000 	strb.w	r2, [sl]
 800bb72:	781a      	ldrb	r2, [r3, #0]
 800bb74:	3201      	adds	r2, #1
 800bb76:	701a      	strb	r2, [r3, #0]
 800bb78:	e7bd      	b.n	800baf6 <_dtoa_r+0x65e>
 800bb7a:	4b7b      	ldr	r3, [pc, #492]	@ (800bd68 <_dtoa_r+0x8d0>)
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f7f4 fd3b 	bl	80005f8 <__aeabi_dmul>
 800bb82:	2200      	movs	r2, #0
 800bb84:	2300      	movs	r3, #0
 800bb86:	4604      	mov	r4, r0
 800bb88:	460d      	mov	r5, r1
 800bb8a:	f7f4 ff9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	f43f aebb 	beq.w	800b90a <_dtoa_r+0x472>
 800bb94:	e6f0      	b.n	800b978 <_dtoa_r+0x4e0>
 800bb96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bb98:	2a00      	cmp	r2, #0
 800bb9a:	f000 80db 	beq.w	800bd54 <_dtoa_r+0x8bc>
 800bb9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bba0:	2a01      	cmp	r2, #1
 800bba2:	f300 80bf 	bgt.w	800bd24 <_dtoa_r+0x88c>
 800bba6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bba8:	2a00      	cmp	r2, #0
 800bbaa:	f000 80b7 	beq.w	800bd1c <_dtoa_r+0x884>
 800bbae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bbb2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bbb4:	4646      	mov	r6, r8
 800bbb6:	9a08      	ldr	r2, [sp, #32]
 800bbb8:	2101      	movs	r1, #1
 800bbba:	441a      	add	r2, r3
 800bbbc:	4658      	mov	r0, fp
 800bbbe:	4498      	add	r8, r3
 800bbc0:	9208      	str	r2, [sp, #32]
 800bbc2:	f000 fc21 	bl	800c408 <__i2b>
 800bbc6:	4605      	mov	r5, r0
 800bbc8:	b15e      	cbz	r6, 800bbe2 <_dtoa_r+0x74a>
 800bbca:	9b08      	ldr	r3, [sp, #32]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	dd08      	ble.n	800bbe2 <_dtoa_r+0x74a>
 800bbd0:	42b3      	cmp	r3, r6
 800bbd2:	9a08      	ldr	r2, [sp, #32]
 800bbd4:	bfa8      	it	ge
 800bbd6:	4633      	movge	r3, r6
 800bbd8:	eba8 0803 	sub.w	r8, r8, r3
 800bbdc:	1af6      	subs	r6, r6, r3
 800bbde:	1ad3      	subs	r3, r2, r3
 800bbe0:	9308      	str	r3, [sp, #32]
 800bbe2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbe4:	b1f3      	cbz	r3, 800bc24 <_dtoa_r+0x78c>
 800bbe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f000 80b7 	beq.w	800bd5c <_dtoa_r+0x8c4>
 800bbee:	b18c      	cbz	r4, 800bc14 <_dtoa_r+0x77c>
 800bbf0:	4629      	mov	r1, r5
 800bbf2:	4622      	mov	r2, r4
 800bbf4:	4658      	mov	r0, fp
 800bbf6:	f000 fcc7 	bl	800c588 <__pow5mult>
 800bbfa:	464a      	mov	r2, r9
 800bbfc:	4601      	mov	r1, r0
 800bbfe:	4605      	mov	r5, r0
 800bc00:	4658      	mov	r0, fp
 800bc02:	f000 fc17 	bl	800c434 <__multiply>
 800bc06:	4649      	mov	r1, r9
 800bc08:	9004      	str	r0, [sp, #16]
 800bc0a:	4658      	mov	r0, fp
 800bc0c:	f000 fb48 	bl	800c2a0 <_Bfree>
 800bc10:	9b04      	ldr	r3, [sp, #16]
 800bc12:	4699      	mov	r9, r3
 800bc14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc16:	1b1a      	subs	r2, r3, r4
 800bc18:	d004      	beq.n	800bc24 <_dtoa_r+0x78c>
 800bc1a:	4649      	mov	r1, r9
 800bc1c:	4658      	mov	r0, fp
 800bc1e:	f000 fcb3 	bl	800c588 <__pow5mult>
 800bc22:	4681      	mov	r9, r0
 800bc24:	2101      	movs	r1, #1
 800bc26:	4658      	mov	r0, fp
 800bc28:	f000 fbee 	bl	800c408 <__i2b>
 800bc2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc2e:	4604      	mov	r4, r0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	f000 81cf 	beq.w	800bfd4 <_dtoa_r+0xb3c>
 800bc36:	461a      	mov	r2, r3
 800bc38:	4601      	mov	r1, r0
 800bc3a:	4658      	mov	r0, fp
 800bc3c:	f000 fca4 	bl	800c588 <__pow5mult>
 800bc40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	4604      	mov	r4, r0
 800bc46:	f300 8095 	bgt.w	800bd74 <_dtoa_r+0x8dc>
 800bc4a:	9b02      	ldr	r3, [sp, #8]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f040 8087 	bne.w	800bd60 <_dtoa_r+0x8c8>
 800bc52:	9b03      	ldr	r3, [sp, #12]
 800bc54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	f040 8089 	bne.w	800bd70 <_dtoa_r+0x8d8>
 800bc5e:	9b03      	ldr	r3, [sp, #12]
 800bc60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc64:	0d1b      	lsrs	r3, r3, #20
 800bc66:	051b      	lsls	r3, r3, #20
 800bc68:	b12b      	cbz	r3, 800bc76 <_dtoa_r+0x7de>
 800bc6a:	9b08      	ldr	r3, [sp, #32]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	9308      	str	r3, [sp, #32]
 800bc70:	f108 0801 	add.w	r8, r8, #1
 800bc74:	2301      	movs	r3, #1
 800bc76:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	f000 81b0 	beq.w	800bfe0 <_dtoa_r+0xb48>
 800bc80:	6923      	ldr	r3, [r4, #16]
 800bc82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bc86:	6918      	ldr	r0, [r3, #16]
 800bc88:	f000 fb72 	bl	800c370 <__hi0bits>
 800bc8c:	f1c0 0020 	rsb	r0, r0, #32
 800bc90:	9b08      	ldr	r3, [sp, #32]
 800bc92:	4418      	add	r0, r3
 800bc94:	f010 001f 	ands.w	r0, r0, #31
 800bc98:	d077      	beq.n	800bd8a <_dtoa_r+0x8f2>
 800bc9a:	f1c0 0320 	rsb	r3, r0, #32
 800bc9e:	2b04      	cmp	r3, #4
 800bca0:	dd6b      	ble.n	800bd7a <_dtoa_r+0x8e2>
 800bca2:	9b08      	ldr	r3, [sp, #32]
 800bca4:	f1c0 001c 	rsb	r0, r0, #28
 800bca8:	4403      	add	r3, r0
 800bcaa:	4480      	add	r8, r0
 800bcac:	4406      	add	r6, r0
 800bcae:	9308      	str	r3, [sp, #32]
 800bcb0:	f1b8 0f00 	cmp.w	r8, #0
 800bcb4:	dd05      	ble.n	800bcc2 <_dtoa_r+0x82a>
 800bcb6:	4649      	mov	r1, r9
 800bcb8:	4642      	mov	r2, r8
 800bcba:	4658      	mov	r0, fp
 800bcbc:	f000 fcbe 	bl	800c63c <__lshift>
 800bcc0:	4681      	mov	r9, r0
 800bcc2:	9b08      	ldr	r3, [sp, #32]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	dd05      	ble.n	800bcd4 <_dtoa_r+0x83c>
 800bcc8:	4621      	mov	r1, r4
 800bcca:	461a      	mov	r2, r3
 800bccc:	4658      	mov	r0, fp
 800bcce:	f000 fcb5 	bl	800c63c <__lshift>
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d059      	beq.n	800bd8e <_dtoa_r+0x8f6>
 800bcda:	4621      	mov	r1, r4
 800bcdc:	4648      	mov	r0, r9
 800bcde:	f000 fd19 	bl	800c714 <__mcmp>
 800bce2:	2800      	cmp	r0, #0
 800bce4:	da53      	bge.n	800bd8e <_dtoa_r+0x8f6>
 800bce6:	1e7b      	subs	r3, r7, #1
 800bce8:	9304      	str	r3, [sp, #16]
 800bcea:	4649      	mov	r1, r9
 800bcec:	2300      	movs	r3, #0
 800bcee:	220a      	movs	r2, #10
 800bcf0:	4658      	mov	r0, fp
 800bcf2:	f000 faf7 	bl	800c2e4 <__multadd>
 800bcf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcf8:	4681      	mov	r9, r0
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	f000 8172 	beq.w	800bfe4 <_dtoa_r+0xb4c>
 800bd00:	2300      	movs	r3, #0
 800bd02:	4629      	mov	r1, r5
 800bd04:	220a      	movs	r2, #10
 800bd06:	4658      	mov	r0, fp
 800bd08:	f000 faec 	bl	800c2e4 <__multadd>
 800bd0c:	9b00      	ldr	r3, [sp, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	4605      	mov	r5, r0
 800bd12:	dc67      	bgt.n	800bde4 <_dtoa_r+0x94c>
 800bd14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd16:	2b02      	cmp	r3, #2
 800bd18:	dc41      	bgt.n	800bd9e <_dtoa_r+0x906>
 800bd1a:	e063      	b.n	800bde4 <_dtoa_r+0x94c>
 800bd1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bd1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bd22:	e746      	b.n	800bbb2 <_dtoa_r+0x71a>
 800bd24:	9b07      	ldr	r3, [sp, #28]
 800bd26:	1e5c      	subs	r4, r3, #1
 800bd28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd2a:	42a3      	cmp	r3, r4
 800bd2c:	bfbf      	itttt	lt
 800bd2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bd30:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bd32:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bd34:	1ae3      	sublt	r3, r4, r3
 800bd36:	bfb4      	ite	lt
 800bd38:	18d2      	addlt	r2, r2, r3
 800bd3a:	1b1c      	subge	r4, r3, r4
 800bd3c:	9b07      	ldr	r3, [sp, #28]
 800bd3e:	bfbc      	itt	lt
 800bd40:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bd42:	2400      	movlt	r4, #0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	bfb5      	itete	lt
 800bd48:	eba8 0603 	sublt.w	r6, r8, r3
 800bd4c:	9b07      	ldrge	r3, [sp, #28]
 800bd4e:	2300      	movlt	r3, #0
 800bd50:	4646      	movge	r6, r8
 800bd52:	e730      	b.n	800bbb6 <_dtoa_r+0x71e>
 800bd54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bd56:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bd58:	4646      	mov	r6, r8
 800bd5a:	e735      	b.n	800bbc8 <_dtoa_r+0x730>
 800bd5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd5e:	e75c      	b.n	800bc1a <_dtoa_r+0x782>
 800bd60:	2300      	movs	r3, #0
 800bd62:	e788      	b.n	800bc76 <_dtoa_r+0x7de>
 800bd64:	3fe00000 	.word	0x3fe00000
 800bd68:	40240000 	.word	0x40240000
 800bd6c:	40140000 	.word	0x40140000
 800bd70:	9b02      	ldr	r3, [sp, #8]
 800bd72:	e780      	b.n	800bc76 <_dtoa_r+0x7de>
 800bd74:	2300      	movs	r3, #0
 800bd76:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd78:	e782      	b.n	800bc80 <_dtoa_r+0x7e8>
 800bd7a:	d099      	beq.n	800bcb0 <_dtoa_r+0x818>
 800bd7c:	9a08      	ldr	r2, [sp, #32]
 800bd7e:	331c      	adds	r3, #28
 800bd80:	441a      	add	r2, r3
 800bd82:	4498      	add	r8, r3
 800bd84:	441e      	add	r6, r3
 800bd86:	9208      	str	r2, [sp, #32]
 800bd88:	e792      	b.n	800bcb0 <_dtoa_r+0x818>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	e7f6      	b.n	800bd7c <_dtoa_r+0x8e4>
 800bd8e:	9b07      	ldr	r3, [sp, #28]
 800bd90:	9704      	str	r7, [sp, #16]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	dc20      	bgt.n	800bdd8 <_dtoa_r+0x940>
 800bd96:	9300      	str	r3, [sp, #0]
 800bd98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd9a:	2b02      	cmp	r3, #2
 800bd9c:	dd1e      	ble.n	800bddc <_dtoa_r+0x944>
 800bd9e:	9b00      	ldr	r3, [sp, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f47f aec0 	bne.w	800bb26 <_dtoa_r+0x68e>
 800bda6:	4621      	mov	r1, r4
 800bda8:	2205      	movs	r2, #5
 800bdaa:	4658      	mov	r0, fp
 800bdac:	f000 fa9a 	bl	800c2e4 <__multadd>
 800bdb0:	4601      	mov	r1, r0
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	4648      	mov	r0, r9
 800bdb6:	f000 fcad 	bl	800c714 <__mcmp>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	f77f aeb3 	ble.w	800bb26 <_dtoa_r+0x68e>
 800bdc0:	4656      	mov	r6, sl
 800bdc2:	2331      	movs	r3, #49	@ 0x31
 800bdc4:	f806 3b01 	strb.w	r3, [r6], #1
 800bdc8:	9b04      	ldr	r3, [sp, #16]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	9304      	str	r3, [sp, #16]
 800bdce:	e6ae      	b.n	800bb2e <_dtoa_r+0x696>
 800bdd0:	9c07      	ldr	r4, [sp, #28]
 800bdd2:	9704      	str	r7, [sp, #16]
 800bdd4:	4625      	mov	r5, r4
 800bdd6:	e7f3      	b.n	800bdc0 <_dtoa_r+0x928>
 800bdd8:	9b07      	ldr	r3, [sp, #28]
 800bdda:	9300      	str	r3, [sp, #0]
 800bddc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	f000 8104 	beq.w	800bfec <_dtoa_r+0xb54>
 800bde4:	2e00      	cmp	r6, #0
 800bde6:	dd05      	ble.n	800bdf4 <_dtoa_r+0x95c>
 800bde8:	4629      	mov	r1, r5
 800bdea:	4632      	mov	r2, r6
 800bdec:	4658      	mov	r0, fp
 800bdee:	f000 fc25 	bl	800c63c <__lshift>
 800bdf2:	4605      	mov	r5, r0
 800bdf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d05a      	beq.n	800beb0 <_dtoa_r+0xa18>
 800bdfa:	6869      	ldr	r1, [r5, #4]
 800bdfc:	4658      	mov	r0, fp
 800bdfe:	f000 fa0f 	bl	800c220 <_Balloc>
 800be02:	4606      	mov	r6, r0
 800be04:	b928      	cbnz	r0, 800be12 <_dtoa_r+0x97a>
 800be06:	4b84      	ldr	r3, [pc, #528]	@ (800c018 <_dtoa_r+0xb80>)
 800be08:	4602      	mov	r2, r0
 800be0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800be0e:	f7ff bb5a 	b.w	800b4c6 <_dtoa_r+0x2e>
 800be12:	692a      	ldr	r2, [r5, #16]
 800be14:	3202      	adds	r2, #2
 800be16:	0092      	lsls	r2, r2, #2
 800be18:	f105 010c 	add.w	r1, r5, #12
 800be1c:	300c      	adds	r0, #12
 800be1e:	f7ff faa2 	bl	800b366 <memcpy>
 800be22:	2201      	movs	r2, #1
 800be24:	4631      	mov	r1, r6
 800be26:	4658      	mov	r0, fp
 800be28:	f000 fc08 	bl	800c63c <__lshift>
 800be2c:	f10a 0301 	add.w	r3, sl, #1
 800be30:	9307      	str	r3, [sp, #28]
 800be32:	9b00      	ldr	r3, [sp, #0]
 800be34:	4453      	add	r3, sl
 800be36:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be38:	9b02      	ldr	r3, [sp, #8]
 800be3a:	f003 0301 	and.w	r3, r3, #1
 800be3e:	462f      	mov	r7, r5
 800be40:	930a      	str	r3, [sp, #40]	@ 0x28
 800be42:	4605      	mov	r5, r0
 800be44:	9b07      	ldr	r3, [sp, #28]
 800be46:	4621      	mov	r1, r4
 800be48:	3b01      	subs	r3, #1
 800be4a:	4648      	mov	r0, r9
 800be4c:	9300      	str	r3, [sp, #0]
 800be4e:	f7ff fa98 	bl	800b382 <quorem>
 800be52:	4639      	mov	r1, r7
 800be54:	9002      	str	r0, [sp, #8]
 800be56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800be5a:	4648      	mov	r0, r9
 800be5c:	f000 fc5a 	bl	800c714 <__mcmp>
 800be60:	462a      	mov	r2, r5
 800be62:	9008      	str	r0, [sp, #32]
 800be64:	4621      	mov	r1, r4
 800be66:	4658      	mov	r0, fp
 800be68:	f000 fc70 	bl	800c74c <__mdiff>
 800be6c:	68c2      	ldr	r2, [r0, #12]
 800be6e:	4606      	mov	r6, r0
 800be70:	bb02      	cbnz	r2, 800beb4 <_dtoa_r+0xa1c>
 800be72:	4601      	mov	r1, r0
 800be74:	4648      	mov	r0, r9
 800be76:	f000 fc4d 	bl	800c714 <__mcmp>
 800be7a:	4602      	mov	r2, r0
 800be7c:	4631      	mov	r1, r6
 800be7e:	4658      	mov	r0, fp
 800be80:	920e      	str	r2, [sp, #56]	@ 0x38
 800be82:	f000 fa0d 	bl	800c2a0 <_Bfree>
 800be86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be8a:	9e07      	ldr	r6, [sp, #28]
 800be8c:	ea43 0102 	orr.w	r1, r3, r2
 800be90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be92:	4319      	orrs	r1, r3
 800be94:	d110      	bne.n	800beb8 <_dtoa_r+0xa20>
 800be96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800be9a:	d029      	beq.n	800bef0 <_dtoa_r+0xa58>
 800be9c:	9b08      	ldr	r3, [sp, #32]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	dd02      	ble.n	800bea8 <_dtoa_r+0xa10>
 800bea2:	9b02      	ldr	r3, [sp, #8]
 800bea4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bea8:	9b00      	ldr	r3, [sp, #0]
 800beaa:	f883 8000 	strb.w	r8, [r3]
 800beae:	e63f      	b.n	800bb30 <_dtoa_r+0x698>
 800beb0:	4628      	mov	r0, r5
 800beb2:	e7bb      	b.n	800be2c <_dtoa_r+0x994>
 800beb4:	2201      	movs	r2, #1
 800beb6:	e7e1      	b.n	800be7c <_dtoa_r+0x9e4>
 800beb8:	9b08      	ldr	r3, [sp, #32]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	db04      	blt.n	800bec8 <_dtoa_r+0xa30>
 800bebe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bec0:	430b      	orrs	r3, r1
 800bec2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bec4:	430b      	orrs	r3, r1
 800bec6:	d120      	bne.n	800bf0a <_dtoa_r+0xa72>
 800bec8:	2a00      	cmp	r2, #0
 800beca:	dded      	ble.n	800bea8 <_dtoa_r+0xa10>
 800becc:	4649      	mov	r1, r9
 800bece:	2201      	movs	r2, #1
 800bed0:	4658      	mov	r0, fp
 800bed2:	f000 fbb3 	bl	800c63c <__lshift>
 800bed6:	4621      	mov	r1, r4
 800bed8:	4681      	mov	r9, r0
 800beda:	f000 fc1b 	bl	800c714 <__mcmp>
 800bede:	2800      	cmp	r0, #0
 800bee0:	dc03      	bgt.n	800beea <_dtoa_r+0xa52>
 800bee2:	d1e1      	bne.n	800bea8 <_dtoa_r+0xa10>
 800bee4:	f018 0f01 	tst.w	r8, #1
 800bee8:	d0de      	beq.n	800bea8 <_dtoa_r+0xa10>
 800beea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800beee:	d1d8      	bne.n	800bea2 <_dtoa_r+0xa0a>
 800bef0:	9a00      	ldr	r2, [sp, #0]
 800bef2:	2339      	movs	r3, #57	@ 0x39
 800bef4:	7013      	strb	r3, [r2, #0]
 800bef6:	4633      	mov	r3, r6
 800bef8:	461e      	mov	r6, r3
 800befa:	3b01      	subs	r3, #1
 800befc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bf00:	2a39      	cmp	r2, #57	@ 0x39
 800bf02:	d052      	beq.n	800bfaa <_dtoa_r+0xb12>
 800bf04:	3201      	adds	r2, #1
 800bf06:	701a      	strb	r2, [r3, #0]
 800bf08:	e612      	b.n	800bb30 <_dtoa_r+0x698>
 800bf0a:	2a00      	cmp	r2, #0
 800bf0c:	dd07      	ble.n	800bf1e <_dtoa_r+0xa86>
 800bf0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bf12:	d0ed      	beq.n	800bef0 <_dtoa_r+0xa58>
 800bf14:	9a00      	ldr	r2, [sp, #0]
 800bf16:	f108 0301 	add.w	r3, r8, #1
 800bf1a:	7013      	strb	r3, [r2, #0]
 800bf1c:	e608      	b.n	800bb30 <_dtoa_r+0x698>
 800bf1e:	9b07      	ldr	r3, [sp, #28]
 800bf20:	9a07      	ldr	r2, [sp, #28]
 800bf22:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bf26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d028      	beq.n	800bf7e <_dtoa_r+0xae6>
 800bf2c:	4649      	mov	r1, r9
 800bf2e:	2300      	movs	r3, #0
 800bf30:	220a      	movs	r2, #10
 800bf32:	4658      	mov	r0, fp
 800bf34:	f000 f9d6 	bl	800c2e4 <__multadd>
 800bf38:	42af      	cmp	r7, r5
 800bf3a:	4681      	mov	r9, r0
 800bf3c:	f04f 0300 	mov.w	r3, #0
 800bf40:	f04f 020a 	mov.w	r2, #10
 800bf44:	4639      	mov	r1, r7
 800bf46:	4658      	mov	r0, fp
 800bf48:	d107      	bne.n	800bf5a <_dtoa_r+0xac2>
 800bf4a:	f000 f9cb 	bl	800c2e4 <__multadd>
 800bf4e:	4607      	mov	r7, r0
 800bf50:	4605      	mov	r5, r0
 800bf52:	9b07      	ldr	r3, [sp, #28]
 800bf54:	3301      	adds	r3, #1
 800bf56:	9307      	str	r3, [sp, #28]
 800bf58:	e774      	b.n	800be44 <_dtoa_r+0x9ac>
 800bf5a:	f000 f9c3 	bl	800c2e4 <__multadd>
 800bf5e:	4629      	mov	r1, r5
 800bf60:	4607      	mov	r7, r0
 800bf62:	2300      	movs	r3, #0
 800bf64:	220a      	movs	r2, #10
 800bf66:	4658      	mov	r0, fp
 800bf68:	f000 f9bc 	bl	800c2e4 <__multadd>
 800bf6c:	4605      	mov	r5, r0
 800bf6e:	e7f0      	b.n	800bf52 <_dtoa_r+0xaba>
 800bf70:	9b00      	ldr	r3, [sp, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	bfcc      	ite	gt
 800bf76:	461e      	movgt	r6, r3
 800bf78:	2601      	movle	r6, #1
 800bf7a:	4456      	add	r6, sl
 800bf7c:	2700      	movs	r7, #0
 800bf7e:	4649      	mov	r1, r9
 800bf80:	2201      	movs	r2, #1
 800bf82:	4658      	mov	r0, fp
 800bf84:	f000 fb5a 	bl	800c63c <__lshift>
 800bf88:	4621      	mov	r1, r4
 800bf8a:	4681      	mov	r9, r0
 800bf8c:	f000 fbc2 	bl	800c714 <__mcmp>
 800bf90:	2800      	cmp	r0, #0
 800bf92:	dcb0      	bgt.n	800bef6 <_dtoa_r+0xa5e>
 800bf94:	d102      	bne.n	800bf9c <_dtoa_r+0xb04>
 800bf96:	f018 0f01 	tst.w	r8, #1
 800bf9a:	d1ac      	bne.n	800bef6 <_dtoa_r+0xa5e>
 800bf9c:	4633      	mov	r3, r6
 800bf9e:	461e      	mov	r6, r3
 800bfa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfa4:	2a30      	cmp	r2, #48	@ 0x30
 800bfa6:	d0fa      	beq.n	800bf9e <_dtoa_r+0xb06>
 800bfa8:	e5c2      	b.n	800bb30 <_dtoa_r+0x698>
 800bfaa:	459a      	cmp	sl, r3
 800bfac:	d1a4      	bne.n	800bef8 <_dtoa_r+0xa60>
 800bfae:	9b04      	ldr	r3, [sp, #16]
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	9304      	str	r3, [sp, #16]
 800bfb4:	2331      	movs	r3, #49	@ 0x31
 800bfb6:	f88a 3000 	strb.w	r3, [sl]
 800bfba:	e5b9      	b.n	800bb30 <_dtoa_r+0x698>
 800bfbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bfbe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c01c <_dtoa_r+0xb84>
 800bfc2:	b11b      	cbz	r3, 800bfcc <_dtoa_r+0xb34>
 800bfc4:	f10a 0308 	add.w	r3, sl, #8
 800bfc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bfca:	6013      	str	r3, [r2, #0]
 800bfcc:	4650      	mov	r0, sl
 800bfce:	b019      	add	sp, #100	@ 0x64
 800bfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfd6:	2b01      	cmp	r3, #1
 800bfd8:	f77f ae37 	ble.w	800bc4a <_dtoa_r+0x7b2>
 800bfdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfde:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfe0:	2001      	movs	r0, #1
 800bfe2:	e655      	b.n	800bc90 <_dtoa_r+0x7f8>
 800bfe4:	9b00      	ldr	r3, [sp, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	f77f aed6 	ble.w	800bd98 <_dtoa_r+0x900>
 800bfec:	4656      	mov	r6, sl
 800bfee:	4621      	mov	r1, r4
 800bff0:	4648      	mov	r0, r9
 800bff2:	f7ff f9c6 	bl	800b382 <quorem>
 800bff6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bffa:	f806 8b01 	strb.w	r8, [r6], #1
 800bffe:	9b00      	ldr	r3, [sp, #0]
 800c000:	eba6 020a 	sub.w	r2, r6, sl
 800c004:	4293      	cmp	r3, r2
 800c006:	ddb3      	ble.n	800bf70 <_dtoa_r+0xad8>
 800c008:	4649      	mov	r1, r9
 800c00a:	2300      	movs	r3, #0
 800c00c:	220a      	movs	r2, #10
 800c00e:	4658      	mov	r0, fp
 800c010:	f000 f968 	bl	800c2e4 <__multadd>
 800c014:	4681      	mov	r9, r0
 800c016:	e7ea      	b.n	800bfee <_dtoa_r+0xb56>
 800c018:	0800da54 	.word	0x0800da54
 800c01c:	0800d9d8 	.word	0x0800d9d8

0800c020 <_free_r>:
 800c020:	b538      	push	{r3, r4, r5, lr}
 800c022:	4605      	mov	r5, r0
 800c024:	2900      	cmp	r1, #0
 800c026:	d041      	beq.n	800c0ac <_free_r+0x8c>
 800c028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c02c:	1f0c      	subs	r4, r1, #4
 800c02e:	2b00      	cmp	r3, #0
 800c030:	bfb8      	it	lt
 800c032:	18e4      	addlt	r4, r4, r3
 800c034:	f000 f8e8 	bl	800c208 <__malloc_lock>
 800c038:	4a1d      	ldr	r2, [pc, #116]	@ (800c0b0 <_free_r+0x90>)
 800c03a:	6813      	ldr	r3, [r2, #0]
 800c03c:	b933      	cbnz	r3, 800c04c <_free_r+0x2c>
 800c03e:	6063      	str	r3, [r4, #4]
 800c040:	6014      	str	r4, [r2, #0]
 800c042:	4628      	mov	r0, r5
 800c044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c048:	f000 b8e4 	b.w	800c214 <__malloc_unlock>
 800c04c:	42a3      	cmp	r3, r4
 800c04e:	d908      	bls.n	800c062 <_free_r+0x42>
 800c050:	6820      	ldr	r0, [r4, #0]
 800c052:	1821      	adds	r1, r4, r0
 800c054:	428b      	cmp	r3, r1
 800c056:	bf01      	itttt	eq
 800c058:	6819      	ldreq	r1, [r3, #0]
 800c05a:	685b      	ldreq	r3, [r3, #4]
 800c05c:	1809      	addeq	r1, r1, r0
 800c05e:	6021      	streq	r1, [r4, #0]
 800c060:	e7ed      	b.n	800c03e <_free_r+0x1e>
 800c062:	461a      	mov	r2, r3
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	b10b      	cbz	r3, 800c06c <_free_r+0x4c>
 800c068:	42a3      	cmp	r3, r4
 800c06a:	d9fa      	bls.n	800c062 <_free_r+0x42>
 800c06c:	6811      	ldr	r1, [r2, #0]
 800c06e:	1850      	adds	r0, r2, r1
 800c070:	42a0      	cmp	r0, r4
 800c072:	d10b      	bne.n	800c08c <_free_r+0x6c>
 800c074:	6820      	ldr	r0, [r4, #0]
 800c076:	4401      	add	r1, r0
 800c078:	1850      	adds	r0, r2, r1
 800c07a:	4283      	cmp	r3, r0
 800c07c:	6011      	str	r1, [r2, #0]
 800c07e:	d1e0      	bne.n	800c042 <_free_r+0x22>
 800c080:	6818      	ldr	r0, [r3, #0]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	6053      	str	r3, [r2, #4]
 800c086:	4408      	add	r0, r1
 800c088:	6010      	str	r0, [r2, #0]
 800c08a:	e7da      	b.n	800c042 <_free_r+0x22>
 800c08c:	d902      	bls.n	800c094 <_free_r+0x74>
 800c08e:	230c      	movs	r3, #12
 800c090:	602b      	str	r3, [r5, #0]
 800c092:	e7d6      	b.n	800c042 <_free_r+0x22>
 800c094:	6820      	ldr	r0, [r4, #0]
 800c096:	1821      	adds	r1, r4, r0
 800c098:	428b      	cmp	r3, r1
 800c09a:	bf04      	itt	eq
 800c09c:	6819      	ldreq	r1, [r3, #0]
 800c09e:	685b      	ldreq	r3, [r3, #4]
 800c0a0:	6063      	str	r3, [r4, #4]
 800c0a2:	bf04      	itt	eq
 800c0a4:	1809      	addeq	r1, r1, r0
 800c0a6:	6021      	streq	r1, [r4, #0]
 800c0a8:	6054      	str	r4, [r2, #4]
 800c0aa:	e7ca      	b.n	800c042 <_free_r+0x22>
 800c0ac:	bd38      	pop	{r3, r4, r5, pc}
 800c0ae:	bf00      	nop
 800c0b0:	20002470 	.word	0x20002470

0800c0b4 <malloc>:
 800c0b4:	4b02      	ldr	r3, [pc, #8]	@ (800c0c0 <malloc+0xc>)
 800c0b6:	4601      	mov	r1, r0
 800c0b8:	6818      	ldr	r0, [r3, #0]
 800c0ba:	f000 b825 	b.w	800c108 <_malloc_r>
 800c0be:	bf00      	nop
 800c0c0:	2000001c 	.word	0x2000001c

0800c0c4 <sbrk_aligned>:
 800c0c4:	b570      	push	{r4, r5, r6, lr}
 800c0c6:	4e0f      	ldr	r6, [pc, #60]	@ (800c104 <sbrk_aligned+0x40>)
 800c0c8:	460c      	mov	r4, r1
 800c0ca:	6831      	ldr	r1, [r6, #0]
 800c0cc:	4605      	mov	r5, r0
 800c0ce:	b911      	cbnz	r1, 800c0d6 <sbrk_aligned+0x12>
 800c0d0:	f000 fe9a 	bl	800ce08 <_sbrk_r>
 800c0d4:	6030      	str	r0, [r6, #0]
 800c0d6:	4621      	mov	r1, r4
 800c0d8:	4628      	mov	r0, r5
 800c0da:	f000 fe95 	bl	800ce08 <_sbrk_r>
 800c0de:	1c43      	adds	r3, r0, #1
 800c0e0:	d103      	bne.n	800c0ea <sbrk_aligned+0x26>
 800c0e2:	f04f 34ff 	mov.w	r4, #4294967295
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	bd70      	pop	{r4, r5, r6, pc}
 800c0ea:	1cc4      	adds	r4, r0, #3
 800c0ec:	f024 0403 	bic.w	r4, r4, #3
 800c0f0:	42a0      	cmp	r0, r4
 800c0f2:	d0f8      	beq.n	800c0e6 <sbrk_aligned+0x22>
 800c0f4:	1a21      	subs	r1, r4, r0
 800c0f6:	4628      	mov	r0, r5
 800c0f8:	f000 fe86 	bl	800ce08 <_sbrk_r>
 800c0fc:	3001      	adds	r0, #1
 800c0fe:	d1f2      	bne.n	800c0e6 <sbrk_aligned+0x22>
 800c100:	e7ef      	b.n	800c0e2 <sbrk_aligned+0x1e>
 800c102:	bf00      	nop
 800c104:	2000246c 	.word	0x2000246c

0800c108 <_malloc_r>:
 800c108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c10c:	1ccd      	adds	r5, r1, #3
 800c10e:	f025 0503 	bic.w	r5, r5, #3
 800c112:	3508      	adds	r5, #8
 800c114:	2d0c      	cmp	r5, #12
 800c116:	bf38      	it	cc
 800c118:	250c      	movcc	r5, #12
 800c11a:	2d00      	cmp	r5, #0
 800c11c:	4606      	mov	r6, r0
 800c11e:	db01      	blt.n	800c124 <_malloc_r+0x1c>
 800c120:	42a9      	cmp	r1, r5
 800c122:	d904      	bls.n	800c12e <_malloc_r+0x26>
 800c124:	230c      	movs	r3, #12
 800c126:	6033      	str	r3, [r6, #0]
 800c128:	2000      	movs	r0, #0
 800c12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c12e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c204 <_malloc_r+0xfc>
 800c132:	f000 f869 	bl	800c208 <__malloc_lock>
 800c136:	f8d8 3000 	ldr.w	r3, [r8]
 800c13a:	461c      	mov	r4, r3
 800c13c:	bb44      	cbnz	r4, 800c190 <_malloc_r+0x88>
 800c13e:	4629      	mov	r1, r5
 800c140:	4630      	mov	r0, r6
 800c142:	f7ff ffbf 	bl	800c0c4 <sbrk_aligned>
 800c146:	1c43      	adds	r3, r0, #1
 800c148:	4604      	mov	r4, r0
 800c14a:	d158      	bne.n	800c1fe <_malloc_r+0xf6>
 800c14c:	f8d8 4000 	ldr.w	r4, [r8]
 800c150:	4627      	mov	r7, r4
 800c152:	2f00      	cmp	r7, #0
 800c154:	d143      	bne.n	800c1de <_malloc_r+0xd6>
 800c156:	2c00      	cmp	r4, #0
 800c158:	d04b      	beq.n	800c1f2 <_malloc_r+0xea>
 800c15a:	6823      	ldr	r3, [r4, #0]
 800c15c:	4639      	mov	r1, r7
 800c15e:	4630      	mov	r0, r6
 800c160:	eb04 0903 	add.w	r9, r4, r3
 800c164:	f000 fe50 	bl	800ce08 <_sbrk_r>
 800c168:	4581      	cmp	r9, r0
 800c16a:	d142      	bne.n	800c1f2 <_malloc_r+0xea>
 800c16c:	6821      	ldr	r1, [r4, #0]
 800c16e:	1a6d      	subs	r5, r5, r1
 800c170:	4629      	mov	r1, r5
 800c172:	4630      	mov	r0, r6
 800c174:	f7ff ffa6 	bl	800c0c4 <sbrk_aligned>
 800c178:	3001      	adds	r0, #1
 800c17a:	d03a      	beq.n	800c1f2 <_malloc_r+0xea>
 800c17c:	6823      	ldr	r3, [r4, #0]
 800c17e:	442b      	add	r3, r5
 800c180:	6023      	str	r3, [r4, #0]
 800c182:	f8d8 3000 	ldr.w	r3, [r8]
 800c186:	685a      	ldr	r2, [r3, #4]
 800c188:	bb62      	cbnz	r2, 800c1e4 <_malloc_r+0xdc>
 800c18a:	f8c8 7000 	str.w	r7, [r8]
 800c18e:	e00f      	b.n	800c1b0 <_malloc_r+0xa8>
 800c190:	6822      	ldr	r2, [r4, #0]
 800c192:	1b52      	subs	r2, r2, r5
 800c194:	d420      	bmi.n	800c1d8 <_malloc_r+0xd0>
 800c196:	2a0b      	cmp	r2, #11
 800c198:	d917      	bls.n	800c1ca <_malloc_r+0xc2>
 800c19a:	1961      	adds	r1, r4, r5
 800c19c:	42a3      	cmp	r3, r4
 800c19e:	6025      	str	r5, [r4, #0]
 800c1a0:	bf18      	it	ne
 800c1a2:	6059      	strne	r1, [r3, #4]
 800c1a4:	6863      	ldr	r3, [r4, #4]
 800c1a6:	bf08      	it	eq
 800c1a8:	f8c8 1000 	streq.w	r1, [r8]
 800c1ac:	5162      	str	r2, [r4, r5]
 800c1ae:	604b      	str	r3, [r1, #4]
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	f000 f82f 	bl	800c214 <__malloc_unlock>
 800c1b6:	f104 000b 	add.w	r0, r4, #11
 800c1ba:	1d23      	adds	r3, r4, #4
 800c1bc:	f020 0007 	bic.w	r0, r0, #7
 800c1c0:	1ac2      	subs	r2, r0, r3
 800c1c2:	bf1c      	itt	ne
 800c1c4:	1a1b      	subne	r3, r3, r0
 800c1c6:	50a3      	strne	r3, [r4, r2]
 800c1c8:	e7af      	b.n	800c12a <_malloc_r+0x22>
 800c1ca:	6862      	ldr	r2, [r4, #4]
 800c1cc:	42a3      	cmp	r3, r4
 800c1ce:	bf0c      	ite	eq
 800c1d0:	f8c8 2000 	streq.w	r2, [r8]
 800c1d4:	605a      	strne	r2, [r3, #4]
 800c1d6:	e7eb      	b.n	800c1b0 <_malloc_r+0xa8>
 800c1d8:	4623      	mov	r3, r4
 800c1da:	6864      	ldr	r4, [r4, #4]
 800c1dc:	e7ae      	b.n	800c13c <_malloc_r+0x34>
 800c1de:	463c      	mov	r4, r7
 800c1e0:	687f      	ldr	r7, [r7, #4]
 800c1e2:	e7b6      	b.n	800c152 <_malloc_r+0x4a>
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	42a3      	cmp	r3, r4
 800c1ea:	d1fb      	bne.n	800c1e4 <_malloc_r+0xdc>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	6053      	str	r3, [r2, #4]
 800c1f0:	e7de      	b.n	800c1b0 <_malloc_r+0xa8>
 800c1f2:	230c      	movs	r3, #12
 800c1f4:	6033      	str	r3, [r6, #0]
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	f000 f80c 	bl	800c214 <__malloc_unlock>
 800c1fc:	e794      	b.n	800c128 <_malloc_r+0x20>
 800c1fe:	6005      	str	r5, [r0, #0]
 800c200:	e7d6      	b.n	800c1b0 <_malloc_r+0xa8>
 800c202:	bf00      	nop
 800c204:	20002470 	.word	0x20002470

0800c208 <__malloc_lock>:
 800c208:	4801      	ldr	r0, [pc, #4]	@ (800c210 <__malloc_lock+0x8>)
 800c20a:	f7ff b8aa 	b.w	800b362 <__retarget_lock_acquire_recursive>
 800c20e:	bf00      	nop
 800c210:	20002468 	.word	0x20002468

0800c214 <__malloc_unlock>:
 800c214:	4801      	ldr	r0, [pc, #4]	@ (800c21c <__malloc_unlock+0x8>)
 800c216:	f7ff b8a5 	b.w	800b364 <__retarget_lock_release_recursive>
 800c21a:	bf00      	nop
 800c21c:	20002468 	.word	0x20002468

0800c220 <_Balloc>:
 800c220:	b570      	push	{r4, r5, r6, lr}
 800c222:	69c6      	ldr	r6, [r0, #28]
 800c224:	4604      	mov	r4, r0
 800c226:	460d      	mov	r5, r1
 800c228:	b976      	cbnz	r6, 800c248 <_Balloc+0x28>
 800c22a:	2010      	movs	r0, #16
 800c22c:	f7ff ff42 	bl	800c0b4 <malloc>
 800c230:	4602      	mov	r2, r0
 800c232:	61e0      	str	r0, [r4, #28]
 800c234:	b920      	cbnz	r0, 800c240 <_Balloc+0x20>
 800c236:	4b18      	ldr	r3, [pc, #96]	@ (800c298 <_Balloc+0x78>)
 800c238:	4818      	ldr	r0, [pc, #96]	@ (800c29c <_Balloc+0x7c>)
 800c23a:	216b      	movs	r1, #107	@ 0x6b
 800c23c:	f000 fdf4 	bl	800ce28 <__assert_func>
 800c240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c244:	6006      	str	r6, [r0, #0]
 800c246:	60c6      	str	r6, [r0, #12]
 800c248:	69e6      	ldr	r6, [r4, #28]
 800c24a:	68f3      	ldr	r3, [r6, #12]
 800c24c:	b183      	cbz	r3, 800c270 <_Balloc+0x50>
 800c24e:	69e3      	ldr	r3, [r4, #28]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c256:	b9b8      	cbnz	r0, 800c288 <_Balloc+0x68>
 800c258:	2101      	movs	r1, #1
 800c25a:	fa01 f605 	lsl.w	r6, r1, r5
 800c25e:	1d72      	adds	r2, r6, #5
 800c260:	0092      	lsls	r2, r2, #2
 800c262:	4620      	mov	r0, r4
 800c264:	f000 fdfe 	bl	800ce64 <_calloc_r>
 800c268:	b160      	cbz	r0, 800c284 <_Balloc+0x64>
 800c26a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c26e:	e00e      	b.n	800c28e <_Balloc+0x6e>
 800c270:	2221      	movs	r2, #33	@ 0x21
 800c272:	2104      	movs	r1, #4
 800c274:	4620      	mov	r0, r4
 800c276:	f000 fdf5 	bl	800ce64 <_calloc_r>
 800c27a:	69e3      	ldr	r3, [r4, #28]
 800c27c:	60f0      	str	r0, [r6, #12]
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d1e4      	bne.n	800c24e <_Balloc+0x2e>
 800c284:	2000      	movs	r0, #0
 800c286:	bd70      	pop	{r4, r5, r6, pc}
 800c288:	6802      	ldr	r2, [r0, #0]
 800c28a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c28e:	2300      	movs	r3, #0
 800c290:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c294:	e7f7      	b.n	800c286 <_Balloc+0x66>
 800c296:	bf00      	nop
 800c298:	0800d9e5 	.word	0x0800d9e5
 800c29c:	0800da65 	.word	0x0800da65

0800c2a0 <_Bfree>:
 800c2a0:	b570      	push	{r4, r5, r6, lr}
 800c2a2:	69c6      	ldr	r6, [r0, #28]
 800c2a4:	4605      	mov	r5, r0
 800c2a6:	460c      	mov	r4, r1
 800c2a8:	b976      	cbnz	r6, 800c2c8 <_Bfree+0x28>
 800c2aa:	2010      	movs	r0, #16
 800c2ac:	f7ff ff02 	bl	800c0b4 <malloc>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	61e8      	str	r0, [r5, #28]
 800c2b4:	b920      	cbnz	r0, 800c2c0 <_Bfree+0x20>
 800c2b6:	4b09      	ldr	r3, [pc, #36]	@ (800c2dc <_Bfree+0x3c>)
 800c2b8:	4809      	ldr	r0, [pc, #36]	@ (800c2e0 <_Bfree+0x40>)
 800c2ba:	218f      	movs	r1, #143	@ 0x8f
 800c2bc:	f000 fdb4 	bl	800ce28 <__assert_func>
 800c2c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2c4:	6006      	str	r6, [r0, #0]
 800c2c6:	60c6      	str	r6, [r0, #12]
 800c2c8:	b13c      	cbz	r4, 800c2da <_Bfree+0x3a>
 800c2ca:	69eb      	ldr	r3, [r5, #28]
 800c2cc:	6862      	ldr	r2, [r4, #4]
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c2d4:	6021      	str	r1, [r4, #0]
 800c2d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c2da:	bd70      	pop	{r4, r5, r6, pc}
 800c2dc:	0800d9e5 	.word	0x0800d9e5
 800c2e0:	0800da65 	.word	0x0800da65

0800c2e4 <__multadd>:
 800c2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2e8:	690d      	ldr	r5, [r1, #16]
 800c2ea:	4607      	mov	r7, r0
 800c2ec:	460c      	mov	r4, r1
 800c2ee:	461e      	mov	r6, r3
 800c2f0:	f101 0c14 	add.w	ip, r1, #20
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	f8dc 3000 	ldr.w	r3, [ip]
 800c2fa:	b299      	uxth	r1, r3
 800c2fc:	fb02 6101 	mla	r1, r2, r1, r6
 800c300:	0c1e      	lsrs	r6, r3, #16
 800c302:	0c0b      	lsrs	r3, r1, #16
 800c304:	fb02 3306 	mla	r3, r2, r6, r3
 800c308:	b289      	uxth	r1, r1
 800c30a:	3001      	adds	r0, #1
 800c30c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c310:	4285      	cmp	r5, r0
 800c312:	f84c 1b04 	str.w	r1, [ip], #4
 800c316:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c31a:	dcec      	bgt.n	800c2f6 <__multadd+0x12>
 800c31c:	b30e      	cbz	r6, 800c362 <__multadd+0x7e>
 800c31e:	68a3      	ldr	r3, [r4, #8]
 800c320:	42ab      	cmp	r3, r5
 800c322:	dc19      	bgt.n	800c358 <__multadd+0x74>
 800c324:	6861      	ldr	r1, [r4, #4]
 800c326:	4638      	mov	r0, r7
 800c328:	3101      	adds	r1, #1
 800c32a:	f7ff ff79 	bl	800c220 <_Balloc>
 800c32e:	4680      	mov	r8, r0
 800c330:	b928      	cbnz	r0, 800c33e <__multadd+0x5a>
 800c332:	4602      	mov	r2, r0
 800c334:	4b0c      	ldr	r3, [pc, #48]	@ (800c368 <__multadd+0x84>)
 800c336:	480d      	ldr	r0, [pc, #52]	@ (800c36c <__multadd+0x88>)
 800c338:	21ba      	movs	r1, #186	@ 0xba
 800c33a:	f000 fd75 	bl	800ce28 <__assert_func>
 800c33e:	6922      	ldr	r2, [r4, #16]
 800c340:	3202      	adds	r2, #2
 800c342:	f104 010c 	add.w	r1, r4, #12
 800c346:	0092      	lsls	r2, r2, #2
 800c348:	300c      	adds	r0, #12
 800c34a:	f7ff f80c 	bl	800b366 <memcpy>
 800c34e:	4621      	mov	r1, r4
 800c350:	4638      	mov	r0, r7
 800c352:	f7ff ffa5 	bl	800c2a0 <_Bfree>
 800c356:	4644      	mov	r4, r8
 800c358:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c35c:	3501      	adds	r5, #1
 800c35e:	615e      	str	r6, [r3, #20]
 800c360:	6125      	str	r5, [r4, #16]
 800c362:	4620      	mov	r0, r4
 800c364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c368:	0800da54 	.word	0x0800da54
 800c36c:	0800da65 	.word	0x0800da65

0800c370 <__hi0bits>:
 800c370:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c374:	4603      	mov	r3, r0
 800c376:	bf36      	itet	cc
 800c378:	0403      	lslcc	r3, r0, #16
 800c37a:	2000      	movcs	r0, #0
 800c37c:	2010      	movcc	r0, #16
 800c37e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c382:	bf3c      	itt	cc
 800c384:	021b      	lslcc	r3, r3, #8
 800c386:	3008      	addcc	r0, #8
 800c388:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c38c:	bf3c      	itt	cc
 800c38e:	011b      	lslcc	r3, r3, #4
 800c390:	3004      	addcc	r0, #4
 800c392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c396:	bf3c      	itt	cc
 800c398:	009b      	lslcc	r3, r3, #2
 800c39a:	3002      	addcc	r0, #2
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	db05      	blt.n	800c3ac <__hi0bits+0x3c>
 800c3a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c3a4:	f100 0001 	add.w	r0, r0, #1
 800c3a8:	bf08      	it	eq
 800c3aa:	2020      	moveq	r0, #32
 800c3ac:	4770      	bx	lr

0800c3ae <__lo0bits>:
 800c3ae:	6803      	ldr	r3, [r0, #0]
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	f013 0007 	ands.w	r0, r3, #7
 800c3b6:	d00b      	beq.n	800c3d0 <__lo0bits+0x22>
 800c3b8:	07d9      	lsls	r1, r3, #31
 800c3ba:	d421      	bmi.n	800c400 <__lo0bits+0x52>
 800c3bc:	0798      	lsls	r0, r3, #30
 800c3be:	bf49      	itett	mi
 800c3c0:	085b      	lsrmi	r3, r3, #1
 800c3c2:	089b      	lsrpl	r3, r3, #2
 800c3c4:	2001      	movmi	r0, #1
 800c3c6:	6013      	strmi	r3, [r2, #0]
 800c3c8:	bf5c      	itt	pl
 800c3ca:	6013      	strpl	r3, [r2, #0]
 800c3cc:	2002      	movpl	r0, #2
 800c3ce:	4770      	bx	lr
 800c3d0:	b299      	uxth	r1, r3
 800c3d2:	b909      	cbnz	r1, 800c3d8 <__lo0bits+0x2a>
 800c3d4:	0c1b      	lsrs	r3, r3, #16
 800c3d6:	2010      	movs	r0, #16
 800c3d8:	b2d9      	uxtb	r1, r3
 800c3da:	b909      	cbnz	r1, 800c3e0 <__lo0bits+0x32>
 800c3dc:	3008      	adds	r0, #8
 800c3de:	0a1b      	lsrs	r3, r3, #8
 800c3e0:	0719      	lsls	r1, r3, #28
 800c3e2:	bf04      	itt	eq
 800c3e4:	091b      	lsreq	r3, r3, #4
 800c3e6:	3004      	addeq	r0, #4
 800c3e8:	0799      	lsls	r1, r3, #30
 800c3ea:	bf04      	itt	eq
 800c3ec:	089b      	lsreq	r3, r3, #2
 800c3ee:	3002      	addeq	r0, #2
 800c3f0:	07d9      	lsls	r1, r3, #31
 800c3f2:	d403      	bmi.n	800c3fc <__lo0bits+0x4e>
 800c3f4:	085b      	lsrs	r3, r3, #1
 800c3f6:	f100 0001 	add.w	r0, r0, #1
 800c3fa:	d003      	beq.n	800c404 <__lo0bits+0x56>
 800c3fc:	6013      	str	r3, [r2, #0]
 800c3fe:	4770      	bx	lr
 800c400:	2000      	movs	r0, #0
 800c402:	4770      	bx	lr
 800c404:	2020      	movs	r0, #32
 800c406:	4770      	bx	lr

0800c408 <__i2b>:
 800c408:	b510      	push	{r4, lr}
 800c40a:	460c      	mov	r4, r1
 800c40c:	2101      	movs	r1, #1
 800c40e:	f7ff ff07 	bl	800c220 <_Balloc>
 800c412:	4602      	mov	r2, r0
 800c414:	b928      	cbnz	r0, 800c422 <__i2b+0x1a>
 800c416:	4b05      	ldr	r3, [pc, #20]	@ (800c42c <__i2b+0x24>)
 800c418:	4805      	ldr	r0, [pc, #20]	@ (800c430 <__i2b+0x28>)
 800c41a:	f240 1145 	movw	r1, #325	@ 0x145
 800c41e:	f000 fd03 	bl	800ce28 <__assert_func>
 800c422:	2301      	movs	r3, #1
 800c424:	6144      	str	r4, [r0, #20]
 800c426:	6103      	str	r3, [r0, #16]
 800c428:	bd10      	pop	{r4, pc}
 800c42a:	bf00      	nop
 800c42c:	0800da54 	.word	0x0800da54
 800c430:	0800da65 	.word	0x0800da65

0800c434 <__multiply>:
 800c434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c438:	4614      	mov	r4, r2
 800c43a:	690a      	ldr	r2, [r1, #16]
 800c43c:	6923      	ldr	r3, [r4, #16]
 800c43e:	429a      	cmp	r2, r3
 800c440:	bfa8      	it	ge
 800c442:	4623      	movge	r3, r4
 800c444:	460f      	mov	r7, r1
 800c446:	bfa4      	itt	ge
 800c448:	460c      	movge	r4, r1
 800c44a:	461f      	movge	r7, r3
 800c44c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c450:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c454:	68a3      	ldr	r3, [r4, #8]
 800c456:	6861      	ldr	r1, [r4, #4]
 800c458:	eb0a 0609 	add.w	r6, sl, r9
 800c45c:	42b3      	cmp	r3, r6
 800c45e:	b085      	sub	sp, #20
 800c460:	bfb8      	it	lt
 800c462:	3101      	addlt	r1, #1
 800c464:	f7ff fedc 	bl	800c220 <_Balloc>
 800c468:	b930      	cbnz	r0, 800c478 <__multiply+0x44>
 800c46a:	4602      	mov	r2, r0
 800c46c:	4b44      	ldr	r3, [pc, #272]	@ (800c580 <__multiply+0x14c>)
 800c46e:	4845      	ldr	r0, [pc, #276]	@ (800c584 <__multiply+0x150>)
 800c470:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c474:	f000 fcd8 	bl	800ce28 <__assert_func>
 800c478:	f100 0514 	add.w	r5, r0, #20
 800c47c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c480:	462b      	mov	r3, r5
 800c482:	2200      	movs	r2, #0
 800c484:	4543      	cmp	r3, r8
 800c486:	d321      	bcc.n	800c4cc <__multiply+0x98>
 800c488:	f107 0114 	add.w	r1, r7, #20
 800c48c:	f104 0214 	add.w	r2, r4, #20
 800c490:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c494:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c498:	9302      	str	r3, [sp, #8]
 800c49a:	1b13      	subs	r3, r2, r4
 800c49c:	3b15      	subs	r3, #21
 800c49e:	f023 0303 	bic.w	r3, r3, #3
 800c4a2:	3304      	adds	r3, #4
 800c4a4:	f104 0715 	add.w	r7, r4, #21
 800c4a8:	42ba      	cmp	r2, r7
 800c4aa:	bf38      	it	cc
 800c4ac:	2304      	movcc	r3, #4
 800c4ae:	9301      	str	r3, [sp, #4]
 800c4b0:	9b02      	ldr	r3, [sp, #8]
 800c4b2:	9103      	str	r1, [sp, #12]
 800c4b4:	428b      	cmp	r3, r1
 800c4b6:	d80c      	bhi.n	800c4d2 <__multiply+0x9e>
 800c4b8:	2e00      	cmp	r6, #0
 800c4ba:	dd03      	ble.n	800c4c4 <__multiply+0x90>
 800c4bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d05b      	beq.n	800c57c <__multiply+0x148>
 800c4c4:	6106      	str	r6, [r0, #16]
 800c4c6:	b005      	add	sp, #20
 800c4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4cc:	f843 2b04 	str.w	r2, [r3], #4
 800c4d0:	e7d8      	b.n	800c484 <__multiply+0x50>
 800c4d2:	f8b1 a000 	ldrh.w	sl, [r1]
 800c4d6:	f1ba 0f00 	cmp.w	sl, #0
 800c4da:	d024      	beq.n	800c526 <__multiply+0xf2>
 800c4dc:	f104 0e14 	add.w	lr, r4, #20
 800c4e0:	46a9      	mov	r9, r5
 800c4e2:	f04f 0c00 	mov.w	ip, #0
 800c4e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c4ea:	f8d9 3000 	ldr.w	r3, [r9]
 800c4ee:	fa1f fb87 	uxth.w	fp, r7
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	fb0a 330b 	mla	r3, sl, fp, r3
 800c4f8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c4fc:	f8d9 7000 	ldr.w	r7, [r9]
 800c500:	4463      	add	r3, ip
 800c502:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c506:	fb0a c70b 	mla	r7, sl, fp, ip
 800c50a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c50e:	b29b      	uxth	r3, r3
 800c510:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c514:	4572      	cmp	r2, lr
 800c516:	f849 3b04 	str.w	r3, [r9], #4
 800c51a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c51e:	d8e2      	bhi.n	800c4e6 <__multiply+0xb2>
 800c520:	9b01      	ldr	r3, [sp, #4]
 800c522:	f845 c003 	str.w	ip, [r5, r3]
 800c526:	9b03      	ldr	r3, [sp, #12]
 800c528:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c52c:	3104      	adds	r1, #4
 800c52e:	f1b9 0f00 	cmp.w	r9, #0
 800c532:	d021      	beq.n	800c578 <__multiply+0x144>
 800c534:	682b      	ldr	r3, [r5, #0]
 800c536:	f104 0c14 	add.w	ip, r4, #20
 800c53a:	46ae      	mov	lr, r5
 800c53c:	f04f 0a00 	mov.w	sl, #0
 800c540:	f8bc b000 	ldrh.w	fp, [ip]
 800c544:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c548:	fb09 770b 	mla	r7, r9, fp, r7
 800c54c:	4457      	add	r7, sl
 800c54e:	b29b      	uxth	r3, r3
 800c550:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c554:	f84e 3b04 	str.w	r3, [lr], #4
 800c558:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c55c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c560:	f8be 3000 	ldrh.w	r3, [lr]
 800c564:	fb09 330a 	mla	r3, r9, sl, r3
 800c568:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c56c:	4562      	cmp	r2, ip
 800c56e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c572:	d8e5      	bhi.n	800c540 <__multiply+0x10c>
 800c574:	9f01      	ldr	r7, [sp, #4]
 800c576:	51eb      	str	r3, [r5, r7]
 800c578:	3504      	adds	r5, #4
 800c57a:	e799      	b.n	800c4b0 <__multiply+0x7c>
 800c57c:	3e01      	subs	r6, #1
 800c57e:	e79b      	b.n	800c4b8 <__multiply+0x84>
 800c580:	0800da54 	.word	0x0800da54
 800c584:	0800da65 	.word	0x0800da65

0800c588 <__pow5mult>:
 800c588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c58c:	4615      	mov	r5, r2
 800c58e:	f012 0203 	ands.w	r2, r2, #3
 800c592:	4607      	mov	r7, r0
 800c594:	460e      	mov	r6, r1
 800c596:	d007      	beq.n	800c5a8 <__pow5mult+0x20>
 800c598:	4c25      	ldr	r4, [pc, #148]	@ (800c630 <__pow5mult+0xa8>)
 800c59a:	3a01      	subs	r2, #1
 800c59c:	2300      	movs	r3, #0
 800c59e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c5a2:	f7ff fe9f 	bl	800c2e4 <__multadd>
 800c5a6:	4606      	mov	r6, r0
 800c5a8:	10ad      	asrs	r5, r5, #2
 800c5aa:	d03d      	beq.n	800c628 <__pow5mult+0xa0>
 800c5ac:	69fc      	ldr	r4, [r7, #28]
 800c5ae:	b97c      	cbnz	r4, 800c5d0 <__pow5mult+0x48>
 800c5b0:	2010      	movs	r0, #16
 800c5b2:	f7ff fd7f 	bl	800c0b4 <malloc>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	61f8      	str	r0, [r7, #28]
 800c5ba:	b928      	cbnz	r0, 800c5c8 <__pow5mult+0x40>
 800c5bc:	4b1d      	ldr	r3, [pc, #116]	@ (800c634 <__pow5mult+0xac>)
 800c5be:	481e      	ldr	r0, [pc, #120]	@ (800c638 <__pow5mult+0xb0>)
 800c5c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c5c4:	f000 fc30 	bl	800ce28 <__assert_func>
 800c5c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c5cc:	6004      	str	r4, [r0, #0]
 800c5ce:	60c4      	str	r4, [r0, #12]
 800c5d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c5d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c5d8:	b94c      	cbnz	r4, 800c5ee <__pow5mult+0x66>
 800c5da:	f240 2171 	movw	r1, #625	@ 0x271
 800c5de:	4638      	mov	r0, r7
 800c5e0:	f7ff ff12 	bl	800c408 <__i2b>
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c5ea:	4604      	mov	r4, r0
 800c5ec:	6003      	str	r3, [r0, #0]
 800c5ee:	f04f 0900 	mov.w	r9, #0
 800c5f2:	07eb      	lsls	r3, r5, #31
 800c5f4:	d50a      	bpl.n	800c60c <__pow5mult+0x84>
 800c5f6:	4631      	mov	r1, r6
 800c5f8:	4622      	mov	r2, r4
 800c5fa:	4638      	mov	r0, r7
 800c5fc:	f7ff ff1a 	bl	800c434 <__multiply>
 800c600:	4631      	mov	r1, r6
 800c602:	4680      	mov	r8, r0
 800c604:	4638      	mov	r0, r7
 800c606:	f7ff fe4b 	bl	800c2a0 <_Bfree>
 800c60a:	4646      	mov	r6, r8
 800c60c:	106d      	asrs	r5, r5, #1
 800c60e:	d00b      	beq.n	800c628 <__pow5mult+0xa0>
 800c610:	6820      	ldr	r0, [r4, #0]
 800c612:	b938      	cbnz	r0, 800c624 <__pow5mult+0x9c>
 800c614:	4622      	mov	r2, r4
 800c616:	4621      	mov	r1, r4
 800c618:	4638      	mov	r0, r7
 800c61a:	f7ff ff0b 	bl	800c434 <__multiply>
 800c61e:	6020      	str	r0, [r4, #0]
 800c620:	f8c0 9000 	str.w	r9, [r0]
 800c624:	4604      	mov	r4, r0
 800c626:	e7e4      	b.n	800c5f2 <__pow5mult+0x6a>
 800c628:	4630      	mov	r0, r6
 800c62a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c62e:	bf00      	nop
 800c630:	0800dac0 	.word	0x0800dac0
 800c634:	0800d9e5 	.word	0x0800d9e5
 800c638:	0800da65 	.word	0x0800da65

0800c63c <__lshift>:
 800c63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c640:	460c      	mov	r4, r1
 800c642:	6849      	ldr	r1, [r1, #4]
 800c644:	6923      	ldr	r3, [r4, #16]
 800c646:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c64a:	68a3      	ldr	r3, [r4, #8]
 800c64c:	4607      	mov	r7, r0
 800c64e:	4691      	mov	r9, r2
 800c650:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c654:	f108 0601 	add.w	r6, r8, #1
 800c658:	42b3      	cmp	r3, r6
 800c65a:	db0b      	blt.n	800c674 <__lshift+0x38>
 800c65c:	4638      	mov	r0, r7
 800c65e:	f7ff fddf 	bl	800c220 <_Balloc>
 800c662:	4605      	mov	r5, r0
 800c664:	b948      	cbnz	r0, 800c67a <__lshift+0x3e>
 800c666:	4602      	mov	r2, r0
 800c668:	4b28      	ldr	r3, [pc, #160]	@ (800c70c <__lshift+0xd0>)
 800c66a:	4829      	ldr	r0, [pc, #164]	@ (800c710 <__lshift+0xd4>)
 800c66c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c670:	f000 fbda 	bl	800ce28 <__assert_func>
 800c674:	3101      	adds	r1, #1
 800c676:	005b      	lsls	r3, r3, #1
 800c678:	e7ee      	b.n	800c658 <__lshift+0x1c>
 800c67a:	2300      	movs	r3, #0
 800c67c:	f100 0114 	add.w	r1, r0, #20
 800c680:	f100 0210 	add.w	r2, r0, #16
 800c684:	4618      	mov	r0, r3
 800c686:	4553      	cmp	r3, sl
 800c688:	db33      	blt.n	800c6f2 <__lshift+0xb6>
 800c68a:	6920      	ldr	r0, [r4, #16]
 800c68c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c690:	f104 0314 	add.w	r3, r4, #20
 800c694:	f019 091f 	ands.w	r9, r9, #31
 800c698:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c69c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c6a0:	d02b      	beq.n	800c6fa <__lshift+0xbe>
 800c6a2:	f1c9 0e20 	rsb	lr, r9, #32
 800c6a6:	468a      	mov	sl, r1
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	6818      	ldr	r0, [r3, #0]
 800c6ac:	fa00 f009 	lsl.w	r0, r0, r9
 800c6b0:	4310      	orrs	r0, r2
 800c6b2:	f84a 0b04 	str.w	r0, [sl], #4
 800c6b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6ba:	459c      	cmp	ip, r3
 800c6bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c6c0:	d8f3      	bhi.n	800c6aa <__lshift+0x6e>
 800c6c2:	ebac 0304 	sub.w	r3, ip, r4
 800c6c6:	3b15      	subs	r3, #21
 800c6c8:	f023 0303 	bic.w	r3, r3, #3
 800c6cc:	3304      	adds	r3, #4
 800c6ce:	f104 0015 	add.w	r0, r4, #21
 800c6d2:	4584      	cmp	ip, r0
 800c6d4:	bf38      	it	cc
 800c6d6:	2304      	movcc	r3, #4
 800c6d8:	50ca      	str	r2, [r1, r3]
 800c6da:	b10a      	cbz	r2, 800c6e0 <__lshift+0xa4>
 800c6dc:	f108 0602 	add.w	r6, r8, #2
 800c6e0:	3e01      	subs	r6, #1
 800c6e2:	4638      	mov	r0, r7
 800c6e4:	612e      	str	r6, [r5, #16]
 800c6e6:	4621      	mov	r1, r4
 800c6e8:	f7ff fdda 	bl	800c2a0 <_Bfree>
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	e7c5      	b.n	800c686 <__lshift+0x4a>
 800c6fa:	3904      	subs	r1, #4
 800c6fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c700:	f841 2f04 	str.w	r2, [r1, #4]!
 800c704:	459c      	cmp	ip, r3
 800c706:	d8f9      	bhi.n	800c6fc <__lshift+0xc0>
 800c708:	e7ea      	b.n	800c6e0 <__lshift+0xa4>
 800c70a:	bf00      	nop
 800c70c:	0800da54 	.word	0x0800da54
 800c710:	0800da65 	.word	0x0800da65

0800c714 <__mcmp>:
 800c714:	690a      	ldr	r2, [r1, #16]
 800c716:	4603      	mov	r3, r0
 800c718:	6900      	ldr	r0, [r0, #16]
 800c71a:	1a80      	subs	r0, r0, r2
 800c71c:	b530      	push	{r4, r5, lr}
 800c71e:	d10e      	bne.n	800c73e <__mcmp+0x2a>
 800c720:	3314      	adds	r3, #20
 800c722:	3114      	adds	r1, #20
 800c724:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c728:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c72c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c730:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c734:	4295      	cmp	r5, r2
 800c736:	d003      	beq.n	800c740 <__mcmp+0x2c>
 800c738:	d205      	bcs.n	800c746 <__mcmp+0x32>
 800c73a:	f04f 30ff 	mov.w	r0, #4294967295
 800c73e:	bd30      	pop	{r4, r5, pc}
 800c740:	42a3      	cmp	r3, r4
 800c742:	d3f3      	bcc.n	800c72c <__mcmp+0x18>
 800c744:	e7fb      	b.n	800c73e <__mcmp+0x2a>
 800c746:	2001      	movs	r0, #1
 800c748:	e7f9      	b.n	800c73e <__mcmp+0x2a>
	...

0800c74c <__mdiff>:
 800c74c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c750:	4689      	mov	r9, r1
 800c752:	4606      	mov	r6, r0
 800c754:	4611      	mov	r1, r2
 800c756:	4648      	mov	r0, r9
 800c758:	4614      	mov	r4, r2
 800c75a:	f7ff ffdb 	bl	800c714 <__mcmp>
 800c75e:	1e05      	subs	r5, r0, #0
 800c760:	d112      	bne.n	800c788 <__mdiff+0x3c>
 800c762:	4629      	mov	r1, r5
 800c764:	4630      	mov	r0, r6
 800c766:	f7ff fd5b 	bl	800c220 <_Balloc>
 800c76a:	4602      	mov	r2, r0
 800c76c:	b928      	cbnz	r0, 800c77a <__mdiff+0x2e>
 800c76e:	4b3f      	ldr	r3, [pc, #252]	@ (800c86c <__mdiff+0x120>)
 800c770:	f240 2137 	movw	r1, #567	@ 0x237
 800c774:	483e      	ldr	r0, [pc, #248]	@ (800c870 <__mdiff+0x124>)
 800c776:	f000 fb57 	bl	800ce28 <__assert_func>
 800c77a:	2301      	movs	r3, #1
 800c77c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c780:	4610      	mov	r0, r2
 800c782:	b003      	add	sp, #12
 800c784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c788:	bfbc      	itt	lt
 800c78a:	464b      	movlt	r3, r9
 800c78c:	46a1      	movlt	r9, r4
 800c78e:	4630      	mov	r0, r6
 800c790:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c794:	bfba      	itte	lt
 800c796:	461c      	movlt	r4, r3
 800c798:	2501      	movlt	r5, #1
 800c79a:	2500      	movge	r5, #0
 800c79c:	f7ff fd40 	bl	800c220 <_Balloc>
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	b918      	cbnz	r0, 800c7ac <__mdiff+0x60>
 800c7a4:	4b31      	ldr	r3, [pc, #196]	@ (800c86c <__mdiff+0x120>)
 800c7a6:	f240 2145 	movw	r1, #581	@ 0x245
 800c7aa:	e7e3      	b.n	800c774 <__mdiff+0x28>
 800c7ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c7b0:	6926      	ldr	r6, [r4, #16]
 800c7b2:	60c5      	str	r5, [r0, #12]
 800c7b4:	f109 0310 	add.w	r3, r9, #16
 800c7b8:	f109 0514 	add.w	r5, r9, #20
 800c7bc:	f104 0e14 	add.w	lr, r4, #20
 800c7c0:	f100 0b14 	add.w	fp, r0, #20
 800c7c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c7c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c7cc:	9301      	str	r3, [sp, #4]
 800c7ce:	46d9      	mov	r9, fp
 800c7d0:	f04f 0c00 	mov.w	ip, #0
 800c7d4:	9b01      	ldr	r3, [sp, #4]
 800c7d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c7da:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c7de:	9301      	str	r3, [sp, #4]
 800c7e0:	fa1f f38a 	uxth.w	r3, sl
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	b283      	uxth	r3, r0
 800c7e8:	1acb      	subs	r3, r1, r3
 800c7ea:	0c00      	lsrs	r0, r0, #16
 800c7ec:	4463      	add	r3, ip
 800c7ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c7f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c7f6:	b29b      	uxth	r3, r3
 800c7f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c7fc:	4576      	cmp	r6, lr
 800c7fe:	f849 3b04 	str.w	r3, [r9], #4
 800c802:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c806:	d8e5      	bhi.n	800c7d4 <__mdiff+0x88>
 800c808:	1b33      	subs	r3, r6, r4
 800c80a:	3b15      	subs	r3, #21
 800c80c:	f023 0303 	bic.w	r3, r3, #3
 800c810:	3415      	adds	r4, #21
 800c812:	3304      	adds	r3, #4
 800c814:	42a6      	cmp	r6, r4
 800c816:	bf38      	it	cc
 800c818:	2304      	movcc	r3, #4
 800c81a:	441d      	add	r5, r3
 800c81c:	445b      	add	r3, fp
 800c81e:	461e      	mov	r6, r3
 800c820:	462c      	mov	r4, r5
 800c822:	4544      	cmp	r4, r8
 800c824:	d30e      	bcc.n	800c844 <__mdiff+0xf8>
 800c826:	f108 0103 	add.w	r1, r8, #3
 800c82a:	1b49      	subs	r1, r1, r5
 800c82c:	f021 0103 	bic.w	r1, r1, #3
 800c830:	3d03      	subs	r5, #3
 800c832:	45a8      	cmp	r8, r5
 800c834:	bf38      	it	cc
 800c836:	2100      	movcc	r1, #0
 800c838:	440b      	add	r3, r1
 800c83a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c83e:	b191      	cbz	r1, 800c866 <__mdiff+0x11a>
 800c840:	6117      	str	r7, [r2, #16]
 800c842:	e79d      	b.n	800c780 <__mdiff+0x34>
 800c844:	f854 1b04 	ldr.w	r1, [r4], #4
 800c848:	46e6      	mov	lr, ip
 800c84a:	0c08      	lsrs	r0, r1, #16
 800c84c:	fa1c fc81 	uxtah	ip, ip, r1
 800c850:	4471      	add	r1, lr
 800c852:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c856:	b289      	uxth	r1, r1
 800c858:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c85c:	f846 1b04 	str.w	r1, [r6], #4
 800c860:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c864:	e7dd      	b.n	800c822 <__mdiff+0xd6>
 800c866:	3f01      	subs	r7, #1
 800c868:	e7e7      	b.n	800c83a <__mdiff+0xee>
 800c86a:	bf00      	nop
 800c86c:	0800da54 	.word	0x0800da54
 800c870:	0800da65 	.word	0x0800da65

0800c874 <__d2b>:
 800c874:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c878:	460f      	mov	r7, r1
 800c87a:	2101      	movs	r1, #1
 800c87c:	ec59 8b10 	vmov	r8, r9, d0
 800c880:	4616      	mov	r6, r2
 800c882:	f7ff fccd 	bl	800c220 <_Balloc>
 800c886:	4604      	mov	r4, r0
 800c888:	b930      	cbnz	r0, 800c898 <__d2b+0x24>
 800c88a:	4602      	mov	r2, r0
 800c88c:	4b23      	ldr	r3, [pc, #140]	@ (800c91c <__d2b+0xa8>)
 800c88e:	4824      	ldr	r0, [pc, #144]	@ (800c920 <__d2b+0xac>)
 800c890:	f240 310f 	movw	r1, #783	@ 0x30f
 800c894:	f000 fac8 	bl	800ce28 <__assert_func>
 800c898:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c89c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8a0:	b10d      	cbz	r5, 800c8a6 <__d2b+0x32>
 800c8a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c8a6:	9301      	str	r3, [sp, #4]
 800c8a8:	f1b8 0300 	subs.w	r3, r8, #0
 800c8ac:	d023      	beq.n	800c8f6 <__d2b+0x82>
 800c8ae:	4668      	mov	r0, sp
 800c8b0:	9300      	str	r3, [sp, #0]
 800c8b2:	f7ff fd7c 	bl	800c3ae <__lo0bits>
 800c8b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c8ba:	b1d0      	cbz	r0, 800c8f2 <__d2b+0x7e>
 800c8bc:	f1c0 0320 	rsb	r3, r0, #32
 800c8c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c8c4:	430b      	orrs	r3, r1
 800c8c6:	40c2      	lsrs	r2, r0
 800c8c8:	6163      	str	r3, [r4, #20]
 800c8ca:	9201      	str	r2, [sp, #4]
 800c8cc:	9b01      	ldr	r3, [sp, #4]
 800c8ce:	61a3      	str	r3, [r4, #24]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	bf0c      	ite	eq
 800c8d4:	2201      	moveq	r2, #1
 800c8d6:	2202      	movne	r2, #2
 800c8d8:	6122      	str	r2, [r4, #16]
 800c8da:	b1a5      	cbz	r5, 800c906 <__d2b+0x92>
 800c8dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c8e0:	4405      	add	r5, r0
 800c8e2:	603d      	str	r5, [r7, #0]
 800c8e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c8e8:	6030      	str	r0, [r6, #0]
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	b003      	add	sp, #12
 800c8ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8f2:	6161      	str	r1, [r4, #20]
 800c8f4:	e7ea      	b.n	800c8cc <__d2b+0x58>
 800c8f6:	a801      	add	r0, sp, #4
 800c8f8:	f7ff fd59 	bl	800c3ae <__lo0bits>
 800c8fc:	9b01      	ldr	r3, [sp, #4]
 800c8fe:	6163      	str	r3, [r4, #20]
 800c900:	3020      	adds	r0, #32
 800c902:	2201      	movs	r2, #1
 800c904:	e7e8      	b.n	800c8d8 <__d2b+0x64>
 800c906:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c90a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c90e:	6038      	str	r0, [r7, #0]
 800c910:	6918      	ldr	r0, [r3, #16]
 800c912:	f7ff fd2d 	bl	800c370 <__hi0bits>
 800c916:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c91a:	e7e5      	b.n	800c8e8 <__d2b+0x74>
 800c91c:	0800da54 	.word	0x0800da54
 800c920:	0800da65 	.word	0x0800da65

0800c924 <__sfputc_r>:
 800c924:	6893      	ldr	r3, [r2, #8]
 800c926:	3b01      	subs	r3, #1
 800c928:	2b00      	cmp	r3, #0
 800c92a:	b410      	push	{r4}
 800c92c:	6093      	str	r3, [r2, #8]
 800c92e:	da08      	bge.n	800c942 <__sfputc_r+0x1e>
 800c930:	6994      	ldr	r4, [r2, #24]
 800c932:	42a3      	cmp	r3, r4
 800c934:	db01      	blt.n	800c93a <__sfputc_r+0x16>
 800c936:	290a      	cmp	r1, #10
 800c938:	d103      	bne.n	800c942 <__sfputc_r+0x1e>
 800c93a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c93e:	f7fe bba8 	b.w	800b092 <__swbuf_r>
 800c942:	6813      	ldr	r3, [r2, #0]
 800c944:	1c58      	adds	r0, r3, #1
 800c946:	6010      	str	r0, [r2, #0]
 800c948:	7019      	strb	r1, [r3, #0]
 800c94a:	4608      	mov	r0, r1
 800c94c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c950:	4770      	bx	lr

0800c952 <__sfputs_r>:
 800c952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c954:	4606      	mov	r6, r0
 800c956:	460f      	mov	r7, r1
 800c958:	4614      	mov	r4, r2
 800c95a:	18d5      	adds	r5, r2, r3
 800c95c:	42ac      	cmp	r4, r5
 800c95e:	d101      	bne.n	800c964 <__sfputs_r+0x12>
 800c960:	2000      	movs	r0, #0
 800c962:	e007      	b.n	800c974 <__sfputs_r+0x22>
 800c964:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c968:	463a      	mov	r2, r7
 800c96a:	4630      	mov	r0, r6
 800c96c:	f7ff ffda 	bl	800c924 <__sfputc_r>
 800c970:	1c43      	adds	r3, r0, #1
 800c972:	d1f3      	bne.n	800c95c <__sfputs_r+0xa>
 800c974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c978 <_vfiprintf_r>:
 800c978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c97c:	460d      	mov	r5, r1
 800c97e:	b09d      	sub	sp, #116	@ 0x74
 800c980:	4614      	mov	r4, r2
 800c982:	4698      	mov	r8, r3
 800c984:	4606      	mov	r6, r0
 800c986:	b118      	cbz	r0, 800c990 <_vfiprintf_r+0x18>
 800c988:	6a03      	ldr	r3, [r0, #32]
 800c98a:	b90b      	cbnz	r3, 800c990 <_vfiprintf_r+0x18>
 800c98c:	f7fe fa98 	bl	800aec0 <__sinit>
 800c990:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c992:	07d9      	lsls	r1, r3, #31
 800c994:	d405      	bmi.n	800c9a2 <_vfiprintf_r+0x2a>
 800c996:	89ab      	ldrh	r3, [r5, #12]
 800c998:	059a      	lsls	r2, r3, #22
 800c99a:	d402      	bmi.n	800c9a2 <_vfiprintf_r+0x2a>
 800c99c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c99e:	f7fe fce0 	bl	800b362 <__retarget_lock_acquire_recursive>
 800c9a2:	89ab      	ldrh	r3, [r5, #12]
 800c9a4:	071b      	lsls	r3, r3, #28
 800c9a6:	d501      	bpl.n	800c9ac <_vfiprintf_r+0x34>
 800c9a8:	692b      	ldr	r3, [r5, #16]
 800c9aa:	b99b      	cbnz	r3, 800c9d4 <_vfiprintf_r+0x5c>
 800c9ac:	4629      	mov	r1, r5
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	f7fe fbae 	bl	800b110 <__swsetup_r>
 800c9b4:	b170      	cbz	r0, 800c9d4 <_vfiprintf_r+0x5c>
 800c9b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9b8:	07dc      	lsls	r4, r3, #31
 800c9ba:	d504      	bpl.n	800c9c6 <_vfiprintf_r+0x4e>
 800c9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c0:	b01d      	add	sp, #116	@ 0x74
 800c9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c6:	89ab      	ldrh	r3, [r5, #12]
 800c9c8:	0598      	lsls	r0, r3, #22
 800c9ca:	d4f7      	bmi.n	800c9bc <_vfiprintf_r+0x44>
 800c9cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9ce:	f7fe fcc9 	bl	800b364 <__retarget_lock_release_recursive>
 800c9d2:	e7f3      	b.n	800c9bc <_vfiprintf_r+0x44>
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9d8:	2320      	movs	r3, #32
 800c9da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c9de:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9e2:	2330      	movs	r3, #48	@ 0x30
 800c9e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cb94 <_vfiprintf_r+0x21c>
 800c9e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c9ec:	f04f 0901 	mov.w	r9, #1
 800c9f0:	4623      	mov	r3, r4
 800c9f2:	469a      	mov	sl, r3
 800c9f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9f8:	b10a      	cbz	r2, 800c9fe <_vfiprintf_r+0x86>
 800c9fa:	2a25      	cmp	r2, #37	@ 0x25
 800c9fc:	d1f9      	bne.n	800c9f2 <_vfiprintf_r+0x7a>
 800c9fe:	ebba 0b04 	subs.w	fp, sl, r4
 800ca02:	d00b      	beq.n	800ca1c <_vfiprintf_r+0xa4>
 800ca04:	465b      	mov	r3, fp
 800ca06:	4622      	mov	r2, r4
 800ca08:	4629      	mov	r1, r5
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	f7ff ffa1 	bl	800c952 <__sfputs_r>
 800ca10:	3001      	adds	r0, #1
 800ca12:	f000 80a7 	beq.w	800cb64 <_vfiprintf_r+0x1ec>
 800ca16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca18:	445a      	add	r2, fp
 800ca1a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	f000 809f 	beq.w	800cb64 <_vfiprintf_r+0x1ec>
 800ca26:	2300      	movs	r3, #0
 800ca28:	f04f 32ff 	mov.w	r2, #4294967295
 800ca2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca30:	f10a 0a01 	add.w	sl, sl, #1
 800ca34:	9304      	str	r3, [sp, #16]
 800ca36:	9307      	str	r3, [sp, #28]
 800ca38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca3c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca3e:	4654      	mov	r4, sl
 800ca40:	2205      	movs	r2, #5
 800ca42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca46:	4853      	ldr	r0, [pc, #332]	@ (800cb94 <_vfiprintf_r+0x21c>)
 800ca48:	f7f3 fbc2 	bl	80001d0 <memchr>
 800ca4c:	9a04      	ldr	r2, [sp, #16]
 800ca4e:	b9d8      	cbnz	r0, 800ca88 <_vfiprintf_r+0x110>
 800ca50:	06d1      	lsls	r1, r2, #27
 800ca52:	bf44      	itt	mi
 800ca54:	2320      	movmi	r3, #32
 800ca56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca5a:	0713      	lsls	r3, r2, #28
 800ca5c:	bf44      	itt	mi
 800ca5e:	232b      	movmi	r3, #43	@ 0x2b
 800ca60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca64:	f89a 3000 	ldrb.w	r3, [sl]
 800ca68:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca6a:	d015      	beq.n	800ca98 <_vfiprintf_r+0x120>
 800ca6c:	9a07      	ldr	r2, [sp, #28]
 800ca6e:	4654      	mov	r4, sl
 800ca70:	2000      	movs	r0, #0
 800ca72:	f04f 0c0a 	mov.w	ip, #10
 800ca76:	4621      	mov	r1, r4
 800ca78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca7c:	3b30      	subs	r3, #48	@ 0x30
 800ca7e:	2b09      	cmp	r3, #9
 800ca80:	d94b      	bls.n	800cb1a <_vfiprintf_r+0x1a2>
 800ca82:	b1b0      	cbz	r0, 800cab2 <_vfiprintf_r+0x13a>
 800ca84:	9207      	str	r2, [sp, #28]
 800ca86:	e014      	b.n	800cab2 <_vfiprintf_r+0x13a>
 800ca88:	eba0 0308 	sub.w	r3, r0, r8
 800ca8c:	fa09 f303 	lsl.w	r3, r9, r3
 800ca90:	4313      	orrs	r3, r2
 800ca92:	9304      	str	r3, [sp, #16]
 800ca94:	46a2      	mov	sl, r4
 800ca96:	e7d2      	b.n	800ca3e <_vfiprintf_r+0xc6>
 800ca98:	9b03      	ldr	r3, [sp, #12]
 800ca9a:	1d19      	adds	r1, r3, #4
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	9103      	str	r1, [sp, #12]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	bfbb      	ittet	lt
 800caa4:	425b      	neglt	r3, r3
 800caa6:	f042 0202 	orrlt.w	r2, r2, #2
 800caaa:	9307      	strge	r3, [sp, #28]
 800caac:	9307      	strlt	r3, [sp, #28]
 800caae:	bfb8      	it	lt
 800cab0:	9204      	strlt	r2, [sp, #16]
 800cab2:	7823      	ldrb	r3, [r4, #0]
 800cab4:	2b2e      	cmp	r3, #46	@ 0x2e
 800cab6:	d10a      	bne.n	800cace <_vfiprintf_r+0x156>
 800cab8:	7863      	ldrb	r3, [r4, #1]
 800caba:	2b2a      	cmp	r3, #42	@ 0x2a
 800cabc:	d132      	bne.n	800cb24 <_vfiprintf_r+0x1ac>
 800cabe:	9b03      	ldr	r3, [sp, #12]
 800cac0:	1d1a      	adds	r2, r3, #4
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	9203      	str	r2, [sp, #12]
 800cac6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800caca:	3402      	adds	r4, #2
 800cacc:	9305      	str	r3, [sp, #20]
 800cace:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cba4 <_vfiprintf_r+0x22c>
 800cad2:	7821      	ldrb	r1, [r4, #0]
 800cad4:	2203      	movs	r2, #3
 800cad6:	4650      	mov	r0, sl
 800cad8:	f7f3 fb7a 	bl	80001d0 <memchr>
 800cadc:	b138      	cbz	r0, 800caee <_vfiprintf_r+0x176>
 800cade:	9b04      	ldr	r3, [sp, #16]
 800cae0:	eba0 000a 	sub.w	r0, r0, sl
 800cae4:	2240      	movs	r2, #64	@ 0x40
 800cae6:	4082      	lsls	r2, r0
 800cae8:	4313      	orrs	r3, r2
 800caea:	3401      	adds	r4, #1
 800caec:	9304      	str	r3, [sp, #16]
 800caee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caf2:	4829      	ldr	r0, [pc, #164]	@ (800cb98 <_vfiprintf_r+0x220>)
 800caf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800caf8:	2206      	movs	r2, #6
 800cafa:	f7f3 fb69 	bl	80001d0 <memchr>
 800cafe:	2800      	cmp	r0, #0
 800cb00:	d03f      	beq.n	800cb82 <_vfiprintf_r+0x20a>
 800cb02:	4b26      	ldr	r3, [pc, #152]	@ (800cb9c <_vfiprintf_r+0x224>)
 800cb04:	bb1b      	cbnz	r3, 800cb4e <_vfiprintf_r+0x1d6>
 800cb06:	9b03      	ldr	r3, [sp, #12]
 800cb08:	3307      	adds	r3, #7
 800cb0a:	f023 0307 	bic.w	r3, r3, #7
 800cb0e:	3308      	adds	r3, #8
 800cb10:	9303      	str	r3, [sp, #12]
 800cb12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb14:	443b      	add	r3, r7
 800cb16:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb18:	e76a      	b.n	800c9f0 <_vfiprintf_r+0x78>
 800cb1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb1e:	460c      	mov	r4, r1
 800cb20:	2001      	movs	r0, #1
 800cb22:	e7a8      	b.n	800ca76 <_vfiprintf_r+0xfe>
 800cb24:	2300      	movs	r3, #0
 800cb26:	3401      	adds	r4, #1
 800cb28:	9305      	str	r3, [sp, #20]
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	f04f 0c0a 	mov.w	ip, #10
 800cb30:	4620      	mov	r0, r4
 800cb32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb36:	3a30      	subs	r2, #48	@ 0x30
 800cb38:	2a09      	cmp	r2, #9
 800cb3a:	d903      	bls.n	800cb44 <_vfiprintf_r+0x1cc>
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d0c6      	beq.n	800cace <_vfiprintf_r+0x156>
 800cb40:	9105      	str	r1, [sp, #20]
 800cb42:	e7c4      	b.n	800cace <_vfiprintf_r+0x156>
 800cb44:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb48:	4604      	mov	r4, r0
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	e7f0      	b.n	800cb30 <_vfiprintf_r+0x1b8>
 800cb4e:	ab03      	add	r3, sp, #12
 800cb50:	9300      	str	r3, [sp, #0]
 800cb52:	462a      	mov	r2, r5
 800cb54:	4b12      	ldr	r3, [pc, #72]	@ (800cba0 <_vfiprintf_r+0x228>)
 800cb56:	a904      	add	r1, sp, #16
 800cb58:	4630      	mov	r0, r6
 800cb5a:	f7fd fd6d 	bl	800a638 <_printf_float>
 800cb5e:	4607      	mov	r7, r0
 800cb60:	1c78      	adds	r0, r7, #1
 800cb62:	d1d6      	bne.n	800cb12 <_vfiprintf_r+0x19a>
 800cb64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb66:	07d9      	lsls	r1, r3, #31
 800cb68:	d405      	bmi.n	800cb76 <_vfiprintf_r+0x1fe>
 800cb6a:	89ab      	ldrh	r3, [r5, #12]
 800cb6c:	059a      	lsls	r2, r3, #22
 800cb6e:	d402      	bmi.n	800cb76 <_vfiprintf_r+0x1fe>
 800cb70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb72:	f7fe fbf7 	bl	800b364 <__retarget_lock_release_recursive>
 800cb76:	89ab      	ldrh	r3, [r5, #12]
 800cb78:	065b      	lsls	r3, r3, #25
 800cb7a:	f53f af1f 	bmi.w	800c9bc <_vfiprintf_r+0x44>
 800cb7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb80:	e71e      	b.n	800c9c0 <_vfiprintf_r+0x48>
 800cb82:	ab03      	add	r3, sp, #12
 800cb84:	9300      	str	r3, [sp, #0]
 800cb86:	462a      	mov	r2, r5
 800cb88:	4b05      	ldr	r3, [pc, #20]	@ (800cba0 <_vfiprintf_r+0x228>)
 800cb8a:	a904      	add	r1, sp, #16
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	f7fd ffeb 	bl	800ab68 <_printf_i>
 800cb92:	e7e4      	b.n	800cb5e <_vfiprintf_r+0x1e6>
 800cb94:	0800dbc0 	.word	0x0800dbc0
 800cb98:	0800dbca 	.word	0x0800dbca
 800cb9c:	0800a639 	.word	0x0800a639
 800cba0:	0800c953 	.word	0x0800c953
 800cba4:	0800dbc6 	.word	0x0800dbc6

0800cba8 <__sflush_r>:
 800cba8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb0:	0716      	lsls	r6, r2, #28
 800cbb2:	4605      	mov	r5, r0
 800cbb4:	460c      	mov	r4, r1
 800cbb6:	d454      	bmi.n	800cc62 <__sflush_r+0xba>
 800cbb8:	684b      	ldr	r3, [r1, #4]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	dc02      	bgt.n	800cbc4 <__sflush_r+0x1c>
 800cbbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	dd48      	ble.n	800cc56 <__sflush_r+0xae>
 800cbc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cbc6:	2e00      	cmp	r6, #0
 800cbc8:	d045      	beq.n	800cc56 <__sflush_r+0xae>
 800cbca:	2300      	movs	r3, #0
 800cbcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cbd0:	682f      	ldr	r7, [r5, #0]
 800cbd2:	6a21      	ldr	r1, [r4, #32]
 800cbd4:	602b      	str	r3, [r5, #0]
 800cbd6:	d030      	beq.n	800cc3a <__sflush_r+0x92>
 800cbd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cbda:	89a3      	ldrh	r3, [r4, #12]
 800cbdc:	0759      	lsls	r1, r3, #29
 800cbde:	d505      	bpl.n	800cbec <__sflush_r+0x44>
 800cbe0:	6863      	ldr	r3, [r4, #4]
 800cbe2:	1ad2      	subs	r2, r2, r3
 800cbe4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cbe6:	b10b      	cbz	r3, 800cbec <__sflush_r+0x44>
 800cbe8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cbea:	1ad2      	subs	r2, r2, r3
 800cbec:	2300      	movs	r3, #0
 800cbee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cbf0:	6a21      	ldr	r1, [r4, #32]
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	47b0      	blx	r6
 800cbf6:	1c43      	adds	r3, r0, #1
 800cbf8:	89a3      	ldrh	r3, [r4, #12]
 800cbfa:	d106      	bne.n	800cc0a <__sflush_r+0x62>
 800cbfc:	6829      	ldr	r1, [r5, #0]
 800cbfe:	291d      	cmp	r1, #29
 800cc00:	d82b      	bhi.n	800cc5a <__sflush_r+0xb2>
 800cc02:	4a2a      	ldr	r2, [pc, #168]	@ (800ccac <__sflush_r+0x104>)
 800cc04:	410a      	asrs	r2, r1
 800cc06:	07d6      	lsls	r6, r2, #31
 800cc08:	d427      	bmi.n	800cc5a <__sflush_r+0xb2>
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	6062      	str	r2, [r4, #4]
 800cc0e:	04d9      	lsls	r1, r3, #19
 800cc10:	6922      	ldr	r2, [r4, #16]
 800cc12:	6022      	str	r2, [r4, #0]
 800cc14:	d504      	bpl.n	800cc20 <__sflush_r+0x78>
 800cc16:	1c42      	adds	r2, r0, #1
 800cc18:	d101      	bne.n	800cc1e <__sflush_r+0x76>
 800cc1a:	682b      	ldr	r3, [r5, #0]
 800cc1c:	b903      	cbnz	r3, 800cc20 <__sflush_r+0x78>
 800cc1e:	6560      	str	r0, [r4, #84]	@ 0x54
 800cc20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc22:	602f      	str	r7, [r5, #0]
 800cc24:	b1b9      	cbz	r1, 800cc56 <__sflush_r+0xae>
 800cc26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc2a:	4299      	cmp	r1, r3
 800cc2c:	d002      	beq.n	800cc34 <__sflush_r+0x8c>
 800cc2e:	4628      	mov	r0, r5
 800cc30:	f7ff f9f6 	bl	800c020 <_free_r>
 800cc34:	2300      	movs	r3, #0
 800cc36:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc38:	e00d      	b.n	800cc56 <__sflush_r+0xae>
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	4628      	mov	r0, r5
 800cc3e:	47b0      	blx	r6
 800cc40:	4602      	mov	r2, r0
 800cc42:	1c50      	adds	r0, r2, #1
 800cc44:	d1c9      	bne.n	800cbda <__sflush_r+0x32>
 800cc46:	682b      	ldr	r3, [r5, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d0c6      	beq.n	800cbda <__sflush_r+0x32>
 800cc4c:	2b1d      	cmp	r3, #29
 800cc4e:	d001      	beq.n	800cc54 <__sflush_r+0xac>
 800cc50:	2b16      	cmp	r3, #22
 800cc52:	d11e      	bne.n	800cc92 <__sflush_r+0xea>
 800cc54:	602f      	str	r7, [r5, #0]
 800cc56:	2000      	movs	r0, #0
 800cc58:	e022      	b.n	800cca0 <__sflush_r+0xf8>
 800cc5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc5e:	b21b      	sxth	r3, r3
 800cc60:	e01b      	b.n	800cc9a <__sflush_r+0xf2>
 800cc62:	690f      	ldr	r7, [r1, #16]
 800cc64:	2f00      	cmp	r7, #0
 800cc66:	d0f6      	beq.n	800cc56 <__sflush_r+0xae>
 800cc68:	0793      	lsls	r3, r2, #30
 800cc6a:	680e      	ldr	r6, [r1, #0]
 800cc6c:	bf08      	it	eq
 800cc6e:	694b      	ldreq	r3, [r1, #20]
 800cc70:	600f      	str	r7, [r1, #0]
 800cc72:	bf18      	it	ne
 800cc74:	2300      	movne	r3, #0
 800cc76:	eba6 0807 	sub.w	r8, r6, r7
 800cc7a:	608b      	str	r3, [r1, #8]
 800cc7c:	f1b8 0f00 	cmp.w	r8, #0
 800cc80:	dde9      	ble.n	800cc56 <__sflush_r+0xae>
 800cc82:	6a21      	ldr	r1, [r4, #32]
 800cc84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cc86:	4643      	mov	r3, r8
 800cc88:	463a      	mov	r2, r7
 800cc8a:	4628      	mov	r0, r5
 800cc8c:	47b0      	blx	r6
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	dc08      	bgt.n	800cca4 <__sflush_r+0xfc>
 800cc92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc9a:	81a3      	strh	r3, [r4, #12]
 800cc9c:	f04f 30ff 	mov.w	r0, #4294967295
 800cca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cca4:	4407      	add	r7, r0
 800cca6:	eba8 0800 	sub.w	r8, r8, r0
 800ccaa:	e7e7      	b.n	800cc7c <__sflush_r+0xd4>
 800ccac:	dfbffffe 	.word	0xdfbffffe

0800ccb0 <_fflush_r>:
 800ccb0:	b538      	push	{r3, r4, r5, lr}
 800ccb2:	690b      	ldr	r3, [r1, #16]
 800ccb4:	4605      	mov	r5, r0
 800ccb6:	460c      	mov	r4, r1
 800ccb8:	b913      	cbnz	r3, 800ccc0 <_fflush_r+0x10>
 800ccba:	2500      	movs	r5, #0
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	bd38      	pop	{r3, r4, r5, pc}
 800ccc0:	b118      	cbz	r0, 800ccca <_fflush_r+0x1a>
 800ccc2:	6a03      	ldr	r3, [r0, #32]
 800ccc4:	b90b      	cbnz	r3, 800ccca <_fflush_r+0x1a>
 800ccc6:	f7fe f8fb 	bl	800aec0 <__sinit>
 800ccca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d0f3      	beq.n	800ccba <_fflush_r+0xa>
 800ccd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ccd4:	07d0      	lsls	r0, r2, #31
 800ccd6:	d404      	bmi.n	800cce2 <_fflush_r+0x32>
 800ccd8:	0599      	lsls	r1, r3, #22
 800ccda:	d402      	bmi.n	800cce2 <_fflush_r+0x32>
 800ccdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccde:	f7fe fb40 	bl	800b362 <__retarget_lock_acquire_recursive>
 800cce2:	4628      	mov	r0, r5
 800cce4:	4621      	mov	r1, r4
 800cce6:	f7ff ff5f 	bl	800cba8 <__sflush_r>
 800ccea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ccec:	07da      	lsls	r2, r3, #31
 800ccee:	4605      	mov	r5, r0
 800ccf0:	d4e4      	bmi.n	800ccbc <_fflush_r+0xc>
 800ccf2:	89a3      	ldrh	r3, [r4, #12]
 800ccf4:	059b      	lsls	r3, r3, #22
 800ccf6:	d4e1      	bmi.n	800ccbc <_fflush_r+0xc>
 800ccf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccfa:	f7fe fb33 	bl	800b364 <__retarget_lock_release_recursive>
 800ccfe:	e7dd      	b.n	800ccbc <_fflush_r+0xc>

0800cd00 <__swhatbuf_r>:
 800cd00:	b570      	push	{r4, r5, r6, lr}
 800cd02:	460c      	mov	r4, r1
 800cd04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd08:	2900      	cmp	r1, #0
 800cd0a:	b096      	sub	sp, #88	@ 0x58
 800cd0c:	4615      	mov	r5, r2
 800cd0e:	461e      	mov	r6, r3
 800cd10:	da0d      	bge.n	800cd2e <__swhatbuf_r+0x2e>
 800cd12:	89a3      	ldrh	r3, [r4, #12]
 800cd14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cd18:	f04f 0100 	mov.w	r1, #0
 800cd1c:	bf14      	ite	ne
 800cd1e:	2340      	movne	r3, #64	@ 0x40
 800cd20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cd24:	2000      	movs	r0, #0
 800cd26:	6031      	str	r1, [r6, #0]
 800cd28:	602b      	str	r3, [r5, #0]
 800cd2a:	b016      	add	sp, #88	@ 0x58
 800cd2c:	bd70      	pop	{r4, r5, r6, pc}
 800cd2e:	466a      	mov	r2, sp
 800cd30:	f000 f848 	bl	800cdc4 <_fstat_r>
 800cd34:	2800      	cmp	r0, #0
 800cd36:	dbec      	blt.n	800cd12 <__swhatbuf_r+0x12>
 800cd38:	9901      	ldr	r1, [sp, #4]
 800cd3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cd3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cd42:	4259      	negs	r1, r3
 800cd44:	4159      	adcs	r1, r3
 800cd46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd4a:	e7eb      	b.n	800cd24 <__swhatbuf_r+0x24>

0800cd4c <__smakebuf_r>:
 800cd4c:	898b      	ldrh	r3, [r1, #12]
 800cd4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd50:	079d      	lsls	r5, r3, #30
 800cd52:	4606      	mov	r6, r0
 800cd54:	460c      	mov	r4, r1
 800cd56:	d507      	bpl.n	800cd68 <__smakebuf_r+0x1c>
 800cd58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cd5c:	6023      	str	r3, [r4, #0]
 800cd5e:	6123      	str	r3, [r4, #16]
 800cd60:	2301      	movs	r3, #1
 800cd62:	6163      	str	r3, [r4, #20]
 800cd64:	b003      	add	sp, #12
 800cd66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd68:	ab01      	add	r3, sp, #4
 800cd6a:	466a      	mov	r2, sp
 800cd6c:	f7ff ffc8 	bl	800cd00 <__swhatbuf_r>
 800cd70:	9f00      	ldr	r7, [sp, #0]
 800cd72:	4605      	mov	r5, r0
 800cd74:	4639      	mov	r1, r7
 800cd76:	4630      	mov	r0, r6
 800cd78:	f7ff f9c6 	bl	800c108 <_malloc_r>
 800cd7c:	b948      	cbnz	r0, 800cd92 <__smakebuf_r+0x46>
 800cd7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd82:	059a      	lsls	r2, r3, #22
 800cd84:	d4ee      	bmi.n	800cd64 <__smakebuf_r+0x18>
 800cd86:	f023 0303 	bic.w	r3, r3, #3
 800cd8a:	f043 0302 	orr.w	r3, r3, #2
 800cd8e:	81a3      	strh	r3, [r4, #12]
 800cd90:	e7e2      	b.n	800cd58 <__smakebuf_r+0xc>
 800cd92:	89a3      	ldrh	r3, [r4, #12]
 800cd94:	6020      	str	r0, [r4, #0]
 800cd96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd9a:	81a3      	strh	r3, [r4, #12]
 800cd9c:	9b01      	ldr	r3, [sp, #4]
 800cd9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cda2:	b15b      	cbz	r3, 800cdbc <__smakebuf_r+0x70>
 800cda4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cda8:	4630      	mov	r0, r6
 800cdaa:	f000 f81d 	bl	800cde8 <_isatty_r>
 800cdae:	b128      	cbz	r0, 800cdbc <__smakebuf_r+0x70>
 800cdb0:	89a3      	ldrh	r3, [r4, #12]
 800cdb2:	f023 0303 	bic.w	r3, r3, #3
 800cdb6:	f043 0301 	orr.w	r3, r3, #1
 800cdba:	81a3      	strh	r3, [r4, #12]
 800cdbc:	89a3      	ldrh	r3, [r4, #12]
 800cdbe:	431d      	orrs	r5, r3
 800cdc0:	81a5      	strh	r5, [r4, #12]
 800cdc2:	e7cf      	b.n	800cd64 <__smakebuf_r+0x18>

0800cdc4 <_fstat_r>:
 800cdc4:	b538      	push	{r3, r4, r5, lr}
 800cdc6:	4d07      	ldr	r5, [pc, #28]	@ (800cde4 <_fstat_r+0x20>)
 800cdc8:	2300      	movs	r3, #0
 800cdca:	4604      	mov	r4, r0
 800cdcc:	4608      	mov	r0, r1
 800cdce:	4611      	mov	r1, r2
 800cdd0:	602b      	str	r3, [r5, #0]
 800cdd2:	f7f5 fadb 	bl	800238c <_fstat>
 800cdd6:	1c43      	adds	r3, r0, #1
 800cdd8:	d102      	bne.n	800cde0 <_fstat_r+0x1c>
 800cdda:	682b      	ldr	r3, [r5, #0]
 800cddc:	b103      	cbz	r3, 800cde0 <_fstat_r+0x1c>
 800cdde:	6023      	str	r3, [r4, #0]
 800cde0:	bd38      	pop	{r3, r4, r5, pc}
 800cde2:	bf00      	nop
 800cde4:	20002464 	.word	0x20002464

0800cde8 <_isatty_r>:
 800cde8:	b538      	push	{r3, r4, r5, lr}
 800cdea:	4d06      	ldr	r5, [pc, #24]	@ (800ce04 <_isatty_r+0x1c>)
 800cdec:	2300      	movs	r3, #0
 800cdee:	4604      	mov	r4, r0
 800cdf0:	4608      	mov	r0, r1
 800cdf2:	602b      	str	r3, [r5, #0]
 800cdf4:	f7f5 fada 	bl	80023ac <_isatty>
 800cdf8:	1c43      	adds	r3, r0, #1
 800cdfa:	d102      	bne.n	800ce02 <_isatty_r+0x1a>
 800cdfc:	682b      	ldr	r3, [r5, #0]
 800cdfe:	b103      	cbz	r3, 800ce02 <_isatty_r+0x1a>
 800ce00:	6023      	str	r3, [r4, #0]
 800ce02:	bd38      	pop	{r3, r4, r5, pc}
 800ce04:	20002464 	.word	0x20002464

0800ce08 <_sbrk_r>:
 800ce08:	b538      	push	{r3, r4, r5, lr}
 800ce0a:	4d06      	ldr	r5, [pc, #24]	@ (800ce24 <_sbrk_r+0x1c>)
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	4604      	mov	r4, r0
 800ce10:	4608      	mov	r0, r1
 800ce12:	602b      	str	r3, [r5, #0]
 800ce14:	f7f5 fae2 	bl	80023dc <_sbrk>
 800ce18:	1c43      	adds	r3, r0, #1
 800ce1a:	d102      	bne.n	800ce22 <_sbrk_r+0x1a>
 800ce1c:	682b      	ldr	r3, [r5, #0]
 800ce1e:	b103      	cbz	r3, 800ce22 <_sbrk_r+0x1a>
 800ce20:	6023      	str	r3, [r4, #0]
 800ce22:	bd38      	pop	{r3, r4, r5, pc}
 800ce24:	20002464 	.word	0x20002464

0800ce28 <__assert_func>:
 800ce28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce2a:	4614      	mov	r4, r2
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	4b09      	ldr	r3, [pc, #36]	@ (800ce54 <__assert_func+0x2c>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	4605      	mov	r5, r0
 800ce34:	68d8      	ldr	r0, [r3, #12]
 800ce36:	b954      	cbnz	r4, 800ce4e <__assert_func+0x26>
 800ce38:	4b07      	ldr	r3, [pc, #28]	@ (800ce58 <__assert_func+0x30>)
 800ce3a:	461c      	mov	r4, r3
 800ce3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce40:	9100      	str	r1, [sp, #0]
 800ce42:	462b      	mov	r3, r5
 800ce44:	4905      	ldr	r1, [pc, #20]	@ (800ce5c <__assert_func+0x34>)
 800ce46:	f000 f841 	bl	800cecc <fiprintf>
 800ce4a:	f000 f851 	bl	800cef0 <abort>
 800ce4e:	4b04      	ldr	r3, [pc, #16]	@ (800ce60 <__assert_func+0x38>)
 800ce50:	e7f4      	b.n	800ce3c <__assert_func+0x14>
 800ce52:	bf00      	nop
 800ce54:	2000001c 	.word	0x2000001c
 800ce58:	0800dc16 	.word	0x0800dc16
 800ce5c:	0800dbe8 	.word	0x0800dbe8
 800ce60:	0800dbdb 	.word	0x0800dbdb

0800ce64 <_calloc_r>:
 800ce64:	b570      	push	{r4, r5, r6, lr}
 800ce66:	fba1 5402 	umull	r5, r4, r1, r2
 800ce6a:	b93c      	cbnz	r4, 800ce7c <_calloc_r+0x18>
 800ce6c:	4629      	mov	r1, r5
 800ce6e:	f7ff f94b 	bl	800c108 <_malloc_r>
 800ce72:	4606      	mov	r6, r0
 800ce74:	b928      	cbnz	r0, 800ce82 <_calloc_r+0x1e>
 800ce76:	2600      	movs	r6, #0
 800ce78:	4630      	mov	r0, r6
 800ce7a:	bd70      	pop	{r4, r5, r6, pc}
 800ce7c:	220c      	movs	r2, #12
 800ce7e:	6002      	str	r2, [r0, #0]
 800ce80:	e7f9      	b.n	800ce76 <_calloc_r+0x12>
 800ce82:	462a      	mov	r2, r5
 800ce84:	4621      	mov	r1, r4
 800ce86:	f7fe f999 	bl	800b1bc <memset>
 800ce8a:	e7f5      	b.n	800ce78 <_calloc_r+0x14>

0800ce8c <__ascii_mbtowc>:
 800ce8c:	b082      	sub	sp, #8
 800ce8e:	b901      	cbnz	r1, 800ce92 <__ascii_mbtowc+0x6>
 800ce90:	a901      	add	r1, sp, #4
 800ce92:	b142      	cbz	r2, 800cea6 <__ascii_mbtowc+0x1a>
 800ce94:	b14b      	cbz	r3, 800ceaa <__ascii_mbtowc+0x1e>
 800ce96:	7813      	ldrb	r3, [r2, #0]
 800ce98:	600b      	str	r3, [r1, #0]
 800ce9a:	7812      	ldrb	r2, [r2, #0]
 800ce9c:	1e10      	subs	r0, r2, #0
 800ce9e:	bf18      	it	ne
 800cea0:	2001      	movne	r0, #1
 800cea2:	b002      	add	sp, #8
 800cea4:	4770      	bx	lr
 800cea6:	4610      	mov	r0, r2
 800cea8:	e7fb      	b.n	800cea2 <__ascii_mbtowc+0x16>
 800ceaa:	f06f 0001 	mvn.w	r0, #1
 800ceae:	e7f8      	b.n	800cea2 <__ascii_mbtowc+0x16>

0800ceb0 <__ascii_wctomb>:
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	4608      	mov	r0, r1
 800ceb4:	b141      	cbz	r1, 800cec8 <__ascii_wctomb+0x18>
 800ceb6:	2aff      	cmp	r2, #255	@ 0xff
 800ceb8:	d904      	bls.n	800cec4 <__ascii_wctomb+0x14>
 800ceba:	228a      	movs	r2, #138	@ 0x8a
 800cebc:	601a      	str	r2, [r3, #0]
 800cebe:	f04f 30ff 	mov.w	r0, #4294967295
 800cec2:	4770      	bx	lr
 800cec4:	700a      	strb	r2, [r1, #0]
 800cec6:	2001      	movs	r0, #1
 800cec8:	4770      	bx	lr
	...

0800cecc <fiprintf>:
 800cecc:	b40e      	push	{r1, r2, r3}
 800cece:	b503      	push	{r0, r1, lr}
 800ced0:	4601      	mov	r1, r0
 800ced2:	ab03      	add	r3, sp, #12
 800ced4:	4805      	ldr	r0, [pc, #20]	@ (800ceec <fiprintf+0x20>)
 800ced6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceda:	6800      	ldr	r0, [r0, #0]
 800cedc:	9301      	str	r3, [sp, #4]
 800cede:	f7ff fd4b 	bl	800c978 <_vfiprintf_r>
 800cee2:	b002      	add	sp, #8
 800cee4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cee8:	b003      	add	sp, #12
 800ceea:	4770      	bx	lr
 800ceec:	2000001c 	.word	0x2000001c

0800cef0 <abort>:
 800cef0:	b508      	push	{r3, lr}
 800cef2:	2006      	movs	r0, #6
 800cef4:	f000 f82c 	bl	800cf50 <raise>
 800cef8:	2001      	movs	r0, #1
 800cefa:	f7f5 fa13 	bl	8002324 <_exit>

0800cefe <_raise_r>:
 800cefe:	291f      	cmp	r1, #31
 800cf00:	b538      	push	{r3, r4, r5, lr}
 800cf02:	4605      	mov	r5, r0
 800cf04:	460c      	mov	r4, r1
 800cf06:	d904      	bls.n	800cf12 <_raise_r+0x14>
 800cf08:	2316      	movs	r3, #22
 800cf0a:	6003      	str	r3, [r0, #0]
 800cf0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf10:	bd38      	pop	{r3, r4, r5, pc}
 800cf12:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cf14:	b112      	cbz	r2, 800cf1c <_raise_r+0x1e>
 800cf16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf1a:	b94b      	cbnz	r3, 800cf30 <_raise_r+0x32>
 800cf1c:	4628      	mov	r0, r5
 800cf1e:	f000 f831 	bl	800cf84 <_getpid_r>
 800cf22:	4622      	mov	r2, r4
 800cf24:	4601      	mov	r1, r0
 800cf26:	4628      	mov	r0, r5
 800cf28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf2c:	f000 b818 	b.w	800cf60 <_kill_r>
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d00a      	beq.n	800cf4a <_raise_r+0x4c>
 800cf34:	1c59      	adds	r1, r3, #1
 800cf36:	d103      	bne.n	800cf40 <_raise_r+0x42>
 800cf38:	2316      	movs	r3, #22
 800cf3a:	6003      	str	r3, [r0, #0]
 800cf3c:	2001      	movs	r0, #1
 800cf3e:	e7e7      	b.n	800cf10 <_raise_r+0x12>
 800cf40:	2100      	movs	r1, #0
 800cf42:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cf46:	4620      	mov	r0, r4
 800cf48:	4798      	blx	r3
 800cf4a:	2000      	movs	r0, #0
 800cf4c:	e7e0      	b.n	800cf10 <_raise_r+0x12>
	...

0800cf50 <raise>:
 800cf50:	4b02      	ldr	r3, [pc, #8]	@ (800cf5c <raise+0xc>)
 800cf52:	4601      	mov	r1, r0
 800cf54:	6818      	ldr	r0, [r3, #0]
 800cf56:	f7ff bfd2 	b.w	800cefe <_raise_r>
 800cf5a:	bf00      	nop
 800cf5c:	2000001c 	.word	0x2000001c

0800cf60 <_kill_r>:
 800cf60:	b538      	push	{r3, r4, r5, lr}
 800cf62:	4d07      	ldr	r5, [pc, #28]	@ (800cf80 <_kill_r+0x20>)
 800cf64:	2300      	movs	r3, #0
 800cf66:	4604      	mov	r4, r0
 800cf68:	4608      	mov	r0, r1
 800cf6a:	4611      	mov	r1, r2
 800cf6c:	602b      	str	r3, [r5, #0]
 800cf6e:	f7f5 f9c9 	bl	8002304 <_kill>
 800cf72:	1c43      	adds	r3, r0, #1
 800cf74:	d102      	bne.n	800cf7c <_kill_r+0x1c>
 800cf76:	682b      	ldr	r3, [r5, #0]
 800cf78:	b103      	cbz	r3, 800cf7c <_kill_r+0x1c>
 800cf7a:	6023      	str	r3, [r4, #0]
 800cf7c:	bd38      	pop	{r3, r4, r5, pc}
 800cf7e:	bf00      	nop
 800cf80:	20002464 	.word	0x20002464

0800cf84 <_getpid_r>:
 800cf84:	f7f5 b9b6 	b.w	80022f4 <_getpid>

0800cf88 <_init>:
 800cf88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf8a:	bf00      	nop
 800cf8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf8e:	bc08      	pop	{r3}
 800cf90:	469e      	mov	lr, r3
 800cf92:	4770      	bx	lr

0800cf94 <_fini>:
 800cf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf96:	bf00      	nop
 800cf98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf9a:	bc08      	pop	{r3}
 800cf9c:	469e      	mov	lr, r3
 800cf9e:	4770      	bx	lr
