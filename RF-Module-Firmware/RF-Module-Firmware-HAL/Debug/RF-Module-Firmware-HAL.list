
RF-Module-Firmware-HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c920  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cb0  0800cab0  0800cab0  0000dab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d760  0800d760  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d760  0800d760  0000e760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d768  0800d768  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d768  0800d768  0000e768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d76c  0800d76c  0000e76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800d770  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002680  200001d8  0800d948  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002858  0800d948  0000f858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022bf3  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b6b  00000000  00000000  00031dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf8  00000000  00000000  00036968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015a4  00000000  00000000  00038560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002548c  00000000  00000000  00039b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000215f3  00000000  00000000  0005ef90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcf2b  00000000  00000000  00080583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d4ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008550  00000000  00000000  0015d4f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00165a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ca98 	.word	0x0800ca98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800ca98 	.word	0x0800ca98

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e9c:	4b17      	ldr	r3, [pc, #92]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000e9e:	4a18      	ldr	r2, [pc, #96]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000ea2:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000ea4:	2205      	movs	r2, #5
 8000ea6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eae:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000eb6:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000eba:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000ebe:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000ec2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000eca:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000edc:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ee8:	4804      	ldr	r0, [pc, #16]	@ (8000efc <MX_CAN1_Init+0x64>)
 8000eea:	f001 fd3d 	bl	8002968 <HAL_CAN_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ef4:	f000 fb38 	bl	8001568 <Error_Handler>
//		printf("[!SYSTEM ERROR]CAN Initialization Error At CAN Start");
//		Error_Handler();
//	}
  /* USER CODE END CAN1_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200001f4 	.word	0x200001f4
 8000f00:	40006400 	.word	0x40006400

08000f04 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	@ 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a21      	ldr	r2, [pc, #132]	@ (8000fa8 <HAL_CAN_MspInit+0xa4>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d13b      	bne.n	8000f9e <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f26:	4b21      	ldr	r3, [pc, #132]	@ (8000fac <HAL_CAN_MspInit+0xa8>)
 8000f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f2a:	4a20      	ldr	r2, [pc, #128]	@ (8000fac <HAL_CAN_MspInit+0xa8>)
 8000f2c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f30:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f32:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <HAL_CAN_MspInit+0xa8>)
 8000f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <HAL_CAN_MspInit+0xa8>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f42:	4a1a      	ldr	r2, [pc, #104]	@ (8000fac <HAL_CAN_MspInit+0xa8>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f4a:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <HAL_CAN_MspInit+0xa8>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f68:	2309      	movs	r3, #9
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f76:	f002 f9d5 	bl	8003324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f8c:	2309      	movs	r3, #9
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f9a:	f002 f9c3 	bl	8003324 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	3728      	adds	r7, #40	@ 0x28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40006400 	.word	0x40006400
 8000fac:	40021000 	.word	0x40021000

08000fb0 <CAN_Initialize>:
  }
}

/* USER CODE BEGIN 1 */

void CAN_Initialize() {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af00      	add	r7, sp, #0
//	MX_CAN1_Init();
	/* USER CODE BEGIN 2 */
	CAN_FilterTypeDef high_priority_filter;
	high_priority_filter.FilterIdHigh = 0x100 << 5;
 8000fb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fba:	603b      	str	r3, [r7, #0]
	high_priority_filter.FilterMaskIdHigh = 0x000 << 5;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
	high_priority_filter.FilterIdLow = 0x0000;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
	high_priority_filter.FilterMaskIdLow = 0x0000;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
	high_priority_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	613b      	str	r3, [r7, #16]
	high_priority_filter.FilterBank = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
	high_priority_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61bb      	str	r3, [r7, #24]
	high_priority_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	61fb      	str	r3, [r7, #28]
	high_priority_filter.FilterActivation = CAN_FILTER_ENABLE;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	623b      	str	r3, [r7, #32]

	if (HAL_CAN_ConfigFilter(&hcan1, &high_priority_filter) != HAL_OK) {
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480b      	ldr	r0, [pc, #44]	@ (8001010 <CAN_Initialize+0x60>)
 8000fe2:	f001 fdbc 	bl	8002b5e <HAL_CAN_ConfigFilter>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <CAN_Initialize+0x40>
		/* Filter configuration Error */
		Error_Handler();
 8000fec:	f000 fabc 	bl	8001568 <Error_Handler>
//	if (HAL_CAN_ConfigFilter(&hcan1, &low_priority_filter) != HAL_OK) {
//		/* Filter configuration Error */
//		Error_Handler();
//	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000ff0:	4807      	ldr	r0, [pc, #28]	@ (8001010 <CAN_Initialize+0x60>)
 8000ff2:	f001 fe7e 	bl	8002cf2 <HAL_CAN_Start>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d004      	beq.n	8001006 <CAN_Initialize+0x56>
		printf("[!SYSTEM ERROR]CAN Initialization Error At CAN Start");
 8000ffc:	4805      	ldr	r0, [pc, #20]	@ (8001014 <CAN_Initialize+0x64>)
 8000ffe:	f009 fd1d 	bl	800aa3c <iprintf>
		Error_Handler();
 8001002:	f000 fab1 	bl	8001568 <Error_Handler>
//	}
//	TxHeader.RTR = CAN_RTR_DATA;
//	TxHeader.IDE = CAN_ID_STD;
//	TxHeader.DLC = 8;
//	TxHeader.TransmitGlobalTime = DISABLE;
}
 8001006:	bf00      	nop
 8001008:	3728      	adds	r7, #40	@ 0x28
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200001f4 	.word	0x200001f4
 8001014:	0800cab0 	.word	0x0800cab0

08001018 <HAL_CAN_SafeAddTxMessage>:
//	}
//
//	return 1;
//}
HAL_StatusTypeDef HAL_CAN_SafeAddTxMessage(uint8_t *msg, uint32_t msg_id,
		uint32_t msg_length, uint32_t *TxMailbox, uint32_t rtr) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b08c      	sub	sp, #48	@ 0x30
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	603b      	str	r3, [r7, #0]
	uint32_t fc_tick;
	HAL_StatusTypeDef hal_stat;
	CAN_TxHeaderTypeDef _TxHeader;

	// These will never change
	_TxHeader.IDE = CAN_ID_STD;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
	_TxHeader.ExtId = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
	_TxHeader.TransmitGlobalTime = DISABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	// User will give us this information
	_TxHeader.RTR = rtr;
 8001034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001036:	61fb      	str	r3, [r7, #28]
	_TxHeader.StdId = msg_id;
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	613b      	str	r3, [r7, #16]
	_TxHeader.DLC = msg_length;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	623b      	str	r3, [r7, #32]

	// Start a timer to check timeout conditions
	fc_tick = HAL_GetTick();
 8001040:	f001 fc86 	bl	8002950 <HAL_GetTick>
 8001044:	62f8      	str	r0, [r7, #44]	@ 0x2c

	/* Try to add a Tx message. Returns HAL_ERROR if there are no avail
	 * mailboxes or if the peripheral is not initialized. */
	do {
		hal_stat = HAL_CAN_AddTxMessage(&hcan1, &_TxHeader, msg, TxMailbox);
 8001046:	f107 0110 	add.w	r1, r7, #16
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	480c      	ldr	r0, [pc, #48]	@ (8001080 <HAL_CAN_SafeAddTxMessage+0x68>)
 8001050:	f001 fe93 	bl	8002d7a <HAL_CAN_AddTxMessage>
 8001054:	4603      	mov	r3, r0
 8001056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	} while (hal_stat != HAL_OK && (HAL_GetTick() - fc_tick < 500));
 800105a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800105e:	2b00      	cmp	r3, #0
 8001060:	d007      	beq.n	8001072 <HAL_CAN_SafeAddTxMessage+0x5a>
 8001062:	f001 fc75 	bl	8002950 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001070:	d3e9      	bcc.n	8001046 <HAL_CAN_SafeAddTxMessage+0x2e>

	return hal_stat;
 8001072:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8001076:	4618      	mov	r0, r3
 8001078:	3730      	adds	r7, #48	@ 0x30
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200001f4 	.word	0x200001f4

08001084 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001088:	4a0c      	ldr	r2, [pc, #48]	@ (80010bc <MX_FREERTOS_Init+0x38>)
 800108a:	2100      	movs	r1, #0
 800108c:	480c      	ldr	r0, [pc, #48]	@ (80010c0 <MX_FREERTOS_Init+0x3c>)
 800108e:	f006 fa59 	bl	8007544 <osThreadNew>
 8001092:	4603      	mov	r3, r0
 8001094:	4a0b      	ldr	r2, [pc, #44]	@ (80010c4 <MX_FREERTOS_Init+0x40>)
 8001096:	6013      	str	r3, [r2, #0]

  /* creation of CanRxTask */
  CanRxTaskHandle = osThreadNew(StartCanRxTask, NULL, &CanRxTask_attributes);
 8001098:	4a0b      	ldr	r2, [pc, #44]	@ (80010c8 <MX_FREERTOS_Init+0x44>)
 800109a:	2100      	movs	r1, #0
 800109c:	480b      	ldr	r0, [pc, #44]	@ (80010cc <MX_FREERTOS_Init+0x48>)
 800109e:	f006 fa51 	bl	8007544 <osThreadNew>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4a0a      	ldr	r2, [pc, #40]	@ (80010d0 <MX_FREERTOS_Init+0x4c>)
 80010a6:	6013      	str	r3, [r2, #0]

  /* creation of CanRtrTask */
  CanRtrTaskHandle = osThreadNew(StartCanRtrTask, NULL, &CanRtrTask_attributes);
 80010a8:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <MX_FREERTOS_Init+0x50>)
 80010aa:	2100      	movs	r1, #0
 80010ac:	480a      	ldr	r0, [pc, #40]	@ (80010d8 <MX_FREERTOS_Init+0x54>)
 80010ae:	f006 fa49 	bl	8007544 <osThreadNew>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4a09      	ldr	r2, [pc, #36]	@ (80010dc <MX_FREERTOS_Init+0x58>)
 80010b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	0800d338 	.word	0x0800d338
 80010c0:	080010e1 	.word	0x080010e1
 80010c4:	2000021c 	.word	0x2000021c
 80010c8:	0800d35c 	.word	0x0800d35c
 80010cc:	080011c5 	.word	0x080011c5
 80010d0:	20000220 	.word	0x20000220
 80010d4:	0800d380 	.word	0x0800d380
 80010d8:	08001239 	.word	0x08001239
 80010dc:	200006cc 	.word	0x200006cc

080010e0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b092      	sub	sp, #72	@ 0x48
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	//	rfm95_init();
	//	uint8_t version = 0, temp = 0;
	rf_handle_t rfm95 = { .rf_nreset_port = RF_NRST_GPIO_Port, .rf_nreset_pin =
 80010e8:	f107 0318 	add.w	r3, r7, #24
 80010ec:	222c      	movs	r2, #44	@ 0x2c
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f009 fdeb 	bl	800accc <memset>
 80010f6:	4b2c      	ldr	r3, [pc, #176]	@ (80011a8 <StartDefaultTask+0xc8>)
 80010f8:	61bb      	str	r3, [r7, #24]
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001104:	623b      	str	r3, [r7, #32]
 8001106:	2310      	movs	r3, #16
 8001108:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800110a:	4b28      	ldr	r3, [pc, #160]	@ (80011ac <StartDefaultTask+0xcc>)
 800110c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800110e:	2320      	movs	r3, #32
 8001110:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001112:	4b27      	ldr	r3, [pc, #156]	@ (80011b0 <StartDefaultTask+0xd0>)
 8001114:	637b      	str	r3, [r7, #52]	@ 0x34
 8001116:	4b27      	ldr	r3, [pc, #156]	@ (80011b4 <StartDefaultTask+0xd4>)
 8001118:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RF_NRST_Pin, .rf_nss_port = SPI1_NSS_GPIO_Port, .rf_nss_pin =
	SPI1_NSS_Pin, .rf_spi_handle = &hspi1, .rf_delay_func = osDelay,
			.rf_spi_timeout = HAL_MAX_DELAY, .rf_carrier_frequency = 868000000 };

	rf_initialize_radio(&rfm95);
 800111a:	f107 0318 	add.w	r3, r7, #24
 800111e:	4618      	mov	r0, r3
 8001120:	f000 fab4 	bl	800168c <rf_initialize_radio>
	rf_set_tx_power(&rfm95, 5);
 8001124:	f107 0318 	add.w	r3, r7, #24
 8001128:	2105      	movs	r1, #5
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fd4a 	bl	8001bc4 <rf_set_tx_power>
	rf_set_bandwidth(&rfm95, RF_BW_500K);
 8001130:	f107 0318 	add.w	r3, r7, #24
 8001134:	2109      	movs	r1, #9
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fea2 	bl	8001e80 <rf_set_bandwidth>
	rf_set_frequency(&rfm95, 868000000);
 800113c:	f107 0318 	add.w	r3, r7, #24
 8001140:	491c      	ldr	r1, [pc, #112]	@ (80011b4 <StartDefaultTask+0xd4>)
 8001142:	4618      	mov	r0, r3
 8001144:	f000 fcec 	bl	8001b20 <rf_set_frequency>
	uint8_t testdata = 347u;
 8001148:	235b      	movs	r3, #91	@ 0x5b
 800114a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	//	rf_set_op_mode(&rfm95, RF_OP_MODE_RX_SINGLE);

	//	rf_listen_implicit(&rfm95, 1);
	//	rf_listen(&rfm95);

	const char test[] = "Hello.78\0";
 800114e:	4a1a      	ldr	r2, [pc, #104]	@ (80011b8 <StartDefaultTask+0xd8>)
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	ca07      	ldmia	r2, {r0, r1, r2}
 8001156:	c303      	stmia	r3!, {r0, r1}
 8001158:	801a      	strh	r2, [r3, #0]

	uint8_t rec_legth = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	/* Infinite loop */
	for (;;) {
		//osDelay(100);
//		log_info("Sending message %s", test);

		HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001166:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800116a:	f002 fa45 	bl	80035f8 <HAL_GPIO_WritePin>
		//rf_initialize_radio(&rfm95);

//		rf_send(&rfm95, test_packet.packet_raw, 24);
		if (rf_send(&rfm95, test_packet_h2.packet_raw, sizeof(test_packet_h2))) {
 800116e:	f107 0318 	add.w	r3, r7, #24
 8001172:	2218      	movs	r2, #24
 8001174:	4911      	ldr	r1, [pc, #68]	@ (80011bc <StartDefaultTask+0xdc>)
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fb74 	bl	8001864 <rf_send>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <StartDefaultTask+0xa8>
			log_info("sending RF");
 8001182:	480f      	ldr	r0, [pc, #60]	@ (80011c0 <StartDefaultTask+0xe0>)
 8001184:	f009 fcc2 	bl	800ab0c <puts>
		}
		testdata += 1;
 8001188:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800118c:	3301      	adds	r3, #1
 800118e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001198:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119c:	f002 fa2c 	bl	80035f8 <HAL_GPIO_WritePin>
		osDelay(100);
 80011a0:	2064      	movs	r0, #100	@ 0x64
 80011a2:	f006 fa61 	bl	8007668 <osDelay>
		HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_SET);
 80011a6:	e7db      	b.n	8001160 <StartDefaultTask+0x80>
 80011a8:	20000b94 	.word	0x20000b94
 80011ac:	48000400 	.word	0x48000400
 80011b0:	08007669 	.word	0x08007669
 80011b4:	33bca100 	.word	0x33bca100
 80011b8:	0800cb18 	.word	0x0800cb18
 80011bc:	20000b78 	.word	0x20000b78
 80011c0:	0800cb0c 	.word	0x0800cb0c

080011c4 <StartCanRxTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanRxTask */
void StartCanRxTask(void *argument)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	6078      	str	r0, [r7, #4]
//			log_info("Sending CAN REQUEST");
//		} else {
//			log_info("CAN TIMED OUT");
//		}

		if (!HAL_CAN_SafeAddTxMessage(NULL, CAN_LUCY_H2_CONC, 0, &TxMailbox,
 80011cc:	2302      	movs	r3, #2
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <StartCanRxTask+0x6c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	f240 1111 	movw	r1, #273	@ 0x111
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff ff1d 	bl	8001018 <HAL_CAN_SafeAddTxMessage>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d002      	beq.n	80011ea <StartCanRxTask+0x26>
		CAN_RTR_REMOTE)) {
			//log_info("Sending CAN REQUEST");
		} else {
			log_info("CAN TIMED OUT");
 80011e4:	4813      	ldr	r0, [pc, #76]	@ (8001234 <StartCanRxTask+0x70>)
 80011e6:	f009 fc91 	bl	800ab0c <puts>
		}

		if (!HAL_CAN_SafeAddTxMessage(NULL, CAN_LUCY_H2_HUMIDITY, 0, &TxMailbox,
 80011ea:	2302      	movs	r3, #2
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	4b10      	ldr	r3, [pc, #64]	@ (8001230 <StartCanRxTask+0x6c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f240 2123 	movw	r1, #547	@ 0x223
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff ff0e 	bl	8001018 <HAL_CAN_SafeAddTxMessage>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <StartCanRxTask+0x44>
		CAN_RTR_REMOTE)) {
			//log_info("Sending CAN REQUEST");
		} else {
			log_info("CAN TIMED OUT");
 8001202:	480c      	ldr	r0, [pc, #48]	@ (8001234 <StartCanRxTask+0x70>)
 8001204:	f009 fc82 	bl	800ab0c <puts>
		}

		if (!HAL_CAN_SafeAddTxMessage(NULL, CAN_LUCY_H2_TEMP, 0, &TxMailbox,
 8001208:	2302      	movs	r3, #2
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <StartCanRxTask+0x6c>)
 800120e:	2200      	movs	r2, #0
 8001210:	f240 2111 	movw	r1, #529	@ 0x211
 8001214:	2000      	movs	r0, #0
 8001216:	f7ff feff 	bl	8001018 <HAL_CAN_SafeAddTxMessage>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <StartCanRxTask+0x62>
		CAN_RTR_REMOTE)) {
			//log_info("Sending CAN REQUEST");
		} else {
			log_info("CAN TIMED OUT");
 8001220:	4804      	ldr	r0, [pc, #16]	@ (8001234 <StartCanRxTask+0x70>)
 8001222:	f009 fc73 	bl	800ab0c <puts>
//			log_info("Sending CAN REQUEST");
//		} else {
//			log_info("CAN TIMED OUT");
//		}

		osDelay(500);
 8001226:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800122a:	f006 fa1d 	bl	8007668 <osDelay>
		if (!HAL_CAN_SafeAddTxMessage(NULL, CAN_LUCY_H2_CONC, 0, &TxMailbox,
 800122e:	e7cd      	b.n	80011cc <StartCanRxTask+0x8>
 8001230:	20000b90 	.word	0x20000b90
 8001234:	0800cb24 	.word	0x0800cb24

08001238 <StartCanRtrTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanRtrTask */
void StartCanRtrTask(void *argument)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	@ 0x30
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanRtrTask */
	CAN_Initialize();
 8001240:	f7ff feb6 	bl	8000fb0 <CAN_Initialize>
	/* Infinite loop */
	uint8_t RxData[8];
	HAL_StatusTypeDef hal_stat;
	CAN_RxHeaderTypeDef RxHeader = { 0 };
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
 8001254:	615a      	str	r2, [r3, #20]
 8001256:	619a      	str	r2, [r3, #24]
	for (;;) {
//		HAL_CAN_GetRxFifoFillLevel(&hcan1, RxFifo);
		hal_stat = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader,
 8001258:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800125c:	f107 0208 	add.w	r2, r7, #8
 8001260:	2100      	movs	r1, #0
 8001262:	481f      	ldr	r0, [pc, #124]	@ (80012e0 <StartCanRtrTask+0xa8>)
 8001264:	f001 fe59 	bl	8002f1a <HAL_CAN_GetRxMessage>
 8001268:	4603      	mov	r3, r0
 800126a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				RxData);
		if (!hal_stat) {
 800126e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001272:	2b00      	cmp	r3, #0
 8001274:	d12f      	bne.n	80012d6 <StartCanRtrTask+0x9e>
//
//				memcpy(test_packet.packet_mtr.can_raw_lucy_motor_vi, RxData, 8);
//				log_info("Copying 102");
//			}

			if (RxHeader.StdId == CAN_LUCY_H2_CONC && RxHeader.DLC != 0) {
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	f240 1211 	movw	r2, #273	@ 0x111
 800127c:	4293      	cmp	r3, r2
 800127e:	d10a      	bne.n	8001296 <StartCanRtrTask+0x5e>
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d007      	beq.n	8001296 <StartCanRtrTask+0x5e>

				memcpy(test_packet_h2.packet_h2.can_raw_lucy_h2_conc, RxData,
 8001286:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <StartCanRtrTask+0xac>)
 8001288:	461a      	mov	r2, r3
 800128a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800128e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001292:	e882 0003 	stmia.w	r2, {r0, r1}
						8);
				//log_info("Copying Conc");
			}

			if (RxHeader.StdId == CAN_LUCY_H2_HUMIDITY && RxHeader.DLC != 0) {
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	f240 2223 	movw	r2, #547	@ 0x223
 800129c:	4293      	cmp	r3, r2
 800129e:	d10a      	bne.n	80012b6 <StartCanRtrTask+0x7e>
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d007      	beq.n	80012b6 <StartCanRtrTask+0x7e>

				memcpy(test_packet_h2.packet_humd.can_raw_lucy_h2_humidity,
 80012a6:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <StartCanRtrTask+0xac>)
 80012a8:	3308      	adds	r3, #8
 80012aa:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80012ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012b2:	e883 0003 	stmia.w	r3, {r0, r1}
						RxData, 8);
				//log_info("Copying Humd");
			}

			if (RxHeader.StdId == CAN_LUCY_H2_TEMP && RxHeader.DLC != 0) {
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	f240 2211 	movw	r2, #529	@ 0x211
 80012bc:	4293      	cmp	r3, r2
 80012be:	d10a      	bne.n	80012d6 <StartCanRtrTask+0x9e>
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d007      	beq.n	80012d6 <StartCanRtrTask+0x9e>

				memcpy(test_packet_h2.packet_temp.can_raw_lucy_h2_temp,
 80012c6:	4b07      	ldr	r3, [pc, #28]	@ (80012e4 <StartCanRtrTask+0xac>)
 80012c8:	3310      	adds	r3, #16
 80012ca:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80012ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012d2:	e883 0003 	stmia.w	r3, {r0, r1}
//				memcpy(test_packet.packet_mtr.can_raw_lucy_motor_vi, RxData, 8);
//				log_info("Copying 102");
//			}

		}
		osDelay(100);
 80012d6:	2064      	movs	r0, #100	@ 0x64
 80012d8:	f006 f9c6 	bl	8007668 <osDelay>
		hal_stat = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader,
 80012dc:	e7bc      	b.n	8001258 <StartCanRtrTask+0x20>
 80012de:	bf00      	nop
 80012e0:	200001f4 	.word	0x200001f4
 80012e4:	20000b78 	.word	0x20000b78

080012e8 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001428 <MX_GPIO_Init+0x140>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001302:	4a49      	ldr	r2, [pc, #292]	@ (8001428 <MX_GPIO_Init+0x140>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130a:	4b47      	ldr	r3, [pc, #284]	@ (8001428 <MX_GPIO_Init+0x140>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	4b44      	ldr	r3, [pc, #272]	@ (8001428 <MX_GPIO_Init+0x140>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	4a43      	ldr	r2, [pc, #268]	@ (8001428 <MX_GPIO_Init+0x140>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001322:	4b41      	ldr	r3, [pc, #260]	@ (8001428 <MX_GPIO_Init+0x140>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	4b3e      	ldr	r3, [pc, #248]	@ (8001428 <MX_GPIO_Init+0x140>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	4a3d      	ldr	r2, [pc, #244]	@ (8001428 <MX_GPIO_Init+0x140>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133a:	4b3b      	ldr	r3, [pc, #236]	@ (8001428 <MX_GPIO_Init+0x140>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800134c:	4837      	ldr	r0, [pc, #220]	@ (800142c <MX_GPIO_Init+0x144>)
 800134e:	f002 f953 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|LED_D1_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800135c:	f002 f94c 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_NRST_GPIO_Port, RF_NRST_Pin, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	2120      	movs	r1, #32
 8001364:	4832      	ldr	r0, [pc, #200]	@ (8001430 <MX_GPIO_Init+0x148>)
 8001366:	f002 f947 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_STBY_Pin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 800136a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800136e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	4619      	mov	r1, r3
 8001382:	482a      	ldr	r0, [pc, #168]	@ (800142c <MX_GPIO_Init+0x144>)
 8001384:	f001 ffce 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_NSS_Pin LED_D1_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin|LED_D1_Pin;
 8001388:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 800138c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	4619      	mov	r1, r3
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a4:	f001 ffbe 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin DIO1_Pin DIO2_Pin DIO3_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin|DIO2_Pin|DIO3_Pin;
 80013a8:	23c3      	movs	r3, #195	@ 0xc3
 80013aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	4619      	mov	r1, r3
 80013bc:	481c      	ldr	r0, [pc, #112]	@ (8001430 <MX_GPIO_Init+0x148>)
 80013be:	f001 ffb1 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	4619      	mov	r1, r3
 80013de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013e2:	f001 ff9f 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO4_Pin */
  GPIO_InitStruct.Pin = DIO4_Pin;
 80013e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO4_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	4619      	mov	r1, r3
 80013fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001400:	f001 ff90 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_NRST_Pin */
  GPIO_InitStruct.Pin = RF_NRST_Pin;
 8001404:	2320      	movs	r3, #32
 8001406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	2301      	movs	r3, #1
 800140a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_NRST_GPIO_Port, &GPIO_InitStruct);
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	4619      	mov	r1, r3
 800141a:	4805      	ldr	r0, [pc, #20]	@ (8001430 <MX_GPIO_Init+0x148>)
 800141c:	f001 ff82 	bl	8003324 <HAL_GPIO_Init>

}
 8001420:	bf00      	nop
 8001422:	3720      	adds	r7, #32
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40021000 	.word	0x40021000
 800142c:	48000800 	.word	0x48000800
 8001430:	48000400 	.word	0x48000400

08001434 <_write>:
int _write(int file, char *ptr, int len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	b29a      	uxth	r2, r3
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	4804      	ldr	r0, [pc, #16]	@ (800145c <_write+0x28>)
 800144c:	f005 fb1a 	bl	8006a84 <HAL_UART_Transmit>
	return len;
 8001450:	687b      	ldr	r3, [r7, #4]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000ce0 	.word	0x20000ce0

08001460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001464:	f001 fa47 	bl	80028f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001468:	f000 f814 	bl	8001494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800146c:	f7ff ff3c 	bl	80012e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001470:	f001 f990 	bl	8002794 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001474:	f7ff fd10 	bl	8000e98 <MX_CAN1_Init>
  MX_TIM1_Init();
 8001478:	f000 ffd8 	bl	800242c <MX_TIM1_Init>
  MX_TIM2_Init();
 800147c:	f001 f882 	bl	8002584 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001480:	f000 fdce 	bl	8002020 <MX_SPI1_Init>
//  CAN_Initialize();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001484:	f006 f814 	bl	80074b0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001488:	f7ff fdfc 	bl	8001084 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800148c:	f006 f834 	bl	80074f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <main+0x30>

08001494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b096      	sub	sp, #88	@ 0x58
 8001498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	2244      	movs	r2, #68	@ 0x44
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f009 fc12 	bl	800accc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a8:	463b      	mov	r3, r7
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014ba:	f002 f8c3 	bl	8003644 <HAL_PWREx_ControlVoltageScaling>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014c4:	f000 f850 	bl	8001568 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014c8:	2301      	movs	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014cc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80014d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d2:	2302      	movs	r3, #2
 80014d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014d6:	2303      	movs	r3, #3
 80014d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014da:	2301      	movs	r3, #1
 80014dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80014de:	2314      	movs	r3, #20
 80014e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014e2:	2307      	movs	r3, #7
 80014e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014e6:	2302      	movs	r3, #2
 80014e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014ea:	2302      	movs	r3, #2
 80014ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 f8fc 	bl	80036f0 <HAL_RCC_OscConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014fe:	f000 f833 	bl	8001568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001502:	230f      	movs	r3, #15
 8001504:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001506:	2303      	movs	r3, #3
 8001508:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001516:	463b      	mov	r3, r7
 8001518:	2104      	movs	r1, #4
 800151a:	4618      	mov	r0, r3
 800151c:	f002 fcfc 	bl	8003f18 <HAL_RCC_ClockConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001526:	f000 f81f 	bl	8001568 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_16);
 800152a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800152e:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001532:	2000      	movs	r0, #0
 8001534:	f002 fdf0 	bl	8004118 <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001538:	f002 ff18 	bl	800436c <HAL_RCC_EnableCSS>
}
 800153c:	bf00      	nop
 800153e:	3758      	adds	r7, #88	@ 0x58
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a04      	ldr	r2, [pc, #16]	@ (8001564 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001556:	f001 f9e7 	bl	8002928 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40014400 	.word	0x40014400

08001568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156e:	b672      	cpsid	i
}
 8001570:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	e002      	b.n	800157e <Error_Handler+0x16>
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3301      	adds	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	4a1a      	ldr	r2, [pc, #104]	@ (80015ec <Error_Handler+0x84>)
 8001582:	4293      	cmp	r3, r2
 8001584:	ddf8      	ble.n	8001578 <Error_Handler+0x10>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D1_PWM_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	e002      	b.n	8001592 <Error_Handler+0x2a>
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	3301      	adds	r3, #1
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4a15      	ldr	r2, [pc, #84]	@ (80015ec <Error_Handler+0x84>)
 8001596:	4293      	cmp	r3, r2
 8001598:	ddf8      	ble.n	800158c <Error_Handler+0x24>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D2_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	e002      	b.n	80015a6 <Error_Handler+0x3e>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3301      	adds	r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4a10      	ldr	r2, [pc, #64]	@ (80015ec <Error_Handler+0x84>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	ddf8      	ble.n	80015a0 <Error_Handler+0x38>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D3_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	e002      	b.n	80015ba <Error_Handler+0x52>
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	3301      	adds	r3, #1
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	4a0b      	ldr	r2, [pc, #44]	@ (80015ec <Error_Handler+0x84>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	ddf8      	ble.n	80015b4 <Error_Handler+0x4c>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D1_Pin, GPIO_PIN_RESET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	e002      	b.n	80015ce <Error_Handler+0x66>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3301      	adds	r3, #1
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a06      	ldr	r2, [pc, #24]	@ (80015ec <Error_Handler+0x84>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	ddf8      	ble.n	80015c8 <Error_Handler+0x60>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D2_Pin, GPIO_PIN_RESET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	e002      	b.n	80015e2 <Error_Handler+0x7a>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	4a01      	ldr	r2, [pc, #4]	@ (80015ec <Error_Handler+0x84>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	ddf8      	ble.n	80015dc <Error_Handler+0x74>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80015ea:	e7c2      	b.n	8001572 <Error_Handler+0xa>
 80015ec:	000c34ff 	.word	0x000c34ff

080015f0 <rf_set_op_mode>:

#define LOG_WARN(M, ...) printf("[Abi's RFlib]" SETFG_YELLOW "[WARN] " M GR_RESET "\r\n", ##__VA_ARGS__)

#define LOG_INFO(M, ...) printf("[Abi's RFlib][INFO] " M "\r\n", ##__VA_ARGS__)

int rf_set_op_mode(rf_handle_t *rf_handle, rf_op_mode_t rf_op_mode) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	70fb      	strb	r3, [r7, #3]

	rf_register_op_mode_config_t opmode = { 0 };
 80015fc:	2300      	movs	r3, #0
 80015fe:	733b      	strb	r3, [r7, #12]

	if (!rf_spi_read_register(rf_handle, RegOpMode, &opmode.op_mode)) {
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	461a      	mov	r2, r3
 8001606:	2101      	movs	r1, #1
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 fb5b 	bl	8001cc4 <rf_spi_read_register>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d106      	bne.n	8001622 <rf_set_op_mode+0x32>
		LOG_ERROR("SPI ERROR Setting op mode");
 8001614:	2216      	movs	r2, #22
 8001616:	491b      	ldr	r1, [pc, #108]	@ (8001684 <rf_set_op_mode+0x94>)
 8001618:	481b      	ldr	r0, [pc, #108]	@ (8001688 <rf_set_op_mode+0x98>)
 800161a:	f009 fa0f 	bl	800aa3c <iprintf>
		return 0;
 800161e:	2300      	movs	r3, #0
 8001620:	e02b      	b.n	800167a <rf_set_op_mode+0x8a>

//	opmode.access_shared_reg = 0;

//	opmode.long_range_mode = 1; // just assume we are long range mode only.

	opmode.mode = rf_op_mode;
 8001622:	78fb      	ldrb	r3, [r7, #3]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	b2da      	uxtb	r2, r3
 800162a:	7b3b      	ldrb	r3, [r7, #12]
 800162c:	f362 0302 	bfi	r3, r2, #0, #3
 8001630:	733b      	strb	r3, [r7, #12]

	if (!rf_spi_write_register(rf_handle, RegOpMode, opmode.op_mode)) {
 8001632:	7b3b      	ldrb	r3, [r7, #12]
 8001634:	461a      	mov	r2, r3
 8001636:	2101      	movs	r1, #1
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 fb91 	bl	8001d60 <rf_spi_write_register>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d106      	bne.n	8001652 <rf_set_op_mode+0x62>
		LOG_ERROR("SPI ERROR Setting op mode");
 8001644:	2223      	movs	r2, #35	@ 0x23
 8001646:	490f      	ldr	r1, [pc, #60]	@ (8001684 <rf_set_op_mode+0x94>)
 8001648:	480f      	ldr	r0, [pc, #60]	@ (8001688 <rf_set_op_mode+0x98>)
 800164a:	f009 f9f7 	bl	800aa3c <iprintf>
		return 0;
 800164e:	2300      	movs	r3, #0
 8001650:	e013      	b.n	800167a <rf_set_op_mode+0x8a>
	}

	opmode.op_mode = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	733b      	strb	r3, [r7, #12]

	if (!rf_spi_read_register(rf_handle, RegOpMode, &opmode.op_mode)) {
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	461a      	mov	r2, r3
 800165c:	2101      	movs	r1, #1
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 fb30 	bl	8001cc4 <rf_spi_read_register>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d106      	bne.n	8001678 <rf_set_op_mode+0x88>
		LOG_ERROR("SPI ERROR Setting op mode");
 800166a:	222a      	movs	r2, #42	@ 0x2a
 800166c:	4905      	ldr	r1, [pc, #20]	@ (8001684 <rf_set_op_mode+0x94>)
 800166e:	4806      	ldr	r0, [pc, #24]	@ (8001688 <rf_set_op_mode+0x98>)
 8001670:	f009 f9e4 	bl	800aa3c <iprintf>
		return 0;
 8001674:	2300      	movs	r3, #0
 8001676:	e000      	b.n	800167a <rf_set_op_mode+0x8a>
	}

	return 1;
 8001678:	2301      	movs	r3, #1

}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	0800cb34 	.word	0x0800cb34
 8001688:	0800cb4c 	.word	0x0800cb4c

0800168c <rf_initialize_radio>:

int rf_initialize_radio(rf_handle_t *rf_handle) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	if (rf_handle == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <rf_initialize_radio+0x12>
		return 0;
 800169a:	2300      	movs	r3, #0
 800169c:	e0cd      	b.n	800183a <rf_initialize_radio+0x1ae>

	if (rf_handle->rf_spi_timeout == NULL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <rf_initialize_radio+0x20>
		rf_handle->rf_spi_timeout = 100;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2264      	movs	r2, #100	@ 0x64
 80016aa:	605a      	str	r2, [r3, #4]

	if (rf_handle->rf_module_identifier == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d103      	bne.n	80016be <rf_initialize_radio+0x32>
		rf_handle->rf_module_identifier = -1;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	22ff      	movs	r2, #255	@ 0xff
 80016ba:	f883 2020 	strb.w	r2, [r3, #32]

	if (rf_handle->rf_carrier_frequency == NULL) {
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d106      	bne.n	80016d4 <rf_initialize_radio+0x48>
		LOG_ERROR("Carrier Frequency not defined.");
 80016c6:	223d      	movs	r2, #61	@ 0x3d
 80016c8:	495e      	ldr	r1, [pc, #376]	@ (8001844 <rf_initialize_radio+0x1b8>)
 80016ca:	485f      	ldr	r0, [pc, #380]	@ (8001848 <rf_initialize_radio+0x1bc>)
 80016cc:	f009 f9b6 	bl	800aa3c <iprintf>
		return 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	e0b2      	b.n	800183a <rf_initialize_radio+0x1ae>
	}

	printf("\r\n");
 80016d4:	485d      	ldr	r0, [pc, #372]	@ (800184c <rf_initialize_radio+0x1c0>)
 80016d6:	f009 fa19 	bl	800ab0c <puts>

	LOG_INFO(SETFG_GREEN "Initializing module" GR_RESET,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e0:	4619      	mov	r1, r3
 80016e2:	485b      	ldr	r0, [pc, #364]	@ (8001850 <rf_initialize_radio+0x1c4>)
 80016e4:	f009 f9aa 	bl	800aa3c <iprintf>
			rf_handle->rf_module_identifier);

	rf_reset(rf_handle);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 fb79 	bl	8001de0 <rf_reset>

// check version
	uint8_t version;
	if (!rf_spi_read_register(rf_handle, RegVersion, &version)) {
 80016ee:	f107 0317 	add.w	r3, r7, #23
 80016f2:	461a      	mov	r2, r3
 80016f4:	2142      	movs	r1, #66	@ 0x42
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 fae4 	bl	8001cc4 <rf_spi_read_register>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d106      	bne.n	8001710 <rf_initialize_radio+0x84>
		LOG_ERROR("Module did not return a version; SPI Error");
 8001702:	224b      	movs	r2, #75	@ 0x4b
 8001704:	494f      	ldr	r1, [pc, #316]	@ (8001844 <rf_initialize_radio+0x1b8>)
 8001706:	4853      	ldr	r0, [pc, #332]	@ (8001854 <rf_initialize_radio+0x1c8>)
 8001708:	f009 f998 	bl	800aa3c <iprintf>
		return 0;
 800170c:	2300      	movs	r3, #0
 800170e:	e094      	b.n	800183a <rf_initialize_radio+0x1ae>
	}

	if (RFM9x_VER != version) {
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	2b12      	cmp	r3, #18
 8001714:	d006      	beq.n	8001724 <rf_initialize_radio+0x98>
		LOG_ERROR("Module did not return the correct version");
 8001716:	2250      	movs	r2, #80	@ 0x50
 8001718:	494a      	ldr	r1, [pc, #296]	@ (8001844 <rf_initialize_radio+0x1b8>)
 800171a:	484f      	ldr	r0, [pc, #316]	@ (8001858 <rf_initialize_radio+0x1cc>)
 800171c:	f009 f98e 	bl	800aa3c <iprintf>
		return 0;
 8001720:	2300      	movs	r3, #0
 8001722:	e08a      	b.n	800183a <rf_initialize_radio+0x1ae>
	}

	LOG_INFO("Module Available; \x1b[34;1;4mVersion: 0x%x\x1b[0m", version);
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	4619      	mov	r1, r3
 8001728:	484c      	ldr	r0, [pc, #304]	@ (800185c <rf_initialize_radio+0x1d0>)
 800172a:	f009 f987 	bl	800aa3c <iprintf>

// Module must be placed in sleep mode before switching to lora.
	rf_register_op_mode_config_t opmode = { 0 };
 800172e:	2300      	movs	r3, #0
 8001730:	753b      	strb	r3, [r7, #20]
	opmode.long_range_mode = 1;
 8001732:	7d3b      	ldrb	r3, [r7, #20]
 8001734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001738:	753b      	strb	r3, [r7, #20]
	opmode.mode = RF_OP_MODE_SLEEP;
 800173a:	7d3b      	ldrb	r3, [r7, #20]
 800173c:	f36f 0302 	bfc	r3, #0, #3
 8001740:	753b      	strb	r3, [r7, #20]
	if (!rf_spi_write_register(rf_handle, RegOpMode, opmode.op_mode))
 8001742:	7d3b      	ldrb	r3, [r7, #20]
 8001744:	461a      	mov	r2, r3
 8001746:	2101      	movs	r1, #1
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 fb09 	bl	8001d60 <rf_spi_write_register>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <rf_initialize_radio+0xcc>
		return 0;
 8001754:	2300      	movs	r3, #0
 8001756:	e070      	b.n	800183a <rf_initialize_radio+0x1ae>
//	rf_register_dio_mapping_2_config_t diomapping2 = { 0 };
//	if (!rf_spi_write_register(rf_handle, RegDioMapping2,
//			diomapping2.dio_mapping_2))
//		return 0;

	if (rf_handle->rf_post_init_clbk != NULL) {
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <rf_initialize_radio+0xda>
		rf_handle->rf_post_init_clbk();
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4798      	blx	r3
	}

// Set up TX and RX FIFO base addresses.
	if (!rf_spi_write_register(rf_handle, RegFifoTxBaseAddr, 0x00)) // previously 0x80
 8001766:	2200      	movs	r2, #0
 8001768:	210e      	movs	r1, #14
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 faf8 	bl	8001d60 <rf_spi_write_register>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <rf_initialize_radio+0xee>
		return 0;
 8001776:	2300      	movs	r3, #0
 8001778:	e05f      	b.n	800183a <rf_initialize_radio+0x1ae>
	if (!rf_spi_write_register(rf_handle, RegFifoRxBaseAddr, 0x00))
 800177a:	2200      	movs	r2, #0
 800177c:	210f      	movs	r1, #15
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 faee 	bl	8001d60 <rf_spi_write_register>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <rf_initialize_radio+0x102>
		return 0;
 800178a:	2300      	movs	r3, #0
 800178c:	e055      	b.n	800183a <rf_initialize_radio+0x1ae>

// Maximum payload length of the RFM95 is 64.
	if (!rf_spi_write_register(rf_handle, RegMaxPayloadLength, 64))
 800178e:	2240      	movs	r2, #64	@ 0x40
 8001790:	2123      	movs	r1, #35	@ 0x23
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 fae4 	bl	8001d60 <rf_spi_write_register>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <rf_initialize_radio+0x116>
		return 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	e04b      	b.n	800183a <rf_initialize_radio+0x1ae>

// make sure this is defined
	rf_set_frequency(rf_handle, rf_handle->rf_carrier_frequency);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a6:	4619      	mov	r1, r3
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f9b9 	bl	8001b20 <rf_set_frequency>

// Set LNA to the highest gain with 150% boost.
	rf_register_lna_config_t lnaboost = { 0 };
 80017ae:	2300      	movs	r3, #0
 80017b0:	743b      	strb	r3, [r7, #16]
	if (!rf_spi_read_register(rf_handle, RegLna, &lnaboost.lna_config))
 80017b2:	f107 0310 	add.w	r3, r7, #16
 80017b6:	461a      	mov	r2, r3
 80017b8:	210c      	movs	r1, #12
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 fa82 	bl	8001cc4 <rf_spi_read_register>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <rf_initialize_radio+0x13e>
		return 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e037      	b.n	800183a <rf_initialize_radio+0x1ae>
	lnaboost.LnaBoostHf = 0b11;
 80017ca:	7c3b      	ldrb	r3, [r7, #16]
 80017cc:	f043 0303 	orr.w	r3, r3, #3
 80017d0:	743b      	strb	r3, [r7, #16]
	if (!rf_spi_write_register(rf_handle, RegLna, lnaboost.lna_config))
 80017d2:	7c3b      	ldrb	r3, [r7, #16]
 80017d4:	461a      	mov	r2, r3
 80017d6:	210c      	movs	r1, #12
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 fac1 	bl	8001d60 <rf_spi_write_register>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <rf_initialize_radio+0x15c>
		return 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	e028      	b.n	800183a <rf_initialize_radio+0x1ae>

// Set auto AGC
	rf_register_modem_config_3_t autoagc = { 0 };
 80017e8:	2300      	movs	r3, #0
 80017ea:	733b      	strb	r3, [r7, #12]
	autoagc.agc_auto_on = 1;
 80017ec:	7b3b      	ldrb	r3, [r7, #12]
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	733b      	strb	r3, [r7, #12]
	if (!rf_spi_write_register(rf_handle, RegModemConfig3,
 80017f4:	7b3b      	ldrb	r3, [r7, #12]
 80017f6:	461a      	mov	r2, r3
 80017f8:	2126      	movs	r1, #38	@ 0x26
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 fab0 	bl	8001d60 <rf_spi_write_register>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <rf_initialize_radio+0x17e>
			autoagc.modem_config_3))
		return 0;
 8001806:	2300      	movs	r3, #0
 8001808:	e017      	b.n	800183a <rf_initialize_radio+0x1ae>

// Set module power to 17dbm.
	if (!rf_set_tx_power(rf_handle, 10))
 800180a:	210a      	movs	r1, #10
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 f9d9 	bl	8001bc4 <rf_set_tx_power>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <rf_initialize_radio+0x190>
		return 0;
 8001818:	2300      	movs	r3, #0
 800181a:	e00e      	b.n	800183a <rf_initialize_radio+0x1ae>
//	idle.long_range_mode = 1;
//	idle.mode = RF_OP_MODE_STDBY;
//	if (!rf_spi_write_register(rf_handle, RegOpMode, idle.op_mode))
//		return 0;

	if (!rf_set_op_mode(rf_handle, RF_OP_MODE_STDBY)) {
 800181c:	2101      	movs	r1, #1
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fee6 	bl	80015f0 <rf_set_op_mode>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d106      	bne.n	8001838 <rf_initialize_radio+0x1ac>
		LOG_ERROR("OP Mode Init error");
 800182a:	2295      	movs	r2, #149	@ 0x95
 800182c:	4905      	ldr	r1, [pc, #20]	@ (8001844 <rf_initialize_radio+0x1b8>)
 800182e:	480c      	ldr	r0, [pc, #48]	@ (8001860 <rf_initialize_radio+0x1d4>)
 8001830:	f009 f904 	bl	800aa3c <iprintf>
		return 0;
 8001834:	2300      	movs	r3, #0
 8001836:	e000      	b.n	800183a <rf_initialize_radio+0x1ae>
	}

	return 1;
 8001838:	2301      	movs	r3, #1
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	0800cb34 	.word	0x0800cb34
 8001848:	0800cb90 	.word	0x0800cb90
 800184c:	0800cbd8 	.word	0x0800cbd8
 8001850:	0800cbdc 	.word	0x0800cbdc
 8001854:	0800cc10 	.word	0x0800cc10
 8001858:	0800cc64 	.word	0x0800cc64
 800185c:	0800ccb8 	.word	0x0800ccb8
 8001860:	0800ccfc 	.word	0x0800ccfc

08001864 <rf_send>:

int rf_send(rf_handle_t *rf_handle, uint8_t *buffer, uint8_t length_bytes) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b08e      	sub	sp, #56	@ 0x38
 8001868:	af02      	add	r7, sp, #8
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	4613      	mov	r3, r2
 8001870:	71fb      	strb	r3, [r7, #7]

	rf_register_op_mode_config_t current_op_mode = { 0 };
 8001872:	2300      	movs	r3, #0
 8001874:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	if (!rf_spi_read_register(rf_handle, RegOpMode, &current_op_mode.op_mode))
 8001878:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800187c:	461a      	mov	r2, r3
 800187e:	2101      	movs	r1, #1
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 fa1f 	bl	8001cc4 <rf_spi_read_register>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <rf_send+0x2c>
		return 0;
 800188c:	2300      	movs	r3, #0
 800188e:	e138      	b.n	8001b02 <rf_send+0x29e>

// check if in transmit mode.
	if (current_op_mode.mode == RF_OP_MODE_TX) {
 8001890:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b03      	cmp	r3, #3
 800189c:	d104      	bne.n	80018a8 <rf_send+0x44>
		LOG_WARN("Module in TX unable to send.");
 800189e:	489b      	ldr	r0, [pc, #620]	@ (8001b0c <rf_send+0x2a8>)
 80018a0:	f009 f934 	bl	800ab0c <puts>
		return 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	e12c      	b.n	8001b02 <rf_send+0x29e>
	}
// here, since the module is not transmitting lets clear the inturrpt flags for tx done.
	rf_register_irq_flags_t irq_flags = { 0 };
 80018a8:	2300      	movs	r3, #0
 80018aa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	if (!rf_spi_read_register(rf_handle, RegIrqFlags, &irq_flags.irq_flags))
 80018ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b2:	461a      	mov	r2, r3
 80018b4:	2112      	movs	r1, #18
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 fa04 	bl	8001cc4 <rf_spi_read_register>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <rf_send+0x62>
		return 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e11d      	b.n	8001b02 <rf_send+0x29e>
// if the flag is still set
	if (irq_flags.tx_done) {
 80018c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d014      	beq.n	80018fe <rf_send+0x9a>
		// then clear it.
		irq_flags.irq_flags = 0b0; // first set all else to 0
 80018d4:	2300      	movs	r3, #0
 80018d6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		irq_flags.tx_done = 1;
 80018da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018de:	f043 0308 	orr.w	r3, r3, #8
 80018e2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		if (!rf_spi_write_register(rf_handle, RegIrqFlags, irq_flags.irq_flags))
 80018e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018ea:	461a      	mov	r2, r3
 80018ec:	2112      	movs	r1, #18
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 fa36 	bl	8001d60 <rf_spi_write_register>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <rf_send+0x9a>
			return 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e101      	b.n	8001b02 <rf_send+0x29e>
	}

// put in idle lora
	rf_register_op_mode_config_t idle_op_mode = { 0 };
 80018fe:	2300      	movs	r3, #0
 8001900:	f887 3020 	strb.w	r3, [r7, #32]
	idle_op_mode.long_range_mode = 1;
 8001904:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800190c:	f887 3020 	strb.w	r3, [r7, #32]
	idle_op_mode.mode = RF_OP_MODE_STDBY;
 8001910:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001914:	2201      	movs	r2, #1
 8001916:	f362 0302 	bfi	r3, r2, #0, #3
 800191a:	f887 3020 	strb.w	r3, [r7, #32]
	if (!rf_spi_write_register(rf_handle, RegOpMode, idle_op_mode.op_mode))
 800191e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001922:	461a      	mov	r2, r3
 8001924:	2101      	movs	r1, #1
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 fa1a 	bl	8001d60 <rf_spi_write_register>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <rf_send+0xd2>
		return 0;
 8001932:	2300      	movs	r3, #0
 8001934:	e0e5      	b.n	8001b02 <rf_send+0x29e>

// TODO: add a global that configures the implicit or explicit header mode.

	rf_register_modem_config_1_t modem_config_1 = { 0 };
 8001936:	2300      	movs	r3, #0
 8001938:	773b      	strb	r3, [r7, #28]
	if (!rf_spi_read_register(rf_handle, RegModemConfig1,
 800193a:	f107 031c 	add.w	r3, r7, #28
 800193e:	461a      	mov	r2, r3
 8001940:	211d      	movs	r1, #29
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f9be 	bl	8001cc4 <rf_spi_read_register>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <rf_send+0xee>
			&modem_config_1.modem_config_1))
		return 0;
 800194e:	2300      	movs	r3, #0
 8001950:	e0d7      	b.n	8001b02 <rf_send+0x29e>

// Default to explicit header.
	modem_config_1.implicit_header_mode_on = 0;
 8001952:	7f3b      	ldrb	r3, [r7, #28]
 8001954:	f36f 0300 	bfc	r3, #0, #1
 8001958:	773b      	strb	r3, [r7, #28]
	if (!rf_spi_write_register(rf_handle, RegModemConfig1,
 800195a:	7f3b      	ldrb	r3, [r7, #28]
 800195c:	461a      	mov	r2, r3
 800195e:	211d      	movs	r1, #29
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f000 f9fd 	bl	8001d60 <rf_spi_write_register>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <rf_send+0x10c>
			modem_config_1.modem_config_1))
		return 0;
 800196c:	2300      	movs	r3, #0
 800196e:	e0c8      	b.n	8001b02 <rf_send+0x29e>

// Reset fifo address and payload length

	if (!rf_spi_write_register(rf_handle, RegFifoAddrPtr, 0))
 8001970:	2200      	movs	r2, #0
 8001972:	210d      	movs	r1, #13
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 f9f3 	bl	8001d60 <rf_spi_write_register>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <rf_send+0x120>
		return 0;
 8001980:	2300      	movs	r3, #0
 8001982:	e0be      	b.n	8001b02 <rf_send+0x29e>

	if (!rf_spi_write_register(rf_handle, RegPayloadLength, 0)) // set to 0 for now.
 8001984:	2200      	movs	r2, #0
 8001986:	2122      	movs	r1, #34	@ 0x22
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f000 f9e9 	bl	8001d60 <rf_spi_write_register>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <rf_send+0x134>
		return 0;
 8001994:	2300      	movs	r3, #0
 8001996:	e0b4      	b.n	8001b02 <rf_send+0x29e>

// add data

// check size TODO: optimize this since it is constant.
	uint8_t max_payload_length = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	76fb      	strb	r3, [r7, #27]
	if (!rf_spi_read_register(rf_handle, RegMaxPayloadLength,
 800199c:	f107 031b 	add.w	r3, r7, #27
 80019a0:	461a      	mov	r2, r3
 80019a2:	2123      	movs	r1, #35	@ 0x23
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 f98d 	bl	8001cc4 <rf_spi_read_register>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <rf_send+0x150>
			&max_payload_length))
		return 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	e0a6      	b.n	8001b02 <rf_send+0x29e>

	if (max_payload_length < length_bytes) {
 80019b4:	7efb      	ldrb	r3, [r7, #27]
 80019b6:	79fa      	ldrb	r2, [r7, #7]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d909      	bls.n	80019d0 <rf_send+0x16c>
		printf(
				"\x1b[31;4;3;1m[Abi's RFlib] [%d] [ERROR] Max payload length exceeded with %d; max is %d.\x1b[0m\r\n",
				rf_handle->rf_module_identifier, max_payload_length,
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f893 3020 	ldrb.w	r3, [r3, #32]
		printf(
 80019c2:	4619      	mov	r1, r3
 80019c4:	7efb      	ldrb	r3, [r7, #27]
 80019c6:	461a      	mov	r2, r3
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	4851      	ldr	r0, [pc, #324]	@ (8001b10 <rf_send+0x2ac>)
 80019cc:	f009 f836 	bl	800aa3c <iprintf>
				length_bytes);
	}

	uint8_t current_payload_length = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	76bb      	strb	r3, [r7, #26]
	if (!rf_spi_read_register(rf_handle, RegPayloadLength,
 80019d4:	f107 031a 	add.w	r3, r7, #26
 80019d8:	461a      	mov	r2, r3
 80019da:	2122      	movs	r1, #34	@ 0x22
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f000 f971 	bl	8001cc4 <rf_spi_read_register>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <rf_send+0x188>
			&current_payload_length))
		return 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e08a      	b.n	8001b02 <rf_send+0x29e>

// never should happen cuz we reset the payload length above
	if (current_payload_length + length_bytes > max_payload_length) {
 80019ec:	7ebb      	ldrb	r3, [r7, #26]
 80019ee:	461a      	mov	r2, r3
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	4413      	add	r3, r2
 80019f4:	7efa      	ldrb	r2, [r7, #27]
 80019f6:	4293      	cmp	r3, r2
 80019f8:	dd0d      	ble.n	8001a16 <rf_send+0x1b2>
		printf(
				"\x1b[31;4;3;1m[Abi's RFlib] [%d] [ERROR] Old buffer not clear and adding current bytes exceeds max payload %d, prev %d, new %d.\x1b[0m\r\n",
				rf_handle->rf_module_identifier, max_payload_length,
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f893 3020 	ldrb.w	r3, [r3, #32]
		printf(
 8001a00:	4619      	mov	r1, r3
 8001a02:	7efb      	ldrb	r3, [r7, #27]
 8001a04:	461a      	mov	r2, r3
 8001a06:	7ebb      	ldrb	r3, [r7, #26]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4840      	ldr	r0, [pc, #256]	@ (8001b14 <rf_send+0x2b0>)
 8001a12:	f009 f813 	bl	800aa3c <iprintf>
				current_payload_length, length_bytes);
	}

// fill fifo
// write data to module
	for (int i = 0; i < length_bytes; i++) {
 8001a16:	2300      	movs	r3, #0
 8001a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a1a:	e015      	b.n	8001a48 <rf_send+0x1e4>
		if (!rf_spi_write_register(rf_handle, RegFifo, buffer[i])) {
 8001a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	4413      	add	r3, r2
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	2100      	movs	r1, #0
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f000 f999 	bl	8001d60 <rf_spi_write_register>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d106      	bne.n	8001a42 <rf_send+0x1de>
			LOG_ERROR("FIFO Write ERROR");
 8001a34:	22f0      	movs	r2, #240	@ 0xf0
 8001a36:	4938      	ldr	r1, [pc, #224]	@ (8001b18 <rf_send+0x2b4>)
 8001a38:	4838      	ldr	r0, [pc, #224]	@ (8001b1c <rf_send+0x2b8>)
 8001a3a:	f008 ffff 	bl	800aa3c <iprintf>
			return 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e05f      	b.n	8001b02 <rf_send+0x29e>
	for (int i = 0; i < length_bytes; i++) {
 8001a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a44:	3301      	adds	r3, #1
 8001a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	dbe5      	blt.n	8001a1c <rf_send+0x1b8>
		}
	}

// update the payload length
	if (!rf_spi_write_register(rf_handle, RegPayloadLength, length_bytes))
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	461a      	mov	r2, r3
 8001a54:	2122      	movs	r1, #34	@ 0x22
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 f982 	bl	8001d60 <rf_spi_write_register>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <rf_send+0x202>
		return 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e04d      	b.n	8001b02 <rf_send+0x29e>

// end packet and send
	rf_register_dio_mapping_1_config_t dio_mapping_1 = { 0 };
 8001a66:	2300      	movs	r3, #0
 8001a68:	763b      	strb	r3, [r7, #24]

// TODO: use dio0 inturrupt

// put in tx mode
	rf_register_op_mode_config_t tx_mode_config = { 0 };
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	753b      	strb	r3, [r7, #20]
	tx_mode_config.long_range_mode = 1;
 8001a6e:	7d3b      	ldrb	r3, [r7, #20]
 8001a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a74:	753b      	strb	r3, [r7, #20]
	tx_mode_config.mode = RF_OP_MODE_TX;
 8001a76:	7d3b      	ldrb	r3, [r7, #20]
 8001a78:	2203      	movs	r2, #3
 8001a7a:	f362 0302 	bfi	r3, r2, #0, #3
 8001a7e:	753b      	strb	r3, [r7, #20]

	if (!rf_spi_write_register(rf_handle, RegOpMode, tx_mode_config.op_mode))
 8001a80:	7d3b      	ldrb	r3, [r7, #20]
 8001a82:	461a      	mov	r2, r3
 8001a84:	2101      	movs	r1, #1
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 f96a 	bl	8001d60 <rf_spi_write_register>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <rf_send+0x232>
		return 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e035      	b.n	8001b02 <rf_send+0x29e>

// Blocking

	rf_register_irq_flags_t tx_done_flags = { 0 };
 8001a96:	2300      	movs	r3, #0
 8001a98:	743b      	strb	r3, [r7, #16]
	if (!rf_spi_read_register(rf_handle, RegIrqFlags, &tx_done_flags.irq_flags))
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	2112      	movs	r1, #18
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 f90e 	bl	8001cc4 <rf_spi_read_register>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d111      	bne.n	8001ad2 <rf_send+0x26e>
		return 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e027      	b.n	8001b02 <rf_send+0x29e>

	while (!tx_done_flags.tx_done) {
		rf_handle->rf_delay_func(10);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	200a      	movs	r0, #10
 8001ab8:	4798      	blx	r3
		if (!rf_spi_read_register(rf_handle, RegIrqFlags,
 8001aba:	f107 0310 	add.w	r3, r7, #16
 8001abe:	461a      	mov	r2, r3
 8001ac0:	2112      	movs	r1, #18
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 f8fe 	bl	8001cc4 <rf_spi_read_register>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <rf_send+0x26e>
				&tx_done_flags.irq_flags))
			return 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e017      	b.n	8001b02 <rf_send+0x29e>
	while (!tx_done_flags.tx_done) {
 8001ad2:	7c3b      	ldrb	r3, [r7, #16]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0e9      	beq.n	8001ab2 <rf_send+0x24e>
	}

// done sending
// clear flags
	tx_done_flags.irq_flags = 0; // 0 out the rest
 8001ade:	2300      	movs	r3, #0
 8001ae0:	743b      	strb	r3, [r7, #16]
	tx_done_flags.tx_done = 1;	 // set the tx done bit to clear.
 8001ae2:	7c3b      	ldrb	r3, [r7, #16]
 8001ae4:	f043 0308 	orr.w	r3, r3, #8
 8001ae8:	743b      	strb	r3, [r7, #16]

// clear the tx done flag for next packet.
	if (!rf_spi_write_register(rf_handle, RegIrqFlags, tx_done_flags.irq_flags))
 8001aea:	7c3b      	ldrb	r3, [r7, #16]
 8001aec:	461a      	mov	r2, r3
 8001aee:	2112      	movs	r1, #18
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 f935 	bl	8001d60 <rf_spi_write_register>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <rf_send+0x29c>
		return 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	e000      	b.n	8001b02 <rf_send+0x29e>

	return 1;
 8001b00:	2301      	movs	r3, #1
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3730      	adds	r7, #48	@ 0x30
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	0800cd38 	.word	0x0800cd38
 8001b10:	0800cd74 	.word	0x0800cd74
 8001b14:	0800cdd0 	.word	0x0800cdd0
 8001b18:	0800cb34 	.word	0x0800cb34
 8001b1c:	0800ce54 	.word	0x0800ce54

08001b20 <rf_set_frequency>:

int rf_set_frequency(rf_handle_t *rf_handle, uint32_t rf_carrier_frequency) {
 8001b20:	b5b0      	push	{r4, r5, r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]

// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t) rf_carrier_frequency << 19) / 32000000;
 8001b2a:	6839      	ldr	r1, [r7, #0]
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	460a      	mov	r2, r1
 8001b30:	4603      	mov	r3, r0
 8001b32:	0b55      	lsrs	r5, r2, #13
 8001b34:	04d4      	lsls	r4, r2, #19
 8001b36:	4a22      	ldr	r2, [pc, #136]	@ (8001bc0 <rf_set_frequency+0xa0>)
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	4629      	mov	r1, r5
 8001b40:	f7ff f832 	bl	8000ba8 <__aeabi_uldivmod>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!rf_spi_write_register(rf_handle, RegFrfMsb, (uint8_t) (frf >> 16)))
 8001b4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	0c02      	lsrs	r2, r0, #16
 8001b5a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001b5e:	0c0b      	lsrs	r3, r1, #16
 8001b60:	b2d3      	uxtb	r3, r2
 8001b62:	461a      	mov	r2, r3
 8001b64:	2106      	movs	r1, #6
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f8fa 	bl	8001d60 <rf_spi_write_register>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <rf_set_frequency+0x56>
		return 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	e020      	b.n	8001bb8 <rf_set_frequency+0x98>
	if (!rf_spi_write_register(rf_handle, RegFrfMid, (uint8_t) (frf >> 8)))
 8001b76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	0a02      	lsrs	r2, r0, #8
 8001b84:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001b88:	0a0b      	lsrs	r3, r1, #8
 8001b8a:	b2d3      	uxtb	r3, r2
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2107      	movs	r1, #7
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f8e5 	bl	8001d60 <rf_spi_write_register>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <rf_set_frequency+0x80>
		return 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	e00b      	b.n	8001bb8 <rf_set_frequency+0x98>
	if (!rf_spi_write_register(rf_handle, RegFrfLsb, (uint8_t) (frf >> 0)))
 8001ba0:	7a3b      	ldrb	r3, [r7, #8]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	2108      	movs	r1, #8
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f8da 	bl	8001d60 <rf_spi_write_register>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <rf_set_frequency+0x96>
		return 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e000      	b.n	8001bb8 <rf_set_frequency+0x98>

	return 1;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc0:	01e84800 	.word	0x01e84800

08001bc4 <rf_set_tx_power>:

int rf_set_tx_power(rf_handle_t *rf_handle, uint8_t rf_power_dbm) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	70fb      	strb	r3, [r7, #3]

	if (!((rf_power_dbm >= 2 && rf_power_dbm <= 17) || (rf_power_dbm == 20))) {
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d902      	bls.n	8001bdc <rf_set_tx_power+0x18>
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	2b11      	cmp	r3, #17
 8001bda:	d90b      	bls.n	8001bf4 <rf_set_tx_power+0x30>
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	2b14      	cmp	r3, #20
 8001be0:	d008      	beq.n	8001bf4 <rf_set_tx_power+0x30>

		LOG_ERROR("Unable to set power to %d out of range.", rf_power_dbm);
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8001be8:	4932      	ldr	r1, [pc, #200]	@ (8001cb4 <rf_set_tx_power+0xf0>)
 8001bea:	4833      	ldr	r0, [pc, #204]	@ (8001cb8 <rf_set_tx_power+0xf4>)
 8001bec:	f008 ff26 	bl	800aa3c <iprintf>
		return 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e05b      	b.n	8001cac <rf_set_tx_power+0xe8>
	}

	rf_register_pa_config_t reg_pa_config;
	uint8_t reg_pa_dac_config = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]

	if (rf_power_dbm >= 2 || rf_power_dbm <= 17) {
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d802      	bhi.n	8001c04 <rf_set_tx_power+0x40>
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	2b11      	cmp	r3, #17
 8001c02:	d814      	bhi.n	8001c2e <rf_set_tx_power+0x6a>
		reg_pa_config.max_power = 7;
 8001c04:	7b3b      	ldrb	r3, [r7, #12]
 8001c06:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001c0a:	733b      	strb	r3, [r7, #12]
		reg_pa_config.pa_select = 1;
 8001c0c:	7b3b      	ldrb	r3, [r7, #12]
 8001c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c12:	733b      	strb	r3, [r7, #12]
		reg_pa_config.output_power = (rf_power_dbm - 2);
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	3b02      	subs	r3, #2
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	7b3b      	ldrb	r3, [r7, #12]
 8001c22:	f362 0303 	bfi	r3, r2, #0, #4
 8001c26:	733b      	strb	r3, [r7, #12]
		reg_pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 8001c28:	2384      	movs	r3, #132	@ 0x84
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	e010      	b.n	8001c50 <rf_set_tx_power+0x8c>
	} else if (rf_power_dbm == 20) {
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	2b14      	cmp	r3, #20
 8001c32:	d10d      	bne.n	8001c50 <rf_set_tx_power+0x8c>
		reg_pa_config.max_power = 7;
 8001c34:	7b3b      	ldrb	r3, [r7, #12]
 8001c36:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001c3a:	733b      	strb	r3, [r7, #12]
		reg_pa_config.pa_select = 1;
 8001c3c:	7b3b      	ldrb	r3, [r7, #12]
 8001c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c42:	733b      	strb	r3, [r7, #12]
		reg_pa_config.output_power = 15;
 8001c44:	7b3b      	ldrb	r3, [r7, #12]
 8001c46:	f043 030f 	orr.w	r3, r3, #15
 8001c4a:	733b      	strb	r3, [r7, #12]
		reg_pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8001c4c:	2387      	movs	r3, #135	@ 0x87
 8001c4e:	73fb      	strb	r3, [r7, #15]
	}

	if (!rf_spi_write_register(rf_handle, RegPaConfig,
 8001c50:	7b3b      	ldrb	r3, [r7, #12]
 8001c52:	461a      	mov	r2, r3
 8001c54:	2109      	movs	r1, #9
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f882 	bl	8001d60 <rf_spi_write_register>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d108      	bne.n	8001c74 <rf_set_tx_power+0xb0>
			reg_pa_config.pa_config)) {

		LOG_ERROR("Unable to set power to %d SPI write error.", rf_power_dbm);
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 8001c68:	4912      	ldr	r1, [pc, #72]	@ (8001cb4 <rf_set_tx_power+0xf0>)
 8001c6a:	4814      	ldr	r0, [pc, #80]	@ (8001cbc <rf_set_tx_power+0xf8>)
 8001c6c:	f008 fee6 	bl	800aa3c <iprintf>
		return 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	e01b      	b.n	8001cac <rf_set_tx_power+0xe8>
	}
	if (!rf_spi_write_register(rf_handle, RegPaDac, reg_pa_dac_config)) {
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	461a      	mov	r2, r3
 8001c78:	214d      	movs	r1, #77	@ 0x4d
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f870 	bl	8001d60 <rf_spi_write_register>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d108      	bne.n	8001c98 <rf_set_tx_power+0xd4>

		LOG_ERROR("Unable to set power to %d SPI write error.", rf_power_dbm);
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	f240 124d 	movw	r2, #333	@ 0x14d
 8001c8c:	4909      	ldr	r1, [pc, #36]	@ (8001cb4 <rf_set_tx_power+0xf0>)
 8001c8e:	480b      	ldr	r0, [pc, #44]	@ (8001cbc <rf_set_tx_power+0xf8>)
 8001c90:	f008 fed4 	bl	800aa3c <iprintf>
		return 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	e009      	b.n	8001cac <rf_set_tx_power+0xe8>
	}

	rf_set_ocp(rf_handle, 240);
 8001c98:	21f0      	movs	r1, #240	@ 0xf0
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f97c 	bl	8001f98 <rf_set_ocp>

	LOG_INFO("Set power to %d.", rf_power_dbm);
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4806      	ldr	r0, [pc, #24]	@ (8001cc0 <rf_set_tx_power+0xfc>)
 8001ca6:	f008 fec9 	bl	800aa3c <iprintf>

	return 1;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	0800cb34 	.word	0x0800cb34
 8001cb8:	0800ce90 	.word	0x0800ce90
 8001cbc:	0800cee4 	.word	0x0800cee4
 8001cc0:	0800cf38 	.word	0x0800cf38

08001cc4 <rf_spi_read_register>:

	return 1;
}

int rf_spi_read_register(rf_handle_t *rf_handle, uint8_t rf_register_address,
		uint8_t *rf_register_result) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	72fb      	strb	r3, [r7, #11]

// 0 the MSB since that is the wnr bit. we are reading so it must be 0.
	uint8_t prep_register = rf_register_address & 0x7f;
 8001cd2:	7afb      	ldrb	r3, [r7, #11]
 8001cd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(rf_handle->rf_nss_port, rf_handle->rf_nss_pin,
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6898      	ldr	r0, [r3, #8]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	899b      	ldrh	r3, [r3, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f001 fc86 	bl	80035f8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	if (HAL_SPI_Transmit(rf_handle->rf_spi_handle, &prep_register, 1,
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f107 0117 	add.w	r1, r7, #23
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f002 ff4e 	bl	8004b9a <HAL_SPI_Transmit>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <rf_spi_read_register+0x52>
			rf_handle->rf_spi_timeout) != HAL_OK) {
		LOG_ERROR("Failed to read register 0x%x", rf_register_address);
 8001d04:	7afb      	ldrb	r3, [r7, #11]
 8001d06:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001d0a:	4913      	ldr	r1, [pc, #76]	@ (8001d58 <rf_spi_read_register+0x94>)
 8001d0c:	4813      	ldr	r0, [pc, #76]	@ (8001d5c <rf_spi_read_register+0x98>)
 8001d0e:	f008 fe95 	bl	800aa3c <iprintf>
		return 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e01c      	b.n	8001d50 <rf_spi_read_register+0x8c>
	}

	if (HAL_SPI_Receive(rf_handle->rf_spi_handle, rf_register_result, 1,
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	f003 f8b0 	bl	8004e86 <HAL_SPI_Receive>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d008      	beq.n	8001d3e <rf_spi_read_register+0x7a>
			rf_handle->rf_spi_timeout) != HAL_OK) {
		LOG_ERROR("Failed to read register 0x%x", rf_register_address);
 8001d2c:	7afb      	ldrb	r3, [r7, #11]
 8001d2e:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8001d32:	4909      	ldr	r1, [pc, #36]	@ (8001d58 <rf_spi_read_register+0x94>)
 8001d34:	4809      	ldr	r0, [pc, #36]	@ (8001d5c <rf_spi_read_register+0x98>)
 8001d36:	f008 fe81 	bl	800aa3c <iprintf>
		return 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e008      	b.n	8001d50 <rf_spi_read_register+0x8c>
	}

	HAL_GPIO_WritePin(rf_handle->rf_nss_port, rf_handle->rf_nss_pin,
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6898      	ldr	r0, [r3, #8]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	899b      	ldrh	r3, [r3, #12]
 8001d46:	2201      	movs	r2, #1
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f001 fc55 	bl	80035f8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	return 1;
 8001d4e:	2301      	movs	r3, #1
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	0800cb34 	.word	0x0800cb34
 8001d5c:	0800cf60 	.word	0x0800cf60

08001d60 <rf_spi_write_register>:

int rf_spi_write_register(rf_handle_t *rf_handle, uint8_t rf_register_address,
		uint8_t rf_register_value) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	70fb      	strb	r3, [r7, #3]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	70bb      	strb	r3, [r7, #2]
// 1 the MSB since that is the wnr bit. we are writing so it must be 1.
	uint8_t prep_register_buffer[2] = { ((uint8_t) rf_register_address | 0x80u),
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	733b      	strb	r3, [r7, #12]
 8001d7a:	78bb      	ldrb	r3, [r7, #2]
 8001d7c:	737b      	strb	r3, [r7, #13]
			rf_register_value };

	HAL_GPIO_WritePin(rf_handle->rf_nss_port, rf_handle->rf_nss_pin,
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6898      	ldr	r0, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	899b      	ldrh	r3, [r3, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f001 fc35 	bl	80035f8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	if (HAL_SPI_Transmit(rf_handle->rf_spi_handle, prep_register_buffer, 2,
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f107 010c 	add.w	r1, r7, #12
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f002 fefd 	bl	8004b9a <HAL_SPI_Transmit>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00b      	beq.n	8001dbe <rf_spi_write_register+0x5e>
			rf_handle->rf_spi_timeout) != HAL_OK) {
		LOG_ERROR("Failed to set register 0x%x : 0x%x", rf_register_address,
 8001da6:	78fa      	ldrb	r2, [r7, #3]
 8001da8:	78bb      	ldrb	r3, [r7, #2]
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	4613      	mov	r3, r2
 8001dae:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8001db2:	4909      	ldr	r1, [pc, #36]	@ (8001dd8 <rf_spi_write_register+0x78>)
 8001db4:	4809      	ldr	r0, [pc, #36]	@ (8001ddc <rf_spi_write_register+0x7c>)
 8001db6:	f008 fe41 	bl	800aa3c <iprintf>
				rf_register_value);
		return 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e008      	b.n	8001dd0 <rf_spi_write_register+0x70>
	}

	HAL_GPIO_WritePin(rf_handle->rf_nss_port, rf_handle->rf_nss_pin,
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6898      	ldr	r0, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	899b      	ldrh	r3, [r3, #12]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f001 fc15 	bl	80035f8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	return 1;
 8001dce:	2301      	movs	r3, #1
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	0800cb34 	.word	0x0800cb34
 8001ddc:	0800cfa8 	.word	0x0800cfa8

08001de0 <rf_reset>:

int rf_reset(rf_handle_t *rf_handle) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

//	printf(
//			"\x1b[33;1;3;4m[Abi's RFlib] [%d] [WARN] : Reseting module\x1b[0m\r\n",
//			rf_handle->rf_module_identifier);

	LOG_WARN("Reseting module");
 8001de8:	480f      	ldr	r0, [pc, #60]	@ (8001e28 <rf_reset+0x48>)
 8001dea:	f008 fe8f 	bl	800ab0c <puts>

	HAL_GPIO_WritePin(rf_handle->rf_nreset_port, rf_handle->rf_nreset_pin,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6918      	ldr	r0, [r3, #16]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	8a9b      	ldrh	r3, [r3, #20]
 8001df6:	2200      	movs	r2, #0
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f001 fbfd 	bl	80035f8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	rf_handle->rf_delay_func(100);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	2064      	movs	r0, #100	@ 0x64
 8001e04:	4798      	blx	r3
	HAL_GPIO_WritePin(rf_handle->rf_nreset_port, rf_handle->rf_nreset_pin,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6918      	ldr	r0, [r3, #16]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	8a9b      	ldrh	r3, [r3, #20]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	4619      	mov	r1, r3
 8001e12:	f001 fbf1 	bl	80035f8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	rf_handle->rf_delay_func(100);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	2064      	movs	r0, #100	@ 0x64
 8001e1c:	4798      	blx	r3

	return 1;
 8001e1e:	2301      	movs	r3, #1
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	0800cff4 	.word	0x0800cff4

08001e2c <rf_get_spread_factor>:
	LOG_INFO("SETTING SPREAD FACTOR: %d", rf_spread_factor);

	return 1;
}

int rf_get_spread_factor(rf_handle_t *rf_handle, uint8_t *rf_spread_factor) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
	rf_register_modem_config_2_t sfconf = { 0 };
 8001e36:	2300      	movs	r3, #0
 8001e38:	733b      	strb	r3, [r7, #12]

	if (!rf_spi_read_register(rf_handle, RegModemConfig2,
 8001e3a:	f107 030c 	add.w	r3, r7, #12
 8001e3e:	461a      	mov	r2, r3
 8001e40:	211e      	movs	r1, #30
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ff3e 	bl	8001cc4 <rf_spi_read_register>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d107      	bne.n	8001e5e <rf_get_spread_factor+0x32>
			&sfconf.modem_config_2)) {
		LOG_ERROR("SPI ERROR");
 8001e4e:	f240 229b 	movw	r2, #667	@ 0x29b
 8001e52:	4909      	ldr	r1, [pc, #36]	@ (8001e78 <rf_get_spread_factor+0x4c>)
 8001e54:	4809      	ldr	r0, [pc, #36]	@ (8001e7c <rf_get_spread_factor+0x50>)
 8001e56:	f008 fdf1 	bl	800aa3c <iprintf>
		return 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e007      	b.n	8001e6e <rf_get_spread_factor+0x42>
	}

	*rf_spread_factor = sfconf.spreading_factor;
 8001e5e:	7b3b      	ldrb	r3, [r7, #12]
 8001e60:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	461a      	mov	r2, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	701a      	strb	r2, [r3, #0]

	return 1;
 8001e6c:	2301      	movs	r3, #1
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	0800cb34 	.word	0x0800cb34
 8001e7c:	0800d024 	.word	0x0800d024

08001e80 <rf_set_bandwidth>:

int rf_set_bandwidth(rf_handle_t *rf_handle, rf_bandwidth_t bandwidth) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	70fb      	strb	r3, [r7, #3]

	rf_register_modem_config_1_t bwconf = { 0 };
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	743b      	strb	r3, [r7, #16]

	uint8_t bw = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	77fb      	strb	r3, [r7, #31]

	if (!rf_spi_read_register(rf_handle, RegModemConfig1,
 8001e94:	f107 0310 	add.w	r3, r7, #16
 8001e98:	461a      	mov	r2, r3
 8001e9a:	211d      	movs	r1, #29
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff11 	bl	8001cc4 <rf_spi_read_register>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d107      	bne.n	8001eb8 <rf_set_bandwidth+0x38>
			&bwconf.modem_config_1)) {
		LOG_ERROR("SPI ERROR");
 8001ea8:	f44f 722b 	mov.w	r2, #684	@ 0x2ac
 8001eac:	4937      	ldr	r1, [pc, #220]	@ (8001f8c <rf_set_bandwidth+0x10c>)
 8001eae:	4838      	ldr	r0, [pc, #224]	@ (8001f90 <rf_set_bandwidth+0x110>)
 8001eb0:	f008 fdc4 	bl	800aa3c <iprintf>
		return 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e064      	b.n	8001f82 <rf_set_bandwidth+0x102>
	}

	bw = bandwidth;
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	77fb      	strb	r3, [r7, #31]

	bwconf.bandwidth = bandwidth;
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	7c3b      	ldrb	r3, [r7, #16]
 8001ec6:	f362 1307 	bfi	r3, r2, #4, #4
 8001eca:	743b      	strb	r3, [r7, #16]

	if (!rf_spi_write_register(rf_handle, RegModemConfig1,
 8001ecc:	7c3b      	ldrb	r3, [r7, #16]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	211d      	movs	r1, #29
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ff44 	bl	8001d60 <rf_spi_write_register>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d107      	bne.n	8001eee <rf_set_bandwidth+0x6e>
			bwconf.modem_config_1)) {
		LOG_ERROR("SPI ERROR");
 8001ede:	f240 22b6 	movw	r2, #694	@ 0x2b6
 8001ee2:	492a      	ldr	r1, [pc, #168]	@ (8001f8c <rf_set_bandwidth+0x10c>)
 8001ee4:	482a      	ldr	r0, [pc, #168]	@ (8001f90 <rf_set_bandwidth+0x110>)
 8001ee6:	f008 fda9 	bl	800aa3c <iprintf>
		return 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e049      	b.n	8001f82 <rf_set_bandwidth+0x102>
	}

	uint8_t sf = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]

	rf_get_spread_factor(rf_handle, &sf);
 8001ef2:	f107 030f 	add.w	r3, r7, #15
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff97 	bl	8001e2c <rf_get_spread_factor>

	long symbolDuration = 1000 / (bw / (1L << sf));
 8001efe:	7ffb      	ldrb	r3, [r7, #31]
 8001f00:	7bfa      	ldrb	r2, [r7, #15]
 8001f02:	4113      	asrs	r3, r2
 8001f04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f08:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f0c:	61bb      	str	r3, [r7, #24]

	// Section 4.1.1.6
	int ldoOn = (symbolDuration > 16);
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	2b10      	cmp	r3, #16
 8001f12:	bfcc      	ite	gt
 8001f14:	2301      	movgt	r3, #1
 8001f16:	2300      	movle	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	617b      	str	r3, [r7, #20]

	rf_register_modem_config_3_t conf3 = { 0 };
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	733b      	strb	r3, [r7, #12]

	if (!rf_spi_read_register(rf_handle, RegModemConfig3,
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	461a      	mov	r2, r3
 8001f26:	2126      	movs	r1, #38	@ 0x26
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff fecb 	bl	8001cc4 <rf_spi_read_register>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d107      	bne.n	8001f44 <rf_set_bandwidth+0xc4>
			&conf3.modem_config_3)) {
		LOG_ERROR("SPI ERROR");
 8001f34:	f240 22c7 	movw	r2, #711	@ 0x2c7
 8001f38:	4914      	ldr	r1, [pc, #80]	@ (8001f8c <rf_set_bandwidth+0x10c>)
 8001f3a:	4815      	ldr	r0, [pc, #84]	@ (8001f90 <rf_set_bandwidth+0x110>)
 8001f3c:	f008 fd7e 	bl	800aa3c <iprintf>
		return 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	e01e      	b.n	8001f82 <rf_set_bandwidth+0x102>
	}

	conf3.low_data_rate_optimize = ldoOn;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	7b3b      	ldrb	r3, [r7, #12]
 8001f4e:	f362 03c3 	bfi	r3, r2, #3, #1
 8001f52:	733b      	strb	r3, [r7, #12]

	if (!rf_spi_write_register(rf_handle, RegModemConfig3,
 8001f54:	7b3b      	ldrb	r3, [r7, #12]
 8001f56:	461a      	mov	r2, r3
 8001f58:	2126      	movs	r1, #38	@ 0x26
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ff00 	bl	8001d60 <rf_spi_write_register>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d107      	bne.n	8001f76 <rf_set_bandwidth+0xf6>
			conf3.modem_config_3)) {
		LOG_ERROR("SPI ERROR");
 8001f66:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8001f6a:	4908      	ldr	r1, [pc, #32]	@ (8001f8c <rf_set_bandwidth+0x10c>)
 8001f6c:	4808      	ldr	r0, [pc, #32]	@ (8001f90 <rf_set_bandwidth+0x110>)
 8001f6e:	f008 fd65 	bl	800aa3c <iprintf>
		return 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e005      	b.n	8001f82 <rf_set_bandwidth+0x102>
	}

	LOG_INFO("Setting BW %d", bw);
 8001f76:	7ffb      	ldrb	r3, [r7, #31]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4806      	ldr	r0, [pc, #24]	@ (8001f94 <rf_set_bandwidth+0x114>)
 8001f7c:	f008 fd5e 	bl	800aa3c <iprintf>

	return 1;
 8001f80:	2301      	movs	r3, #1

}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3720      	adds	r7, #32
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	0800cb34 	.word	0x0800cb34
 8001f90:	0800d024 	.word	0x0800d024
 8001f94:	0800d194 	.word	0x0800d194

08001f98 <rf_set_ocp>:
	}

	return 1;
}

int rf_set_ocp(rf_handle_t *rf_handle, uint8_t rf_ocp_level) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	70fb      	strb	r3, [r7, #3]
	uint8_t ocpTrim = 27;
 8001fa4:	231b      	movs	r3, #27
 8001fa6:	73fb      	strb	r3, [r7, #15]

	if (rf_ocp_level <= 120) {
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	2b78      	cmp	r3, #120	@ 0x78
 8001fac:	d809      	bhi.n	8001fc2 <rf_set_ocp+0x2a>
		ocpTrim = (rf_ocp_level - 45) / 5;
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	3b2d      	subs	r3, #45	@ 0x2d
 8001fb2:	4a18      	ldr	r2, [pc, #96]	@ (8002014 <rf_set_ocp+0x7c>)
 8001fb4:	fb82 1203 	smull	r1, r2, r2, r3
 8001fb8:	1052      	asrs	r2, r2, #1
 8001fba:	17db      	asrs	r3, r3, #31
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	73fb      	strb	r3, [r7, #15]
 8001fc0:	e00b      	b.n	8001fda <rf_set_ocp+0x42>
	} else if (rf_ocp_level <= 240) {
 8001fc2:	78fb      	ldrb	r3, [r7, #3]
 8001fc4:	2bf0      	cmp	r3, #240	@ 0xf0
 8001fc6:	d808      	bhi.n	8001fda <rf_set_ocp+0x42>
		ocpTrim = (rf_ocp_level + 30) / 10;
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	331e      	adds	r3, #30
 8001fcc:	4a11      	ldr	r2, [pc, #68]	@ (8002014 <rf_set_ocp+0x7c>)
 8001fce:	fb82 1203 	smull	r1, r2, r2, r3
 8001fd2:	1092      	asrs	r2, r2, #2
 8001fd4:	17db      	asrs	r3, r3, #31
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	73fb      	strb	r3, [r7, #15]
	}

	if (!rf_spi_write_register(rf_handle, RegOcp, 0x20 | (0x1F & ocpTrim))) {
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	f043 0320 	orr.w	r3, r3, #32
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	210b      	movs	r1, #11
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff feb7 	bl	8001d60 <rf_spi_write_register>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d107      	bne.n	8002008 <rf_set_ocp+0x70>
		LOG_ERROR("OCP ERROR");
 8001ff8:	f240 329f 	movw	r2, #927	@ 0x39f
 8001ffc:	4906      	ldr	r1, [pc, #24]	@ (8002018 <rf_set_ocp+0x80>)
 8001ffe:	4807      	ldr	r0, [pc, #28]	@ (800201c <rf_set_ocp+0x84>)
 8002000:	f008 fd1c 	bl	800aa3c <iprintf>
		return 0;
 8002004:	2300      	movs	r3, #0
 8002006:	e000      	b.n	800200a <rf_set_ocp+0x72>
	}

	return 1;
 8002008:	2301      	movs	r3, #1

}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	66666667 	.word	0x66666667
 8002018:	0800cb34 	.word	0x0800cb34
 800201c:	0800d2b8 	.word	0x0800d2b8

08002020 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002024:	4b1b      	ldr	r3, [pc, #108]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002026:	4a1c      	ldr	r2, [pc, #112]	@ (8002098 <MX_SPI1_Init+0x78>)
 8002028:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800202a:	4b1a      	ldr	r3, [pc, #104]	@ (8002094 <MX_SPI1_Init+0x74>)
 800202c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002030:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002032:	4b18      	ldr	r3, [pc, #96]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002038:	4b16      	ldr	r3, [pc, #88]	@ (8002094 <MX_SPI1_Init+0x74>)
 800203a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800203e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002040:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002046:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002048:	2200      	movs	r2, #0
 800204a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <MX_SPI1_Init+0x74>)
 800204e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002052:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002054:	4b0f      	ldr	r3, [pc, #60]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002056:	2228      	movs	r2, #40	@ 0x28
 8002058:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800205a:	4b0e      	ldr	r3, [pc, #56]	@ (8002094 <MX_SPI1_Init+0x74>)
 800205c:	2200      	movs	r2, #0
 800205e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002060:	4b0c      	ldr	r3, [pc, #48]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002062:	2200      	movs	r2, #0
 8002064:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002066:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002068:	2200      	movs	r2, #0
 800206a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800206c:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <MX_SPI1_Init+0x74>)
 800206e:	2207      	movs	r2, #7
 8002070:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002072:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002074:	2200      	movs	r2, #0
 8002076:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002078:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <MX_SPI1_Init+0x74>)
 800207a:	2208      	movs	r2, #8
 800207c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800207e:	4805      	ldr	r0, [pc, #20]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002080:	f002 fce8 	bl	8004a54 <HAL_SPI_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800208a:	f7ff fa6d 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000b94 	.word	0x20000b94
 8002098:	40013000 	.word	0x40013000

0800209c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	@ 0x28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a17      	ldr	r2, [pc, #92]	@ (8002118 <HAL_SPI_MspInit+0x7c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d128      	bne.n	8002110 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020be:	4b17      	ldr	r3, [pc, #92]	@ (800211c <HAL_SPI_MspInit+0x80>)
 80020c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c2:	4a16      	ldr	r2, [pc, #88]	@ (800211c <HAL_SPI_MspInit+0x80>)
 80020c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80020ca:	4b14      	ldr	r3, [pc, #80]	@ (800211c <HAL_SPI_MspInit+0x80>)
 80020cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d6:	4b11      	ldr	r3, [pc, #68]	@ (800211c <HAL_SPI_MspInit+0x80>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	4a10      	ldr	r2, [pc, #64]	@ (800211c <HAL_SPI_MspInit+0x80>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020e2:	4b0e      	ldr	r3, [pc, #56]	@ (800211c <HAL_SPI_MspInit+0x80>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020ee:	23e0      	movs	r3, #224	@ 0xe0
 80020f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fa:	2303      	movs	r3, #3
 80020fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020fe:	2305      	movs	r3, #5
 8002100:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	4619      	mov	r1, r3
 8002108:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800210c:	f001 f90a 	bl	8003324 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002110:	bf00      	nop
 8002112:	3728      	adds	r7, #40	@ 0x28
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40013000 	.word	0x40013000
 800211c:	40021000 	.word	0x40021000

08002120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	4b11      	ldr	r3, [pc, #68]	@ (800216c <HAL_MspInit+0x4c>)
 8002128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800212a:	4a10      	ldr	r2, [pc, #64]	@ (800216c <HAL_MspInit+0x4c>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6613      	str	r3, [r2, #96]	@ 0x60
 8002132:	4b0e      	ldr	r3, [pc, #56]	@ (800216c <HAL_MspInit+0x4c>)
 8002134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HAL_MspInit+0x4c>)
 8002140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002142:	4a0a      	ldr	r2, [pc, #40]	@ (800216c <HAL_MspInit+0x4c>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002148:	6593      	str	r3, [r2, #88]	@ 0x58
 800214a:	4b08      	ldr	r3, [pc, #32]	@ (800216c <HAL_MspInit+0x4c>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002156:	2200      	movs	r2, #0
 8002158:	210f      	movs	r1, #15
 800215a:	f06f 0001 	mvn.w	r0, #1
 800215e:	f001 f8b7 	bl	80032d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000

08002170 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08c      	sub	sp, #48	@ 0x30
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800217e:	4b2e      	ldr	r3, [pc, #184]	@ (8002238 <HAL_InitTick+0xc8>)
 8002180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002182:	4a2d      	ldr	r2, [pc, #180]	@ (8002238 <HAL_InitTick+0xc8>)
 8002184:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002188:	6613      	str	r3, [r2, #96]	@ 0x60
 800218a:	4b2b      	ldr	r3, [pc, #172]	@ (8002238 <HAL_InitTick+0xc8>)
 800218c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800218e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002196:	f107 020c 	add.w	r2, r7, #12
 800219a:	f107 0310 	add.w	r3, r7, #16
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f002 f8b1 	bl	8004308 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80021a6:	f002 f899 	bl	80042dc <HAL_RCC_GetPCLK2Freq>
 80021aa:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ae:	4a23      	ldr	r2, [pc, #140]	@ (800223c <HAL_InitTick+0xcc>)
 80021b0:	fba2 2303 	umull	r2, r3, r2, r3
 80021b4:	0c9b      	lsrs	r3, r3, #18
 80021b6:	3b01      	subs	r3, #1
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80021ba:	4b21      	ldr	r3, [pc, #132]	@ (8002240 <HAL_InitTick+0xd0>)
 80021bc:	4a21      	ldr	r2, [pc, #132]	@ (8002244 <HAL_InitTick+0xd4>)
 80021be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 80021c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002240 <HAL_InitTick+0xd0>)
 80021c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021c6:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 80021c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002240 <HAL_InitTick+0xd0>)
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 80021ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002240 <HAL_InitTick+0xd0>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <HAL_InitTick+0xd0>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021da:	4b19      	ldr	r3, [pc, #100]	@ (8002240 <HAL_InitTick+0xd0>)
 80021dc:	2200      	movs	r2, #0
 80021de:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 80021e0:	4817      	ldr	r0, [pc, #92]	@ (8002240 <HAL_InitTick+0xd0>)
 80021e2:	f003 fb63 	bl	80058ac <HAL_TIM_Base_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80021ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d11b      	bne.n	800222c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 80021f4:	4812      	ldr	r0, [pc, #72]	@ (8002240 <HAL_InitTick+0xd0>)
 80021f6:	f003 fbb1 	bl	800595c <HAL_TIM_Base_Start_IT>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002200:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002204:	2b00      	cmp	r3, #0
 8002206:	d111      	bne.n	800222c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002208:	2019      	movs	r0, #25
 800220a:	f001 f87d 	bl	8003308 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b0f      	cmp	r3, #15
 8002212:	d808      	bhi.n	8002226 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002214:	2200      	movs	r2, #0
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	2019      	movs	r0, #25
 800221a:	f001 f859 	bl	80032d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800221e:	4a0a      	ldr	r2, [pc, #40]	@ (8002248 <HAL_InitTick+0xd8>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	e002      	b.n	800222c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800222c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002230:	4618      	mov	r0, r3
 8002232:	3730      	adds	r7, #48	@ 0x30
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	431bde83 	.word	0x431bde83
 8002240:	20000bf8 	.word	0x20000bf8
 8002244:	40014400 	.word	0x40014400
 8002248:	20000004 	.word	0x20000004

0800224c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002250:	f002 f89c 	bl	800438c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002254:	bf00      	nop
 8002256:	e7fd      	b.n	8002254 <NMI_Handler+0x8>

08002258 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.Pin = LED_D3_PWM_Pin;
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	HAL_GPIO_Init(LED_D3_PWM_GPIO_Port, &GPIO_InitStruct);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800225c:	bf00      	nop
 800225e:	e7fd      	b.n	800225c <HardFault_Handler+0x4>

08002260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002264:	bf00      	nop
 8002266:	e7fd      	b.n	8002264 <MemManage_Handler+0x4>

08002268 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <BusFault_Handler+0x4>

08002270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002274:	bf00      	nop
 8002276:	e7fd      	b.n	8002274 <UsageFault_Handler+0x4>

08002278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  if (htim1.Instance != NULL)
 800228c:	4b07      	ldr	r3, [pc, #28]	@ (80022ac <TIM1_UP_TIM16_IRQHandler+0x24>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <TIM1_UP_TIM16_IRQHandler+0x12>
  {
    HAL_TIM_IRQHandler(&htim1);
 8002294:	4805      	ldr	r0, [pc, #20]	@ (80022ac <TIM1_UP_TIM16_IRQHandler+0x24>)
 8002296:	f003 fc16 	bl	8005ac6 <HAL_TIM_IRQHandler>
  }
  if (htim16.Instance != NULL)
 800229a:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <TIM1_UP_TIM16_IRQHandler+0x28>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <TIM1_UP_TIM16_IRQHandler+0x20>
  {
    HAL_TIM_IRQHandler(&htim16);
 80022a2:	4803      	ldr	r0, [pc, #12]	@ (80022b0 <TIM1_UP_TIM16_IRQHandler+0x28>)
 80022a4:	f003 fc0f 	bl	8005ac6 <HAL_TIM_IRQHandler>
  }
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000c48 	.word	0x20000c48
 80022b0:	20000bf8 	.word	0x20000bf8

080022b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return 1;
 80022b8:	2301      	movs	r3, #1
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <_kill>:

int _kill(int pid, int sig)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022ce:	f008 fda5 	bl	800ae1c <__errno>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2216      	movs	r2, #22
 80022d6:	601a      	str	r2, [r3, #0]
  return -1;
 80022d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <_exit>:

void _exit (int status)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022ec:	f04f 31ff 	mov.w	r1, #4294967295
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff ffe7 	bl	80022c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022f6:	bf00      	nop
 80022f8:	e7fd      	b.n	80022f6 <_exit+0x12>

080022fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e00a      	b.n	8002322 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800230c:	f3af 8000 	nop.w
 8002310:	4601      	mov	r1, r0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	60ba      	str	r2, [r7, #8]
 8002318:	b2ca      	uxtb	r2, r1
 800231a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	3301      	adds	r3, #1
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	429a      	cmp	r2, r3
 8002328:	dbf0      	blt.n	800230c <_read+0x12>
  }

  return len;
 800232a:	687b      	ldr	r3, [r7, #4]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800233c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800235c:	605a      	str	r2, [r3, #4]
  return 0;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <_isatty>:

int _isatty(int file)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002374:	2301      	movs	r3, #1
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002382:	b480      	push	{r7}
 8002384:	b085      	sub	sp, #20
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023a4:	4a14      	ldr	r2, [pc, #80]	@ (80023f8 <_sbrk+0x5c>)
 80023a6:	4b15      	ldr	r3, [pc, #84]	@ (80023fc <_sbrk+0x60>)
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b0:	4b13      	ldr	r3, [pc, #76]	@ (8002400 <_sbrk+0x64>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d102      	bne.n	80023be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023b8:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <_sbrk+0x64>)
 80023ba:	4a12      	ldr	r2, [pc, #72]	@ (8002404 <_sbrk+0x68>)
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023be:	4b10      	ldr	r3, [pc, #64]	@ (8002400 <_sbrk+0x64>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d207      	bcs.n	80023dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023cc:	f008 fd26 	bl	800ae1c <__errno>
 80023d0:	4603      	mov	r3, r0
 80023d2:	220c      	movs	r2, #12
 80023d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295
 80023da:	e009      	b.n	80023f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023dc:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <_sbrk+0x64>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023e2:	4b07      	ldr	r3, [pc, #28]	@ (8002400 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	4a05      	ldr	r2, [pc, #20]	@ (8002400 <_sbrk+0x64>)
 80023ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ee:	68fb      	ldr	r3, [r7, #12]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20010000 	.word	0x20010000
 80023fc:	00000400 	.word	0x00000400
 8002400:	20000c44 	.word	0x20000c44
 8002404:	20002858 	.word	0x20002858

08002408 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800240c:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <SystemInit+0x20>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002412:	4a05      	ldr	r2, [pc, #20]	@ (8002428 <SystemInit+0x20>)
 8002414:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002418:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b09a      	sub	sp, #104	@ 0x68
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002432:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	609a      	str	r2, [r3, #8]
 800243e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002440:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800244c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
 800245c:	615a      	str	r2, [r3, #20]
 800245e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	222c      	movs	r2, #44	@ 0x2c
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f008 fc30 	bl	800accc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800246c:	4b43      	ldr	r3, [pc, #268]	@ (800257c <MX_TIM1_Init+0x150>)
 800246e:	4a44      	ldr	r2, [pc, #272]	@ (8002580 <MX_TIM1_Init+0x154>)
 8002470:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 8002472:	4b42      	ldr	r3, [pc, #264]	@ (800257c <MX_TIM1_Init+0x150>)
 8002474:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002478:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800247a:	4b40      	ldr	r3, [pc, #256]	@ (800257c <MX_TIM1_Init+0x150>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8002480:	4b3e      	ldr	r3, [pc, #248]	@ (800257c <MX_TIM1_Init+0x150>)
 8002482:	2263      	movs	r2, #99	@ 0x63
 8002484:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002486:	4b3d      	ldr	r3, [pc, #244]	@ (800257c <MX_TIM1_Init+0x150>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800248c:	4b3b      	ldr	r3, [pc, #236]	@ (800257c <MX_TIM1_Init+0x150>)
 800248e:	2200      	movs	r2, #0
 8002490:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002492:	4b3a      	ldr	r3, [pc, #232]	@ (800257c <MX_TIM1_Init+0x150>)
 8002494:	2280      	movs	r2, #128	@ 0x80
 8002496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002498:	4838      	ldr	r0, [pc, #224]	@ (800257c <MX_TIM1_Init+0x150>)
 800249a:	f003 fa07 	bl	80058ac <HAL_TIM_Base_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80024a4:	f7ff f860 	bl	8001568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024ae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80024b2:	4619      	mov	r1, r3
 80024b4:	4831      	ldr	r0, [pc, #196]	@ (800257c <MX_TIM1_Init+0x150>)
 80024b6:	f003 fd21 	bl	8005efc <HAL_TIM_ConfigClockSource>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80024c0:	f7ff f852 	bl	8001568 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80024c4:	482d      	ldr	r0, [pc, #180]	@ (800257c <MX_TIM1_Init+0x150>)
 80024c6:	f003 fa9d 	bl	8005a04 <HAL_TIM_PWM_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80024d0:	f7ff f84a 	bl	8001568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d4:	2300      	movs	r3, #0
 80024d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024d8:	2300      	movs	r3, #0
 80024da:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024e0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80024e4:	4619      	mov	r1, r3
 80024e6:	4825      	ldr	r0, [pc, #148]	@ (800257c <MX_TIM1_Init+0x150>)
 80024e8:	f004 f982 	bl	80067f0 <HAL_TIMEx_MasterConfigSynchronization>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80024f2:	f7ff f839 	bl	8001568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024f6:	2360      	movs	r3, #96	@ 0x60
 80024f8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024fe:	2300      	movs	r3, #0
 8002500:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002502:	2300      	movs	r3, #0
 8002504:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002506:	2300      	movs	r3, #0
 8002508:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002512:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002516:	2204      	movs	r2, #4
 8002518:	4619      	mov	r1, r3
 800251a:	4818      	ldr	r0, [pc, #96]	@ (800257c <MX_TIM1_Init+0x150>)
 800251c:	f003 fbda 	bl	8005cd4 <HAL_TIM_PWM_ConfigChannel>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002526:	f7ff f81f 	bl	8001568 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800253e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002542:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800254c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002550:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002556:	2300      	movs	r3, #0
 8002558:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	4619      	mov	r1, r3
 800255e:	4807      	ldr	r0, [pc, #28]	@ (800257c <MX_TIM1_Init+0x150>)
 8002560:	f004 f9ac 	bl	80068bc <HAL_TIMEx_ConfigBreakDeadTime>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800256a:	f7fe fffd 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800256e:	4803      	ldr	r0, [pc, #12]	@ (800257c <MX_TIM1_Init+0x150>)
 8002570:	f000 f8b6 	bl	80026e0 <HAL_TIM_MspPostInit>

}
 8002574:	bf00      	nop
 8002576:	3768      	adds	r7, #104	@ 0x68
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000c48 	.word	0x20000c48
 8002580:	40012c00 	.word	0x40012c00

08002584 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08e      	sub	sp, #56	@ 0x38
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800258a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	609a      	str	r2, [r3, #8]
 8002596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002598:	f107 031c 	add.w	r3, r7, #28
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025a4:	463b      	mov	r3, r7
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	60da      	str	r2, [r3, #12]
 80025b0:	611a      	str	r2, [r3, #16]
 80025b2:	615a      	str	r2, [r3, #20]
 80025b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025b6:	4b2d      	ldr	r3, [pc, #180]	@ (800266c <MX_TIM2_Init+0xe8>)
 80025b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 80025be:	4b2b      	ldr	r3, [pc, #172]	@ (800266c <MX_TIM2_Init+0xe8>)
 80025c0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80025c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c6:	4b29      	ldr	r3, [pc, #164]	@ (800266c <MX_TIM2_Init+0xe8>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80025cc:	4b27      	ldr	r3, [pc, #156]	@ (800266c <MX_TIM2_Init+0xe8>)
 80025ce:	2263      	movs	r2, #99	@ 0x63
 80025d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d2:	4b26      	ldr	r3, [pc, #152]	@ (800266c <MX_TIM2_Init+0xe8>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025d8:	4b24      	ldr	r3, [pc, #144]	@ (800266c <MX_TIM2_Init+0xe8>)
 80025da:	2280      	movs	r2, #128	@ 0x80
 80025dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025de:	4823      	ldr	r0, [pc, #140]	@ (800266c <MX_TIM2_Init+0xe8>)
 80025e0:	f003 f964 	bl	80058ac <HAL_TIM_Base_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80025ea:	f7fe ffbd 	bl	8001568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025f8:	4619      	mov	r1, r3
 80025fa:	481c      	ldr	r0, [pc, #112]	@ (800266c <MX_TIM2_Init+0xe8>)
 80025fc:	f003 fc7e 	bl	8005efc <HAL_TIM_ConfigClockSource>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002606:	f7fe ffaf 	bl	8001568 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800260a:	4818      	ldr	r0, [pc, #96]	@ (800266c <MX_TIM2_Init+0xe8>)
 800260c:	f003 f9fa 	bl	8005a04 <HAL_TIM_PWM_Init>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002616:	f7fe ffa7 	bl	8001568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800261e:	2300      	movs	r3, #0
 8002620:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002622:	f107 031c 	add.w	r3, r7, #28
 8002626:	4619      	mov	r1, r3
 8002628:	4810      	ldr	r0, [pc, #64]	@ (800266c <MX_TIM2_Init+0xe8>)
 800262a:	f004 f8e1 	bl	80067f0 <HAL_TIMEx_MasterConfigSynchronization>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002634:	f7fe ff98 	bl	8001568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002638:	2360      	movs	r3, #96	@ 0x60
 800263a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002640:	2300      	movs	r3, #0
 8002642:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002648:	463b      	mov	r3, r7
 800264a:	2204      	movs	r2, #4
 800264c:	4619      	mov	r1, r3
 800264e:	4807      	ldr	r0, [pc, #28]	@ (800266c <MX_TIM2_Init+0xe8>)
 8002650:	f003 fb40 	bl	8005cd4 <HAL_TIM_PWM_ConfigChannel>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800265a:	f7fe ff85 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800265e:	4803      	ldr	r0, [pc, #12]	@ (800266c <MX_TIM2_Init+0xe8>)
 8002660:	f000 f83e 	bl	80026e0 <HAL_TIM_MspPostInit>

}
 8002664:	bf00      	nop
 8002666:	3738      	adds	r7, #56	@ 0x38
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000c94 	.word	0x20000c94

08002670 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a16      	ldr	r2, [pc, #88]	@ (80026d8 <HAL_TIM_Base_MspInit+0x68>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d114      	bne.n	80026ac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002682:	4b16      	ldr	r3, [pc, #88]	@ (80026dc <HAL_TIM_Base_MspInit+0x6c>)
 8002684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002686:	4a15      	ldr	r2, [pc, #84]	@ (80026dc <HAL_TIM_Base_MspInit+0x6c>)
 8002688:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800268c:	6613      	str	r3, [r2, #96]	@ 0x60
 800268e:	4b13      	ldr	r3, [pc, #76]	@ (80026dc <HAL_TIM_Base_MspInit+0x6c>)
 8002690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002692:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	210f      	movs	r1, #15
 800269e:	2019      	movs	r0, #25
 80026a0:	f000 fe16 	bl	80032d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80026a4:	2019      	movs	r0, #25
 80026a6:	f000 fe2f 	bl	8003308 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80026aa:	e010      	b.n	80026ce <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026b4:	d10b      	bne.n	80026ce <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026b6:	4b09      	ldr	r3, [pc, #36]	@ (80026dc <HAL_TIM_Base_MspInit+0x6c>)
 80026b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ba:	4a08      	ldr	r2, [pc, #32]	@ (80026dc <HAL_TIM_Base_MspInit+0x6c>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80026c2:	4b06      	ldr	r3, [pc, #24]	@ (80026dc <HAL_TIM_Base_MspInit+0x6c>)
 80026c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40012c00 	.word	0x40012c00
 80026dc:	40021000 	.word	0x40021000

080026e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	@ 0x28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a23      	ldr	r2, [pc, #140]	@ (800278c <HAL_TIM_MspPostInit+0xac>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d11e      	bne.n	8002740 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002702:	4b23      	ldr	r3, [pc, #140]	@ (8002790 <HAL_TIM_MspPostInit+0xb0>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002706:	4a22      	ldr	r2, [pc, #136]	@ (8002790 <HAL_TIM_MspPostInit+0xb0>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800270e:	4b20      	ldr	r3, [pc, #128]	@ (8002790 <HAL_TIM_MspPostInit+0xb0>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LED_D2_PWM_Pin;
 800271a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800271e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002728:	2300      	movs	r3, #0
 800272a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800272c:	2301      	movs	r3, #1
 800272e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_D2_PWM_GPIO_Port, &GPIO_InitStruct);
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	4619      	mov	r1, r3
 8002736:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800273a:	f000 fdf3 	bl	8003324 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800273e:	e021      	b.n	8002784 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002748:	d11c      	bne.n	8002784 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800274a:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <HAL_TIM_MspPostInit+0xb0>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274e:	4a10      	ldr	r2, [pc, #64]	@ (8002790 <HAL_TIM_MspPostInit+0xb0>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002756:	4b0e      	ldr	r3, [pc, #56]	@ (8002790 <HAL_TIM_MspPostInit+0xb0>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_D3_PWM_Pin;
 8002762:	2302      	movs	r3, #2
 8002764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002766:	2302      	movs	r3, #2
 8002768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002772:	2301      	movs	r3, #1
 8002774:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8002776:	f107 0314 	add.w	r3, r7, #20
 800277a:	4619      	mov	r1, r3
 800277c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002780:	f000 fdd0 	bl	8003324 <HAL_GPIO_Init>
}
 8002784:	bf00      	nop
 8002786:	3728      	adds	r7, #40	@ 0x28
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40012c00 	.word	0x40012c00
 8002790:	40021000 	.word	0x40021000

08002794 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002798:	4b14      	ldr	r3, [pc, #80]	@ (80027ec <MX_USART2_UART_Init+0x58>)
 800279a:	4a15      	ldr	r2, [pc, #84]	@ (80027f0 <MX_USART2_UART_Init+0x5c>)
 800279c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800279e:	4b13      	ldr	r3, [pc, #76]	@ (80027ec <MX_USART2_UART_Init+0x58>)
 80027a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027a6:	4b11      	ldr	r3, [pc, #68]	@ (80027ec <MX_USART2_UART_Init+0x58>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027ac:	4b0f      	ldr	r3, [pc, #60]	@ (80027ec <MX_USART2_UART_Init+0x58>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027b2:	4b0e      	ldr	r3, [pc, #56]	@ (80027ec <MX_USART2_UART_Init+0x58>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027b8:	4b0c      	ldr	r3, [pc, #48]	@ (80027ec <MX_USART2_UART_Init+0x58>)
 80027ba:	220c      	movs	r2, #12
 80027bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027be:	4b0b      	ldr	r3, [pc, #44]	@ (80027ec <MX_USART2_UART_Init+0x58>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c4:	4b09      	ldr	r3, [pc, #36]	@ (80027ec <MX_USART2_UART_Init+0x58>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027ca:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <MX_USART2_UART_Init+0x58>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027d0:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <MX_USART2_UART_Init+0x58>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027d6:	4805      	ldr	r0, [pc, #20]	@ (80027ec <MX_USART2_UART_Init+0x58>)
 80027d8:	f004 f906 	bl	80069e8 <HAL_UART_Init>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80027e2:	f7fe fec1 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000ce0 	.word	0x20000ce0
 80027f0:	40004400 	.word	0x40004400

080027f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b09e      	sub	sp, #120	@ 0x78
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800280c:	f107 0310 	add.w	r3, r7, #16
 8002810:	2254      	movs	r2, #84	@ 0x54
 8002812:	2100      	movs	r1, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f008 fa59 	bl	800accc <memset>
  if(uartHandle->Instance==USART2)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a1f      	ldr	r2, [pc, #124]	@ (800289c <HAL_UART_MspInit+0xa8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d136      	bne.n	8002892 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002824:	2302      	movs	r3, #2
 8002826:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002828:	2300      	movs	r3, #0
 800282a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800282c:	f107 0310 	add.w	r3, r7, #16
 8002830:	4618      	mov	r0, r3
 8002832:	f001 fe27 	bl	8004484 <HAL_RCCEx_PeriphCLKConfig>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800283c:	f7fe fe94 	bl	8001568 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002840:	4b17      	ldr	r3, [pc, #92]	@ (80028a0 <HAL_UART_MspInit+0xac>)
 8002842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002844:	4a16      	ldr	r2, [pc, #88]	@ (80028a0 <HAL_UART_MspInit+0xac>)
 8002846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800284a:	6593      	str	r3, [r2, #88]	@ 0x58
 800284c:	4b14      	ldr	r3, [pc, #80]	@ (80028a0 <HAL_UART_MspInit+0xac>)
 800284e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002858:	4b11      	ldr	r3, [pc, #68]	@ (80028a0 <HAL_UART_MspInit+0xac>)
 800285a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285c:	4a10      	ldr	r2, [pc, #64]	@ (80028a0 <HAL_UART_MspInit+0xac>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002864:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <HAL_UART_MspInit+0xac>)
 8002866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002870:	230c      	movs	r3, #12
 8002872:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002874:	2302      	movs	r3, #2
 8002876:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287c:	2303      	movs	r3, #3
 800287e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002880:	2307      	movs	r3, #7
 8002882:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002884:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002888:	4619      	mov	r1, r3
 800288a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800288e:	f000 fd49 	bl	8003324 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002892:	bf00      	nop
 8002894:	3778      	adds	r7, #120	@ 0x78
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40004400 	.word	0x40004400
 80028a0:	40021000 	.word	0x40021000

080028a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80028a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028a8:	f7ff fdae 	bl	8002408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028ac:	480c      	ldr	r0, [pc, #48]	@ (80028e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80028ae:	490d      	ldr	r1, [pc, #52]	@ (80028e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028b0:	4a0d      	ldr	r2, [pc, #52]	@ (80028e8 <LoopForever+0xe>)
  movs r3, #0
 80028b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b4:	e002      	b.n	80028bc <LoopCopyDataInit>

080028b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ba:	3304      	adds	r3, #4

080028bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c0:	d3f9      	bcc.n	80028b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028c2:	4a0a      	ldr	r2, [pc, #40]	@ (80028ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80028c4:	4c0a      	ldr	r4, [pc, #40]	@ (80028f0 <LoopForever+0x16>)
  movs r3, #0
 80028c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028c8:	e001      	b.n	80028ce <LoopFillZerobss>

080028ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028cc:	3204      	adds	r2, #4

080028ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d0:	d3fb      	bcc.n	80028ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028d2:	f008 faa9 	bl	800ae28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028d6:	f7fe fdc3 	bl	8001460 <main>

080028da <LoopForever>:

LoopForever:
    b LoopForever
 80028da:	e7fe      	b.n	80028da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80028dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80028e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028e4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80028e8:	0800d770 	.word	0x0800d770
  ldr r2, =_sbss
 80028ec:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80028f0:	20002858 	.word	0x20002858

080028f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028f4:	e7fe      	b.n	80028f4 <ADC1_IRQHandler>

080028f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002900:	2003      	movs	r0, #3
 8002902:	f000 fcda 	bl	80032ba <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002906:	200f      	movs	r0, #15
 8002908:	f7ff fc32 	bl	8002170 <HAL_InitTick>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	71fb      	strb	r3, [r7, #7]
 8002916:	e001      	b.n	800291c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002918:	f7ff fc02 	bl	8002120 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800291c:	79fb      	ldrb	r3, [r7, #7]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800292c:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <HAL_IncTick+0x20>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	4b06      	ldr	r3, [pc, #24]	@ (800294c <HAL_IncTick+0x24>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4413      	add	r3, r2
 8002938:	4a04      	ldr	r2, [pc, #16]	@ (800294c <HAL_IncTick+0x24>)
 800293a:	6013      	str	r3, [r2, #0]
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	20000008 	.word	0x20000008
 800294c:	20000d68 	.word	0x20000d68

08002950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return uwTick;
 8002954:	4b03      	ldr	r3, [pc, #12]	@ (8002964 <HAL_GetTick+0x14>)
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20000d68 	.word	0x20000d68

08002968 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e0ed      	b.n	8002b56 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d102      	bne.n	800298c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fe fabc 	bl	8000f04 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800299c:	f7ff ffd8 	bl	8002950 <HAL_GetTick>
 80029a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029a2:	e012      	b.n	80029ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029a4:	f7ff ffd4 	bl	8002950 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b0a      	cmp	r3, #10
 80029b0:	d90b      	bls.n	80029ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2205      	movs	r2, #5
 80029c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0c5      	b.n	8002b56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0e5      	beq.n	80029a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0202 	bic.w	r2, r2, #2
 80029e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029e8:	f7ff ffb2 	bl	8002950 <HAL_GetTick>
 80029ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80029ee:	e012      	b.n	8002a16 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029f0:	f7ff ffae 	bl	8002950 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b0a      	cmp	r3, #10
 80029fc:	d90b      	bls.n	8002a16 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a02:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2205      	movs	r2, #5
 8002a0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e09f      	b.n	8002b56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e5      	bne.n	80029f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	7e1b      	ldrb	r3, [r3, #24]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d108      	bne.n	8002a3e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	e007      	b.n	8002a4e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	7e5b      	ldrb	r3, [r3, #25]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d108      	bne.n	8002a68 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e007      	b.n	8002a78 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a76:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	7e9b      	ldrb	r3, [r3, #26]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d108      	bne.n	8002a92 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0220 	orr.w	r2, r2, #32
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	e007      	b.n	8002aa2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0220 	bic.w	r2, r2, #32
 8002aa0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	7edb      	ldrb	r3, [r3, #27]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d108      	bne.n	8002abc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0210 	bic.w	r2, r2, #16
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	e007      	b.n	8002acc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0210 	orr.w	r2, r2, #16
 8002aca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7f1b      	ldrb	r3, [r3, #28]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d108      	bne.n	8002ae6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0208 	orr.w	r2, r2, #8
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	e007      	b.n	8002af6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0208 	bic.w	r2, r2, #8
 8002af4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	7f5b      	ldrb	r3, [r3, #29]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d108      	bne.n	8002b10 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0204 	orr.w	r2, r2, #4
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	e007      	b.n	8002b20 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0204 	bic.w	r2, r2, #4
 8002b1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	ea42 0103 	orr.w	r1, r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	1e5a      	subs	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b087      	sub	sp, #28
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b74:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002b76:	7cfb      	ldrb	r3, [r7, #19]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d003      	beq.n	8002b84 <HAL_CAN_ConfigFilter+0x26>
 8002b7c:	7cfb      	ldrb	r3, [r7, #19]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	f040 80aa 	bne.w	8002cd8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002b8a:	f043 0201 	orr.w	r2, r3, #1
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	f003 031f 	and.w	r3, r3, #31
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	401a      	ands	r2, r3
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d123      	bne.n	8002c06 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	401a      	ands	r2, r3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002be0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	3248      	adds	r2, #72	@ 0x48
 8002be6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bfa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bfc:	6979      	ldr	r1, [r7, #20]
 8002bfe:	3348      	adds	r3, #72	@ 0x48
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	440b      	add	r3, r1
 8002c04:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d122      	bne.n	8002c54 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c2e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	3248      	adds	r2, #72	@ 0x48
 8002c34:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c48:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c4a:	6979      	ldr	r1, [r7, #20]
 8002c4c:	3348      	adds	r3, #72	@ 0x48
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	440b      	add	r3, r1
 8002c52:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d109      	bne.n	8002c70 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	43db      	mvns	r3, r3
 8002c66:	401a      	ands	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002c6e:	e007      	b.n	8002c80 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d109      	bne.n	8002c9c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	401a      	ands	r2, r3
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002c9a:	e007      	b.n	8002cac <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d107      	bne.n	8002cc4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002cca:	f023 0201 	bic.w	r2, r3, #1
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	e006      	b.n	8002ce6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
  }
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d12e      	bne.n	8002d64 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0201 	bic.w	r2, r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d1e:	f7ff fe17 	bl	8002950 <HAL_GetTick>
 8002d22:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d24:	e012      	b.n	8002d4c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d26:	f7ff fe13 	bl	8002950 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b0a      	cmp	r3, #10
 8002d32:	d90b      	bls.n	8002d4c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d38:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2205      	movs	r2, #5
 8002d44:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e012      	b.n	8002d72 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1e5      	bne.n	8002d26 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	e006      	b.n	8002d72 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
  }
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b089      	sub	sp, #36	@ 0x24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d98:	7ffb      	ldrb	r3, [r7, #31]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d003      	beq.n	8002da6 <HAL_CAN_AddTxMessage+0x2c>
 8002d9e:	7ffb      	ldrb	r3, [r7, #31]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	f040 80ad 	bne.w	8002f00 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10a      	bne.n	8002dc6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d105      	bne.n	8002dc6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 8095 	beq.w	8002ef0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	0e1b      	lsrs	r3, r3, #24
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10d      	bne.n	8002dfe <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002dec:	68f9      	ldr	r1, [r7, #12]
 8002dee:	6809      	ldr	r1, [r1, #0]
 8002df0:	431a      	orrs	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	3318      	adds	r3, #24
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	440b      	add	r3, r1
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	e00f      	b.n	8002e1e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e08:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e0e:	68f9      	ldr	r1, [r7, #12]
 8002e10:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002e12:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	3318      	adds	r3, #24
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	440b      	add	r3, r1
 8002e1c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6819      	ldr	r1, [r3, #0]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	3318      	adds	r3, #24
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3304      	adds	r3, #4
 8002e30:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	7d1b      	ldrb	r3, [r3, #20]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d111      	bne.n	8002e5e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	3318      	adds	r3, #24
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	4413      	add	r3, r2
 8002e46:	3304      	adds	r3, #4
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	6811      	ldr	r1, [r2, #0]
 8002e4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	3318      	adds	r3, #24
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	440b      	add	r3, r1
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3307      	adds	r3, #7
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	061a      	lsls	r2, r3, #24
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3306      	adds	r3, #6
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	041b      	lsls	r3, r3, #16
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3305      	adds	r3, #5
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	021b      	lsls	r3, r3, #8
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	3204      	adds	r2, #4
 8002e7e:	7812      	ldrb	r2, [r2, #0]
 8002e80:	4610      	mov	r0, r2
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	6811      	ldr	r1, [r2, #0]
 8002e86:	ea43 0200 	orr.w	r2, r3, r0
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	440b      	add	r3, r1
 8002e90:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002e94:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3303      	adds	r3, #3
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	061a      	lsls	r2, r3, #24
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3302      	adds	r3, #2
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	041b      	lsls	r3, r3, #16
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	021b      	lsls	r3, r3, #8
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	7812      	ldrb	r2, [r2, #0]
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	6811      	ldr	r1, [r2, #0]
 8002ebc:	ea43 0200 	orr.w	r2, r3, r0
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	440b      	add	r3, r1
 8002ec6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002eca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	3318      	adds	r3, #24
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	4413      	add	r3, r2
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	6811      	ldr	r1, [r2, #0]
 8002ede:	f043 0201 	orr.w	r2, r3, #1
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	3318      	adds	r3, #24
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	440b      	add	r3, r1
 8002eea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	e00e      	b.n	8002f0e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e006      	b.n	8002f0e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f04:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
  }
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3724      	adds	r7, #36	@ 0x24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b087      	sub	sp, #28
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
 8002f26:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f2e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f30:	7dfb      	ldrb	r3, [r7, #23]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d003      	beq.n	8002f3e <HAL_CAN_GetRxMessage+0x24>
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	f040 8103 	bne.w	8003144 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10e      	bne.n	8002f62 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d116      	bne.n	8002f80 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f56:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e0f7      	b.n	8003152 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d107      	bne.n	8002f80 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f74:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0e8      	b.n	8003152 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	331b      	adds	r3, #27
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	4413      	add	r3, r2
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0204 	and.w	r2, r3, #4
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	331b      	adds	r3, #27
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	4413      	add	r3, r2
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	0d5b      	lsrs	r3, r3, #21
 8002fae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	e00b      	b.n	8002fd0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	331b      	adds	r3, #27
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	4413      	add	r3, r2
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	08db      	lsrs	r3, r3, #3
 8002fc8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	331b      	adds	r3, #27
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	4413      	add	r3, r2
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0202 	and.w	r2, r3, #2
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	331b      	adds	r3, #27
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2208      	movs	r2, #8
 8003002:	611a      	str	r2, [r3, #16]
 8003004:	e00b      	b.n	800301e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	331b      	adds	r3, #27
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	4413      	add	r3, r2
 8003012:	3304      	adds	r3, #4
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 020f 	and.w	r2, r3, #15
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	331b      	adds	r3, #27
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	4413      	add	r3, r2
 800302a:	3304      	adds	r3, #4
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	0a1b      	lsrs	r3, r3, #8
 8003030:	b2da      	uxtb	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	331b      	adds	r3, #27
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	4413      	add	r3, r2
 8003042:	3304      	adds	r3, #4
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	0c1b      	lsrs	r3, r3, #16
 8003048:	b29a      	uxth	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	4413      	add	r3, r2
 8003058:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	b2da      	uxtb	r2, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	4413      	add	r3, r2
 800306e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	0a1a      	lsrs	r2, r3, #8
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	3301      	adds	r3, #1
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	4413      	add	r3, r2
 8003088:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	0c1a      	lsrs	r2, r3, #16
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	3302      	adds	r3, #2
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	0e1a      	lsrs	r2, r3, #24
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	3303      	adds	r3, #3
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	3304      	adds	r3, #4
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	0a1a      	lsrs	r2, r3, #8
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	3305      	adds	r3, #5
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	0c1a      	lsrs	r2, r3, #16
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	3306      	adds	r3, #6
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	4413      	add	r3, r2
 8003108:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	0e1a      	lsrs	r2, r3, #24
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	3307      	adds	r3, #7
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d108      	bne.n	8003130 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0220 	orr.w	r2, r2, #32
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	e007      	b.n	8003140 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691a      	ldr	r2, [r3, #16]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0220 	orr.w	r2, r2, #32
 800313e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	e006      	b.n	8003152 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003148:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
  }
}
 8003152:	4618      	mov	r0, r3
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003170:	4b0c      	ldr	r3, [pc, #48]	@ (80031a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800317c:	4013      	ands	r3, r2
 800317e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003188:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800318c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003192:	4a04      	ldr	r2, [pc, #16]	@ (80031a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	60d3      	str	r3, [r2, #12]
}
 8003198:	bf00      	nop
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031ac:	4b04      	ldr	r3, [pc, #16]	@ (80031c0 <__NVIC_GetPriorityGrouping+0x18>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	0a1b      	lsrs	r3, r3, #8
 80031b2:	f003 0307 	and.w	r3, r3, #7
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	e000ed00 	.word	0xe000ed00

080031c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	db0b      	blt.n	80031ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	f003 021f 	and.w	r2, r3, #31
 80031dc:	4907      	ldr	r1, [pc, #28]	@ (80031fc <__NVIC_EnableIRQ+0x38>)
 80031de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	2001      	movs	r0, #1
 80031e6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	e000e100 	.word	0xe000e100

08003200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	6039      	str	r1, [r7, #0]
 800320a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003210:	2b00      	cmp	r3, #0
 8003212:	db0a      	blt.n	800322a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	b2da      	uxtb	r2, r3
 8003218:	490c      	ldr	r1, [pc, #48]	@ (800324c <__NVIC_SetPriority+0x4c>)
 800321a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321e:	0112      	lsls	r2, r2, #4
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	440b      	add	r3, r1
 8003224:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003228:	e00a      	b.n	8003240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	b2da      	uxtb	r2, r3
 800322e:	4908      	ldr	r1, [pc, #32]	@ (8003250 <__NVIC_SetPriority+0x50>)
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	3b04      	subs	r3, #4
 8003238:	0112      	lsls	r2, r2, #4
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	440b      	add	r3, r1
 800323e:	761a      	strb	r2, [r3, #24]
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	e000e100 	.word	0xe000e100
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003254:	b480      	push	{r7}
 8003256:	b089      	sub	sp, #36	@ 0x24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f1c3 0307 	rsb	r3, r3, #7
 800326e:	2b04      	cmp	r3, #4
 8003270:	bf28      	it	cs
 8003272:	2304      	movcs	r3, #4
 8003274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	3304      	adds	r3, #4
 800327a:	2b06      	cmp	r3, #6
 800327c:	d902      	bls.n	8003284 <NVIC_EncodePriority+0x30>
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	3b03      	subs	r3, #3
 8003282:	e000      	b.n	8003286 <NVIC_EncodePriority+0x32>
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003288:	f04f 32ff 	mov.w	r2, #4294967295
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43da      	mvns	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	401a      	ands	r2, r3
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800329c:	f04f 31ff 	mov.w	r1, #4294967295
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	fa01 f303 	lsl.w	r3, r1, r3
 80032a6:	43d9      	mvns	r1, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ac:	4313      	orrs	r3, r2
         );
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3724      	adds	r7, #36	@ 0x24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff ff4c 	bl	8003160 <__NVIC_SetPriorityGrouping>
}
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032e2:	f7ff ff61 	bl	80031a8 <__NVIC_GetPriorityGrouping>
 80032e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	68b9      	ldr	r1, [r7, #8]
 80032ec:	6978      	ldr	r0, [r7, #20]
 80032ee:	f7ff ffb1 	bl	8003254 <NVIC_EncodePriority>
 80032f2:	4602      	mov	r2, r0
 80032f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff ff80 	bl	8003200 <__NVIC_SetPriority>
}
 8003300:	bf00      	nop
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff ff54 	bl	80031c4 <__NVIC_EnableIRQ>
}
 800331c:	bf00      	nop
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003332:	e148      	b.n	80035c6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	2101      	movs	r1, #1
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	fa01 f303 	lsl.w	r3, r1, r3
 8003340:	4013      	ands	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 813a 	beq.w	80035c0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	2b01      	cmp	r3, #1
 8003356:	d005      	beq.n	8003364 <HAL_GPIO_Init+0x40>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d130      	bne.n	80033c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	2203      	movs	r2, #3
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4013      	ands	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800339a:	2201      	movs	r2, #1
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	091b      	lsrs	r3, r3, #4
 80033b0:	f003 0201 	and.w	r2, r3, #1
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d017      	beq.n	8003402 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	2203      	movs	r2, #3
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4013      	ands	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d123      	bne.n	8003456 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	08da      	lsrs	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3208      	adds	r2, #8
 8003416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800341a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	220f      	movs	r2, #15
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4013      	ands	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	691a      	ldr	r2, [r3, #16]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	08da      	lsrs	r2, r3, #3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3208      	adds	r2, #8
 8003450:	6939      	ldr	r1, [r7, #16]
 8003452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	2203      	movs	r2, #3
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4013      	ands	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f003 0203 	and.w	r2, r3, #3
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 8094 	beq.w	80035c0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003498:	4b52      	ldr	r3, [pc, #328]	@ (80035e4 <HAL_GPIO_Init+0x2c0>)
 800349a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800349c:	4a51      	ldr	r2, [pc, #324]	@ (80035e4 <HAL_GPIO_Init+0x2c0>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80034a4:	4b4f      	ldr	r3, [pc, #316]	@ (80035e4 <HAL_GPIO_Init+0x2c0>)
 80034a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034b0:	4a4d      	ldr	r2, [pc, #308]	@ (80035e8 <HAL_GPIO_Init+0x2c4>)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	089b      	lsrs	r3, r3, #2
 80034b6:	3302      	adds	r3, #2
 80034b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	220f      	movs	r2, #15
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4013      	ands	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80034da:	d00d      	beq.n	80034f8 <HAL_GPIO_Init+0x1d4>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a43      	ldr	r2, [pc, #268]	@ (80035ec <HAL_GPIO_Init+0x2c8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d007      	beq.n	80034f4 <HAL_GPIO_Init+0x1d0>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a42      	ldr	r2, [pc, #264]	@ (80035f0 <HAL_GPIO_Init+0x2cc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d101      	bne.n	80034f0 <HAL_GPIO_Init+0x1cc>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e004      	b.n	80034fa <HAL_GPIO_Init+0x1d6>
 80034f0:	2307      	movs	r3, #7
 80034f2:	e002      	b.n	80034fa <HAL_GPIO_Init+0x1d6>
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <HAL_GPIO_Init+0x1d6>
 80034f8:	2300      	movs	r3, #0
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	f002 0203 	and.w	r2, r2, #3
 8003500:	0092      	lsls	r2, r2, #2
 8003502:	4093      	lsls	r3, r2
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800350a:	4937      	ldr	r1, [pc, #220]	@ (80035e8 <HAL_GPIO_Init+0x2c4>)
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	089b      	lsrs	r3, r3, #2
 8003510:	3302      	adds	r3, #2
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003518:	4b36      	ldr	r3, [pc, #216]	@ (80035f4 <HAL_GPIO_Init+0x2d0>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	43db      	mvns	r3, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4013      	ands	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800353c:	4a2d      	ldr	r2, [pc, #180]	@ (80035f4 <HAL_GPIO_Init+0x2d0>)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003542:	4b2c      	ldr	r3, [pc, #176]	@ (80035f4 <HAL_GPIO_Init+0x2d0>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	43db      	mvns	r3, r3
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4013      	ands	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003566:	4a23      	ldr	r2, [pc, #140]	@ (80035f4 <HAL_GPIO_Init+0x2d0>)
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800356c:	4b21      	ldr	r3, [pc, #132]	@ (80035f4 <HAL_GPIO_Init+0x2d0>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	43db      	mvns	r3, r3
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4013      	ands	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003590:	4a18      	ldr	r2, [pc, #96]	@ (80035f4 <HAL_GPIO_Init+0x2d0>)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003596:	4b17      	ldr	r3, [pc, #92]	@ (80035f4 <HAL_GPIO_Init+0x2d0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	43db      	mvns	r3, r3
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4013      	ands	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035ba:	4a0e      	ldr	r2, [pc, #56]	@ (80035f4 <HAL_GPIO_Init+0x2d0>)
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	3301      	adds	r3, #1
 80035c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f47f aeaf 	bne.w	8003334 <HAL_GPIO_Init+0x10>
  }
}
 80035d6:	bf00      	nop
 80035d8:	bf00      	nop
 80035da:	371c      	adds	r7, #28
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40010000 	.word	0x40010000
 80035ec:	48000400 	.word	0x48000400
 80035f0:	48000800 	.word	0x48000800
 80035f4:	40010400 	.word	0x40010400

080035f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	807b      	strh	r3, [r7, #2]
 8003604:	4613      	mov	r3, r2
 8003606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003608:	787b      	ldrb	r3, [r7, #1]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800360e:	887a      	ldrh	r2, [r7, #2]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003614:	e002      	b.n	800361c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003616:	887a      	ldrh	r2, [r7, #2]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800362c:	4b04      	ldr	r3, [pc, #16]	@ (8003640 <HAL_PWREx_GetVoltageRange+0x18>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003634:	4618      	mov	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40007000 	.word	0x40007000

08003644 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003652:	d130      	bne.n	80036b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003654:	4b23      	ldr	r3, [pc, #140]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800365c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003660:	d038      	beq.n	80036d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003662:	4b20      	ldr	r3, [pc, #128]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800366a:	4a1e      	ldr	r2, [pc, #120]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800366c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003670:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003672:	4b1d      	ldr	r3, [pc, #116]	@ (80036e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2232      	movs	r2, #50	@ 0x32
 8003678:	fb02 f303 	mul.w	r3, r2, r3
 800367c:	4a1b      	ldr	r2, [pc, #108]	@ (80036ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	0c9b      	lsrs	r3, r3, #18
 8003684:	3301      	adds	r3, #1
 8003686:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003688:	e002      	b.n	8003690 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	3b01      	subs	r3, #1
 800368e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003690:	4b14      	ldr	r3, [pc, #80]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800369c:	d102      	bne.n	80036a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1f2      	bne.n	800368a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036a4:	4b0f      	ldr	r3, [pc, #60]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036b0:	d110      	bne.n	80036d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e00f      	b.n	80036d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036b6:	4b0b      	ldr	r3, [pc, #44]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036c2:	d007      	beq.n	80036d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036c4:	4b07      	ldr	r3, [pc, #28]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036cc:	4a05      	ldr	r2, [pc, #20]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40007000 	.word	0x40007000
 80036e8:	20000000 	.word	0x20000000
 80036ec:	431bde83 	.word	0x431bde83

080036f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d102      	bne.n	8003704 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	f000 bc02 	b.w	8003f08 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003704:	4b96      	ldr	r3, [pc, #600]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 030c 	and.w	r3, r3, #12
 800370c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800370e:	4b94      	ldr	r3, [pc, #592]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80e4 	beq.w	80038ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <HAL_RCC_OscConfig+0x4c>
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b0c      	cmp	r3, #12
 8003730:	f040 808b 	bne.w	800384a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2b01      	cmp	r3, #1
 8003738:	f040 8087 	bne.w	800384a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800373c:	4b88      	ldr	r3, [pc, #544]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_RCC_OscConfig+0x64>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e3d9      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1a      	ldr	r2, [r3, #32]
 8003758:	4b81      	ldr	r3, [pc, #516]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b00      	cmp	r3, #0
 8003762:	d004      	beq.n	800376e <HAL_RCC_OscConfig+0x7e>
 8003764:	4b7e      	ldr	r3, [pc, #504]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800376c:	e005      	b.n	800377a <HAL_RCC_OscConfig+0x8a>
 800376e:	4b7c      	ldr	r3, [pc, #496]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 8003770:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800377a:	4293      	cmp	r3, r2
 800377c:	d223      	bcs.n	80037c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fe1e 	bl	80043c4 <RCC_SetFlashLatencyFromMSIRange>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e3ba      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003792:	4b73      	ldr	r3, [pc, #460]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a72      	ldr	r2, [pc, #456]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 8003798:	f043 0308 	orr.w	r3, r3, #8
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	4b70      	ldr	r3, [pc, #448]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	496d      	ldr	r1, [pc, #436]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037b0:	4b6b      	ldr	r3, [pc, #428]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	021b      	lsls	r3, r3, #8
 80037be:	4968      	ldr	r1, [pc, #416]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	604b      	str	r3, [r1, #4]
 80037c4:	e025      	b.n	8003812 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037c6:	4b66      	ldr	r3, [pc, #408]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a65      	ldr	r2, [pc, #404]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 80037cc:	f043 0308 	orr.w	r3, r3, #8
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	4b63      	ldr	r3, [pc, #396]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	4960      	ldr	r1, [pc, #384]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	495b      	ldr	r1, [pc, #364]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fdde 	bl	80043c4 <RCC_SetFlashLatencyFromMSIRange>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e37a      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003812:	f000 fcb5 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 8003816:	4602      	mov	r2, r0
 8003818:	4b51      	ldr	r3, [pc, #324]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	4950      	ldr	r1, [pc, #320]	@ (8003964 <HAL_RCC_OscConfig+0x274>)
 8003824:	5ccb      	ldrb	r3, [r1, r3]
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	fa22 f303 	lsr.w	r3, r2, r3
 800382e:	4a4e      	ldr	r2, [pc, #312]	@ (8003968 <HAL_RCC_OscConfig+0x278>)
 8003830:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003832:	4b4e      	ldr	r3, [pc, #312]	@ (800396c <HAL_RCC_OscConfig+0x27c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe fc9a 	bl	8002170 <HAL_InitTick>
 800383c:	4603      	mov	r3, r0
 800383e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d052      	beq.n	80038ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003846:	7bfb      	ldrb	r3, [r7, #15]
 8003848:	e35e      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d032      	beq.n	80038b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003852:	4b43      	ldr	r3, [pc, #268]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a42      	ldr	r2, [pc, #264]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800385e:	f7ff f877 	bl	8002950 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003866:	f7ff f873 	bl	8002950 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e347      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003878:	4b39      	ldr	r3, [pc, #228]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003884:	4b36      	ldr	r3, [pc, #216]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a35      	ldr	r2, [pc, #212]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 800388a:	f043 0308 	orr.w	r3, r3, #8
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	4b33      	ldr	r3, [pc, #204]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	4930      	ldr	r1, [pc, #192]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	492b      	ldr	r1, [pc, #172]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	604b      	str	r3, [r1, #4]
 80038b6:	e01a      	b.n	80038ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038b8:	4b29      	ldr	r3, [pc, #164]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a28      	ldr	r2, [pc, #160]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 80038be:	f023 0301 	bic.w	r3, r3, #1
 80038c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038c4:	f7ff f844 	bl	8002950 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038cc:	f7ff f840 	bl	8002950 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e314      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038de:	4b20      	ldr	r3, [pc, #128]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x1dc>
 80038ea:	e000      	b.n	80038ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d073      	beq.n	80039e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d005      	beq.n	800390c <HAL_RCC_OscConfig+0x21c>
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	2b0c      	cmp	r3, #12
 8003904:	d10e      	bne.n	8003924 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d10b      	bne.n	8003924 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390c:	4b14      	ldr	r3, [pc, #80]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d063      	beq.n	80039e0 <HAL_RCC_OscConfig+0x2f0>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d15f      	bne.n	80039e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e2f1      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800392c:	d106      	bne.n	800393c <HAL_RCC_OscConfig+0x24c>
 800392e:	4b0c      	ldr	r3, [pc, #48]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a0b      	ldr	r2, [pc, #44]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 8003934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	e025      	b.n	8003988 <HAL_RCC_OscConfig+0x298>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003944:	d114      	bne.n	8003970 <HAL_RCC_OscConfig+0x280>
 8003946:	4b06      	ldr	r3, [pc, #24]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a05      	ldr	r2, [pc, #20]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 800394c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	4b03      	ldr	r3, [pc, #12]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a02      	ldr	r2, [pc, #8]	@ (8003960 <HAL_RCC_OscConfig+0x270>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	e013      	b.n	8003988 <HAL_RCC_OscConfig+0x298>
 8003960:	40021000 	.word	0x40021000
 8003964:	0800d3a4 	.word	0x0800d3a4
 8003968:	20000000 	.word	0x20000000
 800396c:	20000004 	.word	0x20000004
 8003970:	4ba0      	ldr	r3, [pc, #640]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a9f      	ldr	r2, [pc, #636]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	4b9d      	ldr	r3, [pc, #628]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a9c      	ldr	r2, [pc, #624]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003982:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d013      	beq.n	80039b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7fe ffde 	bl	8002950 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003998:	f7fe ffda 	bl	8002950 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b64      	cmp	r3, #100	@ 0x64
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e2ae      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039aa:	4b92      	ldr	r3, [pc, #584]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCC_OscConfig+0x2a8>
 80039b6:	e014      	b.n	80039e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b8:	f7fe ffca 	bl	8002950 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c0:	f7fe ffc6 	bl	8002950 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b64      	cmp	r3, #100	@ 0x64
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e29a      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039d2:	4b88      	ldr	r3, [pc, #544]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0x2d0>
 80039de:	e000      	b.n	80039e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d060      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_OscConfig+0x310>
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	2b0c      	cmp	r3, #12
 80039f8:	d119      	bne.n	8003a2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d116      	bne.n	8003a2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a00:	4b7c      	ldr	r3, [pc, #496]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_OscConfig+0x328>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e277      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a18:	4b76      	ldr	r3, [pc, #472]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	061b      	lsls	r3, r3, #24
 8003a26:	4973      	ldr	r1, [pc, #460]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a2c:	e040      	b.n	8003ab0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d023      	beq.n	8003a7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a36:	4b6f      	ldr	r3, [pc, #444]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a6e      	ldr	r2, [pc, #440]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a42:	f7fe ff85 	bl	8002950 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4a:	f7fe ff81 	bl	8002950 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e255      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a5c:	4b65      	ldr	r3, [pc, #404]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a68:	4b62      	ldr	r3, [pc, #392]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	061b      	lsls	r3, r3, #24
 8003a76:	495f      	ldr	r1, [pc, #380]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	604b      	str	r3, [r1, #4]
 8003a7c:	e018      	b.n	8003ab0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7e:	4b5d      	ldr	r3, [pc, #372]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a5c      	ldr	r2, [pc, #368]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003a84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8a:	f7fe ff61 	bl	8002950 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a92:	f7fe ff5d 	bl	8002950 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e231      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aa4:	4b53      	ldr	r3, [pc, #332]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1f0      	bne.n	8003a92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d03c      	beq.n	8003b36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d01c      	beq.n	8003afe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ac4:	4b4b      	ldr	r3, [pc, #300]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aca:	4a4a      	ldr	r2, [pc, #296]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad4:	f7fe ff3c 	bl	8002950 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003adc:	f7fe ff38 	bl	8002950 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e20c      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003aee:	4b41      	ldr	r3, [pc, #260]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0ef      	beq.n	8003adc <HAL_RCC_OscConfig+0x3ec>
 8003afc:	e01b      	b.n	8003b36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003afe:	4b3d      	ldr	r3, [pc, #244]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b04:	4a3b      	ldr	r2, [pc, #236]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003b06:	f023 0301 	bic.w	r3, r3, #1
 8003b0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0e:	f7fe ff1f 	bl	8002950 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b16:	f7fe ff1b 	bl	8002950 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e1ef      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b28:	4b32      	ldr	r3, [pc, #200]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1ef      	bne.n	8003b16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 80a6 	beq.w	8003c90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b44:	2300      	movs	r3, #0
 8003b46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b48:	4b2a      	ldr	r3, [pc, #168]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10d      	bne.n	8003b70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b54:	4b27      	ldr	r3, [pc, #156]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b58:	4a26      	ldr	r2, [pc, #152]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003b5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b60:	4b24      	ldr	r3, [pc, #144]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b70:	4b21      	ldr	r3, [pc, #132]	@ (8003bf8 <HAL_RCC_OscConfig+0x508>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d118      	bne.n	8003bae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8003bf8 <HAL_RCC_OscConfig+0x508>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a1d      	ldr	r2, [pc, #116]	@ (8003bf8 <HAL_RCC_OscConfig+0x508>)
 8003b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b88:	f7fe fee2 	bl	8002950 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b90:	f7fe fede 	bl	8002950 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e1b2      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ba2:	4b15      	ldr	r3, [pc, #84]	@ (8003bf8 <HAL_RCC_OscConfig+0x508>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0f0      	beq.n	8003b90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d108      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x4d8>
 8003bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bc6:	e029      	b.n	8003c1c <HAL_RCC_OscConfig+0x52c>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b05      	cmp	r3, #5
 8003bce:	d115      	bne.n	8003bfc <HAL_RCC_OscConfig+0x50c>
 8003bd0:	4b08      	ldr	r3, [pc, #32]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd6:	4a07      	ldr	r2, [pc, #28]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003bd8:	f043 0304 	orr.w	r3, r3, #4
 8003bdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003be0:	4b04      	ldr	r3, [pc, #16]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be6:	4a03      	ldr	r2, [pc, #12]	@ (8003bf4 <HAL_RCC_OscConfig+0x504>)
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bf0:	e014      	b.n	8003c1c <HAL_RCC_OscConfig+0x52c>
 8003bf2:	bf00      	nop
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	40007000 	.word	0x40007000
 8003bfc:	4b9a      	ldr	r3, [pc, #616]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c02:	4a99      	ldr	r2, [pc, #612]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003c04:	f023 0301 	bic.w	r3, r3, #1
 8003c08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c0c:	4b96      	ldr	r3, [pc, #600]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c12:	4a95      	ldr	r2, [pc, #596]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003c14:	f023 0304 	bic.w	r3, r3, #4
 8003c18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d016      	beq.n	8003c52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c24:	f7fe fe94 	bl	8002950 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2c:	f7fe fe90 	bl	8002950 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e162      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c42:	4b89      	ldr	r3, [pc, #548]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0ed      	beq.n	8003c2c <HAL_RCC_OscConfig+0x53c>
 8003c50:	e015      	b.n	8003c7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c52:	f7fe fe7d 	bl	8002950 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c58:	e00a      	b.n	8003c70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5a:	f7fe fe79 	bl	8002950 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e14b      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c70:	4b7d      	ldr	r3, [pc, #500]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1ed      	bne.n	8003c5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c7e:	7ffb      	ldrb	r3, [r7, #31]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d105      	bne.n	8003c90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c84:	4b78      	ldr	r3, [pc, #480]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c88:	4a77      	ldr	r2, [pc, #476]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003c8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c8e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0320 	and.w	r3, r3, #32
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d03c      	beq.n	8003d16 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01c      	beq.n	8003cde <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ca4:	4b70      	ldr	r3, [pc, #448]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003caa:	4a6f      	ldr	r2, [pc, #444]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb4:	f7fe fe4c 	bl	8002950 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cbc:	f7fe fe48 	bl	8002950 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e11c      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cce:	4b66      	ldr	r3, [pc, #408]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0ef      	beq.n	8003cbc <HAL_RCC_OscConfig+0x5cc>
 8003cdc:	e01b      	b.n	8003d16 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cde:	4b62      	ldr	r3, [pc, #392]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ce4:	4a60      	ldr	r2, [pc, #384]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003ce6:	f023 0301 	bic.w	r3, r3, #1
 8003cea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cee:	f7fe fe2f 	bl	8002950 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cf6:	f7fe fe2b 	bl	8002950 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e0ff      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d08:	4b57      	ldr	r3, [pc, #348]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1ef      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 80f3 	beq.w	8003f06 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	f040 80c9 	bne.w	8003ebc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d2a:	4b4f      	ldr	r3, [pc, #316]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f003 0203 	and.w	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d12c      	bne.n	8003d98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d123      	bne.n	8003d98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d5a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d11b      	bne.n	8003d98 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d113      	bne.n	8003d98 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7a:	085b      	lsrs	r3, r3, #1
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d109      	bne.n	8003d98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8e:	085b      	lsrs	r3, r3, #1
 8003d90:	3b01      	subs	r3, #1
 8003d92:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d06b      	beq.n	8003e70 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	2b0c      	cmp	r3, #12
 8003d9c:	d062      	beq.n	8003e64 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d9e:	4b32      	ldr	r3, [pc, #200]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e0ac      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003dae:	4b2e      	ldr	r3, [pc, #184]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a2d      	ldr	r2, [pc, #180]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003db4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003db8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dba:	f7fe fdc9 	bl	8002950 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc2:	f7fe fdc5 	bl	8002950 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e099      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd4:	4b24      	ldr	r3, [pc, #144]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f0      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003de0:	4b21      	ldr	r3, [pc, #132]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	4b21      	ldr	r3, [pc, #132]	@ (8003e6c <HAL_RCC_OscConfig+0x77c>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003df0:	3a01      	subs	r2, #1
 8003df2:	0112      	lsls	r2, r2, #4
 8003df4:	4311      	orrs	r1, r2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003dfa:	0212      	lsls	r2, r2, #8
 8003dfc:	4311      	orrs	r1, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e02:	0852      	lsrs	r2, r2, #1
 8003e04:	3a01      	subs	r2, #1
 8003e06:	0552      	lsls	r2, r2, #21
 8003e08:	4311      	orrs	r1, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003e0e:	0852      	lsrs	r2, r2, #1
 8003e10:	3a01      	subs	r2, #1
 8003e12:	0652      	lsls	r2, r2, #25
 8003e14:	4311      	orrs	r1, r2
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e1a:	06d2      	lsls	r2, r2, #27
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	4912      	ldr	r1, [pc, #72]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e24:	4b10      	ldr	r3, [pc, #64]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a0f      	ldr	r2, [pc, #60]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e30:	4b0d      	ldr	r3, [pc, #52]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	4a0c      	ldr	r2, [pc, #48]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003e36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e3c:	f7fe fd88 	bl	8002950 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e44:	f7fe fd84 	bl	8002950 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e058      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e56:	4b04      	ldr	r3, [pc, #16]	@ (8003e68 <HAL_RCC_OscConfig+0x778>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e62:	e050      	b.n	8003f06 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e04f      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e70:	4b27      	ldr	r3, [pc, #156]	@ (8003f10 <HAL_RCC_OscConfig+0x820>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d144      	bne.n	8003f06 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e7c:	4b24      	ldr	r3, [pc, #144]	@ (8003f10 <HAL_RCC_OscConfig+0x820>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a23      	ldr	r2, [pc, #140]	@ (8003f10 <HAL_RCC_OscConfig+0x820>)
 8003e82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e88:	4b21      	ldr	r3, [pc, #132]	@ (8003f10 <HAL_RCC_OscConfig+0x820>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4a20      	ldr	r2, [pc, #128]	@ (8003f10 <HAL_RCC_OscConfig+0x820>)
 8003e8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e94:	f7fe fd5c 	bl	8002950 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7fe fd58 	bl	8002950 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e02c      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eae:	4b18      	ldr	r3, [pc, #96]	@ (8003f10 <HAL_RCC_OscConfig+0x820>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x7ac>
 8003eba:	e024      	b.n	8003f06 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	2b0c      	cmp	r3, #12
 8003ec0:	d01f      	beq.n	8003f02 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec2:	4b13      	ldr	r3, [pc, #76]	@ (8003f10 <HAL_RCC_OscConfig+0x820>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a12      	ldr	r2, [pc, #72]	@ (8003f10 <HAL_RCC_OscConfig+0x820>)
 8003ec8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ece:	f7fe fd3f 	bl	8002950 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed6:	f7fe fd3b 	bl	8002950 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e00f      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee8:	4b09      	ldr	r3, [pc, #36]	@ (8003f10 <HAL_RCC_OscConfig+0x820>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1f0      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003ef4:	4b06      	ldr	r3, [pc, #24]	@ (8003f10 <HAL_RCC_OscConfig+0x820>)
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	4905      	ldr	r1, [pc, #20]	@ (8003f10 <HAL_RCC_OscConfig+0x820>)
 8003efa:	4b06      	ldr	r3, [pc, #24]	@ (8003f14 <HAL_RCC_OscConfig+0x824>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	60cb      	str	r3, [r1, #12]
 8003f00:	e001      	b.n	8003f06 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3720      	adds	r7, #32
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40021000 	.word	0x40021000
 8003f14:	feeefffc 	.word	0xfeeefffc

08003f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e0e7      	b.n	80040fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f2c:	4b75      	ldr	r3, [pc, #468]	@ (8004104 <HAL_RCC_ClockConfig+0x1ec>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d910      	bls.n	8003f5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3a:	4b72      	ldr	r3, [pc, #456]	@ (8004104 <HAL_RCC_ClockConfig+0x1ec>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 0207 	bic.w	r2, r3, #7
 8003f42:	4970      	ldr	r1, [pc, #448]	@ (8004104 <HAL_RCC_ClockConfig+0x1ec>)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4a:	4b6e      	ldr	r3, [pc, #440]	@ (8004104 <HAL_RCC_ClockConfig+0x1ec>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d001      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0cf      	b.n	80040fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d010      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	4b66      	ldr	r3, [pc, #408]	@ (8004108 <HAL_RCC_ClockConfig+0x1f0>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d908      	bls.n	8003f8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f78:	4b63      	ldr	r3, [pc, #396]	@ (8004108 <HAL_RCC_ClockConfig+0x1f0>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	4960      	ldr	r1, [pc, #384]	@ (8004108 <HAL_RCC_ClockConfig+0x1f0>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d04c      	beq.n	8004030 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d107      	bne.n	8003fae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f9e:	4b5a      	ldr	r3, [pc, #360]	@ (8004108 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d121      	bne.n	8003fee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e0a6      	b.n	80040fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d107      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fb6:	4b54      	ldr	r3, [pc, #336]	@ (8004108 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d115      	bne.n	8003fee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e09a      	b.n	80040fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d107      	bne.n	8003fde <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fce:	4b4e      	ldr	r3, [pc, #312]	@ (8004108 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e08e      	b.n	80040fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fde:	4b4a      	ldr	r3, [pc, #296]	@ (8004108 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e086      	b.n	80040fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fee:	4b46      	ldr	r3, [pc, #280]	@ (8004108 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f023 0203 	bic.w	r2, r3, #3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	4943      	ldr	r1, [pc, #268]	@ (8004108 <HAL_RCC_ClockConfig+0x1f0>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004000:	f7fe fca6 	bl	8002950 <HAL_GetTick>
 8004004:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004006:	e00a      	b.n	800401e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004008:	f7fe fca2 	bl	8002950 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004016:	4293      	cmp	r3, r2
 8004018:	d901      	bls.n	800401e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e06e      	b.n	80040fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401e:	4b3a      	ldr	r3, [pc, #232]	@ (8004108 <HAL_RCC_ClockConfig+0x1f0>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 020c 	and.w	r2, r3, #12
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	429a      	cmp	r2, r3
 800402e:	d1eb      	bne.n	8004008 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d010      	beq.n	800405e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	4b31      	ldr	r3, [pc, #196]	@ (8004108 <HAL_RCC_ClockConfig+0x1f0>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004048:	429a      	cmp	r2, r3
 800404a:	d208      	bcs.n	800405e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800404c:	4b2e      	ldr	r3, [pc, #184]	@ (8004108 <HAL_RCC_ClockConfig+0x1f0>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	492b      	ldr	r1, [pc, #172]	@ (8004108 <HAL_RCC_ClockConfig+0x1f0>)
 800405a:	4313      	orrs	r3, r2
 800405c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800405e:	4b29      	ldr	r3, [pc, #164]	@ (8004104 <HAL_RCC_ClockConfig+0x1ec>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d210      	bcs.n	800408e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406c:	4b25      	ldr	r3, [pc, #148]	@ (8004104 <HAL_RCC_ClockConfig+0x1ec>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f023 0207 	bic.w	r2, r3, #7
 8004074:	4923      	ldr	r1, [pc, #140]	@ (8004104 <HAL_RCC_ClockConfig+0x1ec>)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	4313      	orrs	r3, r2
 800407a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800407c:	4b21      	ldr	r3, [pc, #132]	@ (8004104 <HAL_RCC_ClockConfig+0x1ec>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d001      	beq.n	800408e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e036      	b.n	80040fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	d008      	beq.n	80040ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800409a:	4b1b      	ldr	r3, [pc, #108]	@ (8004108 <HAL_RCC_ClockConfig+0x1f0>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	4918      	ldr	r1, [pc, #96]	@ (8004108 <HAL_RCC_ClockConfig+0x1f0>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d009      	beq.n	80040cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040b8:	4b13      	ldr	r3, [pc, #76]	@ (8004108 <HAL_RCC_ClockConfig+0x1f0>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	4910      	ldr	r1, [pc, #64]	@ (8004108 <HAL_RCC_ClockConfig+0x1f0>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040cc:	f000 f858 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 80040d0:	4602      	mov	r2, r0
 80040d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004108 <HAL_RCC_ClockConfig+0x1f0>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	091b      	lsrs	r3, r3, #4
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	490b      	ldr	r1, [pc, #44]	@ (800410c <HAL_RCC_ClockConfig+0x1f4>)
 80040de:	5ccb      	ldrb	r3, [r1, r3]
 80040e0:	f003 031f 	and.w	r3, r3, #31
 80040e4:	fa22 f303 	lsr.w	r3, r2, r3
 80040e8:	4a09      	ldr	r2, [pc, #36]	@ (8004110 <HAL_RCC_ClockConfig+0x1f8>)
 80040ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040ec:	4b09      	ldr	r3, [pc, #36]	@ (8004114 <HAL_RCC_ClockConfig+0x1fc>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fe f83d 	bl	8002170 <HAL_InitTick>
 80040f6:	4603      	mov	r3, r0
 80040f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80040fa:	7afb      	ldrb	r3, [r7, #11]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40022000 	.word	0x40022000
 8004108:	40021000 	.word	0x40021000
 800410c:	0800d3a4 	.word	0x0800d3a4
 8004110:	20000000 	.word	0x20000000
 8004114:	20000004 	.word	0x20000004

08004118 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08a      	sub	sp, #40	@ 0x28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8004124:	4b15      	ldr	r3, [pc, #84]	@ (800417c <HAL_RCC_MCOConfig+0x64>)
 8004126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004128:	4a14      	ldr	r2, [pc, #80]	@ (800417c <HAL_RCC_MCOConfig+0x64>)
 800412a:	f043 0301 	orr.w	r3, r3, #1
 800412e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004130:	4b12      	ldr	r3, [pc, #72]	@ (800417c <HAL_RCC_MCOConfig+0x64>)
 8004132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 800413c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004142:	2302      	movs	r3, #2
 8004144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004146:	2302      	movs	r3, #2
 8004148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414a:	2300      	movs	r3, #0
 800414c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800414e:	2300      	movs	r3, #0
 8004150:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004152:	f107 0314 	add.w	r3, r7, #20
 8004156:	4619      	mov	r1, r3
 8004158:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800415c:	f7ff f8e2 	bl	8003324 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8004160:	4b06      	ldr	r3, [pc, #24]	@ (800417c <HAL_RCC_MCOConfig+0x64>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	430b      	orrs	r3, r1
 800416e:	4903      	ldr	r1, [pc, #12]	@ (800417c <HAL_RCC_MCOConfig+0x64>)
 8004170:	4313      	orrs	r3, r2
 8004172:	608b      	str	r3, [r1, #8]
}
 8004174:	bf00      	nop
 8004176:	3728      	adds	r7, #40	@ 0x28
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40021000 	.word	0x40021000

08004180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004180:	b480      	push	{r7}
 8004182:	b089      	sub	sp, #36	@ 0x24
 8004184:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	2300      	movs	r3, #0
 800418c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800418e:	4b3e      	ldr	r3, [pc, #248]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x108>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
 8004196:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004198:	4b3b      	ldr	r3, [pc, #236]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x108>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <HAL_RCC_GetSysClockFreq+0x34>
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	2b0c      	cmp	r3, #12
 80041ac:	d121      	bne.n	80041f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d11e      	bne.n	80041f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041b4:	4b34      	ldr	r3, [pc, #208]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x108>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d107      	bne.n	80041d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041c0:	4b31      	ldr	r3, [pc, #196]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x108>)
 80041c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041c6:	0a1b      	lsrs	r3, r3, #8
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	61fb      	str	r3, [r7, #28]
 80041ce:	e005      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x108>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	091b      	lsrs	r3, r3, #4
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041dc:	4a2b      	ldr	r2, [pc, #172]	@ (800428c <HAL_RCC_GetSysClockFreq+0x10c>)
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10d      	bne.n	8004208 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041f0:	e00a      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d102      	bne.n	80041fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041f8:	4b25      	ldr	r3, [pc, #148]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x110>)
 80041fa:	61bb      	str	r3, [r7, #24]
 80041fc:	e004      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	2b08      	cmp	r3, #8
 8004202:	d101      	bne.n	8004208 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004204:	4b23      	ldr	r3, [pc, #140]	@ (8004294 <HAL_RCC_GetSysClockFreq+0x114>)
 8004206:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	2b0c      	cmp	r3, #12
 800420c:	d134      	bne.n	8004278 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800420e:	4b1e      	ldr	r3, [pc, #120]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x108>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d003      	beq.n	8004226 <HAL_RCC_GetSysClockFreq+0xa6>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b03      	cmp	r3, #3
 8004222:	d003      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0xac>
 8004224:	e005      	b.n	8004232 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004226:	4b1a      	ldr	r3, [pc, #104]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x110>)
 8004228:	617b      	str	r3, [r7, #20]
      break;
 800422a:	e005      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800422c:	4b19      	ldr	r3, [pc, #100]	@ (8004294 <HAL_RCC_GetSysClockFreq+0x114>)
 800422e:	617b      	str	r3, [r7, #20]
      break;
 8004230:	e002      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	617b      	str	r3, [r7, #20]
      break;
 8004236:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004238:	4b13      	ldr	r3, [pc, #76]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x108>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	3301      	adds	r3, #1
 8004244:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004246:	4b10      	ldr	r3, [pc, #64]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x108>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	0a1b      	lsrs	r3, r3, #8
 800424c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	fb03 f202 	mul.w	r2, r3, r2
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	fbb2 f3f3 	udiv	r3, r2, r3
 800425c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800425e:	4b0a      	ldr	r3, [pc, #40]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x108>)
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	0e5b      	lsrs	r3, r3, #25
 8004264:	f003 0303 	and.w	r3, r3, #3
 8004268:	3301      	adds	r3, #1
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	fbb2 f3f3 	udiv	r3, r2, r3
 8004276:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004278:	69bb      	ldr	r3, [r7, #24]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3724      	adds	r7, #36	@ 0x24
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40021000 	.word	0x40021000
 800428c:	0800d3bc 	.word	0x0800d3bc
 8004290:	00f42400 	.word	0x00f42400
 8004294:	007a1200 	.word	0x007a1200

08004298 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800429c:	4b03      	ldr	r3, [pc, #12]	@ (80042ac <HAL_RCC_GetHCLKFreq+0x14>)
 800429e:	681b      	ldr	r3, [r3, #0]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	20000000 	.word	0x20000000

080042b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042b4:	f7ff fff0 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 80042b8:	4602      	mov	r2, r0
 80042ba:	4b06      	ldr	r3, [pc, #24]	@ (80042d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	0a1b      	lsrs	r3, r3, #8
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	4904      	ldr	r1, [pc, #16]	@ (80042d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042c6:	5ccb      	ldrb	r3, [r1, r3]
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40021000 	.word	0x40021000
 80042d8:	0800d3b4 	.word	0x0800d3b4

080042dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042e0:	f7ff ffda 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 80042e4:	4602      	mov	r2, r0
 80042e6:	4b06      	ldr	r3, [pc, #24]	@ (8004300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	0adb      	lsrs	r3, r3, #11
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	4904      	ldr	r1, [pc, #16]	@ (8004304 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042f2:	5ccb      	ldrb	r3, [r1, r3]
 80042f4:	f003 031f 	and.w	r3, r3, #31
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40021000 	.word	0x40021000
 8004304:	0800d3b4 	.word	0x0800d3b4

08004308 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	220f      	movs	r2, #15
 8004316:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004318:	4b12      	ldr	r3, [pc, #72]	@ (8004364 <HAL_RCC_GetClockConfig+0x5c>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 0203 	and.w	r2, r3, #3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004324:	4b0f      	ldr	r3, [pc, #60]	@ (8004364 <HAL_RCC_GetClockConfig+0x5c>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004330:	4b0c      	ldr	r3, [pc, #48]	@ (8004364 <HAL_RCC_GetClockConfig+0x5c>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800433c:	4b09      	ldr	r3, [pc, #36]	@ (8004364 <HAL_RCC_GetClockConfig+0x5c>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	08db      	lsrs	r3, r3, #3
 8004342:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800434a:	4b07      	ldr	r3, [pc, #28]	@ (8004368 <HAL_RCC_GetClockConfig+0x60>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0207 	and.w	r2, r3, #7
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	601a      	str	r2, [r3, #0]
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40021000 	.word	0x40021000
 8004368:	40022000 	.word	0x40022000

0800436c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004370:	4b05      	ldr	r3, [pc, #20]	@ (8004388 <HAL_RCC_EnableCSS+0x1c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a04      	ldr	r2, [pc, #16]	@ (8004388 <HAL_RCC_EnableCSS+0x1c>)
 8004376:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800437a:	6013      	str	r3, [r2, #0]
}
 800437c:	bf00      	nop
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40021000 	.word	0x40021000

0800438c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004390:	4b07      	ldr	r3, [pc, #28]	@ (80043b0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004398:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800439c:	d105      	bne.n	80043aa <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800439e:	f000 f809 	bl	80043b4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80043a2:	4b03      	ldr	r3, [pc, #12]	@ (80043b0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80043a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80043a8:	621a      	str	r2, [r3, #32]
  }
}
 80043aa:	bf00      	nop
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40021000 	.word	0x40021000

080043b4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
	...

080043c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043cc:	2300      	movs	r3, #0
 80043ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043d0:	4b2a      	ldr	r3, [pc, #168]	@ (800447c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043dc:	f7ff f924 	bl	8003628 <HAL_PWREx_GetVoltageRange>
 80043e0:	6178      	str	r0, [r7, #20]
 80043e2:	e014      	b.n	800440e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043e4:	4b25      	ldr	r3, [pc, #148]	@ (800447c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e8:	4a24      	ldr	r2, [pc, #144]	@ (800447c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80043f0:	4b22      	ldr	r3, [pc, #136]	@ (800447c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043fc:	f7ff f914 	bl	8003628 <HAL_PWREx_GetVoltageRange>
 8004400:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004402:	4b1e      	ldr	r3, [pc, #120]	@ (800447c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004406:	4a1d      	ldr	r2, [pc, #116]	@ (800447c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004408:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800440c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004414:	d10b      	bne.n	800442e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b80      	cmp	r3, #128	@ 0x80
 800441a:	d919      	bls.n	8004450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004420:	d902      	bls.n	8004428 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004422:	2302      	movs	r3, #2
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	e013      	b.n	8004450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004428:	2301      	movs	r3, #1
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	e010      	b.n	8004450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b80      	cmp	r3, #128	@ 0x80
 8004432:	d902      	bls.n	800443a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004434:	2303      	movs	r3, #3
 8004436:	613b      	str	r3, [r7, #16]
 8004438:	e00a      	b.n	8004450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b80      	cmp	r3, #128	@ 0x80
 800443e:	d102      	bne.n	8004446 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004440:	2302      	movs	r3, #2
 8004442:	613b      	str	r3, [r7, #16]
 8004444:	e004      	b.n	8004450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b70      	cmp	r3, #112	@ 0x70
 800444a:	d101      	bne.n	8004450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800444c:	2301      	movs	r3, #1
 800444e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004450:	4b0b      	ldr	r3, [pc, #44]	@ (8004480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f023 0207 	bic.w	r2, r3, #7
 8004458:	4909      	ldr	r1, [pc, #36]	@ (8004480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004460:	4b07      	ldr	r3, [pc, #28]	@ (8004480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	429a      	cmp	r2, r3
 800446c:	d001      	beq.n	8004472 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40021000 	.word	0x40021000
 8004480:	40022000 	.word	0x40022000

08004484 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800448c:	2300      	movs	r3, #0
 800448e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004490:	2300      	movs	r3, #0
 8004492:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800449c:	2b00      	cmp	r3, #0
 800449e:	d031      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80044a8:	d01a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80044aa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80044ae:	d814      	bhi.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d009      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044b8:	d10f      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80044ba:	4b5d      	ldr	r3, [pc, #372]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	4a5c      	ldr	r2, [pc, #368]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044c6:	e00c      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3304      	adds	r3, #4
 80044cc:	2100      	movs	r1, #0
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 f9ce 	bl	8004870 <RCCEx_PLLSAI1_Config>
 80044d4:	4603      	mov	r3, r0
 80044d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044d8:	e003      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	74fb      	strb	r3, [r7, #19]
      break;
 80044de:	e000      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80044e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044e2:	7cfb      	ldrb	r3, [r7, #19]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10b      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044e8:	4b51      	ldr	r3, [pc, #324]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f6:	494e      	ldr	r1, [pc, #312]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80044fe:	e001      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004500:	7cfb      	ldrb	r3, [r7, #19]
 8004502:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 809e 	beq.w	800464e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004512:	2300      	movs	r3, #0
 8004514:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004516:	4b46      	ldr	r3, [pc, #280]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004526:	2300      	movs	r3, #0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00d      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800452c:	4b40      	ldr	r3, [pc, #256]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800452e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004530:	4a3f      	ldr	r2, [pc, #252]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004536:	6593      	str	r3, [r2, #88]	@ 0x58
 8004538:	4b3d      	ldr	r3, [pc, #244]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800453a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800453c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004544:	2301      	movs	r3, #1
 8004546:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004548:	4b3a      	ldr	r3, [pc, #232]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a39      	ldr	r2, [pc, #228]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800454e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004552:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004554:	f7fe f9fc 	bl	8002950 <HAL_GetTick>
 8004558:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800455a:	e009      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455c:	f7fe f9f8 	bl	8002950 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d902      	bls.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	74fb      	strb	r3, [r7, #19]
        break;
 800456e:	e005      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004570:	4b30      	ldr	r3, [pc, #192]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0ef      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800457c:	7cfb      	ldrb	r3, [r7, #19]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d15a      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004582:	4b2b      	ldr	r3, [pc, #172]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004588:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800458c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01e      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	429a      	cmp	r2, r3
 800459c:	d019      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800459e:	4b24      	ldr	r3, [pc, #144]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045aa:	4b21      	ldr	r3, [pc, #132]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045ca:	4a19      	ldr	r2, [pc, #100]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d016      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045dc:	f7fe f9b8 	bl	8002950 <HAL_GetTick>
 80045e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e2:	e00b      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e4:	f7fe f9b4 	bl	8002950 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d902      	bls.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	74fb      	strb	r3, [r7, #19]
            break;
 80045fa:	e006      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0ec      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800460a:	7cfb      	ldrb	r3, [r7, #19]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10b      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004610:	4b07      	ldr	r3, [pc, #28]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004616:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800461e:	4904      	ldr	r1, [pc, #16]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004626:	e009      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004628:	7cfb      	ldrb	r3, [r7, #19]
 800462a:	74bb      	strb	r3, [r7, #18]
 800462c:	e006      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800462e:	bf00      	nop
 8004630:	40021000 	.word	0x40021000
 8004634:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004638:	7cfb      	ldrb	r3, [r7, #19]
 800463a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800463c:	7c7b      	ldrb	r3, [r7, #17]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d105      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004642:	4b8a      	ldr	r3, [pc, #552]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004646:	4a89      	ldr	r2, [pc, #548]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004648:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800464c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800465a:	4b84      	ldr	r3, [pc, #528]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004660:	f023 0203 	bic.w	r2, r3, #3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	4980      	ldr	r1, [pc, #512]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800467c:	4b7b      	ldr	r3, [pc, #492]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004682:	f023 020c 	bic.w	r2, r3, #12
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468a:	4978      	ldr	r1, [pc, #480]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800469e:	4b73      	ldr	r3, [pc, #460]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ac:	496f      	ldr	r1, [pc, #444]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046c0:	4b6a      	ldr	r3, [pc, #424]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ce:	4967      	ldr	r1, [pc, #412]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046e2:	4b62      	ldr	r3, [pc, #392]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f0:	495e      	ldr	r1, [pc, #376]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004704:	4b59      	ldr	r3, [pc, #356]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800470a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004712:	4956      	ldr	r1, [pc, #344]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004726:	4b51      	ldr	r3, [pc, #324]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800472c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004734:	494d      	ldr	r1, [pc, #308]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d028      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004748:	4b48      	ldr	r3, [pc, #288]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800474e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004756:	4945      	ldr	r1, [pc, #276]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004762:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004766:	d106      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004768:	4b40      	ldr	r3, [pc, #256]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	4a3f      	ldr	r2, [pc, #252]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800476e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004772:	60d3      	str	r3, [r2, #12]
 8004774:	e011      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800477e:	d10c      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3304      	adds	r3, #4
 8004784:	2101      	movs	r1, #1
 8004786:	4618      	mov	r0, r3
 8004788:	f000 f872 	bl	8004870 <RCCEx_PLLSAI1_Config>
 800478c:	4603      	mov	r3, r0
 800478e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004790:	7cfb      	ldrb	r3, [r7, #19]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004796:	7cfb      	ldrb	r3, [r7, #19]
 8004798:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d028      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047a6:	4b31      	ldr	r3, [pc, #196]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b4:	492d      	ldr	r1, [pc, #180]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047c4:	d106      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047c6:	4b29      	ldr	r3, [pc, #164]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	4a28      	ldr	r2, [pc, #160]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047d0:	60d3      	str	r3, [r2, #12]
 80047d2:	e011      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047dc:	d10c      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3304      	adds	r3, #4
 80047e2:	2101      	movs	r1, #1
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 f843 	bl	8004870 <RCCEx_PLLSAI1_Config>
 80047ea:	4603      	mov	r3, r0
 80047ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047ee:	7cfb      	ldrb	r3, [r7, #19]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80047f4:	7cfb      	ldrb	r3, [r7, #19]
 80047f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d01c      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004804:	4b19      	ldr	r3, [pc, #100]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004812:	4916      	ldr	r1, [pc, #88]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800481e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004822:	d10c      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3304      	adds	r3, #4
 8004828:	2102      	movs	r1, #2
 800482a:	4618      	mov	r0, r3
 800482c:	f000 f820 	bl	8004870 <RCCEx_PLLSAI1_Config>
 8004830:	4603      	mov	r3, r0
 8004832:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004834:	7cfb      	ldrb	r3, [r7, #19]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800483a:	7cfb      	ldrb	r3, [r7, #19]
 800483c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800484a:	4b08      	ldr	r3, [pc, #32]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004850:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004858:	4904      	ldr	r1, [pc, #16]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004860:	7cbb      	ldrb	r3, [r7, #18]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40021000 	.word	0x40021000

08004870 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800487e:	4b74      	ldr	r3, [pc, #464]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d018      	beq.n	80048bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800488a:	4b71      	ldr	r3, [pc, #452]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f003 0203 	and.w	r2, r3, #3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d10d      	bne.n	80048b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
       ||
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048a2:	4b6b      	ldr	r3, [pc, #428]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
       ||
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d047      	beq.n	8004946 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	73fb      	strb	r3, [r7, #15]
 80048ba:	e044      	b.n	8004946 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d018      	beq.n	80048f6 <RCCEx_PLLSAI1_Config+0x86>
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	d825      	bhi.n	8004914 <RCCEx_PLLSAI1_Config+0xa4>
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d002      	beq.n	80048d2 <RCCEx_PLLSAI1_Config+0x62>
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d009      	beq.n	80048e4 <RCCEx_PLLSAI1_Config+0x74>
 80048d0:	e020      	b.n	8004914 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d11d      	bne.n	800491a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e2:	e01a      	b.n	800491a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048e4:	4b5a      	ldr	r3, [pc, #360]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d116      	bne.n	800491e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048f4:	e013      	b.n	800491e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048f6:	4b56      	ldr	r3, [pc, #344]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10f      	bne.n	8004922 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004902:	4b53      	ldr	r3, [pc, #332]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004912:	e006      	b.n	8004922 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
      break;
 8004918:	e004      	b.n	8004924 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800491a:	bf00      	nop
 800491c:	e002      	b.n	8004924 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800491e:	bf00      	nop
 8004920:	e000      	b.n	8004924 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004922:	bf00      	nop
    }

    if(status == HAL_OK)
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10d      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800492a:	4b49      	ldr	r3, [pc, #292]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6819      	ldr	r1, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	3b01      	subs	r3, #1
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	430b      	orrs	r3, r1
 8004940:	4943      	ldr	r1, [pc, #268]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004942:	4313      	orrs	r3, r2
 8004944:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d17c      	bne.n	8004a46 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800494c:	4b40      	ldr	r3, [pc, #256]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a3f      	ldr	r2, [pc, #252]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004952:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004958:	f7fd fffa 	bl	8002950 <HAL_GetTick>
 800495c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800495e:	e009      	b.n	8004974 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004960:	f7fd fff6 	bl	8002950 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d902      	bls.n	8004974 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	73fb      	strb	r3, [r7, #15]
        break;
 8004972:	e005      	b.n	8004980 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004974:	4b36      	ldr	r3, [pc, #216]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1ef      	bne.n	8004960 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d15f      	bne.n	8004a46 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d110      	bne.n	80049ae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800498c:	4b30      	ldr	r3, [pc, #192]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004994:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6892      	ldr	r2, [r2, #8]
 800499c:	0211      	lsls	r1, r2, #8
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	68d2      	ldr	r2, [r2, #12]
 80049a2:	06d2      	lsls	r2, r2, #27
 80049a4:	430a      	orrs	r2, r1
 80049a6:	492a      	ldr	r1, [pc, #168]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	610b      	str	r3, [r1, #16]
 80049ac:	e027      	b.n	80049fe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d112      	bne.n	80049da <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049b4:	4b26      	ldr	r3, [pc, #152]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80049bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6892      	ldr	r2, [r2, #8]
 80049c4:	0211      	lsls	r1, r2, #8
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6912      	ldr	r2, [r2, #16]
 80049ca:	0852      	lsrs	r2, r2, #1
 80049cc:	3a01      	subs	r2, #1
 80049ce:	0552      	lsls	r2, r2, #21
 80049d0:	430a      	orrs	r2, r1
 80049d2:	491f      	ldr	r1, [pc, #124]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	610b      	str	r3, [r1, #16]
 80049d8:	e011      	b.n	80049fe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049da:	4b1d      	ldr	r3, [pc, #116]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80049e2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6892      	ldr	r2, [r2, #8]
 80049ea:	0211      	lsls	r1, r2, #8
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6952      	ldr	r2, [r2, #20]
 80049f0:	0852      	lsrs	r2, r2, #1
 80049f2:	3a01      	subs	r2, #1
 80049f4:	0652      	lsls	r2, r2, #25
 80049f6:	430a      	orrs	r2, r1
 80049f8:	4915      	ldr	r1, [pc, #84]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049fe:	4b14      	ldr	r3, [pc, #80]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a13      	ldr	r2, [pc, #76]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a08:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0a:	f7fd ffa1 	bl	8002950 <HAL_GetTick>
 8004a0e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a10:	e009      	b.n	8004a26 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a12:	f7fd ff9d 	bl	8002950 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d902      	bls.n	8004a26 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	73fb      	strb	r3, [r7, #15]
          break;
 8004a24:	e005      	b.n	8004a32 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a26:	4b0a      	ldr	r3, [pc, #40]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0ef      	beq.n	8004a12 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d106      	bne.n	8004a46 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a38:	4b05      	ldr	r3, [pc, #20]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	4903      	ldr	r1, [pc, #12]	@ (8004a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40021000 	.word	0x40021000

08004a54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e095      	b.n	8004b92 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d108      	bne.n	8004a80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a76:	d009      	beq.n	8004a8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	61da      	str	r2, [r3, #28]
 8004a7e:	e005      	b.n	8004a8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fd faf8 	bl	800209c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ac2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004acc:	d902      	bls.n	8004ad4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	e002      	b.n	8004ada <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ad4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ad8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004ae2:	d007      	beq.n	8004af4 <HAL_SPI_Init+0xa0>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004aec:	d002      	beq.n	8004af4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b36:	ea42 0103 	orr.w	r1, r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	0c1b      	lsrs	r3, r3, #16
 8004b50:	f003 0204 	and.w	r2, r3, #4
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004b70:	ea42 0103 	orr.w	r1, r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b088      	sub	sp, #32
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	603b      	str	r3, [r7, #0]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004baa:	f7fd fed1 	bl	8002950 <HAL_GetTick>
 8004bae:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004bb0:	88fb      	ldrh	r3, [r7, #6]
 8004bb2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d001      	beq.n	8004bc4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e15c      	b.n	8004e7e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <HAL_SPI_Transmit+0x36>
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e154      	b.n	8004e7e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d101      	bne.n	8004be2 <HAL_SPI_Transmit+0x48>
 8004bde:	2302      	movs	r3, #2
 8004be0:	e14d      	b.n	8004e7e <HAL_SPI_Transmit+0x2e4>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2203      	movs	r2, #3
 8004bee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	88fa      	ldrh	r2, [r7, #6]
 8004c02:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	88fa      	ldrh	r2, [r7, #6]
 8004c08:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c34:	d10f      	bne.n	8004c56 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c60:	2b40      	cmp	r3, #64	@ 0x40
 8004c62:	d007      	beq.n	8004c74 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c7c:	d952      	bls.n	8004d24 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <HAL_SPI_Transmit+0xf2>
 8004c86:	8b7b      	ldrh	r3, [r7, #26]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d145      	bne.n	8004d18 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c90:	881a      	ldrh	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9c:	1c9a      	adds	r2, r3, #2
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004cb0:	e032      	b.n	8004d18 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d112      	bne.n	8004ce6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc4:	881a      	ldrh	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd0:	1c9a      	adds	r2, r3, #2
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ce4:	e018      	b.n	8004d18 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ce6:	f7fd fe33 	bl	8002950 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d803      	bhi.n	8004cfe <HAL_SPI_Transmit+0x164>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfc:	d102      	bne.n	8004d04 <HAL_SPI_Transmit+0x16a>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d109      	bne.n	8004d18 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e0b2      	b.n	8004e7e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1c7      	bne.n	8004cb2 <HAL_SPI_Transmit+0x118>
 8004d22:	e083      	b.n	8004e2c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <HAL_SPI_Transmit+0x198>
 8004d2c:	8b7b      	ldrh	r3, [r7, #26]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d177      	bne.n	8004e22 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d912      	bls.n	8004d62 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d40:	881a      	ldrh	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4c:	1c9a      	adds	r2, r3, #2
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b02      	subs	r3, #2
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d60:	e05f      	b.n	8004e22 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	330c      	adds	r3, #12
 8004d6c:	7812      	ldrb	r2, [r2, #0]
 8004d6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d88:	e04b      	b.n	8004e22 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d12b      	bne.n	8004df0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d912      	bls.n	8004dc8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da6:	881a      	ldrh	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db2:	1c9a      	adds	r2, r3, #2
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b02      	subs	r3, #2
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004dc6:	e02c      	b.n	8004e22 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	330c      	adds	r3, #12
 8004dd2:	7812      	ldrb	r2, [r2, #0]
 8004dd4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004dee:	e018      	b.n	8004e22 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004df0:	f7fd fdae 	bl	8002950 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d803      	bhi.n	8004e08 <HAL_SPI_Transmit+0x26e>
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e06:	d102      	bne.n	8004e0e <HAL_SPI_Transmit+0x274>
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e02d      	b.n	8004e7e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1ae      	bne.n	8004d8a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	6839      	ldr	r1, [r7, #0]
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 fcf5 	bl	8005820 <SPI_EndRxTxTransaction>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10a      	bne.n	8004e60 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	617b      	str	r3, [r7, #20]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e000      	b.n	8004e7e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
  }
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3720      	adds	r7, #32
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b088      	sub	sp, #32
 8004e8a:	af02      	add	r7, sp, #8
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	603b      	str	r3, [r7, #0]
 8004e92:	4613      	mov	r3, r2
 8004e94:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d001      	beq.n	8004ea6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e123      	b.n	80050ee <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eae:	d112      	bne.n	8004ed6 <HAL_SPI_Receive+0x50>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10e      	bne.n	8004ed6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2204      	movs	r2, #4
 8004ebc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ec0:	88fa      	ldrh	r2, [r7, #6]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	68b9      	ldr	r1, [r7, #8]
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 f912 	bl	80050f6 <HAL_SPI_TransmitReceive>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	e10b      	b.n	80050ee <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ed6:	f7fd fd3b 	bl	8002950 <HAL_GetTick>
 8004eda:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d002      	beq.n	8004ee8 <HAL_SPI_Receive+0x62>
 8004ee2:	88fb      	ldrh	r3, [r7, #6]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e100      	b.n	80050ee <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_SPI_Receive+0x74>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e0f9      	b.n	80050ee <HAL_SPI_Receive+0x268>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2204      	movs	r2, #4
 8004f06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	88fa      	ldrh	r2, [r7, #6]
 8004f1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	88fa      	ldrh	r2, [r7, #6]
 8004f22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f4c:	d908      	bls.n	8004f60 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004f5c:	605a      	str	r2, [r3, #4]
 8004f5e:	e007      	b.n	8004f70 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004f6e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f78:	d10f      	bne.n	8004f9a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f98:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa4:	2b40      	cmp	r3, #64	@ 0x40
 8004fa6:	d007      	beq.n	8004fb8 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fb6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004fc0:	d875      	bhi.n	80050ae <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004fc2:	e037      	b.n	8005034 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d117      	bne.n	8005002 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f103 020c 	add.w	r2, r3, #12
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fde:	7812      	ldrb	r2, [r2, #0]
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005000:	e018      	b.n	8005034 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005002:	f7fd fca5 	bl	8002950 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d803      	bhi.n	800501a <HAL_SPI_Receive+0x194>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005018:	d102      	bne.n	8005020 <HAL_SPI_Receive+0x19a>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d109      	bne.n	8005034 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e05c      	b.n	80050ee <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800503a:	b29b      	uxth	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1c1      	bne.n	8004fc4 <HAL_SPI_Receive+0x13e>
 8005040:	e03b      	b.n	80050ba <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b01      	cmp	r3, #1
 800504e:	d115      	bne.n	800507c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	b292      	uxth	r2, r2
 800505c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005062:	1c9a      	adds	r2, r3, #2
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800506e:	b29b      	uxth	r3, r3
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800507a:	e018      	b.n	80050ae <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800507c:	f7fd fc68 	bl	8002950 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d803      	bhi.n	8005094 <HAL_SPI_Receive+0x20e>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005092:	d102      	bne.n	800509a <HAL_SPI_Receive+0x214>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d109      	bne.n	80050ae <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e01f      	b.n	80050ee <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1c3      	bne.n	8005042 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	6839      	ldr	r1, [r7, #0]
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 fb56 	bl	8005770 <SPI_EndRxTransaction>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2220      	movs	r2, #32
 80050ce:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80050ec:	2300      	movs	r3, #0
  }
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b08a      	sub	sp, #40	@ 0x28
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	607a      	str	r2, [r7, #4]
 8005102:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005104:	2301      	movs	r3, #1
 8005106:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005108:	f7fd fc22 	bl	8002950 <HAL_GetTick>
 800510c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005114:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800511c:	887b      	ldrh	r3, [r7, #2]
 800511e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005120:	887b      	ldrh	r3, [r7, #2]
 8005122:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005124:	7ffb      	ldrb	r3, [r7, #31]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d00c      	beq.n	8005144 <HAL_SPI_TransmitReceive+0x4e>
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005130:	d106      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d102      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x4a>
 800513a:	7ffb      	ldrb	r3, [r7, #31]
 800513c:	2b04      	cmp	r3, #4
 800513e:	d001      	beq.n	8005144 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005140:	2302      	movs	r3, #2
 8005142:	e1f3      	b.n	800552c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d005      	beq.n	8005156 <HAL_SPI_TransmitReceive+0x60>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <HAL_SPI_TransmitReceive+0x60>
 8005150:	887b      	ldrh	r3, [r7, #2]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e1e8      	b.n	800552c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005160:	2b01      	cmp	r3, #1
 8005162:	d101      	bne.n	8005168 <HAL_SPI_TransmitReceive+0x72>
 8005164:	2302      	movs	r3, #2
 8005166:	e1e1      	b.n	800552c <HAL_SPI_TransmitReceive+0x436>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b04      	cmp	r3, #4
 800517a:	d003      	beq.n	8005184 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2205      	movs	r2, #5
 8005180:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	887a      	ldrh	r2, [r7, #2]
 8005194:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	887a      	ldrh	r2, [r7, #2]
 800519c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	887a      	ldrh	r2, [r7, #2]
 80051aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	887a      	ldrh	r2, [r7, #2]
 80051b0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80051c6:	d802      	bhi.n	80051ce <HAL_SPI_TransmitReceive+0xd8>
 80051c8:	8abb      	ldrh	r3, [r7, #20]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d908      	bls.n	80051e0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80051dc:	605a      	str	r2, [r3, #4]
 80051de:	e007      	b.n	80051f0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80051ee:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051fa:	2b40      	cmp	r3, #64	@ 0x40
 80051fc:	d007      	beq.n	800520e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800520c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005216:	f240 8083 	bls.w	8005320 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <HAL_SPI_TransmitReceive+0x132>
 8005222:	8afb      	ldrh	r3, [r7, #22]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d16f      	bne.n	8005308 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522c:	881a      	ldrh	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005238:	1c9a      	adds	r2, r3, #2
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005242:	b29b      	uxth	r3, r3
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800524c:	e05c      	b.n	8005308 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b02      	cmp	r3, #2
 800525a:	d11b      	bne.n	8005294 <HAL_SPI_TransmitReceive+0x19e>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d016      	beq.n	8005294 <HAL_SPI_TransmitReceive+0x19e>
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	2b01      	cmp	r3, #1
 800526a:	d113      	bne.n	8005294 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005270:	881a      	ldrh	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527c:	1c9a      	adds	r2, r3, #2
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005286:	b29b      	uxth	r3, r3
 8005288:	3b01      	subs	r3, #1
 800528a:	b29a      	uxth	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d11c      	bne.n	80052dc <HAL_SPI_TransmitReceive+0x1e6>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d016      	beq.n	80052dc <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b8:	b292      	uxth	r2, r2
 80052ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c0:	1c9a      	adds	r2, r3, #2
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052d8:	2301      	movs	r3, #1
 80052da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052dc:	f7fd fb38 	bl	8002950 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d80d      	bhi.n	8005308 <HAL_SPI_TransmitReceive+0x212>
 80052ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f2:	d009      	beq.n	8005308 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e111      	b.n	800552c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800530c:	b29b      	uxth	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d19d      	bne.n	800524e <HAL_SPI_TransmitReceive+0x158>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d197      	bne.n	800524e <HAL_SPI_TransmitReceive+0x158>
 800531e:	e0e5      	b.n	80054ec <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <HAL_SPI_TransmitReceive+0x23a>
 8005328:	8afb      	ldrh	r3, [r7, #22]
 800532a:	2b01      	cmp	r3, #1
 800532c:	f040 80d1 	bne.w	80054d2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b01      	cmp	r3, #1
 8005338:	d912      	bls.n	8005360 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533e:	881a      	ldrh	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800534a:	1c9a      	adds	r2, r3, #2
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005354:	b29b      	uxth	r3, r3
 8005356:	3b02      	subs	r3, #2
 8005358:	b29a      	uxth	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800535e:	e0b8      	b.n	80054d2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	330c      	adds	r3, #12
 800536a:	7812      	ldrb	r2, [r2, #0]
 800536c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005386:	e0a4      	b.n	80054d2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b02      	cmp	r3, #2
 8005394:	d134      	bne.n	8005400 <HAL_SPI_TransmitReceive+0x30a>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d02f      	beq.n	8005400 <HAL_SPI_TransmitReceive+0x30a>
 80053a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d12c      	bne.n	8005400 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d912      	bls.n	80053d6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b4:	881a      	ldrh	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c0:	1c9a      	adds	r2, r3, #2
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	3b02      	subs	r3, #2
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053d4:	e012      	b.n	80053fc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	330c      	adds	r3, #12
 80053e0:	7812      	ldrb	r2, [r2, #0]
 80053e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b01      	cmp	r3, #1
 800540c:	d148      	bne.n	80054a0 <HAL_SPI_TransmitReceive+0x3aa>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005414:	b29b      	uxth	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d042      	beq.n	80054a0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b01      	cmp	r3, #1
 8005424:	d923      	bls.n	800546e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005430:	b292      	uxth	r2, r2
 8005432:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005438:	1c9a      	adds	r2, r3, #2
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005444:	b29b      	uxth	r3, r3
 8005446:	3b02      	subs	r3, #2
 8005448:	b29a      	uxth	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d81f      	bhi.n	800549c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800546a:	605a      	str	r2, [r3, #4]
 800546c:	e016      	b.n	800549c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f103 020c 	add.w	r2, r3, #12
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547a:	7812      	ldrb	r2, [r2, #0]
 800547c:	b2d2      	uxtb	r2, r2
 800547e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005490:	b29b      	uxth	r3, r3
 8005492:	3b01      	subs	r3, #1
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800549c:	2301      	movs	r3, #1
 800549e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054a0:	f7fd fa56 	bl	8002950 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d803      	bhi.n	80054b8 <HAL_SPI_TransmitReceive+0x3c2>
 80054b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b6:	d102      	bne.n	80054be <HAL_SPI_TransmitReceive+0x3c8>
 80054b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d109      	bne.n	80054d2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e02c      	b.n	800552c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f47f af55 	bne.w	8005388 <HAL_SPI_TransmitReceive+0x292>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f47f af4e 	bne.w	8005388 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054ec:	6a3a      	ldr	r2, [r7, #32]
 80054ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 f995 	bl	8005820 <SPI_EndRxTxTransaction>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d008      	beq.n	800550e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2220      	movs	r2, #32
 8005500:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e00e      	b.n	800552c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800552a:	2300      	movs	r3, #0
  }
}
 800552c:	4618      	mov	r0, r3
 800552e:	3728      	adds	r7, #40	@ 0x28
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	4613      	mov	r3, r2
 8005542:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005544:	f7fd fa04 	bl	8002950 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800554c:	1a9b      	subs	r3, r3, r2
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	4413      	add	r3, r2
 8005552:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005554:	f7fd f9fc 	bl	8002950 <HAL_GetTick>
 8005558:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800555a:	4b39      	ldr	r3, [pc, #228]	@ (8005640 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	015b      	lsls	r3, r3, #5
 8005560:	0d1b      	lsrs	r3, r3, #20
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	fb02 f303 	mul.w	r3, r2, r3
 8005568:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800556a:	e054      	b.n	8005616 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005572:	d050      	beq.n	8005616 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005574:	f7fd f9ec 	bl	8002950 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	69fa      	ldr	r2, [r7, #28]
 8005580:	429a      	cmp	r2, r3
 8005582:	d902      	bls.n	800558a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d13d      	bne.n	8005606 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005598:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055a2:	d111      	bne.n	80055c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ac:	d004      	beq.n	80055b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055b6:	d107      	bne.n	80055c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055d0:	d10f      	bne.n	80055f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e017      	b.n	8005636 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800560c:	2300      	movs	r3, #0
 800560e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	3b01      	subs	r3, #1
 8005614:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4013      	ands	r3, r2
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	429a      	cmp	r2, r3
 8005624:	bf0c      	ite	eq
 8005626:	2301      	moveq	r3, #1
 8005628:	2300      	movne	r3, #0
 800562a:	b2db      	uxtb	r3, r3
 800562c:	461a      	mov	r2, r3
 800562e:	79fb      	ldrb	r3, [r7, #7]
 8005630:	429a      	cmp	r2, r3
 8005632:	d19b      	bne.n	800556c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3720      	adds	r7, #32
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	20000000 	.word	0x20000000

08005644 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b08a      	sub	sp, #40	@ 0x28
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005652:	2300      	movs	r3, #0
 8005654:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005656:	f7fd f97b 	bl	8002950 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565e:	1a9b      	subs	r3, r3, r2
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	4413      	add	r3, r2
 8005664:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005666:	f7fd f973 	bl	8002950 <HAL_GetTick>
 800566a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	330c      	adds	r3, #12
 8005672:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005674:	4b3d      	ldr	r3, [pc, #244]	@ (800576c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	00da      	lsls	r2, r3, #3
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	0d1b      	lsrs	r3, r3, #20
 8005684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005686:	fb02 f303 	mul.w	r3, r2, r3
 800568a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800568c:	e060      	b.n	8005750 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005694:	d107      	bne.n	80056a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d104      	bne.n	80056a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80056a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ac:	d050      	beq.n	8005750 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056ae:	f7fd f94f 	bl	8002950 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d902      	bls.n	80056c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d13d      	bne.n	8005740 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056dc:	d111      	bne.n	8005702 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056e6:	d004      	beq.n	80056f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056f0:	d107      	bne.n	8005702 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005700:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005706:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800570a:	d10f      	bne.n	800572c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800572a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e010      	b.n	8005762 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	3b01      	subs	r3, #1
 800574e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689a      	ldr	r2, [r3, #8]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	4013      	ands	r3, r2
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	429a      	cmp	r2, r3
 800575e:	d196      	bne.n	800568e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3728      	adds	r7, #40	@ 0x28
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	20000000 	.word	0x20000000

08005770 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af02      	add	r7, sp, #8
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005784:	d111      	bne.n	80057aa <SPI_EndRxTransaction+0x3a>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800578e:	d004      	beq.n	800579a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005798:	d107      	bne.n	80057aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057a8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2200      	movs	r2, #0
 80057b2:	2180      	movs	r1, #128	@ 0x80
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f7ff febd 	bl	8005534 <SPI_WaitFlagStateUntilTimeout>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d007      	beq.n	80057d0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057c4:	f043 0220 	orr.w	r2, r3, #32
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e023      	b.n	8005818 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057d8:	d11d      	bne.n	8005816 <SPI_EndRxTransaction+0xa6>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057e2:	d004      	beq.n	80057ee <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057ec:	d113      	bne.n	8005816 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f7ff ff22 	bl	8005644 <SPI_WaitFifoStateUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d007      	beq.n	8005816 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800580a:	f043 0220 	orr.w	r2, r3, #32
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e000      	b.n	8005818 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af02      	add	r7, sp, #8
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2200      	movs	r2, #0
 8005834:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f7ff ff03 	bl	8005644 <SPI_WaitFifoStateUntilTimeout>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d007      	beq.n	8005854 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005848:	f043 0220 	orr.w	r2, r3, #32
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e027      	b.n	80058a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2200      	movs	r2, #0
 800585c:	2180      	movs	r1, #128	@ 0x80
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f7ff fe68 	bl	8005534 <SPI_WaitFlagStateUntilTimeout>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d007      	beq.n	800587a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800586e:	f043 0220 	orr.w	r2, r3, #32
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e014      	b.n	80058a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2200      	movs	r2, #0
 8005882:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f7ff fedc 	bl	8005644 <SPI_WaitFifoStateUntilTimeout>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005896:	f043 0220 	orr.w	r2, r3, #32
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e000      	b.n	80058a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e049      	b.n	8005952 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fc fecc 	bl	8002670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3304      	adds	r3, #4
 80058e8:	4619      	mov	r1, r3
 80058ea:	4610      	mov	r0, r2
 80058ec:	f000 fbf8 	bl	80060e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b01      	cmp	r3, #1
 800596e:	d001      	beq.n	8005974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e03b      	b.n	80059ec <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0201 	orr.w	r2, r2, #1
 800598a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a19      	ldr	r2, [pc, #100]	@ (80059f8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d009      	beq.n	80059aa <HAL_TIM_Base_Start_IT+0x4e>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800599e:	d004      	beq.n	80059aa <HAL_TIM_Base_Start_IT+0x4e>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a15      	ldr	r2, [pc, #84]	@ (80059fc <HAL_TIM_Base_Start_IT+0xa0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d115      	bne.n	80059d6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	4b13      	ldr	r3, [pc, #76]	@ (8005a00 <HAL_TIM_Base_Start_IT+0xa4>)
 80059b2:	4013      	ands	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b06      	cmp	r3, #6
 80059ba:	d015      	beq.n	80059e8 <HAL_TIM_Base_Start_IT+0x8c>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059c2:	d011      	beq.n	80059e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d4:	e008      	b.n	80059e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 0201 	orr.w	r2, r2, #1
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	e000      	b.n	80059ea <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	40012c00 	.word	0x40012c00
 80059fc:	40014000 	.word	0x40014000
 8005a00:	00010007 	.word	0x00010007

08005a04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e049      	b.n	8005aaa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d106      	bne.n	8005a30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f841 	bl	8005ab2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3304      	adds	r3, #4
 8005a40:	4619      	mov	r1, r3
 8005a42:	4610      	mov	r0, r2
 8005a44:	f000 fb4c 	bl	80060e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005aba:	bf00      	nop
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d020      	beq.n	8005b2a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d01b      	beq.n	8005b2a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f06f 0202 	mvn.w	r2, #2
 8005afa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	f003 0303 	and.w	r3, r3, #3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fac6 	bl	80060a2 <HAL_TIM_IC_CaptureCallback>
 8005b16:	e005      	b.n	8005b24 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fab8 	bl	800608e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fac9 	bl	80060b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d020      	beq.n	8005b76 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f003 0304 	and.w	r3, r3, #4
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d01b      	beq.n	8005b76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f06f 0204 	mvn.w	r2, #4
 8005b46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 faa0 	bl	80060a2 <HAL_TIM_IC_CaptureCallback>
 8005b62:	e005      	b.n	8005b70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fa92 	bl	800608e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 faa3 	bl	80060b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d020      	beq.n	8005bc2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d01b      	beq.n	8005bc2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f06f 0208 	mvn.w	r2, #8
 8005b92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2204      	movs	r2, #4
 8005b98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	f003 0303 	and.w	r3, r3, #3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d003      	beq.n	8005bb0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fa7a 	bl	80060a2 <HAL_TIM_IC_CaptureCallback>
 8005bae:	e005      	b.n	8005bbc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fa6c 	bl	800608e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fa7d 	bl	80060b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f003 0310 	and.w	r3, r3, #16
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d020      	beq.n	8005c0e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f003 0310 	and.w	r3, r3, #16
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d01b      	beq.n	8005c0e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f06f 0210 	mvn.w	r2, #16
 8005bde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2208      	movs	r2, #8
 8005be4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fa54 	bl	80060a2 <HAL_TIM_IC_CaptureCallback>
 8005bfa:	e005      	b.n	8005c08 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fa46 	bl	800608e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fa57 	bl	80060b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00c      	beq.n	8005c32 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d007      	beq.n	8005c32 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f06f 0201 	mvn.w	r2, #1
 8005c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7fb fc89 	bl	8001544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d104      	bne.n	8005c46 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00c      	beq.n	8005c60 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d007      	beq.n	8005c60 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 feb0 	bl	80069c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00c      	beq.n	8005c84 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d007      	beq.n	8005c84 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fea8 	bl	80069d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00c      	beq.n	8005ca8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d007      	beq.n	8005ca8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fa11 	bl	80060ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f003 0320 	and.w	r3, r3, #32
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00c      	beq.n	8005ccc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f003 0320 	and.w	r3, r3, #32
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d007      	beq.n	8005ccc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f06f 0220 	mvn.w	r2, #32
 8005cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fe70 	bl	80069ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ccc:	bf00      	nop
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d101      	bne.n	8005cf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cee:	2302      	movs	r3, #2
 8005cf0:	e0ff      	b.n	8005ef2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b14      	cmp	r3, #20
 8005cfe:	f200 80f0 	bhi.w	8005ee2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d02:	a201      	add	r2, pc, #4	@ (adr r2, 8005d08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d08:	08005d5d 	.word	0x08005d5d
 8005d0c:	08005ee3 	.word	0x08005ee3
 8005d10:	08005ee3 	.word	0x08005ee3
 8005d14:	08005ee3 	.word	0x08005ee3
 8005d18:	08005d9d 	.word	0x08005d9d
 8005d1c:	08005ee3 	.word	0x08005ee3
 8005d20:	08005ee3 	.word	0x08005ee3
 8005d24:	08005ee3 	.word	0x08005ee3
 8005d28:	08005ddf 	.word	0x08005ddf
 8005d2c:	08005ee3 	.word	0x08005ee3
 8005d30:	08005ee3 	.word	0x08005ee3
 8005d34:	08005ee3 	.word	0x08005ee3
 8005d38:	08005e1f 	.word	0x08005e1f
 8005d3c:	08005ee3 	.word	0x08005ee3
 8005d40:	08005ee3 	.word	0x08005ee3
 8005d44:	08005ee3 	.word	0x08005ee3
 8005d48:	08005e61 	.word	0x08005e61
 8005d4c:	08005ee3 	.word	0x08005ee3
 8005d50:	08005ee3 	.word	0x08005ee3
 8005d54:	08005ee3 	.word	0x08005ee3
 8005d58:	08005ea1 	.word	0x08005ea1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68b9      	ldr	r1, [r7, #8]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fa2c 	bl	80061c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f042 0208 	orr.w	r2, r2, #8
 8005d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0204 	bic.w	r2, r2, #4
 8005d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6999      	ldr	r1, [r3, #24]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	691a      	ldr	r2, [r3, #16]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	619a      	str	r2, [r3, #24]
      break;
 8005d9a:	e0a5      	b.n	8005ee8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fa88 	bl	80062b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6999      	ldr	r1, [r3, #24]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	021a      	lsls	r2, r3, #8
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	619a      	str	r2, [r3, #24]
      break;
 8005ddc:	e084      	b.n	8005ee8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68b9      	ldr	r1, [r7, #8]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fae1 	bl	80063ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69da      	ldr	r2, [r3, #28]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f042 0208 	orr.w	r2, r2, #8
 8005df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69da      	ldr	r2, [r3, #28]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0204 	bic.w	r2, r2, #4
 8005e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69d9      	ldr	r1, [r3, #28]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	691a      	ldr	r2, [r3, #16]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	61da      	str	r2, [r3, #28]
      break;
 8005e1c:	e064      	b.n	8005ee8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68b9      	ldr	r1, [r7, #8]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 fb39 	bl	800649c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69da      	ldr	r2, [r3, #28]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69da      	ldr	r2, [r3, #28]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69d9      	ldr	r1, [r3, #28]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	021a      	lsls	r2, r3, #8
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	61da      	str	r2, [r3, #28]
      break;
 8005e5e:	e043      	b.n	8005ee8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fb76 	bl	8006558 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0208 	orr.w	r2, r2, #8
 8005e7a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0204 	bic.w	r2, r2, #4
 8005e8a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	691a      	ldr	r2, [r3, #16]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005e9e:	e023      	b.n	8005ee8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68b9      	ldr	r1, [r7, #8]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fbae 	bl	8006608 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005eba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	021a      	lsls	r2, r3, #8
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005ee0:	e002      	b.n	8005ee8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ee6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3718      	adds	r7, #24
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop

08005efc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_TIM_ConfigClockSource+0x1c>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e0b6      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x18a>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f54:	d03e      	beq.n	8005fd4 <HAL_TIM_ConfigClockSource+0xd8>
 8005f56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f5a:	f200 8087 	bhi.w	800606c <HAL_TIM_ConfigClockSource+0x170>
 8005f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f62:	f000 8086 	beq.w	8006072 <HAL_TIM_ConfigClockSource+0x176>
 8005f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f6a:	d87f      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x170>
 8005f6c:	2b70      	cmp	r3, #112	@ 0x70
 8005f6e:	d01a      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0xaa>
 8005f70:	2b70      	cmp	r3, #112	@ 0x70
 8005f72:	d87b      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x170>
 8005f74:	2b60      	cmp	r3, #96	@ 0x60
 8005f76:	d050      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x11e>
 8005f78:	2b60      	cmp	r3, #96	@ 0x60
 8005f7a:	d877      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x170>
 8005f7c:	2b50      	cmp	r3, #80	@ 0x50
 8005f7e:	d03c      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0xfe>
 8005f80:	2b50      	cmp	r3, #80	@ 0x50
 8005f82:	d873      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x170>
 8005f84:	2b40      	cmp	r3, #64	@ 0x40
 8005f86:	d058      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x13e>
 8005f88:	2b40      	cmp	r3, #64	@ 0x40
 8005f8a:	d86f      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x170>
 8005f8c:	2b30      	cmp	r3, #48	@ 0x30
 8005f8e:	d064      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x15e>
 8005f90:	2b30      	cmp	r3, #48	@ 0x30
 8005f92:	d86b      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x170>
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	d060      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x15e>
 8005f98:	2b20      	cmp	r3, #32
 8005f9a:	d867      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x170>
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d05c      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x15e>
 8005fa0:	2b10      	cmp	r3, #16
 8005fa2:	d05a      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x15e>
 8005fa4:	e062      	b.n	800606c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fb6:	f000 fbfb 	bl	80067b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	609a      	str	r2, [r3, #8]
      break;
 8005fd2:	e04f      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fe4:	f000 fbe4 	bl	80067b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ff6:	609a      	str	r2, [r3, #8]
      break;
 8005ff8:	e03c      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006006:	461a      	mov	r2, r3
 8006008:	f000 fb58 	bl	80066bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2150      	movs	r1, #80	@ 0x50
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fbb1 	bl	800677a <TIM_ITRx_SetConfig>
      break;
 8006018:	e02c      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006026:	461a      	mov	r2, r3
 8006028:	f000 fb77 	bl	800671a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2160      	movs	r1, #96	@ 0x60
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fba1 	bl	800677a <TIM_ITRx_SetConfig>
      break;
 8006038:	e01c      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006046:	461a      	mov	r2, r3
 8006048:	f000 fb38 	bl	80066bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2140      	movs	r1, #64	@ 0x40
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fb91 	bl	800677a <TIM_ITRx_SetConfig>
      break;
 8006058:	e00c      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4619      	mov	r1, r3
 8006064:	4610      	mov	r0, r2
 8006066:	f000 fb88 	bl	800677a <TIM_ITRx_SetConfig>
      break;
 800606a:	e003      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	73fb      	strb	r3, [r7, #15]
      break;
 8006070:	e000      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006072:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800608e:	b480      	push	{r7}
 8006090:	b083      	sub	sp, #12
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006096:	bf00      	nop
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060d2:	bf00      	nop
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
	...

080060e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a30      	ldr	r2, [pc, #192]	@ (80061b4 <TIM_Base_SetConfig+0xd4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d003      	beq.n	8006100 <TIM_Base_SetConfig+0x20>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060fe:	d108      	bne.n	8006112 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a27      	ldr	r2, [pc, #156]	@ (80061b4 <TIM_Base_SetConfig+0xd4>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d00b      	beq.n	8006132 <TIM_Base_SetConfig+0x52>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006120:	d007      	beq.n	8006132 <TIM_Base_SetConfig+0x52>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a24      	ldr	r2, [pc, #144]	@ (80061b8 <TIM_Base_SetConfig+0xd8>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d003      	beq.n	8006132 <TIM_Base_SetConfig+0x52>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a23      	ldr	r2, [pc, #140]	@ (80061bc <TIM_Base_SetConfig+0xdc>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d108      	bne.n	8006144 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	4313      	orrs	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a12      	ldr	r2, [pc, #72]	@ (80061b4 <TIM_Base_SetConfig+0xd4>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d007      	beq.n	8006180 <TIM_Base_SetConfig+0xa0>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a11      	ldr	r2, [pc, #68]	@ (80061b8 <TIM_Base_SetConfig+0xd8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d003      	beq.n	8006180 <TIM_Base_SetConfig+0xa0>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a10      	ldr	r2, [pc, #64]	@ (80061bc <TIM_Base_SetConfig+0xdc>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d103      	bne.n	8006188 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	691a      	ldr	r2, [r3, #16]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b01      	cmp	r3, #1
 8006198:	d105      	bne.n	80061a6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f023 0201 	bic.w	r2, r3, #1
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	611a      	str	r2, [r3, #16]
  }
}
 80061a6:	bf00      	nop
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	40012c00 	.word	0x40012c00
 80061b8:	40014000 	.word	0x40014000
 80061bc:	40014400 	.word	0x40014400

080061c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	f023 0201 	bic.w	r2, r3, #1
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 0303 	bic.w	r3, r3, #3
 80061fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f023 0302 	bic.w	r3, r3, #2
 800620c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a24      	ldr	r2, [pc, #144]	@ (80062ac <TIM_OC1_SetConfig+0xec>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d007      	beq.n	8006230 <TIM_OC1_SetConfig+0x70>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a23      	ldr	r2, [pc, #140]	@ (80062b0 <TIM_OC1_SetConfig+0xf0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d003      	beq.n	8006230 <TIM_OC1_SetConfig+0x70>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a22      	ldr	r2, [pc, #136]	@ (80062b4 <TIM_OC1_SetConfig+0xf4>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d10c      	bne.n	800624a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f023 0308 	bic.w	r3, r3, #8
 8006236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f023 0304 	bic.w	r3, r3, #4
 8006248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a17      	ldr	r2, [pc, #92]	@ (80062ac <TIM_OC1_SetConfig+0xec>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d007      	beq.n	8006262 <TIM_OC1_SetConfig+0xa2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a16      	ldr	r2, [pc, #88]	@ (80062b0 <TIM_OC1_SetConfig+0xf0>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d003      	beq.n	8006262 <TIM_OC1_SetConfig+0xa2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a15      	ldr	r2, [pc, #84]	@ (80062b4 <TIM_OC1_SetConfig+0xf4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d111      	bne.n	8006286 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	4313      	orrs	r3, r2
 8006284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	621a      	str	r2, [r3, #32]
}
 80062a0:	bf00      	nop
 80062a2:	371c      	adds	r7, #28
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr
 80062ac:	40012c00 	.word	0x40012c00
 80062b0:	40014000 	.word	0x40014000
 80062b4:	40014400 	.word	0x40014400

080062b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	f023 0210 	bic.w	r2, r3, #16
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	021b      	lsls	r3, r3, #8
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f023 0320 	bic.w	r3, r3, #32
 8006306:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4313      	orrs	r3, r2
 8006312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a22      	ldr	r2, [pc, #136]	@ (80063a0 <TIM_OC2_SetConfig+0xe8>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d10d      	bne.n	8006338 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	011b      	lsls	r3, r3, #4
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	4313      	orrs	r3, r2
 800632e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006336:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a19      	ldr	r2, [pc, #100]	@ (80063a0 <TIM_OC2_SetConfig+0xe8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d007      	beq.n	8006350 <TIM_OC2_SetConfig+0x98>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a18      	ldr	r2, [pc, #96]	@ (80063a4 <TIM_OC2_SetConfig+0xec>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d003      	beq.n	8006350 <TIM_OC2_SetConfig+0x98>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a17      	ldr	r2, [pc, #92]	@ (80063a8 <TIM_OC2_SetConfig+0xf0>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d113      	bne.n	8006378 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006356:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800635e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	4313      	orrs	r3, r2
 8006376:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	621a      	str	r2, [r3, #32]
}
 8006392:	bf00      	nop
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	40012c00 	.word	0x40012c00
 80063a4:	40014000 	.word	0x40014000
 80063a8:	40014400 	.word	0x40014400

080063ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f023 0303 	bic.w	r3, r3, #3
 80063e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	021b      	lsls	r3, r3, #8
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	4313      	orrs	r3, r2
 8006404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a21      	ldr	r2, [pc, #132]	@ (8006490 <TIM_OC3_SetConfig+0xe4>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d10d      	bne.n	800642a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a18      	ldr	r2, [pc, #96]	@ (8006490 <TIM_OC3_SetConfig+0xe4>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d007      	beq.n	8006442 <TIM_OC3_SetConfig+0x96>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a17      	ldr	r2, [pc, #92]	@ (8006494 <TIM_OC3_SetConfig+0xe8>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d003      	beq.n	8006442 <TIM_OC3_SetConfig+0x96>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a16      	ldr	r2, [pc, #88]	@ (8006498 <TIM_OC3_SetConfig+0xec>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d113      	bne.n	800646a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	011b      	lsls	r3, r3, #4
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4313      	orrs	r3, r2
 800645c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	4313      	orrs	r3, r2
 8006468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	621a      	str	r2, [r3, #32]
}
 8006484:	bf00      	nop
 8006486:	371c      	adds	r7, #28
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	40012c00 	.word	0x40012c00
 8006494:	40014000 	.word	0x40014000
 8006498:	40014400 	.word	0x40014400

0800649c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	021b      	lsls	r3, r3, #8
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	031b      	lsls	r3, r3, #12
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a14      	ldr	r2, [pc, #80]	@ (800654c <TIM_OC4_SetConfig+0xb0>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d007      	beq.n	8006510 <TIM_OC4_SetConfig+0x74>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a13      	ldr	r2, [pc, #76]	@ (8006550 <TIM_OC4_SetConfig+0xb4>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d003      	beq.n	8006510 <TIM_OC4_SetConfig+0x74>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a12      	ldr	r2, [pc, #72]	@ (8006554 <TIM_OC4_SetConfig+0xb8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d109      	bne.n	8006524 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006516:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	019b      	lsls	r3, r3, #6
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	621a      	str	r2, [r3, #32]
}
 800653e:	bf00      	nop
 8006540:	371c      	adds	r7, #28
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40012c00 	.word	0x40012c00
 8006550:	40014000 	.word	0x40014000
 8006554:	40014400 	.word	0x40014400

08006558 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800657e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800658a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4313      	orrs	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800659c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	041b      	lsls	r3, r3, #16
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a13      	ldr	r2, [pc, #76]	@ (80065fc <TIM_OC5_SetConfig+0xa4>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d007      	beq.n	80065c2 <TIM_OC5_SetConfig+0x6a>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a12      	ldr	r2, [pc, #72]	@ (8006600 <TIM_OC5_SetConfig+0xa8>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d003      	beq.n	80065c2 <TIM_OC5_SetConfig+0x6a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a11      	ldr	r2, [pc, #68]	@ (8006604 <TIM_OC5_SetConfig+0xac>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d109      	bne.n	80065d6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	021b      	lsls	r3, r3, #8
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	621a      	str	r2, [r3, #32]
}
 80065f0:	bf00      	nop
 80065f2:	371c      	adds	r7, #28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	40012c00 	.word	0x40012c00
 8006600:	40014000 	.word	0x40014000
 8006604:	40014400 	.word	0x40014400

08006608 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006608:	b480      	push	{r7}
 800660a:	b087      	sub	sp, #28
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800662e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800663a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	021b      	lsls	r3, r3, #8
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4313      	orrs	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800664e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	051b      	lsls	r3, r3, #20
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	4313      	orrs	r3, r2
 800665a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a14      	ldr	r2, [pc, #80]	@ (80066b0 <TIM_OC6_SetConfig+0xa8>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d007      	beq.n	8006674 <TIM_OC6_SetConfig+0x6c>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a13      	ldr	r2, [pc, #76]	@ (80066b4 <TIM_OC6_SetConfig+0xac>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d003      	beq.n	8006674 <TIM_OC6_SetConfig+0x6c>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a12      	ldr	r2, [pc, #72]	@ (80066b8 <TIM_OC6_SetConfig+0xb0>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d109      	bne.n	8006688 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800667a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	029b      	lsls	r3, r3, #10
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	621a      	str	r2, [r3, #32]
}
 80066a2:	bf00      	nop
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	40012c00 	.word	0x40012c00
 80066b4:	40014000 	.word	0x40014000
 80066b8:	40014400 	.word	0x40014400

080066bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	f023 0201 	bic.w	r2, r3, #1
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	011b      	lsls	r3, r3, #4
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f023 030a 	bic.w	r3, r3, #10
 80066f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	4313      	orrs	r3, r2
 8006700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	621a      	str	r2, [r3, #32]
}
 800670e:	bf00      	nop
 8006710:	371c      	adds	r7, #28
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800671a:	b480      	push	{r7}
 800671c:	b087      	sub	sp, #28
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	f023 0210 	bic.w	r2, r3, #16
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006744:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	031b      	lsls	r3, r3, #12
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006756:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	4313      	orrs	r3, r2
 8006760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	621a      	str	r2, [r3, #32]
}
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800677a:	b480      	push	{r7}
 800677c:	b085      	sub	sp, #20
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006790:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4313      	orrs	r3, r2
 8006798:	f043 0307 	orr.w	r3, r3, #7
 800679c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	609a      	str	r2, [r3, #8]
}
 80067a4:	bf00      	nop
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	021a      	lsls	r2, r3, #8
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	431a      	orrs	r2, r3
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	4313      	orrs	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	609a      	str	r2, [r3, #8]
}
 80067e4:	bf00      	nop
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006804:	2302      	movs	r3, #2
 8006806:	e04f      	b.n	80068a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a21      	ldr	r2, [pc, #132]	@ (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d108      	bne.n	8006844 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006838:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4313      	orrs	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800684a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a14      	ldr	r2, [pc, #80]	@ (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d009      	beq.n	800687c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006870:	d004      	beq.n	800687c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a10      	ldr	r2, [pc, #64]	@ (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d10c      	bne.n	8006896 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006882:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	4313      	orrs	r3, r2
 800688c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	40012c00 	.word	0x40012c00
 80068b8:	40014000 	.word	0x40014000

080068bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d101      	bne.n	80068d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80068d4:	2302      	movs	r3, #2
 80068d6:	e060      	b.n	800699a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4313      	orrs	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	4313      	orrs	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693e:	4313      	orrs	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	041b      	lsls	r3, r3, #16
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a14      	ldr	r2, [pc, #80]	@ (80069a8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d115      	bne.n	8006988 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006966:	051b      	lsls	r3, r3, #20
 8006968:	4313      	orrs	r3, r2
 800696a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	4313      	orrs	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	4313      	orrs	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	40012c00 	.word	0x40012c00

080069ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e040      	b.n	8006a7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7fb fef2 	bl	80027f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2224      	movs	r2, #36	@ 0x24
 8006a14:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0201 	bic.w	r2, r2, #1
 8006a24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d002      	beq.n	8006a34 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fade 	bl	8006ff0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f8af 	bl	8006b98 <UART_SetConfig>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d101      	bne.n	8006a44 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e01b      	b.n	8006a7c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fb5d 	bl	8007134 <UART_CheckIdleState>
 8006a7a:	4603      	mov	r3, r0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08a      	sub	sp, #40	@ 0x28
 8006a88:	af02      	add	r7, sp, #8
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	603b      	str	r3, [r7, #0]
 8006a90:	4613      	mov	r3, r2
 8006a92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	d177      	bne.n	8006b8c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <HAL_UART_Transmit+0x24>
 8006aa2:	88fb      	ldrh	r3, [r7, #6]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e070      	b.n	8006b8e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2221      	movs	r2, #33	@ 0x21
 8006ab8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006aba:	f7fb ff49 	bl	8002950 <HAL_GetTick>
 8006abe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	88fa      	ldrh	r2, [r7, #6]
 8006ac4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	88fa      	ldrh	r2, [r7, #6]
 8006acc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ad8:	d108      	bne.n	8006aec <HAL_UART_Transmit+0x68>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d104      	bne.n	8006aec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	61bb      	str	r3, [r7, #24]
 8006aea:	e003      	b.n	8006af4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006af0:	2300      	movs	r3, #0
 8006af2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006af4:	e02f      	b.n	8006b56 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2200      	movs	r2, #0
 8006afe:	2180      	movs	r1, #128	@ 0x80
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 fbbf 	bl	8007284 <UART_WaitOnFlagUntilTimeout>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d004      	beq.n	8006b16 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e03b      	b.n	8006b8e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10b      	bne.n	8006b34 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	881a      	ldrh	r2, [r3, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b28:	b292      	uxth	r2, r2
 8006b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	3302      	adds	r3, #2
 8006b30:	61bb      	str	r3, [r7, #24]
 8006b32:	e007      	b.n	8006b44 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	781a      	ldrb	r2, [r3, #0]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	3301      	adds	r3, #1
 8006b42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1c9      	bne.n	8006af6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2140      	movs	r1, #64	@ 0x40
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 fb89 	bl	8007284 <UART_WaitOnFlagUntilTimeout>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d004      	beq.n	8006b82 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e005      	b.n	8006b8e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2220      	movs	r2, #32
 8006b86:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	e000      	b.n	8006b8e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006b8c:	2302      	movs	r3, #2
  }
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3720      	adds	r7, #32
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
	...

08006b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b9c:	b08a      	sub	sp, #40	@ 0x28
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	4bb4      	ldr	r3, [pc, #720]	@ (8006e98 <UART_SetConfig+0x300>)
 8006bc8:	4013      	ands	r3, r2
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	6812      	ldr	r2, [r2, #0]
 8006bce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	68da      	ldr	r2, [r3, #12]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4aa9      	ldr	r2, [pc, #676]	@ (8006e9c <UART_SetConfig+0x304>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d004      	beq.n	8006c04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c00:	4313      	orrs	r3, r2
 8006c02:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c14:	430a      	orrs	r2, r1
 8006c16:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4aa0      	ldr	r2, [pc, #640]	@ (8006ea0 <UART_SetConfig+0x308>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d126      	bne.n	8006c70 <UART_SetConfig+0xd8>
 8006c22:	4ba0      	ldr	r3, [pc, #640]	@ (8006ea4 <UART_SetConfig+0x30c>)
 8006c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c28:	f003 0303 	and.w	r3, r3, #3
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d81b      	bhi.n	8006c68 <UART_SetConfig+0xd0>
 8006c30:	a201      	add	r2, pc, #4	@ (adr r2, 8006c38 <UART_SetConfig+0xa0>)
 8006c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c36:	bf00      	nop
 8006c38:	08006c49 	.word	0x08006c49
 8006c3c:	08006c59 	.word	0x08006c59
 8006c40:	08006c51 	.word	0x08006c51
 8006c44:	08006c61 	.word	0x08006c61
 8006c48:	2301      	movs	r3, #1
 8006c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c4e:	e080      	b.n	8006d52 <UART_SetConfig+0x1ba>
 8006c50:	2302      	movs	r3, #2
 8006c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c56:	e07c      	b.n	8006d52 <UART_SetConfig+0x1ba>
 8006c58:	2304      	movs	r3, #4
 8006c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c5e:	e078      	b.n	8006d52 <UART_SetConfig+0x1ba>
 8006c60:	2308      	movs	r3, #8
 8006c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c66:	e074      	b.n	8006d52 <UART_SetConfig+0x1ba>
 8006c68:	2310      	movs	r3, #16
 8006c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c6e:	e070      	b.n	8006d52 <UART_SetConfig+0x1ba>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a8c      	ldr	r2, [pc, #560]	@ (8006ea8 <UART_SetConfig+0x310>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d138      	bne.n	8006cec <UART_SetConfig+0x154>
 8006c7a:	4b8a      	ldr	r3, [pc, #552]	@ (8006ea4 <UART_SetConfig+0x30c>)
 8006c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c80:	f003 030c 	and.w	r3, r3, #12
 8006c84:	2b0c      	cmp	r3, #12
 8006c86:	d82d      	bhi.n	8006ce4 <UART_SetConfig+0x14c>
 8006c88:	a201      	add	r2, pc, #4	@ (adr r2, 8006c90 <UART_SetConfig+0xf8>)
 8006c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8e:	bf00      	nop
 8006c90:	08006cc5 	.word	0x08006cc5
 8006c94:	08006ce5 	.word	0x08006ce5
 8006c98:	08006ce5 	.word	0x08006ce5
 8006c9c:	08006ce5 	.word	0x08006ce5
 8006ca0:	08006cd5 	.word	0x08006cd5
 8006ca4:	08006ce5 	.word	0x08006ce5
 8006ca8:	08006ce5 	.word	0x08006ce5
 8006cac:	08006ce5 	.word	0x08006ce5
 8006cb0:	08006ccd 	.word	0x08006ccd
 8006cb4:	08006ce5 	.word	0x08006ce5
 8006cb8:	08006ce5 	.word	0x08006ce5
 8006cbc:	08006ce5 	.word	0x08006ce5
 8006cc0:	08006cdd 	.word	0x08006cdd
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cca:	e042      	b.n	8006d52 <UART_SetConfig+0x1ba>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cd2:	e03e      	b.n	8006d52 <UART_SetConfig+0x1ba>
 8006cd4:	2304      	movs	r3, #4
 8006cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cda:	e03a      	b.n	8006d52 <UART_SetConfig+0x1ba>
 8006cdc:	2308      	movs	r3, #8
 8006cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ce2:	e036      	b.n	8006d52 <UART_SetConfig+0x1ba>
 8006ce4:	2310      	movs	r3, #16
 8006ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cea:	e032      	b.n	8006d52 <UART_SetConfig+0x1ba>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a6a      	ldr	r2, [pc, #424]	@ (8006e9c <UART_SetConfig+0x304>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d12a      	bne.n	8006d4c <UART_SetConfig+0x1b4>
 8006cf6:	4b6b      	ldr	r3, [pc, #428]	@ (8006ea4 <UART_SetConfig+0x30c>)
 8006cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cfc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006d00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d04:	d01a      	beq.n	8006d3c <UART_SetConfig+0x1a4>
 8006d06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d0a:	d81b      	bhi.n	8006d44 <UART_SetConfig+0x1ac>
 8006d0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d10:	d00c      	beq.n	8006d2c <UART_SetConfig+0x194>
 8006d12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d16:	d815      	bhi.n	8006d44 <UART_SetConfig+0x1ac>
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <UART_SetConfig+0x18c>
 8006d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d20:	d008      	beq.n	8006d34 <UART_SetConfig+0x19c>
 8006d22:	e00f      	b.n	8006d44 <UART_SetConfig+0x1ac>
 8006d24:	2300      	movs	r3, #0
 8006d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d2a:	e012      	b.n	8006d52 <UART_SetConfig+0x1ba>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d32:	e00e      	b.n	8006d52 <UART_SetConfig+0x1ba>
 8006d34:	2304      	movs	r3, #4
 8006d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d3a:	e00a      	b.n	8006d52 <UART_SetConfig+0x1ba>
 8006d3c:	2308      	movs	r3, #8
 8006d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d42:	e006      	b.n	8006d52 <UART_SetConfig+0x1ba>
 8006d44:	2310      	movs	r3, #16
 8006d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d4a:	e002      	b.n	8006d52 <UART_SetConfig+0x1ba>
 8006d4c:	2310      	movs	r3, #16
 8006d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a51      	ldr	r2, [pc, #324]	@ (8006e9c <UART_SetConfig+0x304>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d17a      	bne.n	8006e52 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d60:	2b08      	cmp	r3, #8
 8006d62:	d824      	bhi.n	8006dae <UART_SetConfig+0x216>
 8006d64:	a201      	add	r2, pc, #4	@ (adr r2, 8006d6c <UART_SetConfig+0x1d4>)
 8006d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6a:	bf00      	nop
 8006d6c:	08006d91 	.word	0x08006d91
 8006d70:	08006daf 	.word	0x08006daf
 8006d74:	08006d99 	.word	0x08006d99
 8006d78:	08006daf 	.word	0x08006daf
 8006d7c:	08006d9f 	.word	0x08006d9f
 8006d80:	08006daf 	.word	0x08006daf
 8006d84:	08006daf 	.word	0x08006daf
 8006d88:	08006daf 	.word	0x08006daf
 8006d8c:	08006da7 	.word	0x08006da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d90:	f7fd fa8e 	bl	80042b0 <HAL_RCC_GetPCLK1Freq>
 8006d94:	61f8      	str	r0, [r7, #28]
        break;
 8006d96:	e010      	b.n	8006dba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d98:	4b44      	ldr	r3, [pc, #272]	@ (8006eac <UART_SetConfig+0x314>)
 8006d9a:	61fb      	str	r3, [r7, #28]
        break;
 8006d9c:	e00d      	b.n	8006dba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d9e:	f7fd f9ef 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 8006da2:	61f8      	str	r0, [r7, #28]
        break;
 8006da4:	e009      	b.n	8006dba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006da6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006daa:	61fb      	str	r3, [r7, #28]
        break;
 8006dac:	e005      	b.n	8006dba <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006db8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 8107 	beq.w	8006fd0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	4413      	add	r3, r2
 8006dcc:	69fa      	ldr	r2, [r7, #28]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d305      	bcc.n	8006dde <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006dd8:	69fa      	ldr	r2, [r7, #28]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d903      	bls.n	8006de6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006de4:	e0f4      	b.n	8006fd0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	2200      	movs	r2, #0
 8006dea:	461c      	mov	r4, r3
 8006dec:	4615      	mov	r5, r2
 8006dee:	f04f 0200 	mov.w	r2, #0
 8006df2:	f04f 0300 	mov.w	r3, #0
 8006df6:	022b      	lsls	r3, r5, #8
 8006df8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006dfc:	0222      	lsls	r2, r4, #8
 8006dfe:	68f9      	ldr	r1, [r7, #12]
 8006e00:	6849      	ldr	r1, [r1, #4]
 8006e02:	0849      	lsrs	r1, r1, #1
 8006e04:	2000      	movs	r0, #0
 8006e06:	4688      	mov	r8, r1
 8006e08:	4681      	mov	r9, r0
 8006e0a:	eb12 0a08 	adds.w	sl, r2, r8
 8006e0e:	eb43 0b09 	adc.w	fp, r3, r9
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	603b      	str	r3, [r7, #0]
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e20:	4650      	mov	r0, sl
 8006e22:	4659      	mov	r1, fp
 8006e24:	f7f9 fec0 	bl	8000ba8 <__aeabi_uldivmod>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e36:	d308      	bcc.n	8006e4a <UART_SetConfig+0x2b2>
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e3e:	d204      	bcs.n	8006e4a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	60da      	str	r2, [r3, #12]
 8006e48:	e0c2      	b.n	8006fd0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006e50:	e0be      	b.n	8006fd0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e5a:	d16a      	bne.n	8006f32 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006e5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	d834      	bhi.n	8006ece <UART_SetConfig+0x336>
 8006e64:	a201      	add	r2, pc, #4	@ (adr r2, 8006e6c <UART_SetConfig+0x2d4>)
 8006e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6a:	bf00      	nop
 8006e6c:	08006e91 	.word	0x08006e91
 8006e70:	08006eb1 	.word	0x08006eb1
 8006e74:	08006eb9 	.word	0x08006eb9
 8006e78:	08006ecf 	.word	0x08006ecf
 8006e7c:	08006ebf 	.word	0x08006ebf
 8006e80:	08006ecf 	.word	0x08006ecf
 8006e84:	08006ecf 	.word	0x08006ecf
 8006e88:	08006ecf 	.word	0x08006ecf
 8006e8c:	08006ec7 	.word	0x08006ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e90:	f7fd fa0e 	bl	80042b0 <HAL_RCC_GetPCLK1Freq>
 8006e94:	61f8      	str	r0, [r7, #28]
        break;
 8006e96:	e020      	b.n	8006eda <UART_SetConfig+0x342>
 8006e98:	efff69f3 	.word	0xefff69f3
 8006e9c:	40008000 	.word	0x40008000
 8006ea0:	40013800 	.word	0x40013800
 8006ea4:	40021000 	.word	0x40021000
 8006ea8:	40004400 	.word	0x40004400
 8006eac:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006eb0:	f7fd fa14 	bl	80042dc <HAL_RCC_GetPCLK2Freq>
 8006eb4:	61f8      	str	r0, [r7, #28]
        break;
 8006eb6:	e010      	b.n	8006eda <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eb8:	4b4c      	ldr	r3, [pc, #304]	@ (8006fec <UART_SetConfig+0x454>)
 8006eba:	61fb      	str	r3, [r7, #28]
        break;
 8006ebc:	e00d      	b.n	8006eda <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ebe:	f7fd f95f 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 8006ec2:	61f8      	str	r0, [r7, #28]
        break;
 8006ec4:	e009      	b.n	8006eda <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ec6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006eca:	61fb      	str	r3, [r7, #28]
        break;
 8006ecc:	e005      	b.n	8006eda <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ed8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d077      	beq.n	8006fd0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	005a      	lsls	r2, r3, #1
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	085b      	lsrs	r3, r3, #1
 8006eea:	441a      	add	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	2b0f      	cmp	r3, #15
 8006efa:	d916      	bls.n	8006f2a <UART_SetConfig+0x392>
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f02:	d212      	bcs.n	8006f2a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	f023 030f 	bic.w	r3, r3, #15
 8006f0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	085b      	lsrs	r3, r3, #1
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	8afb      	ldrh	r3, [r7, #22]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	8afa      	ldrh	r2, [r7, #22]
 8006f26:	60da      	str	r2, [r3, #12]
 8006f28:	e052      	b.n	8006fd0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006f30:	e04e      	b.n	8006fd0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f36:	2b08      	cmp	r3, #8
 8006f38:	d827      	bhi.n	8006f8a <UART_SetConfig+0x3f2>
 8006f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f40 <UART_SetConfig+0x3a8>)
 8006f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f40:	08006f65 	.word	0x08006f65
 8006f44:	08006f6d 	.word	0x08006f6d
 8006f48:	08006f75 	.word	0x08006f75
 8006f4c:	08006f8b 	.word	0x08006f8b
 8006f50:	08006f7b 	.word	0x08006f7b
 8006f54:	08006f8b 	.word	0x08006f8b
 8006f58:	08006f8b 	.word	0x08006f8b
 8006f5c:	08006f8b 	.word	0x08006f8b
 8006f60:	08006f83 	.word	0x08006f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f64:	f7fd f9a4 	bl	80042b0 <HAL_RCC_GetPCLK1Freq>
 8006f68:	61f8      	str	r0, [r7, #28]
        break;
 8006f6a:	e014      	b.n	8006f96 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f6c:	f7fd f9b6 	bl	80042dc <HAL_RCC_GetPCLK2Freq>
 8006f70:	61f8      	str	r0, [r7, #28]
        break;
 8006f72:	e010      	b.n	8006f96 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f74:	4b1d      	ldr	r3, [pc, #116]	@ (8006fec <UART_SetConfig+0x454>)
 8006f76:	61fb      	str	r3, [r7, #28]
        break;
 8006f78:	e00d      	b.n	8006f96 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f7a:	f7fd f901 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 8006f7e:	61f8      	str	r0, [r7, #28]
        break;
 8006f80:	e009      	b.n	8006f96 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f86:	61fb      	str	r3, [r7, #28]
        break;
 8006f88:	e005      	b.n	8006f96 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006f94:	bf00      	nop
    }

    if (pclk != 0U)
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d019      	beq.n	8006fd0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	085a      	lsrs	r2, r3, #1
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	441a      	add	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	2b0f      	cmp	r3, #15
 8006fb4:	d909      	bls.n	8006fca <UART_SetConfig+0x432>
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fbc:	d205      	bcs.n	8006fca <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	60da      	str	r2, [r3, #12]
 8006fc8:	e002      	b.n	8006fd0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006fdc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3728      	adds	r7, #40	@ 0x28
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fea:	bf00      	nop
 8006fec:	00f42400 	.word	0x00f42400

08006ff0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ffc:	f003 0308 	and.w	r3, r3, #8
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00a      	beq.n	800701a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00a      	beq.n	800705e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007062:	f003 0304 	and.w	r3, r3, #4
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00a      	beq.n	8007080 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	430a      	orrs	r2, r1
 800707e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007084:	f003 0310 	and.w	r3, r3, #16
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00a      	beq.n	80070a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a6:	f003 0320 	and.w	r3, r3, #32
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00a      	beq.n	80070c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d01a      	beq.n	8007106 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070ee:	d10a      	bne.n	8007106 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00a      	beq.n	8007128 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	605a      	str	r2, [r3, #4]
  }
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b098      	sub	sp, #96	@ 0x60
 8007138:	af02      	add	r7, sp, #8
 800713a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007144:	f7fb fc04 	bl	8002950 <HAL_GetTick>
 8007148:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0308 	and.w	r3, r3, #8
 8007154:	2b08      	cmp	r3, #8
 8007156:	d12e      	bne.n	80071b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007158:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007160:	2200      	movs	r2, #0
 8007162:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f88c 	bl	8007284 <UART_WaitOnFlagUntilTimeout>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d021      	beq.n	80071b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717a:	e853 3f00 	ldrex	r3, [r3]
 800717e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007182:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007186:	653b      	str	r3, [r7, #80]	@ 0x50
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	461a      	mov	r2, r3
 800718e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007190:	647b      	str	r3, [r7, #68]	@ 0x44
 8007192:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007194:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007196:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007198:	e841 2300 	strex	r3, r2, [r1]
 800719c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800719e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1e6      	bne.n	8007172 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2220      	movs	r2, #32
 80071a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e062      	b.n	800727c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0304 	and.w	r3, r3, #4
 80071c0:	2b04      	cmp	r3, #4
 80071c2:	d149      	bne.n	8007258 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071cc:	2200      	movs	r2, #0
 80071ce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f856 	bl	8007284 <UART_WaitOnFlagUntilTimeout>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d03c      	beq.n	8007258 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	623b      	str	r3, [r7, #32]
   return(result);
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80071fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007200:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800720a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e6      	bne.n	80071de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3308      	adds	r3, #8
 8007216:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	e853 3f00 	ldrex	r3, [r3]
 800721e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f023 0301 	bic.w	r3, r3, #1
 8007226:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3308      	adds	r3, #8
 800722e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007230:	61fa      	str	r2, [r7, #28]
 8007232:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	69b9      	ldr	r1, [r7, #24]
 8007236:	69fa      	ldr	r2, [r7, #28]
 8007238:	e841 2300 	strex	r3, r2, [r1]
 800723c:	617b      	str	r3, [r7, #20]
   return(result);
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e5      	bne.n	8007210 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2220      	movs	r2, #32
 8007248:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e011      	b.n	800727c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2220      	movs	r2, #32
 800725c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2220      	movs	r2, #32
 8007262:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3758      	adds	r7, #88	@ 0x58
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	603b      	str	r3, [r7, #0]
 8007290:	4613      	mov	r3, r2
 8007292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007294:	e04f      	b.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729c:	d04b      	beq.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800729e:	f7fb fb57 	bl	8002950 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d302      	bcc.n	80072b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e04e      	b.n	8007356 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0304 	and.w	r3, r3, #4
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d037      	beq.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2b80      	cmp	r3, #128	@ 0x80
 80072ca:	d034      	beq.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2b40      	cmp	r3, #64	@ 0x40
 80072d0:	d031      	beq.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	f003 0308 	and.w	r3, r3, #8
 80072dc:	2b08      	cmp	r3, #8
 80072de:	d110      	bne.n	8007302 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2208      	movs	r2, #8
 80072e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f000 f838 	bl	800735e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2208      	movs	r2, #8
 80072f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e029      	b.n	8007356 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800730c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007310:	d111      	bne.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800731a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 f81e 	bl	800735e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2220      	movs	r2, #32
 8007326:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e00f      	b.n	8007356 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69da      	ldr	r2, [r3, #28]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	4013      	ands	r3, r2
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	429a      	cmp	r2, r3
 8007344:	bf0c      	ite	eq
 8007346:	2301      	moveq	r3, #1
 8007348:	2300      	movne	r3, #0
 800734a:	b2db      	uxtb	r3, r3
 800734c:	461a      	mov	r2, r3
 800734e:	79fb      	ldrb	r3, [r7, #7]
 8007350:	429a      	cmp	r2, r3
 8007352:	d0a0      	beq.n	8007296 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800735e:	b480      	push	{r7}
 8007360:	b095      	sub	sp, #84	@ 0x54
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800736e:	e853 3f00 	ldrex	r3, [r3]
 8007372:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007376:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800737a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	461a      	mov	r2, r3
 8007382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007384:	643b      	str	r3, [r7, #64]	@ 0x40
 8007386:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007388:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800738a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800738c:	e841 2300 	strex	r3, r2, [r1]
 8007390:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1e6      	bne.n	8007366 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3308      	adds	r3, #8
 800739e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	e853 3f00 	ldrex	r3, [r3]
 80073a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	f023 0301 	bic.w	r3, r3, #1
 80073ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3308      	adds	r3, #8
 80073b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073c0:	e841 2300 	strex	r3, r2, [r1]
 80073c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e5      	bne.n	8007398 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d118      	bne.n	8007406 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	e853 3f00 	ldrex	r3, [r3]
 80073e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	f023 0310 	bic.w	r3, r3, #16
 80073e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073f2:	61bb      	str	r3, [r7, #24]
 80073f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f6:	6979      	ldr	r1, [r7, #20]
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	e841 2300 	strex	r3, r2, [r1]
 80073fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1e6      	bne.n	80073d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2220      	movs	r2, #32
 800740a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800741a:	bf00      	nop
 800741c:	3754      	adds	r7, #84	@ 0x54
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
	...

08007428 <__NVIC_SetPriority>:
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	4603      	mov	r3, r0
 8007430:	6039      	str	r1, [r7, #0]
 8007432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007438:	2b00      	cmp	r3, #0
 800743a:	db0a      	blt.n	8007452 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	b2da      	uxtb	r2, r3
 8007440:	490c      	ldr	r1, [pc, #48]	@ (8007474 <__NVIC_SetPriority+0x4c>)
 8007442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007446:	0112      	lsls	r2, r2, #4
 8007448:	b2d2      	uxtb	r2, r2
 800744a:	440b      	add	r3, r1
 800744c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007450:	e00a      	b.n	8007468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	b2da      	uxtb	r2, r3
 8007456:	4908      	ldr	r1, [pc, #32]	@ (8007478 <__NVIC_SetPriority+0x50>)
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	3b04      	subs	r3, #4
 8007460:	0112      	lsls	r2, r2, #4
 8007462:	b2d2      	uxtb	r2, r2
 8007464:	440b      	add	r3, r1
 8007466:	761a      	strb	r2, [r3, #24]
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	e000e100 	.word	0xe000e100
 8007478:	e000ed00 	.word	0xe000ed00

0800747c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007480:	4b05      	ldr	r3, [pc, #20]	@ (8007498 <SysTick_Handler+0x1c>)
 8007482:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007484:	f001 fd46 	bl	8008f14 <xTaskGetSchedulerState>
 8007488:	4603      	mov	r3, r0
 800748a:	2b01      	cmp	r3, #1
 800748c:	d001      	beq.n	8007492 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800748e:	f002 fb3b 	bl	8009b08 <xPortSysTickHandler>
  }
}
 8007492:	bf00      	nop
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	e000e010 	.word	0xe000e010

0800749c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800749c:	b580      	push	{r7, lr}
 800749e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80074a0:	2100      	movs	r1, #0
 80074a2:	f06f 0004 	mvn.w	r0, #4
 80074a6:	f7ff ffbf 	bl	8007428 <__NVIC_SetPriority>
#endif
}
 80074aa:	bf00      	nop
 80074ac:	bd80      	pop	{r7, pc}
	...

080074b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074b6:	f3ef 8305 	mrs	r3, IPSR
 80074ba:	603b      	str	r3, [r7, #0]
  return(result);
 80074bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80074c2:	f06f 0305 	mvn.w	r3, #5
 80074c6:	607b      	str	r3, [r7, #4]
 80074c8:	e00c      	b.n	80074e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80074ca:	4b0a      	ldr	r3, [pc, #40]	@ (80074f4 <osKernelInitialize+0x44>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d105      	bne.n	80074de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80074d2:	4b08      	ldr	r3, [pc, #32]	@ (80074f4 <osKernelInitialize+0x44>)
 80074d4:	2201      	movs	r2, #1
 80074d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80074d8:	2300      	movs	r3, #0
 80074da:	607b      	str	r3, [r7, #4]
 80074dc:	e002      	b.n	80074e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80074de:	f04f 33ff 	mov.w	r3, #4294967295
 80074e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80074e4:	687b      	ldr	r3, [r7, #4]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	20000d6c 	.word	0x20000d6c

080074f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074fe:	f3ef 8305 	mrs	r3, IPSR
 8007502:	603b      	str	r3, [r7, #0]
  return(result);
 8007504:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <osKernelStart+0x1a>
    stat = osErrorISR;
 800750a:	f06f 0305 	mvn.w	r3, #5
 800750e:	607b      	str	r3, [r7, #4]
 8007510:	e010      	b.n	8007534 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007512:	4b0b      	ldr	r3, [pc, #44]	@ (8007540 <osKernelStart+0x48>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d109      	bne.n	800752e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800751a:	f7ff ffbf 	bl	800749c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800751e:	4b08      	ldr	r3, [pc, #32]	@ (8007540 <osKernelStart+0x48>)
 8007520:	2202      	movs	r2, #2
 8007522:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007524:	f001 f892 	bl	800864c <vTaskStartScheduler>
      stat = osOK;
 8007528:	2300      	movs	r3, #0
 800752a:	607b      	str	r3, [r7, #4]
 800752c:	e002      	b.n	8007534 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800752e:	f04f 33ff 	mov.w	r3, #4294967295
 8007532:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007534:	687b      	ldr	r3, [r7, #4]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	20000d6c 	.word	0x20000d6c

08007544 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007544:	b580      	push	{r7, lr}
 8007546:	b08e      	sub	sp, #56	@ 0x38
 8007548:	af04      	add	r7, sp, #16
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007550:	2300      	movs	r3, #0
 8007552:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007554:	f3ef 8305 	mrs	r3, IPSR
 8007558:	617b      	str	r3, [r7, #20]
  return(result);
 800755a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800755c:	2b00      	cmp	r3, #0
 800755e:	d17e      	bne.n	800765e <osThreadNew+0x11a>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d07b      	beq.n	800765e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007566:	2380      	movs	r3, #128	@ 0x80
 8007568:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800756a:	2318      	movs	r3, #24
 800756c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800756e:	2300      	movs	r3, #0
 8007570:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007572:	f04f 33ff 	mov.w	r3, #4294967295
 8007576:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d045      	beq.n	800760a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <osThreadNew+0x48>
        name = attr->name;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d008      	beq.n	80075b2 <osThreadNew+0x6e>
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	2b38      	cmp	r3, #56	@ 0x38
 80075a4:	d805      	bhi.n	80075b2 <osThreadNew+0x6e>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d001      	beq.n	80075b6 <osThreadNew+0x72>
        return (NULL);
 80075b2:	2300      	movs	r3, #0
 80075b4:	e054      	b.n	8007660 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	089b      	lsrs	r3, r3, #2
 80075c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00e      	beq.n	80075ec <osThreadNew+0xa8>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	2ba7      	cmp	r3, #167	@ 0xa7
 80075d4:	d90a      	bls.n	80075ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d006      	beq.n	80075ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d002      	beq.n	80075ec <osThreadNew+0xa8>
        mem = 1;
 80075e6:	2301      	movs	r3, #1
 80075e8:	61bb      	str	r3, [r7, #24]
 80075ea:	e010      	b.n	800760e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10c      	bne.n	800760e <osThreadNew+0xca>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d108      	bne.n	800760e <osThreadNew+0xca>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d104      	bne.n	800760e <osThreadNew+0xca>
          mem = 0;
 8007604:	2300      	movs	r3, #0
 8007606:	61bb      	str	r3, [r7, #24]
 8007608:	e001      	b.n	800760e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800760a:	2300      	movs	r3, #0
 800760c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d110      	bne.n	8007636 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800761c:	9202      	str	r2, [sp, #8]
 800761e:	9301      	str	r3, [sp, #4]
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	6a3a      	ldr	r2, [r7, #32]
 8007628:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f000 fe1a 	bl	8008264 <xTaskCreateStatic>
 8007630:	4603      	mov	r3, r0
 8007632:	613b      	str	r3, [r7, #16]
 8007634:	e013      	b.n	800765e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d110      	bne.n	800765e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	b29a      	uxth	r2, r3
 8007640:	f107 0310 	add.w	r3, r7, #16
 8007644:	9301      	str	r3, [sp, #4]
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f000 fe68 	bl	8008324 <xTaskCreate>
 8007654:	4603      	mov	r3, r0
 8007656:	2b01      	cmp	r3, #1
 8007658:	d001      	beq.n	800765e <osThreadNew+0x11a>
            hTask = NULL;
 800765a:	2300      	movs	r3, #0
 800765c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800765e:	693b      	ldr	r3, [r7, #16]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3728      	adds	r7, #40	@ 0x28
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007670:	f3ef 8305 	mrs	r3, IPSR
 8007674:	60bb      	str	r3, [r7, #8]
  return(result);
 8007676:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007678:	2b00      	cmp	r3, #0
 800767a:	d003      	beq.n	8007684 <osDelay+0x1c>
    stat = osErrorISR;
 800767c:	f06f 0305 	mvn.w	r3, #5
 8007680:	60fb      	str	r3, [r7, #12]
 8007682:	e007      	b.n	8007694 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007684:	2300      	movs	r3, #0
 8007686:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d002      	beq.n	8007694 <osDelay+0x2c>
      vTaskDelay(ticks);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 ffa6 	bl	80085e0 <vTaskDelay>
    }
  }

  return (stat);
 8007694:	68fb      	ldr	r3, [r7, #12]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4a07      	ldr	r2, [pc, #28]	@ (80076cc <vApplicationGetIdleTaskMemory+0x2c>)
 80076b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	4a06      	ldr	r2, [pc, #24]	@ (80076d0 <vApplicationGetIdleTaskMemory+0x30>)
 80076b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2280      	movs	r2, #128	@ 0x80
 80076bc:	601a      	str	r2, [r3, #0]
}
 80076be:	bf00      	nop
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	20000d70 	.word	0x20000d70
 80076d0:	20000e18 	.word	0x20000e18

080076d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4a07      	ldr	r2, [pc, #28]	@ (8007700 <vApplicationGetTimerTaskMemory+0x2c>)
 80076e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	4a06      	ldr	r2, [pc, #24]	@ (8007704 <vApplicationGetTimerTaskMemory+0x30>)
 80076ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076f2:	601a      	str	r2, [r3, #0]
}
 80076f4:	bf00      	nop
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	20001018 	.word	0x20001018
 8007704:	200010c0 	.word	0x200010c0

08007708 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f103 0208 	add.w	r2, r3, #8
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f04f 32ff 	mov.w	r2, #4294967295
 8007720:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f103 0208 	add.w	r2, r3, #8
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f103 0208 	add.w	r2, r3, #8
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007756:	bf00      	nop
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007762:	b480      	push	{r7}
 8007764:	b085      	sub	sp, #20
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	689a      	ldr	r2, [r3, #8]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	1c5a      	adds	r2, r3, #1
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	601a      	str	r2, [r3, #0]
}
 800779e:	bf00      	nop
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077aa:	b480      	push	{r7}
 80077ac:	b085      	sub	sp, #20
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c0:	d103      	bne.n	80077ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	60fb      	str	r3, [r7, #12]
 80077c8:	e00c      	b.n	80077e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	3308      	adds	r3, #8
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	e002      	b.n	80077d8 <vListInsert+0x2e>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d2f6      	bcs.n	80077d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	683a      	ldr	r2, [r7, #0]
 80077f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	1c5a      	adds	r2, r3, #1
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	601a      	str	r2, [r3, #0]
}
 8007810:	bf00      	nop
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	6892      	ldr	r2, [r2, #8]
 8007832:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	6852      	ldr	r2, [r2, #4]
 800783c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	429a      	cmp	r2, r3
 8007846:	d103      	bne.n	8007850 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	1e5a      	subs	r2, r3, #1
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10b      	bne.n	800789c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007896:	bf00      	nop
 8007898:	bf00      	nop
 800789a:	e7fd      	b.n	8007898 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800789c:	f002 f8a4 	bl	80099e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a8:	68f9      	ldr	r1, [r7, #12]
 80078aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80078ac:	fb01 f303 	mul.w	r3, r1, r3
 80078b0:	441a      	add	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078cc:	3b01      	subs	r3, #1
 80078ce:	68f9      	ldr	r1, [r7, #12]
 80078d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80078d2:	fb01 f303 	mul.w	r3, r1, r3
 80078d6:	441a      	add	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	22ff      	movs	r2, #255	@ 0xff
 80078e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	22ff      	movs	r2, #255	@ 0xff
 80078e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d114      	bne.n	800791c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d01a      	beq.n	8007930 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	3310      	adds	r3, #16
 80078fe:	4618      	mov	r0, r3
 8007900:	f001 f942 	bl	8008b88 <xTaskRemoveFromEventList>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d012      	beq.n	8007930 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800790a:	4b0d      	ldr	r3, [pc, #52]	@ (8007940 <xQueueGenericReset+0xd0>)
 800790c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007910:	601a      	str	r2, [r3, #0]
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	e009      	b.n	8007930 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3310      	adds	r3, #16
 8007920:	4618      	mov	r0, r3
 8007922:	f7ff fef1 	bl	8007708 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3324      	adds	r3, #36	@ 0x24
 800792a:	4618      	mov	r0, r3
 800792c:	f7ff feec 	bl	8007708 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007930:	f002 f88c 	bl	8009a4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007934:	2301      	movs	r3, #1
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	e000ed04 	.word	0xe000ed04

08007944 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007944:	b580      	push	{r7, lr}
 8007946:	b08e      	sub	sp, #56	@ 0x38
 8007948:	af02      	add	r7, sp, #8
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
 8007950:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10b      	bne.n	8007970 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800796a:	bf00      	nop
 800796c:	bf00      	nop
 800796e:	e7fd      	b.n	800796c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10b      	bne.n	800798e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007988:	bf00      	nop
 800798a:	bf00      	nop
 800798c:	e7fd      	b.n	800798a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <xQueueGenericCreateStatic+0x56>
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d001      	beq.n	800799e <xQueueGenericCreateStatic+0x5a>
 800799a:	2301      	movs	r3, #1
 800799c:	e000      	b.n	80079a0 <xQueueGenericCreateStatic+0x5c>
 800799e:	2300      	movs	r3, #0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10b      	bne.n	80079bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80079a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	623b      	str	r3, [r7, #32]
}
 80079b6:	bf00      	nop
 80079b8:	bf00      	nop
 80079ba:	e7fd      	b.n	80079b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d102      	bne.n	80079c8 <xQueueGenericCreateStatic+0x84>
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d101      	bne.n	80079cc <xQueueGenericCreateStatic+0x88>
 80079c8:	2301      	movs	r3, #1
 80079ca:	e000      	b.n	80079ce <xQueueGenericCreateStatic+0x8a>
 80079cc:	2300      	movs	r3, #0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10b      	bne.n	80079ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	61fb      	str	r3, [r7, #28]
}
 80079e4:	bf00      	nop
 80079e6:	bf00      	nop
 80079e8:	e7fd      	b.n	80079e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80079ea:	2350      	movs	r3, #80	@ 0x50
 80079ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2b50      	cmp	r3, #80	@ 0x50
 80079f2:	d00b      	beq.n	8007a0c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	61bb      	str	r3, [r7, #24]
}
 8007a06:	bf00      	nop
 8007a08:	bf00      	nop
 8007a0a:	e7fd      	b.n	8007a08 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a0c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00d      	beq.n	8007a34 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a20:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	68b9      	ldr	r1, [r7, #8]
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f000 f805 	bl	8007a3e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3730      	adds	r7, #48	@ 0x30
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	60f8      	str	r0, [r7, #12]
 8007a46:	60b9      	str	r1, [r7, #8]
 8007a48:	607a      	str	r2, [r7, #4]
 8007a4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d103      	bne.n	8007a5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	601a      	str	r2, [r3, #0]
 8007a58:	e002      	b.n	8007a60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a6c:	2101      	movs	r1, #1
 8007a6e:	69b8      	ldr	r0, [r7, #24]
 8007a70:	f7ff fefe 	bl	8007870 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	78fa      	ldrb	r2, [r7, #3]
 8007a78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a7c:	bf00      	nop
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b08e      	sub	sp, #56	@ 0x38
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
 8007a90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a92:	2300      	movs	r3, #0
 8007a94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10b      	bne.n	8007ab8 <xQueueGenericSend+0x34>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007ab2:	bf00      	nop
 8007ab4:	bf00      	nop
 8007ab6:	e7fd      	b.n	8007ab4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d103      	bne.n	8007ac6 <xQueueGenericSend+0x42>
 8007abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d101      	bne.n	8007aca <xQueueGenericSend+0x46>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e000      	b.n	8007acc <xQueueGenericSend+0x48>
 8007aca:	2300      	movs	r3, #0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10b      	bne.n	8007ae8 <xQueueGenericSend+0x64>
	__asm volatile
 8007ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ae2:	bf00      	nop
 8007ae4:	bf00      	nop
 8007ae6:	e7fd      	b.n	8007ae4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d103      	bne.n	8007af6 <xQueueGenericSend+0x72>
 8007aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d101      	bne.n	8007afa <xQueueGenericSend+0x76>
 8007af6:	2301      	movs	r3, #1
 8007af8:	e000      	b.n	8007afc <xQueueGenericSend+0x78>
 8007afa:	2300      	movs	r3, #0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10b      	bne.n	8007b18 <xQueueGenericSend+0x94>
	__asm volatile
 8007b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b04:	f383 8811 	msr	BASEPRI, r3
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	623b      	str	r3, [r7, #32]
}
 8007b12:	bf00      	nop
 8007b14:	bf00      	nop
 8007b16:	e7fd      	b.n	8007b14 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b18:	f001 f9fc 	bl	8008f14 <xTaskGetSchedulerState>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d102      	bne.n	8007b28 <xQueueGenericSend+0xa4>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <xQueueGenericSend+0xa8>
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e000      	b.n	8007b2e <xQueueGenericSend+0xaa>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10b      	bne.n	8007b4a <xQueueGenericSend+0xc6>
	__asm volatile
 8007b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	61fb      	str	r3, [r7, #28]
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	e7fd      	b.n	8007b46 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b4a:	f001 ff4d 	bl	80099e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d302      	bcc.n	8007b60 <xQueueGenericSend+0xdc>
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d129      	bne.n	8007bb4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	68b9      	ldr	r1, [r7, #8]
 8007b64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b66:	f000 fa0f 	bl	8007f88 <prvCopyDataToQueue>
 8007b6a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d010      	beq.n	8007b96 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b76:	3324      	adds	r3, #36	@ 0x24
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f001 f805 	bl	8008b88 <xTaskRemoveFromEventList>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d013      	beq.n	8007bac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b84:	4b3f      	ldr	r3, [pc, #252]	@ (8007c84 <xQueueGenericSend+0x200>)
 8007b86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b8a:	601a      	str	r2, [r3, #0]
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	e00a      	b.n	8007bac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d007      	beq.n	8007bac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b9c:	4b39      	ldr	r3, [pc, #228]	@ (8007c84 <xQueueGenericSend+0x200>)
 8007b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007bac:	f001 ff4e 	bl	8009a4c <vPortExitCritical>
				return pdPASS;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e063      	b.n	8007c7c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d103      	bne.n	8007bc2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007bba:	f001 ff47 	bl	8009a4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	e05c      	b.n	8007c7c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d106      	bne.n	8007bd6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bc8:	f107 0314 	add.w	r3, r7, #20
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f001 f83f 	bl	8008c50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bd6:	f001 ff39 	bl	8009a4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bda:	f000 fda7 	bl	800872c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bde:	f001 ff03 	bl	80099e8 <vPortEnterCritical>
 8007be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007be8:	b25b      	sxtb	r3, r3
 8007bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bee:	d103      	bne.n	8007bf8 <xQueueGenericSend+0x174>
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007bfe:	b25b      	sxtb	r3, r3
 8007c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c04:	d103      	bne.n	8007c0e <xQueueGenericSend+0x18a>
 8007c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c0e:	f001 ff1d 	bl	8009a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c12:	1d3a      	adds	r2, r7, #4
 8007c14:	f107 0314 	add.w	r3, r7, #20
 8007c18:	4611      	mov	r1, r2
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f001 f82e 	bl	8008c7c <xTaskCheckForTimeOut>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d124      	bne.n	8007c70 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c28:	f000 faa6 	bl	8008178 <prvIsQueueFull>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d018      	beq.n	8007c64 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c34:	3310      	adds	r3, #16
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	4611      	mov	r1, r2
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 ff52 	bl	8008ae4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c42:	f000 fa31 	bl	80080a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c46:	f000 fd7f 	bl	8008748 <xTaskResumeAll>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f47f af7c 	bne.w	8007b4a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007c52:	4b0c      	ldr	r3, [pc, #48]	@ (8007c84 <xQueueGenericSend+0x200>)
 8007c54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c58:	601a      	str	r2, [r3, #0]
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	e772      	b.n	8007b4a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c66:	f000 fa1f 	bl	80080a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c6a:	f000 fd6d 	bl	8008748 <xTaskResumeAll>
 8007c6e:	e76c      	b.n	8007b4a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c72:	f000 fa19 	bl	80080a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c76:	f000 fd67 	bl	8008748 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3738      	adds	r7, #56	@ 0x38
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	e000ed04 	.word	0xe000ed04

08007c88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b090      	sub	sp, #64	@ 0x40
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
 8007c94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10b      	bne.n	8007cb8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007cb2:	bf00      	nop
 8007cb4:	bf00      	nop
 8007cb6:	e7fd      	b.n	8007cb4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d103      	bne.n	8007cc6 <xQueueGenericSendFromISR+0x3e>
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d101      	bne.n	8007cca <xQueueGenericSendFromISR+0x42>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e000      	b.n	8007ccc <xQueueGenericSendFromISR+0x44>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10b      	bne.n	8007ce8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ce2:	bf00      	nop
 8007ce4:	bf00      	nop
 8007ce6:	e7fd      	b.n	8007ce4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d103      	bne.n	8007cf6 <xQueueGenericSendFromISR+0x6e>
 8007cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d101      	bne.n	8007cfa <xQueueGenericSendFromISR+0x72>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e000      	b.n	8007cfc <xQueueGenericSendFromISR+0x74>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10b      	bne.n	8007d18 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	623b      	str	r3, [r7, #32]
}
 8007d12:	bf00      	nop
 8007d14:	bf00      	nop
 8007d16:	e7fd      	b.n	8007d14 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d18:	f001 ff46 	bl	8009ba8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d1c:	f3ef 8211 	mrs	r2, BASEPRI
 8007d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	61fa      	str	r2, [r7, #28]
 8007d32:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d34:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d36:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d302      	bcc.n	8007d4a <xQueueGenericSendFromISR+0xc2>
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d12f      	bne.n	8007daa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	68b9      	ldr	r1, [r7, #8]
 8007d5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007d60:	f000 f912 	bl	8007f88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d64:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6c:	d112      	bne.n	8007d94 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d016      	beq.n	8007da4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d78:	3324      	adds	r3, #36	@ 0x24
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 ff04 	bl	8008b88 <xTaskRemoveFromEventList>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00e      	beq.n	8007da4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00b      	beq.n	8007da4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	601a      	str	r2, [r3, #0]
 8007d92:	e007      	b.n	8007da4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007d98:	3301      	adds	r3, #1
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	b25a      	sxtb	r2, r3
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007da4:	2301      	movs	r3, #1
 8007da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007da8:	e001      	b.n	8007dae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007daa:	2300      	movs	r3, #0
 8007dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007db0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007db8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3740      	adds	r7, #64	@ 0x40
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b08c      	sub	sp, #48	@ 0x30
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10b      	bne.n	8007df6 <xQueueReceive+0x32>
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	623b      	str	r3, [r7, #32]
}
 8007df0:	bf00      	nop
 8007df2:	bf00      	nop
 8007df4:	e7fd      	b.n	8007df2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d103      	bne.n	8007e04 <xQueueReceive+0x40>
 8007dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <xQueueReceive+0x44>
 8007e04:	2301      	movs	r3, #1
 8007e06:	e000      	b.n	8007e0a <xQueueReceive+0x46>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10b      	bne.n	8007e26 <xQueueReceive+0x62>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	61fb      	str	r3, [r7, #28]
}
 8007e20:	bf00      	nop
 8007e22:	bf00      	nop
 8007e24:	e7fd      	b.n	8007e22 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e26:	f001 f875 	bl	8008f14 <xTaskGetSchedulerState>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d102      	bne.n	8007e36 <xQueueReceive+0x72>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <xQueueReceive+0x76>
 8007e36:	2301      	movs	r3, #1
 8007e38:	e000      	b.n	8007e3c <xQueueReceive+0x78>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10b      	bne.n	8007e58 <xQueueReceive+0x94>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	61bb      	str	r3, [r7, #24]
}
 8007e52:	bf00      	nop
 8007e54:	bf00      	nop
 8007e56:	e7fd      	b.n	8007e54 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e58:	f001 fdc6 	bl	80099e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e60:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d01f      	beq.n	8007ea8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e68:	68b9      	ldr	r1, [r7, #8]
 8007e6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e6c:	f000 f8f6 	bl	800805c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e72:	1e5a      	subs	r2, r3, #1
 8007e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e76:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00f      	beq.n	8007ea0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e82:	3310      	adds	r3, #16
 8007e84:	4618      	mov	r0, r3
 8007e86:	f000 fe7f 	bl	8008b88 <xTaskRemoveFromEventList>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d007      	beq.n	8007ea0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e90:	4b3c      	ldr	r3, [pc, #240]	@ (8007f84 <xQueueReceive+0x1c0>)
 8007e92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e96:	601a      	str	r2, [r3, #0]
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ea0:	f001 fdd4 	bl	8009a4c <vPortExitCritical>
				return pdPASS;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e069      	b.n	8007f7c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d103      	bne.n	8007eb6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007eae:	f001 fdcd 	bl	8009a4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	e062      	b.n	8007f7c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d106      	bne.n	8007eca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ebc:	f107 0310 	add.w	r3, r7, #16
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 fec5 	bl	8008c50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007eca:	f001 fdbf 	bl	8009a4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ece:	f000 fc2d 	bl	800872c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ed2:	f001 fd89 	bl	80099e8 <vPortEnterCritical>
 8007ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007edc:	b25b      	sxtb	r3, r3
 8007ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee2:	d103      	bne.n	8007eec <xQueueReceive+0x128>
 8007ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ef2:	b25b      	sxtb	r3, r3
 8007ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef8:	d103      	bne.n	8007f02 <xQueueReceive+0x13e>
 8007efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f02:	f001 fda3 	bl	8009a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f06:	1d3a      	adds	r2, r7, #4
 8007f08:	f107 0310 	add.w	r3, r7, #16
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 feb4 	bl	8008c7c <xTaskCheckForTimeOut>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d123      	bne.n	8007f62 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f1c:	f000 f916 	bl	800814c <prvIsQueueEmpty>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d017      	beq.n	8007f56 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f28:	3324      	adds	r3, #36	@ 0x24
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 fdd8 	bl	8008ae4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f36:	f000 f8b7 	bl	80080a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f3a:	f000 fc05 	bl	8008748 <xTaskResumeAll>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d189      	bne.n	8007e58 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007f44:	4b0f      	ldr	r3, [pc, #60]	@ (8007f84 <xQueueReceive+0x1c0>)
 8007f46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	f3bf 8f6f 	isb	sy
 8007f54:	e780      	b.n	8007e58 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f58:	f000 f8a6 	bl	80080a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f5c:	f000 fbf4 	bl	8008748 <xTaskResumeAll>
 8007f60:	e77a      	b.n	8007e58 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f64:	f000 f8a0 	bl	80080a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f68:	f000 fbee 	bl	8008748 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f6e:	f000 f8ed 	bl	800814c <prvIsQueueEmpty>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f43f af6f 	beq.w	8007e58 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3730      	adds	r7, #48	@ 0x30
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	e000ed04 	.word	0xe000ed04

08007f88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f94:	2300      	movs	r3, #0
 8007f96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10d      	bne.n	8007fc2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d14d      	bne.n	800804a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 ffcc 	bl	8008f50 <xTaskPriorityDisinherit>
 8007fb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	609a      	str	r2, [r3, #8]
 8007fc0:	e043      	b.n	800804a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d119      	bne.n	8007ffc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6858      	ldr	r0, [r3, #4]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	68b9      	ldr	r1, [r7, #8]
 8007fd4:	f002 ff4f 	bl	800ae76 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe0:	441a      	add	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	685a      	ldr	r2, [r3, #4]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d32b      	bcc.n	800804a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	605a      	str	r2, [r3, #4]
 8007ffa:	e026      	b.n	800804a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	68d8      	ldr	r0, [r3, #12]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008004:	461a      	mov	r2, r3
 8008006:	68b9      	ldr	r1, [r7, #8]
 8008008:	f002 ff35 	bl	800ae76 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	68da      	ldr	r2, [r3, #12]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008014:	425b      	negs	r3, r3
 8008016:	441a      	add	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	68da      	ldr	r2, [r3, #12]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	429a      	cmp	r2, r3
 8008026:	d207      	bcs.n	8008038 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008030:	425b      	negs	r3, r3
 8008032:	441a      	add	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b02      	cmp	r3, #2
 800803c:	d105      	bne.n	800804a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d002      	beq.n	800804a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	3b01      	subs	r3, #1
 8008048:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	1c5a      	adds	r2, r3, #1
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008052:	697b      	ldr	r3, [r7, #20]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800806a:	2b00      	cmp	r3, #0
 800806c:	d018      	beq.n	80080a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68da      	ldr	r2, [r3, #12]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008076:	441a      	add	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68da      	ldr	r2, [r3, #12]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	429a      	cmp	r2, r3
 8008086:	d303      	bcc.n	8008090 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	68d9      	ldr	r1, [r3, #12]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008098:	461a      	mov	r2, r3
 800809a:	6838      	ldr	r0, [r7, #0]
 800809c:	f002 feeb 	bl	800ae76 <memcpy>
	}
}
 80080a0:	bf00      	nop
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80080b0:	f001 fc9a 	bl	80099e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080bc:	e011      	b.n	80080e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d012      	beq.n	80080ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	3324      	adds	r3, #36	@ 0x24
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 fd5c 	bl	8008b88 <xTaskRemoveFromEventList>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80080d6:	f000 fe35 	bl	8008d44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80080da:	7bfb      	ldrb	r3, [r7, #15]
 80080dc:	3b01      	subs	r3, #1
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	dce9      	bgt.n	80080be <prvUnlockQueue+0x16>
 80080ea:	e000      	b.n	80080ee <prvUnlockQueue+0x46>
					break;
 80080ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	22ff      	movs	r2, #255	@ 0xff
 80080f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80080f6:	f001 fca9 	bl	8009a4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080fa:	f001 fc75 	bl	80099e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008104:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008106:	e011      	b.n	800812c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d012      	beq.n	8008136 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	3310      	adds	r3, #16
 8008114:	4618      	mov	r0, r3
 8008116:	f000 fd37 	bl	8008b88 <xTaskRemoveFromEventList>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008120:	f000 fe10 	bl	8008d44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008124:	7bbb      	ldrb	r3, [r7, #14]
 8008126:	3b01      	subs	r3, #1
 8008128:	b2db      	uxtb	r3, r3
 800812a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800812c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008130:	2b00      	cmp	r3, #0
 8008132:	dce9      	bgt.n	8008108 <prvUnlockQueue+0x60>
 8008134:	e000      	b.n	8008138 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008136:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	22ff      	movs	r2, #255	@ 0xff
 800813c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008140:	f001 fc84 	bl	8009a4c <vPortExitCritical>
}
 8008144:	bf00      	nop
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008154:	f001 fc48 	bl	80099e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800815c:	2b00      	cmp	r3, #0
 800815e:	d102      	bne.n	8008166 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008160:	2301      	movs	r3, #1
 8008162:	60fb      	str	r3, [r7, #12]
 8008164:	e001      	b.n	800816a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008166:	2300      	movs	r3, #0
 8008168:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800816a:	f001 fc6f 	bl	8009a4c <vPortExitCritical>

	return xReturn;
 800816e:	68fb      	ldr	r3, [r7, #12]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008180:	f001 fc32 	bl	80099e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800818c:	429a      	cmp	r2, r3
 800818e:	d102      	bne.n	8008196 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008190:	2301      	movs	r3, #1
 8008192:	60fb      	str	r3, [r7, #12]
 8008194:	e001      	b.n	800819a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008196:	2300      	movs	r3, #0
 8008198:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800819a:	f001 fc57 	bl	8009a4c <vPortExitCritical>

	return xReturn;
 800819e:	68fb      	ldr	r3, [r7, #12]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081b2:	2300      	movs	r3, #0
 80081b4:	60fb      	str	r3, [r7, #12]
 80081b6:	e014      	b.n	80081e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80081b8:	4a0f      	ldr	r2, [pc, #60]	@ (80081f8 <vQueueAddToRegistry+0x50>)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10b      	bne.n	80081dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80081c4:	490c      	ldr	r1, [pc, #48]	@ (80081f8 <vQueueAddToRegistry+0x50>)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80081ce:	4a0a      	ldr	r2, [pc, #40]	@ (80081f8 <vQueueAddToRegistry+0x50>)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	00db      	lsls	r3, r3, #3
 80081d4:	4413      	add	r3, r2
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80081da:	e006      	b.n	80081ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	3301      	adds	r3, #1
 80081e0:	60fb      	str	r3, [r7, #12]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2b07      	cmp	r3, #7
 80081e6:	d9e7      	bls.n	80081b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80081e8:	bf00      	nop
 80081ea:	bf00      	nop
 80081ec:	3714      	adds	r7, #20
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	200014c0 	.word	0x200014c0

080081fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800820c:	f001 fbec 	bl	80099e8 <vPortEnterCritical>
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008216:	b25b      	sxtb	r3, r3
 8008218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821c:	d103      	bne.n	8008226 <vQueueWaitForMessageRestricted+0x2a>
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800822c:	b25b      	sxtb	r3, r3
 800822e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008232:	d103      	bne.n	800823c <vQueueWaitForMessageRestricted+0x40>
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800823c:	f001 fc06 	bl	8009a4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008244:	2b00      	cmp	r3, #0
 8008246:	d106      	bne.n	8008256 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	3324      	adds	r3, #36	@ 0x24
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	68b9      	ldr	r1, [r7, #8]
 8008250:	4618      	mov	r0, r3
 8008252:	f000 fc6d 	bl	8008b30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008256:	6978      	ldr	r0, [r7, #20]
 8008258:	f7ff ff26 	bl	80080a8 <prvUnlockQueue>
	}
 800825c:	bf00      	nop
 800825e:	3718      	adds	r7, #24
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008264:	b580      	push	{r7, lr}
 8008266:	b08e      	sub	sp, #56	@ 0x38
 8008268:	af04      	add	r7, sp, #16
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
 8008270:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10b      	bne.n	8008290 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800827c:	f383 8811 	msr	BASEPRI, r3
 8008280:	f3bf 8f6f 	isb	sy
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	623b      	str	r3, [r7, #32]
}
 800828a:	bf00      	nop
 800828c:	bf00      	nop
 800828e:	e7fd      	b.n	800828c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008292:	2b00      	cmp	r3, #0
 8008294:	d10b      	bne.n	80082ae <xTaskCreateStatic+0x4a>
	__asm volatile
 8008296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829a:	f383 8811 	msr	BASEPRI, r3
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	61fb      	str	r3, [r7, #28]
}
 80082a8:	bf00      	nop
 80082aa:	bf00      	nop
 80082ac:	e7fd      	b.n	80082aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80082ae:	23a8      	movs	r3, #168	@ 0xa8
 80082b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	2ba8      	cmp	r3, #168	@ 0xa8
 80082b6:	d00b      	beq.n	80082d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	61bb      	str	r3, [r7, #24]
}
 80082ca:	bf00      	nop
 80082cc:	bf00      	nop
 80082ce:	e7fd      	b.n	80082cc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80082d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80082d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d01e      	beq.n	8008316 <xTaskCreateStatic+0xb2>
 80082d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d01b      	beq.n	8008316 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80082e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80082e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80082e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80082f0:	2300      	movs	r3, #0
 80082f2:	9303      	str	r3, [sp, #12]
 80082f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f6:	9302      	str	r3, [sp, #8]
 80082f8:	f107 0314 	add.w	r3, r7, #20
 80082fc:	9301      	str	r3, [sp, #4]
 80082fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	68b9      	ldr	r1, [r7, #8]
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f000 f851 	bl	80083b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800830e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008310:	f000 f8f6 	bl	8008500 <prvAddNewTaskToReadyList>
 8008314:	e001      	b.n	800831a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008316:	2300      	movs	r3, #0
 8008318:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800831a:	697b      	ldr	r3, [r7, #20]
	}
 800831c:	4618      	mov	r0, r3
 800831e:	3728      	adds	r7, #40	@ 0x28
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008324:	b580      	push	{r7, lr}
 8008326:	b08c      	sub	sp, #48	@ 0x30
 8008328:	af04      	add	r7, sp, #16
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	603b      	str	r3, [r7, #0]
 8008330:	4613      	mov	r3, r2
 8008332:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008334:	88fb      	ldrh	r3, [r7, #6]
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4618      	mov	r0, r3
 800833a:	f001 fc77 	bl	8009c2c <pvPortMalloc>
 800833e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00e      	beq.n	8008364 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008346:	20a8      	movs	r0, #168	@ 0xa8
 8008348:	f001 fc70 	bl	8009c2c <pvPortMalloc>
 800834c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d003      	beq.n	800835c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	631a      	str	r2, [r3, #48]	@ 0x30
 800835a:	e005      	b.n	8008368 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800835c:	6978      	ldr	r0, [r7, #20]
 800835e:	f001 fd33 	bl	8009dc8 <vPortFree>
 8008362:	e001      	b.n	8008368 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008364:	2300      	movs	r3, #0
 8008366:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d017      	beq.n	800839e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008376:	88fa      	ldrh	r2, [r7, #6]
 8008378:	2300      	movs	r3, #0
 800837a:	9303      	str	r3, [sp, #12]
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	9302      	str	r3, [sp, #8]
 8008380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008382:	9301      	str	r3, [sp, #4]
 8008384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	68b9      	ldr	r1, [r7, #8]
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f000 f80f 	bl	80083b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008392:	69f8      	ldr	r0, [r7, #28]
 8008394:	f000 f8b4 	bl	8008500 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008398:	2301      	movs	r3, #1
 800839a:	61bb      	str	r3, [r7, #24]
 800839c:	e002      	b.n	80083a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800839e:	f04f 33ff 	mov.w	r3, #4294967295
 80083a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80083a4:	69bb      	ldr	r3, [r7, #24]
	}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3720      	adds	r7, #32
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
	...

080083b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
 80083bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	461a      	mov	r2, r3
 80083c8:	21a5      	movs	r1, #165	@ 0xa5
 80083ca:	f002 fc7f 	bl	800accc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80083ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80083d8:	3b01      	subs	r3, #1
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4413      	add	r3, r2
 80083de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	f023 0307 	bic.w	r3, r3, #7
 80083e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	f003 0307 	and.w	r3, r3, #7
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00b      	beq.n	800840a <prvInitialiseNewTask+0x5a>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	617b      	str	r3, [r7, #20]
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop
 8008408:	e7fd      	b.n	8008406 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d01f      	beq.n	8008450 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008410:	2300      	movs	r3, #0
 8008412:	61fb      	str	r3, [r7, #28]
 8008414:	e012      	b.n	800843c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	4413      	add	r3, r2
 800841c:	7819      	ldrb	r1, [r3, #0]
 800841e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	4413      	add	r3, r2
 8008424:	3334      	adds	r3, #52	@ 0x34
 8008426:	460a      	mov	r2, r1
 8008428:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	4413      	add	r3, r2
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d006      	beq.n	8008444 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	3301      	adds	r3, #1
 800843a:	61fb      	str	r3, [r7, #28]
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	2b0f      	cmp	r3, #15
 8008440:	d9e9      	bls.n	8008416 <prvInitialiseNewTask+0x66>
 8008442:	e000      	b.n	8008446 <prvInitialiseNewTask+0x96>
			{
				break;
 8008444:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008448:	2200      	movs	r2, #0
 800844a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800844e:	e003      	b.n	8008458 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008452:	2200      	movs	r2, #0
 8008454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845a:	2b37      	cmp	r3, #55	@ 0x37
 800845c:	d901      	bls.n	8008462 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800845e:	2337      	movs	r3, #55	@ 0x37
 8008460:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008464:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008466:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800846c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800846e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008470:	2200      	movs	r2, #0
 8008472:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008476:	3304      	adds	r3, #4
 8008478:	4618      	mov	r0, r3
 800847a:	f7ff f965 	bl	8007748 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800847e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008480:	3318      	adds	r3, #24
 8008482:	4618      	mov	r0, r3
 8008484:	f7ff f960 	bl	8007748 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800848c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800848e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008490:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008496:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800849c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800849e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a0:	2200      	movs	r2, #0
 80084a2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80084ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b0:	3354      	adds	r3, #84	@ 0x54
 80084b2:	224c      	movs	r2, #76	@ 0x4c
 80084b4:	2100      	movs	r1, #0
 80084b6:	4618      	mov	r0, r3
 80084b8:	f002 fc08 	bl	800accc <memset>
 80084bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084be:	4a0d      	ldr	r2, [pc, #52]	@ (80084f4 <prvInitialiseNewTask+0x144>)
 80084c0:	659a      	str	r2, [r3, #88]	@ 0x58
 80084c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c4:	4a0c      	ldr	r2, [pc, #48]	@ (80084f8 <prvInitialiseNewTask+0x148>)
 80084c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80084c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ca:	4a0c      	ldr	r2, [pc, #48]	@ (80084fc <prvInitialiseNewTask+0x14c>)
 80084cc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084ce:	683a      	ldr	r2, [r7, #0]
 80084d0:	68f9      	ldr	r1, [r7, #12]
 80084d2:	69b8      	ldr	r0, [r7, #24]
 80084d4:	f001 f95a 	bl	800978c <pxPortInitialiseStack>
 80084d8:	4602      	mov	r2, r0
 80084da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80084de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d002      	beq.n	80084ea <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084ea:	bf00      	nop
 80084ec:	3720      	adds	r7, #32
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	2000270c 	.word	0x2000270c
 80084f8:	20002774 	.word	0x20002774
 80084fc:	200027dc 	.word	0x200027dc

08008500 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008508:	f001 fa6e 	bl	80099e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800850c:	4b2d      	ldr	r3, [pc, #180]	@ (80085c4 <prvAddNewTaskToReadyList+0xc4>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3301      	adds	r3, #1
 8008512:	4a2c      	ldr	r2, [pc, #176]	@ (80085c4 <prvAddNewTaskToReadyList+0xc4>)
 8008514:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008516:	4b2c      	ldr	r3, [pc, #176]	@ (80085c8 <prvAddNewTaskToReadyList+0xc8>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d109      	bne.n	8008532 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800851e:	4a2a      	ldr	r2, [pc, #168]	@ (80085c8 <prvAddNewTaskToReadyList+0xc8>)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008524:	4b27      	ldr	r3, [pc, #156]	@ (80085c4 <prvAddNewTaskToReadyList+0xc4>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d110      	bne.n	800854e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800852c:	f000 fc2e 	bl	8008d8c <prvInitialiseTaskLists>
 8008530:	e00d      	b.n	800854e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008532:	4b26      	ldr	r3, [pc, #152]	@ (80085cc <prvAddNewTaskToReadyList+0xcc>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d109      	bne.n	800854e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800853a:	4b23      	ldr	r3, [pc, #140]	@ (80085c8 <prvAddNewTaskToReadyList+0xc8>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008544:	429a      	cmp	r2, r3
 8008546:	d802      	bhi.n	800854e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008548:	4a1f      	ldr	r2, [pc, #124]	@ (80085c8 <prvAddNewTaskToReadyList+0xc8>)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800854e:	4b20      	ldr	r3, [pc, #128]	@ (80085d0 <prvAddNewTaskToReadyList+0xd0>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	3301      	adds	r3, #1
 8008554:	4a1e      	ldr	r2, [pc, #120]	@ (80085d0 <prvAddNewTaskToReadyList+0xd0>)
 8008556:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008558:	4b1d      	ldr	r3, [pc, #116]	@ (80085d0 <prvAddNewTaskToReadyList+0xd0>)
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008564:	4b1b      	ldr	r3, [pc, #108]	@ (80085d4 <prvAddNewTaskToReadyList+0xd4>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	429a      	cmp	r2, r3
 800856a:	d903      	bls.n	8008574 <prvAddNewTaskToReadyList+0x74>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008570:	4a18      	ldr	r2, [pc, #96]	@ (80085d4 <prvAddNewTaskToReadyList+0xd4>)
 8008572:	6013      	str	r3, [r2, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008578:	4613      	mov	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4a15      	ldr	r2, [pc, #84]	@ (80085d8 <prvAddNewTaskToReadyList+0xd8>)
 8008582:	441a      	add	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	3304      	adds	r3, #4
 8008588:	4619      	mov	r1, r3
 800858a:	4610      	mov	r0, r2
 800858c:	f7ff f8e9 	bl	8007762 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008590:	f001 fa5c 	bl	8009a4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008594:	4b0d      	ldr	r3, [pc, #52]	@ (80085cc <prvAddNewTaskToReadyList+0xcc>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00e      	beq.n	80085ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800859c:	4b0a      	ldr	r3, [pc, #40]	@ (80085c8 <prvAddNewTaskToReadyList+0xc8>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d207      	bcs.n	80085ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80085aa:	4b0c      	ldr	r3, [pc, #48]	@ (80085dc <prvAddNewTaskToReadyList+0xdc>)
 80085ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085b0:	601a      	str	r2, [r3, #0]
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085ba:	bf00      	nop
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	200019d4 	.word	0x200019d4
 80085c8:	20001500 	.word	0x20001500
 80085cc:	200019e0 	.word	0x200019e0
 80085d0:	200019f0 	.word	0x200019f0
 80085d4:	200019dc 	.word	0x200019dc
 80085d8:	20001504 	.word	0x20001504
 80085dc:	e000ed04 	.word	0xe000ed04

080085e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80085e8:	2300      	movs	r3, #0
 80085ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d018      	beq.n	8008624 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80085f2:	4b14      	ldr	r3, [pc, #80]	@ (8008644 <vTaskDelay+0x64>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00b      	beq.n	8008612 <vTaskDelay+0x32>
	__asm volatile
 80085fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fe:	f383 8811 	msr	BASEPRI, r3
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	60bb      	str	r3, [r7, #8]
}
 800860c:	bf00      	nop
 800860e:	bf00      	nop
 8008610:	e7fd      	b.n	800860e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008612:	f000 f88b 	bl	800872c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008616:	2100      	movs	r1, #0
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fd09 	bl	8009030 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800861e:	f000 f893 	bl	8008748 <xTaskResumeAll>
 8008622:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d107      	bne.n	800863a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800862a:	4b07      	ldr	r3, [pc, #28]	@ (8008648 <vTaskDelay+0x68>)
 800862c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008630:	601a      	str	r2, [r3, #0]
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800863a:	bf00      	nop
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	200019fc 	.word	0x200019fc
 8008648:	e000ed04 	.word	0xe000ed04

0800864c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b08a      	sub	sp, #40	@ 0x28
 8008650:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008652:	2300      	movs	r3, #0
 8008654:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008656:	2300      	movs	r3, #0
 8008658:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800865a:	463a      	mov	r2, r7
 800865c:	1d39      	adds	r1, r7, #4
 800865e:	f107 0308 	add.w	r3, r7, #8
 8008662:	4618      	mov	r0, r3
 8008664:	f7ff f81c 	bl	80076a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008668:	6839      	ldr	r1, [r7, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	9202      	str	r2, [sp, #8]
 8008670:	9301      	str	r3, [sp, #4]
 8008672:	2300      	movs	r3, #0
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	2300      	movs	r3, #0
 8008678:	460a      	mov	r2, r1
 800867a:	4924      	ldr	r1, [pc, #144]	@ (800870c <vTaskStartScheduler+0xc0>)
 800867c:	4824      	ldr	r0, [pc, #144]	@ (8008710 <vTaskStartScheduler+0xc4>)
 800867e:	f7ff fdf1 	bl	8008264 <xTaskCreateStatic>
 8008682:	4603      	mov	r3, r0
 8008684:	4a23      	ldr	r2, [pc, #140]	@ (8008714 <vTaskStartScheduler+0xc8>)
 8008686:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008688:	4b22      	ldr	r3, [pc, #136]	@ (8008714 <vTaskStartScheduler+0xc8>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d002      	beq.n	8008696 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008690:	2301      	movs	r3, #1
 8008692:	617b      	str	r3, [r7, #20]
 8008694:	e001      	b.n	800869a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008696:	2300      	movs	r3, #0
 8008698:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d102      	bne.n	80086a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80086a0:	f000 fd1a 	bl	80090d8 <xTimerCreateTimerTask>
 80086a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d11b      	bne.n	80086e4 <vTaskStartScheduler+0x98>
	__asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	613b      	str	r3, [r7, #16]
}
 80086be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80086c0:	4b15      	ldr	r3, [pc, #84]	@ (8008718 <vTaskStartScheduler+0xcc>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	3354      	adds	r3, #84	@ 0x54
 80086c6:	4a15      	ldr	r2, [pc, #84]	@ (800871c <vTaskStartScheduler+0xd0>)
 80086c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80086ca:	4b15      	ldr	r3, [pc, #84]	@ (8008720 <vTaskStartScheduler+0xd4>)
 80086cc:	f04f 32ff 	mov.w	r2, #4294967295
 80086d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086d2:	4b14      	ldr	r3, [pc, #80]	@ (8008724 <vTaskStartScheduler+0xd8>)
 80086d4:	2201      	movs	r2, #1
 80086d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80086d8:	4b13      	ldr	r3, [pc, #76]	@ (8008728 <vTaskStartScheduler+0xdc>)
 80086da:	2200      	movs	r2, #0
 80086dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086de:	f001 f8df 	bl	80098a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086e2:	e00f      	b.n	8008704 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ea:	d10b      	bne.n	8008704 <vTaskStartScheduler+0xb8>
	__asm volatile
 80086ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f0:	f383 8811 	msr	BASEPRI, r3
 80086f4:	f3bf 8f6f 	isb	sy
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	60fb      	str	r3, [r7, #12]
}
 80086fe:	bf00      	nop
 8008700:	bf00      	nop
 8008702:	e7fd      	b.n	8008700 <vTaskStartScheduler+0xb4>
}
 8008704:	bf00      	nop
 8008706:	3718      	adds	r7, #24
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	0800d320 	.word	0x0800d320
 8008710:	08008d5d 	.word	0x08008d5d
 8008714:	200019f8 	.word	0x200019f8
 8008718:	20001500 	.word	0x20001500
 800871c:	2000001c 	.word	0x2000001c
 8008720:	200019f4 	.word	0x200019f4
 8008724:	200019e0 	.word	0x200019e0
 8008728:	200019d8 	.word	0x200019d8

0800872c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800872c:	b480      	push	{r7}
 800872e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008730:	4b04      	ldr	r3, [pc, #16]	@ (8008744 <vTaskSuspendAll+0x18>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3301      	adds	r3, #1
 8008736:	4a03      	ldr	r2, [pc, #12]	@ (8008744 <vTaskSuspendAll+0x18>)
 8008738:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800873a:	bf00      	nop
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	200019fc 	.word	0x200019fc

08008748 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800874e:	2300      	movs	r3, #0
 8008750:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008752:	2300      	movs	r3, #0
 8008754:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008756:	4b42      	ldr	r3, [pc, #264]	@ (8008860 <xTaskResumeAll+0x118>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10b      	bne.n	8008776 <xTaskResumeAll+0x2e>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	603b      	str	r3, [r7, #0]
}
 8008770:	bf00      	nop
 8008772:	bf00      	nop
 8008774:	e7fd      	b.n	8008772 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008776:	f001 f937 	bl	80099e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800877a:	4b39      	ldr	r3, [pc, #228]	@ (8008860 <xTaskResumeAll+0x118>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	3b01      	subs	r3, #1
 8008780:	4a37      	ldr	r2, [pc, #220]	@ (8008860 <xTaskResumeAll+0x118>)
 8008782:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008784:	4b36      	ldr	r3, [pc, #216]	@ (8008860 <xTaskResumeAll+0x118>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d162      	bne.n	8008852 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800878c:	4b35      	ldr	r3, [pc, #212]	@ (8008864 <xTaskResumeAll+0x11c>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d05e      	beq.n	8008852 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008794:	e02f      	b.n	80087f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008796:	4b34      	ldr	r3, [pc, #208]	@ (8008868 <xTaskResumeAll+0x120>)
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3318      	adds	r3, #24
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7ff f83a 	bl	800781c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	3304      	adds	r3, #4
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7ff f835 	bl	800781c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087b6:	4b2d      	ldr	r3, [pc, #180]	@ (800886c <xTaskResumeAll+0x124>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d903      	bls.n	80087c6 <xTaskResumeAll+0x7e>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c2:	4a2a      	ldr	r2, [pc, #168]	@ (800886c <xTaskResumeAll+0x124>)
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ca:	4613      	mov	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	4a27      	ldr	r2, [pc, #156]	@ (8008870 <xTaskResumeAll+0x128>)
 80087d4:	441a      	add	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	3304      	adds	r3, #4
 80087da:	4619      	mov	r1, r3
 80087dc:	4610      	mov	r0, r2
 80087de:	f7fe ffc0 	bl	8007762 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087e6:	4b23      	ldr	r3, [pc, #140]	@ (8008874 <xTaskResumeAll+0x12c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d302      	bcc.n	80087f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80087f0:	4b21      	ldr	r3, [pc, #132]	@ (8008878 <xTaskResumeAll+0x130>)
 80087f2:	2201      	movs	r2, #1
 80087f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087f6:	4b1c      	ldr	r3, [pc, #112]	@ (8008868 <xTaskResumeAll+0x120>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1cb      	bne.n	8008796 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008804:	f000 fb66 	bl	8008ed4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008808:	4b1c      	ldr	r3, [pc, #112]	@ (800887c <xTaskResumeAll+0x134>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d010      	beq.n	8008836 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008814:	f000 f846 	bl	80088a4 <xTaskIncrementTick>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d002      	beq.n	8008824 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800881e:	4b16      	ldr	r3, [pc, #88]	@ (8008878 <xTaskResumeAll+0x130>)
 8008820:	2201      	movs	r2, #1
 8008822:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	3b01      	subs	r3, #1
 8008828:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1f1      	bne.n	8008814 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008830:	4b12      	ldr	r3, [pc, #72]	@ (800887c <xTaskResumeAll+0x134>)
 8008832:	2200      	movs	r2, #0
 8008834:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008836:	4b10      	ldr	r3, [pc, #64]	@ (8008878 <xTaskResumeAll+0x130>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d009      	beq.n	8008852 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800883e:	2301      	movs	r3, #1
 8008840:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008842:	4b0f      	ldr	r3, [pc, #60]	@ (8008880 <xTaskResumeAll+0x138>)
 8008844:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008852:	f001 f8fb 	bl	8009a4c <vPortExitCritical>

	return xAlreadyYielded;
 8008856:	68bb      	ldr	r3, [r7, #8]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	200019fc 	.word	0x200019fc
 8008864:	200019d4 	.word	0x200019d4
 8008868:	20001994 	.word	0x20001994
 800886c:	200019dc 	.word	0x200019dc
 8008870:	20001504 	.word	0x20001504
 8008874:	20001500 	.word	0x20001500
 8008878:	200019e8 	.word	0x200019e8
 800887c:	200019e4 	.word	0x200019e4
 8008880:	e000ed04 	.word	0xe000ed04

08008884 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800888a:	4b05      	ldr	r3, [pc, #20]	@ (80088a0 <xTaskGetTickCount+0x1c>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008890:	687b      	ldr	r3, [r7, #4]
}
 8008892:	4618      	mov	r0, r3
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	200019d8 	.word	0x200019d8

080088a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80088aa:	2300      	movs	r3, #0
 80088ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088ae:	4b4f      	ldr	r3, [pc, #316]	@ (80089ec <xTaskIncrementTick+0x148>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f040 8090 	bne.w	80089d8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80088b8:	4b4d      	ldr	r3, [pc, #308]	@ (80089f0 <xTaskIncrementTick+0x14c>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3301      	adds	r3, #1
 80088be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80088c0:	4a4b      	ldr	r2, [pc, #300]	@ (80089f0 <xTaskIncrementTick+0x14c>)
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d121      	bne.n	8008910 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80088cc:	4b49      	ldr	r3, [pc, #292]	@ (80089f4 <xTaskIncrementTick+0x150>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00b      	beq.n	80088ee <xTaskIncrementTick+0x4a>
	__asm volatile
 80088d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088da:	f383 8811 	msr	BASEPRI, r3
 80088de:	f3bf 8f6f 	isb	sy
 80088e2:	f3bf 8f4f 	dsb	sy
 80088e6:	603b      	str	r3, [r7, #0]
}
 80088e8:	bf00      	nop
 80088ea:	bf00      	nop
 80088ec:	e7fd      	b.n	80088ea <xTaskIncrementTick+0x46>
 80088ee:	4b41      	ldr	r3, [pc, #260]	@ (80089f4 <xTaskIncrementTick+0x150>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	60fb      	str	r3, [r7, #12]
 80088f4:	4b40      	ldr	r3, [pc, #256]	@ (80089f8 <xTaskIncrementTick+0x154>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a3e      	ldr	r2, [pc, #248]	@ (80089f4 <xTaskIncrementTick+0x150>)
 80088fa:	6013      	str	r3, [r2, #0]
 80088fc:	4a3e      	ldr	r2, [pc, #248]	@ (80089f8 <xTaskIncrementTick+0x154>)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6013      	str	r3, [r2, #0]
 8008902:	4b3e      	ldr	r3, [pc, #248]	@ (80089fc <xTaskIncrementTick+0x158>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3301      	adds	r3, #1
 8008908:	4a3c      	ldr	r2, [pc, #240]	@ (80089fc <xTaskIncrementTick+0x158>)
 800890a:	6013      	str	r3, [r2, #0]
 800890c:	f000 fae2 	bl	8008ed4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008910:	4b3b      	ldr	r3, [pc, #236]	@ (8008a00 <xTaskIncrementTick+0x15c>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	429a      	cmp	r2, r3
 8008918:	d349      	bcc.n	80089ae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800891a:	4b36      	ldr	r3, [pc, #216]	@ (80089f4 <xTaskIncrementTick+0x150>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d104      	bne.n	800892e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008924:	4b36      	ldr	r3, [pc, #216]	@ (8008a00 <xTaskIncrementTick+0x15c>)
 8008926:	f04f 32ff 	mov.w	r2, #4294967295
 800892a:	601a      	str	r2, [r3, #0]
					break;
 800892c:	e03f      	b.n	80089ae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800892e:	4b31      	ldr	r3, [pc, #196]	@ (80089f4 <xTaskIncrementTick+0x150>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	429a      	cmp	r2, r3
 8008944:	d203      	bcs.n	800894e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008946:	4a2e      	ldr	r2, [pc, #184]	@ (8008a00 <xTaskIncrementTick+0x15c>)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800894c:	e02f      	b.n	80089ae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	3304      	adds	r3, #4
 8008952:	4618      	mov	r0, r3
 8008954:	f7fe ff62 	bl	800781c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800895c:	2b00      	cmp	r3, #0
 800895e:	d004      	beq.n	800896a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	3318      	adds	r3, #24
 8008964:	4618      	mov	r0, r3
 8008966:	f7fe ff59 	bl	800781c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800896e:	4b25      	ldr	r3, [pc, #148]	@ (8008a04 <xTaskIncrementTick+0x160>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	429a      	cmp	r2, r3
 8008974:	d903      	bls.n	800897e <xTaskIncrementTick+0xda>
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800897a:	4a22      	ldr	r2, [pc, #136]	@ (8008a04 <xTaskIncrementTick+0x160>)
 800897c:	6013      	str	r3, [r2, #0]
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008982:	4613      	mov	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4413      	add	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4a1f      	ldr	r2, [pc, #124]	@ (8008a08 <xTaskIncrementTick+0x164>)
 800898c:	441a      	add	r2, r3
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	3304      	adds	r3, #4
 8008992:	4619      	mov	r1, r3
 8008994:	4610      	mov	r0, r2
 8008996:	f7fe fee4 	bl	8007762 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800899e:	4b1b      	ldr	r3, [pc, #108]	@ (8008a0c <xTaskIncrementTick+0x168>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d3b8      	bcc.n	800891a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80089a8:	2301      	movs	r3, #1
 80089aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089ac:	e7b5      	b.n	800891a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80089ae:	4b17      	ldr	r3, [pc, #92]	@ (8008a0c <xTaskIncrementTick+0x168>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089b4:	4914      	ldr	r1, [pc, #80]	@ (8008a08 <xTaskIncrementTick+0x164>)
 80089b6:	4613      	mov	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4413      	add	r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	440b      	add	r3, r1
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d901      	bls.n	80089ca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80089c6:	2301      	movs	r3, #1
 80089c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80089ca:	4b11      	ldr	r3, [pc, #68]	@ (8008a10 <xTaskIncrementTick+0x16c>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d007      	beq.n	80089e2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80089d2:	2301      	movs	r3, #1
 80089d4:	617b      	str	r3, [r7, #20]
 80089d6:	e004      	b.n	80089e2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80089d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008a14 <xTaskIncrementTick+0x170>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	3301      	adds	r3, #1
 80089de:	4a0d      	ldr	r2, [pc, #52]	@ (8008a14 <xTaskIncrementTick+0x170>)
 80089e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80089e2:	697b      	ldr	r3, [r7, #20]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3718      	adds	r7, #24
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	200019fc 	.word	0x200019fc
 80089f0:	200019d8 	.word	0x200019d8
 80089f4:	2000198c 	.word	0x2000198c
 80089f8:	20001990 	.word	0x20001990
 80089fc:	200019ec 	.word	0x200019ec
 8008a00:	200019f4 	.word	0x200019f4
 8008a04:	200019dc 	.word	0x200019dc
 8008a08:	20001504 	.word	0x20001504
 8008a0c:	20001500 	.word	0x20001500
 8008a10:	200019e8 	.word	0x200019e8
 8008a14:	200019e4 	.word	0x200019e4

08008a18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a1e:	4b2b      	ldr	r3, [pc, #172]	@ (8008acc <vTaskSwitchContext+0xb4>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d003      	beq.n	8008a2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a26:	4b2a      	ldr	r3, [pc, #168]	@ (8008ad0 <vTaskSwitchContext+0xb8>)
 8008a28:	2201      	movs	r2, #1
 8008a2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a2c:	e047      	b.n	8008abe <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008a2e:	4b28      	ldr	r3, [pc, #160]	@ (8008ad0 <vTaskSwitchContext+0xb8>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a34:	4b27      	ldr	r3, [pc, #156]	@ (8008ad4 <vTaskSwitchContext+0xbc>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	60fb      	str	r3, [r7, #12]
 8008a3a:	e011      	b.n	8008a60 <vTaskSwitchContext+0x48>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10b      	bne.n	8008a5a <vTaskSwitchContext+0x42>
	__asm volatile
 8008a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a46:	f383 8811 	msr	BASEPRI, r3
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	607b      	str	r3, [r7, #4]
}
 8008a54:	bf00      	nop
 8008a56:	bf00      	nop
 8008a58:	e7fd      	b.n	8008a56 <vTaskSwitchContext+0x3e>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	60fb      	str	r3, [r7, #12]
 8008a60:	491d      	ldr	r1, [pc, #116]	@ (8008ad8 <vTaskSwitchContext+0xc0>)
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	4613      	mov	r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	4413      	add	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	440b      	add	r3, r1
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d0e3      	beq.n	8008a3c <vTaskSwitchContext+0x24>
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	4613      	mov	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4a16      	ldr	r2, [pc, #88]	@ (8008ad8 <vTaskSwitchContext+0xc0>)
 8008a80:	4413      	add	r3, r2
 8008a82:	60bb      	str	r3, [r7, #8]
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	685a      	ldr	r2, [r3, #4]
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	605a      	str	r2, [r3, #4]
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	3308      	adds	r3, #8
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d104      	bne.n	8008aa4 <vTaskSwitchContext+0x8c>
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	685a      	ldr	r2, [r3, #4]
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	605a      	str	r2, [r3, #4]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	4a0c      	ldr	r2, [pc, #48]	@ (8008adc <vTaskSwitchContext+0xc4>)
 8008aac:	6013      	str	r3, [r2, #0]
 8008aae:	4a09      	ldr	r2, [pc, #36]	@ (8008ad4 <vTaskSwitchContext+0xbc>)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ab4:	4b09      	ldr	r3, [pc, #36]	@ (8008adc <vTaskSwitchContext+0xc4>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3354      	adds	r3, #84	@ 0x54
 8008aba:	4a09      	ldr	r2, [pc, #36]	@ (8008ae0 <vTaskSwitchContext+0xc8>)
 8008abc:	6013      	str	r3, [r2, #0]
}
 8008abe:	bf00      	nop
 8008ac0:	3714      	adds	r7, #20
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	200019fc 	.word	0x200019fc
 8008ad0:	200019e8 	.word	0x200019e8
 8008ad4:	200019dc 	.word	0x200019dc
 8008ad8:	20001504 	.word	0x20001504
 8008adc:	20001500 	.word	0x20001500
 8008ae0:	2000001c 	.word	0x2000001c

08008ae4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10b      	bne.n	8008b0c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af8:	f383 8811 	msr	BASEPRI, r3
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	60fb      	str	r3, [r7, #12]
}
 8008b06:	bf00      	nop
 8008b08:	bf00      	nop
 8008b0a:	e7fd      	b.n	8008b08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b0c:	4b07      	ldr	r3, [pc, #28]	@ (8008b2c <vTaskPlaceOnEventList+0x48>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3318      	adds	r3, #24
 8008b12:	4619      	mov	r1, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7fe fe48 	bl	80077aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	6838      	ldr	r0, [r7, #0]
 8008b1e:	f000 fa87 	bl	8009030 <prvAddCurrentTaskToDelayedList>
}
 8008b22:	bf00      	nop
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20001500 	.word	0x20001500

08008b30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10b      	bne.n	8008b5a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	617b      	str	r3, [r7, #20]
}
 8008b54:	bf00      	nop
 8008b56:	bf00      	nop
 8008b58:	e7fd      	b.n	8008b56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8008b84 <vTaskPlaceOnEventListRestricted+0x54>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3318      	adds	r3, #24
 8008b60:	4619      	mov	r1, r3
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f7fe fdfd 	bl	8007762 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d002      	beq.n	8008b74 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b72:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b74:	6879      	ldr	r1, [r7, #4]
 8008b76:	68b8      	ldr	r0, [r7, #8]
 8008b78:	f000 fa5a 	bl	8009030 <prvAddCurrentTaskToDelayedList>
	}
 8008b7c:	bf00      	nop
 8008b7e:	3718      	adds	r7, #24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	20001500 	.word	0x20001500

08008b88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10b      	bne.n	8008bb6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba2:	f383 8811 	msr	BASEPRI, r3
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	60fb      	str	r3, [r7, #12]
}
 8008bb0:	bf00      	nop
 8008bb2:	bf00      	nop
 8008bb4:	e7fd      	b.n	8008bb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	3318      	adds	r3, #24
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7fe fe2e 	bl	800781c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8008c38 <xTaskRemoveFromEventList+0xb0>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d11d      	bne.n	8008c04 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	3304      	adds	r3, #4
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7fe fe25 	bl	800781c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bd6:	4b19      	ldr	r3, [pc, #100]	@ (8008c3c <xTaskRemoveFromEventList+0xb4>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d903      	bls.n	8008be6 <xTaskRemoveFromEventList+0x5e>
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be2:	4a16      	ldr	r2, [pc, #88]	@ (8008c3c <xTaskRemoveFromEventList+0xb4>)
 8008be4:	6013      	str	r3, [r2, #0]
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bea:	4613      	mov	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4413      	add	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4a13      	ldr	r2, [pc, #76]	@ (8008c40 <xTaskRemoveFromEventList+0xb8>)
 8008bf4:	441a      	add	r2, r3
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	3304      	adds	r3, #4
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	4610      	mov	r0, r2
 8008bfe:	f7fe fdb0 	bl	8007762 <vListInsertEnd>
 8008c02:	e005      	b.n	8008c10 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	3318      	adds	r3, #24
 8008c08:	4619      	mov	r1, r3
 8008c0a:	480e      	ldr	r0, [pc, #56]	@ (8008c44 <xTaskRemoveFromEventList+0xbc>)
 8008c0c:	f7fe fda9 	bl	8007762 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c14:	4b0c      	ldr	r3, [pc, #48]	@ (8008c48 <xTaskRemoveFromEventList+0xc0>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d905      	bls.n	8008c2a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c22:	4b0a      	ldr	r3, [pc, #40]	@ (8008c4c <xTaskRemoveFromEventList+0xc4>)
 8008c24:	2201      	movs	r2, #1
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	e001      	b.n	8008c2e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c2e:	697b      	ldr	r3, [r7, #20]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	200019fc 	.word	0x200019fc
 8008c3c:	200019dc 	.word	0x200019dc
 8008c40:	20001504 	.word	0x20001504
 8008c44:	20001994 	.word	0x20001994
 8008c48:	20001500 	.word	0x20001500
 8008c4c:	200019e8 	.word	0x200019e8

08008c50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c58:	4b06      	ldr	r3, [pc, #24]	@ (8008c74 <vTaskInternalSetTimeOutState+0x24>)
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c60:	4b05      	ldr	r3, [pc, #20]	@ (8008c78 <vTaskInternalSetTimeOutState+0x28>)
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	605a      	str	r2, [r3, #4]
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr
 8008c74:	200019ec 	.word	0x200019ec
 8008c78:	200019d8 	.word	0x200019d8

08008c7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b088      	sub	sp, #32
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10b      	bne.n	8008ca4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c90:	f383 8811 	msr	BASEPRI, r3
 8008c94:	f3bf 8f6f 	isb	sy
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	613b      	str	r3, [r7, #16]
}
 8008c9e:	bf00      	nop
 8008ca0:	bf00      	nop
 8008ca2:	e7fd      	b.n	8008ca0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10b      	bne.n	8008cc2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	60fb      	str	r3, [r7, #12]
}
 8008cbc:	bf00      	nop
 8008cbe:	bf00      	nop
 8008cc0:	e7fd      	b.n	8008cbe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008cc2:	f000 fe91 	bl	80099e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8008d3c <xTaskCheckForTimeOut+0xc0>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cde:	d102      	bne.n	8008ce6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	61fb      	str	r3, [r7, #28]
 8008ce4:	e023      	b.n	8008d2e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	4b15      	ldr	r3, [pc, #84]	@ (8008d40 <xTaskCheckForTimeOut+0xc4>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d007      	beq.n	8008d02 <xTaskCheckForTimeOut+0x86>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	69ba      	ldr	r2, [r7, #24]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d302      	bcc.n	8008d02 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	61fb      	str	r3, [r7, #28]
 8008d00:	e015      	b.n	8008d2e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d20b      	bcs.n	8008d24 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	1ad2      	subs	r2, r2, r3
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7ff ff99 	bl	8008c50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	61fb      	str	r3, [r7, #28]
 8008d22:	e004      	b.n	8008d2e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	2200      	movs	r2, #0
 8008d28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d2e:	f000 fe8d 	bl	8009a4c <vPortExitCritical>

	return xReturn;
 8008d32:	69fb      	ldr	r3, [r7, #28]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3720      	adds	r7, #32
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	200019d8 	.word	0x200019d8
 8008d40:	200019ec 	.word	0x200019ec

08008d44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d44:	b480      	push	{r7}
 8008d46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d48:	4b03      	ldr	r3, [pc, #12]	@ (8008d58 <vTaskMissedYield+0x14>)
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	601a      	str	r2, [r3, #0]
}
 8008d4e:	bf00      	nop
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr
 8008d58:	200019e8 	.word	0x200019e8

08008d5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d64:	f000 f852 	bl	8008e0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d68:	4b06      	ldr	r3, [pc, #24]	@ (8008d84 <prvIdleTask+0x28>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d9f9      	bls.n	8008d64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d70:	4b05      	ldr	r3, [pc, #20]	@ (8008d88 <prvIdleTask+0x2c>)
 8008d72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d76:	601a      	str	r2, [r3, #0]
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d80:	e7f0      	b.n	8008d64 <prvIdleTask+0x8>
 8008d82:	bf00      	nop
 8008d84:	20001504 	.word	0x20001504
 8008d88:	e000ed04 	.word	0xe000ed04

08008d8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d92:	2300      	movs	r3, #0
 8008d94:	607b      	str	r3, [r7, #4]
 8008d96:	e00c      	b.n	8008db2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4a12      	ldr	r2, [pc, #72]	@ (8008dec <prvInitialiseTaskLists+0x60>)
 8008da4:	4413      	add	r3, r2
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fe fcae 	bl	8007708 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	3301      	adds	r3, #1
 8008db0:	607b      	str	r3, [r7, #4]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b37      	cmp	r3, #55	@ 0x37
 8008db6:	d9ef      	bls.n	8008d98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008db8:	480d      	ldr	r0, [pc, #52]	@ (8008df0 <prvInitialiseTaskLists+0x64>)
 8008dba:	f7fe fca5 	bl	8007708 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008dbe:	480d      	ldr	r0, [pc, #52]	@ (8008df4 <prvInitialiseTaskLists+0x68>)
 8008dc0:	f7fe fca2 	bl	8007708 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008dc4:	480c      	ldr	r0, [pc, #48]	@ (8008df8 <prvInitialiseTaskLists+0x6c>)
 8008dc6:	f7fe fc9f 	bl	8007708 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008dca:	480c      	ldr	r0, [pc, #48]	@ (8008dfc <prvInitialiseTaskLists+0x70>)
 8008dcc:	f7fe fc9c 	bl	8007708 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008dd0:	480b      	ldr	r0, [pc, #44]	@ (8008e00 <prvInitialiseTaskLists+0x74>)
 8008dd2:	f7fe fc99 	bl	8007708 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8008e04 <prvInitialiseTaskLists+0x78>)
 8008dd8:	4a05      	ldr	r2, [pc, #20]	@ (8008df0 <prvInitialiseTaskLists+0x64>)
 8008dda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8008e08 <prvInitialiseTaskLists+0x7c>)
 8008dde:	4a05      	ldr	r2, [pc, #20]	@ (8008df4 <prvInitialiseTaskLists+0x68>)
 8008de0:	601a      	str	r2, [r3, #0]
}
 8008de2:	bf00      	nop
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	20001504 	.word	0x20001504
 8008df0:	20001964 	.word	0x20001964
 8008df4:	20001978 	.word	0x20001978
 8008df8:	20001994 	.word	0x20001994
 8008dfc:	200019a8 	.word	0x200019a8
 8008e00:	200019c0 	.word	0x200019c0
 8008e04:	2000198c 	.word	0x2000198c
 8008e08:	20001990 	.word	0x20001990

08008e0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e12:	e019      	b.n	8008e48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e14:	f000 fde8 	bl	80099e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e18:	4b10      	ldr	r3, [pc, #64]	@ (8008e5c <prvCheckTasksWaitingTermination+0x50>)
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	3304      	adds	r3, #4
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fe fcf9 	bl	800781c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e60 <prvCheckTasksWaitingTermination+0x54>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	4a0b      	ldr	r2, [pc, #44]	@ (8008e60 <prvCheckTasksWaitingTermination+0x54>)
 8008e32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e34:	4b0b      	ldr	r3, [pc, #44]	@ (8008e64 <prvCheckTasksWaitingTermination+0x58>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8008e64 <prvCheckTasksWaitingTermination+0x58>)
 8008e3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e3e:	f000 fe05 	bl	8009a4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f810 	bl	8008e68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e48:	4b06      	ldr	r3, [pc, #24]	@ (8008e64 <prvCheckTasksWaitingTermination+0x58>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1e1      	bne.n	8008e14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e50:	bf00      	nop
 8008e52:	bf00      	nop
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	200019a8 	.word	0x200019a8
 8008e60:	200019d4 	.word	0x200019d4
 8008e64:	200019bc 	.word	0x200019bc

08008e68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3354      	adds	r3, #84	@ 0x54
 8008e74:	4618      	mov	r0, r3
 8008e76:	f001 ff45 	bl	800ad04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d108      	bne.n	8008e96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 ff9d 	bl	8009dc8 <vPortFree>
				vPortFree( pxTCB );
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 ff9a 	bl	8009dc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e94:	e019      	b.n	8008eca <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d103      	bne.n	8008ea8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 ff91 	bl	8009dc8 <vPortFree>
	}
 8008ea6:	e010      	b.n	8008eca <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d00b      	beq.n	8008eca <prvDeleteTCB+0x62>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	60fb      	str	r3, [r7, #12]
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	e7fd      	b.n	8008ec6 <prvDeleteTCB+0x5e>
	}
 8008eca:	bf00      	nop
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
	...

08008ed4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008eda:	4b0c      	ldr	r3, [pc, #48]	@ (8008f0c <prvResetNextTaskUnblockTime+0x38>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d104      	bne.n	8008eee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8008f10 <prvResetNextTaskUnblockTime+0x3c>)
 8008ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8008eea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008eec:	e008      	b.n	8008f00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eee:	4b07      	ldr	r3, [pc, #28]	@ (8008f0c <prvResetNextTaskUnblockTime+0x38>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	4a04      	ldr	r2, [pc, #16]	@ (8008f10 <prvResetNextTaskUnblockTime+0x3c>)
 8008efe:	6013      	str	r3, [r2, #0]
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	2000198c 	.word	0x2000198c
 8008f10:	200019f4 	.word	0x200019f4

08008f14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8008f48 <xTaskGetSchedulerState+0x34>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d102      	bne.n	8008f28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f22:	2301      	movs	r3, #1
 8008f24:	607b      	str	r3, [r7, #4]
 8008f26:	e008      	b.n	8008f3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f28:	4b08      	ldr	r3, [pc, #32]	@ (8008f4c <xTaskGetSchedulerState+0x38>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d102      	bne.n	8008f36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f30:	2302      	movs	r3, #2
 8008f32:	607b      	str	r3, [r7, #4]
 8008f34:	e001      	b.n	8008f3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f36:	2300      	movs	r3, #0
 8008f38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f3a:	687b      	ldr	r3, [r7, #4]
	}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr
 8008f48:	200019e0 	.word	0x200019e0
 8008f4c:	200019fc 	.word	0x200019fc

08008f50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d058      	beq.n	8009018 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f66:	4b2f      	ldr	r3, [pc, #188]	@ (8009024 <xTaskPriorityDisinherit+0xd4>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d00b      	beq.n	8008f88 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	60fb      	str	r3, [r7, #12]
}
 8008f82:	bf00      	nop
 8008f84:	bf00      	nop
 8008f86:	e7fd      	b.n	8008f84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10b      	bne.n	8008fa8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	60bb      	str	r3, [r7, #8]
}
 8008fa2:	bf00      	nop
 8008fa4:	bf00      	nop
 8008fa6:	e7fd      	b.n	8008fa4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fac:	1e5a      	subs	r2, r3, #1
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d02c      	beq.n	8009018 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d128      	bne.n	8009018 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	3304      	adds	r3, #4
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fe fc26 	bl	800781c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fdc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8009028 <xTaskPriorityDisinherit+0xd8>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d903      	bls.n	8008ff8 <xTaskPriorityDisinherit+0xa8>
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8009028 <xTaskPriorityDisinherit+0xd8>)
 8008ff6:	6013      	str	r3, [r2, #0]
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4a09      	ldr	r2, [pc, #36]	@ (800902c <xTaskPriorityDisinherit+0xdc>)
 8009006:	441a      	add	r2, r3
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	3304      	adds	r3, #4
 800900c:	4619      	mov	r1, r3
 800900e:	4610      	mov	r0, r2
 8009010:	f7fe fba7 	bl	8007762 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009014:	2301      	movs	r3, #1
 8009016:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009018:	697b      	ldr	r3, [r7, #20]
	}
 800901a:	4618      	mov	r0, r3
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20001500 	.word	0x20001500
 8009028:	200019dc 	.word	0x200019dc
 800902c:	20001504 	.word	0x20001504

08009030 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800903a:	4b21      	ldr	r3, [pc, #132]	@ (80090c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009040:	4b20      	ldr	r3, [pc, #128]	@ (80090c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3304      	adds	r3, #4
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe fbe8 	bl	800781c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009052:	d10a      	bne.n	800906a <prvAddCurrentTaskToDelayedList+0x3a>
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d007      	beq.n	800906a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800905a:	4b1a      	ldr	r3, [pc, #104]	@ (80090c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3304      	adds	r3, #4
 8009060:	4619      	mov	r1, r3
 8009062:	4819      	ldr	r0, [pc, #100]	@ (80090c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009064:	f7fe fb7d 	bl	8007762 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009068:	e026      	b.n	80090b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4413      	add	r3, r2
 8009070:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009072:	4b14      	ldr	r3, [pc, #80]	@ (80090c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	429a      	cmp	r2, r3
 8009080:	d209      	bcs.n	8009096 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009082:	4b12      	ldr	r3, [pc, #72]	@ (80090cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	4b0f      	ldr	r3, [pc, #60]	@ (80090c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3304      	adds	r3, #4
 800908c:	4619      	mov	r1, r3
 800908e:	4610      	mov	r0, r2
 8009090:	f7fe fb8b 	bl	80077aa <vListInsert>
}
 8009094:	e010      	b.n	80090b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009096:	4b0e      	ldr	r3, [pc, #56]	@ (80090d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	4b0a      	ldr	r3, [pc, #40]	@ (80090c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3304      	adds	r3, #4
 80090a0:	4619      	mov	r1, r3
 80090a2:	4610      	mov	r0, r2
 80090a4:	f7fe fb81 	bl	80077aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80090a8:	4b0a      	ldr	r3, [pc, #40]	@ (80090d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d202      	bcs.n	80090b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80090b2:	4a08      	ldr	r2, [pc, #32]	@ (80090d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	6013      	str	r3, [r2, #0]
}
 80090b8:	bf00      	nop
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	200019d8 	.word	0x200019d8
 80090c4:	20001500 	.word	0x20001500
 80090c8:	200019c0 	.word	0x200019c0
 80090cc:	20001990 	.word	0x20001990
 80090d0:	2000198c 	.word	0x2000198c
 80090d4:	200019f4 	.word	0x200019f4

080090d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08a      	sub	sp, #40	@ 0x28
 80090dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80090de:	2300      	movs	r3, #0
 80090e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80090e2:	f000 fb13 	bl	800970c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80090e6:	4b1d      	ldr	r3, [pc, #116]	@ (800915c <xTimerCreateTimerTask+0x84>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d021      	beq.n	8009132 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80090ee:	2300      	movs	r3, #0
 80090f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80090f2:	2300      	movs	r3, #0
 80090f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80090f6:	1d3a      	adds	r2, r7, #4
 80090f8:	f107 0108 	add.w	r1, r7, #8
 80090fc:	f107 030c 	add.w	r3, r7, #12
 8009100:	4618      	mov	r0, r3
 8009102:	f7fe fae7 	bl	80076d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009106:	6879      	ldr	r1, [r7, #4]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	9202      	str	r2, [sp, #8]
 800910e:	9301      	str	r3, [sp, #4]
 8009110:	2302      	movs	r3, #2
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	2300      	movs	r3, #0
 8009116:	460a      	mov	r2, r1
 8009118:	4911      	ldr	r1, [pc, #68]	@ (8009160 <xTimerCreateTimerTask+0x88>)
 800911a:	4812      	ldr	r0, [pc, #72]	@ (8009164 <xTimerCreateTimerTask+0x8c>)
 800911c:	f7ff f8a2 	bl	8008264 <xTaskCreateStatic>
 8009120:	4603      	mov	r3, r0
 8009122:	4a11      	ldr	r2, [pc, #68]	@ (8009168 <xTimerCreateTimerTask+0x90>)
 8009124:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009126:	4b10      	ldr	r3, [pc, #64]	@ (8009168 <xTimerCreateTimerTask+0x90>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800912e:	2301      	movs	r3, #1
 8009130:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10b      	bne.n	8009150 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800913c:	f383 8811 	msr	BASEPRI, r3
 8009140:	f3bf 8f6f 	isb	sy
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	613b      	str	r3, [r7, #16]
}
 800914a:	bf00      	nop
 800914c:	bf00      	nop
 800914e:	e7fd      	b.n	800914c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009150:	697b      	ldr	r3, [r7, #20]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3718      	adds	r7, #24
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	20001a30 	.word	0x20001a30
 8009160:	0800d328 	.word	0x0800d328
 8009164:	080092a5 	.word	0x080092a5
 8009168:	20001a34 	.word	0x20001a34

0800916c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b08a      	sub	sp, #40	@ 0x28
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
 8009178:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800917a:	2300      	movs	r3, #0
 800917c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10b      	bne.n	800919c <xTimerGenericCommand+0x30>
	__asm volatile
 8009184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	623b      	str	r3, [r7, #32]
}
 8009196:	bf00      	nop
 8009198:	bf00      	nop
 800919a:	e7fd      	b.n	8009198 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800919c:	4b19      	ldr	r3, [pc, #100]	@ (8009204 <xTimerGenericCommand+0x98>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d02a      	beq.n	80091fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2b05      	cmp	r3, #5
 80091b4:	dc18      	bgt.n	80091e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80091b6:	f7ff fead 	bl	8008f14 <xTaskGetSchedulerState>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b02      	cmp	r3, #2
 80091be:	d109      	bne.n	80091d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80091c0:	4b10      	ldr	r3, [pc, #64]	@ (8009204 <xTimerGenericCommand+0x98>)
 80091c2:	6818      	ldr	r0, [r3, #0]
 80091c4:	f107 0110 	add.w	r1, r7, #16
 80091c8:	2300      	movs	r3, #0
 80091ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091cc:	f7fe fc5a 	bl	8007a84 <xQueueGenericSend>
 80091d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80091d2:	e012      	b.n	80091fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80091d4:	4b0b      	ldr	r3, [pc, #44]	@ (8009204 <xTimerGenericCommand+0x98>)
 80091d6:	6818      	ldr	r0, [r3, #0]
 80091d8:	f107 0110 	add.w	r1, r7, #16
 80091dc:	2300      	movs	r3, #0
 80091de:	2200      	movs	r2, #0
 80091e0:	f7fe fc50 	bl	8007a84 <xQueueGenericSend>
 80091e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80091e6:	e008      	b.n	80091fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80091e8:	4b06      	ldr	r3, [pc, #24]	@ (8009204 <xTimerGenericCommand+0x98>)
 80091ea:	6818      	ldr	r0, [r3, #0]
 80091ec:	f107 0110 	add.w	r1, r7, #16
 80091f0:	2300      	movs	r3, #0
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	f7fe fd48 	bl	8007c88 <xQueueGenericSendFromISR>
 80091f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80091fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3728      	adds	r7, #40	@ 0x28
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	20001a30 	.word	0x20001a30

08009208 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b088      	sub	sp, #32
 800920c:	af02      	add	r7, sp, #8
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009212:	4b23      	ldr	r3, [pc, #140]	@ (80092a0 <prvProcessExpiredTimer+0x98>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	3304      	adds	r3, #4
 8009220:	4618      	mov	r0, r3
 8009222:	f7fe fafb 	bl	800781c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800922c:	f003 0304 	and.w	r3, r3, #4
 8009230:	2b00      	cmp	r3, #0
 8009232:	d023      	beq.n	800927c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	699a      	ldr	r2, [r3, #24]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	18d1      	adds	r1, r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	6978      	ldr	r0, [r7, #20]
 8009242:	f000 f8d5 	bl	80093f0 <prvInsertTimerInActiveList>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d020      	beq.n	800928e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800924c:	2300      	movs	r3, #0
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	2300      	movs	r3, #0
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	2100      	movs	r1, #0
 8009256:	6978      	ldr	r0, [r7, #20]
 8009258:	f7ff ff88 	bl	800916c <xTimerGenericCommand>
 800925c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d114      	bne.n	800928e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	60fb      	str	r3, [r7, #12]
}
 8009276:	bf00      	nop
 8009278:	bf00      	nop
 800927a:	e7fd      	b.n	8009278 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009282:	f023 0301 	bic.w	r3, r3, #1
 8009286:	b2da      	uxtb	r2, r3
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	6978      	ldr	r0, [r7, #20]
 8009294:	4798      	blx	r3
}
 8009296:	bf00      	nop
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	20001a28 	.word	0x20001a28

080092a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092ac:	f107 0308 	add.w	r3, r7, #8
 80092b0:	4618      	mov	r0, r3
 80092b2:	f000 f859 	bl	8009368 <prvGetNextExpireTime>
 80092b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	4619      	mov	r1, r3
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f000 f805 	bl	80092cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80092c2:	f000 f8d7 	bl	8009474 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092c6:	bf00      	nop
 80092c8:	e7f0      	b.n	80092ac <prvTimerTask+0x8>
	...

080092cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80092d6:	f7ff fa29 	bl	800872c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092da:	f107 0308 	add.w	r3, r7, #8
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 f866 	bl	80093b0 <prvSampleTimeNow>
 80092e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d130      	bne.n	800934e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d10a      	bne.n	8009308 <prvProcessTimerOrBlockTask+0x3c>
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d806      	bhi.n	8009308 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80092fa:	f7ff fa25 	bl	8008748 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80092fe:	68f9      	ldr	r1, [r7, #12]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f7ff ff81 	bl	8009208 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009306:	e024      	b.n	8009352 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d008      	beq.n	8009320 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800930e:	4b13      	ldr	r3, [pc, #76]	@ (800935c <prvProcessTimerOrBlockTask+0x90>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d101      	bne.n	800931c <prvProcessTimerOrBlockTask+0x50>
 8009318:	2301      	movs	r3, #1
 800931a:	e000      	b.n	800931e <prvProcessTimerOrBlockTask+0x52>
 800931c:	2300      	movs	r3, #0
 800931e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009320:	4b0f      	ldr	r3, [pc, #60]	@ (8009360 <prvProcessTimerOrBlockTask+0x94>)
 8009322:	6818      	ldr	r0, [r3, #0]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	4619      	mov	r1, r3
 800932e:	f7fe ff65 	bl	80081fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009332:	f7ff fa09 	bl	8008748 <xTaskResumeAll>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10a      	bne.n	8009352 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800933c:	4b09      	ldr	r3, [pc, #36]	@ (8009364 <prvProcessTimerOrBlockTask+0x98>)
 800933e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009342:	601a      	str	r2, [r3, #0]
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	f3bf 8f6f 	isb	sy
}
 800934c:	e001      	b.n	8009352 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800934e:	f7ff f9fb 	bl	8008748 <xTaskResumeAll>
}
 8009352:	bf00      	nop
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	20001a2c 	.word	0x20001a2c
 8009360:	20001a30 	.word	0x20001a30
 8009364:	e000ed04 	.word	0xe000ed04

08009368 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009370:	4b0e      	ldr	r3, [pc, #56]	@ (80093ac <prvGetNextExpireTime+0x44>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d101      	bne.n	800937e <prvGetNextExpireTime+0x16>
 800937a:	2201      	movs	r2, #1
 800937c:	e000      	b.n	8009380 <prvGetNextExpireTime+0x18>
 800937e:	2200      	movs	r2, #0
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d105      	bne.n	8009398 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800938c:	4b07      	ldr	r3, [pc, #28]	@ (80093ac <prvGetNextExpireTime+0x44>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	60fb      	str	r3, [r7, #12]
 8009396:	e001      	b.n	800939c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009398:	2300      	movs	r3, #0
 800939a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800939c:	68fb      	ldr	r3, [r7, #12]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	20001a28 	.word	0x20001a28

080093b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80093b8:	f7ff fa64 	bl	8008884 <xTaskGetTickCount>
 80093bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80093be:	4b0b      	ldr	r3, [pc, #44]	@ (80093ec <prvSampleTimeNow+0x3c>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d205      	bcs.n	80093d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80093c8:	f000 f93a 	bl	8009640 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	601a      	str	r2, [r3, #0]
 80093d2:	e002      	b.n	80093da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80093da:	4a04      	ldr	r2, [pc, #16]	@ (80093ec <prvSampleTimeNow+0x3c>)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80093e0:	68fb      	ldr	r3, [r7, #12]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	20001a38 	.word	0x20001a38

080093f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	607a      	str	r2, [r7, #4]
 80093fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80093fe:	2300      	movs	r3, #0
 8009400:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800940e:	68ba      	ldr	r2, [r7, #8]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	429a      	cmp	r2, r3
 8009414:	d812      	bhi.n	800943c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	1ad2      	subs	r2, r2, r3
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	429a      	cmp	r2, r3
 8009422:	d302      	bcc.n	800942a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009424:	2301      	movs	r3, #1
 8009426:	617b      	str	r3, [r7, #20]
 8009428:	e01b      	b.n	8009462 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800942a:	4b10      	ldr	r3, [pc, #64]	@ (800946c <prvInsertTimerInActiveList+0x7c>)
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	3304      	adds	r3, #4
 8009432:	4619      	mov	r1, r3
 8009434:	4610      	mov	r0, r2
 8009436:	f7fe f9b8 	bl	80077aa <vListInsert>
 800943a:	e012      	b.n	8009462 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	429a      	cmp	r2, r3
 8009442:	d206      	bcs.n	8009452 <prvInsertTimerInActiveList+0x62>
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	429a      	cmp	r2, r3
 800944a:	d302      	bcc.n	8009452 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800944c:	2301      	movs	r3, #1
 800944e:	617b      	str	r3, [r7, #20]
 8009450:	e007      	b.n	8009462 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009452:	4b07      	ldr	r3, [pc, #28]	@ (8009470 <prvInsertTimerInActiveList+0x80>)
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	3304      	adds	r3, #4
 800945a:	4619      	mov	r1, r3
 800945c:	4610      	mov	r0, r2
 800945e:	f7fe f9a4 	bl	80077aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009462:	697b      	ldr	r3, [r7, #20]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3718      	adds	r7, #24
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	20001a2c 	.word	0x20001a2c
 8009470:	20001a28 	.word	0x20001a28

08009474 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b08e      	sub	sp, #56	@ 0x38
 8009478:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800947a:	e0ce      	b.n	800961a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	da19      	bge.n	80094b6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009482:	1d3b      	adds	r3, r7, #4
 8009484:	3304      	adds	r3, #4
 8009486:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10b      	bne.n	80094a6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800948e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	61fb      	str	r3, [r7, #28]
}
 80094a0:	bf00      	nop
 80094a2:	bf00      	nop
 80094a4:	e7fd      	b.n	80094a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80094a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094ac:	6850      	ldr	r0, [r2, #4]
 80094ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094b0:	6892      	ldr	r2, [r2, #8]
 80094b2:	4611      	mov	r1, r2
 80094b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f2c0 80ae 	blt.w	800961a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80094c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d004      	beq.n	80094d4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094cc:	3304      	adds	r3, #4
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fe f9a4 	bl	800781c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094d4:	463b      	mov	r3, r7
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7ff ff6a 	bl	80093b0 <prvSampleTimeNow>
 80094dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2b09      	cmp	r3, #9
 80094e2:	f200 8097 	bhi.w	8009614 <prvProcessReceivedCommands+0x1a0>
 80094e6:	a201      	add	r2, pc, #4	@ (adr r2, 80094ec <prvProcessReceivedCommands+0x78>)
 80094e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ec:	08009515 	.word	0x08009515
 80094f0:	08009515 	.word	0x08009515
 80094f4:	08009515 	.word	0x08009515
 80094f8:	0800958b 	.word	0x0800958b
 80094fc:	0800959f 	.word	0x0800959f
 8009500:	080095eb 	.word	0x080095eb
 8009504:	08009515 	.word	0x08009515
 8009508:	08009515 	.word	0x08009515
 800950c:	0800958b 	.word	0x0800958b
 8009510:	0800959f 	.word	0x0800959f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009516:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800951a:	f043 0301 	orr.w	r3, r3, #1
 800951e:	b2da      	uxtb	r2, r3
 8009520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009522:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	18d1      	adds	r1, r2, r3
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009532:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009534:	f7ff ff5c 	bl	80093f0 <prvInsertTimerInActiveList>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d06c      	beq.n	8009618 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800953e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009544:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009548:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800954c:	f003 0304 	and.w	r3, r3, #4
 8009550:	2b00      	cmp	r3, #0
 8009552:	d061      	beq.n	8009618 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009554:	68ba      	ldr	r2, [r7, #8]
 8009556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009558:	699b      	ldr	r3, [r3, #24]
 800955a:	441a      	add	r2, r3
 800955c:	2300      	movs	r3, #0
 800955e:	9300      	str	r3, [sp, #0]
 8009560:	2300      	movs	r3, #0
 8009562:	2100      	movs	r1, #0
 8009564:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009566:	f7ff fe01 	bl	800916c <xTimerGenericCommand>
 800956a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800956c:	6a3b      	ldr	r3, [r7, #32]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d152      	bne.n	8009618 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	61bb      	str	r3, [r7, #24]
}
 8009584:	bf00      	nop
 8009586:	bf00      	nop
 8009588:	e7fd      	b.n	8009586 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800958a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800958c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009590:	f023 0301 	bic.w	r3, r3, #1
 8009594:	b2da      	uxtb	r2, r3
 8009596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009598:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800959c:	e03d      	b.n	800961a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800959e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095a4:	f043 0301 	orr.w	r3, r3, #1
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80095b0:	68ba      	ldr	r2, [r7, #8]
 80095b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80095b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d10b      	bne.n	80095d6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80095be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c2:	f383 8811 	msr	BASEPRI, r3
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	617b      	str	r3, [r7, #20]
}
 80095d0:	bf00      	nop
 80095d2:	bf00      	nop
 80095d4:	e7fd      	b.n	80095d2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80095d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d8:	699a      	ldr	r2, [r3, #24]
 80095da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095dc:	18d1      	adds	r1, r2, r3
 80095de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095e4:	f7ff ff04 	bl	80093f0 <prvInsertTimerInActiveList>
					break;
 80095e8:	e017      	b.n	800961a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80095ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095f0:	f003 0302 	and.w	r3, r3, #2
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d103      	bne.n	8009600 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80095f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095fa:	f000 fbe5 	bl	8009dc8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80095fe:	e00c      	b.n	800961a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009602:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009606:	f023 0301 	bic.w	r3, r3, #1
 800960a:	b2da      	uxtb	r2, r3
 800960c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800960e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009612:	e002      	b.n	800961a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009614:	bf00      	nop
 8009616:	e000      	b.n	800961a <prvProcessReceivedCommands+0x1a6>
					break;
 8009618:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800961a:	4b08      	ldr	r3, [pc, #32]	@ (800963c <prvProcessReceivedCommands+0x1c8>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	1d39      	adds	r1, r7, #4
 8009620:	2200      	movs	r2, #0
 8009622:	4618      	mov	r0, r3
 8009624:	f7fe fbce 	bl	8007dc4 <xQueueReceive>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	f47f af26 	bne.w	800947c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009630:	bf00      	nop
 8009632:	bf00      	nop
 8009634:	3730      	adds	r7, #48	@ 0x30
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	20001a30 	.word	0x20001a30

08009640 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b088      	sub	sp, #32
 8009644:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009646:	e049      	b.n	80096dc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009648:	4b2e      	ldr	r3, [pc, #184]	@ (8009704 <prvSwitchTimerLists+0xc4>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009652:	4b2c      	ldr	r3, [pc, #176]	@ (8009704 <prvSwitchTimerLists+0xc4>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	3304      	adds	r3, #4
 8009660:	4618      	mov	r0, r3
 8009662:	f7fe f8db 	bl	800781c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6a1b      	ldr	r3, [r3, #32]
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009674:	f003 0304 	and.w	r3, r3, #4
 8009678:	2b00      	cmp	r3, #0
 800967a:	d02f      	beq.n	80096dc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	693a      	ldr	r2, [r7, #16]
 8009682:	4413      	add	r3, r2
 8009684:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009686:	68ba      	ldr	r2, [r7, #8]
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	429a      	cmp	r2, r3
 800968c:	d90e      	bls.n	80096ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800969a:	4b1a      	ldr	r3, [pc, #104]	@ (8009704 <prvSwitchTimerLists+0xc4>)
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	3304      	adds	r3, #4
 80096a2:	4619      	mov	r1, r3
 80096a4:	4610      	mov	r0, r2
 80096a6:	f7fe f880 	bl	80077aa <vListInsert>
 80096aa:	e017      	b.n	80096dc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096ac:	2300      	movs	r3, #0
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	2300      	movs	r3, #0
 80096b2:	693a      	ldr	r2, [r7, #16]
 80096b4:	2100      	movs	r1, #0
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f7ff fd58 	bl	800916c <xTimerGenericCommand>
 80096bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10b      	bne.n	80096dc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80096c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c8:	f383 8811 	msr	BASEPRI, r3
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	603b      	str	r3, [r7, #0]
}
 80096d6:	bf00      	nop
 80096d8:	bf00      	nop
 80096da:	e7fd      	b.n	80096d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096dc:	4b09      	ldr	r3, [pc, #36]	@ (8009704 <prvSwitchTimerLists+0xc4>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d1b0      	bne.n	8009648 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80096e6:	4b07      	ldr	r3, [pc, #28]	@ (8009704 <prvSwitchTimerLists+0xc4>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80096ec:	4b06      	ldr	r3, [pc, #24]	@ (8009708 <prvSwitchTimerLists+0xc8>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a04      	ldr	r2, [pc, #16]	@ (8009704 <prvSwitchTimerLists+0xc4>)
 80096f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80096f4:	4a04      	ldr	r2, [pc, #16]	@ (8009708 <prvSwitchTimerLists+0xc8>)
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	6013      	str	r3, [r2, #0]
}
 80096fa:	bf00      	nop
 80096fc:	3718      	adds	r7, #24
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	20001a28 	.word	0x20001a28
 8009708:	20001a2c 	.word	0x20001a2c

0800970c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009712:	f000 f969 	bl	80099e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009716:	4b15      	ldr	r3, [pc, #84]	@ (800976c <prvCheckForValidListAndQueue+0x60>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d120      	bne.n	8009760 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800971e:	4814      	ldr	r0, [pc, #80]	@ (8009770 <prvCheckForValidListAndQueue+0x64>)
 8009720:	f7fd fff2 	bl	8007708 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009724:	4813      	ldr	r0, [pc, #76]	@ (8009774 <prvCheckForValidListAndQueue+0x68>)
 8009726:	f7fd ffef 	bl	8007708 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800972a:	4b13      	ldr	r3, [pc, #76]	@ (8009778 <prvCheckForValidListAndQueue+0x6c>)
 800972c:	4a10      	ldr	r2, [pc, #64]	@ (8009770 <prvCheckForValidListAndQueue+0x64>)
 800972e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009730:	4b12      	ldr	r3, [pc, #72]	@ (800977c <prvCheckForValidListAndQueue+0x70>)
 8009732:	4a10      	ldr	r2, [pc, #64]	@ (8009774 <prvCheckForValidListAndQueue+0x68>)
 8009734:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009736:	2300      	movs	r3, #0
 8009738:	9300      	str	r3, [sp, #0]
 800973a:	4b11      	ldr	r3, [pc, #68]	@ (8009780 <prvCheckForValidListAndQueue+0x74>)
 800973c:	4a11      	ldr	r2, [pc, #68]	@ (8009784 <prvCheckForValidListAndQueue+0x78>)
 800973e:	2110      	movs	r1, #16
 8009740:	200a      	movs	r0, #10
 8009742:	f7fe f8ff 	bl	8007944 <xQueueGenericCreateStatic>
 8009746:	4603      	mov	r3, r0
 8009748:	4a08      	ldr	r2, [pc, #32]	@ (800976c <prvCheckForValidListAndQueue+0x60>)
 800974a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800974c:	4b07      	ldr	r3, [pc, #28]	@ (800976c <prvCheckForValidListAndQueue+0x60>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d005      	beq.n	8009760 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009754:	4b05      	ldr	r3, [pc, #20]	@ (800976c <prvCheckForValidListAndQueue+0x60>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	490b      	ldr	r1, [pc, #44]	@ (8009788 <prvCheckForValidListAndQueue+0x7c>)
 800975a:	4618      	mov	r0, r3
 800975c:	f7fe fd24 	bl	80081a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009760:	f000 f974 	bl	8009a4c <vPortExitCritical>
}
 8009764:	bf00      	nop
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20001a30 	.word	0x20001a30
 8009770:	20001a00 	.word	0x20001a00
 8009774:	20001a14 	.word	0x20001a14
 8009778:	20001a28 	.word	0x20001a28
 800977c:	20001a2c 	.word	0x20001a2c
 8009780:	20001adc 	.word	0x20001adc
 8009784:	20001a3c 	.word	0x20001a3c
 8009788:	0800d330 	.word	0x0800d330

0800978c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	3b04      	subs	r3, #4
 800979c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80097a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	3b04      	subs	r3, #4
 80097aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	f023 0201 	bic.w	r2, r3, #1
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3b04      	subs	r3, #4
 80097ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097bc:	4a0c      	ldr	r2, [pc, #48]	@ (80097f0 <pxPortInitialiseStack+0x64>)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	3b14      	subs	r3, #20
 80097c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3b04      	subs	r3, #4
 80097d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f06f 0202 	mvn.w	r2, #2
 80097da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	3b20      	subs	r3, #32
 80097e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80097e2:	68fb      	ldr	r3, [r7, #12]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3714      	adds	r7, #20
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	080097f5 	.word	0x080097f5

080097f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80097fa:	2300      	movs	r3, #0
 80097fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80097fe:	4b13      	ldr	r3, [pc, #76]	@ (800984c <prvTaskExitError+0x58>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009806:	d00b      	beq.n	8009820 <prvTaskExitError+0x2c>
	__asm volatile
 8009808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800980c:	f383 8811 	msr	BASEPRI, r3
 8009810:	f3bf 8f6f 	isb	sy
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	60fb      	str	r3, [r7, #12]
}
 800981a:	bf00      	nop
 800981c:	bf00      	nop
 800981e:	e7fd      	b.n	800981c <prvTaskExitError+0x28>
	__asm volatile
 8009820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009824:	f383 8811 	msr	BASEPRI, r3
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	60bb      	str	r3, [r7, #8]
}
 8009832:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009834:	bf00      	nop
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d0fc      	beq.n	8009836 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800983c:	bf00      	nop
 800983e:	bf00      	nop
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	2000000c 	.word	0x2000000c

08009850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009850:	4b07      	ldr	r3, [pc, #28]	@ (8009870 <pxCurrentTCBConst2>)
 8009852:	6819      	ldr	r1, [r3, #0]
 8009854:	6808      	ldr	r0, [r1, #0]
 8009856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985a:	f380 8809 	msr	PSP, r0
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f04f 0000 	mov.w	r0, #0
 8009866:	f380 8811 	msr	BASEPRI, r0
 800986a:	4770      	bx	lr
 800986c:	f3af 8000 	nop.w

08009870 <pxCurrentTCBConst2>:
 8009870:	20001500 	.word	0x20001500
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop

08009878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009878:	4808      	ldr	r0, [pc, #32]	@ (800989c <prvPortStartFirstTask+0x24>)
 800987a:	6800      	ldr	r0, [r0, #0]
 800987c:	6800      	ldr	r0, [r0, #0]
 800987e:	f380 8808 	msr	MSP, r0
 8009882:	f04f 0000 	mov.w	r0, #0
 8009886:	f380 8814 	msr	CONTROL, r0
 800988a:	b662      	cpsie	i
 800988c:	b661      	cpsie	f
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	df00      	svc	0
 8009898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800989a:	bf00      	nop
 800989c:	e000ed08 	.word	0xe000ed08

080098a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80098a6:	4b47      	ldr	r3, [pc, #284]	@ (80099c4 <xPortStartScheduler+0x124>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a47      	ldr	r2, [pc, #284]	@ (80099c8 <xPortStartScheduler+0x128>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d10b      	bne.n	80098c8 <xPortStartScheduler+0x28>
	__asm volatile
 80098b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b4:	f383 8811 	msr	BASEPRI, r3
 80098b8:	f3bf 8f6f 	isb	sy
 80098bc:	f3bf 8f4f 	dsb	sy
 80098c0:	613b      	str	r3, [r7, #16]
}
 80098c2:	bf00      	nop
 80098c4:	bf00      	nop
 80098c6:	e7fd      	b.n	80098c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098c8:	4b3e      	ldr	r3, [pc, #248]	@ (80099c4 <xPortStartScheduler+0x124>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a3f      	ldr	r2, [pc, #252]	@ (80099cc <xPortStartScheduler+0x12c>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d10b      	bne.n	80098ea <xPortStartScheduler+0x4a>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	60fb      	str	r3, [r7, #12]
}
 80098e4:	bf00      	nop
 80098e6:	bf00      	nop
 80098e8:	e7fd      	b.n	80098e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098ea:	4b39      	ldr	r3, [pc, #228]	@ (80099d0 <xPortStartScheduler+0x130>)
 80098ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	22ff      	movs	r2, #255	@ 0xff
 80098fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	b2db      	uxtb	r3, r3
 8009902:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009904:	78fb      	ldrb	r3, [r7, #3]
 8009906:	b2db      	uxtb	r3, r3
 8009908:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800990c:	b2da      	uxtb	r2, r3
 800990e:	4b31      	ldr	r3, [pc, #196]	@ (80099d4 <xPortStartScheduler+0x134>)
 8009910:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009912:	4b31      	ldr	r3, [pc, #196]	@ (80099d8 <xPortStartScheduler+0x138>)
 8009914:	2207      	movs	r2, #7
 8009916:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009918:	e009      	b.n	800992e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800991a:	4b2f      	ldr	r3, [pc, #188]	@ (80099d8 <xPortStartScheduler+0x138>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	3b01      	subs	r3, #1
 8009920:	4a2d      	ldr	r2, [pc, #180]	@ (80099d8 <xPortStartScheduler+0x138>)
 8009922:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009924:	78fb      	ldrb	r3, [r7, #3]
 8009926:	b2db      	uxtb	r3, r3
 8009928:	005b      	lsls	r3, r3, #1
 800992a:	b2db      	uxtb	r3, r3
 800992c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800992e:	78fb      	ldrb	r3, [r7, #3]
 8009930:	b2db      	uxtb	r3, r3
 8009932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009936:	2b80      	cmp	r3, #128	@ 0x80
 8009938:	d0ef      	beq.n	800991a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800993a:	4b27      	ldr	r3, [pc, #156]	@ (80099d8 <xPortStartScheduler+0x138>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f1c3 0307 	rsb	r3, r3, #7
 8009942:	2b04      	cmp	r3, #4
 8009944:	d00b      	beq.n	800995e <xPortStartScheduler+0xbe>
	__asm volatile
 8009946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	60bb      	str	r3, [r7, #8]
}
 8009958:	bf00      	nop
 800995a:	bf00      	nop
 800995c:	e7fd      	b.n	800995a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800995e:	4b1e      	ldr	r3, [pc, #120]	@ (80099d8 <xPortStartScheduler+0x138>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	021b      	lsls	r3, r3, #8
 8009964:	4a1c      	ldr	r2, [pc, #112]	@ (80099d8 <xPortStartScheduler+0x138>)
 8009966:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009968:	4b1b      	ldr	r3, [pc, #108]	@ (80099d8 <xPortStartScheduler+0x138>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009970:	4a19      	ldr	r2, [pc, #100]	@ (80099d8 <xPortStartScheduler+0x138>)
 8009972:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	b2da      	uxtb	r2, r3
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800997c:	4b17      	ldr	r3, [pc, #92]	@ (80099dc <xPortStartScheduler+0x13c>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a16      	ldr	r2, [pc, #88]	@ (80099dc <xPortStartScheduler+0x13c>)
 8009982:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009986:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009988:	4b14      	ldr	r3, [pc, #80]	@ (80099dc <xPortStartScheduler+0x13c>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a13      	ldr	r2, [pc, #76]	@ (80099dc <xPortStartScheduler+0x13c>)
 800998e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009992:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009994:	f000 f8da 	bl	8009b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009998:	4b11      	ldr	r3, [pc, #68]	@ (80099e0 <xPortStartScheduler+0x140>)
 800999a:	2200      	movs	r2, #0
 800999c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800999e:	f000 f8f9 	bl	8009b94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80099a2:	4b10      	ldr	r3, [pc, #64]	@ (80099e4 <xPortStartScheduler+0x144>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a0f      	ldr	r2, [pc, #60]	@ (80099e4 <xPortStartScheduler+0x144>)
 80099a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80099ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099ae:	f7ff ff63 	bl	8009878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099b2:	f7ff f831 	bl	8008a18 <vTaskSwitchContext>
	prvTaskExitError();
 80099b6:	f7ff ff1d 	bl	80097f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3718      	adds	r7, #24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	e000ed00 	.word	0xe000ed00
 80099c8:	410fc271 	.word	0x410fc271
 80099cc:	410fc270 	.word	0x410fc270
 80099d0:	e000e400 	.word	0xe000e400
 80099d4:	20001b2c 	.word	0x20001b2c
 80099d8:	20001b30 	.word	0x20001b30
 80099dc:	e000ed20 	.word	0xe000ed20
 80099e0:	2000000c 	.word	0x2000000c
 80099e4:	e000ef34 	.word	0xe000ef34

080099e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
	__asm volatile
 80099ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	607b      	str	r3, [r7, #4]
}
 8009a00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a02:	4b10      	ldr	r3, [pc, #64]	@ (8009a44 <vPortEnterCritical+0x5c>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3301      	adds	r3, #1
 8009a08:	4a0e      	ldr	r2, [pc, #56]	@ (8009a44 <vPortEnterCritical+0x5c>)
 8009a0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8009a44 <vPortEnterCritical+0x5c>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d110      	bne.n	8009a36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a14:	4b0c      	ldr	r3, [pc, #48]	@ (8009a48 <vPortEnterCritical+0x60>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00b      	beq.n	8009a36 <vPortEnterCritical+0x4e>
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	603b      	str	r3, [r7, #0]
}
 8009a30:	bf00      	nop
 8009a32:	bf00      	nop
 8009a34:	e7fd      	b.n	8009a32 <vPortEnterCritical+0x4a>
	}
}
 8009a36:	bf00      	nop
 8009a38:	370c      	adds	r7, #12
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	2000000c 	.word	0x2000000c
 8009a48:	e000ed04 	.word	0xe000ed04

08009a4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a52:	4b12      	ldr	r3, [pc, #72]	@ (8009a9c <vPortExitCritical+0x50>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d10b      	bne.n	8009a72 <vPortExitCritical+0x26>
	__asm volatile
 8009a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a5e:	f383 8811 	msr	BASEPRI, r3
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	f3bf 8f4f 	dsb	sy
 8009a6a:	607b      	str	r3, [r7, #4]
}
 8009a6c:	bf00      	nop
 8009a6e:	bf00      	nop
 8009a70:	e7fd      	b.n	8009a6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a72:	4b0a      	ldr	r3, [pc, #40]	@ (8009a9c <vPortExitCritical+0x50>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	3b01      	subs	r3, #1
 8009a78:	4a08      	ldr	r2, [pc, #32]	@ (8009a9c <vPortExitCritical+0x50>)
 8009a7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a7c:	4b07      	ldr	r3, [pc, #28]	@ (8009a9c <vPortExitCritical+0x50>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d105      	bne.n	8009a90 <vPortExitCritical+0x44>
 8009a84:	2300      	movs	r3, #0
 8009a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	f383 8811 	msr	BASEPRI, r3
}
 8009a8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	2000000c 	.word	0x2000000c

08009aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009aa0:	f3ef 8009 	mrs	r0, PSP
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	4b15      	ldr	r3, [pc, #84]	@ (8009b00 <pxCurrentTCBConst>)
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	f01e 0f10 	tst.w	lr, #16
 8009ab0:	bf08      	it	eq
 8009ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aba:	6010      	str	r0, [r2, #0]
 8009abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ac0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009ac4:	f380 8811 	msr	BASEPRI, r0
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f7fe ffa2 	bl	8008a18 <vTaskSwitchContext>
 8009ad4:	f04f 0000 	mov.w	r0, #0
 8009ad8:	f380 8811 	msr	BASEPRI, r0
 8009adc:	bc09      	pop	{r0, r3}
 8009ade:	6819      	ldr	r1, [r3, #0]
 8009ae0:	6808      	ldr	r0, [r1, #0]
 8009ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae6:	f01e 0f10 	tst.w	lr, #16
 8009aea:	bf08      	it	eq
 8009aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009af0:	f380 8809 	msr	PSP, r0
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	f3af 8000 	nop.w

08009b00 <pxCurrentTCBConst>:
 8009b00:	20001500 	.word	0x20001500
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop

08009b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	607b      	str	r3, [r7, #4]
}
 8009b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b22:	f7fe febf 	bl	80088a4 <xTaskIncrementTick>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d003      	beq.n	8009b34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b2c:	4b06      	ldr	r3, [pc, #24]	@ (8009b48 <xPortSysTickHandler+0x40>)
 8009b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b32:	601a      	str	r2, [r3, #0]
 8009b34:	2300      	movs	r3, #0
 8009b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	f383 8811 	msr	BASEPRI, r3
}
 8009b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b40:	bf00      	nop
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	e000ed04 	.word	0xe000ed04

08009b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b50:	4b0b      	ldr	r3, [pc, #44]	@ (8009b80 <vPortSetupTimerInterrupt+0x34>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b56:	4b0b      	ldr	r3, [pc, #44]	@ (8009b84 <vPortSetupTimerInterrupt+0x38>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b88 <vPortSetupTimerInterrupt+0x3c>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a0a      	ldr	r2, [pc, #40]	@ (8009b8c <vPortSetupTimerInterrupt+0x40>)
 8009b62:	fba2 2303 	umull	r2, r3, r2, r3
 8009b66:	099b      	lsrs	r3, r3, #6
 8009b68:	4a09      	ldr	r2, [pc, #36]	@ (8009b90 <vPortSetupTimerInterrupt+0x44>)
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b6e:	4b04      	ldr	r3, [pc, #16]	@ (8009b80 <vPortSetupTimerInterrupt+0x34>)
 8009b70:	2207      	movs	r2, #7
 8009b72:	601a      	str	r2, [r3, #0]
}
 8009b74:	bf00      	nop
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	e000e010 	.word	0xe000e010
 8009b84:	e000e018 	.word	0xe000e018
 8009b88:	20000000 	.word	0x20000000
 8009b8c:	10624dd3 	.word	0x10624dd3
 8009b90:	e000e014 	.word	0xe000e014

08009b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009ba4 <vPortEnableVFP+0x10>
 8009b98:	6801      	ldr	r1, [r0, #0]
 8009b9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009b9e:	6001      	str	r1, [r0, #0]
 8009ba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ba2:	bf00      	nop
 8009ba4:	e000ed88 	.word	0xe000ed88

08009ba8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009bae:	f3ef 8305 	mrs	r3, IPSR
 8009bb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2b0f      	cmp	r3, #15
 8009bb8:	d915      	bls.n	8009be6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009bba:	4a18      	ldr	r2, [pc, #96]	@ (8009c1c <vPortValidateInterruptPriority+0x74>)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009bc4:	4b16      	ldr	r3, [pc, #88]	@ (8009c20 <vPortValidateInterruptPriority+0x78>)
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	7afa      	ldrb	r2, [r7, #11]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d20b      	bcs.n	8009be6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	607b      	str	r3, [r7, #4]
}
 8009be0:	bf00      	nop
 8009be2:	bf00      	nop
 8009be4:	e7fd      	b.n	8009be2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009be6:	4b0f      	ldr	r3, [pc, #60]	@ (8009c24 <vPortValidateInterruptPriority+0x7c>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009bee:	4b0e      	ldr	r3, [pc, #56]	@ (8009c28 <vPortValidateInterruptPriority+0x80>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d90b      	bls.n	8009c0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bfa:	f383 8811 	msr	BASEPRI, r3
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	603b      	str	r3, [r7, #0]
}
 8009c08:	bf00      	nop
 8009c0a:	bf00      	nop
 8009c0c:	e7fd      	b.n	8009c0a <vPortValidateInterruptPriority+0x62>
	}
 8009c0e:	bf00      	nop
 8009c10:	3714      	adds	r7, #20
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	e000e3f0 	.word	0xe000e3f0
 8009c20:	20001b2c 	.word	0x20001b2c
 8009c24:	e000ed0c 	.word	0xe000ed0c
 8009c28:	20001b30 	.word	0x20001b30

08009c2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b08a      	sub	sp, #40	@ 0x28
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c34:	2300      	movs	r3, #0
 8009c36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c38:	f7fe fd78 	bl	800872c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c3c:	4b5c      	ldr	r3, [pc, #368]	@ (8009db0 <pvPortMalloc+0x184>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d101      	bne.n	8009c48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c44:	f000 f924 	bl	8009e90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c48:	4b5a      	ldr	r3, [pc, #360]	@ (8009db4 <pvPortMalloc+0x188>)
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4013      	ands	r3, r2
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f040 8095 	bne.w	8009d80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d01e      	beq.n	8009c9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009c5c:	2208      	movs	r2, #8
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4413      	add	r3, r2
 8009c62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f003 0307 	and.w	r3, r3, #7
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d015      	beq.n	8009c9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f023 0307 	bic.w	r3, r3, #7
 8009c74:	3308      	adds	r3, #8
 8009c76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f003 0307 	and.w	r3, r3, #7
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00b      	beq.n	8009c9a <pvPortMalloc+0x6e>
	__asm volatile
 8009c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	617b      	str	r3, [r7, #20]
}
 8009c94:	bf00      	nop
 8009c96:	bf00      	nop
 8009c98:	e7fd      	b.n	8009c96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d06f      	beq.n	8009d80 <pvPortMalloc+0x154>
 8009ca0:	4b45      	ldr	r3, [pc, #276]	@ (8009db8 <pvPortMalloc+0x18c>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d86a      	bhi.n	8009d80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009caa:	4b44      	ldr	r3, [pc, #272]	@ (8009dbc <pvPortMalloc+0x190>)
 8009cac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009cae:	4b43      	ldr	r3, [pc, #268]	@ (8009dbc <pvPortMalloc+0x190>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cb4:	e004      	b.n	8009cc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d903      	bls.n	8009cd2 <pvPortMalloc+0xa6>
 8009cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1f1      	bne.n	8009cb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009cd2:	4b37      	ldr	r3, [pc, #220]	@ (8009db0 <pvPortMalloc+0x184>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d051      	beq.n	8009d80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009cdc:	6a3b      	ldr	r3, [r7, #32]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2208      	movs	r2, #8
 8009ce2:	4413      	add	r3, r2
 8009ce4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	6a3b      	ldr	r3, [r7, #32]
 8009cec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf0:	685a      	ldr	r2, [r3, #4]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	1ad2      	subs	r2, r2, r3
 8009cf6:	2308      	movs	r3, #8
 8009cf8:	005b      	lsls	r3, r3, #1
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d920      	bls.n	8009d40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4413      	add	r3, r2
 8009d04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	f003 0307 	and.w	r3, r3, #7
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00b      	beq.n	8009d28 <pvPortMalloc+0xfc>
	__asm volatile
 8009d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	613b      	str	r3, [r7, #16]
}
 8009d22:	bf00      	nop
 8009d24:	bf00      	nop
 8009d26:	e7fd      	b.n	8009d24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2a:	685a      	ldr	r2, [r3, #4]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	1ad2      	subs	r2, r2, r3
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d3a:	69b8      	ldr	r0, [r7, #24]
 8009d3c:	f000 f90a 	bl	8009f54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d40:	4b1d      	ldr	r3, [pc, #116]	@ (8009db8 <pvPortMalloc+0x18c>)
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	1ad3      	subs	r3, r2, r3
 8009d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8009db8 <pvPortMalloc+0x18c>)
 8009d4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8009db8 <pvPortMalloc+0x18c>)
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	4b1b      	ldr	r3, [pc, #108]	@ (8009dc0 <pvPortMalloc+0x194>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d203      	bcs.n	8009d62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d5a:	4b17      	ldr	r3, [pc, #92]	@ (8009db8 <pvPortMalloc+0x18c>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a18      	ldr	r2, [pc, #96]	@ (8009dc0 <pvPortMalloc+0x194>)
 8009d60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d64:	685a      	ldr	r2, [r3, #4]
 8009d66:	4b13      	ldr	r3, [pc, #76]	@ (8009db4 <pvPortMalloc+0x188>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	431a      	orrs	r2, r3
 8009d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d72:	2200      	movs	r2, #0
 8009d74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d76:	4b13      	ldr	r3, [pc, #76]	@ (8009dc4 <pvPortMalloc+0x198>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	4a11      	ldr	r2, [pc, #68]	@ (8009dc4 <pvPortMalloc+0x198>)
 8009d7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d80:	f7fe fce2 	bl	8008748 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	f003 0307 	and.w	r3, r3, #7
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00b      	beq.n	8009da6 <pvPortMalloc+0x17a>
	__asm volatile
 8009d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d92:	f383 8811 	msr	BASEPRI, r3
 8009d96:	f3bf 8f6f 	isb	sy
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	60fb      	str	r3, [r7, #12]
}
 8009da0:	bf00      	nop
 8009da2:	bf00      	nop
 8009da4:	e7fd      	b.n	8009da2 <pvPortMalloc+0x176>
	return pvReturn;
 8009da6:	69fb      	ldr	r3, [r7, #28]
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3728      	adds	r7, #40	@ 0x28
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	200026f4 	.word	0x200026f4
 8009db4:	20002708 	.word	0x20002708
 8009db8:	200026f8 	.word	0x200026f8
 8009dbc:	200026ec 	.word	0x200026ec
 8009dc0:	200026fc 	.word	0x200026fc
 8009dc4:	20002700 	.word	0x20002700

08009dc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d04f      	beq.n	8009e7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009dda:	2308      	movs	r3, #8
 8009ddc:	425b      	negs	r3, r3
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	4413      	add	r3, r2
 8009de2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	4b25      	ldr	r3, [pc, #148]	@ (8009e84 <vPortFree+0xbc>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4013      	ands	r3, r2
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10b      	bne.n	8009e0e <vPortFree+0x46>
	__asm volatile
 8009df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dfa:	f383 8811 	msr	BASEPRI, r3
 8009dfe:	f3bf 8f6f 	isb	sy
 8009e02:	f3bf 8f4f 	dsb	sy
 8009e06:	60fb      	str	r3, [r7, #12]
}
 8009e08:	bf00      	nop
 8009e0a:	bf00      	nop
 8009e0c:	e7fd      	b.n	8009e0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00b      	beq.n	8009e2e <vPortFree+0x66>
	__asm volatile
 8009e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	60bb      	str	r3, [r7, #8]
}
 8009e28:	bf00      	nop
 8009e2a:	bf00      	nop
 8009e2c:	e7fd      	b.n	8009e2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	685a      	ldr	r2, [r3, #4]
 8009e32:	4b14      	ldr	r3, [pc, #80]	@ (8009e84 <vPortFree+0xbc>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4013      	ands	r3, r2
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d01e      	beq.n	8009e7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d11a      	bne.n	8009e7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	685a      	ldr	r2, [r3, #4]
 8009e48:	4b0e      	ldr	r3, [pc, #56]	@ (8009e84 <vPortFree+0xbc>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	43db      	mvns	r3, r3
 8009e4e:	401a      	ands	r2, r3
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e54:	f7fe fc6a 	bl	800872c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	685a      	ldr	r2, [r3, #4]
 8009e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e88 <vPortFree+0xc0>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4413      	add	r3, r2
 8009e62:	4a09      	ldr	r2, [pc, #36]	@ (8009e88 <vPortFree+0xc0>)
 8009e64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e66:	6938      	ldr	r0, [r7, #16]
 8009e68:	f000 f874 	bl	8009f54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e6c:	4b07      	ldr	r3, [pc, #28]	@ (8009e8c <vPortFree+0xc4>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3301      	adds	r3, #1
 8009e72:	4a06      	ldr	r2, [pc, #24]	@ (8009e8c <vPortFree+0xc4>)
 8009e74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e76:	f7fe fc67 	bl	8008748 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e7a:	bf00      	nop
 8009e7c:	3718      	adds	r7, #24
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	20002708 	.word	0x20002708
 8009e88:	200026f8 	.word	0x200026f8
 8009e8c:	20002704 	.word	0x20002704

08009e90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e96:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009e9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e9c:	4b27      	ldr	r3, [pc, #156]	@ (8009f3c <prvHeapInit+0xac>)
 8009e9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f003 0307 	and.w	r3, r3, #7
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00c      	beq.n	8009ec4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	3307      	adds	r3, #7
 8009eae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f023 0307 	bic.w	r3, r3, #7
 8009eb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009eb8:	68ba      	ldr	r2, [r7, #8]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8009f3c <prvHeapInit+0xac>)
 8009ec0:	4413      	add	r3, r2
 8009ec2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8009f40 <prvHeapInit+0xb0>)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ece:	4b1c      	ldr	r3, [pc, #112]	@ (8009f40 <prvHeapInit+0xb0>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68ba      	ldr	r2, [r7, #8]
 8009ed8:	4413      	add	r3, r2
 8009eda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009edc:	2208      	movs	r2, #8
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	1a9b      	subs	r3, r3, r2
 8009ee2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f023 0307 	bic.w	r3, r3, #7
 8009eea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	4a15      	ldr	r2, [pc, #84]	@ (8009f44 <prvHeapInit+0xb4>)
 8009ef0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ef2:	4b14      	ldr	r3, [pc, #80]	@ (8009f44 <prvHeapInit+0xb4>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009efa:	4b12      	ldr	r3, [pc, #72]	@ (8009f44 <prvHeapInit+0xb4>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2200      	movs	r2, #0
 8009f00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	1ad2      	subs	r2, r2, r3
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f10:	4b0c      	ldr	r3, [pc, #48]	@ (8009f44 <prvHeapInit+0xb4>)
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8009f48 <prvHeapInit+0xb8>)
 8009f1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	4a09      	ldr	r2, [pc, #36]	@ (8009f4c <prvHeapInit+0xbc>)
 8009f26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f28:	4b09      	ldr	r3, [pc, #36]	@ (8009f50 <prvHeapInit+0xc0>)
 8009f2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009f2e:	601a      	str	r2, [r3, #0]
}
 8009f30:	bf00      	nop
 8009f32:	3714      	adds	r7, #20
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr
 8009f3c:	20001b34 	.word	0x20001b34
 8009f40:	200026ec 	.word	0x200026ec
 8009f44:	200026f4 	.word	0x200026f4
 8009f48:	200026fc 	.word	0x200026fc
 8009f4c:	200026f8 	.word	0x200026f8
 8009f50:	20002708 	.word	0x20002708

08009f54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f5c:	4b28      	ldr	r3, [pc, #160]	@ (800a000 <prvInsertBlockIntoFreeList+0xac>)
 8009f5e:	60fb      	str	r3, [r7, #12]
 8009f60:	e002      	b.n	8009f68 <prvInsertBlockIntoFreeList+0x14>
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	60fb      	str	r3, [r7, #12]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d8f7      	bhi.n	8009f62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	68ba      	ldr	r2, [r7, #8]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d108      	bne.n	8009f96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	685a      	ldr	r2, [r3, #4]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	441a      	add	r2, r3
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	441a      	add	r2, r3
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d118      	bne.n	8009fdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	4b15      	ldr	r3, [pc, #84]	@ (800a004 <prvInsertBlockIntoFreeList+0xb0>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d00d      	beq.n	8009fd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	685a      	ldr	r2, [r3, #4]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	441a      	add	r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	601a      	str	r2, [r3, #0]
 8009fd0:	e008      	b.n	8009fe4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009fd2:	4b0c      	ldr	r3, [pc, #48]	@ (800a004 <prvInsertBlockIntoFreeList+0xb0>)
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	601a      	str	r2, [r3, #0]
 8009fda:	e003      	b.n	8009fe4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d002      	beq.n	8009ff2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ff2:	bf00      	nop
 8009ff4:	3714      	adds	r7, #20
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	200026ec 	.word	0x200026ec
 800a004:	200026f4 	.word	0x200026f4

0800a008 <__cvt>:
 800a008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a00c:	ec57 6b10 	vmov	r6, r7, d0
 800a010:	2f00      	cmp	r7, #0
 800a012:	460c      	mov	r4, r1
 800a014:	4619      	mov	r1, r3
 800a016:	463b      	mov	r3, r7
 800a018:	bfbb      	ittet	lt
 800a01a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a01e:	461f      	movlt	r7, r3
 800a020:	2300      	movge	r3, #0
 800a022:	232d      	movlt	r3, #45	@ 0x2d
 800a024:	700b      	strb	r3, [r1, #0]
 800a026:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a028:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a02c:	4691      	mov	r9, r2
 800a02e:	f023 0820 	bic.w	r8, r3, #32
 800a032:	bfbc      	itt	lt
 800a034:	4632      	movlt	r2, r6
 800a036:	4616      	movlt	r6, r2
 800a038:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a03c:	d005      	beq.n	800a04a <__cvt+0x42>
 800a03e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a042:	d100      	bne.n	800a046 <__cvt+0x3e>
 800a044:	3401      	adds	r4, #1
 800a046:	2102      	movs	r1, #2
 800a048:	e000      	b.n	800a04c <__cvt+0x44>
 800a04a:	2103      	movs	r1, #3
 800a04c:	ab03      	add	r3, sp, #12
 800a04e:	9301      	str	r3, [sp, #4]
 800a050:	ab02      	add	r3, sp, #8
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	ec47 6b10 	vmov	d0, r6, r7
 800a058:	4653      	mov	r3, sl
 800a05a:	4622      	mov	r2, r4
 800a05c:	f000 ffa4 	bl	800afa8 <_dtoa_r>
 800a060:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a064:	4605      	mov	r5, r0
 800a066:	d119      	bne.n	800a09c <__cvt+0x94>
 800a068:	f019 0f01 	tst.w	r9, #1
 800a06c:	d00e      	beq.n	800a08c <__cvt+0x84>
 800a06e:	eb00 0904 	add.w	r9, r0, r4
 800a072:	2200      	movs	r2, #0
 800a074:	2300      	movs	r3, #0
 800a076:	4630      	mov	r0, r6
 800a078:	4639      	mov	r1, r7
 800a07a:	f7f6 fd25 	bl	8000ac8 <__aeabi_dcmpeq>
 800a07e:	b108      	cbz	r0, 800a084 <__cvt+0x7c>
 800a080:	f8cd 900c 	str.w	r9, [sp, #12]
 800a084:	2230      	movs	r2, #48	@ 0x30
 800a086:	9b03      	ldr	r3, [sp, #12]
 800a088:	454b      	cmp	r3, r9
 800a08a:	d31e      	bcc.n	800a0ca <__cvt+0xc2>
 800a08c:	9b03      	ldr	r3, [sp, #12]
 800a08e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a090:	1b5b      	subs	r3, r3, r5
 800a092:	4628      	mov	r0, r5
 800a094:	6013      	str	r3, [r2, #0]
 800a096:	b004      	add	sp, #16
 800a098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a09c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a0a0:	eb00 0904 	add.w	r9, r0, r4
 800a0a4:	d1e5      	bne.n	800a072 <__cvt+0x6a>
 800a0a6:	7803      	ldrb	r3, [r0, #0]
 800a0a8:	2b30      	cmp	r3, #48	@ 0x30
 800a0aa:	d10a      	bne.n	800a0c2 <__cvt+0xba>
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	4639      	mov	r1, r7
 800a0b4:	f7f6 fd08 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0b8:	b918      	cbnz	r0, 800a0c2 <__cvt+0xba>
 800a0ba:	f1c4 0401 	rsb	r4, r4, #1
 800a0be:	f8ca 4000 	str.w	r4, [sl]
 800a0c2:	f8da 3000 	ldr.w	r3, [sl]
 800a0c6:	4499      	add	r9, r3
 800a0c8:	e7d3      	b.n	800a072 <__cvt+0x6a>
 800a0ca:	1c59      	adds	r1, r3, #1
 800a0cc:	9103      	str	r1, [sp, #12]
 800a0ce:	701a      	strb	r2, [r3, #0]
 800a0d0:	e7d9      	b.n	800a086 <__cvt+0x7e>

0800a0d2 <__exponent>:
 800a0d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0d4:	2900      	cmp	r1, #0
 800a0d6:	bfba      	itte	lt
 800a0d8:	4249      	neglt	r1, r1
 800a0da:	232d      	movlt	r3, #45	@ 0x2d
 800a0dc:	232b      	movge	r3, #43	@ 0x2b
 800a0de:	2909      	cmp	r1, #9
 800a0e0:	7002      	strb	r2, [r0, #0]
 800a0e2:	7043      	strb	r3, [r0, #1]
 800a0e4:	dd29      	ble.n	800a13a <__exponent+0x68>
 800a0e6:	f10d 0307 	add.w	r3, sp, #7
 800a0ea:	461d      	mov	r5, r3
 800a0ec:	270a      	movs	r7, #10
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	fbb1 f6f7 	udiv	r6, r1, r7
 800a0f4:	fb07 1416 	mls	r4, r7, r6, r1
 800a0f8:	3430      	adds	r4, #48	@ 0x30
 800a0fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a0fe:	460c      	mov	r4, r1
 800a100:	2c63      	cmp	r4, #99	@ 0x63
 800a102:	f103 33ff 	add.w	r3, r3, #4294967295
 800a106:	4631      	mov	r1, r6
 800a108:	dcf1      	bgt.n	800a0ee <__exponent+0x1c>
 800a10a:	3130      	adds	r1, #48	@ 0x30
 800a10c:	1e94      	subs	r4, r2, #2
 800a10e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a112:	1c41      	adds	r1, r0, #1
 800a114:	4623      	mov	r3, r4
 800a116:	42ab      	cmp	r3, r5
 800a118:	d30a      	bcc.n	800a130 <__exponent+0x5e>
 800a11a:	f10d 0309 	add.w	r3, sp, #9
 800a11e:	1a9b      	subs	r3, r3, r2
 800a120:	42ac      	cmp	r4, r5
 800a122:	bf88      	it	hi
 800a124:	2300      	movhi	r3, #0
 800a126:	3302      	adds	r3, #2
 800a128:	4403      	add	r3, r0
 800a12a:	1a18      	subs	r0, r3, r0
 800a12c:	b003      	add	sp, #12
 800a12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a130:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a134:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a138:	e7ed      	b.n	800a116 <__exponent+0x44>
 800a13a:	2330      	movs	r3, #48	@ 0x30
 800a13c:	3130      	adds	r1, #48	@ 0x30
 800a13e:	7083      	strb	r3, [r0, #2]
 800a140:	70c1      	strb	r1, [r0, #3]
 800a142:	1d03      	adds	r3, r0, #4
 800a144:	e7f1      	b.n	800a12a <__exponent+0x58>
	...

0800a148 <_printf_float>:
 800a148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14c:	b08d      	sub	sp, #52	@ 0x34
 800a14e:	460c      	mov	r4, r1
 800a150:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a154:	4616      	mov	r6, r2
 800a156:	461f      	mov	r7, r3
 800a158:	4605      	mov	r5, r0
 800a15a:	f000 fdbf 	bl	800acdc <_localeconv_r>
 800a15e:	6803      	ldr	r3, [r0, #0]
 800a160:	9304      	str	r3, [sp, #16]
 800a162:	4618      	mov	r0, r3
 800a164:	f7f6 f884 	bl	8000270 <strlen>
 800a168:	2300      	movs	r3, #0
 800a16a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a16c:	f8d8 3000 	ldr.w	r3, [r8]
 800a170:	9005      	str	r0, [sp, #20]
 800a172:	3307      	adds	r3, #7
 800a174:	f023 0307 	bic.w	r3, r3, #7
 800a178:	f103 0208 	add.w	r2, r3, #8
 800a17c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a180:	f8d4 b000 	ldr.w	fp, [r4]
 800a184:	f8c8 2000 	str.w	r2, [r8]
 800a188:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a18c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a190:	9307      	str	r3, [sp, #28]
 800a192:	f8cd 8018 	str.w	r8, [sp, #24]
 800a196:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a19a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a19e:	4b9c      	ldr	r3, [pc, #624]	@ (800a410 <_printf_float+0x2c8>)
 800a1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a4:	f7f6 fcc2 	bl	8000b2c <__aeabi_dcmpun>
 800a1a8:	bb70      	cbnz	r0, 800a208 <_printf_float+0xc0>
 800a1aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1ae:	4b98      	ldr	r3, [pc, #608]	@ (800a410 <_printf_float+0x2c8>)
 800a1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1b4:	f7f6 fc9c 	bl	8000af0 <__aeabi_dcmple>
 800a1b8:	bb30      	cbnz	r0, 800a208 <_printf_float+0xc0>
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	2300      	movs	r3, #0
 800a1be:	4640      	mov	r0, r8
 800a1c0:	4649      	mov	r1, r9
 800a1c2:	f7f6 fc8b 	bl	8000adc <__aeabi_dcmplt>
 800a1c6:	b110      	cbz	r0, 800a1ce <_printf_float+0x86>
 800a1c8:	232d      	movs	r3, #45	@ 0x2d
 800a1ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1ce:	4a91      	ldr	r2, [pc, #580]	@ (800a414 <_printf_float+0x2cc>)
 800a1d0:	4b91      	ldr	r3, [pc, #580]	@ (800a418 <_printf_float+0x2d0>)
 800a1d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a1d6:	bf94      	ite	ls
 800a1d8:	4690      	movls	r8, r2
 800a1da:	4698      	movhi	r8, r3
 800a1dc:	2303      	movs	r3, #3
 800a1de:	6123      	str	r3, [r4, #16]
 800a1e0:	f02b 0304 	bic.w	r3, fp, #4
 800a1e4:	6023      	str	r3, [r4, #0]
 800a1e6:	f04f 0900 	mov.w	r9, #0
 800a1ea:	9700      	str	r7, [sp, #0]
 800a1ec:	4633      	mov	r3, r6
 800a1ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a1f0:	4621      	mov	r1, r4
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	f000 f9d2 	bl	800a59c <_printf_common>
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	f040 808d 	bne.w	800a318 <_printf_float+0x1d0>
 800a1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a202:	b00d      	add	sp, #52	@ 0x34
 800a204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a208:	4642      	mov	r2, r8
 800a20a:	464b      	mov	r3, r9
 800a20c:	4640      	mov	r0, r8
 800a20e:	4649      	mov	r1, r9
 800a210:	f7f6 fc8c 	bl	8000b2c <__aeabi_dcmpun>
 800a214:	b140      	cbz	r0, 800a228 <_printf_float+0xe0>
 800a216:	464b      	mov	r3, r9
 800a218:	2b00      	cmp	r3, #0
 800a21a:	bfbc      	itt	lt
 800a21c:	232d      	movlt	r3, #45	@ 0x2d
 800a21e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a222:	4a7e      	ldr	r2, [pc, #504]	@ (800a41c <_printf_float+0x2d4>)
 800a224:	4b7e      	ldr	r3, [pc, #504]	@ (800a420 <_printf_float+0x2d8>)
 800a226:	e7d4      	b.n	800a1d2 <_printf_float+0x8a>
 800a228:	6863      	ldr	r3, [r4, #4]
 800a22a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a22e:	9206      	str	r2, [sp, #24]
 800a230:	1c5a      	adds	r2, r3, #1
 800a232:	d13b      	bne.n	800a2ac <_printf_float+0x164>
 800a234:	2306      	movs	r3, #6
 800a236:	6063      	str	r3, [r4, #4]
 800a238:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a23c:	2300      	movs	r3, #0
 800a23e:	6022      	str	r2, [r4, #0]
 800a240:	9303      	str	r3, [sp, #12]
 800a242:	ab0a      	add	r3, sp, #40	@ 0x28
 800a244:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a248:	ab09      	add	r3, sp, #36	@ 0x24
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	6861      	ldr	r1, [r4, #4]
 800a24e:	ec49 8b10 	vmov	d0, r8, r9
 800a252:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a256:	4628      	mov	r0, r5
 800a258:	f7ff fed6 	bl	800a008 <__cvt>
 800a25c:	9b06      	ldr	r3, [sp, #24]
 800a25e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a260:	2b47      	cmp	r3, #71	@ 0x47
 800a262:	4680      	mov	r8, r0
 800a264:	d129      	bne.n	800a2ba <_printf_float+0x172>
 800a266:	1cc8      	adds	r0, r1, #3
 800a268:	db02      	blt.n	800a270 <_printf_float+0x128>
 800a26a:	6863      	ldr	r3, [r4, #4]
 800a26c:	4299      	cmp	r1, r3
 800a26e:	dd41      	ble.n	800a2f4 <_printf_float+0x1ac>
 800a270:	f1aa 0a02 	sub.w	sl, sl, #2
 800a274:	fa5f fa8a 	uxtb.w	sl, sl
 800a278:	3901      	subs	r1, #1
 800a27a:	4652      	mov	r2, sl
 800a27c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a280:	9109      	str	r1, [sp, #36]	@ 0x24
 800a282:	f7ff ff26 	bl	800a0d2 <__exponent>
 800a286:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a288:	1813      	adds	r3, r2, r0
 800a28a:	2a01      	cmp	r2, #1
 800a28c:	4681      	mov	r9, r0
 800a28e:	6123      	str	r3, [r4, #16]
 800a290:	dc02      	bgt.n	800a298 <_printf_float+0x150>
 800a292:	6822      	ldr	r2, [r4, #0]
 800a294:	07d2      	lsls	r2, r2, #31
 800a296:	d501      	bpl.n	800a29c <_printf_float+0x154>
 800a298:	3301      	adds	r3, #1
 800a29a:	6123      	str	r3, [r4, #16]
 800a29c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d0a2      	beq.n	800a1ea <_printf_float+0xa2>
 800a2a4:	232d      	movs	r3, #45	@ 0x2d
 800a2a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2aa:	e79e      	b.n	800a1ea <_printf_float+0xa2>
 800a2ac:	9a06      	ldr	r2, [sp, #24]
 800a2ae:	2a47      	cmp	r2, #71	@ 0x47
 800a2b0:	d1c2      	bne.n	800a238 <_printf_float+0xf0>
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d1c0      	bne.n	800a238 <_printf_float+0xf0>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e7bd      	b.n	800a236 <_printf_float+0xee>
 800a2ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a2be:	d9db      	bls.n	800a278 <_printf_float+0x130>
 800a2c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a2c4:	d118      	bne.n	800a2f8 <_printf_float+0x1b0>
 800a2c6:	2900      	cmp	r1, #0
 800a2c8:	6863      	ldr	r3, [r4, #4]
 800a2ca:	dd0b      	ble.n	800a2e4 <_printf_float+0x19c>
 800a2cc:	6121      	str	r1, [r4, #16]
 800a2ce:	b913      	cbnz	r3, 800a2d6 <_printf_float+0x18e>
 800a2d0:	6822      	ldr	r2, [r4, #0]
 800a2d2:	07d0      	lsls	r0, r2, #31
 800a2d4:	d502      	bpl.n	800a2dc <_printf_float+0x194>
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	440b      	add	r3, r1
 800a2da:	6123      	str	r3, [r4, #16]
 800a2dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a2de:	f04f 0900 	mov.w	r9, #0
 800a2e2:	e7db      	b.n	800a29c <_printf_float+0x154>
 800a2e4:	b913      	cbnz	r3, 800a2ec <_printf_float+0x1a4>
 800a2e6:	6822      	ldr	r2, [r4, #0]
 800a2e8:	07d2      	lsls	r2, r2, #31
 800a2ea:	d501      	bpl.n	800a2f0 <_printf_float+0x1a8>
 800a2ec:	3302      	adds	r3, #2
 800a2ee:	e7f4      	b.n	800a2da <_printf_float+0x192>
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	e7f2      	b.n	800a2da <_printf_float+0x192>
 800a2f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a2f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2fa:	4299      	cmp	r1, r3
 800a2fc:	db05      	blt.n	800a30a <_printf_float+0x1c2>
 800a2fe:	6823      	ldr	r3, [r4, #0]
 800a300:	6121      	str	r1, [r4, #16]
 800a302:	07d8      	lsls	r0, r3, #31
 800a304:	d5ea      	bpl.n	800a2dc <_printf_float+0x194>
 800a306:	1c4b      	adds	r3, r1, #1
 800a308:	e7e7      	b.n	800a2da <_printf_float+0x192>
 800a30a:	2900      	cmp	r1, #0
 800a30c:	bfd4      	ite	le
 800a30e:	f1c1 0202 	rsble	r2, r1, #2
 800a312:	2201      	movgt	r2, #1
 800a314:	4413      	add	r3, r2
 800a316:	e7e0      	b.n	800a2da <_printf_float+0x192>
 800a318:	6823      	ldr	r3, [r4, #0]
 800a31a:	055a      	lsls	r2, r3, #21
 800a31c:	d407      	bmi.n	800a32e <_printf_float+0x1e6>
 800a31e:	6923      	ldr	r3, [r4, #16]
 800a320:	4642      	mov	r2, r8
 800a322:	4631      	mov	r1, r6
 800a324:	4628      	mov	r0, r5
 800a326:	47b8      	blx	r7
 800a328:	3001      	adds	r0, #1
 800a32a:	d12b      	bne.n	800a384 <_printf_float+0x23c>
 800a32c:	e767      	b.n	800a1fe <_printf_float+0xb6>
 800a32e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a332:	f240 80dd 	bls.w	800a4f0 <_printf_float+0x3a8>
 800a336:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a33a:	2200      	movs	r2, #0
 800a33c:	2300      	movs	r3, #0
 800a33e:	f7f6 fbc3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a342:	2800      	cmp	r0, #0
 800a344:	d033      	beq.n	800a3ae <_printf_float+0x266>
 800a346:	4a37      	ldr	r2, [pc, #220]	@ (800a424 <_printf_float+0x2dc>)
 800a348:	2301      	movs	r3, #1
 800a34a:	4631      	mov	r1, r6
 800a34c:	4628      	mov	r0, r5
 800a34e:	47b8      	blx	r7
 800a350:	3001      	adds	r0, #1
 800a352:	f43f af54 	beq.w	800a1fe <_printf_float+0xb6>
 800a356:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a35a:	4543      	cmp	r3, r8
 800a35c:	db02      	blt.n	800a364 <_printf_float+0x21c>
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	07d8      	lsls	r0, r3, #31
 800a362:	d50f      	bpl.n	800a384 <_printf_float+0x23c>
 800a364:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a368:	4631      	mov	r1, r6
 800a36a:	4628      	mov	r0, r5
 800a36c:	47b8      	blx	r7
 800a36e:	3001      	adds	r0, #1
 800a370:	f43f af45 	beq.w	800a1fe <_printf_float+0xb6>
 800a374:	f04f 0900 	mov.w	r9, #0
 800a378:	f108 38ff 	add.w	r8, r8, #4294967295
 800a37c:	f104 0a1a 	add.w	sl, r4, #26
 800a380:	45c8      	cmp	r8, r9
 800a382:	dc09      	bgt.n	800a398 <_printf_float+0x250>
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	079b      	lsls	r3, r3, #30
 800a388:	f100 8103 	bmi.w	800a592 <_printf_float+0x44a>
 800a38c:	68e0      	ldr	r0, [r4, #12]
 800a38e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a390:	4298      	cmp	r0, r3
 800a392:	bfb8      	it	lt
 800a394:	4618      	movlt	r0, r3
 800a396:	e734      	b.n	800a202 <_printf_float+0xba>
 800a398:	2301      	movs	r3, #1
 800a39a:	4652      	mov	r2, sl
 800a39c:	4631      	mov	r1, r6
 800a39e:	4628      	mov	r0, r5
 800a3a0:	47b8      	blx	r7
 800a3a2:	3001      	adds	r0, #1
 800a3a4:	f43f af2b 	beq.w	800a1fe <_printf_float+0xb6>
 800a3a8:	f109 0901 	add.w	r9, r9, #1
 800a3ac:	e7e8      	b.n	800a380 <_printf_float+0x238>
 800a3ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	dc39      	bgt.n	800a428 <_printf_float+0x2e0>
 800a3b4:	4a1b      	ldr	r2, [pc, #108]	@ (800a424 <_printf_float+0x2dc>)
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	4631      	mov	r1, r6
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	47b8      	blx	r7
 800a3be:	3001      	adds	r0, #1
 800a3c0:	f43f af1d 	beq.w	800a1fe <_printf_float+0xb6>
 800a3c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a3c8:	ea59 0303 	orrs.w	r3, r9, r3
 800a3cc:	d102      	bne.n	800a3d4 <_printf_float+0x28c>
 800a3ce:	6823      	ldr	r3, [r4, #0]
 800a3d0:	07d9      	lsls	r1, r3, #31
 800a3d2:	d5d7      	bpl.n	800a384 <_printf_float+0x23c>
 800a3d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3d8:	4631      	mov	r1, r6
 800a3da:	4628      	mov	r0, r5
 800a3dc:	47b8      	blx	r7
 800a3de:	3001      	adds	r0, #1
 800a3e0:	f43f af0d 	beq.w	800a1fe <_printf_float+0xb6>
 800a3e4:	f04f 0a00 	mov.w	sl, #0
 800a3e8:	f104 0b1a 	add.w	fp, r4, #26
 800a3ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3ee:	425b      	negs	r3, r3
 800a3f0:	4553      	cmp	r3, sl
 800a3f2:	dc01      	bgt.n	800a3f8 <_printf_float+0x2b0>
 800a3f4:	464b      	mov	r3, r9
 800a3f6:	e793      	b.n	800a320 <_printf_float+0x1d8>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	465a      	mov	r2, fp
 800a3fc:	4631      	mov	r1, r6
 800a3fe:	4628      	mov	r0, r5
 800a400:	47b8      	blx	r7
 800a402:	3001      	adds	r0, #1
 800a404:	f43f aefb 	beq.w	800a1fe <_printf_float+0xb6>
 800a408:	f10a 0a01 	add.w	sl, sl, #1
 800a40c:	e7ee      	b.n	800a3ec <_printf_float+0x2a4>
 800a40e:	bf00      	nop
 800a410:	7fefffff 	.word	0x7fefffff
 800a414:	0800d3ec 	.word	0x0800d3ec
 800a418:	0800d3f0 	.word	0x0800d3f0
 800a41c:	0800d3f4 	.word	0x0800d3f4
 800a420:	0800d3f8 	.word	0x0800d3f8
 800a424:	0800d3fc 	.word	0x0800d3fc
 800a428:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a42a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a42e:	4553      	cmp	r3, sl
 800a430:	bfa8      	it	ge
 800a432:	4653      	movge	r3, sl
 800a434:	2b00      	cmp	r3, #0
 800a436:	4699      	mov	r9, r3
 800a438:	dc36      	bgt.n	800a4a8 <_printf_float+0x360>
 800a43a:	f04f 0b00 	mov.w	fp, #0
 800a43e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a442:	f104 021a 	add.w	r2, r4, #26
 800a446:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a448:	9306      	str	r3, [sp, #24]
 800a44a:	eba3 0309 	sub.w	r3, r3, r9
 800a44e:	455b      	cmp	r3, fp
 800a450:	dc31      	bgt.n	800a4b6 <_printf_float+0x36e>
 800a452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a454:	459a      	cmp	sl, r3
 800a456:	dc3a      	bgt.n	800a4ce <_printf_float+0x386>
 800a458:	6823      	ldr	r3, [r4, #0]
 800a45a:	07da      	lsls	r2, r3, #31
 800a45c:	d437      	bmi.n	800a4ce <_printf_float+0x386>
 800a45e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a460:	ebaa 0903 	sub.w	r9, sl, r3
 800a464:	9b06      	ldr	r3, [sp, #24]
 800a466:	ebaa 0303 	sub.w	r3, sl, r3
 800a46a:	4599      	cmp	r9, r3
 800a46c:	bfa8      	it	ge
 800a46e:	4699      	movge	r9, r3
 800a470:	f1b9 0f00 	cmp.w	r9, #0
 800a474:	dc33      	bgt.n	800a4de <_printf_float+0x396>
 800a476:	f04f 0800 	mov.w	r8, #0
 800a47a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a47e:	f104 0b1a 	add.w	fp, r4, #26
 800a482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a484:	ebaa 0303 	sub.w	r3, sl, r3
 800a488:	eba3 0309 	sub.w	r3, r3, r9
 800a48c:	4543      	cmp	r3, r8
 800a48e:	f77f af79 	ble.w	800a384 <_printf_float+0x23c>
 800a492:	2301      	movs	r3, #1
 800a494:	465a      	mov	r2, fp
 800a496:	4631      	mov	r1, r6
 800a498:	4628      	mov	r0, r5
 800a49a:	47b8      	blx	r7
 800a49c:	3001      	adds	r0, #1
 800a49e:	f43f aeae 	beq.w	800a1fe <_printf_float+0xb6>
 800a4a2:	f108 0801 	add.w	r8, r8, #1
 800a4a6:	e7ec      	b.n	800a482 <_printf_float+0x33a>
 800a4a8:	4642      	mov	r2, r8
 800a4aa:	4631      	mov	r1, r6
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	47b8      	blx	r7
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	d1c2      	bne.n	800a43a <_printf_float+0x2f2>
 800a4b4:	e6a3      	b.n	800a1fe <_printf_float+0xb6>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	4631      	mov	r1, r6
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	9206      	str	r2, [sp, #24]
 800a4be:	47b8      	blx	r7
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	f43f ae9c 	beq.w	800a1fe <_printf_float+0xb6>
 800a4c6:	9a06      	ldr	r2, [sp, #24]
 800a4c8:	f10b 0b01 	add.w	fp, fp, #1
 800a4cc:	e7bb      	b.n	800a446 <_printf_float+0x2fe>
 800a4ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4d2:	4631      	mov	r1, r6
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	47b8      	blx	r7
 800a4d8:	3001      	adds	r0, #1
 800a4da:	d1c0      	bne.n	800a45e <_printf_float+0x316>
 800a4dc:	e68f      	b.n	800a1fe <_printf_float+0xb6>
 800a4de:	9a06      	ldr	r2, [sp, #24]
 800a4e0:	464b      	mov	r3, r9
 800a4e2:	4442      	add	r2, r8
 800a4e4:	4631      	mov	r1, r6
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	47b8      	blx	r7
 800a4ea:	3001      	adds	r0, #1
 800a4ec:	d1c3      	bne.n	800a476 <_printf_float+0x32e>
 800a4ee:	e686      	b.n	800a1fe <_printf_float+0xb6>
 800a4f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a4f4:	f1ba 0f01 	cmp.w	sl, #1
 800a4f8:	dc01      	bgt.n	800a4fe <_printf_float+0x3b6>
 800a4fa:	07db      	lsls	r3, r3, #31
 800a4fc:	d536      	bpl.n	800a56c <_printf_float+0x424>
 800a4fe:	2301      	movs	r3, #1
 800a500:	4642      	mov	r2, r8
 800a502:	4631      	mov	r1, r6
 800a504:	4628      	mov	r0, r5
 800a506:	47b8      	blx	r7
 800a508:	3001      	adds	r0, #1
 800a50a:	f43f ae78 	beq.w	800a1fe <_printf_float+0xb6>
 800a50e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a512:	4631      	mov	r1, r6
 800a514:	4628      	mov	r0, r5
 800a516:	47b8      	blx	r7
 800a518:	3001      	adds	r0, #1
 800a51a:	f43f ae70 	beq.w	800a1fe <_printf_float+0xb6>
 800a51e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a522:	2200      	movs	r2, #0
 800a524:	2300      	movs	r3, #0
 800a526:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a52a:	f7f6 facd 	bl	8000ac8 <__aeabi_dcmpeq>
 800a52e:	b9c0      	cbnz	r0, 800a562 <_printf_float+0x41a>
 800a530:	4653      	mov	r3, sl
 800a532:	f108 0201 	add.w	r2, r8, #1
 800a536:	4631      	mov	r1, r6
 800a538:	4628      	mov	r0, r5
 800a53a:	47b8      	blx	r7
 800a53c:	3001      	adds	r0, #1
 800a53e:	d10c      	bne.n	800a55a <_printf_float+0x412>
 800a540:	e65d      	b.n	800a1fe <_printf_float+0xb6>
 800a542:	2301      	movs	r3, #1
 800a544:	465a      	mov	r2, fp
 800a546:	4631      	mov	r1, r6
 800a548:	4628      	mov	r0, r5
 800a54a:	47b8      	blx	r7
 800a54c:	3001      	adds	r0, #1
 800a54e:	f43f ae56 	beq.w	800a1fe <_printf_float+0xb6>
 800a552:	f108 0801 	add.w	r8, r8, #1
 800a556:	45d0      	cmp	r8, sl
 800a558:	dbf3      	blt.n	800a542 <_printf_float+0x3fa>
 800a55a:	464b      	mov	r3, r9
 800a55c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a560:	e6df      	b.n	800a322 <_printf_float+0x1da>
 800a562:	f04f 0800 	mov.w	r8, #0
 800a566:	f104 0b1a 	add.w	fp, r4, #26
 800a56a:	e7f4      	b.n	800a556 <_printf_float+0x40e>
 800a56c:	2301      	movs	r3, #1
 800a56e:	4642      	mov	r2, r8
 800a570:	e7e1      	b.n	800a536 <_printf_float+0x3ee>
 800a572:	2301      	movs	r3, #1
 800a574:	464a      	mov	r2, r9
 800a576:	4631      	mov	r1, r6
 800a578:	4628      	mov	r0, r5
 800a57a:	47b8      	blx	r7
 800a57c:	3001      	adds	r0, #1
 800a57e:	f43f ae3e 	beq.w	800a1fe <_printf_float+0xb6>
 800a582:	f108 0801 	add.w	r8, r8, #1
 800a586:	68e3      	ldr	r3, [r4, #12]
 800a588:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a58a:	1a5b      	subs	r3, r3, r1
 800a58c:	4543      	cmp	r3, r8
 800a58e:	dcf0      	bgt.n	800a572 <_printf_float+0x42a>
 800a590:	e6fc      	b.n	800a38c <_printf_float+0x244>
 800a592:	f04f 0800 	mov.w	r8, #0
 800a596:	f104 0919 	add.w	r9, r4, #25
 800a59a:	e7f4      	b.n	800a586 <_printf_float+0x43e>

0800a59c <_printf_common>:
 800a59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a0:	4616      	mov	r6, r2
 800a5a2:	4698      	mov	r8, r3
 800a5a4:	688a      	ldr	r2, [r1, #8]
 800a5a6:	690b      	ldr	r3, [r1, #16]
 800a5a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	bfb8      	it	lt
 800a5b0:	4613      	movlt	r3, r2
 800a5b2:	6033      	str	r3, [r6, #0]
 800a5b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a5b8:	4607      	mov	r7, r0
 800a5ba:	460c      	mov	r4, r1
 800a5bc:	b10a      	cbz	r2, 800a5c2 <_printf_common+0x26>
 800a5be:	3301      	adds	r3, #1
 800a5c0:	6033      	str	r3, [r6, #0]
 800a5c2:	6823      	ldr	r3, [r4, #0]
 800a5c4:	0699      	lsls	r1, r3, #26
 800a5c6:	bf42      	ittt	mi
 800a5c8:	6833      	ldrmi	r3, [r6, #0]
 800a5ca:	3302      	addmi	r3, #2
 800a5cc:	6033      	strmi	r3, [r6, #0]
 800a5ce:	6825      	ldr	r5, [r4, #0]
 800a5d0:	f015 0506 	ands.w	r5, r5, #6
 800a5d4:	d106      	bne.n	800a5e4 <_printf_common+0x48>
 800a5d6:	f104 0a19 	add.w	sl, r4, #25
 800a5da:	68e3      	ldr	r3, [r4, #12]
 800a5dc:	6832      	ldr	r2, [r6, #0]
 800a5de:	1a9b      	subs	r3, r3, r2
 800a5e0:	42ab      	cmp	r3, r5
 800a5e2:	dc26      	bgt.n	800a632 <_printf_common+0x96>
 800a5e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a5e8:	6822      	ldr	r2, [r4, #0]
 800a5ea:	3b00      	subs	r3, #0
 800a5ec:	bf18      	it	ne
 800a5ee:	2301      	movne	r3, #1
 800a5f0:	0692      	lsls	r2, r2, #26
 800a5f2:	d42b      	bmi.n	800a64c <_printf_common+0xb0>
 800a5f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a5f8:	4641      	mov	r1, r8
 800a5fa:	4638      	mov	r0, r7
 800a5fc:	47c8      	blx	r9
 800a5fe:	3001      	adds	r0, #1
 800a600:	d01e      	beq.n	800a640 <_printf_common+0xa4>
 800a602:	6823      	ldr	r3, [r4, #0]
 800a604:	6922      	ldr	r2, [r4, #16]
 800a606:	f003 0306 	and.w	r3, r3, #6
 800a60a:	2b04      	cmp	r3, #4
 800a60c:	bf02      	ittt	eq
 800a60e:	68e5      	ldreq	r5, [r4, #12]
 800a610:	6833      	ldreq	r3, [r6, #0]
 800a612:	1aed      	subeq	r5, r5, r3
 800a614:	68a3      	ldr	r3, [r4, #8]
 800a616:	bf0c      	ite	eq
 800a618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a61c:	2500      	movne	r5, #0
 800a61e:	4293      	cmp	r3, r2
 800a620:	bfc4      	itt	gt
 800a622:	1a9b      	subgt	r3, r3, r2
 800a624:	18ed      	addgt	r5, r5, r3
 800a626:	2600      	movs	r6, #0
 800a628:	341a      	adds	r4, #26
 800a62a:	42b5      	cmp	r5, r6
 800a62c:	d11a      	bne.n	800a664 <_printf_common+0xc8>
 800a62e:	2000      	movs	r0, #0
 800a630:	e008      	b.n	800a644 <_printf_common+0xa8>
 800a632:	2301      	movs	r3, #1
 800a634:	4652      	mov	r2, sl
 800a636:	4641      	mov	r1, r8
 800a638:	4638      	mov	r0, r7
 800a63a:	47c8      	blx	r9
 800a63c:	3001      	adds	r0, #1
 800a63e:	d103      	bne.n	800a648 <_printf_common+0xac>
 800a640:	f04f 30ff 	mov.w	r0, #4294967295
 800a644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a648:	3501      	adds	r5, #1
 800a64a:	e7c6      	b.n	800a5da <_printf_common+0x3e>
 800a64c:	18e1      	adds	r1, r4, r3
 800a64e:	1c5a      	adds	r2, r3, #1
 800a650:	2030      	movs	r0, #48	@ 0x30
 800a652:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a656:	4422      	add	r2, r4
 800a658:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a65c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a660:	3302      	adds	r3, #2
 800a662:	e7c7      	b.n	800a5f4 <_printf_common+0x58>
 800a664:	2301      	movs	r3, #1
 800a666:	4622      	mov	r2, r4
 800a668:	4641      	mov	r1, r8
 800a66a:	4638      	mov	r0, r7
 800a66c:	47c8      	blx	r9
 800a66e:	3001      	adds	r0, #1
 800a670:	d0e6      	beq.n	800a640 <_printf_common+0xa4>
 800a672:	3601      	adds	r6, #1
 800a674:	e7d9      	b.n	800a62a <_printf_common+0x8e>
	...

0800a678 <_printf_i>:
 800a678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a67c:	7e0f      	ldrb	r7, [r1, #24]
 800a67e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a680:	2f78      	cmp	r7, #120	@ 0x78
 800a682:	4691      	mov	r9, r2
 800a684:	4680      	mov	r8, r0
 800a686:	460c      	mov	r4, r1
 800a688:	469a      	mov	sl, r3
 800a68a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a68e:	d807      	bhi.n	800a6a0 <_printf_i+0x28>
 800a690:	2f62      	cmp	r7, #98	@ 0x62
 800a692:	d80a      	bhi.n	800a6aa <_printf_i+0x32>
 800a694:	2f00      	cmp	r7, #0
 800a696:	f000 80d2 	beq.w	800a83e <_printf_i+0x1c6>
 800a69a:	2f58      	cmp	r7, #88	@ 0x58
 800a69c:	f000 80b9 	beq.w	800a812 <_printf_i+0x19a>
 800a6a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a6a8:	e03a      	b.n	800a720 <_printf_i+0xa8>
 800a6aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a6ae:	2b15      	cmp	r3, #21
 800a6b0:	d8f6      	bhi.n	800a6a0 <_printf_i+0x28>
 800a6b2:	a101      	add	r1, pc, #4	@ (adr r1, 800a6b8 <_printf_i+0x40>)
 800a6b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6b8:	0800a711 	.word	0x0800a711
 800a6bc:	0800a725 	.word	0x0800a725
 800a6c0:	0800a6a1 	.word	0x0800a6a1
 800a6c4:	0800a6a1 	.word	0x0800a6a1
 800a6c8:	0800a6a1 	.word	0x0800a6a1
 800a6cc:	0800a6a1 	.word	0x0800a6a1
 800a6d0:	0800a725 	.word	0x0800a725
 800a6d4:	0800a6a1 	.word	0x0800a6a1
 800a6d8:	0800a6a1 	.word	0x0800a6a1
 800a6dc:	0800a6a1 	.word	0x0800a6a1
 800a6e0:	0800a6a1 	.word	0x0800a6a1
 800a6e4:	0800a825 	.word	0x0800a825
 800a6e8:	0800a74f 	.word	0x0800a74f
 800a6ec:	0800a7df 	.word	0x0800a7df
 800a6f0:	0800a6a1 	.word	0x0800a6a1
 800a6f4:	0800a6a1 	.word	0x0800a6a1
 800a6f8:	0800a847 	.word	0x0800a847
 800a6fc:	0800a6a1 	.word	0x0800a6a1
 800a700:	0800a74f 	.word	0x0800a74f
 800a704:	0800a6a1 	.word	0x0800a6a1
 800a708:	0800a6a1 	.word	0x0800a6a1
 800a70c:	0800a7e7 	.word	0x0800a7e7
 800a710:	6833      	ldr	r3, [r6, #0]
 800a712:	1d1a      	adds	r2, r3, #4
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	6032      	str	r2, [r6, #0]
 800a718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a71c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a720:	2301      	movs	r3, #1
 800a722:	e09d      	b.n	800a860 <_printf_i+0x1e8>
 800a724:	6833      	ldr	r3, [r6, #0]
 800a726:	6820      	ldr	r0, [r4, #0]
 800a728:	1d19      	adds	r1, r3, #4
 800a72a:	6031      	str	r1, [r6, #0]
 800a72c:	0606      	lsls	r6, r0, #24
 800a72e:	d501      	bpl.n	800a734 <_printf_i+0xbc>
 800a730:	681d      	ldr	r5, [r3, #0]
 800a732:	e003      	b.n	800a73c <_printf_i+0xc4>
 800a734:	0645      	lsls	r5, r0, #25
 800a736:	d5fb      	bpl.n	800a730 <_printf_i+0xb8>
 800a738:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a73c:	2d00      	cmp	r5, #0
 800a73e:	da03      	bge.n	800a748 <_printf_i+0xd0>
 800a740:	232d      	movs	r3, #45	@ 0x2d
 800a742:	426d      	negs	r5, r5
 800a744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a748:	4859      	ldr	r0, [pc, #356]	@ (800a8b0 <_printf_i+0x238>)
 800a74a:	230a      	movs	r3, #10
 800a74c:	e011      	b.n	800a772 <_printf_i+0xfa>
 800a74e:	6821      	ldr	r1, [r4, #0]
 800a750:	6833      	ldr	r3, [r6, #0]
 800a752:	0608      	lsls	r0, r1, #24
 800a754:	f853 5b04 	ldr.w	r5, [r3], #4
 800a758:	d402      	bmi.n	800a760 <_printf_i+0xe8>
 800a75a:	0649      	lsls	r1, r1, #25
 800a75c:	bf48      	it	mi
 800a75e:	b2ad      	uxthmi	r5, r5
 800a760:	2f6f      	cmp	r7, #111	@ 0x6f
 800a762:	4853      	ldr	r0, [pc, #332]	@ (800a8b0 <_printf_i+0x238>)
 800a764:	6033      	str	r3, [r6, #0]
 800a766:	bf14      	ite	ne
 800a768:	230a      	movne	r3, #10
 800a76a:	2308      	moveq	r3, #8
 800a76c:	2100      	movs	r1, #0
 800a76e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a772:	6866      	ldr	r6, [r4, #4]
 800a774:	60a6      	str	r6, [r4, #8]
 800a776:	2e00      	cmp	r6, #0
 800a778:	bfa2      	ittt	ge
 800a77a:	6821      	ldrge	r1, [r4, #0]
 800a77c:	f021 0104 	bicge.w	r1, r1, #4
 800a780:	6021      	strge	r1, [r4, #0]
 800a782:	b90d      	cbnz	r5, 800a788 <_printf_i+0x110>
 800a784:	2e00      	cmp	r6, #0
 800a786:	d04b      	beq.n	800a820 <_printf_i+0x1a8>
 800a788:	4616      	mov	r6, r2
 800a78a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a78e:	fb03 5711 	mls	r7, r3, r1, r5
 800a792:	5dc7      	ldrb	r7, [r0, r7]
 800a794:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a798:	462f      	mov	r7, r5
 800a79a:	42bb      	cmp	r3, r7
 800a79c:	460d      	mov	r5, r1
 800a79e:	d9f4      	bls.n	800a78a <_printf_i+0x112>
 800a7a0:	2b08      	cmp	r3, #8
 800a7a2:	d10b      	bne.n	800a7bc <_printf_i+0x144>
 800a7a4:	6823      	ldr	r3, [r4, #0]
 800a7a6:	07df      	lsls	r7, r3, #31
 800a7a8:	d508      	bpl.n	800a7bc <_printf_i+0x144>
 800a7aa:	6923      	ldr	r3, [r4, #16]
 800a7ac:	6861      	ldr	r1, [r4, #4]
 800a7ae:	4299      	cmp	r1, r3
 800a7b0:	bfde      	ittt	le
 800a7b2:	2330      	movle	r3, #48	@ 0x30
 800a7b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a7b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a7bc:	1b92      	subs	r2, r2, r6
 800a7be:	6122      	str	r2, [r4, #16]
 800a7c0:	f8cd a000 	str.w	sl, [sp]
 800a7c4:	464b      	mov	r3, r9
 800a7c6:	aa03      	add	r2, sp, #12
 800a7c8:	4621      	mov	r1, r4
 800a7ca:	4640      	mov	r0, r8
 800a7cc:	f7ff fee6 	bl	800a59c <_printf_common>
 800a7d0:	3001      	adds	r0, #1
 800a7d2:	d14a      	bne.n	800a86a <_printf_i+0x1f2>
 800a7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d8:	b004      	add	sp, #16
 800a7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	f043 0320 	orr.w	r3, r3, #32
 800a7e4:	6023      	str	r3, [r4, #0]
 800a7e6:	4833      	ldr	r0, [pc, #204]	@ (800a8b4 <_printf_i+0x23c>)
 800a7e8:	2778      	movs	r7, #120	@ 0x78
 800a7ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	6831      	ldr	r1, [r6, #0]
 800a7f2:	061f      	lsls	r7, r3, #24
 800a7f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800a7f8:	d402      	bmi.n	800a800 <_printf_i+0x188>
 800a7fa:	065f      	lsls	r7, r3, #25
 800a7fc:	bf48      	it	mi
 800a7fe:	b2ad      	uxthmi	r5, r5
 800a800:	6031      	str	r1, [r6, #0]
 800a802:	07d9      	lsls	r1, r3, #31
 800a804:	bf44      	itt	mi
 800a806:	f043 0320 	orrmi.w	r3, r3, #32
 800a80a:	6023      	strmi	r3, [r4, #0]
 800a80c:	b11d      	cbz	r5, 800a816 <_printf_i+0x19e>
 800a80e:	2310      	movs	r3, #16
 800a810:	e7ac      	b.n	800a76c <_printf_i+0xf4>
 800a812:	4827      	ldr	r0, [pc, #156]	@ (800a8b0 <_printf_i+0x238>)
 800a814:	e7e9      	b.n	800a7ea <_printf_i+0x172>
 800a816:	6823      	ldr	r3, [r4, #0]
 800a818:	f023 0320 	bic.w	r3, r3, #32
 800a81c:	6023      	str	r3, [r4, #0]
 800a81e:	e7f6      	b.n	800a80e <_printf_i+0x196>
 800a820:	4616      	mov	r6, r2
 800a822:	e7bd      	b.n	800a7a0 <_printf_i+0x128>
 800a824:	6833      	ldr	r3, [r6, #0]
 800a826:	6825      	ldr	r5, [r4, #0]
 800a828:	6961      	ldr	r1, [r4, #20]
 800a82a:	1d18      	adds	r0, r3, #4
 800a82c:	6030      	str	r0, [r6, #0]
 800a82e:	062e      	lsls	r6, r5, #24
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	d501      	bpl.n	800a838 <_printf_i+0x1c0>
 800a834:	6019      	str	r1, [r3, #0]
 800a836:	e002      	b.n	800a83e <_printf_i+0x1c6>
 800a838:	0668      	lsls	r0, r5, #25
 800a83a:	d5fb      	bpl.n	800a834 <_printf_i+0x1bc>
 800a83c:	8019      	strh	r1, [r3, #0]
 800a83e:	2300      	movs	r3, #0
 800a840:	6123      	str	r3, [r4, #16]
 800a842:	4616      	mov	r6, r2
 800a844:	e7bc      	b.n	800a7c0 <_printf_i+0x148>
 800a846:	6833      	ldr	r3, [r6, #0]
 800a848:	1d1a      	adds	r2, r3, #4
 800a84a:	6032      	str	r2, [r6, #0]
 800a84c:	681e      	ldr	r6, [r3, #0]
 800a84e:	6862      	ldr	r2, [r4, #4]
 800a850:	2100      	movs	r1, #0
 800a852:	4630      	mov	r0, r6
 800a854:	f7f5 fcbc 	bl	80001d0 <memchr>
 800a858:	b108      	cbz	r0, 800a85e <_printf_i+0x1e6>
 800a85a:	1b80      	subs	r0, r0, r6
 800a85c:	6060      	str	r0, [r4, #4]
 800a85e:	6863      	ldr	r3, [r4, #4]
 800a860:	6123      	str	r3, [r4, #16]
 800a862:	2300      	movs	r3, #0
 800a864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a868:	e7aa      	b.n	800a7c0 <_printf_i+0x148>
 800a86a:	6923      	ldr	r3, [r4, #16]
 800a86c:	4632      	mov	r2, r6
 800a86e:	4649      	mov	r1, r9
 800a870:	4640      	mov	r0, r8
 800a872:	47d0      	blx	sl
 800a874:	3001      	adds	r0, #1
 800a876:	d0ad      	beq.n	800a7d4 <_printf_i+0x15c>
 800a878:	6823      	ldr	r3, [r4, #0]
 800a87a:	079b      	lsls	r3, r3, #30
 800a87c:	d413      	bmi.n	800a8a6 <_printf_i+0x22e>
 800a87e:	68e0      	ldr	r0, [r4, #12]
 800a880:	9b03      	ldr	r3, [sp, #12]
 800a882:	4298      	cmp	r0, r3
 800a884:	bfb8      	it	lt
 800a886:	4618      	movlt	r0, r3
 800a888:	e7a6      	b.n	800a7d8 <_printf_i+0x160>
 800a88a:	2301      	movs	r3, #1
 800a88c:	4632      	mov	r2, r6
 800a88e:	4649      	mov	r1, r9
 800a890:	4640      	mov	r0, r8
 800a892:	47d0      	blx	sl
 800a894:	3001      	adds	r0, #1
 800a896:	d09d      	beq.n	800a7d4 <_printf_i+0x15c>
 800a898:	3501      	adds	r5, #1
 800a89a:	68e3      	ldr	r3, [r4, #12]
 800a89c:	9903      	ldr	r1, [sp, #12]
 800a89e:	1a5b      	subs	r3, r3, r1
 800a8a0:	42ab      	cmp	r3, r5
 800a8a2:	dcf2      	bgt.n	800a88a <_printf_i+0x212>
 800a8a4:	e7eb      	b.n	800a87e <_printf_i+0x206>
 800a8a6:	2500      	movs	r5, #0
 800a8a8:	f104 0619 	add.w	r6, r4, #25
 800a8ac:	e7f5      	b.n	800a89a <_printf_i+0x222>
 800a8ae:	bf00      	nop
 800a8b0:	0800d3fe 	.word	0x0800d3fe
 800a8b4:	0800d40f 	.word	0x0800d40f

0800a8b8 <std>:
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	b510      	push	{r4, lr}
 800a8bc:	4604      	mov	r4, r0
 800a8be:	e9c0 3300 	strd	r3, r3, [r0]
 800a8c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8c6:	6083      	str	r3, [r0, #8]
 800a8c8:	8181      	strh	r1, [r0, #12]
 800a8ca:	6643      	str	r3, [r0, #100]	@ 0x64
 800a8cc:	81c2      	strh	r2, [r0, #14]
 800a8ce:	6183      	str	r3, [r0, #24]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	2208      	movs	r2, #8
 800a8d4:	305c      	adds	r0, #92	@ 0x5c
 800a8d6:	f000 f9f9 	bl	800accc <memset>
 800a8da:	4b0d      	ldr	r3, [pc, #52]	@ (800a910 <std+0x58>)
 800a8dc:	6263      	str	r3, [r4, #36]	@ 0x24
 800a8de:	4b0d      	ldr	r3, [pc, #52]	@ (800a914 <std+0x5c>)
 800a8e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a8e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a918 <std+0x60>)
 800a8e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a8e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a91c <std+0x64>)
 800a8e8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a8ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a920 <std+0x68>)
 800a8ec:	6224      	str	r4, [r4, #32]
 800a8ee:	429c      	cmp	r4, r3
 800a8f0:	d006      	beq.n	800a900 <std+0x48>
 800a8f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a8f6:	4294      	cmp	r4, r2
 800a8f8:	d002      	beq.n	800a900 <std+0x48>
 800a8fa:	33d0      	adds	r3, #208	@ 0xd0
 800a8fc:	429c      	cmp	r4, r3
 800a8fe:	d105      	bne.n	800a90c <std+0x54>
 800a900:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a908:	f000 bab2 	b.w	800ae70 <__retarget_lock_init_recursive>
 800a90c:	bd10      	pop	{r4, pc}
 800a90e:	bf00      	nop
 800a910:	0800ab1d 	.word	0x0800ab1d
 800a914:	0800ab3f 	.word	0x0800ab3f
 800a918:	0800ab77 	.word	0x0800ab77
 800a91c:	0800ab9b 	.word	0x0800ab9b
 800a920:	2000270c 	.word	0x2000270c

0800a924 <stdio_exit_handler>:
 800a924:	4a02      	ldr	r2, [pc, #8]	@ (800a930 <stdio_exit_handler+0xc>)
 800a926:	4903      	ldr	r1, [pc, #12]	@ (800a934 <stdio_exit_handler+0x10>)
 800a928:	4803      	ldr	r0, [pc, #12]	@ (800a938 <stdio_exit_handler+0x14>)
 800a92a:	f000 b869 	b.w	800aa00 <_fwalk_sglue>
 800a92e:	bf00      	nop
 800a930:	20000010 	.word	0x20000010
 800a934:	0800c7c1 	.word	0x0800c7c1
 800a938:	20000020 	.word	0x20000020

0800a93c <cleanup_stdio>:
 800a93c:	6841      	ldr	r1, [r0, #4]
 800a93e:	4b0c      	ldr	r3, [pc, #48]	@ (800a970 <cleanup_stdio+0x34>)
 800a940:	4299      	cmp	r1, r3
 800a942:	b510      	push	{r4, lr}
 800a944:	4604      	mov	r4, r0
 800a946:	d001      	beq.n	800a94c <cleanup_stdio+0x10>
 800a948:	f001 ff3a 	bl	800c7c0 <_fflush_r>
 800a94c:	68a1      	ldr	r1, [r4, #8]
 800a94e:	4b09      	ldr	r3, [pc, #36]	@ (800a974 <cleanup_stdio+0x38>)
 800a950:	4299      	cmp	r1, r3
 800a952:	d002      	beq.n	800a95a <cleanup_stdio+0x1e>
 800a954:	4620      	mov	r0, r4
 800a956:	f001 ff33 	bl	800c7c0 <_fflush_r>
 800a95a:	68e1      	ldr	r1, [r4, #12]
 800a95c:	4b06      	ldr	r3, [pc, #24]	@ (800a978 <cleanup_stdio+0x3c>)
 800a95e:	4299      	cmp	r1, r3
 800a960:	d004      	beq.n	800a96c <cleanup_stdio+0x30>
 800a962:	4620      	mov	r0, r4
 800a964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a968:	f001 bf2a 	b.w	800c7c0 <_fflush_r>
 800a96c:	bd10      	pop	{r4, pc}
 800a96e:	bf00      	nop
 800a970:	2000270c 	.word	0x2000270c
 800a974:	20002774 	.word	0x20002774
 800a978:	200027dc 	.word	0x200027dc

0800a97c <global_stdio_init.part.0>:
 800a97c:	b510      	push	{r4, lr}
 800a97e:	4b0b      	ldr	r3, [pc, #44]	@ (800a9ac <global_stdio_init.part.0+0x30>)
 800a980:	4c0b      	ldr	r4, [pc, #44]	@ (800a9b0 <global_stdio_init.part.0+0x34>)
 800a982:	4a0c      	ldr	r2, [pc, #48]	@ (800a9b4 <global_stdio_init.part.0+0x38>)
 800a984:	601a      	str	r2, [r3, #0]
 800a986:	4620      	mov	r0, r4
 800a988:	2200      	movs	r2, #0
 800a98a:	2104      	movs	r1, #4
 800a98c:	f7ff ff94 	bl	800a8b8 <std>
 800a990:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a994:	2201      	movs	r2, #1
 800a996:	2109      	movs	r1, #9
 800a998:	f7ff ff8e 	bl	800a8b8 <std>
 800a99c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a9a0:	2202      	movs	r2, #2
 800a9a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9a6:	2112      	movs	r1, #18
 800a9a8:	f7ff bf86 	b.w	800a8b8 <std>
 800a9ac:	20002844 	.word	0x20002844
 800a9b0:	2000270c 	.word	0x2000270c
 800a9b4:	0800a925 	.word	0x0800a925

0800a9b8 <__sfp_lock_acquire>:
 800a9b8:	4801      	ldr	r0, [pc, #4]	@ (800a9c0 <__sfp_lock_acquire+0x8>)
 800a9ba:	f000 ba5a 	b.w	800ae72 <__retarget_lock_acquire_recursive>
 800a9be:	bf00      	nop
 800a9c0:	2000284d 	.word	0x2000284d

0800a9c4 <__sfp_lock_release>:
 800a9c4:	4801      	ldr	r0, [pc, #4]	@ (800a9cc <__sfp_lock_release+0x8>)
 800a9c6:	f000 ba55 	b.w	800ae74 <__retarget_lock_release_recursive>
 800a9ca:	bf00      	nop
 800a9cc:	2000284d 	.word	0x2000284d

0800a9d0 <__sinit>:
 800a9d0:	b510      	push	{r4, lr}
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	f7ff fff0 	bl	800a9b8 <__sfp_lock_acquire>
 800a9d8:	6a23      	ldr	r3, [r4, #32]
 800a9da:	b11b      	cbz	r3, 800a9e4 <__sinit+0x14>
 800a9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9e0:	f7ff bff0 	b.w	800a9c4 <__sfp_lock_release>
 800a9e4:	4b04      	ldr	r3, [pc, #16]	@ (800a9f8 <__sinit+0x28>)
 800a9e6:	6223      	str	r3, [r4, #32]
 800a9e8:	4b04      	ldr	r3, [pc, #16]	@ (800a9fc <__sinit+0x2c>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d1f5      	bne.n	800a9dc <__sinit+0xc>
 800a9f0:	f7ff ffc4 	bl	800a97c <global_stdio_init.part.0>
 800a9f4:	e7f2      	b.n	800a9dc <__sinit+0xc>
 800a9f6:	bf00      	nop
 800a9f8:	0800a93d 	.word	0x0800a93d
 800a9fc:	20002844 	.word	0x20002844

0800aa00 <_fwalk_sglue>:
 800aa00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa04:	4607      	mov	r7, r0
 800aa06:	4688      	mov	r8, r1
 800aa08:	4614      	mov	r4, r2
 800aa0a:	2600      	movs	r6, #0
 800aa0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa10:	f1b9 0901 	subs.w	r9, r9, #1
 800aa14:	d505      	bpl.n	800aa22 <_fwalk_sglue+0x22>
 800aa16:	6824      	ldr	r4, [r4, #0]
 800aa18:	2c00      	cmp	r4, #0
 800aa1a:	d1f7      	bne.n	800aa0c <_fwalk_sglue+0xc>
 800aa1c:	4630      	mov	r0, r6
 800aa1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa22:	89ab      	ldrh	r3, [r5, #12]
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d907      	bls.n	800aa38 <_fwalk_sglue+0x38>
 800aa28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	d003      	beq.n	800aa38 <_fwalk_sglue+0x38>
 800aa30:	4629      	mov	r1, r5
 800aa32:	4638      	mov	r0, r7
 800aa34:	47c0      	blx	r8
 800aa36:	4306      	orrs	r6, r0
 800aa38:	3568      	adds	r5, #104	@ 0x68
 800aa3a:	e7e9      	b.n	800aa10 <_fwalk_sglue+0x10>

0800aa3c <iprintf>:
 800aa3c:	b40f      	push	{r0, r1, r2, r3}
 800aa3e:	b507      	push	{r0, r1, r2, lr}
 800aa40:	4906      	ldr	r1, [pc, #24]	@ (800aa5c <iprintf+0x20>)
 800aa42:	ab04      	add	r3, sp, #16
 800aa44:	6808      	ldr	r0, [r1, #0]
 800aa46:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa4a:	6881      	ldr	r1, [r0, #8]
 800aa4c:	9301      	str	r3, [sp, #4]
 800aa4e:	f001 fd1b 	bl	800c488 <_vfiprintf_r>
 800aa52:	b003      	add	sp, #12
 800aa54:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa58:	b004      	add	sp, #16
 800aa5a:	4770      	bx	lr
 800aa5c:	2000001c 	.word	0x2000001c

0800aa60 <_puts_r>:
 800aa60:	6a03      	ldr	r3, [r0, #32]
 800aa62:	b570      	push	{r4, r5, r6, lr}
 800aa64:	6884      	ldr	r4, [r0, #8]
 800aa66:	4605      	mov	r5, r0
 800aa68:	460e      	mov	r6, r1
 800aa6a:	b90b      	cbnz	r3, 800aa70 <_puts_r+0x10>
 800aa6c:	f7ff ffb0 	bl	800a9d0 <__sinit>
 800aa70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa72:	07db      	lsls	r3, r3, #31
 800aa74:	d405      	bmi.n	800aa82 <_puts_r+0x22>
 800aa76:	89a3      	ldrh	r3, [r4, #12]
 800aa78:	0598      	lsls	r0, r3, #22
 800aa7a:	d402      	bmi.n	800aa82 <_puts_r+0x22>
 800aa7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa7e:	f000 f9f8 	bl	800ae72 <__retarget_lock_acquire_recursive>
 800aa82:	89a3      	ldrh	r3, [r4, #12]
 800aa84:	0719      	lsls	r1, r3, #28
 800aa86:	d502      	bpl.n	800aa8e <_puts_r+0x2e>
 800aa88:	6923      	ldr	r3, [r4, #16]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d135      	bne.n	800aafa <_puts_r+0x9a>
 800aa8e:	4621      	mov	r1, r4
 800aa90:	4628      	mov	r0, r5
 800aa92:	f000 f8c5 	bl	800ac20 <__swsetup_r>
 800aa96:	b380      	cbz	r0, 800aafa <_puts_r+0x9a>
 800aa98:	f04f 35ff 	mov.w	r5, #4294967295
 800aa9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa9e:	07da      	lsls	r2, r3, #31
 800aaa0:	d405      	bmi.n	800aaae <_puts_r+0x4e>
 800aaa2:	89a3      	ldrh	r3, [r4, #12]
 800aaa4:	059b      	lsls	r3, r3, #22
 800aaa6:	d402      	bmi.n	800aaae <_puts_r+0x4e>
 800aaa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aaaa:	f000 f9e3 	bl	800ae74 <__retarget_lock_release_recursive>
 800aaae:	4628      	mov	r0, r5
 800aab0:	bd70      	pop	{r4, r5, r6, pc}
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	da04      	bge.n	800aac0 <_puts_r+0x60>
 800aab6:	69a2      	ldr	r2, [r4, #24]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	dc17      	bgt.n	800aaec <_puts_r+0x8c>
 800aabc:	290a      	cmp	r1, #10
 800aabe:	d015      	beq.n	800aaec <_puts_r+0x8c>
 800aac0:	6823      	ldr	r3, [r4, #0]
 800aac2:	1c5a      	adds	r2, r3, #1
 800aac4:	6022      	str	r2, [r4, #0]
 800aac6:	7019      	strb	r1, [r3, #0]
 800aac8:	68a3      	ldr	r3, [r4, #8]
 800aaca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aace:	3b01      	subs	r3, #1
 800aad0:	60a3      	str	r3, [r4, #8]
 800aad2:	2900      	cmp	r1, #0
 800aad4:	d1ed      	bne.n	800aab2 <_puts_r+0x52>
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	da11      	bge.n	800aafe <_puts_r+0x9e>
 800aada:	4622      	mov	r2, r4
 800aadc:	210a      	movs	r1, #10
 800aade:	4628      	mov	r0, r5
 800aae0:	f000 f85f 	bl	800aba2 <__swbuf_r>
 800aae4:	3001      	adds	r0, #1
 800aae6:	d0d7      	beq.n	800aa98 <_puts_r+0x38>
 800aae8:	250a      	movs	r5, #10
 800aaea:	e7d7      	b.n	800aa9c <_puts_r+0x3c>
 800aaec:	4622      	mov	r2, r4
 800aaee:	4628      	mov	r0, r5
 800aaf0:	f000 f857 	bl	800aba2 <__swbuf_r>
 800aaf4:	3001      	adds	r0, #1
 800aaf6:	d1e7      	bne.n	800aac8 <_puts_r+0x68>
 800aaf8:	e7ce      	b.n	800aa98 <_puts_r+0x38>
 800aafa:	3e01      	subs	r6, #1
 800aafc:	e7e4      	b.n	800aac8 <_puts_r+0x68>
 800aafe:	6823      	ldr	r3, [r4, #0]
 800ab00:	1c5a      	adds	r2, r3, #1
 800ab02:	6022      	str	r2, [r4, #0]
 800ab04:	220a      	movs	r2, #10
 800ab06:	701a      	strb	r2, [r3, #0]
 800ab08:	e7ee      	b.n	800aae8 <_puts_r+0x88>
	...

0800ab0c <puts>:
 800ab0c:	4b02      	ldr	r3, [pc, #8]	@ (800ab18 <puts+0xc>)
 800ab0e:	4601      	mov	r1, r0
 800ab10:	6818      	ldr	r0, [r3, #0]
 800ab12:	f7ff bfa5 	b.w	800aa60 <_puts_r>
 800ab16:	bf00      	nop
 800ab18:	2000001c 	.word	0x2000001c

0800ab1c <__sread>:
 800ab1c:	b510      	push	{r4, lr}
 800ab1e:	460c      	mov	r4, r1
 800ab20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab24:	f000 f956 	bl	800add4 <_read_r>
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	bfab      	itete	ge
 800ab2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ab2e:	89a3      	ldrhlt	r3, [r4, #12]
 800ab30:	181b      	addge	r3, r3, r0
 800ab32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ab36:	bfac      	ite	ge
 800ab38:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ab3a:	81a3      	strhlt	r3, [r4, #12]
 800ab3c:	bd10      	pop	{r4, pc}

0800ab3e <__swrite>:
 800ab3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab42:	461f      	mov	r7, r3
 800ab44:	898b      	ldrh	r3, [r1, #12]
 800ab46:	05db      	lsls	r3, r3, #23
 800ab48:	4605      	mov	r5, r0
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	4616      	mov	r6, r2
 800ab4e:	d505      	bpl.n	800ab5c <__swrite+0x1e>
 800ab50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab54:	2302      	movs	r3, #2
 800ab56:	2200      	movs	r2, #0
 800ab58:	f000 f92a 	bl	800adb0 <_lseek_r>
 800ab5c:	89a3      	ldrh	r3, [r4, #12]
 800ab5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab66:	81a3      	strh	r3, [r4, #12]
 800ab68:	4632      	mov	r2, r6
 800ab6a:	463b      	mov	r3, r7
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab72:	f000 b941 	b.w	800adf8 <_write_r>

0800ab76 <__sseek>:
 800ab76:	b510      	push	{r4, lr}
 800ab78:	460c      	mov	r4, r1
 800ab7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab7e:	f000 f917 	bl	800adb0 <_lseek_r>
 800ab82:	1c43      	adds	r3, r0, #1
 800ab84:	89a3      	ldrh	r3, [r4, #12]
 800ab86:	bf15      	itete	ne
 800ab88:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ab8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ab8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ab92:	81a3      	strheq	r3, [r4, #12]
 800ab94:	bf18      	it	ne
 800ab96:	81a3      	strhne	r3, [r4, #12]
 800ab98:	bd10      	pop	{r4, pc}

0800ab9a <__sclose>:
 800ab9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab9e:	f000 b8a1 	b.w	800ace4 <_close_r>

0800aba2 <__swbuf_r>:
 800aba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aba4:	460e      	mov	r6, r1
 800aba6:	4614      	mov	r4, r2
 800aba8:	4605      	mov	r5, r0
 800abaa:	b118      	cbz	r0, 800abb4 <__swbuf_r+0x12>
 800abac:	6a03      	ldr	r3, [r0, #32]
 800abae:	b90b      	cbnz	r3, 800abb4 <__swbuf_r+0x12>
 800abb0:	f7ff ff0e 	bl	800a9d0 <__sinit>
 800abb4:	69a3      	ldr	r3, [r4, #24]
 800abb6:	60a3      	str	r3, [r4, #8]
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	071a      	lsls	r2, r3, #28
 800abbc:	d501      	bpl.n	800abc2 <__swbuf_r+0x20>
 800abbe:	6923      	ldr	r3, [r4, #16]
 800abc0:	b943      	cbnz	r3, 800abd4 <__swbuf_r+0x32>
 800abc2:	4621      	mov	r1, r4
 800abc4:	4628      	mov	r0, r5
 800abc6:	f000 f82b 	bl	800ac20 <__swsetup_r>
 800abca:	b118      	cbz	r0, 800abd4 <__swbuf_r+0x32>
 800abcc:	f04f 37ff 	mov.w	r7, #4294967295
 800abd0:	4638      	mov	r0, r7
 800abd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	6922      	ldr	r2, [r4, #16]
 800abd8:	1a98      	subs	r0, r3, r2
 800abda:	6963      	ldr	r3, [r4, #20]
 800abdc:	b2f6      	uxtb	r6, r6
 800abde:	4283      	cmp	r3, r0
 800abe0:	4637      	mov	r7, r6
 800abe2:	dc05      	bgt.n	800abf0 <__swbuf_r+0x4e>
 800abe4:	4621      	mov	r1, r4
 800abe6:	4628      	mov	r0, r5
 800abe8:	f001 fdea 	bl	800c7c0 <_fflush_r>
 800abec:	2800      	cmp	r0, #0
 800abee:	d1ed      	bne.n	800abcc <__swbuf_r+0x2a>
 800abf0:	68a3      	ldr	r3, [r4, #8]
 800abf2:	3b01      	subs	r3, #1
 800abf4:	60a3      	str	r3, [r4, #8]
 800abf6:	6823      	ldr	r3, [r4, #0]
 800abf8:	1c5a      	adds	r2, r3, #1
 800abfa:	6022      	str	r2, [r4, #0]
 800abfc:	701e      	strb	r6, [r3, #0]
 800abfe:	6962      	ldr	r2, [r4, #20]
 800ac00:	1c43      	adds	r3, r0, #1
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d004      	beq.n	800ac10 <__swbuf_r+0x6e>
 800ac06:	89a3      	ldrh	r3, [r4, #12]
 800ac08:	07db      	lsls	r3, r3, #31
 800ac0a:	d5e1      	bpl.n	800abd0 <__swbuf_r+0x2e>
 800ac0c:	2e0a      	cmp	r6, #10
 800ac0e:	d1df      	bne.n	800abd0 <__swbuf_r+0x2e>
 800ac10:	4621      	mov	r1, r4
 800ac12:	4628      	mov	r0, r5
 800ac14:	f001 fdd4 	bl	800c7c0 <_fflush_r>
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	d0d9      	beq.n	800abd0 <__swbuf_r+0x2e>
 800ac1c:	e7d6      	b.n	800abcc <__swbuf_r+0x2a>
	...

0800ac20 <__swsetup_r>:
 800ac20:	b538      	push	{r3, r4, r5, lr}
 800ac22:	4b29      	ldr	r3, [pc, #164]	@ (800acc8 <__swsetup_r+0xa8>)
 800ac24:	4605      	mov	r5, r0
 800ac26:	6818      	ldr	r0, [r3, #0]
 800ac28:	460c      	mov	r4, r1
 800ac2a:	b118      	cbz	r0, 800ac34 <__swsetup_r+0x14>
 800ac2c:	6a03      	ldr	r3, [r0, #32]
 800ac2e:	b90b      	cbnz	r3, 800ac34 <__swsetup_r+0x14>
 800ac30:	f7ff fece 	bl	800a9d0 <__sinit>
 800ac34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac38:	0719      	lsls	r1, r3, #28
 800ac3a:	d422      	bmi.n	800ac82 <__swsetup_r+0x62>
 800ac3c:	06da      	lsls	r2, r3, #27
 800ac3e:	d407      	bmi.n	800ac50 <__swsetup_r+0x30>
 800ac40:	2209      	movs	r2, #9
 800ac42:	602a      	str	r2, [r5, #0]
 800ac44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac48:	81a3      	strh	r3, [r4, #12]
 800ac4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac4e:	e033      	b.n	800acb8 <__swsetup_r+0x98>
 800ac50:	0758      	lsls	r0, r3, #29
 800ac52:	d512      	bpl.n	800ac7a <__swsetup_r+0x5a>
 800ac54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac56:	b141      	cbz	r1, 800ac6a <__swsetup_r+0x4a>
 800ac58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac5c:	4299      	cmp	r1, r3
 800ac5e:	d002      	beq.n	800ac66 <__swsetup_r+0x46>
 800ac60:	4628      	mov	r0, r5
 800ac62:	f000 ff65 	bl	800bb30 <_free_r>
 800ac66:	2300      	movs	r3, #0
 800ac68:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac6a:	89a3      	ldrh	r3, [r4, #12]
 800ac6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ac70:	81a3      	strh	r3, [r4, #12]
 800ac72:	2300      	movs	r3, #0
 800ac74:	6063      	str	r3, [r4, #4]
 800ac76:	6923      	ldr	r3, [r4, #16]
 800ac78:	6023      	str	r3, [r4, #0]
 800ac7a:	89a3      	ldrh	r3, [r4, #12]
 800ac7c:	f043 0308 	orr.w	r3, r3, #8
 800ac80:	81a3      	strh	r3, [r4, #12]
 800ac82:	6923      	ldr	r3, [r4, #16]
 800ac84:	b94b      	cbnz	r3, 800ac9a <__swsetup_r+0x7a>
 800ac86:	89a3      	ldrh	r3, [r4, #12]
 800ac88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ac8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac90:	d003      	beq.n	800ac9a <__swsetup_r+0x7a>
 800ac92:	4621      	mov	r1, r4
 800ac94:	4628      	mov	r0, r5
 800ac96:	f001 fde1 	bl	800c85c <__smakebuf_r>
 800ac9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac9e:	f013 0201 	ands.w	r2, r3, #1
 800aca2:	d00a      	beq.n	800acba <__swsetup_r+0x9a>
 800aca4:	2200      	movs	r2, #0
 800aca6:	60a2      	str	r2, [r4, #8]
 800aca8:	6962      	ldr	r2, [r4, #20]
 800acaa:	4252      	negs	r2, r2
 800acac:	61a2      	str	r2, [r4, #24]
 800acae:	6922      	ldr	r2, [r4, #16]
 800acb0:	b942      	cbnz	r2, 800acc4 <__swsetup_r+0xa4>
 800acb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800acb6:	d1c5      	bne.n	800ac44 <__swsetup_r+0x24>
 800acb8:	bd38      	pop	{r3, r4, r5, pc}
 800acba:	0799      	lsls	r1, r3, #30
 800acbc:	bf58      	it	pl
 800acbe:	6962      	ldrpl	r2, [r4, #20]
 800acc0:	60a2      	str	r2, [r4, #8]
 800acc2:	e7f4      	b.n	800acae <__swsetup_r+0x8e>
 800acc4:	2000      	movs	r0, #0
 800acc6:	e7f7      	b.n	800acb8 <__swsetup_r+0x98>
 800acc8:	2000001c 	.word	0x2000001c

0800accc <memset>:
 800accc:	4402      	add	r2, r0
 800acce:	4603      	mov	r3, r0
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d100      	bne.n	800acd6 <memset+0xa>
 800acd4:	4770      	bx	lr
 800acd6:	f803 1b01 	strb.w	r1, [r3], #1
 800acda:	e7f9      	b.n	800acd0 <memset+0x4>

0800acdc <_localeconv_r>:
 800acdc:	4800      	ldr	r0, [pc, #0]	@ (800ace0 <_localeconv_r+0x4>)
 800acde:	4770      	bx	lr
 800ace0:	2000015c 	.word	0x2000015c

0800ace4 <_close_r>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	4d06      	ldr	r5, [pc, #24]	@ (800ad00 <_close_r+0x1c>)
 800ace8:	2300      	movs	r3, #0
 800acea:	4604      	mov	r4, r0
 800acec:	4608      	mov	r0, r1
 800acee:	602b      	str	r3, [r5, #0]
 800acf0:	f7f7 fb20 	bl	8002334 <_close>
 800acf4:	1c43      	adds	r3, r0, #1
 800acf6:	d102      	bne.n	800acfe <_close_r+0x1a>
 800acf8:	682b      	ldr	r3, [r5, #0]
 800acfa:	b103      	cbz	r3, 800acfe <_close_r+0x1a>
 800acfc:	6023      	str	r3, [r4, #0]
 800acfe:	bd38      	pop	{r3, r4, r5, pc}
 800ad00:	20002848 	.word	0x20002848

0800ad04 <_reclaim_reent>:
 800ad04:	4b29      	ldr	r3, [pc, #164]	@ (800adac <_reclaim_reent+0xa8>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4283      	cmp	r3, r0
 800ad0a:	b570      	push	{r4, r5, r6, lr}
 800ad0c:	4604      	mov	r4, r0
 800ad0e:	d04b      	beq.n	800ada8 <_reclaim_reent+0xa4>
 800ad10:	69c3      	ldr	r3, [r0, #28]
 800ad12:	b1ab      	cbz	r3, 800ad40 <_reclaim_reent+0x3c>
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	b16b      	cbz	r3, 800ad34 <_reclaim_reent+0x30>
 800ad18:	2500      	movs	r5, #0
 800ad1a:	69e3      	ldr	r3, [r4, #28]
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	5959      	ldr	r1, [r3, r5]
 800ad20:	2900      	cmp	r1, #0
 800ad22:	d13b      	bne.n	800ad9c <_reclaim_reent+0x98>
 800ad24:	3504      	adds	r5, #4
 800ad26:	2d80      	cmp	r5, #128	@ 0x80
 800ad28:	d1f7      	bne.n	800ad1a <_reclaim_reent+0x16>
 800ad2a:	69e3      	ldr	r3, [r4, #28]
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	68d9      	ldr	r1, [r3, #12]
 800ad30:	f000 fefe 	bl	800bb30 <_free_r>
 800ad34:	69e3      	ldr	r3, [r4, #28]
 800ad36:	6819      	ldr	r1, [r3, #0]
 800ad38:	b111      	cbz	r1, 800ad40 <_reclaim_reent+0x3c>
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f000 fef8 	bl	800bb30 <_free_r>
 800ad40:	6961      	ldr	r1, [r4, #20]
 800ad42:	b111      	cbz	r1, 800ad4a <_reclaim_reent+0x46>
 800ad44:	4620      	mov	r0, r4
 800ad46:	f000 fef3 	bl	800bb30 <_free_r>
 800ad4a:	69e1      	ldr	r1, [r4, #28]
 800ad4c:	b111      	cbz	r1, 800ad54 <_reclaim_reent+0x50>
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f000 feee 	bl	800bb30 <_free_r>
 800ad54:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ad56:	b111      	cbz	r1, 800ad5e <_reclaim_reent+0x5a>
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f000 fee9 	bl	800bb30 <_free_r>
 800ad5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad60:	b111      	cbz	r1, 800ad68 <_reclaim_reent+0x64>
 800ad62:	4620      	mov	r0, r4
 800ad64:	f000 fee4 	bl	800bb30 <_free_r>
 800ad68:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ad6a:	b111      	cbz	r1, 800ad72 <_reclaim_reent+0x6e>
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f000 fedf 	bl	800bb30 <_free_r>
 800ad72:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ad74:	b111      	cbz	r1, 800ad7c <_reclaim_reent+0x78>
 800ad76:	4620      	mov	r0, r4
 800ad78:	f000 feda 	bl	800bb30 <_free_r>
 800ad7c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ad7e:	b111      	cbz	r1, 800ad86 <_reclaim_reent+0x82>
 800ad80:	4620      	mov	r0, r4
 800ad82:	f000 fed5 	bl	800bb30 <_free_r>
 800ad86:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ad88:	b111      	cbz	r1, 800ad90 <_reclaim_reent+0x8c>
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f000 fed0 	bl	800bb30 <_free_r>
 800ad90:	6a23      	ldr	r3, [r4, #32]
 800ad92:	b14b      	cbz	r3, 800ada8 <_reclaim_reent+0xa4>
 800ad94:	4620      	mov	r0, r4
 800ad96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad9a:	4718      	bx	r3
 800ad9c:	680e      	ldr	r6, [r1, #0]
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f000 fec6 	bl	800bb30 <_free_r>
 800ada4:	4631      	mov	r1, r6
 800ada6:	e7bb      	b.n	800ad20 <_reclaim_reent+0x1c>
 800ada8:	bd70      	pop	{r4, r5, r6, pc}
 800adaa:	bf00      	nop
 800adac:	2000001c 	.word	0x2000001c

0800adb0 <_lseek_r>:
 800adb0:	b538      	push	{r3, r4, r5, lr}
 800adb2:	4d07      	ldr	r5, [pc, #28]	@ (800add0 <_lseek_r+0x20>)
 800adb4:	4604      	mov	r4, r0
 800adb6:	4608      	mov	r0, r1
 800adb8:	4611      	mov	r1, r2
 800adba:	2200      	movs	r2, #0
 800adbc:	602a      	str	r2, [r5, #0]
 800adbe:	461a      	mov	r2, r3
 800adc0:	f7f7 fadf 	bl	8002382 <_lseek>
 800adc4:	1c43      	adds	r3, r0, #1
 800adc6:	d102      	bne.n	800adce <_lseek_r+0x1e>
 800adc8:	682b      	ldr	r3, [r5, #0]
 800adca:	b103      	cbz	r3, 800adce <_lseek_r+0x1e>
 800adcc:	6023      	str	r3, [r4, #0]
 800adce:	bd38      	pop	{r3, r4, r5, pc}
 800add0:	20002848 	.word	0x20002848

0800add4 <_read_r>:
 800add4:	b538      	push	{r3, r4, r5, lr}
 800add6:	4d07      	ldr	r5, [pc, #28]	@ (800adf4 <_read_r+0x20>)
 800add8:	4604      	mov	r4, r0
 800adda:	4608      	mov	r0, r1
 800addc:	4611      	mov	r1, r2
 800adde:	2200      	movs	r2, #0
 800ade0:	602a      	str	r2, [r5, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	f7f7 fa89 	bl	80022fa <_read>
 800ade8:	1c43      	adds	r3, r0, #1
 800adea:	d102      	bne.n	800adf2 <_read_r+0x1e>
 800adec:	682b      	ldr	r3, [r5, #0]
 800adee:	b103      	cbz	r3, 800adf2 <_read_r+0x1e>
 800adf0:	6023      	str	r3, [r4, #0]
 800adf2:	bd38      	pop	{r3, r4, r5, pc}
 800adf4:	20002848 	.word	0x20002848

0800adf8 <_write_r>:
 800adf8:	b538      	push	{r3, r4, r5, lr}
 800adfa:	4d07      	ldr	r5, [pc, #28]	@ (800ae18 <_write_r+0x20>)
 800adfc:	4604      	mov	r4, r0
 800adfe:	4608      	mov	r0, r1
 800ae00:	4611      	mov	r1, r2
 800ae02:	2200      	movs	r2, #0
 800ae04:	602a      	str	r2, [r5, #0]
 800ae06:	461a      	mov	r2, r3
 800ae08:	f7f6 fb14 	bl	8001434 <_write>
 800ae0c:	1c43      	adds	r3, r0, #1
 800ae0e:	d102      	bne.n	800ae16 <_write_r+0x1e>
 800ae10:	682b      	ldr	r3, [r5, #0]
 800ae12:	b103      	cbz	r3, 800ae16 <_write_r+0x1e>
 800ae14:	6023      	str	r3, [r4, #0]
 800ae16:	bd38      	pop	{r3, r4, r5, pc}
 800ae18:	20002848 	.word	0x20002848

0800ae1c <__errno>:
 800ae1c:	4b01      	ldr	r3, [pc, #4]	@ (800ae24 <__errno+0x8>)
 800ae1e:	6818      	ldr	r0, [r3, #0]
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	2000001c 	.word	0x2000001c

0800ae28 <__libc_init_array>:
 800ae28:	b570      	push	{r4, r5, r6, lr}
 800ae2a:	4d0d      	ldr	r5, [pc, #52]	@ (800ae60 <__libc_init_array+0x38>)
 800ae2c:	4c0d      	ldr	r4, [pc, #52]	@ (800ae64 <__libc_init_array+0x3c>)
 800ae2e:	1b64      	subs	r4, r4, r5
 800ae30:	10a4      	asrs	r4, r4, #2
 800ae32:	2600      	movs	r6, #0
 800ae34:	42a6      	cmp	r6, r4
 800ae36:	d109      	bne.n	800ae4c <__libc_init_array+0x24>
 800ae38:	4d0b      	ldr	r5, [pc, #44]	@ (800ae68 <__libc_init_array+0x40>)
 800ae3a:	4c0c      	ldr	r4, [pc, #48]	@ (800ae6c <__libc_init_array+0x44>)
 800ae3c:	f001 fe2c 	bl	800ca98 <_init>
 800ae40:	1b64      	subs	r4, r4, r5
 800ae42:	10a4      	asrs	r4, r4, #2
 800ae44:	2600      	movs	r6, #0
 800ae46:	42a6      	cmp	r6, r4
 800ae48:	d105      	bne.n	800ae56 <__libc_init_array+0x2e>
 800ae4a:	bd70      	pop	{r4, r5, r6, pc}
 800ae4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae50:	4798      	blx	r3
 800ae52:	3601      	adds	r6, #1
 800ae54:	e7ee      	b.n	800ae34 <__libc_init_array+0xc>
 800ae56:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae5a:	4798      	blx	r3
 800ae5c:	3601      	adds	r6, #1
 800ae5e:	e7f2      	b.n	800ae46 <__libc_init_array+0x1e>
 800ae60:	0800d768 	.word	0x0800d768
 800ae64:	0800d768 	.word	0x0800d768
 800ae68:	0800d768 	.word	0x0800d768
 800ae6c:	0800d76c 	.word	0x0800d76c

0800ae70 <__retarget_lock_init_recursive>:
 800ae70:	4770      	bx	lr

0800ae72 <__retarget_lock_acquire_recursive>:
 800ae72:	4770      	bx	lr

0800ae74 <__retarget_lock_release_recursive>:
 800ae74:	4770      	bx	lr

0800ae76 <memcpy>:
 800ae76:	440a      	add	r2, r1
 800ae78:	4291      	cmp	r1, r2
 800ae7a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae7e:	d100      	bne.n	800ae82 <memcpy+0xc>
 800ae80:	4770      	bx	lr
 800ae82:	b510      	push	{r4, lr}
 800ae84:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae88:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae8c:	4291      	cmp	r1, r2
 800ae8e:	d1f9      	bne.n	800ae84 <memcpy+0xe>
 800ae90:	bd10      	pop	{r4, pc}

0800ae92 <quorem>:
 800ae92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae96:	6903      	ldr	r3, [r0, #16]
 800ae98:	690c      	ldr	r4, [r1, #16]
 800ae9a:	42a3      	cmp	r3, r4
 800ae9c:	4607      	mov	r7, r0
 800ae9e:	db7e      	blt.n	800af9e <quorem+0x10c>
 800aea0:	3c01      	subs	r4, #1
 800aea2:	f101 0814 	add.w	r8, r1, #20
 800aea6:	00a3      	lsls	r3, r4, #2
 800aea8:	f100 0514 	add.w	r5, r0, #20
 800aeac:	9300      	str	r3, [sp, #0]
 800aeae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aeb2:	9301      	str	r3, [sp, #4]
 800aeb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aeb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aebc:	3301      	adds	r3, #1
 800aebe:	429a      	cmp	r2, r3
 800aec0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aec4:	fbb2 f6f3 	udiv	r6, r2, r3
 800aec8:	d32e      	bcc.n	800af28 <quorem+0x96>
 800aeca:	f04f 0a00 	mov.w	sl, #0
 800aece:	46c4      	mov	ip, r8
 800aed0:	46ae      	mov	lr, r5
 800aed2:	46d3      	mov	fp, sl
 800aed4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aed8:	b298      	uxth	r0, r3
 800aeda:	fb06 a000 	mla	r0, r6, r0, sl
 800aede:	0c02      	lsrs	r2, r0, #16
 800aee0:	0c1b      	lsrs	r3, r3, #16
 800aee2:	fb06 2303 	mla	r3, r6, r3, r2
 800aee6:	f8de 2000 	ldr.w	r2, [lr]
 800aeea:	b280      	uxth	r0, r0
 800aeec:	b292      	uxth	r2, r2
 800aeee:	1a12      	subs	r2, r2, r0
 800aef0:	445a      	add	r2, fp
 800aef2:	f8de 0000 	ldr.w	r0, [lr]
 800aef6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800af00:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800af04:	b292      	uxth	r2, r2
 800af06:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800af0a:	45e1      	cmp	r9, ip
 800af0c:	f84e 2b04 	str.w	r2, [lr], #4
 800af10:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800af14:	d2de      	bcs.n	800aed4 <quorem+0x42>
 800af16:	9b00      	ldr	r3, [sp, #0]
 800af18:	58eb      	ldr	r3, [r5, r3]
 800af1a:	b92b      	cbnz	r3, 800af28 <quorem+0x96>
 800af1c:	9b01      	ldr	r3, [sp, #4]
 800af1e:	3b04      	subs	r3, #4
 800af20:	429d      	cmp	r5, r3
 800af22:	461a      	mov	r2, r3
 800af24:	d32f      	bcc.n	800af86 <quorem+0xf4>
 800af26:	613c      	str	r4, [r7, #16]
 800af28:	4638      	mov	r0, r7
 800af2a:	f001 f97b 	bl	800c224 <__mcmp>
 800af2e:	2800      	cmp	r0, #0
 800af30:	db25      	blt.n	800af7e <quorem+0xec>
 800af32:	4629      	mov	r1, r5
 800af34:	2000      	movs	r0, #0
 800af36:	f858 2b04 	ldr.w	r2, [r8], #4
 800af3a:	f8d1 c000 	ldr.w	ip, [r1]
 800af3e:	fa1f fe82 	uxth.w	lr, r2
 800af42:	fa1f f38c 	uxth.w	r3, ip
 800af46:	eba3 030e 	sub.w	r3, r3, lr
 800af4a:	4403      	add	r3, r0
 800af4c:	0c12      	lsrs	r2, r2, #16
 800af4e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800af52:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800af56:	b29b      	uxth	r3, r3
 800af58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af5c:	45c1      	cmp	r9, r8
 800af5e:	f841 3b04 	str.w	r3, [r1], #4
 800af62:	ea4f 4022 	mov.w	r0, r2, asr #16
 800af66:	d2e6      	bcs.n	800af36 <quorem+0xa4>
 800af68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af70:	b922      	cbnz	r2, 800af7c <quorem+0xea>
 800af72:	3b04      	subs	r3, #4
 800af74:	429d      	cmp	r5, r3
 800af76:	461a      	mov	r2, r3
 800af78:	d30b      	bcc.n	800af92 <quorem+0x100>
 800af7a:	613c      	str	r4, [r7, #16]
 800af7c:	3601      	adds	r6, #1
 800af7e:	4630      	mov	r0, r6
 800af80:	b003      	add	sp, #12
 800af82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af86:	6812      	ldr	r2, [r2, #0]
 800af88:	3b04      	subs	r3, #4
 800af8a:	2a00      	cmp	r2, #0
 800af8c:	d1cb      	bne.n	800af26 <quorem+0x94>
 800af8e:	3c01      	subs	r4, #1
 800af90:	e7c6      	b.n	800af20 <quorem+0x8e>
 800af92:	6812      	ldr	r2, [r2, #0]
 800af94:	3b04      	subs	r3, #4
 800af96:	2a00      	cmp	r2, #0
 800af98:	d1ef      	bne.n	800af7a <quorem+0xe8>
 800af9a:	3c01      	subs	r4, #1
 800af9c:	e7ea      	b.n	800af74 <quorem+0xe2>
 800af9e:	2000      	movs	r0, #0
 800afa0:	e7ee      	b.n	800af80 <quorem+0xee>
 800afa2:	0000      	movs	r0, r0
 800afa4:	0000      	movs	r0, r0
	...

0800afa8 <_dtoa_r>:
 800afa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afac:	69c7      	ldr	r7, [r0, #28]
 800afae:	b099      	sub	sp, #100	@ 0x64
 800afb0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800afb4:	ec55 4b10 	vmov	r4, r5, d0
 800afb8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800afba:	9109      	str	r1, [sp, #36]	@ 0x24
 800afbc:	4683      	mov	fp, r0
 800afbe:	920e      	str	r2, [sp, #56]	@ 0x38
 800afc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800afc2:	b97f      	cbnz	r7, 800afe4 <_dtoa_r+0x3c>
 800afc4:	2010      	movs	r0, #16
 800afc6:	f000 fdfd 	bl	800bbc4 <malloc>
 800afca:	4602      	mov	r2, r0
 800afcc:	f8cb 001c 	str.w	r0, [fp, #28]
 800afd0:	b920      	cbnz	r0, 800afdc <_dtoa_r+0x34>
 800afd2:	4ba7      	ldr	r3, [pc, #668]	@ (800b270 <_dtoa_r+0x2c8>)
 800afd4:	21ef      	movs	r1, #239	@ 0xef
 800afd6:	48a7      	ldr	r0, [pc, #668]	@ (800b274 <_dtoa_r+0x2cc>)
 800afd8:	f001 fcae 	bl	800c938 <__assert_func>
 800afdc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800afe0:	6007      	str	r7, [r0, #0]
 800afe2:	60c7      	str	r7, [r0, #12]
 800afe4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800afe8:	6819      	ldr	r1, [r3, #0]
 800afea:	b159      	cbz	r1, 800b004 <_dtoa_r+0x5c>
 800afec:	685a      	ldr	r2, [r3, #4]
 800afee:	604a      	str	r2, [r1, #4]
 800aff0:	2301      	movs	r3, #1
 800aff2:	4093      	lsls	r3, r2
 800aff4:	608b      	str	r3, [r1, #8]
 800aff6:	4658      	mov	r0, fp
 800aff8:	f000 feda 	bl	800bdb0 <_Bfree>
 800affc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b000:	2200      	movs	r2, #0
 800b002:	601a      	str	r2, [r3, #0]
 800b004:	1e2b      	subs	r3, r5, #0
 800b006:	bfb9      	ittee	lt
 800b008:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b00c:	9303      	strlt	r3, [sp, #12]
 800b00e:	2300      	movge	r3, #0
 800b010:	6033      	strge	r3, [r6, #0]
 800b012:	9f03      	ldr	r7, [sp, #12]
 800b014:	4b98      	ldr	r3, [pc, #608]	@ (800b278 <_dtoa_r+0x2d0>)
 800b016:	bfbc      	itt	lt
 800b018:	2201      	movlt	r2, #1
 800b01a:	6032      	strlt	r2, [r6, #0]
 800b01c:	43bb      	bics	r3, r7
 800b01e:	d112      	bne.n	800b046 <_dtoa_r+0x9e>
 800b020:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b022:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b026:	6013      	str	r3, [r2, #0]
 800b028:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b02c:	4323      	orrs	r3, r4
 800b02e:	f000 854d 	beq.w	800bacc <_dtoa_r+0xb24>
 800b032:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b034:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b28c <_dtoa_r+0x2e4>
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f000 854f 	beq.w	800badc <_dtoa_r+0xb34>
 800b03e:	f10a 0303 	add.w	r3, sl, #3
 800b042:	f000 bd49 	b.w	800bad8 <_dtoa_r+0xb30>
 800b046:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b04a:	2200      	movs	r2, #0
 800b04c:	ec51 0b17 	vmov	r0, r1, d7
 800b050:	2300      	movs	r3, #0
 800b052:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b056:	f7f5 fd37 	bl	8000ac8 <__aeabi_dcmpeq>
 800b05a:	4680      	mov	r8, r0
 800b05c:	b158      	cbz	r0, 800b076 <_dtoa_r+0xce>
 800b05e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b060:	2301      	movs	r3, #1
 800b062:	6013      	str	r3, [r2, #0]
 800b064:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b066:	b113      	cbz	r3, 800b06e <_dtoa_r+0xc6>
 800b068:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b06a:	4b84      	ldr	r3, [pc, #528]	@ (800b27c <_dtoa_r+0x2d4>)
 800b06c:	6013      	str	r3, [r2, #0]
 800b06e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b290 <_dtoa_r+0x2e8>
 800b072:	f000 bd33 	b.w	800badc <_dtoa_r+0xb34>
 800b076:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b07a:	aa16      	add	r2, sp, #88	@ 0x58
 800b07c:	a917      	add	r1, sp, #92	@ 0x5c
 800b07e:	4658      	mov	r0, fp
 800b080:	f001 f980 	bl	800c384 <__d2b>
 800b084:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b088:	4681      	mov	r9, r0
 800b08a:	2e00      	cmp	r6, #0
 800b08c:	d077      	beq.n	800b17e <_dtoa_r+0x1d6>
 800b08e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b090:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b09c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b0a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b0a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	4b74      	ldr	r3, [pc, #464]	@ (800b280 <_dtoa_r+0x2d8>)
 800b0ae:	f7f5 f8eb 	bl	8000288 <__aeabi_dsub>
 800b0b2:	a369      	add	r3, pc, #420	@ (adr r3, 800b258 <_dtoa_r+0x2b0>)
 800b0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b8:	f7f5 fa9e 	bl	80005f8 <__aeabi_dmul>
 800b0bc:	a368      	add	r3, pc, #416	@ (adr r3, 800b260 <_dtoa_r+0x2b8>)
 800b0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c2:	f7f5 f8e3 	bl	800028c <__adddf3>
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	460d      	mov	r5, r1
 800b0cc:	f7f5 fa2a 	bl	8000524 <__aeabi_i2d>
 800b0d0:	a365      	add	r3, pc, #404	@ (adr r3, 800b268 <_dtoa_r+0x2c0>)
 800b0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d6:	f7f5 fa8f 	bl	80005f8 <__aeabi_dmul>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	460b      	mov	r3, r1
 800b0de:	4620      	mov	r0, r4
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	f7f5 f8d3 	bl	800028c <__adddf3>
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	460d      	mov	r5, r1
 800b0ea:	f7f5 fd35 	bl	8000b58 <__aeabi_d2iz>
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	4607      	mov	r7, r0
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	4629      	mov	r1, r5
 800b0f8:	f7f5 fcf0 	bl	8000adc <__aeabi_dcmplt>
 800b0fc:	b140      	cbz	r0, 800b110 <_dtoa_r+0x168>
 800b0fe:	4638      	mov	r0, r7
 800b100:	f7f5 fa10 	bl	8000524 <__aeabi_i2d>
 800b104:	4622      	mov	r2, r4
 800b106:	462b      	mov	r3, r5
 800b108:	f7f5 fcde 	bl	8000ac8 <__aeabi_dcmpeq>
 800b10c:	b900      	cbnz	r0, 800b110 <_dtoa_r+0x168>
 800b10e:	3f01      	subs	r7, #1
 800b110:	2f16      	cmp	r7, #22
 800b112:	d851      	bhi.n	800b1b8 <_dtoa_r+0x210>
 800b114:	4b5b      	ldr	r3, [pc, #364]	@ (800b284 <_dtoa_r+0x2dc>)
 800b116:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b122:	f7f5 fcdb 	bl	8000adc <__aeabi_dcmplt>
 800b126:	2800      	cmp	r0, #0
 800b128:	d048      	beq.n	800b1bc <_dtoa_r+0x214>
 800b12a:	3f01      	subs	r7, #1
 800b12c:	2300      	movs	r3, #0
 800b12e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b130:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b132:	1b9b      	subs	r3, r3, r6
 800b134:	1e5a      	subs	r2, r3, #1
 800b136:	bf44      	itt	mi
 800b138:	f1c3 0801 	rsbmi	r8, r3, #1
 800b13c:	2300      	movmi	r3, #0
 800b13e:	9208      	str	r2, [sp, #32]
 800b140:	bf54      	ite	pl
 800b142:	f04f 0800 	movpl.w	r8, #0
 800b146:	9308      	strmi	r3, [sp, #32]
 800b148:	2f00      	cmp	r7, #0
 800b14a:	db39      	blt.n	800b1c0 <_dtoa_r+0x218>
 800b14c:	9b08      	ldr	r3, [sp, #32]
 800b14e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b150:	443b      	add	r3, r7
 800b152:	9308      	str	r3, [sp, #32]
 800b154:	2300      	movs	r3, #0
 800b156:	930a      	str	r3, [sp, #40]	@ 0x28
 800b158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b15a:	2b09      	cmp	r3, #9
 800b15c:	d864      	bhi.n	800b228 <_dtoa_r+0x280>
 800b15e:	2b05      	cmp	r3, #5
 800b160:	bfc4      	itt	gt
 800b162:	3b04      	subgt	r3, #4
 800b164:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b168:	f1a3 0302 	sub.w	r3, r3, #2
 800b16c:	bfcc      	ite	gt
 800b16e:	2400      	movgt	r4, #0
 800b170:	2401      	movle	r4, #1
 800b172:	2b03      	cmp	r3, #3
 800b174:	d863      	bhi.n	800b23e <_dtoa_r+0x296>
 800b176:	e8df f003 	tbb	[pc, r3]
 800b17a:	372a      	.short	0x372a
 800b17c:	5535      	.short	0x5535
 800b17e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b182:	441e      	add	r6, r3
 800b184:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b188:	2b20      	cmp	r3, #32
 800b18a:	bfc1      	itttt	gt
 800b18c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b190:	409f      	lslgt	r7, r3
 800b192:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b196:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b19a:	bfd6      	itet	le
 800b19c:	f1c3 0320 	rsble	r3, r3, #32
 800b1a0:	ea47 0003 	orrgt.w	r0, r7, r3
 800b1a4:	fa04 f003 	lslle.w	r0, r4, r3
 800b1a8:	f7f5 f9ac 	bl	8000504 <__aeabi_ui2d>
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b1b2:	3e01      	subs	r6, #1
 800b1b4:	9214      	str	r2, [sp, #80]	@ 0x50
 800b1b6:	e777      	b.n	800b0a8 <_dtoa_r+0x100>
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e7b8      	b.n	800b12e <_dtoa_r+0x186>
 800b1bc:	9012      	str	r0, [sp, #72]	@ 0x48
 800b1be:	e7b7      	b.n	800b130 <_dtoa_r+0x188>
 800b1c0:	427b      	negs	r3, r7
 800b1c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	eba8 0807 	sub.w	r8, r8, r7
 800b1ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b1cc:	e7c4      	b.n	800b158 <_dtoa_r+0x1b0>
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	dc35      	bgt.n	800b244 <_dtoa_r+0x29c>
 800b1d8:	2301      	movs	r3, #1
 800b1da:	9300      	str	r3, [sp, #0]
 800b1dc:	9307      	str	r3, [sp, #28]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1e2:	e00b      	b.n	800b1fc <_dtoa_r+0x254>
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e7f3      	b.n	800b1d0 <_dtoa_r+0x228>
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1ee:	18fb      	adds	r3, r7, r3
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	9307      	str	r3, [sp, #28]
 800b1f8:	bfb8      	it	lt
 800b1fa:	2301      	movlt	r3, #1
 800b1fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b200:	2100      	movs	r1, #0
 800b202:	2204      	movs	r2, #4
 800b204:	f102 0514 	add.w	r5, r2, #20
 800b208:	429d      	cmp	r5, r3
 800b20a:	d91f      	bls.n	800b24c <_dtoa_r+0x2a4>
 800b20c:	6041      	str	r1, [r0, #4]
 800b20e:	4658      	mov	r0, fp
 800b210:	f000 fd8e 	bl	800bd30 <_Balloc>
 800b214:	4682      	mov	sl, r0
 800b216:	2800      	cmp	r0, #0
 800b218:	d13c      	bne.n	800b294 <_dtoa_r+0x2ec>
 800b21a:	4b1b      	ldr	r3, [pc, #108]	@ (800b288 <_dtoa_r+0x2e0>)
 800b21c:	4602      	mov	r2, r0
 800b21e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b222:	e6d8      	b.n	800afd6 <_dtoa_r+0x2e>
 800b224:	2301      	movs	r3, #1
 800b226:	e7e0      	b.n	800b1ea <_dtoa_r+0x242>
 800b228:	2401      	movs	r4, #1
 800b22a:	2300      	movs	r3, #0
 800b22c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b22e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b230:	f04f 33ff 	mov.w	r3, #4294967295
 800b234:	9300      	str	r3, [sp, #0]
 800b236:	9307      	str	r3, [sp, #28]
 800b238:	2200      	movs	r2, #0
 800b23a:	2312      	movs	r3, #18
 800b23c:	e7d0      	b.n	800b1e0 <_dtoa_r+0x238>
 800b23e:	2301      	movs	r3, #1
 800b240:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b242:	e7f5      	b.n	800b230 <_dtoa_r+0x288>
 800b244:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b246:	9300      	str	r3, [sp, #0]
 800b248:	9307      	str	r3, [sp, #28]
 800b24a:	e7d7      	b.n	800b1fc <_dtoa_r+0x254>
 800b24c:	3101      	adds	r1, #1
 800b24e:	0052      	lsls	r2, r2, #1
 800b250:	e7d8      	b.n	800b204 <_dtoa_r+0x25c>
 800b252:	bf00      	nop
 800b254:	f3af 8000 	nop.w
 800b258:	636f4361 	.word	0x636f4361
 800b25c:	3fd287a7 	.word	0x3fd287a7
 800b260:	8b60c8b3 	.word	0x8b60c8b3
 800b264:	3fc68a28 	.word	0x3fc68a28
 800b268:	509f79fb 	.word	0x509f79fb
 800b26c:	3fd34413 	.word	0x3fd34413
 800b270:	0800d42d 	.word	0x0800d42d
 800b274:	0800d444 	.word	0x0800d444
 800b278:	7ff00000 	.word	0x7ff00000
 800b27c:	0800d3fd 	.word	0x0800d3fd
 800b280:	3ff80000 	.word	0x3ff80000
 800b284:	0800d540 	.word	0x0800d540
 800b288:	0800d49c 	.word	0x0800d49c
 800b28c:	0800d429 	.word	0x0800d429
 800b290:	0800d3fc 	.word	0x0800d3fc
 800b294:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b298:	6018      	str	r0, [r3, #0]
 800b29a:	9b07      	ldr	r3, [sp, #28]
 800b29c:	2b0e      	cmp	r3, #14
 800b29e:	f200 80a4 	bhi.w	800b3ea <_dtoa_r+0x442>
 800b2a2:	2c00      	cmp	r4, #0
 800b2a4:	f000 80a1 	beq.w	800b3ea <_dtoa_r+0x442>
 800b2a8:	2f00      	cmp	r7, #0
 800b2aa:	dd33      	ble.n	800b314 <_dtoa_r+0x36c>
 800b2ac:	4bad      	ldr	r3, [pc, #692]	@ (800b564 <_dtoa_r+0x5bc>)
 800b2ae:	f007 020f 	and.w	r2, r7, #15
 800b2b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2b6:	ed93 7b00 	vldr	d7, [r3]
 800b2ba:	05f8      	lsls	r0, r7, #23
 800b2bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b2c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b2c4:	d516      	bpl.n	800b2f4 <_dtoa_r+0x34c>
 800b2c6:	4ba8      	ldr	r3, [pc, #672]	@ (800b568 <_dtoa_r+0x5c0>)
 800b2c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b2d0:	f7f5 fabc 	bl	800084c <__aeabi_ddiv>
 800b2d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2d8:	f004 040f 	and.w	r4, r4, #15
 800b2dc:	2603      	movs	r6, #3
 800b2de:	4da2      	ldr	r5, [pc, #648]	@ (800b568 <_dtoa_r+0x5c0>)
 800b2e0:	b954      	cbnz	r4, 800b2f8 <_dtoa_r+0x350>
 800b2e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2ea:	f7f5 faaf 	bl	800084c <__aeabi_ddiv>
 800b2ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2f2:	e028      	b.n	800b346 <_dtoa_r+0x39e>
 800b2f4:	2602      	movs	r6, #2
 800b2f6:	e7f2      	b.n	800b2de <_dtoa_r+0x336>
 800b2f8:	07e1      	lsls	r1, r4, #31
 800b2fa:	d508      	bpl.n	800b30e <_dtoa_r+0x366>
 800b2fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b300:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b304:	f7f5 f978 	bl	80005f8 <__aeabi_dmul>
 800b308:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b30c:	3601      	adds	r6, #1
 800b30e:	1064      	asrs	r4, r4, #1
 800b310:	3508      	adds	r5, #8
 800b312:	e7e5      	b.n	800b2e0 <_dtoa_r+0x338>
 800b314:	f000 80d2 	beq.w	800b4bc <_dtoa_r+0x514>
 800b318:	427c      	negs	r4, r7
 800b31a:	4b92      	ldr	r3, [pc, #584]	@ (800b564 <_dtoa_r+0x5bc>)
 800b31c:	4d92      	ldr	r5, [pc, #584]	@ (800b568 <_dtoa_r+0x5c0>)
 800b31e:	f004 020f 	and.w	r2, r4, #15
 800b322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b32e:	f7f5 f963 	bl	80005f8 <__aeabi_dmul>
 800b332:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b336:	1124      	asrs	r4, r4, #4
 800b338:	2300      	movs	r3, #0
 800b33a:	2602      	movs	r6, #2
 800b33c:	2c00      	cmp	r4, #0
 800b33e:	f040 80b2 	bne.w	800b4a6 <_dtoa_r+0x4fe>
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1d3      	bne.n	800b2ee <_dtoa_r+0x346>
 800b346:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b348:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	f000 80b7 	beq.w	800b4c0 <_dtoa_r+0x518>
 800b352:	4b86      	ldr	r3, [pc, #536]	@ (800b56c <_dtoa_r+0x5c4>)
 800b354:	2200      	movs	r2, #0
 800b356:	4620      	mov	r0, r4
 800b358:	4629      	mov	r1, r5
 800b35a:	f7f5 fbbf 	bl	8000adc <__aeabi_dcmplt>
 800b35e:	2800      	cmp	r0, #0
 800b360:	f000 80ae 	beq.w	800b4c0 <_dtoa_r+0x518>
 800b364:	9b07      	ldr	r3, [sp, #28]
 800b366:	2b00      	cmp	r3, #0
 800b368:	f000 80aa 	beq.w	800b4c0 <_dtoa_r+0x518>
 800b36c:	9b00      	ldr	r3, [sp, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	dd37      	ble.n	800b3e2 <_dtoa_r+0x43a>
 800b372:	1e7b      	subs	r3, r7, #1
 800b374:	9304      	str	r3, [sp, #16]
 800b376:	4620      	mov	r0, r4
 800b378:	4b7d      	ldr	r3, [pc, #500]	@ (800b570 <_dtoa_r+0x5c8>)
 800b37a:	2200      	movs	r2, #0
 800b37c:	4629      	mov	r1, r5
 800b37e:	f7f5 f93b 	bl	80005f8 <__aeabi_dmul>
 800b382:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b386:	9c00      	ldr	r4, [sp, #0]
 800b388:	3601      	adds	r6, #1
 800b38a:	4630      	mov	r0, r6
 800b38c:	f7f5 f8ca 	bl	8000524 <__aeabi_i2d>
 800b390:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b394:	f7f5 f930 	bl	80005f8 <__aeabi_dmul>
 800b398:	4b76      	ldr	r3, [pc, #472]	@ (800b574 <_dtoa_r+0x5cc>)
 800b39a:	2200      	movs	r2, #0
 800b39c:	f7f4 ff76 	bl	800028c <__adddf3>
 800b3a0:	4605      	mov	r5, r0
 800b3a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b3a6:	2c00      	cmp	r4, #0
 800b3a8:	f040 808d 	bne.w	800b4c6 <_dtoa_r+0x51e>
 800b3ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3b0:	4b71      	ldr	r3, [pc, #452]	@ (800b578 <_dtoa_r+0x5d0>)
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f7f4 ff68 	bl	8000288 <__aeabi_dsub>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3c0:	462a      	mov	r2, r5
 800b3c2:	4633      	mov	r3, r6
 800b3c4:	f7f5 fba8 	bl	8000b18 <__aeabi_dcmpgt>
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	f040 828b 	bne.w	800b8e4 <_dtoa_r+0x93c>
 800b3ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3d2:	462a      	mov	r2, r5
 800b3d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b3d8:	f7f5 fb80 	bl	8000adc <__aeabi_dcmplt>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	f040 8128 	bne.w	800b632 <_dtoa_r+0x68a>
 800b3e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b3e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b3ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f2c0 815a 	blt.w	800b6a6 <_dtoa_r+0x6fe>
 800b3f2:	2f0e      	cmp	r7, #14
 800b3f4:	f300 8157 	bgt.w	800b6a6 <_dtoa_r+0x6fe>
 800b3f8:	4b5a      	ldr	r3, [pc, #360]	@ (800b564 <_dtoa_r+0x5bc>)
 800b3fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b3fe:	ed93 7b00 	vldr	d7, [r3]
 800b402:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b404:	2b00      	cmp	r3, #0
 800b406:	ed8d 7b00 	vstr	d7, [sp]
 800b40a:	da03      	bge.n	800b414 <_dtoa_r+0x46c>
 800b40c:	9b07      	ldr	r3, [sp, #28]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	f340 8101 	ble.w	800b616 <_dtoa_r+0x66e>
 800b414:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b418:	4656      	mov	r6, sl
 800b41a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b41e:	4620      	mov	r0, r4
 800b420:	4629      	mov	r1, r5
 800b422:	f7f5 fa13 	bl	800084c <__aeabi_ddiv>
 800b426:	f7f5 fb97 	bl	8000b58 <__aeabi_d2iz>
 800b42a:	4680      	mov	r8, r0
 800b42c:	f7f5 f87a 	bl	8000524 <__aeabi_i2d>
 800b430:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b434:	f7f5 f8e0 	bl	80005f8 <__aeabi_dmul>
 800b438:	4602      	mov	r2, r0
 800b43a:	460b      	mov	r3, r1
 800b43c:	4620      	mov	r0, r4
 800b43e:	4629      	mov	r1, r5
 800b440:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b444:	f7f4 ff20 	bl	8000288 <__aeabi_dsub>
 800b448:	f806 4b01 	strb.w	r4, [r6], #1
 800b44c:	9d07      	ldr	r5, [sp, #28]
 800b44e:	eba6 040a 	sub.w	r4, r6, sl
 800b452:	42a5      	cmp	r5, r4
 800b454:	4602      	mov	r2, r0
 800b456:	460b      	mov	r3, r1
 800b458:	f040 8117 	bne.w	800b68a <_dtoa_r+0x6e2>
 800b45c:	f7f4 ff16 	bl	800028c <__adddf3>
 800b460:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b464:	4604      	mov	r4, r0
 800b466:	460d      	mov	r5, r1
 800b468:	f7f5 fb56 	bl	8000b18 <__aeabi_dcmpgt>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	f040 80f9 	bne.w	800b664 <_dtoa_r+0x6bc>
 800b472:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b476:	4620      	mov	r0, r4
 800b478:	4629      	mov	r1, r5
 800b47a:	f7f5 fb25 	bl	8000ac8 <__aeabi_dcmpeq>
 800b47e:	b118      	cbz	r0, 800b488 <_dtoa_r+0x4e0>
 800b480:	f018 0f01 	tst.w	r8, #1
 800b484:	f040 80ee 	bne.w	800b664 <_dtoa_r+0x6bc>
 800b488:	4649      	mov	r1, r9
 800b48a:	4658      	mov	r0, fp
 800b48c:	f000 fc90 	bl	800bdb0 <_Bfree>
 800b490:	2300      	movs	r3, #0
 800b492:	7033      	strb	r3, [r6, #0]
 800b494:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b496:	3701      	adds	r7, #1
 800b498:	601f      	str	r7, [r3, #0]
 800b49a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f000 831d 	beq.w	800badc <_dtoa_r+0xb34>
 800b4a2:	601e      	str	r6, [r3, #0]
 800b4a4:	e31a      	b.n	800badc <_dtoa_r+0xb34>
 800b4a6:	07e2      	lsls	r2, r4, #31
 800b4a8:	d505      	bpl.n	800b4b6 <_dtoa_r+0x50e>
 800b4aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b4ae:	f7f5 f8a3 	bl	80005f8 <__aeabi_dmul>
 800b4b2:	3601      	adds	r6, #1
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	1064      	asrs	r4, r4, #1
 800b4b8:	3508      	adds	r5, #8
 800b4ba:	e73f      	b.n	800b33c <_dtoa_r+0x394>
 800b4bc:	2602      	movs	r6, #2
 800b4be:	e742      	b.n	800b346 <_dtoa_r+0x39e>
 800b4c0:	9c07      	ldr	r4, [sp, #28]
 800b4c2:	9704      	str	r7, [sp, #16]
 800b4c4:	e761      	b.n	800b38a <_dtoa_r+0x3e2>
 800b4c6:	4b27      	ldr	r3, [pc, #156]	@ (800b564 <_dtoa_r+0x5bc>)
 800b4c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b4ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b4ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b4d2:	4454      	add	r4, sl
 800b4d4:	2900      	cmp	r1, #0
 800b4d6:	d053      	beq.n	800b580 <_dtoa_r+0x5d8>
 800b4d8:	4928      	ldr	r1, [pc, #160]	@ (800b57c <_dtoa_r+0x5d4>)
 800b4da:	2000      	movs	r0, #0
 800b4dc:	f7f5 f9b6 	bl	800084c <__aeabi_ddiv>
 800b4e0:	4633      	mov	r3, r6
 800b4e2:	462a      	mov	r2, r5
 800b4e4:	f7f4 fed0 	bl	8000288 <__aeabi_dsub>
 800b4e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b4ec:	4656      	mov	r6, sl
 800b4ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4f2:	f7f5 fb31 	bl	8000b58 <__aeabi_d2iz>
 800b4f6:	4605      	mov	r5, r0
 800b4f8:	f7f5 f814 	bl	8000524 <__aeabi_i2d>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	460b      	mov	r3, r1
 800b500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b504:	f7f4 fec0 	bl	8000288 <__aeabi_dsub>
 800b508:	3530      	adds	r5, #48	@ 0x30
 800b50a:	4602      	mov	r2, r0
 800b50c:	460b      	mov	r3, r1
 800b50e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b512:	f806 5b01 	strb.w	r5, [r6], #1
 800b516:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b51a:	f7f5 fadf 	bl	8000adc <__aeabi_dcmplt>
 800b51e:	2800      	cmp	r0, #0
 800b520:	d171      	bne.n	800b606 <_dtoa_r+0x65e>
 800b522:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b526:	4911      	ldr	r1, [pc, #68]	@ (800b56c <_dtoa_r+0x5c4>)
 800b528:	2000      	movs	r0, #0
 800b52a:	f7f4 fead 	bl	8000288 <__aeabi_dsub>
 800b52e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b532:	f7f5 fad3 	bl	8000adc <__aeabi_dcmplt>
 800b536:	2800      	cmp	r0, #0
 800b538:	f040 8095 	bne.w	800b666 <_dtoa_r+0x6be>
 800b53c:	42a6      	cmp	r6, r4
 800b53e:	f43f af50 	beq.w	800b3e2 <_dtoa_r+0x43a>
 800b542:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b546:	4b0a      	ldr	r3, [pc, #40]	@ (800b570 <_dtoa_r+0x5c8>)
 800b548:	2200      	movs	r2, #0
 800b54a:	f7f5 f855 	bl	80005f8 <__aeabi_dmul>
 800b54e:	4b08      	ldr	r3, [pc, #32]	@ (800b570 <_dtoa_r+0x5c8>)
 800b550:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b554:	2200      	movs	r2, #0
 800b556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b55a:	f7f5 f84d 	bl	80005f8 <__aeabi_dmul>
 800b55e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b562:	e7c4      	b.n	800b4ee <_dtoa_r+0x546>
 800b564:	0800d540 	.word	0x0800d540
 800b568:	0800d518 	.word	0x0800d518
 800b56c:	3ff00000 	.word	0x3ff00000
 800b570:	40240000 	.word	0x40240000
 800b574:	401c0000 	.word	0x401c0000
 800b578:	40140000 	.word	0x40140000
 800b57c:	3fe00000 	.word	0x3fe00000
 800b580:	4631      	mov	r1, r6
 800b582:	4628      	mov	r0, r5
 800b584:	f7f5 f838 	bl	80005f8 <__aeabi_dmul>
 800b588:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b58c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b58e:	4656      	mov	r6, sl
 800b590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b594:	f7f5 fae0 	bl	8000b58 <__aeabi_d2iz>
 800b598:	4605      	mov	r5, r0
 800b59a:	f7f4 ffc3 	bl	8000524 <__aeabi_i2d>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5a6:	f7f4 fe6f 	bl	8000288 <__aeabi_dsub>
 800b5aa:	3530      	adds	r5, #48	@ 0x30
 800b5ac:	f806 5b01 	strb.w	r5, [r6], #1
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	42a6      	cmp	r6, r4
 800b5b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5ba:	f04f 0200 	mov.w	r2, #0
 800b5be:	d124      	bne.n	800b60a <_dtoa_r+0x662>
 800b5c0:	4bac      	ldr	r3, [pc, #688]	@ (800b874 <_dtoa_r+0x8cc>)
 800b5c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b5c6:	f7f4 fe61 	bl	800028c <__adddf3>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5d2:	f7f5 faa1 	bl	8000b18 <__aeabi_dcmpgt>
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d145      	bne.n	800b666 <_dtoa_r+0x6be>
 800b5da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b5de:	49a5      	ldr	r1, [pc, #660]	@ (800b874 <_dtoa_r+0x8cc>)
 800b5e0:	2000      	movs	r0, #0
 800b5e2:	f7f4 fe51 	bl	8000288 <__aeabi_dsub>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5ee:	f7f5 fa75 	bl	8000adc <__aeabi_dcmplt>
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	f43f aef5 	beq.w	800b3e2 <_dtoa_r+0x43a>
 800b5f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b5fa:	1e73      	subs	r3, r6, #1
 800b5fc:	9315      	str	r3, [sp, #84]	@ 0x54
 800b5fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b602:	2b30      	cmp	r3, #48	@ 0x30
 800b604:	d0f8      	beq.n	800b5f8 <_dtoa_r+0x650>
 800b606:	9f04      	ldr	r7, [sp, #16]
 800b608:	e73e      	b.n	800b488 <_dtoa_r+0x4e0>
 800b60a:	4b9b      	ldr	r3, [pc, #620]	@ (800b878 <_dtoa_r+0x8d0>)
 800b60c:	f7f4 fff4 	bl	80005f8 <__aeabi_dmul>
 800b610:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b614:	e7bc      	b.n	800b590 <_dtoa_r+0x5e8>
 800b616:	d10c      	bne.n	800b632 <_dtoa_r+0x68a>
 800b618:	4b98      	ldr	r3, [pc, #608]	@ (800b87c <_dtoa_r+0x8d4>)
 800b61a:	2200      	movs	r2, #0
 800b61c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b620:	f7f4 ffea 	bl	80005f8 <__aeabi_dmul>
 800b624:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b628:	f7f5 fa6c 	bl	8000b04 <__aeabi_dcmpge>
 800b62c:	2800      	cmp	r0, #0
 800b62e:	f000 8157 	beq.w	800b8e0 <_dtoa_r+0x938>
 800b632:	2400      	movs	r4, #0
 800b634:	4625      	mov	r5, r4
 800b636:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b638:	43db      	mvns	r3, r3
 800b63a:	9304      	str	r3, [sp, #16]
 800b63c:	4656      	mov	r6, sl
 800b63e:	2700      	movs	r7, #0
 800b640:	4621      	mov	r1, r4
 800b642:	4658      	mov	r0, fp
 800b644:	f000 fbb4 	bl	800bdb0 <_Bfree>
 800b648:	2d00      	cmp	r5, #0
 800b64a:	d0dc      	beq.n	800b606 <_dtoa_r+0x65e>
 800b64c:	b12f      	cbz	r7, 800b65a <_dtoa_r+0x6b2>
 800b64e:	42af      	cmp	r7, r5
 800b650:	d003      	beq.n	800b65a <_dtoa_r+0x6b2>
 800b652:	4639      	mov	r1, r7
 800b654:	4658      	mov	r0, fp
 800b656:	f000 fbab 	bl	800bdb0 <_Bfree>
 800b65a:	4629      	mov	r1, r5
 800b65c:	4658      	mov	r0, fp
 800b65e:	f000 fba7 	bl	800bdb0 <_Bfree>
 800b662:	e7d0      	b.n	800b606 <_dtoa_r+0x65e>
 800b664:	9704      	str	r7, [sp, #16]
 800b666:	4633      	mov	r3, r6
 800b668:	461e      	mov	r6, r3
 800b66a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b66e:	2a39      	cmp	r2, #57	@ 0x39
 800b670:	d107      	bne.n	800b682 <_dtoa_r+0x6da>
 800b672:	459a      	cmp	sl, r3
 800b674:	d1f8      	bne.n	800b668 <_dtoa_r+0x6c0>
 800b676:	9a04      	ldr	r2, [sp, #16]
 800b678:	3201      	adds	r2, #1
 800b67a:	9204      	str	r2, [sp, #16]
 800b67c:	2230      	movs	r2, #48	@ 0x30
 800b67e:	f88a 2000 	strb.w	r2, [sl]
 800b682:	781a      	ldrb	r2, [r3, #0]
 800b684:	3201      	adds	r2, #1
 800b686:	701a      	strb	r2, [r3, #0]
 800b688:	e7bd      	b.n	800b606 <_dtoa_r+0x65e>
 800b68a:	4b7b      	ldr	r3, [pc, #492]	@ (800b878 <_dtoa_r+0x8d0>)
 800b68c:	2200      	movs	r2, #0
 800b68e:	f7f4 ffb3 	bl	80005f8 <__aeabi_dmul>
 800b692:	2200      	movs	r2, #0
 800b694:	2300      	movs	r3, #0
 800b696:	4604      	mov	r4, r0
 800b698:	460d      	mov	r5, r1
 800b69a:	f7f5 fa15 	bl	8000ac8 <__aeabi_dcmpeq>
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	f43f aebb 	beq.w	800b41a <_dtoa_r+0x472>
 800b6a4:	e6f0      	b.n	800b488 <_dtoa_r+0x4e0>
 800b6a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b6a8:	2a00      	cmp	r2, #0
 800b6aa:	f000 80db 	beq.w	800b864 <_dtoa_r+0x8bc>
 800b6ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6b0:	2a01      	cmp	r2, #1
 800b6b2:	f300 80bf 	bgt.w	800b834 <_dtoa_r+0x88c>
 800b6b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b6b8:	2a00      	cmp	r2, #0
 800b6ba:	f000 80b7 	beq.w	800b82c <_dtoa_r+0x884>
 800b6be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b6c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b6c4:	4646      	mov	r6, r8
 800b6c6:	9a08      	ldr	r2, [sp, #32]
 800b6c8:	2101      	movs	r1, #1
 800b6ca:	441a      	add	r2, r3
 800b6cc:	4658      	mov	r0, fp
 800b6ce:	4498      	add	r8, r3
 800b6d0:	9208      	str	r2, [sp, #32]
 800b6d2:	f000 fc21 	bl	800bf18 <__i2b>
 800b6d6:	4605      	mov	r5, r0
 800b6d8:	b15e      	cbz	r6, 800b6f2 <_dtoa_r+0x74a>
 800b6da:	9b08      	ldr	r3, [sp, #32]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	dd08      	ble.n	800b6f2 <_dtoa_r+0x74a>
 800b6e0:	42b3      	cmp	r3, r6
 800b6e2:	9a08      	ldr	r2, [sp, #32]
 800b6e4:	bfa8      	it	ge
 800b6e6:	4633      	movge	r3, r6
 800b6e8:	eba8 0803 	sub.w	r8, r8, r3
 800b6ec:	1af6      	subs	r6, r6, r3
 800b6ee:	1ad3      	subs	r3, r2, r3
 800b6f0:	9308      	str	r3, [sp, #32]
 800b6f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6f4:	b1f3      	cbz	r3, 800b734 <_dtoa_r+0x78c>
 800b6f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	f000 80b7 	beq.w	800b86c <_dtoa_r+0x8c4>
 800b6fe:	b18c      	cbz	r4, 800b724 <_dtoa_r+0x77c>
 800b700:	4629      	mov	r1, r5
 800b702:	4622      	mov	r2, r4
 800b704:	4658      	mov	r0, fp
 800b706:	f000 fcc7 	bl	800c098 <__pow5mult>
 800b70a:	464a      	mov	r2, r9
 800b70c:	4601      	mov	r1, r0
 800b70e:	4605      	mov	r5, r0
 800b710:	4658      	mov	r0, fp
 800b712:	f000 fc17 	bl	800bf44 <__multiply>
 800b716:	4649      	mov	r1, r9
 800b718:	9004      	str	r0, [sp, #16]
 800b71a:	4658      	mov	r0, fp
 800b71c:	f000 fb48 	bl	800bdb0 <_Bfree>
 800b720:	9b04      	ldr	r3, [sp, #16]
 800b722:	4699      	mov	r9, r3
 800b724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b726:	1b1a      	subs	r2, r3, r4
 800b728:	d004      	beq.n	800b734 <_dtoa_r+0x78c>
 800b72a:	4649      	mov	r1, r9
 800b72c:	4658      	mov	r0, fp
 800b72e:	f000 fcb3 	bl	800c098 <__pow5mult>
 800b732:	4681      	mov	r9, r0
 800b734:	2101      	movs	r1, #1
 800b736:	4658      	mov	r0, fp
 800b738:	f000 fbee 	bl	800bf18 <__i2b>
 800b73c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b73e:	4604      	mov	r4, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	f000 81cf 	beq.w	800bae4 <_dtoa_r+0xb3c>
 800b746:	461a      	mov	r2, r3
 800b748:	4601      	mov	r1, r0
 800b74a:	4658      	mov	r0, fp
 800b74c:	f000 fca4 	bl	800c098 <__pow5mult>
 800b750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b752:	2b01      	cmp	r3, #1
 800b754:	4604      	mov	r4, r0
 800b756:	f300 8095 	bgt.w	800b884 <_dtoa_r+0x8dc>
 800b75a:	9b02      	ldr	r3, [sp, #8]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f040 8087 	bne.w	800b870 <_dtoa_r+0x8c8>
 800b762:	9b03      	ldr	r3, [sp, #12]
 800b764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b768:	2b00      	cmp	r3, #0
 800b76a:	f040 8089 	bne.w	800b880 <_dtoa_r+0x8d8>
 800b76e:	9b03      	ldr	r3, [sp, #12]
 800b770:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b774:	0d1b      	lsrs	r3, r3, #20
 800b776:	051b      	lsls	r3, r3, #20
 800b778:	b12b      	cbz	r3, 800b786 <_dtoa_r+0x7de>
 800b77a:	9b08      	ldr	r3, [sp, #32]
 800b77c:	3301      	adds	r3, #1
 800b77e:	9308      	str	r3, [sp, #32]
 800b780:	f108 0801 	add.w	r8, r8, #1
 800b784:	2301      	movs	r3, #1
 800b786:	930a      	str	r3, [sp, #40]	@ 0x28
 800b788:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f000 81b0 	beq.w	800baf0 <_dtoa_r+0xb48>
 800b790:	6923      	ldr	r3, [r4, #16]
 800b792:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b796:	6918      	ldr	r0, [r3, #16]
 800b798:	f000 fb72 	bl	800be80 <__hi0bits>
 800b79c:	f1c0 0020 	rsb	r0, r0, #32
 800b7a0:	9b08      	ldr	r3, [sp, #32]
 800b7a2:	4418      	add	r0, r3
 800b7a4:	f010 001f 	ands.w	r0, r0, #31
 800b7a8:	d077      	beq.n	800b89a <_dtoa_r+0x8f2>
 800b7aa:	f1c0 0320 	rsb	r3, r0, #32
 800b7ae:	2b04      	cmp	r3, #4
 800b7b0:	dd6b      	ble.n	800b88a <_dtoa_r+0x8e2>
 800b7b2:	9b08      	ldr	r3, [sp, #32]
 800b7b4:	f1c0 001c 	rsb	r0, r0, #28
 800b7b8:	4403      	add	r3, r0
 800b7ba:	4480      	add	r8, r0
 800b7bc:	4406      	add	r6, r0
 800b7be:	9308      	str	r3, [sp, #32]
 800b7c0:	f1b8 0f00 	cmp.w	r8, #0
 800b7c4:	dd05      	ble.n	800b7d2 <_dtoa_r+0x82a>
 800b7c6:	4649      	mov	r1, r9
 800b7c8:	4642      	mov	r2, r8
 800b7ca:	4658      	mov	r0, fp
 800b7cc:	f000 fcbe 	bl	800c14c <__lshift>
 800b7d0:	4681      	mov	r9, r0
 800b7d2:	9b08      	ldr	r3, [sp, #32]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	dd05      	ble.n	800b7e4 <_dtoa_r+0x83c>
 800b7d8:	4621      	mov	r1, r4
 800b7da:	461a      	mov	r2, r3
 800b7dc:	4658      	mov	r0, fp
 800b7de:	f000 fcb5 	bl	800c14c <__lshift>
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d059      	beq.n	800b89e <_dtoa_r+0x8f6>
 800b7ea:	4621      	mov	r1, r4
 800b7ec:	4648      	mov	r0, r9
 800b7ee:	f000 fd19 	bl	800c224 <__mcmp>
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	da53      	bge.n	800b89e <_dtoa_r+0x8f6>
 800b7f6:	1e7b      	subs	r3, r7, #1
 800b7f8:	9304      	str	r3, [sp, #16]
 800b7fa:	4649      	mov	r1, r9
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	220a      	movs	r2, #10
 800b800:	4658      	mov	r0, fp
 800b802:	f000 faf7 	bl	800bdf4 <__multadd>
 800b806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b808:	4681      	mov	r9, r0
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	f000 8172 	beq.w	800baf4 <_dtoa_r+0xb4c>
 800b810:	2300      	movs	r3, #0
 800b812:	4629      	mov	r1, r5
 800b814:	220a      	movs	r2, #10
 800b816:	4658      	mov	r0, fp
 800b818:	f000 faec 	bl	800bdf4 <__multadd>
 800b81c:	9b00      	ldr	r3, [sp, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	4605      	mov	r5, r0
 800b822:	dc67      	bgt.n	800b8f4 <_dtoa_r+0x94c>
 800b824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b826:	2b02      	cmp	r3, #2
 800b828:	dc41      	bgt.n	800b8ae <_dtoa_r+0x906>
 800b82a:	e063      	b.n	800b8f4 <_dtoa_r+0x94c>
 800b82c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b82e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b832:	e746      	b.n	800b6c2 <_dtoa_r+0x71a>
 800b834:	9b07      	ldr	r3, [sp, #28]
 800b836:	1e5c      	subs	r4, r3, #1
 800b838:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b83a:	42a3      	cmp	r3, r4
 800b83c:	bfbf      	itttt	lt
 800b83e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b840:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b842:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b844:	1ae3      	sublt	r3, r4, r3
 800b846:	bfb4      	ite	lt
 800b848:	18d2      	addlt	r2, r2, r3
 800b84a:	1b1c      	subge	r4, r3, r4
 800b84c:	9b07      	ldr	r3, [sp, #28]
 800b84e:	bfbc      	itt	lt
 800b850:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b852:	2400      	movlt	r4, #0
 800b854:	2b00      	cmp	r3, #0
 800b856:	bfb5      	itete	lt
 800b858:	eba8 0603 	sublt.w	r6, r8, r3
 800b85c:	9b07      	ldrge	r3, [sp, #28]
 800b85e:	2300      	movlt	r3, #0
 800b860:	4646      	movge	r6, r8
 800b862:	e730      	b.n	800b6c6 <_dtoa_r+0x71e>
 800b864:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b866:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b868:	4646      	mov	r6, r8
 800b86a:	e735      	b.n	800b6d8 <_dtoa_r+0x730>
 800b86c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b86e:	e75c      	b.n	800b72a <_dtoa_r+0x782>
 800b870:	2300      	movs	r3, #0
 800b872:	e788      	b.n	800b786 <_dtoa_r+0x7de>
 800b874:	3fe00000 	.word	0x3fe00000
 800b878:	40240000 	.word	0x40240000
 800b87c:	40140000 	.word	0x40140000
 800b880:	9b02      	ldr	r3, [sp, #8]
 800b882:	e780      	b.n	800b786 <_dtoa_r+0x7de>
 800b884:	2300      	movs	r3, #0
 800b886:	930a      	str	r3, [sp, #40]	@ 0x28
 800b888:	e782      	b.n	800b790 <_dtoa_r+0x7e8>
 800b88a:	d099      	beq.n	800b7c0 <_dtoa_r+0x818>
 800b88c:	9a08      	ldr	r2, [sp, #32]
 800b88e:	331c      	adds	r3, #28
 800b890:	441a      	add	r2, r3
 800b892:	4498      	add	r8, r3
 800b894:	441e      	add	r6, r3
 800b896:	9208      	str	r2, [sp, #32]
 800b898:	e792      	b.n	800b7c0 <_dtoa_r+0x818>
 800b89a:	4603      	mov	r3, r0
 800b89c:	e7f6      	b.n	800b88c <_dtoa_r+0x8e4>
 800b89e:	9b07      	ldr	r3, [sp, #28]
 800b8a0:	9704      	str	r7, [sp, #16]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	dc20      	bgt.n	800b8e8 <_dtoa_r+0x940>
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8aa:	2b02      	cmp	r3, #2
 800b8ac:	dd1e      	ble.n	800b8ec <_dtoa_r+0x944>
 800b8ae:	9b00      	ldr	r3, [sp, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f47f aec0 	bne.w	800b636 <_dtoa_r+0x68e>
 800b8b6:	4621      	mov	r1, r4
 800b8b8:	2205      	movs	r2, #5
 800b8ba:	4658      	mov	r0, fp
 800b8bc:	f000 fa9a 	bl	800bdf4 <__multadd>
 800b8c0:	4601      	mov	r1, r0
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	4648      	mov	r0, r9
 800b8c6:	f000 fcad 	bl	800c224 <__mcmp>
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	f77f aeb3 	ble.w	800b636 <_dtoa_r+0x68e>
 800b8d0:	4656      	mov	r6, sl
 800b8d2:	2331      	movs	r3, #49	@ 0x31
 800b8d4:	f806 3b01 	strb.w	r3, [r6], #1
 800b8d8:	9b04      	ldr	r3, [sp, #16]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	9304      	str	r3, [sp, #16]
 800b8de:	e6ae      	b.n	800b63e <_dtoa_r+0x696>
 800b8e0:	9c07      	ldr	r4, [sp, #28]
 800b8e2:	9704      	str	r7, [sp, #16]
 800b8e4:	4625      	mov	r5, r4
 800b8e6:	e7f3      	b.n	800b8d0 <_dtoa_r+0x928>
 800b8e8:	9b07      	ldr	r3, [sp, #28]
 800b8ea:	9300      	str	r3, [sp, #0]
 800b8ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f000 8104 	beq.w	800bafc <_dtoa_r+0xb54>
 800b8f4:	2e00      	cmp	r6, #0
 800b8f6:	dd05      	ble.n	800b904 <_dtoa_r+0x95c>
 800b8f8:	4629      	mov	r1, r5
 800b8fa:	4632      	mov	r2, r6
 800b8fc:	4658      	mov	r0, fp
 800b8fe:	f000 fc25 	bl	800c14c <__lshift>
 800b902:	4605      	mov	r5, r0
 800b904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b906:	2b00      	cmp	r3, #0
 800b908:	d05a      	beq.n	800b9c0 <_dtoa_r+0xa18>
 800b90a:	6869      	ldr	r1, [r5, #4]
 800b90c:	4658      	mov	r0, fp
 800b90e:	f000 fa0f 	bl	800bd30 <_Balloc>
 800b912:	4606      	mov	r6, r0
 800b914:	b928      	cbnz	r0, 800b922 <_dtoa_r+0x97a>
 800b916:	4b84      	ldr	r3, [pc, #528]	@ (800bb28 <_dtoa_r+0xb80>)
 800b918:	4602      	mov	r2, r0
 800b91a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b91e:	f7ff bb5a 	b.w	800afd6 <_dtoa_r+0x2e>
 800b922:	692a      	ldr	r2, [r5, #16]
 800b924:	3202      	adds	r2, #2
 800b926:	0092      	lsls	r2, r2, #2
 800b928:	f105 010c 	add.w	r1, r5, #12
 800b92c:	300c      	adds	r0, #12
 800b92e:	f7ff faa2 	bl	800ae76 <memcpy>
 800b932:	2201      	movs	r2, #1
 800b934:	4631      	mov	r1, r6
 800b936:	4658      	mov	r0, fp
 800b938:	f000 fc08 	bl	800c14c <__lshift>
 800b93c:	f10a 0301 	add.w	r3, sl, #1
 800b940:	9307      	str	r3, [sp, #28]
 800b942:	9b00      	ldr	r3, [sp, #0]
 800b944:	4453      	add	r3, sl
 800b946:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b948:	9b02      	ldr	r3, [sp, #8]
 800b94a:	f003 0301 	and.w	r3, r3, #1
 800b94e:	462f      	mov	r7, r5
 800b950:	930a      	str	r3, [sp, #40]	@ 0x28
 800b952:	4605      	mov	r5, r0
 800b954:	9b07      	ldr	r3, [sp, #28]
 800b956:	4621      	mov	r1, r4
 800b958:	3b01      	subs	r3, #1
 800b95a:	4648      	mov	r0, r9
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	f7ff fa98 	bl	800ae92 <quorem>
 800b962:	4639      	mov	r1, r7
 800b964:	9002      	str	r0, [sp, #8]
 800b966:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b96a:	4648      	mov	r0, r9
 800b96c:	f000 fc5a 	bl	800c224 <__mcmp>
 800b970:	462a      	mov	r2, r5
 800b972:	9008      	str	r0, [sp, #32]
 800b974:	4621      	mov	r1, r4
 800b976:	4658      	mov	r0, fp
 800b978:	f000 fc70 	bl	800c25c <__mdiff>
 800b97c:	68c2      	ldr	r2, [r0, #12]
 800b97e:	4606      	mov	r6, r0
 800b980:	bb02      	cbnz	r2, 800b9c4 <_dtoa_r+0xa1c>
 800b982:	4601      	mov	r1, r0
 800b984:	4648      	mov	r0, r9
 800b986:	f000 fc4d 	bl	800c224 <__mcmp>
 800b98a:	4602      	mov	r2, r0
 800b98c:	4631      	mov	r1, r6
 800b98e:	4658      	mov	r0, fp
 800b990:	920e      	str	r2, [sp, #56]	@ 0x38
 800b992:	f000 fa0d 	bl	800bdb0 <_Bfree>
 800b996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b998:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b99a:	9e07      	ldr	r6, [sp, #28]
 800b99c:	ea43 0102 	orr.w	r1, r3, r2
 800b9a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9a2:	4319      	orrs	r1, r3
 800b9a4:	d110      	bne.n	800b9c8 <_dtoa_r+0xa20>
 800b9a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b9aa:	d029      	beq.n	800ba00 <_dtoa_r+0xa58>
 800b9ac:	9b08      	ldr	r3, [sp, #32]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	dd02      	ble.n	800b9b8 <_dtoa_r+0xa10>
 800b9b2:	9b02      	ldr	r3, [sp, #8]
 800b9b4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b9b8:	9b00      	ldr	r3, [sp, #0]
 800b9ba:	f883 8000 	strb.w	r8, [r3]
 800b9be:	e63f      	b.n	800b640 <_dtoa_r+0x698>
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	e7bb      	b.n	800b93c <_dtoa_r+0x994>
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	e7e1      	b.n	800b98c <_dtoa_r+0x9e4>
 800b9c8:	9b08      	ldr	r3, [sp, #32]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	db04      	blt.n	800b9d8 <_dtoa_r+0xa30>
 800b9ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b9d0:	430b      	orrs	r3, r1
 800b9d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b9d4:	430b      	orrs	r3, r1
 800b9d6:	d120      	bne.n	800ba1a <_dtoa_r+0xa72>
 800b9d8:	2a00      	cmp	r2, #0
 800b9da:	dded      	ble.n	800b9b8 <_dtoa_r+0xa10>
 800b9dc:	4649      	mov	r1, r9
 800b9de:	2201      	movs	r2, #1
 800b9e0:	4658      	mov	r0, fp
 800b9e2:	f000 fbb3 	bl	800c14c <__lshift>
 800b9e6:	4621      	mov	r1, r4
 800b9e8:	4681      	mov	r9, r0
 800b9ea:	f000 fc1b 	bl	800c224 <__mcmp>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	dc03      	bgt.n	800b9fa <_dtoa_r+0xa52>
 800b9f2:	d1e1      	bne.n	800b9b8 <_dtoa_r+0xa10>
 800b9f4:	f018 0f01 	tst.w	r8, #1
 800b9f8:	d0de      	beq.n	800b9b8 <_dtoa_r+0xa10>
 800b9fa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b9fe:	d1d8      	bne.n	800b9b2 <_dtoa_r+0xa0a>
 800ba00:	9a00      	ldr	r2, [sp, #0]
 800ba02:	2339      	movs	r3, #57	@ 0x39
 800ba04:	7013      	strb	r3, [r2, #0]
 800ba06:	4633      	mov	r3, r6
 800ba08:	461e      	mov	r6, r3
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ba10:	2a39      	cmp	r2, #57	@ 0x39
 800ba12:	d052      	beq.n	800baba <_dtoa_r+0xb12>
 800ba14:	3201      	adds	r2, #1
 800ba16:	701a      	strb	r2, [r3, #0]
 800ba18:	e612      	b.n	800b640 <_dtoa_r+0x698>
 800ba1a:	2a00      	cmp	r2, #0
 800ba1c:	dd07      	ble.n	800ba2e <_dtoa_r+0xa86>
 800ba1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba22:	d0ed      	beq.n	800ba00 <_dtoa_r+0xa58>
 800ba24:	9a00      	ldr	r2, [sp, #0]
 800ba26:	f108 0301 	add.w	r3, r8, #1
 800ba2a:	7013      	strb	r3, [r2, #0]
 800ba2c:	e608      	b.n	800b640 <_dtoa_r+0x698>
 800ba2e:	9b07      	ldr	r3, [sp, #28]
 800ba30:	9a07      	ldr	r2, [sp, #28]
 800ba32:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ba36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d028      	beq.n	800ba8e <_dtoa_r+0xae6>
 800ba3c:	4649      	mov	r1, r9
 800ba3e:	2300      	movs	r3, #0
 800ba40:	220a      	movs	r2, #10
 800ba42:	4658      	mov	r0, fp
 800ba44:	f000 f9d6 	bl	800bdf4 <__multadd>
 800ba48:	42af      	cmp	r7, r5
 800ba4a:	4681      	mov	r9, r0
 800ba4c:	f04f 0300 	mov.w	r3, #0
 800ba50:	f04f 020a 	mov.w	r2, #10
 800ba54:	4639      	mov	r1, r7
 800ba56:	4658      	mov	r0, fp
 800ba58:	d107      	bne.n	800ba6a <_dtoa_r+0xac2>
 800ba5a:	f000 f9cb 	bl	800bdf4 <__multadd>
 800ba5e:	4607      	mov	r7, r0
 800ba60:	4605      	mov	r5, r0
 800ba62:	9b07      	ldr	r3, [sp, #28]
 800ba64:	3301      	adds	r3, #1
 800ba66:	9307      	str	r3, [sp, #28]
 800ba68:	e774      	b.n	800b954 <_dtoa_r+0x9ac>
 800ba6a:	f000 f9c3 	bl	800bdf4 <__multadd>
 800ba6e:	4629      	mov	r1, r5
 800ba70:	4607      	mov	r7, r0
 800ba72:	2300      	movs	r3, #0
 800ba74:	220a      	movs	r2, #10
 800ba76:	4658      	mov	r0, fp
 800ba78:	f000 f9bc 	bl	800bdf4 <__multadd>
 800ba7c:	4605      	mov	r5, r0
 800ba7e:	e7f0      	b.n	800ba62 <_dtoa_r+0xaba>
 800ba80:	9b00      	ldr	r3, [sp, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	bfcc      	ite	gt
 800ba86:	461e      	movgt	r6, r3
 800ba88:	2601      	movle	r6, #1
 800ba8a:	4456      	add	r6, sl
 800ba8c:	2700      	movs	r7, #0
 800ba8e:	4649      	mov	r1, r9
 800ba90:	2201      	movs	r2, #1
 800ba92:	4658      	mov	r0, fp
 800ba94:	f000 fb5a 	bl	800c14c <__lshift>
 800ba98:	4621      	mov	r1, r4
 800ba9a:	4681      	mov	r9, r0
 800ba9c:	f000 fbc2 	bl	800c224 <__mcmp>
 800baa0:	2800      	cmp	r0, #0
 800baa2:	dcb0      	bgt.n	800ba06 <_dtoa_r+0xa5e>
 800baa4:	d102      	bne.n	800baac <_dtoa_r+0xb04>
 800baa6:	f018 0f01 	tst.w	r8, #1
 800baaa:	d1ac      	bne.n	800ba06 <_dtoa_r+0xa5e>
 800baac:	4633      	mov	r3, r6
 800baae:	461e      	mov	r6, r3
 800bab0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bab4:	2a30      	cmp	r2, #48	@ 0x30
 800bab6:	d0fa      	beq.n	800baae <_dtoa_r+0xb06>
 800bab8:	e5c2      	b.n	800b640 <_dtoa_r+0x698>
 800baba:	459a      	cmp	sl, r3
 800babc:	d1a4      	bne.n	800ba08 <_dtoa_r+0xa60>
 800babe:	9b04      	ldr	r3, [sp, #16]
 800bac0:	3301      	adds	r3, #1
 800bac2:	9304      	str	r3, [sp, #16]
 800bac4:	2331      	movs	r3, #49	@ 0x31
 800bac6:	f88a 3000 	strb.w	r3, [sl]
 800baca:	e5b9      	b.n	800b640 <_dtoa_r+0x698>
 800bacc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bace:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bb2c <_dtoa_r+0xb84>
 800bad2:	b11b      	cbz	r3, 800badc <_dtoa_r+0xb34>
 800bad4:	f10a 0308 	add.w	r3, sl, #8
 800bad8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bada:	6013      	str	r3, [r2, #0]
 800badc:	4650      	mov	r0, sl
 800bade:	b019      	add	sp, #100	@ 0x64
 800bae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	f77f ae37 	ble.w	800b75a <_dtoa_r+0x7b2>
 800baec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800baee:	930a      	str	r3, [sp, #40]	@ 0x28
 800baf0:	2001      	movs	r0, #1
 800baf2:	e655      	b.n	800b7a0 <_dtoa_r+0x7f8>
 800baf4:	9b00      	ldr	r3, [sp, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	f77f aed6 	ble.w	800b8a8 <_dtoa_r+0x900>
 800bafc:	4656      	mov	r6, sl
 800bafe:	4621      	mov	r1, r4
 800bb00:	4648      	mov	r0, r9
 800bb02:	f7ff f9c6 	bl	800ae92 <quorem>
 800bb06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bb0a:	f806 8b01 	strb.w	r8, [r6], #1
 800bb0e:	9b00      	ldr	r3, [sp, #0]
 800bb10:	eba6 020a 	sub.w	r2, r6, sl
 800bb14:	4293      	cmp	r3, r2
 800bb16:	ddb3      	ble.n	800ba80 <_dtoa_r+0xad8>
 800bb18:	4649      	mov	r1, r9
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	220a      	movs	r2, #10
 800bb1e:	4658      	mov	r0, fp
 800bb20:	f000 f968 	bl	800bdf4 <__multadd>
 800bb24:	4681      	mov	r9, r0
 800bb26:	e7ea      	b.n	800bafe <_dtoa_r+0xb56>
 800bb28:	0800d49c 	.word	0x0800d49c
 800bb2c:	0800d420 	.word	0x0800d420

0800bb30 <_free_r>:
 800bb30:	b538      	push	{r3, r4, r5, lr}
 800bb32:	4605      	mov	r5, r0
 800bb34:	2900      	cmp	r1, #0
 800bb36:	d041      	beq.n	800bbbc <_free_r+0x8c>
 800bb38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb3c:	1f0c      	subs	r4, r1, #4
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	bfb8      	it	lt
 800bb42:	18e4      	addlt	r4, r4, r3
 800bb44:	f000 f8e8 	bl	800bd18 <__malloc_lock>
 800bb48:	4a1d      	ldr	r2, [pc, #116]	@ (800bbc0 <_free_r+0x90>)
 800bb4a:	6813      	ldr	r3, [r2, #0]
 800bb4c:	b933      	cbnz	r3, 800bb5c <_free_r+0x2c>
 800bb4e:	6063      	str	r3, [r4, #4]
 800bb50:	6014      	str	r4, [r2, #0]
 800bb52:	4628      	mov	r0, r5
 800bb54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb58:	f000 b8e4 	b.w	800bd24 <__malloc_unlock>
 800bb5c:	42a3      	cmp	r3, r4
 800bb5e:	d908      	bls.n	800bb72 <_free_r+0x42>
 800bb60:	6820      	ldr	r0, [r4, #0]
 800bb62:	1821      	adds	r1, r4, r0
 800bb64:	428b      	cmp	r3, r1
 800bb66:	bf01      	itttt	eq
 800bb68:	6819      	ldreq	r1, [r3, #0]
 800bb6a:	685b      	ldreq	r3, [r3, #4]
 800bb6c:	1809      	addeq	r1, r1, r0
 800bb6e:	6021      	streq	r1, [r4, #0]
 800bb70:	e7ed      	b.n	800bb4e <_free_r+0x1e>
 800bb72:	461a      	mov	r2, r3
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	b10b      	cbz	r3, 800bb7c <_free_r+0x4c>
 800bb78:	42a3      	cmp	r3, r4
 800bb7a:	d9fa      	bls.n	800bb72 <_free_r+0x42>
 800bb7c:	6811      	ldr	r1, [r2, #0]
 800bb7e:	1850      	adds	r0, r2, r1
 800bb80:	42a0      	cmp	r0, r4
 800bb82:	d10b      	bne.n	800bb9c <_free_r+0x6c>
 800bb84:	6820      	ldr	r0, [r4, #0]
 800bb86:	4401      	add	r1, r0
 800bb88:	1850      	adds	r0, r2, r1
 800bb8a:	4283      	cmp	r3, r0
 800bb8c:	6011      	str	r1, [r2, #0]
 800bb8e:	d1e0      	bne.n	800bb52 <_free_r+0x22>
 800bb90:	6818      	ldr	r0, [r3, #0]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	6053      	str	r3, [r2, #4]
 800bb96:	4408      	add	r0, r1
 800bb98:	6010      	str	r0, [r2, #0]
 800bb9a:	e7da      	b.n	800bb52 <_free_r+0x22>
 800bb9c:	d902      	bls.n	800bba4 <_free_r+0x74>
 800bb9e:	230c      	movs	r3, #12
 800bba0:	602b      	str	r3, [r5, #0]
 800bba2:	e7d6      	b.n	800bb52 <_free_r+0x22>
 800bba4:	6820      	ldr	r0, [r4, #0]
 800bba6:	1821      	adds	r1, r4, r0
 800bba8:	428b      	cmp	r3, r1
 800bbaa:	bf04      	itt	eq
 800bbac:	6819      	ldreq	r1, [r3, #0]
 800bbae:	685b      	ldreq	r3, [r3, #4]
 800bbb0:	6063      	str	r3, [r4, #4]
 800bbb2:	bf04      	itt	eq
 800bbb4:	1809      	addeq	r1, r1, r0
 800bbb6:	6021      	streq	r1, [r4, #0]
 800bbb8:	6054      	str	r4, [r2, #4]
 800bbba:	e7ca      	b.n	800bb52 <_free_r+0x22>
 800bbbc:	bd38      	pop	{r3, r4, r5, pc}
 800bbbe:	bf00      	nop
 800bbc0:	20002854 	.word	0x20002854

0800bbc4 <malloc>:
 800bbc4:	4b02      	ldr	r3, [pc, #8]	@ (800bbd0 <malloc+0xc>)
 800bbc6:	4601      	mov	r1, r0
 800bbc8:	6818      	ldr	r0, [r3, #0]
 800bbca:	f000 b825 	b.w	800bc18 <_malloc_r>
 800bbce:	bf00      	nop
 800bbd0:	2000001c 	.word	0x2000001c

0800bbd4 <sbrk_aligned>:
 800bbd4:	b570      	push	{r4, r5, r6, lr}
 800bbd6:	4e0f      	ldr	r6, [pc, #60]	@ (800bc14 <sbrk_aligned+0x40>)
 800bbd8:	460c      	mov	r4, r1
 800bbda:	6831      	ldr	r1, [r6, #0]
 800bbdc:	4605      	mov	r5, r0
 800bbde:	b911      	cbnz	r1, 800bbe6 <sbrk_aligned+0x12>
 800bbe0:	f000 fe9a 	bl	800c918 <_sbrk_r>
 800bbe4:	6030      	str	r0, [r6, #0]
 800bbe6:	4621      	mov	r1, r4
 800bbe8:	4628      	mov	r0, r5
 800bbea:	f000 fe95 	bl	800c918 <_sbrk_r>
 800bbee:	1c43      	adds	r3, r0, #1
 800bbf0:	d103      	bne.n	800bbfa <sbrk_aligned+0x26>
 800bbf2:	f04f 34ff 	mov.w	r4, #4294967295
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	bd70      	pop	{r4, r5, r6, pc}
 800bbfa:	1cc4      	adds	r4, r0, #3
 800bbfc:	f024 0403 	bic.w	r4, r4, #3
 800bc00:	42a0      	cmp	r0, r4
 800bc02:	d0f8      	beq.n	800bbf6 <sbrk_aligned+0x22>
 800bc04:	1a21      	subs	r1, r4, r0
 800bc06:	4628      	mov	r0, r5
 800bc08:	f000 fe86 	bl	800c918 <_sbrk_r>
 800bc0c:	3001      	adds	r0, #1
 800bc0e:	d1f2      	bne.n	800bbf6 <sbrk_aligned+0x22>
 800bc10:	e7ef      	b.n	800bbf2 <sbrk_aligned+0x1e>
 800bc12:	bf00      	nop
 800bc14:	20002850 	.word	0x20002850

0800bc18 <_malloc_r>:
 800bc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc1c:	1ccd      	adds	r5, r1, #3
 800bc1e:	f025 0503 	bic.w	r5, r5, #3
 800bc22:	3508      	adds	r5, #8
 800bc24:	2d0c      	cmp	r5, #12
 800bc26:	bf38      	it	cc
 800bc28:	250c      	movcc	r5, #12
 800bc2a:	2d00      	cmp	r5, #0
 800bc2c:	4606      	mov	r6, r0
 800bc2e:	db01      	blt.n	800bc34 <_malloc_r+0x1c>
 800bc30:	42a9      	cmp	r1, r5
 800bc32:	d904      	bls.n	800bc3e <_malloc_r+0x26>
 800bc34:	230c      	movs	r3, #12
 800bc36:	6033      	str	r3, [r6, #0]
 800bc38:	2000      	movs	r0, #0
 800bc3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bd14 <_malloc_r+0xfc>
 800bc42:	f000 f869 	bl	800bd18 <__malloc_lock>
 800bc46:	f8d8 3000 	ldr.w	r3, [r8]
 800bc4a:	461c      	mov	r4, r3
 800bc4c:	bb44      	cbnz	r4, 800bca0 <_malloc_r+0x88>
 800bc4e:	4629      	mov	r1, r5
 800bc50:	4630      	mov	r0, r6
 800bc52:	f7ff ffbf 	bl	800bbd4 <sbrk_aligned>
 800bc56:	1c43      	adds	r3, r0, #1
 800bc58:	4604      	mov	r4, r0
 800bc5a:	d158      	bne.n	800bd0e <_malloc_r+0xf6>
 800bc5c:	f8d8 4000 	ldr.w	r4, [r8]
 800bc60:	4627      	mov	r7, r4
 800bc62:	2f00      	cmp	r7, #0
 800bc64:	d143      	bne.n	800bcee <_malloc_r+0xd6>
 800bc66:	2c00      	cmp	r4, #0
 800bc68:	d04b      	beq.n	800bd02 <_malloc_r+0xea>
 800bc6a:	6823      	ldr	r3, [r4, #0]
 800bc6c:	4639      	mov	r1, r7
 800bc6e:	4630      	mov	r0, r6
 800bc70:	eb04 0903 	add.w	r9, r4, r3
 800bc74:	f000 fe50 	bl	800c918 <_sbrk_r>
 800bc78:	4581      	cmp	r9, r0
 800bc7a:	d142      	bne.n	800bd02 <_malloc_r+0xea>
 800bc7c:	6821      	ldr	r1, [r4, #0]
 800bc7e:	1a6d      	subs	r5, r5, r1
 800bc80:	4629      	mov	r1, r5
 800bc82:	4630      	mov	r0, r6
 800bc84:	f7ff ffa6 	bl	800bbd4 <sbrk_aligned>
 800bc88:	3001      	adds	r0, #1
 800bc8a:	d03a      	beq.n	800bd02 <_malloc_r+0xea>
 800bc8c:	6823      	ldr	r3, [r4, #0]
 800bc8e:	442b      	add	r3, r5
 800bc90:	6023      	str	r3, [r4, #0]
 800bc92:	f8d8 3000 	ldr.w	r3, [r8]
 800bc96:	685a      	ldr	r2, [r3, #4]
 800bc98:	bb62      	cbnz	r2, 800bcf4 <_malloc_r+0xdc>
 800bc9a:	f8c8 7000 	str.w	r7, [r8]
 800bc9e:	e00f      	b.n	800bcc0 <_malloc_r+0xa8>
 800bca0:	6822      	ldr	r2, [r4, #0]
 800bca2:	1b52      	subs	r2, r2, r5
 800bca4:	d420      	bmi.n	800bce8 <_malloc_r+0xd0>
 800bca6:	2a0b      	cmp	r2, #11
 800bca8:	d917      	bls.n	800bcda <_malloc_r+0xc2>
 800bcaa:	1961      	adds	r1, r4, r5
 800bcac:	42a3      	cmp	r3, r4
 800bcae:	6025      	str	r5, [r4, #0]
 800bcb0:	bf18      	it	ne
 800bcb2:	6059      	strne	r1, [r3, #4]
 800bcb4:	6863      	ldr	r3, [r4, #4]
 800bcb6:	bf08      	it	eq
 800bcb8:	f8c8 1000 	streq.w	r1, [r8]
 800bcbc:	5162      	str	r2, [r4, r5]
 800bcbe:	604b      	str	r3, [r1, #4]
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	f000 f82f 	bl	800bd24 <__malloc_unlock>
 800bcc6:	f104 000b 	add.w	r0, r4, #11
 800bcca:	1d23      	adds	r3, r4, #4
 800bccc:	f020 0007 	bic.w	r0, r0, #7
 800bcd0:	1ac2      	subs	r2, r0, r3
 800bcd2:	bf1c      	itt	ne
 800bcd4:	1a1b      	subne	r3, r3, r0
 800bcd6:	50a3      	strne	r3, [r4, r2]
 800bcd8:	e7af      	b.n	800bc3a <_malloc_r+0x22>
 800bcda:	6862      	ldr	r2, [r4, #4]
 800bcdc:	42a3      	cmp	r3, r4
 800bcde:	bf0c      	ite	eq
 800bce0:	f8c8 2000 	streq.w	r2, [r8]
 800bce4:	605a      	strne	r2, [r3, #4]
 800bce6:	e7eb      	b.n	800bcc0 <_malloc_r+0xa8>
 800bce8:	4623      	mov	r3, r4
 800bcea:	6864      	ldr	r4, [r4, #4]
 800bcec:	e7ae      	b.n	800bc4c <_malloc_r+0x34>
 800bcee:	463c      	mov	r4, r7
 800bcf0:	687f      	ldr	r7, [r7, #4]
 800bcf2:	e7b6      	b.n	800bc62 <_malloc_r+0x4a>
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	42a3      	cmp	r3, r4
 800bcfa:	d1fb      	bne.n	800bcf4 <_malloc_r+0xdc>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	6053      	str	r3, [r2, #4]
 800bd00:	e7de      	b.n	800bcc0 <_malloc_r+0xa8>
 800bd02:	230c      	movs	r3, #12
 800bd04:	6033      	str	r3, [r6, #0]
 800bd06:	4630      	mov	r0, r6
 800bd08:	f000 f80c 	bl	800bd24 <__malloc_unlock>
 800bd0c:	e794      	b.n	800bc38 <_malloc_r+0x20>
 800bd0e:	6005      	str	r5, [r0, #0]
 800bd10:	e7d6      	b.n	800bcc0 <_malloc_r+0xa8>
 800bd12:	bf00      	nop
 800bd14:	20002854 	.word	0x20002854

0800bd18 <__malloc_lock>:
 800bd18:	4801      	ldr	r0, [pc, #4]	@ (800bd20 <__malloc_lock+0x8>)
 800bd1a:	f7ff b8aa 	b.w	800ae72 <__retarget_lock_acquire_recursive>
 800bd1e:	bf00      	nop
 800bd20:	2000284c 	.word	0x2000284c

0800bd24 <__malloc_unlock>:
 800bd24:	4801      	ldr	r0, [pc, #4]	@ (800bd2c <__malloc_unlock+0x8>)
 800bd26:	f7ff b8a5 	b.w	800ae74 <__retarget_lock_release_recursive>
 800bd2a:	bf00      	nop
 800bd2c:	2000284c 	.word	0x2000284c

0800bd30 <_Balloc>:
 800bd30:	b570      	push	{r4, r5, r6, lr}
 800bd32:	69c6      	ldr	r6, [r0, #28]
 800bd34:	4604      	mov	r4, r0
 800bd36:	460d      	mov	r5, r1
 800bd38:	b976      	cbnz	r6, 800bd58 <_Balloc+0x28>
 800bd3a:	2010      	movs	r0, #16
 800bd3c:	f7ff ff42 	bl	800bbc4 <malloc>
 800bd40:	4602      	mov	r2, r0
 800bd42:	61e0      	str	r0, [r4, #28]
 800bd44:	b920      	cbnz	r0, 800bd50 <_Balloc+0x20>
 800bd46:	4b18      	ldr	r3, [pc, #96]	@ (800bda8 <_Balloc+0x78>)
 800bd48:	4818      	ldr	r0, [pc, #96]	@ (800bdac <_Balloc+0x7c>)
 800bd4a:	216b      	movs	r1, #107	@ 0x6b
 800bd4c:	f000 fdf4 	bl	800c938 <__assert_func>
 800bd50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd54:	6006      	str	r6, [r0, #0]
 800bd56:	60c6      	str	r6, [r0, #12]
 800bd58:	69e6      	ldr	r6, [r4, #28]
 800bd5a:	68f3      	ldr	r3, [r6, #12]
 800bd5c:	b183      	cbz	r3, 800bd80 <_Balloc+0x50>
 800bd5e:	69e3      	ldr	r3, [r4, #28]
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd66:	b9b8      	cbnz	r0, 800bd98 <_Balloc+0x68>
 800bd68:	2101      	movs	r1, #1
 800bd6a:	fa01 f605 	lsl.w	r6, r1, r5
 800bd6e:	1d72      	adds	r2, r6, #5
 800bd70:	0092      	lsls	r2, r2, #2
 800bd72:	4620      	mov	r0, r4
 800bd74:	f000 fdfe 	bl	800c974 <_calloc_r>
 800bd78:	b160      	cbz	r0, 800bd94 <_Balloc+0x64>
 800bd7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd7e:	e00e      	b.n	800bd9e <_Balloc+0x6e>
 800bd80:	2221      	movs	r2, #33	@ 0x21
 800bd82:	2104      	movs	r1, #4
 800bd84:	4620      	mov	r0, r4
 800bd86:	f000 fdf5 	bl	800c974 <_calloc_r>
 800bd8a:	69e3      	ldr	r3, [r4, #28]
 800bd8c:	60f0      	str	r0, [r6, #12]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1e4      	bne.n	800bd5e <_Balloc+0x2e>
 800bd94:	2000      	movs	r0, #0
 800bd96:	bd70      	pop	{r4, r5, r6, pc}
 800bd98:	6802      	ldr	r2, [r0, #0]
 800bd9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd9e:	2300      	movs	r3, #0
 800bda0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bda4:	e7f7      	b.n	800bd96 <_Balloc+0x66>
 800bda6:	bf00      	nop
 800bda8:	0800d42d 	.word	0x0800d42d
 800bdac:	0800d4ad 	.word	0x0800d4ad

0800bdb0 <_Bfree>:
 800bdb0:	b570      	push	{r4, r5, r6, lr}
 800bdb2:	69c6      	ldr	r6, [r0, #28]
 800bdb4:	4605      	mov	r5, r0
 800bdb6:	460c      	mov	r4, r1
 800bdb8:	b976      	cbnz	r6, 800bdd8 <_Bfree+0x28>
 800bdba:	2010      	movs	r0, #16
 800bdbc:	f7ff ff02 	bl	800bbc4 <malloc>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	61e8      	str	r0, [r5, #28]
 800bdc4:	b920      	cbnz	r0, 800bdd0 <_Bfree+0x20>
 800bdc6:	4b09      	ldr	r3, [pc, #36]	@ (800bdec <_Bfree+0x3c>)
 800bdc8:	4809      	ldr	r0, [pc, #36]	@ (800bdf0 <_Bfree+0x40>)
 800bdca:	218f      	movs	r1, #143	@ 0x8f
 800bdcc:	f000 fdb4 	bl	800c938 <__assert_func>
 800bdd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdd4:	6006      	str	r6, [r0, #0]
 800bdd6:	60c6      	str	r6, [r0, #12]
 800bdd8:	b13c      	cbz	r4, 800bdea <_Bfree+0x3a>
 800bdda:	69eb      	ldr	r3, [r5, #28]
 800bddc:	6862      	ldr	r2, [r4, #4]
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bde4:	6021      	str	r1, [r4, #0]
 800bde6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bdea:	bd70      	pop	{r4, r5, r6, pc}
 800bdec:	0800d42d 	.word	0x0800d42d
 800bdf0:	0800d4ad 	.word	0x0800d4ad

0800bdf4 <__multadd>:
 800bdf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf8:	690d      	ldr	r5, [r1, #16]
 800bdfa:	4607      	mov	r7, r0
 800bdfc:	460c      	mov	r4, r1
 800bdfe:	461e      	mov	r6, r3
 800be00:	f101 0c14 	add.w	ip, r1, #20
 800be04:	2000      	movs	r0, #0
 800be06:	f8dc 3000 	ldr.w	r3, [ip]
 800be0a:	b299      	uxth	r1, r3
 800be0c:	fb02 6101 	mla	r1, r2, r1, r6
 800be10:	0c1e      	lsrs	r6, r3, #16
 800be12:	0c0b      	lsrs	r3, r1, #16
 800be14:	fb02 3306 	mla	r3, r2, r6, r3
 800be18:	b289      	uxth	r1, r1
 800be1a:	3001      	adds	r0, #1
 800be1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be20:	4285      	cmp	r5, r0
 800be22:	f84c 1b04 	str.w	r1, [ip], #4
 800be26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800be2a:	dcec      	bgt.n	800be06 <__multadd+0x12>
 800be2c:	b30e      	cbz	r6, 800be72 <__multadd+0x7e>
 800be2e:	68a3      	ldr	r3, [r4, #8]
 800be30:	42ab      	cmp	r3, r5
 800be32:	dc19      	bgt.n	800be68 <__multadd+0x74>
 800be34:	6861      	ldr	r1, [r4, #4]
 800be36:	4638      	mov	r0, r7
 800be38:	3101      	adds	r1, #1
 800be3a:	f7ff ff79 	bl	800bd30 <_Balloc>
 800be3e:	4680      	mov	r8, r0
 800be40:	b928      	cbnz	r0, 800be4e <__multadd+0x5a>
 800be42:	4602      	mov	r2, r0
 800be44:	4b0c      	ldr	r3, [pc, #48]	@ (800be78 <__multadd+0x84>)
 800be46:	480d      	ldr	r0, [pc, #52]	@ (800be7c <__multadd+0x88>)
 800be48:	21ba      	movs	r1, #186	@ 0xba
 800be4a:	f000 fd75 	bl	800c938 <__assert_func>
 800be4e:	6922      	ldr	r2, [r4, #16]
 800be50:	3202      	adds	r2, #2
 800be52:	f104 010c 	add.w	r1, r4, #12
 800be56:	0092      	lsls	r2, r2, #2
 800be58:	300c      	adds	r0, #12
 800be5a:	f7ff f80c 	bl	800ae76 <memcpy>
 800be5e:	4621      	mov	r1, r4
 800be60:	4638      	mov	r0, r7
 800be62:	f7ff ffa5 	bl	800bdb0 <_Bfree>
 800be66:	4644      	mov	r4, r8
 800be68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be6c:	3501      	adds	r5, #1
 800be6e:	615e      	str	r6, [r3, #20]
 800be70:	6125      	str	r5, [r4, #16]
 800be72:	4620      	mov	r0, r4
 800be74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be78:	0800d49c 	.word	0x0800d49c
 800be7c:	0800d4ad 	.word	0x0800d4ad

0800be80 <__hi0bits>:
 800be80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800be84:	4603      	mov	r3, r0
 800be86:	bf36      	itet	cc
 800be88:	0403      	lslcc	r3, r0, #16
 800be8a:	2000      	movcs	r0, #0
 800be8c:	2010      	movcc	r0, #16
 800be8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be92:	bf3c      	itt	cc
 800be94:	021b      	lslcc	r3, r3, #8
 800be96:	3008      	addcc	r0, #8
 800be98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be9c:	bf3c      	itt	cc
 800be9e:	011b      	lslcc	r3, r3, #4
 800bea0:	3004      	addcc	r0, #4
 800bea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bea6:	bf3c      	itt	cc
 800bea8:	009b      	lslcc	r3, r3, #2
 800beaa:	3002      	addcc	r0, #2
 800beac:	2b00      	cmp	r3, #0
 800beae:	db05      	blt.n	800bebc <__hi0bits+0x3c>
 800beb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800beb4:	f100 0001 	add.w	r0, r0, #1
 800beb8:	bf08      	it	eq
 800beba:	2020      	moveq	r0, #32
 800bebc:	4770      	bx	lr

0800bebe <__lo0bits>:
 800bebe:	6803      	ldr	r3, [r0, #0]
 800bec0:	4602      	mov	r2, r0
 800bec2:	f013 0007 	ands.w	r0, r3, #7
 800bec6:	d00b      	beq.n	800bee0 <__lo0bits+0x22>
 800bec8:	07d9      	lsls	r1, r3, #31
 800beca:	d421      	bmi.n	800bf10 <__lo0bits+0x52>
 800becc:	0798      	lsls	r0, r3, #30
 800bece:	bf49      	itett	mi
 800bed0:	085b      	lsrmi	r3, r3, #1
 800bed2:	089b      	lsrpl	r3, r3, #2
 800bed4:	2001      	movmi	r0, #1
 800bed6:	6013      	strmi	r3, [r2, #0]
 800bed8:	bf5c      	itt	pl
 800beda:	6013      	strpl	r3, [r2, #0]
 800bedc:	2002      	movpl	r0, #2
 800bede:	4770      	bx	lr
 800bee0:	b299      	uxth	r1, r3
 800bee2:	b909      	cbnz	r1, 800bee8 <__lo0bits+0x2a>
 800bee4:	0c1b      	lsrs	r3, r3, #16
 800bee6:	2010      	movs	r0, #16
 800bee8:	b2d9      	uxtb	r1, r3
 800beea:	b909      	cbnz	r1, 800bef0 <__lo0bits+0x32>
 800beec:	3008      	adds	r0, #8
 800beee:	0a1b      	lsrs	r3, r3, #8
 800bef0:	0719      	lsls	r1, r3, #28
 800bef2:	bf04      	itt	eq
 800bef4:	091b      	lsreq	r3, r3, #4
 800bef6:	3004      	addeq	r0, #4
 800bef8:	0799      	lsls	r1, r3, #30
 800befa:	bf04      	itt	eq
 800befc:	089b      	lsreq	r3, r3, #2
 800befe:	3002      	addeq	r0, #2
 800bf00:	07d9      	lsls	r1, r3, #31
 800bf02:	d403      	bmi.n	800bf0c <__lo0bits+0x4e>
 800bf04:	085b      	lsrs	r3, r3, #1
 800bf06:	f100 0001 	add.w	r0, r0, #1
 800bf0a:	d003      	beq.n	800bf14 <__lo0bits+0x56>
 800bf0c:	6013      	str	r3, [r2, #0]
 800bf0e:	4770      	bx	lr
 800bf10:	2000      	movs	r0, #0
 800bf12:	4770      	bx	lr
 800bf14:	2020      	movs	r0, #32
 800bf16:	4770      	bx	lr

0800bf18 <__i2b>:
 800bf18:	b510      	push	{r4, lr}
 800bf1a:	460c      	mov	r4, r1
 800bf1c:	2101      	movs	r1, #1
 800bf1e:	f7ff ff07 	bl	800bd30 <_Balloc>
 800bf22:	4602      	mov	r2, r0
 800bf24:	b928      	cbnz	r0, 800bf32 <__i2b+0x1a>
 800bf26:	4b05      	ldr	r3, [pc, #20]	@ (800bf3c <__i2b+0x24>)
 800bf28:	4805      	ldr	r0, [pc, #20]	@ (800bf40 <__i2b+0x28>)
 800bf2a:	f240 1145 	movw	r1, #325	@ 0x145
 800bf2e:	f000 fd03 	bl	800c938 <__assert_func>
 800bf32:	2301      	movs	r3, #1
 800bf34:	6144      	str	r4, [r0, #20]
 800bf36:	6103      	str	r3, [r0, #16]
 800bf38:	bd10      	pop	{r4, pc}
 800bf3a:	bf00      	nop
 800bf3c:	0800d49c 	.word	0x0800d49c
 800bf40:	0800d4ad 	.word	0x0800d4ad

0800bf44 <__multiply>:
 800bf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf48:	4614      	mov	r4, r2
 800bf4a:	690a      	ldr	r2, [r1, #16]
 800bf4c:	6923      	ldr	r3, [r4, #16]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	bfa8      	it	ge
 800bf52:	4623      	movge	r3, r4
 800bf54:	460f      	mov	r7, r1
 800bf56:	bfa4      	itt	ge
 800bf58:	460c      	movge	r4, r1
 800bf5a:	461f      	movge	r7, r3
 800bf5c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bf60:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bf64:	68a3      	ldr	r3, [r4, #8]
 800bf66:	6861      	ldr	r1, [r4, #4]
 800bf68:	eb0a 0609 	add.w	r6, sl, r9
 800bf6c:	42b3      	cmp	r3, r6
 800bf6e:	b085      	sub	sp, #20
 800bf70:	bfb8      	it	lt
 800bf72:	3101      	addlt	r1, #1
 800bf74:	f7ff fedc 	bl	800bd30 <_Balloc>
 800bf78:	b930      	cbnz	r0, 800bf88 <__multiply+0x44>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	4b44      	ldr	r3, [pc, #272]	@ (800c090 <__multiply+0x14c>)
 800bf7e:	4845      	ldr	r0, [pc, #276]	@ (800c094 <__multiply+0x150>)
 800bf80:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bf84:	f000 fcd8 	bl	800c938 <__assert_func>
 800bf88:	f100 0514 	add.w	r5, r0, #20
 800bf8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bf90:	462b      	mov	r3, r5
 800bf92:	2200      	movs	r2, #0
 800bf94:	4543      	cmp	r3, r8
 800bf96:	d321      	bcc.n	800bfdc <__multiply+0x98>
 800bf98:	f107 0114 	add.w	r1, r7, #20
 800bf9c:	f104 0214 	add.w	r2, r4, #20
 800bfa0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bfa4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bfa8:	9302      	str	r3, [sp, #8]
 800bfaa:	1b13      	subs	r3, r2, r4
 800bfac:	3b15      	subs	r3, #21
 800bfae:	f023 0303 	bic.w	r3, r3, #3
 800bfb2:	3304      	adds	r3, #4
 800bfb4:	f104 0715 	add.w	r7, r4, #21
 800bfb8:	42ba      	cmp	r2, r7
 800bfba:	bf38      	it	cc
 800bfbc:	2304      	movcc	r3, #4
 800bfbe:	9301      	str	r3, [sp, #4]
 800bfc0:	9b02      	ldr	r3, [sp, #8]
 800bfc2:	9103      	str	r1, [sp, #12]
 800bfc4:	428b      	cmp	r3, r1
 800bfc6:	d80c      	bhi.n	800bfe2 <__multiply+0x9e>
 800bfc8:	2e00      	cmp	r6, #0
 800bfca:	dd03      	ble.n	800bfd4 <__multiply+0x90>
 800bfcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d05b      	beq.n	800c08c <__multiply+0x148>
 800bfd4:	6106      	str	r6, [r0, #16]
 800bfd6:	b005      	add	sp, #20
 800bfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfdc:	f843 2b04 	str.w	r2, [r3], #4
 800bfe0:	e7d8      	b.n	800bf94 <__multiply+0x50>
 800bfe2:	f8b1 a000 	ldrh.w	sl, [r1]
 800bfe6:	f1ba 0f00 	cmp.w	sl, #0
 800bfea:	d024      	beq.n	800c036 <__multiply+0xf2>
 800bfec:	f104 0e14 	add.w	lr, r4, #20
 800bff0:	46a9      	mov	r9, r5
 800bff2:	f04f 0c00 	mov.w	ip, #0
 800bff6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bffa:	f8d9 3000 	ldr.w	r3, [r9]
 800bffe:	fa1f fb87 	uxth.w	fp, r7
 800c002:	b29b      	uxth	r3, r3
 800c004:	fb0a 330b 	mla	r3, sl, fp, r3
 800c008:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c00c:	f8d9 7000 	ldr.w	r7, [r9]
 800c010:	4463      	add	r3, ip
 800c012:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c016:	fb0a c70b 	mla	r7, sl, fp, ip
 800c01a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c01e:	b29b      	uxth	r3, r3
 800c020:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c024:	4572      	cmp	r2, lr
 800c026:	f849 3b04 	str.w	r3, [r9], #4
 800c02a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c02e:	d8e2      	bhi.n	800bff6 <__multiply+0xb2>
 800c030:	9b01      	ldr	r3, [sp, #4]
 800c032:	f845 c003 	str.w	ip, [r5, r3]
 800c036:	9b03      	ldr	r3, [sp, #12]
 800c038:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c03c:	3104      	adds	r1, #4
 800c03e:	f1b9 0f00 	cmp.w	r9, #0
 800c042:	d021      	beq.n	800c088 <__multiply+0x144>
 800c044:	682b      	ldr	r3, [r5, #0]
 800c046:	f104 0c14 	add.w	ip, r4, #20
 800c04a:	46ae      	mov	lr, r5
 800c04c:	f04f 0a00 	mov.w	sl, #0
 800c050:	f8bc b000 	ldrh.w	fp, [ip]
 800c054:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c058:	fb09 770b 	mla	r7, r9, fp, r7
 800c05c:	4457      	add	r7, sl
 800c05e:	b29b      	uxth	r3, r3
 800c060:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c064:	f84e 3b04 	str.w	r3, [lr], #4
 800c068:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c06c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c070:	f8be 3000 	ldrh.w	r3, [lr]
 800c074:	fb09 330a 	mla	r3, r9, sl, r3
 800c078:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c07c:	4562      	cmp	r2, ip
 800c07e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c082:	d8e5      	bhi.n	800c050 <__multiply+0x10c>
 800c084:	9f01      	ldr	r7, [sp, #4]
 800c086:	51eb      	str	r3, [r5, r7]
 800c088:	3504      	adds	r5, #4
 800c08a:	e799      	b.n	800bfc0 <__multiply+0x7c>
 800c08c:	3e01      	subs	r6, #1
 800c08e:	e79b      	b.n	800bfc8 <__multiply+0x84>
 800c090:	0800d49c 	.word	0x0800d49c
 800c094:	0800d4ad 	.word	0x0800d4ad

0800c098 <__pow5mult>:
 800c098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c09c:	4615      	mov	r5, r2
 800c09e:	f012 0203 	ands.w	r2, r2, #3
 800c0a2:	4607      	mov	r7, r0
 800c0a4:	460e      	mov	r6, r1
 800c0a6:	d007      	beq.n	800c0b8 <__pow5mult+0x20>
 800c0a8:	4c25      	ldr	r4, [pc, #148]	@ (800c140 <__pow5mult+0xa8>)
 800c0aa:	3a01      	subs	r2, #1
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c0b2:	f7ff fe9f 	bl	800bdf4 <__multadd>
 800c0b6:	4606      	mov	r6, r0
 800c0b8:	10ad      	asrs	r5, r5, #2
 800c0ba:	d03d      	beq.n	800c138 <__pow5mult+0xa0>
 800c0bc:	69fc      	ldr	r4, [r7, #28]
 800c0be:	b97c      	cbnz	r4, 800c0e0 <__pow5mult+0x48>
 800c0c0:	2010      	movs	r0, #16
 800c0c2:	f7ff fd7f 	bl	800bbc4 <malloc>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	61f8      	str	r0, [r7, #28]
 800c0ca:	b928      	cbnz	r0, 800c0d8 <__pow5mult+0x40>
 800c0cc:	4b1d      	ldr	r3, [pc, #116]	@ (800c144 <__pow5mult+0xac>)
 800c0ce:	481e      	ldr	r0, [pc, #120]	@ (800c148 <__pow5mult+0xb0>)
 800c0d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c0d4:	f000 fc30 	bl	800c938 <__assert_func>
 800c0d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c0dc:	6004      	str	r4, [r0, #0]
 800c0de:	60c4      	str	r4, [r0, #12]
 800c0e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c0e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c0e8:	b94c      	cbnz	r4, 800c0fe <__pow5mult+0x66>
 800c0ea:	f240 2171 	movw	r1, #625	@ 0x271
 800c0ee:	4638      	mov	r0, r7
 800c0f0:	f7ff ff12 	bl	800bf18 <__i2b>
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	6003      	str	r3, [r0, #0]
 800c0fe:	f04f 0900 	mov.w	r9, #0
 800c102:	07eb      	lsls	r3, r5, #31
 800c104:	d50a      	bpl.n	800c11c <__pow5mult+0x84>
 800c106:	4631      	mov	r1, r6
 800c108:	4622      	mov	r2, r4
 800c10a:	4638      	mov	r0, r7
 800c10c:	f7ff ff1a 	bl	800bf44 <__multiply>
 800c110:	4631      	mov	r1, r6
 800c112:	4680      	mov	r8, r0
 800c114:	4638      	mov	r0, r7
 800c116:	f7ff fe4b 	bl	800bdb0 <_Bfree>
 800c11a:	4646      	mov	r6, r8
 800c11c:	106d      	asrs	r5, r5, #1
 800c11e:	d00b      	beq.n	800c138 <__pow5mult+0xa0>
 800c120:	6820      	ldr	r0, [r4, #0]
 800c122:	b938      	cbnz	r0, 800c134 <__pow5mult+0x9c>
 800c124:	4622      	mov	r2, r4
 800c126:	4621      	mov	r1, r4
 800c128:	4638      	mov	r0, r7
 800c12a:	f7ff ff0b 	bl	800bf44 <__multiply>
 800c12e:	6020      	str	r0, [r4, #0]
 800c130:	f8c0 9000 	str.w	r9, [r0]
 800c134:	4604      	mov	r4, r0
 800c136:	e7e4      	b.n	800c102 <__pow5mult+0x6a>
 800c138:	4630      	mov	r0, r6
 800c13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c13e:	bf00      	nop
 800c140:	0800d508 	.word	0x0800d508
 800c144:	0800d42d 	.word	0x0800d42d
 800c148:	0800d4ad 	.word	0x0800d4ad

0800c14c <__lshift>:
 800c14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c150:	460c      	mov	r4, r1
 800c152:	6849      	ldr	r1, [r1, #4]
 800c154:	6923      	ldr	r3, [r4, #16]
 800c156:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c15a:	68a3      	ldr	r3, [r4, #8]
 800c15c:	4607      	mov	r7, r0
 800c15e:	4691      	mov	r9, r2
 800c160:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c164:	f108 0601 	add.w	r6, r8, #1
 800c168:	42b3      	cmp	r3, r6
 800c16a:	db0b      	blt.n	800c184 <__lshift+0x38>
 800c16c:	4638      	mov	r0, r7
 800c16e:	f7ff fddf 	bl	800bd30 <_Balloc>
 800c172:	4605      	mov	r5, r0
 800c174:	b948      	cbnz	r0, 800c18a <__lshift+0x3e>
 800c176:	4602      	mov	r2, r0
 800c178:	4b28      	ldr	r3, [pc, #160]	@ (800c21c <__lshift+0xd0>)
 800c17a:	4829      	ldr	r0, [pc, #164]	@ (800c220 <__lshift+0xd4>)
 800c17c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c180:	f000 fbda 	bl	800c938 <__assert_func>
 800c184:	3101      	adds	r1, #1
 800c186:	005b      	lsls	r3, r3, #1
 800c188:	e7ee      	b.n	800c168 <__lshift+0x1c>
 800c18a:	2300      	movs	r3, #0
 800c18c:	f100 0114 	add.w	r1, r0, #20
 800c190:	f100 0210 	add.w	r2, r0, #16
 800c194:	4618      	mov	r0, r3
 800c196:	4553      	cmp	r3, sl
 800c198:	db33      	blt.n	800c202 <__lshift+0xb6>
 800c19a:	6920      	ldr	r0, [r4, #16]
 800c19c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c1a0:	f104 0314 	add.w	r3, r4, #20
 800c1a4:	f019 091f 	ands.w	r9, r9, #31
 800c1a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c1ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c1b0:	d02b      	beq.n	800c20a <__lshift+0xbe>
 800c1b2:	f1c9 0e20 	rsb	lr, r9, #32
 800c1b6:	468a      	mov	sl, r1
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	6818      	ldr	r0, [r3, #0]
 800c1bc:	fa00 f009 	lsl.w	r0, r0, r9
 800c1c0:	4310      	orrs	r0, r2
 800c1c2:	f84a 0b04 	str.w	r0, [sl], #4
 800c1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1ca:	459c      	cmp	ip, r3
 800c1cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c1d0:	d8f3      	bhi.n	800c1ba <__lshift+0x6e>
 800c1d2:	ebac 0304 	sub.w	r3, ip, r4
 800c1d6:	3b15      	subs	r3, #21
 800c1d8:	f023 0303 	bic.w	r3, r3, #3
 800c1dc:	3304      	adds	r3, #4
 800c1de:	f104 0015 	add.w	r0, r4, #21
 800c1e2:	4584      	cmp	ip, r0
 800c1e4:	bf38      	it	cc
 800c1e6:	2304      	movcc	r3, #4
 800c1e8:	50ca      	str	r2, [r1, r3]
 800c1ea:	b10a      	cbz	r2, 800c1f0 <__lshift+0xa4>
 800c1ec:	f108 0602 	add.w	r6, r8, #2
 800c1f0:	3e01      	subs	r6, #1
 800c1f2:	4638      	mov	r0, r7
 800c1f4:	612e      	str	r6, [r5, #16]
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	f7ff fdda 	bl	800bdb0 <_Bfree>
 800c1fc:	4628      	mov	r0, r5
 800c1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c202:	f842 0f04 	str.w	r0, [r2, #4]!
 800c206:	3301      	adds	r3, #1
 800c208:	e7c5      	b.n	800c196 <__lshift+0x4a>
 800c20a:	3904      	subs	r1, #4
 800c20c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c210:	f841 2f04 	str.w	r2, [r1, #4]!
 800c214:	459c      	cmp	ip, r3
 800c216:	d8f9      	bhi.n	800c20c <__lshift+0xc0>
 800c218:	e7ea      	b.n	800c1f0 <__lshift+0xa4>
 800c21a:	bf00      	nop
 800c21c:	0800d49c 	.word	0x0800d49c
 800c220:	0800d4ad 	.word	0x0800d4ad

0800c224 <__mcmp>:
 800c224:	690a      	ldr	r2, [r1, #16]
 800c226:	4603      	mov	r3, r0
 800c228:	6900      	ldr	r0, [r0, #16]
 800c22a:	1a80      	subs	r0, r0, r2
 800c22c:	b530      	push	{r4, r5, lr}
 800c22e:	d10e      	bne.n	800c24e <__mcmp+0x2a>
 800c230:	3314      	adds	r3, #20
 800c232:	3114      	adds	r1, #20
 800c234:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c238:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c23c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c240:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c244:	4295      	cmp	r5, r2
 800c246:	d003      	beq.n	800c250 <__mcmp+0x2c>
 800c248:	d205      	bcs.n	800c256 <__mcmp+0x32>
 800c24a:	f04f 30ff 	mov.w	r0, #4294967295
 800c24e:	bd30      	pop	{r4, r5, pc}
 800c250:	42a3      	cmp	r3, r4
 800c252:	d3f3      	bcc.n	800c23c <__mcmp+0x18>
 800c254:	e7fb      	b.n	800c24e <__mcmp+0x2a>
 800c256:	2001      	movs	r0, #1
 800c258:	e7f9      	b.n	800c24e <__mcmp+0x2a>
	...

0800c25c <__mdiff>:
 800c25c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c260:	4689      	mov	r9, r1
 800c262:	4606      	mov	r6, r0
 800c264:	4611      	mov	r1, r2
 800c266:	4648      	mov	r0, r9
 800c268:	4614      	mov	r4, r2
 800c26a:	f7ff ffdb 	bl	800c224 <__mcmp>
 800c26e:	1e05      	subs	r5, r0, #0
 800c270:	d112      	bne.n	800c298 <__mdiff+0x3c>
 800c272:	4629      	mov	r1, r5
 800c274:	4630      	mov	r0, r6
 800c276:	f7ff fd5b 	bl	800bd30 <_Balloc>
 800c27a:	4602      	mov	r2, r0
 800c27c:	b928      	cbnz	r0, 800c28a <__mdiff+0x2e>
 800c27e:	4b3f      	ldr	r3, [pc, #252]	@ (800c37c <__mdiff+0x120>)
 800c280:	f240 2137 	movw	r1, #567	@ 0x237
 800c284:	483e      	ldr	r0, [pc, #248]	@ (800c380 <__mdiff+0x124>)
 800c286:	f000 fb57 	bl	800c938 <__assert_func>
 800c28a:	2301      	movs	r3, #1
 800c28c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c290:	4610      	mov	r0, r2
 800c292:	b003      	add	sp, #12
 800c294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c298:	bfbc      	itt	lt
 800c29a:	464b      	movlt	r3, r9
 800c29c:	46a1      	movlt	r9, r4
 800c29e:	4630      	mov	r0, r6
 800c2a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c2a4:	bfba      	itte	lt
 800c2a6:	461c      	movlt	r4, r3
 800c2a8:	2501      	movlt	r5, #1
 800c2aa:	2500      	movge	r5, #0
 800c2ac:	f7ff fd40 	bl	800bd30 <_Balloc>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	b918      	cbnz	r0, 800c2bc <__mdiff+0x60>
 800c2b4:	4b31      	ldr	r3, [pc, #196]	@ (800c37c <__mdiff+0x120>)
 800c2b6:	f240 2145 	movw	r1, #581	@ 0x245
 800c2ba:	e7e3      	b.n	800c284 <__mdiff+0x28>
 800c2bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c2c0:	6926      	ldr	r6, [r4, #16]
 800c2c2:	60c5      	str	r5, [r0, #12]
 800c2c4:	f109 0310 	add.w	r3, r9, #16
 800c2c8:	f109 0514 	add.w	r5, r9, #20
 800c2cc:	f104 0e14 	add.w	lr, r4, #20
 800c2d0:	f100 0b14 	add.w	fp, r0, #20
 800c2d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c2d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c2dc:	9301      	str	r3, [sp, #4]
 800c2de:	46d9      	mov	r9, fp
 800c2e0:	f04f 0c00 	mov.w	ip, #0
 800c2e4:	9b01      	ldr	r3, [sp, #4]
 800c2e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c2ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c2ee:	9301      	str	r3, [sp, #4]
 800c2f0:	fa1f f38a 	uxth.w	r3, sl
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	b283      	uxth	r3, r0
 800c2f8:	1acb      	subs	r3, r1, r3
 800c2fa:	0c00      	lsrs	r0, r0, #16
 800c2fc:	4463      	add	r3, ip
 800c2fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c302:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c306:	b29b      	uxth	r3, r3
 800c308:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c30c:	4576      	cmp	r6, lr
 800c30e:	f849 3b04 	str.w	r3, [r9], #4
 800c312:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c316:	d8e5      	bhi.n	800c2e4 <__mdiff+0x88>
 800c318:	1b33      	subs	r3, r6, r4
 800c31a:	3b15      	subs	r3, #21
 800c31c:	f023 0303 	bic.w	r3, r3, #3
 800c320:	3415      	adds	r4, #21
 800c322:	3304      	adds	r3, #4
 800c324:	42a6      	cmp	r6, r4
 800c326:	bf38      	it	cc
 800c328:	2304      	movcc	r3, #4
 800c32a:	441d      	add	r5, r3
 800c32c:	445b      	add	r3, fp
 800c32e:	461e      	mov	r6, r3
 800c330:	462c      	mov	r4, r5
 800c332:	4544      	cmp	r4, r8
 800c334:	d30e      	bcc.n	800c354 <__mdiff+0xf8>
 800c336:	f108 0103 	add.w	r1, r8, #3
 800c33a:	1b49      	subs	r1, r1, r5
 800c33c:	f021 0103 	bic.w	r1, r1, #3
 800c340:	3d03      	subs	r5, #3
 800c342:	45a8      	cmp	r8, r5
 800c344:	bf38      	it	cc
 800c346:	2100      	movcc	r1, #0
 800c348:	440b      	add	r3, r1
 800c34a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c34e:	b191      	cbz	r1, 800c376 <__mdiff+0x11a>
 800c350:	6117      	str	r7, [r2, #16]
 800c352:	e79d      	b.n	800c290 <__mdiff+0x34>
 800c354:	f854 1b04 	ldr.w	r1, [r4], #4
 800c358:	46e6      	mov	lr, ip
 800c35a:	0c08      	lsrs	r0, r1, #16
 800c35c:	fa1c fc81 	uxtah	ip, ip, r1
 800c360:	4471      	add	r1, lr
 800c362:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c366:	b289      	uxth	r1, r1
 800c368:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c36c:	f846 1b04 	str.w	r1, [r6], #4
 800c370:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c374:	e7dd      	b.n	800c332 <__mdiff+0xd6>
 800c376:	3f01      	subs	r7, #1
 800c378:	e7e7      	b.n	800c34a <__mdiff+0xee>
 800c37a:	bf00      	nop
 800c37c:	0800d49c 	.word	0x0800d49c
 800c380:	0800d4ad 	.word	0x0800d4ad

0800c384 <__d2b>:
 800c384:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c388:	460f      	mov	r7, r1
 800c38a:	2101      	movs	r1, #1
 800c38c:	ec59 8b10 	vmov	r8, r9, d0
 800c390:	4616      	mov	r6, r2
 800c392:	f7ff fccd 	bl	800bd30 <_Balloc>
 800c396:	4604      	mov	r4, r0
 800c398:	b930      	cbnz	r0, 800c3a8 <__d2b+0x24>
 800c39a:	4602      	mov	r2, r0
 800c39c:	4b23      	ldr	r3, [pc, #140]	@ (800c42c <__d2b+0xa8>)
 800c39e:	4824      	ldr	r0, [pc, #144]	@ (800c430 <__d2b+0xac>)
 800c3a0:	f240 310f 	movw	r1, #783	@ 0x30f
 800c3a4:	f000 fac8 	bl	800c938 <__assert_func>
 800c3a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c3ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3b0:	b10d      	cbz	r5, 800c3b6 <__d2b+0x32>
 800c3b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c3b6:	9301      	str	r3, [sp, #4]
 800c3b8:	f1b8 0300 	subs.w	r3, r8, #0
 800c3bc:	d023      	beq.n	800c406 <__d2b+0x82>
 800c3be:	4668      	mov	r0, sp
 800c3c0:	9300      	str	r3, [sp, #0]
 800c3c2:	f7ff fd7c 	bl	800bebe <__lo0bits>
 800c3c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c3ca:	b1d0      	cbz	r0, 800c402 <__d2b+0x7e>
 800c3cc:	f1c0 0320 	rsb	r3, r0, #32
 800c3d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3d4:	430b      	orrs	r3, r1
 800c3d6:	40c2      	lsrs	r2, r0
 800c3d8:	6163      	str	r3, [r4, #20]
 800c3da:	9201      	str	r2, [sp, #4]
 800c3dc:	9b01      	ldr	r3, [sp, #4]
 800c3de:	61a3      	str	r3, [r4, #24]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	bf0c      	ite	eq
 800c3e4:	2201      	moveq	r2, #1
 800c3e6:	2202      	movne	r2, #2
 800c3e8:	6122      	str	r2, [r4, #16]
 800c3ea:	b1a5      	cbz	r5, 800c416 <__d2b+0x92>
 800c3ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c3f0:	4405      	add	r5, r0
 800c3f2:	603d      	str	r5, [r7, #0]
 800c3f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c3f8:	6030      	str	r0, [r6, #0]
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	b003      	add	sp, #12
 800c3fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c402:	6161      	str	r1, [r4, #20]
 800c404:	e7ea      	b.n	800c3dc <__d2b+0x58>
 800c406:	a801      	add	r0, sp, #4
 800c408:	f7ff fd59 	bl	800bebe <__lo0bits>
 800c40c:	9b01      	ldr	r3, [sp, #4]
 800c40e:	6163      	str	r3, [r4, #20]
 800c410:	3020      	adds	r0, #32
 800c412:	2201      	movs	r2, #1
 800c414:	e7e8      	b.n	800c3e8 <__d2b+0x64>
 800c416:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c41a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c41e:	6038      	str	r0, [r7, #0]
 800c420:	6918      	ldr	r0, [r3, #16]
 800c422:	f7ff fd2d 	bl	800be80 <__hi0bits>
 800c426:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c42a:	e7e5      	b.n	800c3f8 <__d2b+0x74>
 800c42c:	0800d49c 	.word	0x0800d49c
 800c430:	0800d4ad 	.word	0x0800d4ad

0800c434 <__sfputc_r>:
 800c434:	6893      	ldr	r3, [r2, #8]
 800c436:	3b01      	subs	r3, #1
 800c438:	2b00      	cmp	r3, #0
 800c43a:	b410      	push	{r4}
 800c43c:	6093      	str	r3, [r2, #8]
 800c43e:	da08      	bge.n	800c452 <__sfputc_r+0x1e>
 800c440:	6994      	ldr	r4, [r2, #24]
 800c442:	42a3      	cmp	r3, r4
 800c444:	db01      	blt.n	800c44a <__sfputc_r+0x16>
 800c446:	290a      	cmp	r1, #10
 800c448:	d103      	bne.n	800c452 <__sfputc_r+0x1e>
 800c44a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c44e:	f7fe bba8 	b.w	800aba2 <__swbuf_r>
 800c452:	6813      	ldr	r3, [r2, #0]
 800c454:	1c58      	adds	r0, r3, #1
 800c456:	6010      	str	r0, [r2, #0]
 800c458:	7019      	strb	r1, [r3, #0]
 800c45a:	4608      	mov	r0, r1
 800c45c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c460:	4770      	bx	lr

0800c462 <__sfputs_r>:
 800c462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c464:	4606      	mov	r6, r0
 800c466:	460f      	mov	r7, r1
 800c468:	4614      	mov	r4, r2
 800c46a:	18d5      	adds	r5, r2, r3
 800c46c:	42ac      	cmp	r4, r5
 800c46e:	d101      	bne.n	800c474 <__sfputs_r+0x12>
 800c470:	2000      	movs	r0, #0
 800c472:	e007      	b.n	800c484 <__sfputs_r+0x22>
 800c474:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c478:	463a      	mov	r2, r7
 800c47a:	4630      	mov	r0, r6
 800c47c:	f7ff ffda 	bl	800c434 <__sfputc_r>
 800c480:	1c43      	adds	r3, r0, #1
 800c482:	d1f3      	bne.n	800c46c <__sfputs_r+0xa>
 800c484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c488 <_vfiprintf_r>:
 800c488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c48c:	460d      	mov	r5, r1
 800c48e:	b09d      	sub	sp, #116	@ 0x74
 800c490:	4614      	mov	r4, r2
 800c492:	4698      	mov	r8, r3
 800c494:	4606      	mov	r6, r0
 800c496:	b118      	cbz	r0, 800c4a0 <_vfiprintf_r+0x18>
 800c498:	6a03      	ldr	r3, [r0, #32]
 800c49a:	b90b      	cbnz	r3, 800c4a0 <_vfiprintf_r+0x18>
 800c49c:	f7fe fa98 	bl	800a9d0 <__sinit>
 800c4a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4a2:	07d9      	lsls	r1, r3, #31
 800c4a4:	d405      	bmi.n	800c4b2 <_vfiprintf_r+0x2a>
 800c4a6:	89ab      	ldrh	r3, [r5, #12]
 800c4a8:	059a      	lsls	r2, r3, #22
 800c4aa:	d402      	bmi.n	800c4b2 <_vfiprintf_r+0x2a>
 800c4ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4ae:	f7fe fce0 	bl	800ae72 <__retarget_lock_acquire_recursive>
 800c4b2:	89ab      	ldrh	r3, [r5, #12]
 800c4b4:	071b      	lsls	r3, r3, #28
 800c4b6:	d501      	bpl.n	800c4bc <_vfiprintf_r+0x34>
 800c4b8:	692b      	ldr	r3, [r5, #16]
 800c4ba:	b99b      	cbnz	r3, 800c4e4 <_vfiprintf_r+0x5c>
 800c4bc:	4629      	mov	r1, r5
 800c4be:	4630      	mov	r0, r6
 800c4c0:	f7fe fbae 	bl	800ac20 <__swsetup_r>
 800c4c4:	b170      	cbz	r0, 800c4e4 <_vfiprintf_r+0x5c>
 800c4c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4c8:	07dc      	lsls	r4, r3, #31
 800c4ca:	d504      	bpl.n	800c4d6 <_vfiprintf_r+0x4e>
 800c4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d0:	b01d      	add	sp, #116	@ 0x74
 800c4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4d6:	89ab      	ldrh	r3, [r5, #12]
 800c4d8:	0598      	lsls	r0, r3, #22
 800c4da:	d4f7      	bmi.n	800c4cc <_vfiprintf_r+0x44>
 800c4dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4de:	f7fe fcc9 	bl	800ae74 <__retarget_lock_release_recursive>
 800c4e2:	e7f3      	b.n	800c4cc <_vfiprintf_r+0x44>
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4e8:	2320      	movs	r3, #32
 800c4ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c4ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4f2:	2330      	movs	r3, #48	@ 0x30
 800c4f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c6a4 <_vfiprintf_r+0x21c>
 800c4f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c4fc:	f04f 0901 	mov.w	r9, #1
 800c500:	4623      	mov	r3, r4
 800c502:	469a      	mov	sl, r3
 800c504:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c508:	b10a      	cbz	r2, 800c50e <_vfiprintf_r+0x86>
 800c50a:	2a25      	cmp	r2, #37	@ 0x25
 800c50c:	d1f9      	bne.n	800c502 <_vfiprintf_r+0x7a>
 800c50e:	ebba 0b04 	subs.w	fp, sl, r4
 800c512:	d00b      	beq.n	800c52c <_vfiprintf_r+0xa4>
 800c514:	465b      	mov	r3, fp
 800c516:	4622      	mov	r2, r4
 800c518:	4629      	mov	r1, r5
 800c51a:	4630      	mov	r0, r6
 800c51c:	f7ff ffa1 	bl	800c462 <__sfputs_r>
 800c520:	3001      	adds	r0, #1
 800c522:	f000 80a7 	beq.w	800c674 <_vfiprintf_r+0x1ec>
 800c526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c528:	445a      	add	r2, fp
 800c52a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c52c:	f89a 3000 	ldrb.w	r3, [sl]
 800c530:	2b00      	cmp	r3, #0
 800c532:	f000 809f 	beq.w	800c674 <_vfiprintf_r+0x1ec>
 800c536:	2300      	movs	r3, #0
 800c538:	f04f 32ff 	mov.w	r2, #4294967295
 800c53c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c540:	f10a 0a01 	add.w	sl, sl, #1
 800c544:	9304      	str	r3, [sp, #16]
 800c546:	9307      	str	r3, [sp, #28]
 800c548:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c54c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c54e:	4654      	mov	r4, sl
 800c550:	2205      	movs	r2, #5
 800c552:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c556:	4853      	ldr	r0, [pc, #332]	@ (800c6a4 <_vfiprintf_r+0x21c>)
 800c558:	f7f3 fe3a 	bl	80001d0 <memchr>
 800c55c:	9a04      	ldr	r2, [sp, #16]
 800c55e:	b9d8      	cbnz	r0, 800c598 <_vfiprintf_r+0x110>
 800c560:	06d1      	lsls	r1, r2, #27
 800c562:	bf44      	itt	mi
 800c564:	2320      	movmi	r3, #32
 800c566:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c56a:	0713      	lsls	r3, r2, #28
 800c56c:	bf44      	itt	mi
 800c56e:	232b      	movmi	r3, #43	@ 0x2b
 800c570:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c574:	f89a 3000 	ldrb.w	r3, [sl]
 800c578:	2b2a      	cmp	r3, #42	@ 0x2a
 800c57a:	d015      	beq.n	800c5a8 <_vfiprintf_r+0x120>
 800c57c:	9a07      	ldr	r2, [sp, #28]
 800c57e:	4654      	mov	r4, sl
 800c580:	2000      	movs	r0, #0
 800c582:	f04f 0c0a 	mov.w	ip, #10
 800c586:	4621      	mov	r1, r4
 800c588:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c58c:	3b30      	subs	r3, #48	@ 0x30
 800c58e:	2b09      	cmp	r3, #9
 800c590:	d94b      	bls.n	800c62a <_vfiprintf_r+0x1a2>
 800c592:	b1b0      	cbz	r0, 800c5c2 <_vfiprintf_r+0x13a>
 800c594:	9207      	str	r2, [sp, #28]
 800c596:	e014      	b.n	800c5c2 <_vfiprintf_r+0x13a>
 800c598:	eba0 0308 	sub.w	r3, r0, r8
 800c59c:	fa09 f303 	lsl.w	r3, r9, r3
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	9304      	str	r3, [sp, #16]
 800c5a4:	46a2      	mov	sl, r4
 800c5a6:	e7d2      	b.n	800c54e <_vfiprintf_r+0xc6>
 800c5a8:	9b03      	ldr	r3, [sp, #12]
 800c5aa:	1d19      	adds	r1, r3, #4
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	9103      	str	r1, [sp, #12]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	bfbb      	ittet	lt
 800c5b4:	425b      	neglt	r3, r3
 800c5b6:	f042 0202 	orrlt.w	r2, r2, #2
 800c5ba:	9307      	strge	r3, [sp, #28]
 800c5bc:	9307      	strlt	r3, [sp, #28]
 800c5be:	bfb8      	it	lt
 800c5c0:	9204      	strlt	r2, [sp, #16]
 800c5c2:	7823      	ldrb	r3, [r4, #0]
 800c5c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5c6:	d10a      	bne.n	800c5de <_vfiprintf_r+0x156>
 800c5c8:	7863      	ldrb	r3, [r4, #1]
 800c5ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5cc:	d132      	bne.n	800c634 <_vfiprintf_r+0x1ac>
 800c5ce:	9b03      	ldr	r3, [sp, #12]
 800c5d0:	1d1a      	adds	r2, r3, #4
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	9203      	str	r2, [sp, #12]
 800c5d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c5da:	3402      	adds	r4, #2
 800c5dc:	9305      	str	r3, [sp, #20]
 800c5de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c6b4 <_vfiprintf_r+0x22c>
 800c5e2:	7821      	ldrb	r1, [r4, #0]
 800c5e4:	2203      	movs	r2, #3
 800c5e6:	4650      	mov	r0, sl
 800c5e8:	f7f3 fdf2 	bl	80001d0 <memchr>
 800c5ec:	b138      	cbz	r0, 800c5fe <_vfiprintf_r+0x176>
 800c5ee:	9b04      	ldr	r3, [sp, #16]
 800c5f0:	eba0 000a 	sub.w	r0, r0, sl
 800c5f4:	2240      	movs	r2, #64	@ 0x40
 800c5f6:	4082      	lsls	r2, r0
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	3401      	adds	r4, #1
 800c5fc:	9304      	str	r3, [sp, #16]
 800c5fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c602:	4829      	ldr	r0, [pc, #164]	@ (800c6a8 <_vfiprintf_r+0x220>)
 800c604:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c608:	2206      	movs	r2, #6
 800c60a:	f7f3 fde1 	bl	80001d0 <memchr>
 800c60e:	2800      	cmp	r0, #0
 800c610:	d03f      	beq.n	800c692 <_vfiprintf_r+0x20a>
 800c612:	4b26      	ldr	r3, [pc, #152]	@ (800c6ac <_vfiprintf_r+0x224>)
 800c614:	bb1b      	cbnz	r3, 800c65e <_vfiprintf_r+0x1d6>
 800c616:	9b03      	ldr	r3, [sp, #12]
 800c618:	3307      	adds	r3, #7
 800c61a:	f023 0307 	bic.w	r3, r3, #7
 800c61e:	3308      	adds	r3, #8
 800c620:	9303      	str	r3, [sp, #12]
 800c622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c624:	443b      	add	r3, r7
 800c626:	9309      	str	r3, [sp, #36]	@ 0x24
 800c628:	e76a      	b.n	800c500 <_vfiprintf_r+0x78>
 800c62a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c62e:	460c      	mov	r4, r1
 800c630:	2001      	movs	r0, #1
 800c632:	e7a8      	b.n	800c586 <_vfiprintf_r+0xfe>
 800c634:	2300      	movs	r3, #0
 800c636:	3401      	adds	r4, #1
 800c638:	9305      	str	r3, [sp, #20]
 800c63a:	4619      	mov	r1, r3
 800c63c:	f04f 0c0a 	mov.w	ip, #10
 800c640:	4620      	mov	r0, r4
 800c642:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c646:	3a30      	subs	r2, #48	@ 0x30
 800c648:	2a09      	cmp	r2, #9
 800c64a:	d903      	bls.n	800c654 <_vfiprintf_r+0x1cc>
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d0c6      	beq.n	800c5de <_vfiprintf_r+0x156>
 800c650:	9105      	str	r1, [sp, #20]
 800c652:	e7c4      	b.n	800c5de <_vfiprintf_r+0x156>
 800c654:	fb0c 2101 	mla	r1, ip, r1, r2
 800c658:	4604      	mov	r4, r0
 800c65a:	2301      	movs	r3, #1
 800c65c:	e7f0      	b.n	800c640 <_vfiprintf_r+0x1b8>
 800c65e:	ab03      	add	r3, sp, #12
 800c660:	9300      	str	r3, [sp, #0]
 800c662:	462a      	mov	r2, r5
 800c664:	4b12      	ldr	r3, [pc, #72]	@ (800c6b0 <_vfiprintf_r+0x228>)
 800c666:	a904      	add	r1, sp, #16
 800c668:	4630      	mov	r0, r6
 800c66a:	f7fd fd6d 	bl	800a148 <_printf_float>
 800c66e:	4607      	mov	r7, r0
 800c670:	1c78      	adds	r0, r7, #1
 800c672:	d1d6      	bne.n	800c622 <_vfiprintf_r+0x19a>
 800c674:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c676:	07d9      	lsls	r1, r3, #31
 800c678:	d405      	bmi.n	800c686 <_vfiprintf_r+0x1fe>
 800c67a:	89ab      	ldrh	r3, [r5, #12]
 800c67c:	059a      	lsls	r2, r3, #22
 800c67e:	d402      	bmi.n	800c686 <_vfiprintf_r+0x1fe>
 800c680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c682:	f7fe fbf7 	bl	800ae74 <__retarget_lock_release_recursive>
 800c686:	89ab      	ldrh	r3, [r5, #12]
 800c688:	065b      	lsls	r3, r3, #25
 800c68a:	f53f af1f 	bmi.w	800c4cc <_vfiprintf_r+0x44>
 800c68e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c690:	e71e      	b.n	800c4d0 <_vfiprintf_r+0x48>
 800c692:	ab03      	add	r3, sp, #12
 800c694:	9300      	str	r3, [sp, #0]
 800c696:	462a      	mov	r2, r5
 800c698:	4b05      	ldr	r3, [pc, #20]	@ (800c6b0 <_vfiprintf_r+0x228>)
 800c69a:	a904      	add	r1, sp, #16
 800c69c:	4630      	mov	r0, r6
 800c69e:	f7fd ffeb 	bl	800a678 <_printf_i>
 800c6a2:	e7e4      	b.n	800c66e <_vfiprintf_r+0x1e6>
 800c6a4:	0800d608 	.word	0x0800d608
 800c6a8:	0800d612 	.word	0x0800d612
 800c6ac:	0800a149 	.word	0x0800a149
 800c6b0:	0800c463 	.word	0x0800c463
 800c6b4:	0800d60e 	.word	0x0800d60e

0800c6b8 <__sflush_r>:
 800c6b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c0:	0716      	lsls	r6, r2, #28
 800c6c2:	4605      	mov	r5, r0
 800c6c4:	460c      	mov	r4, r1
 800c6c6:	d454      	bmi.n	800c772 <__sflush_r+0xba>
 800c6c8:	684b      	ldr	r3, [r1, #4]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	dc02      	bgt.n	800c6d4 <__sflush_r+0x1c>
 800c6ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	dd48      	ble.n	800c766 <__sflush_r+0xae>
 800c6d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6d6:	2e00      	cmp	r6, #0
 800c6d8:	d045      	beq.n	800c766 <__sflush_r+0xae>
 800c6da:	2300      	movs	r3, #0
 800c6dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c6e0:	682f      	ldr	r7, [r5, #0]
 800c6e2:	6a21      	ldr	r1, [r4, #32]
 800c6e4:	602b      	str	r3, [r5, #0]
 800c6e6:	d030      	beq.n	800c74a <__sflush_r+0x92>
 800c6e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c6ea:	89a3      	ldrh	r3, [r4, #12]
 800c6ec:	0759      	lsls	r1, r3, #29
 800c6ee:	d505      	bpl.n	800c6fc <__sflush_r+0x44>
 800c6f0:	6863      	ldr	r3, [r4, #4]
 800c6f2:	1ad2      	subs	r2, r2, r3
 800c6f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c6f6:	b10b      	cbz	r3, 800c6fc <__sflush_r+0x44>
 800c6f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c6fa:	1ad2      	subs	r2, r2, r3
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c700:	6a21      	ldr	r1, [r4, #32]
 800c702:	4628      	mov	r0, r5
 800c704:	47b0      	blx	r6
 800c706:	1c43      	adds	r3, r0, #1
 800c708:	89a3      	ldrh	r3, [r4, #12]
 800c70a:	d106      	bne.n	800c71a <__sflush_r+0x62>
 800c70c:	6829      	ldr	r1, [r5, #0]
 800c70e:	291d      	cmp	r1, #29
 800c710:	d82b      	bhi.n	800c76a <__sflush_r+0xb2>
 800c712:	4a2a      	ldr	r2, [pc, #168]	@ (800c7bc <__sflush_r+0x104>)
 800c714:	410a      	asrs	r2, r1
 800c716:	07d6      	lsls	r6, r2, #31
 800c718:	d427      	bmi.n	800c76a <__sflush_r+0xb2>
 800c71a:	2200      	movs	r2, #0
 800c71c:	6062      	str	r2, [r4, #4]
 800c71e:	04d9      	lsls	r1, r3, #19
 800c720:	6922      	ldr	r2, [r4, #16]
 800c722:	6022      	str	r2, [r4, #0]
 800c724:	d504      	bpl.n	800c730 <__sflush_r+0x78>
 800c726:	1c42      	adds	r2, r0, #1
 800c728:	d101      	bne.n	800c72e <__sflush_r+0x76>
 800c72a:	682b      	ldr	r3, [r5, #0]
 800c72c:	b903      	cbnz	r3, 800c730 <__sflush_r+0x78>
 800c72e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c730:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c732:	602f      	str	r7, [r5, #0]
 800c734:	b1b9      	cbz	r1, 800c766 <__sflush_r+0xae>
 800c736:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c73a:	4299      	cmp	r1, r3
 800c73c:	d002      	beq.n	800c744 <__sflush_r+0x8c>
 800c73e:	4628      	mov	r0, r5
 800c740:	f7ff f9f6 	bl	800bb30 <_free_r>
 800c744:	2300      	movs	r3, #0
 800c746:	6363      	str	r3, [r4, #52]	@ 0x34
 800c748:	e00d      	b.n	800c766 <__sflush_r+0xae>
 800c74a:	2301      	movs	r3, #1
 800c74c:	4628      	mov	r0, r5
 800c74e:	47b0      	blx	r6
 800c750:	4602      	mov	r2, r0
 800c752:	1c50      	adds	r0, r2, #1
 800c754:	d1c9      	bne.n	800c6ea <__sflush_r+0x32>
 800c756:	682b      	ldr	r3, [r5, #0]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d0c6      	beq.n	800c6ea <__sflush_r+0x32>
 800c75c:	2b1d      	cmp	r3, #29
 800c75e:	d001      	beq.n	800c764 <__sflush_r+0xac>
 800c760:	2b16      	cmp	r3, #22
 800c762:	d11e      	bne.n	800c7a2 <__sflush_r+0xea>
 800c764:	602f      	str	r7, [r5, #0]
 800c766:	2000      	movs	r0, #0
 800c768:	e022      	b.n	800c7b0 <__sflush_r+0xf8>
 800c76a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c76e:	b21b      	sxth	r3, r3
 800c770:	e01b      	b.n	800c7aa <__sflush_r+0xf2>
 800c772:	690f      	ldr	r7, [r1, #16]
 800c774:	2f00      	cmp	r7, #0
 800c776:	d0f6      	beq.n	800c766 <__sflush_r+0xae>
 800c778:	0793      	lsls	r3, r2, #30
 800c77a:	680e      	ldr	r6, [r1, #0]
 800c77c:	bf08      	it	eq
 800c77e:	694b      	ldreq	r3, [r1, #20]
 800c780:	600f      	str	r7, [r1, #0]
 800c782:	bf18      	it	ne
 800c784:	2300      	movne	r3, #0
 800c786:	eba6 0807 	sub.w	r8, r6, r7
 800c78a:	608b      	str	r3, [r1, #8]
 800c78c:	f1b8 0f00 	cmp.w	r8, #0
 800c790:	dde9      	ble.n	800c766 <__sflush_r+0xae>
 800c792:	6a21      	ldr	r1, [r4, #32]
 800c794:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c796:	4643      	mov	r3, r8
 800c798:	463a      	mov	r2, r7
 800c79a:	4628      	mov	r0, r5
 800c79c:	47b0      	blx	r6
 800c79e:	2800      	cmp	r0, #0
 800c7a0:	dc08      	bgt.n	800c7b4 <__sflush_r+0xfc>
 800c7a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7aa:	81a3      	strh	r3, [r4, #12]
 800c7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b4:	4407      	add	r7, r0
 800c7b6:	eba8 0800 	sub.w	r8, r8, r0
 800c7ba:	e7e7      	b.n	800c78c <__sflush_r+0xd4>
 800c7bc:	dfbffffe 	.word	0xdfbffffe

0800c7c0 <_fflush_r>:
 800c7c0:	b538      	push	{r3, r4, r5, lr}
 800c7c2:	690b      	ldr	r3, [r1, #16]
 800c7c4:	4605      	mov	r5, r0
 800c7c6:	460c      	mov	r4, r1
 800c7c8:	b913      	cbnz	r3, 800c7d0 <_fflush_r+0x10>
 800c7ca:	2500      	movs	r5, #0
 800c7cc:	4628      	mov	r0, r5
 800c7ce:	bd38      	pop	{r3, r4, r5, pc}
 800c7d0:	b118      	cbz	r0, 800c7da <_fflush_r+0x1a>
 800c7d2:	6a03      	ldr	r3, [r0, #32]
 800c7d4:	b90b      	cbnz	r3, 800c7da <_fflush_r+0x1a>
 800c7d6:	f7fe f8fb 	bl	800a9d0 <__sinit>
 800c7da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d0f3      	beq.n	800c7ca <_fflush_r+0xa>
 800c7e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c7e4:	07d0      	lsls	r0, r2, #31
 800c7e6:	d404      	bmi.n	800c7f2 <_fflush_r+0x32>
 800c7e8:	0599      	lsls	r1, r3, #22
 800c7ea:	d402      	bmi.n	800c7f2 <_fflush_r+0x32>
 800c7ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7ee:	f7fe fb40 	bl	800ae72 <__retarget_lock_acquire_recursive>
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	4621      	mov	r1, r4
 800c7f6:	f7ff ff5f 	bl	800c6b8 <__sflush_r>
 800c7fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c7fc:	07da      	lsls	r2, r3, #31
 800c7fe:	4605      	mov	r5, r0
 800c800:	d4e4      	bmi.n	800c7cc <_fflush_r+0xc>
 800c802:	89a3      	ldrh	r3, [r4, #12]
 800c804:	059b      	lsls	r3, r3, #22
 800c806:	d4e1      	bmi.n	800c7cc <_fflush_r+0xc>
 800c808:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c80a:	f7fe fb33 	bl	800ae74 <__retarget_lock_release_recursive>
 800c80e:	e7dd      	b.n	800c7cc <_fflush_r+0xc>

0800c810 <__swhatbuf_r>:
 800c810:	b570      	push	{r4, r5, r6, lr}
 800c812:	460c      	mov	r4, r1
 800c814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c818:	2900      	cmp	r1, #0
 800c81a:	b096      	sub	sp, #88	@ 0x58
 800c81c:	4615      	mov	r5, r2
 800c81e:	461e      	mov	r6, r3
 800c820:	da0d      	bge.n	800c83e <__swhatbuf_r+0x2e>
 800c822:	89a3      	ldrh	r3, [r4, #12]
 800c824:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c828:	f04f 0100 	mov.w	r1, #0
 800c82c:	bf14      	ite	ne
 800c82e:	2340      	movne	r3, #64	@ 0x40
 800c830:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c834:	2000      	movs	r0, #0
 800c836:	6031      	str	r1, [r6, #0]
 800c838:	602b      	str	r3, [r5, #0]
 800c83a:	b016      	add	sp, #88	@ 0x58
 800c83c:	bd70      	pop	{r4, r5, r6, pc}
 800c83e:	466a      	mov	r2, sp
 800c840:	f000 f848 	bl	800c8d4 <_fstat_r>
 800c844:	2800      	cmp	r0, #0
 800c846:	dbec      	blt.n	800c822 <__swhatbuf_r+0x12>
 800c848:	9901      	ldr	r1, [sp, #4]
 800c84a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c84e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c852:	4259      	negs	r1, r3
 800c854:	4159      	adcs	r1, r3
 800c856:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c85a:	e7eb      	b.n	800c834 <__swhatbuf_r+0x24>

0800c85c <__smakebuf_r>:
 800c85c:	898b      	ldrh	r3, [r1, #12]
 800c85e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c860:	079d      	lsls	r5, r3, #30
 800c862:	4606      	mov	r6, r0
 800c864:	460c      	mov	r4, r1
 800c866:	d507      	bpl.n	800c878 <__smakebuf_r+0x1c>
 800c868:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c86c:	6023      	str	r3, [r4, #0]
 800c86e:	6123      	str	r3, [r4, #16]
 800c870:	2301      	movs	r3, #1
 800c872:	6163      	str	r3, [r4, #20]
 800c874:	b003      	add	sp, #12
 800c876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c878:	ab01      	add	r3, sp, #4
 800c87a:	466a      	mov	r2, sp
 800c87c:	f7ff ffc8 	bl	800c810 <__swhatbuf_r>
 800c880:	9f00      	ldr	r7, [sp, #0]
 800c882:	4605      	mov	r5, r0
 800c884:	4639      	mov	r1, r7
 800c886:	4630      	mov	r0, r6
 800c888:	f7ff f9c6 	bl	800bc18 <_malloc_r>
 800c88c:	b948      	cbnz	r0, 800c8a2 <__smakebuf_r+0x46>
 800c88e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c892:	059a      	lsls	r2, r3, #22
 800c894:	d4ee      	bmi.n	800c874 <__smakebuf_r+0x18>
 800c896:	f023 0303 	bic.w	r3, r3, #3
 800c89a:	f043 0302 	orr.w	r3, r3, #2
 800c89e:	81a3      	strh	r3, [r4, #12]
 800c8a0:	e7e2      	b.n	800c868 <__smakebuf_r+0xc>
 800c8a2:	89a3      	ldrh	r3, [r4, #12]
 800c8a4:	6020      	str	r0, [r4, #0]
 800c8a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8aa:	81a3      	strh	r3, [r4, #12]
 800c8ac:	9b01      	ldr	r3, [sp, #4]
 800c8ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c8b2:	b15b      	cbz	r3, 800c8cc <__smakebuf_r+0x70>
 800c8b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8b8:	4630      	mov	r0, r6
 800c8ba:	f000 f81d 	bl	800c8f8 <_isatty_r>
 800c8be:	b128      	cbz	r0, 800c8cc <__smakebuf_r+0x70>
 800c8c0:	89a3      	ldrh	r3, [r4, #12]
 800c8c2:	f023 0303 	bic.w	r3, r3, #3
 800c8c6:	f043 0301 	orr.w	r3, r3, #1
 800c8ca:	81a3      	strh	r3, [r4, #12]
 800c8cc:	89a3      	ldrh	r3, [r4, #12]
 800c8ce:	431d      	orrs	r5, r3
 800c8d0:	81a5      	strh	r5, [r4, #12]
 800c8d2:	e7cf      	b.n	800c874 <__smakebuf_r+0x18>

0800c8d4 <_fstat_r>:
 800c8d4:	b538      	push	{r3, r4, r5, lr}
 800c8d6:	4d07      	ldr	r5, [pc, #28]	@ (800c8f4 <_fstat_r+0x20>)
 800c8d8:	2300      	movs	r3, #0
 800c8da:	4604      	mov	r4, r0
 800c8dc:	4608      	mov	r0, r1
 800c8de:	4611      	mov	r1, r2
 800c8e0:	602b      	str	r3, [r5, #0]
 800c8e2:	f7f5 fd33 	bl	800234c <_fstat>
 800c8e6:	1c43      	adds	r3, r0, #1
 800c8e8:	d102      	bne.n	800c8f0 <_fstat_r+0x1c>
 800c8ea:	682b      	ldr	r3, [r5, #0]
 800c8ec:	b103      	cbz	r3, 800c8f0 <_fstat_r+0x1c>
 800c8ee:	6023      	str	r3, [r4, #0]
 800c8f0:	bd38      	pop	{r3, r4, r5, pc}
 800c8f2:	bf00      	nop
 800c8f4:	20002848 	.word	0x20002848

0800c8f8 <_isatty_r>:
 800c8f8:	b538      	push	{r3, r4, r5, lr}
 800c8fa:	4d06      	ldr	r5, [pc, #24]	@ (800c914 <_isatty_r+0x1c>)
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	4604      	mov	r4, r0
 800c900:	4608      	mov	r0, r1
 800c902:	602b      	str	r3, [r5, #0]
 800c904:	f7f5 fd32 	bl	800236c <_isatty>
 800c908:	1c43      	adds	r3, r0, #1
 800c90a:	d102      	bne.n	800c912 <_isatty_r+0x1a>
 800c90c:	682b      	ldr	r3, [r5, #0]
 800c90e:	b103      	cbz	r3, 800c912 <_isatty_r+0x1a>
 800c910:	6023      	str	r3, [r4, #0]
 800c912:	bd38      	pop	{r3, r4, r5, pc}
 800c914:	20002848 	.word	0x20002848

0800c918 <_sbrk_r>:
 800c918:	b538      	push	{r3, r4, r5, lr}
 800c91a:	4d06      	ldr	r5, [pc, #24]	@ (800c934 <_sbrk_r+0x1c>)
 800c91c:	2300      	movs	r3, #0
 800c91e:	4604      	mov	r4, r0
 800c920:	4608      	mov	r0, r1
 800c922:	602b      	str	r3, [r5, #0]
 800c924:	f7f5 fd3a 	bl	800239c <_sbrk>
 800c928:	1c43      	adds	r3, r0, #1
 800c92a:	d102      	bne.n	800c932 <_sbrk_r+0x1a>
 800c92c:	682b      	ldr	r3, [r5, #0]
 800c92e:	b103      	cbz	r3, 800c932 <_sbrk_r+0x1a>
 800c930:	6023      	str	r3, [r4, #0]
 800c932:	bd38      	pop	{r3, r4, r5, pc}
 800c934:	20002848 	.word	0x20002848

0800c938 <__assert_func>:
 800c938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c93a:	4614      	mov	r4, r2
 800c93c:	461a      	mov	r2, r3
 800c93e:	4b09      	ldr	r3, [pc, #36]	@ (800c964 <__assert_func+0x2c>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4605      	mov	r5, r0
 800c944:	68d8      	ldr	r0, [r3, #12]
 800c946:	b954      	cbnz	r4, 800c95e <__assert_func+0x26>
 800c948:	4b07      	ldr	r3, [pc, #28]	@ (800c968 <__assert_func+0x30>)
 800c94a:	461c      	mov	r4, r3
 800c94c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c950:	9100      	str	r1, [sp, #0]
 800c952:	462b      	mov	r3, r5
 800c954:	4905      	ldr	r1, [pc, #20]	@ (800c96c <__assert_func+0x34>)
 800c956:	f000 f841 	bl	800c9dc <fiprintf>
 800c95a:	f000 f851 	bl	800ca00 <abort>
 800c95e:	4b04      	ldr	r3, [pc, #16]	@ (800c970 <__assert_func+0x38>)
 800c960:	e7f4      	b.n	800c94c <__assert_func+0x14>
 800c962:	bf00      	nop
 800c964:	2000001c 	.word	0x2000001c
 800c968:	0800d65e 	.word	0x0800d65e
 800c96c:	0800d630 	.word	0x0800d630
 800c970:	0800d623 	.word	0x0800d623

0800c974 <_calloc_r>:
 800c974:	b570      	push	{r4, r5, r6, lr}
 800c976:	fba1 5402 	umull	r5, r4, r1, r2
 800c97a:	b93c      	cbnz	r4, 800c98c <_calloc_r+0x18>
 800c97c:	4629      	mov	r1, r5
 800c97e:	f7ff f94b 	bl	800bc18 <_malloc_r>
 800c982:	4606      	mov	r6, r0
 800c984:	b928      	cbnz	r0, 800c992 <_calloc_r+0x1e>
 800c986:	2600      	movs	r6, #0
 800c988:	4630      	mov	r0, r6
 800c98a:	bd70      	pop	{r4, r5, r6, pc}
 800c98c:	220c      	movs	r2, #12
 800c98e:	6002      	str	r2, [r0, #0]
 800c990:	e7f9      	b.n	800c986 <_calloc_r+0x12>
 800c992:	462a      	mov	r2, r5
 800c994:	4621      	mov	r1, r4
 800c996:	f7fe f999 	bl	800accc <memset>
 800c99a:	e7f5      	b.n	800c988 <_calloc_r+0x14>

0800c99c <__ascii_mbtowc>:
 800c99c:	b082      	sub	sp, #8
 800c99e:	b901      	cbnz	r1, 800c9a2 <__ascii_mbtowc+0x6>
 800c9a0:	a901      	add	r1, sp, #4
 800c9a2:	b142      	cbz	r2, 800c9b6 <__ascii_mbtowc+0x1a>
 800c9a4:	b14b      	cbz	r3, 800c9ba <__ascii_mbtowc+0x1e>
 800c9a6:	7813      	ldrb	r3, [r2, #0]
 800c9a8:	600b      	str	r3, [r1, #0]
 800c9aa:	7812      	ldrb	r2, [r2, #0]
 800c9ac:	1e10      	subs	r0, r2, #0
 800c9ae:	bf18      	it	ne
 800c9b0:	2001      	movne	r0, #1
 800c9b2:	b002      	add	sp, #8
 800c9b4:	4770      	bx	lr
 800c9b6:	4610      	mov	r0, r2
 800c9b8:	e7fb      	b.n	800c9b2 <__ascii_mbtowc+0x16>
 800c9ba:	f06f 0001 	mvn.w	r0, #1
 800c9be:	e7f8      	b.n	800c9b2 <__ascii_mbtowc+0x16>

0800c9c0 <__ascii_wctomb>:
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	4608      	mov	r0, r1
 800c9c4:	b141      	cbz	r1, 800c9d8 <__ascii_wctomb+0x18>
 800c9c6:	2aff      	cmp	r2, #255	@ 0xff
 800c9c8:	d904      	bls.n	800c9d4 <__ascii_wctomb+0x14>
 800c9ca:	228a      	movs	r2, #138	@ 0x8a
 800c9cc:	601a      	str	r2, [r3, #0]
 800c9ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d2:	4770      	bx	lr
 800c9d4:	700a      	strb	r2, [r1, #0]
 800c9d6:	2001      	movs	r0, #1
 800c9d8:	4770      	bx	lr
	...

0800c9dc <fiprintf>:
 800c9dc:	b40e      	push	{r1, r2, r3}
 800c9de:	b503      	push	{r0, r1, lr}
 800c9e0:	4601      	mov	r1, r0
 800c9e2:	ab03      	add	r3, sp, #12
 800c9e4:	4805      	ldr	r0, [pc, #20]	@ (800c9fc <fiprintf+0x20>)
 800c9e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9ea:	6800      	ldr	r0, [r0, #0]
 800c9ec:	9301      	str	r3, [sp, #4]
 800c9ee:	f7ff fd4b 	bl	800c488 <_vfiprintf_r>
 800c9f2:	b002      	add	sp, #8
 800c9f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9f8:	b003      	add	sp, #12
 800c9fa:	4770      	bx	lr
 800c9fc:	2000001c 	.word	0x2000001c

0800ca00 <abort>:
 800ca00:	b508      	push	{r3, lr}
 800ca02:	2006      	movs	r0, #6
 800ca04:	f000 f82c 	bl	800ca60 <raise>
 800ca08:	2001      	movs	r0, #1
 800ca0a:	f7f5 fc6b 	bl	80022e4 <_exit>

0800ca0e <_raise_r>:
 800ca0e:	291f      	cmp	r1, #31
 800ca10:	b538      	push	{r3, r4, r5, lr}
 800ca12:	4605      	mov	r5, r0
 800ca14:	460c      	mov	r4, r1
 800ca16:	d904      	bls.n	800ca22 <_raise_r+0x14>
 800ca18:	2316      	movs	r3, #22
 800ca1a:	6003      	str	r3, [r0, #0]
 800ca1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca20:	bd38      	pop	{r3, r4, r5, pc}
 800ca22:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ca24:	b112      	cbz	r2, 800ca2c <_raise_r+0x1e>
 800ca26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca2a:	b94b      	cbnz	r3, 800ca40 <_raise_r+0x32>
 800ca2c:	4628      	mov	r0, r5
 800ca2e:	f000 f831 	bl	800ca94 <_getpid_r>
 800ca32:	4622      	mov	r2, r4
 800ca34:	4601      	mov	r1, r0
 800ca36:	4628      	mov	r0, r5
 800ca38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca3c:	f000 b818 	b.w	800ca70 <_kill_r>
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d00a      	beq.n	800ca5a <_raise_r+0x4c>
 800ca44:	1c59      	adds	r1, r3, #1
 800ca46:	d103      	bne.n	800ca50 <_raise_r+0x42>
 800ca48:	2316      	movs	r3, #22
 800ca4a:	6003      	str	r3, [r0, #0]
 800ca4c:	2001      	movs	r0, #1
 800ca4e:	e7e7      	b.n	800ca20 <_raise_r+0x12>
 800ca50:	2100      	movs	r1, #0
 800ca52:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ca56:	4620      	mov	r0, r4
 800ca58:	4798      	blx	r3
 800ca5a:	2000      	movs	r0, #0
 800ca5c:	e7e0      	b.n	800ca20 <_raise_r+0x12>
	...

0800ca60 <raise>:
 800ca60:	4b02      	ldr	r3, [pc, #8]	@ (800ca6c <raise+0xc>)
 800ca62:	4601      	mov	r1, r0
 800ca64:	6818      	ldr	r0, [r3, #0]
 800ca66:	f7ff bfd2 	b.w	800ca0e <_raise_r>
 800ca6a:	bf00      	nop
 800ca6c:	2000001c 	.word	0x2000001c

0800ca70 <_kill_r>:
 800ca70:	b538      	push	{r3, r4, r5, lr}
 800ca72:	4d07      	ldr	r5, [pc, #28]	@ (800ca90 <_kill_r+0x20>)
 800ca74:	2300      	movs	r3, #0
 800ca76:	4604      	mov	r4, r0
 800ca78:	4608      	mov	r0, r1
 800ca7a:	4611      	mov	r1, r2
 800ca7c:	602b      	str	r3, [r5, #0]
 800ca7e:	f7f5 fc21 	bl	80022c4 <_kill>
 800ca82:	1c43      	adds	r3, r0, #1
 800ca84:	d102      	bne.n	800ca8c <_kill_r+0x1c>
 800ca86:	682b      	ldr	r3, [r5, #0]
 800ca88:	b103      	cbz	r3, 800ca8c <_kill_r+0x1c>
 800ca8a:	6023      	str	r3, [r4, #0]
 800ca8c:	bd38      	pop	{r3, r4, r5, pc}
 800ca8e:	bf00      	nop
 800ca90:	20002848 	.word	0x20002848

0800ca94 <_getpid_r>:
 800ca94:	f7f5 bc0e 	b.w	80022b4 <_getpid>

0800ca98 <_init>:
 800ca98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9a:	bf00      	nop
 800ca9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca9e:	bc08      	pop	{r3}
 800caa0:	469e      	mov	lr, r3
 800caa2:	4770      	bx	lr

0800caa4 <_fini>:
 800caa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caa6:	bf00      	nop
 800caa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caaa:	bc08      	pop	{r3}
 800caac:	469e      	mov	lr, r3
 800caae:	4770      	bx	lr
