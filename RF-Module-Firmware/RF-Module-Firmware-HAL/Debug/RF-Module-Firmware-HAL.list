
RF-Module-Firmware-HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000910  0800f158  0800f158  0001f158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa68  0800fa68  00020390  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa68  0800fa68  0001fa68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa70  0800fa70  00020390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa70  0800fa70  0001fa70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa74  0800fa74  0001fa74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000390  20000000  0800fa78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025a0  20000390  0800fe08  00020390  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002930  0800fe08  00022930  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020390  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023095  00000000  00000000  00020403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005280  00000000  00000000  00043498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d60  00000000  00000000  00048718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016a6  00000000  00000000  0004a478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025d83  00000000  00000000  0004bb1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000238ab  00000000  00000000  000718a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc02a  00000000  00000000  0009514c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008b0c  00000000  00000000  00171178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  00179c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000390 	.word	0x20000390
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f13c 	.word	0x0800f13c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000394 	.word	0x20000394
 80001cc:	0800f13c 	.word	0x0800f13c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_ldivmod>:
 8000ba8:	b97b      	cbnz	r3, 8000bca <__aeabi_ldivmod+0x22>
 8000baa:	b972      	cbnz	r2, 8000bca <__aeabi_ldivmod+0x22>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bfbe      	ittt	lt
 8000bb0:	2000      	movlt	r0, #0
 8000bb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bb6:	e006      	blt.n	8000bc6 <__aeabi_ldivmod+0x1e>
 8000bb8:	bf08      	it	eq
 8000bba:	2800      	cmpeq	r0, #0
 8000bbc:	bf1c      	itt	ne
 8000bbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc6:	f000 b9bb 	b.w	8000f40 <__aeabi_idiv0>
 8000bca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	db09      	blt.n	8000bea <__aeabi_ldivmod+0x42>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db1a      	blt.n	8000c10 <__aeabi_ldivmod+0x68>
 8000bda:	f000 f84d 	bl	8000c78 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4770      	bx	lr
 8000bea:	4240      	negs	r0, r0
 8000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db1b      	blt.n	8000c2c <__aeabi_ldivmod+0x84>
 8000bf4:	f000 f840 	bl	8000c78 <__udivmoddi4>
 8000bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c00:	b004      	add	sp, #16
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	4252      	negs	r2, r2
 8000c0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f82f 	bl	8000c78 <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4240      	negs	r0, r0
 8000c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2a:	4770      	bx	lr
 8000c2c:	4252      	negs	r2, r2
 8000c2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c32:	f000 f821 	bl	8000c78 <__udivmoddi4>
 8000c36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3e:	b004      	add	sp, #16
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <AES_Encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void AES_Encrypt(unsigned char *Data, unsigned char *Key)
{
 8000f44:	b5b0      	push	{r4, r5, r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char Row,Collum;
	unsigned char Round = 0x00;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	773b      	strb	r3, [r7, #28]
	unsigned char Round_Key[16];

	//Copy input to State arry
	for(Collum = 0; Collum < 4; Collum++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	777b      	strb	r3, [r7, #29]
 8000f56:	e01b      	b.n	8000f90 <AES_Encrypt+0x4c>
	{
		for(Row = 0; Row < 4; Row++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	77bb      	strb	r3, [r7, #30]
 8000f5c:	e012      	b.n	8000f84 <AES_Encrypt+0x40>
		{
			State[Row][Collum] = Data[Row + (4*Collum)];
 8000f5e:	7fba      	ldrb	r2, [r7, #30]
 8000f60:	7f7b      	ldrb	r3, [r7, #29]
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	461a      	mov	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	1899      	adds	r1, r3, r2
 8000f6c:	7fba      	ldrb	r2, [r7, #30]
 8000f6e:	7f7b      	ldrb	r3, [r7, #29]
 8000f70:	7808      	ldrb	r0, [r1, #0]
 8000f72:	4961      	ldr	r1, [pc, #388]	; (80010f8 <AES_Encrypt+0x1b4>)
 8000f74:	0092      	lsls	r2, r2, #2
 8000f76:	440a      	add	r2, r1
 8000f78:	4413      	add	r3, r2
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000f7e:	7fbb      	ldrb	r3, [r7, #30]
 8000f80:	3301      	adds	r3, #1
 8000f82:	77bb      	strb	r3, [r7, #30]
 8000f84:	7fbb      	ldrb	r3, [r7, #30]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d9e9      	bls.n	8000f5e <AES_Encrypt+0x1a>
	for(Collum = 0; Collum < 4; Collum++)
 8000f8a:	7f7b      	ldrb	r3, [r7, #29]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	777b      	strb	r3, [r7, #29]
 8000f90:	7f7b      	ldrb	r3, [r7, #29]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d9e0      	bls.n	8000f58 <AES_Encrypt+0x14>
		}
	}

	//Copy key to round key
	for(i = 0; i < 16; i++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	77fb      	strb	r3, [r7, #31]
 8000f9a:	e00b      	b.n	8000fb4 <AES_Encrypt+0x70>
	{
		Round_Key[i] = Key[i];
 8000f9c:	7ffb      	ldrb	r3, [r7, #31]
 8000f9e:	683a      	ldr	r2, [r7, #0]
 8000fa0:	441a      	add	r2, r3
 8000fa2:	7ffb      	ldrb	r3, [r7, #31]
 8000fa4:	7812      	ldrb	r2, [r2, #0]
 8000fa6:	3320      	adds	r3, #32
 8000fa8:	443b      	add	r3, r7
 8000faa:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 16; i++)
 8000fae:	7ffb      	ldrb	r3, [r7, #31]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	77fb      	strb	r3, [r7, #31]
 8000fb4:	7ffb      	ldrb	r3, [r7, #31]
 8000fb6:	2b0f      	cmp	r3, #15
 8000fb8:	d9f0      	bls.n	8000f9c <AES_Encrypt+0x58>
	}

	//Add round key
	AES_Add_Round_Key(Round_Key);
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f89c 	bl	80010fc <AES_Add_Round_Key>

	//Preform 9 full rounds
	for(Round = 1; Round < 10; Round++)
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	773b      	strb	r3, [r7, #28]
 8000fc8:	e038      	b.n	800103c <AES_Encrypt+0xf8>
	{
		//Preform Byte substitution with S table
		for(Collum = 0; Collum < 4; Collum++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	777b      	strb	r3, [r7, #29]
 8000fce:	e01f      	b.n	8001010 <AES_Encrypt+0xcc>
		{
			for(Row = 0; Row < 4; Row++)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	77bb      	strb	r3, [r7, #30]
 8000fd4:	e016      	b.n	8001004 <AES_Encrypt+0xc0>
			{
				State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 8000fd6:	7fba      	ldrb	r2, [r7, #30]
 8000fd8:	7f7b      	ldrb	r3, [r7, #29]
 8000fda:	4947      	ldr	r1, [pc, #284]	; (80010f8 <AES_Encrypt+0x1b4>)
 8000fdc:	0092      	lsls	r2, r2, #2
 8000fde:	440a      	add	r2, r1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	7fbd      	ldrb	r5, [r7, #30]
 8000fe6:	7f7c      	ldrb	r4, [r7, #29]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f8bf 	bl	800116c <AES_Sub_Byte>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4a41      	ldr	r2, [pc, #260]	; (80010f8 <AES_Encrypt+0x1b4>)
 8000ff4:	00ab      	lsls	r3, r5, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4423      	add	r3, r4
 8000ffa:	460a      	mov	r2, r1
 8000ffc:	701a      	strb	r2, [r3, #0]
			for(Row = 0; Row < 4; Row++)
 8000ffe:	7fbb      	ldrb	r3, [r7, #30]
 8001000:	3301      	adds	r3, #1
 8001002:	77bb      	strb	r3, [r7, #30]
 8001004:	7fbb      	ldrb	r3, [r7, #30]
 8001006:	2b03      	cmp	r3, #3
 8001008:	d9e5      	bls.n	8000fd6 <AES_Encrypt+0x92>
		for(Collum = 0; Collum < 4; Collum++)
 800100a:	7f7b      	ldrb	r3, [r7, #29]
 800100c:	3301      	adds	r3, #1
 800100e:	777b      	strb	r3, [r7, #29]
 8001010:	7f7b      	ldrb	r3, [r7, #29]
 8001012:	2b03      	cmp	r3, #3
 8001014:	d9dc      	bls.n	8000fd0 <AES_Encrypt+0x8c>
			}
		}

		//Preform Row Shift
		AES_Shift_Rows();
 8001016:	f000 f8c7 	bl	80011a8 <AES_Shift_Rows>

		//Mix Collums
		AES_Mix_Collums();
 800101a:	f000 f909 	bl	8001230 <AES_Mix_Collums>

		//Calculate new round key
		AES_Calculate_Round_Key(Round,Round_Key);
 800101e:	f107 020c 	add.w	r2, r7, #12
 8001022:	7f3b      	ldrb	r3, [r7, #28]
 8001024:	4611      	mov	r1, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f998 	bl	800135c <AES_Calculate_Round_Key>

		//Add round key
		AES_Add_Round_Key(Round_Key);
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	4618      	mov	r0, r3
 8001032:	f000 f863 	bl	80010fc <AES_Add_Round_Key>
	for(Round = 1; Round < 10; Round++)
 8001036:	7f3b      	ldrb	r3, [r7, #28]
 8001038:	3301      	adds	r3, #1
 800103a:	773b      	strb	r3, [r7, #28]
 800103c:	7f3b      	ldrb	r3, [r7, #28]
 800103e:	2b09      	cmp	r3, #9
 8001040:	d9c3      	bls.n	8000fca <AES_Encrypt+0x86>
	}

	//Last round whitout mix collums
	//Preform Byte substitution with S table
	for(Collum = 0; Collum < 4; Collum++)
 8001042:	2300      	movs	r3, #0
 8001044:	777b      	strb	r3, [r7, #29]
 8001046:	e01f      	b.n	8001088 <AES_Encrypt+0x144>
	{
		for(Row = 0; Row < 4; Row++)
 8001048:	2300      	movs	r3, #0
 800104a:	77bb      	strb	r3, [r7, #30]
 800104c:	e016      	b.n	800107c <AES_Encrypt+0x138>
		{
			State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 800104e:	7fba      	ldrb	r2, [r7, #30]
 8001050:	7f7b      	ldrb	r3, [r7, #29]
 8001052:	4929      	ldr	r1, [pc, #164]	; (80010f8 <AES_Encrypt+0x1b4>)
 8001054:	0092      	lsls	r2, r2, #2
 8001056:	440a      	add	r2, r1
 8001058:	4413      	add	r3, r2
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	7fbd      	ldrb	r5, [r7, #30]
 800105e:	7f7c      	ldrb	r4, [r7, #29]
 8001060:	4618      	mov	r0, r3
 8001062:	f000 f883 	bl	800116c <AES_Sub_Byte>
 8001066:	4603      	mov	r3, r0
 8001068:	4619      	mov	r1, r3
 800106a:	4a23      	ldr	r2, [pc, #140]	; (80010f8 <AES_Encrypt+0x1b4>)
 800106c:	00ab      	lsls	r3, r5, #2
 800106e:	4413      	add	r3, r2
 8001070:	4423      	add	r3, r4
 8001072:	460a      	mov	r2, r1
 8001074:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8001076:	7fbb      	ldrb	r3, [r7, #30]
 8001078:	3301      	adds	r3, #1
 800107a:	77bb      	strb	r3, [r7, #30]
 800107c:	7fbb      	ldrb	r3, [r7, #30]
 800107e:	2b03      	cmp	r3, #3
 8001080:	d9e5      	bls.n	800104e <AES_Encrypt+0x10a>
	for(Collum = 0; Collum < 4; Collum++)
 8001082:	7f7b      	ldrb	r3, [r7, #29]
 8001084:	3301      	adds	r3, #1
 8001086:	777b      	strb	r3, [r7, #29]
 8001088:	7f7b      	ldrb	r3, [r7, #29]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d9dc      	bls.n	8001048 <AES_Encrypt+0x104>
		}
	}

	//Shift rows
	AES_Shift_Rows();
 800108e:	f000 f88b 	bl	80011a8 <AES_Shift_Rows>

	//Calculate new round key
	AES_Calculate_Round_Key(Round,Round_Key);
 8001092:	f107 020c 	add.w	r2, r7, #12
 8001096:	7f3b      	ldrb	r3, [r7, #28]
 8001098:	4611      	mov	r1, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f95e 	bl	800135c <AES_Calculate_Round_Key>

	//Add round Key
	AES_Add_Round_Key(Round_Key);
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 f829 	bl	80010fc <AES_Add_Round_Key>

	//Copy the State into the data array
	for(Collum = 0; Collum < 4; Collum++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	777b      	strb	r3, [r7, #29]
 80010ae:	e01a      	b.n	80010e6 <AES_Encrypt+0x1a2>
	{
		for(Row = 0; Row < 4; Row++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	77bb      	strb	r3, [r7, #30]
 80010b4:	e011      	b.n	80010da <AES_Encrypt+0x196>
		{
			Data[Row + (4*Collum)] = State[Row][Collum];
 80010b6:	7fb9      	ldrb	r1, [r7, #30]
 80010b8:	7f7a      	ldrb	r2, [r7, #29]
 80010ba:	7fb8      	ldrb	r0, [r7, #30]
 80010bc:	7f7b      	ldrb	r3, [r7, #29]
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4403      	add	r3, r0
 80010c2:	4618      	mov	r0, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4403      	add	r3, r0
 80010c8:	480b      	ldr	r0, [pc, #44]	; (80010f8 <AES_Encrypt+0x1b4>)
 80010ca:	0089      	lsls	r1, r1, #2
 80010cc:	4401      	add	r1, r0
 80010ce:	440a      	add	r2, r1
 80010d0:	7812      	ldrb	r2, [r2, #0]
 80010d2:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 80010d4:	7fbb      	ldrb	r3, [r7, #30]
 80010d6:	3301      	adds	r3, #1
 80010d8:	77bb      	strb	r3, [r7, #30]
 80010da:	7fbb      	ldrb	r3, [r7, #30]
 80010dc:	2b03      	cmp	r3, #3
 80010de:	d9ea      	bls.n	80010b6 <AES_Encrypt+0x172>
	for(Collum = 0; Collum < 4; Collum++)
 80010e0:	7f7b      	ldrb	r3, [r7, #29]
 80010e2:	3301      	adds	r3, #1
 80010e4:	777b      	strb	r3, [r7, #29]
 80010e6:	7f7b      	ldrb	r3, [r7, #29]
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d9e1      	bls.n	80010b0 <AES_Encrypt+0x16c>
		}
	}

}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3720      	adds	r7, #32
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bdb0      	pop	{r4, r5, r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200003ac 	.word	0x200003ac

080010fc <AES_Add_Round_Key>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Add_Round_Key(unsigned char *Round_Key)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	unsigned char Row,Collum;

	for(Collum = 0; Collum < 4; Collum++)
 8001104:	2300      	movs	r3, #0
 8001106:	73bb      	strb	r3, [r7, #14]
 8001108:	e024      	b.n	8001154 <AES_Add_Round_Key+0x58>
	{
		for(Row = 0; Row < 4; Row++)
 800110a:	2300      	movs	r3, #0
 800110c:	73fb      	strb	r3, [r7, #15]
 800110e:	e01b      	b.n	8001148 <AES_Add_Round_Key+0x4c>
		{
			State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
 8001110:	7bfa      	ldrb	r2, [r7, #15]
 8001112:	7bbb      	ldrb	r3, [r7, #14]
 8001114:	4914      	ldr	r1, [pc, #80]	; (8001168 <AES_Add_Round_Key+0x6c>)
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	440a      	add	r2, r1
 800111a:	4413      	add	r3, r2
 800111c:	7818      	ldrb	r0, [r3, #0]
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	7bbb      	ldrb	r3, [r7, #14]
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	461a      	mov	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4413      	add	r3, r2
 800112c:	7819      	ldrb	r1, [r3, #0]
 800112e:	7bfa      	ldrb	r2, [r7, #15]
 8001130:	7bbb      	ldrb	r3, [r7, #14]
 8001132:	4041      	eors	r1, r0
 8001134:	b2c8      	uxtb	r0, r1
 8001136:	490c      	ldr	r1, [pc, #48]	; (8001168 <AES_Add_Round_Key+0x6c>)
 8001138:	0092      	lsls	r2, r2, #2
 800113a:	440a      	add	r2, r1
 800113c:	4413      	add	r3, r2
 800113e:	4602      	mov	r2, r0
 8001140:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	3301      	adds	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	2b03      	cmp	r3, #3
 800114c:	d9e0      	bls.n	8001110 <AES_Add_Round_Key+0x14>
	for(Collum = 0; Collum < 4; Collum++)
 800114e:	7bbb      	ldrb	r3, [r7, #14]
 8001150:	3301      	adds	r3, #1
 8001152:	73bb      	strb	r3, [r7, #14]
 8001154:	7bbb      	ldrb	r3, [r7, #14]
 8001156:	2b03      	cmp	r3, #3
 8001158:	d9d7      	bls.n	800110a <AES_Add_Round_Key+0xe>
		}
	}
}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	200003ac 	.word	0x200003ac

0800116c <AES_Sub_Byte>:
*
* Return      : The return is the found byte in the S_Table
*****************************************************************************************
*/
unsigned char AES_Sub_Byte(unsigned char Byte)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
	unsigned char S_Row,S_Collum;
	unsigned char S_Byte;

	//Split byte up in Row and Collum
	S_Row = ((Byte >> 4) & 0x0F);
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	73fb      	strb	r3, [r7, #15]
	S_Collum = (Byte & 0x0F);
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	73bb      	strb	r3, [r7, #14]

	//Find the correct byte in the S_Table
	S_Byte = S_Table[S_Row][S_Collum];
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	7bbb      	ldrb	r3, [r7, #14]
 8001188:	4906      	ldr	r1, [pc, #24]	; (80011a4 <AES_Sub_Byte+0x38>)
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	440a      	add	r2, r1
 800118e:	4413      	add	r3, r2
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	737b      	strb	r3, [r7, #13]

	return S_Byte;
 8001194:	7b7b      	ldrb	r3, [r7, #13]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000000 	.word	0x20000000

080011a8 <AES_Shift_Rows>:
*****************************************************************************************
* Description : Function that preforms the shift row operation described in the AES standard
*****************************************************************************************
*/
void AES_Shift_Rows()
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0

	//Row 0 doesn't change

	//Shift Row 1 one left
	//Store firt byte in buffer
	Buffer = State[1][0];
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <AES_Shift_Rows+0x84>)
 80011b0:	791b      	ldrb	r3, [r3, #4]
 80011b2:	71fb      	strb	r3, [r7, #7]
	//Shift all bytes
	State[1][0] = State[1][1];
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <AES_Shift_Rows+0x84>)
 80011b6:	795a      	ldrb	r2, [r3, #5]
 80011b8:	4b1c      	ldr	r3, [pc, #112]	; (800122c <AES_Shift_Rows+0x84>)
 80011ba:	711a      	strb	r2, [r3, #4]
	State[1][1] = State[1][2];
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <AES_Shift_Rows+0x84>)
 80011be:	799a      	ldrb	r2, [r3, #6]
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <AES_Shift_Rows+0x84>)
 80011c2:	715a      	strb	r2, [r3, #5]
	State[1][2] = State[1][3];
 80011c4:	4b19      	ldr	r3, [pc, #100]	; (800122c <AES_Shift_Rows+0x84>)
 80011c6:	79da      	ldrb	r2, [r3, #7]
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <AES_Shift_Rows+0x84>)
 80011ca:	719a      	strb	r2, [r3, #6]
	State[1][3] = Buffer;
 80011cc:	4a17      	ldr	r2, [pc, #92]	; (800122c <AES_Shift_Rows+0x84>)
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	71d3      	strb	r3, [r2, #7]

	//Shift row 2 two left
	Buffer = State[2][0];
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <AES_Shift_Rows+0x84>)
 80011d4:	7a1b      	ldrb	r3, [r3, #8]
 80011d6:	71fb      	strb	r3, [r7, #7]
	State[2][0] = State[2][2];
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <AES_Shift_Rows+0x84>)
 80011da:	7a9a      	ldrb	r2, [r3, #10]
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <AES_Shift_Rows+0x84>)
 80011de:	721a      	strb	r2, [r3, #8]
	State[2][2] = Buffer;
 80011e0:	4a12      	ldr	r2, [pc, #72]	; (800122c <AES_Shift_Rows+0x84>)
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	7293      	strb	r3, [r2, #10]
	Buffer = State[2][1];
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <AES_Shift_Rows+0x84>)
 80011e8:	7a5b      	ldrb	r3, [r3, #9]
 80011ea:	71fb      	strb	r3, [r7, #7]
	State[2][1] = State[2][3];
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <AES_Shift_Rows+0x84>)
 80011ee:	7ada      	ldrb	r2, [r3, #11]
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <AES_Shift_Rows+0x84>)
 80011f2:	725a      	strb	r2, [r3, #9]
	State[2][3] = Buffer;
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <AES_Shift_Rows+0x84>)
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	72d3      	strb	r3, [r2, #11]

	//Shift row 3 three left
	Buffer = State[3][3];
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <AES_Shift_Rows+0x84>)
 80011fc:	7bdb      	ldrb	r3, [r3, #15]
 80011fe:	71fb      	strb	r3, [r7, #7]
	State[3][3] = State[3][2];
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <AES_Shift_Rows+0x84>)
 8001202:	7b9a      	ldrb	r2, [r3, #14]
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <AES_Shift_Rows+0x84>)
 8001206:	73da      	strb	r2, [r3, #15]
	State[3][2] = State[3][1];
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <AES_Shift_Rows+0x84>)
 800120a:	7b5a      	ldrb	r2, [r3, #13]
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <AES_Shift_Rows+0x84>)
 800120e:	739a      	strb	r2, [r3, #14]
	State[3][1] = State[3][0];
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <AES_Shift_Rows+0x84>)
 8001212:	7b1a      	ldrb	r2, [r3, #12]
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <AES_Shift_Rows+0x84>)
 8001216:	735a      	strb	r2, [r3, #13]
	State[3][0] = Buffer;
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <AES_Shift_Rows+0x84>)
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	7313      	strb	r3, [r2, #12]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	200003ac 	.word	0x200003ac

08001230 <AES_Mix_Collums>:
*****************************************************************************************
* Description : Function that preforms the Mix Collums operation described in the AES standard
*****************************************************************************************
*/
void AES_Mix_Collums()
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
	unsigned char Row,Collum;
	unsigned char a[4], b[4];
	for(Collum = 0; Collum < 4; Collum++)
 8001236:	2300      	movs	r3, #0
 8001238:	73bb      	strb	r3, [r7, #14]
 800123a:	e082      	b.n	8001342 <AES_Mix_Collums+0x112>
	{
		for(Row = 0; Row < 4; Row++)
 800123c:	2300      	movs	r3, #0
 800123e:	73fb      	strb	r3, [r7, #15]
 8001240:	e033      	b.n	80012aa <AES_Mix_Collums+0x7a>
		{
			a[Row] = State[Row][Collum];
 8001242:	7bf9      	ldrb	r1, [r7, #15]
 8001244:	7bba      	ldrb	r2, [r7, #14]
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4843      	ldr	r0, [pc, #268]	; (8001358 <AES_Mix_Collums+0x128>)
 800124a:	0089      	lsls	r1, r1, #2
 800124c:	4401      	add	r1, r0
 800124e:	440a      	add	r2, r1
 8001250:	7812      	ldrb	r2, [r2, #0]
 8001252:	3310      	adds	r3, #16
 8001254:	443b      	add	r3, r7
 8001256:	f803 2c08 	strb.w	r2, [r3, #-8]
			b[Row] = (State[Row][Collum] << 1);
 800125a:	7bfa      	ldrb	r2, [r7, #15]
 800125c:	7bbb      	ldrb	r3, [r7, #14]
 800125e:	493e      	ldr	r1, [pc, #248]	; (8001358 <AES_Mix_Collums+0x128>)
 8001260:	0092      	lsls	r2, r2, #2
 8001262:	440a      	add	r2, r1
 8001264:	4413      	add	r3, r2
 8001266:	781a      	ldrb	r2, [r3, #0]
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	0052      	lsls	r2, r2, #1
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	3310      	adds	r3, #16
 8001270:	443b      	add	r3, r7
 8001272:	f803 2c0c 	strb.w	r2, [r3, #-12]

			if((State[Row][Collum] & 0x80) == 0x80)
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	7bbb      	ldrb	r3, [r7, #14]
 800127a:	4937      	ldr	r1, [pc, #220]	; (8001358 <AES_Mix_Collums+0x128>)
 800127c:	0092      	lsls	r2, r2, #2
 800127e:	440a      	add	r2, r1
 8001280:	4413      	add	r3, r2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b25b      	sxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	da0c      	bge.n	80012a4 <AES_Mix_Collums+0x74>
			{
				b[Row] = b[Row] ^ 0x1B;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	3310      	adds	r3, #16
 800128e:	443b      	add	r3, r7
 8001290:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	f082 021b 	eor.w	r2, r2, #27
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	3310      	adds	r3, #16
 800129e:	443b      	add	r3, r7
 80012a0:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(Row = 0; Row < 4; Row++)
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	3301      	adds	r3, #1
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d9c8      	bls.n	8001242 <AES_Mix_Collums+0x12>
			}
		}
		State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
 80012b0:	793a      	ldrb	r2, [r7, #4]
 80012b2:	7a7b      	ldrb	r3, [r7, #9]
 80012b4:	4053      	eors	r3, r2
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	797b      	ldrb	r3, [r7, #5]
 80012ba:	4053      	eors	r3, r2
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	7abb      	ldrb	r3, [r7, #10]
 80012c0:	4053      	eors	r3, r2
 80012c2:	b2d9      	uxtb	r1, r3
 80012c4:	7afa      	ldrb	r2, [r7, #11]
 80012c6:	7bbb      	ldrb	r3, [r7, #14]
 80012c8:	404a      	eors	r2, r1
 80012ca:	b2d1      	uxtb	r1, r2
 80012cc:	4a22      	ldr	r2, [pc, #136]	; (8001358 <AES_Mix_Collums+0x128>)
 80012ce:	54d1      	strb	r1, [r2, r3]
		State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
 80012d0:	7a3a      	ldrb	r2, [r7, #8]
 80012d2:	797b      	ldrb	r3, [r7, #5]
 80012d4:	4053      	eors	r3, r2
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	7abb      	ldrb	r3, [r7, #10]
 80012da:	4053      	eors	r3, r2
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	79bb      	ldrb	r3, [r7, #6]
 80012e0:	4053      	eors	r3, r2
 80012e2:	b2d9      	uxtb	r1, r3
 80012e4:	7afa      	ldrb	r2, [r7, #11]
 80012e6:	7bbb      	ldrb	r3, [r7, #14]
 80012e8:	404a      	eors	r2, r1
 80012ea:	b2d1      	uxtb	r1, r2
 80012ec:	4a1a      	ldr	r2, [pc, #104]	; (8001358 <AES_Mix_Collums+0x128>)
 80012ee:	4413      	add	r3, r2
 80012f0:	460a      	mov	r2, r1
 80012f2:	711a      	strb	r2, [r3, #4]
		State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
 80012f4:	7a3a      	ldrb	r2, [r7, #8]
 80012f6:	7a7b      	ldrb	r3, [r7, #9]
 80012f8:	4053      	eors	r3, r2
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	79bb      	ldrb	r3, [r7, #6]
 80012fe:	4053      	eors	r3, r2
 8001300:	b2da      	uxtb	r2, r3
 8001302:	7afb      	ldrb	r3, [r7, #11]
 8001304:	4053      	eors	r3, r2
 8001306:	b2d9      	uxtb	r1, r3
 8001308:	79fa      	ldrb	r2, [r7, #7]
 800130a:	7bbb      	ldrb	r3, [r7, #14]
 800130c:	404a      	eors	r2, r1
 800130e:	b2d1      	uxtb	r1, r2
 8001310:	4a11      	ldr	r2, [pc, #68]	; (8001358 <AES_Mix_Collums+0x128>)
 8001312:	4413      	add	r3, r2
 8001314:	460a      	mov	r2, r1
 8001316:	721a      	strb	r2, [r3, #8]
		State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
 8001318:	7a3a      	ldrb	r2, [r7, #8]
 800131a:	793b      	ldrb	r3, [r7, #4]
 800131c:	4053      	eors	r3, r2
 800131e:	b2da      	uxtb	r2, r3
 8001320:	7a7b      	ldrb	r3, [r7, #9]
 8001322:	4053      	eors	r3, r2
 8001324:	b2da      	uxtb	r2, r3
 8001326:	7abb      	ldrb	r3, [r7, #10]
 8001328:	4053      	eors	r3, r2
 800132a:	b2d9      	uxtb	r1, r3
 800132c:	79fa      	ldrb	r2, [r7, #7]
 800132e:	7bbb      	ldrb	r3, [r7, #14]
 8001330:	404a      	eors	r2, r1
 8001332:	b2d1      	uxtb	r1, r2
 8001334:	4a08      	ldr	r2, [pc, #32]	; (8001358 <AES_Mix_Collums+0x128>)
 8001336:	4413      	add	r3, r2
 8001338:	460a      	mov	r2, r1
 800133a:	731a      	strb	r2, [r3, #12]
	for(Collum = 0; Collum < 4; Collum++)
 800133c:	7bbb      	ldrb	r3, [r7, #14]
 800133e:	3301      	adds	r3, #1
 8001340:	73bb      	strb	r3, [r7, #14]
 8001342:	7bbb      	ldrb	r3, [r7, #14]
 8001344:	2b03      	cmp	r3, #3
 8001346:	f67f af79 	bls.w	800123c <AES_Mix_Collums+0xc>
	}
}
 800134a:	bf00      	nop
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	200003ac 	.word	0x200003ac

0800135c <AES_Calculate_Round_Key>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
	unsigned char Buffer;
	unsigned char Rcon;

	//Calculate first Temp
	//Copy laste byte from previous key
	for(i = 0; i < 4; i++)
 8001368:	2300      	movs	r3, #0
 800136a:	75fb      	strb	r3, [r7, #23]
 800136c:	e00c      	b.n	8001388 <AES_Calculate_Round_Key+0x2c>
	{
		Temp[i] = Round_Key[i+12];
 800136e:	7dfb      	ldrb	r3, [r7, #23]
 8001370:	330c      	adds	r3, #12
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	441a      	add	r2, r3
 8001376:	7dfb      	ldrb	r3, [r7, #23]
 8001378:	7812      	ldrb	r2, [r2, #0]
 800137a:	3318      	adds	r3, #24
 800137c:	443b      	add	r3, r7
 800137e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 8001382:	7dfb      	ldrb	r3, [r7, #23]
 8001384:	3301      	adds	r3, #1
 8001386:	75fb      	strb	r3, [r7, #23]
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	2b03      	cmp	r3, #3
 800138c:	d9ef      	bls.n	800136e <AES_Calculate_Round_Key+0x12>
	}

	//Rotate Temp
	Buffer = Temp[0];
 800138e:	7b3b      	ldrb	r3, [r7, #12]
 8001390:	753b      	strb	r3, [r7, #20]
	Temp[0] = Temp[1];
 8001392:	7b7b      	ldrb	r3, [r7, #13]
 8001394:	733b      	strb	r3, [r7, #12]
	Temp[1] = Temp[2];
 8001396:	7bbb      	ldrb	r3, [r7, #14]
 8001398:	737b      	strb	r3, [r7, #13]
	Temp[2] = Temp[3];
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	73bb      	strb	r3, [r7, #14]
	Temp[3] = Buffer;
 800139e:	7d3b      	ldrb	r3, [r7, #20]
 80013a0:	73fb      	strb	r3, [r7, #15]

	//Substitute Temp
	for(i = 0; i < 4; i++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	75fb      	strb	r3, [r7, #23]
 80013a6:	e012      	b.n	80013ce <AES_Calculate_Round_Key+0x72>
	{
		Temp[i] = AES_Sub_Byte(Temp[i]);
 80013a8:	7dfb      	ldrb	r3, [r7, #23]
 80013aa:	3318      	adds	r3, #24
 80013ac:	443b      	add	r3, r7
 80013ae:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80013b2:	7dfc      	ldrb	r4, [r7, #23]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fed9 	bl	800116c <AES_Sub_Byte>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	f104 0318 	add.w	r3, r4, #24
 80013c2:	443b      	add	r3, r7
 80013c4:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 80013c8:	7dfb      	ldrb	r3, [r7, #23]
 80013ca:	3301      	adds	r3, #1
 80013cc:	75fb      	strb	r3, [r7, #23]
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d9e9      	bls.n	80013a8 <AES_Calculate_Round_Key+0x4c>
	}

	//Calculate Rcon
	Rcon = 0x01;
 80013d4:	2301      	movs	r3, #1
 80013d6:	757b      	strb	r3, [r7, #21]
	while(Round != 1)
 80013d8:	e010      	b.n	80013fc <AES_Calculate_Round_Key+0xa0>
	{
		b = Rcon & 0x80;
 80013da:	7d7b      	ldrb	r3, [r7, #21]
 80013dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80013e0:	74fb      	strb	r3, [r7, #19]
		Rcon = Rcon << 1;
 80013e2:	7d7b      	ldrb	r3, [r7, #21]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	757b      	strb	r3, [r7, #21]
		if(b == 0x80)
 80013e8:	7cfb      	ldrb	r3, [r7, #19]
 80013ea:	2b80      	cmp	r3, #128	; 0x80
 80013ec:	d103      	bne.n	80013f6 <AES_Calculate_Round_Key+0x9a>
		{
			Rcon = Rcon ^ 0x1b;
 80013ee:	7d7b      	ldrb	r3, [r7, #21]
 80013f0:	f083 031b 	eor.w	r3, r3, #27
 80013f4:	757b      	strb	r3, [r7, #21]
		}
		Round--;
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	71fb      	strb	r3, [r7, #7]
	while(Round != 1)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d1eb      	bne.n	80013da <AES_Calculate_Round_Key+0x7e>
	}

	//XOR Rcon
	Temp[0] = Temp[0] ^ Rcon;
 8001402:	7b3a      	ldrb	r2, [r7, #12]
 8001404:	7d7b      	ldrb	r3, [r7, #21]
 8001406:	4053      	eors	r3, r2
 8001408:	b2db      	uxtb	r3, r3
 800140a:	733b      	strb	r3, [r7, #12]

	//Calculate new key
	for(i = 0; i < 4; i++)
 800140c:	2300      	movs	r3, #0
 800140e:	75fb      	strb	r3, [r7, #23]
 8001410:	e02f      	b.n	8001472 <AES_Calculate_Round_Key+0x116>
	{
		for(j = 0; j < 4; j++)
 8001412:	2300      	movs	r3, #0
 8001414:	75bb      	strb	r3, [r7, #22]
 8001416:	e026      	b.n	8001466 <AES_Calculate_Round_Key+0x10a>
		{
			Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
 8001418:	7dba      	ldrb	r2, [r7, #22]
 800141a:	7dfb      	ldrb	r3, [r7, #23]
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	461a      	mov	r2, r3
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	4413      	add	r3, r2
 8001426:	7819      	ldrb	r1, [r3, #0]
 8001428:	7dbb      	ldrb	r3, [r7, #22]
 800142a:	3318      	adds	r3, #24
 800142c:	443b      	add	r3, r7
 800142e:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001432:	7db8      	ldrb	r0, [r7, #22]
 8001434:	7dfb      	ldrb	r3, [r7, #23]
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4403      	add	r3, r0
 800143a:	4618      	mov	r0, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	4403      	add	r3, r0
 8001440:	404a      	eors	r2, r1
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	701a      	strb	r2, [r3, #0]
			Temp[j] = Round_Key[j + (4*i)];
 8001446:	7dba      	ldrb	r2, [r7, #22]
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	461a      	mov	r2, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	441a      	add	r2, r3
 8001454:	7dbb      	ldrb	r3, [r7, #22]
 8001456:	7812      	ldrb	r2, [r2, #0]
 8001458:	3318      	adds	r3, #24
 800145a:	443b      	add	r3, r7
 800145c:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(j = 0; j < 4; j++)
 8001460:	7dbb      	ldrb	r3, [r7, #22]
 8001462:	3301      	adds	r3, #1
 8001464:	75bb      	strb	r3, [r7, #22]
 8001466:	7dbb      	ldrb	r3, [r7, #22]
 8001468:	2b03      	cmp	r3, #3
 800146a:	d9d5      	bls.n	8001418 <AES_Calculate_Round_Key+0xbc>
	for(i = 0; i < 4; i++)
 800146c:	7dfb      	ldrb	r3, [r7, #23]
 800146e:	3301      	adds	r3, #1
 8001470:	75fb      	strb	r3, [r7, #23]
 8001472:	7dfb      	ldrb	r3, [r7, #23]
 8001474:	2b03      	cmp	r3, #3
 8001476:	d9cc      	bls.n	8001412 <AES_Calculate_Round_Key+0xb6>
		}
	}
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd90      	pop	{r4, r7, pc}

08001482 <Encrypt_Payload>:
#include "Encrypt_V31.h"
#include "AES-128_V10.h"

void Encrypt_Payload(unsigned char *Data, unsigned char Data_Length, unsigned int Frame_Counter,
                     unsigned char Direction, unsigned char Key[16], unsigned char DevAddr[4])
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b08a      	sub	sp, #40	; 0x28
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	461a      	mov	r2, r3
 800148e:	460b      	mov	r3, r1
 8001490:	72fb      	strb	r3, [r7, #11]
 8001492:	4613      	mov	r3, r2
 8001494:	72bb      	strb	r3, [r7, #10]
	unsigned char i = 0x00;
 8001496:	2300      	movs	r3, #0
 8001498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	unsigned char j;
	unsigned char Number_of_Blocks = 0x00;
 800149c:	2300      	movs	r3, #0
 800149e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	unsigned char Incomplete_Block_Size = 0x00;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	unsigned char Block_A[16];

	//Calculate number of blocks
	Number_of_Blocks = Data_Length / 16;
 80014a8:	7afb      	ldrb	r3, [r7, #11]
 80014aa:	091b      	lsrs	r3, r3, #4
 80014ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Incomplete_Block_Size = Data_Length % 16;
 80014b0:	7afb      	ldrb	r3, [r7, #11]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if(Incomplete_Block_Size != 0)
 80014ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d004      	beq.n	80014cc <Encrypt_Payload+0x4a>
	{
		Number_of_Blocks++;
 80014c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014c6:	3301      	adds	r3, #1
 80014c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	for(i = 1; i <= Number_of_Blocks; i++)
 80014cc:	2301      	movs	r3, #1
 80014ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014d2:	e07e      	b.n	80015d2 <Encrypt_Payload+0x150>
	{
		Block_A[0] = 0x01;
 80014d4:	2301      	movs	r3, #1
 80014d6:	753b      	strb	r3, [r7, #20]
		Block_A[1] = 0x00;
 80014d8:	2300      	movs	r3, #0
 80014da:	757b      	strb	r3, [r7, #21]
		Block_A[2] = 0x00;
 80014dc:	2300      	movs	r3, #0
 80014de:	75bb      	strb	r3, [r7, #22]
		Block_A[3] = 0x00;
 80014e0:	2300      	movs	r3, #0
 80014e2:	75fb      	strb	r3, [r7, #23]
		Block_A[4] = 0x00;
 80014e4:	2300      	movs	r3, #0
 80014e6:	763b      	strb	r3, [r7, #24]

		Block_A[5] = Direction;
 80014e8:	7abb      	ldrb	r3, [r7, #10]
 80014ea:	767b      	strb	r3, [r7, #25]

		Block_A[6] = DevAddr[3];
 80014ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ee:	78db      	ldrb	r3, [r3, #3]
 80014f0:	76bb      	strb	r3, [r7, #26]
		Block_A[7] = DevAddr[2];
 80014f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f4:	789b      	ldrb	r3, [r3, #2]
 80014f6:	76fb      	strb	r3, [r7, #27]
		Block_A[8] = DevAddr[1];
 80014f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014fa:	785b      	ldrb	r3, [r3, #1]
 80014fc:	773b      	strb	r3, [r7, #28]
		Block_A[9] = DevAddr[0];
 80014fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	777b      	strb	r3, [r7, #29]

		Block_A[10] = (Frame_Counter & 0x00FF);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	77bb      	strb	r3, [r7, #30]
		Block_A[11] = ((Frame_Counter >> 8) & 0x00FF);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	b2db      	uxtb	r3, r3
 8001510:	77fb      	strb	r3, [r7, #31]

		Block_A[12] = 0x00; //Frame counter upper Bytes
 8001512:	2300      	movs	r3, #0
 8001514:	f887 3020 	strb.w	r3, [r7, #32]
		Block_A[13] = 0x00;
 8001518:	2300      	movs	r3, #0
 800151a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		Block_A[14] = 0x00;
 800151e:	2300      	movs	r3, #0
 8001520:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		Block_A[15] = i;
 8001524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001528:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		//Calculate S
		AES_Encrypt(Block_A, Key);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fd06 	bl	8000f44 <AES_Encrypt>

		//Check for last block
		if(i != Number_of_Blocks)
 8001538:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800153c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001540:	429a      	cmp	r2, r3
 8001542:	d01c      	beq.n	800157e <Encrypt_Payload+0xfc>
		{
			for(j = 0; j < 16; j++)
 8001544:	2300      	movs	r3, #0
 8001546:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800154a:	e013      	b.n	8001574 <Encrypt_Payload+0xf2>
			{
				*Data = *Data ^ Block_A[j];
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	781a      	ldrb	r2, [r3, #0]
 8001550:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001554:	3328      	adds	r3, #40	; 0x28
 8001556:	443b      	add	r3, r7
 8001558:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800155c:	4053      	eors	r3, r2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	701a      	strb	r2, [r3, #0]
				Data++;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	3301      	adds	r3, #1
 8001568:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < 16; j++)
 800156a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800156e:	3301      	adds	r3, #1
 8001570:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001574:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d9e7      	bls.n	800154c <Encrypt_Payload+0xca>
 800157c:	e024      	b.n	80015c8 <Encrypt_Payload+0x146>
			}
		}
		else
		{
			if(Incomplete_Block_Size == 0)
 800157e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <Encrypt_Payload+0x10a>
			{
				Incomplete_Block_Size = 16;
 8001586:	2310      	movs	r3, #16
 8001588:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			for(j = 0; j < Incomplete_Block_Size; j++)
 800158c:	2300      	movs	r3, #0
 800158e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001592:	e013      	b.n	80015bc <Encrypt_Payload+0x13a>
			{
				*Data = *Data ^ Block_A[j];
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	781a      	ldrb	r2, [r3, #0]
 8001598:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800159c:	3328      	adds	r3, #40	; 0x28
 800159e:	443b      	add	r3, r7
 80015a0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80015a4:	4053      	eors	r3, r2
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	701a      	strb	r2, [r3, #0]
				Data++;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3301      	adds	r3, #1
 80015b0:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < Incomplete_Block_Size; j++)
 80015b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015b6:	3301      	adds	r3, #1
 80015b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015bc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80015c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d3e5      	bcc.n	8001594 <Encrypt_Payload+0x112>
	for(i = 1; i <= Number_of_Blocks; i++)
 80015c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015cc:	3301      	adds	r3, #1
 80015ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80015d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015da:	429a      	cmp	r2, r3
 80015dc:	f67f af7a 	bls.w	80014d4 <Encrypt_Payload+0x52>
			}
		}
	}
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	; 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <Calculate_MIC>:

void Calculate_MIC(unsigned char *Data, unsigned char *Final_MIC, unsigned char Data_Length, unsigned int Frame_Counter,
                   unsigned char Direction, unsigned char NwkSkey[16], unsigned char DevAddr[4])
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b09b      	sub	sp, #108	; 0x6c
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	4613      	mov	r3, r2
 80015fa:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char Block_B[16];
	unsigned char Key_K1[16] = {
 80015fc:	4bba      	ldr	r3, [pc, #744]	; (80018e8 <Calculate_MIC+0x2fc>)
 80015fe:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001602:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001604:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char Key_K2[16] = {
 8001608:	4bb7      	ldr	r3, [pc, #732]	; (80018e8 <Calculate_MIC+0x2fc>)
 800160a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800160e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001610:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	//unsigned char Data_Copy[16];

	unsigned char Old_Data[16] = {
 8001614:	4bb4      	ldr	r3, [pc, #720]	; (80018e8 <Calculate_MIC+0x2fc>)
 8001616:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800161a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800161c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char New_Data[16] = {
 8001620:	4bb1      	ldr	r3, [pc, #708]	; (80018e8 <Calculate_MIC+0x2fc>)
 8001622:	f107 0414 	add.w	r4, r7, #20
 8001626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char Number_of_Blocks = 0x00;
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	unsigned char Incomplete_Block_Size = 0x00;
 8001632:	2300      	movs	r3, #0
 8001634:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	unsigned char Block_Counter = 0x01;
 8001638:	2301      	movs	r3, #1
 800163a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	//Create Block_B
	Block_B[0] = 0x49;
 800163e:	2349      	movs	r3, #73	; 0x49
 8001640:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	Block_B[1] = 0x00;
 8001644:	2300      	movs	r3, #0
 8001646:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	Block_B[2] = 0x00;
 800164a:	2300      	movs	r3, #0
 800164c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	Block_B[3] = 0x00;
 8001650:	2300      	movs	r3, #0
 8001652:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Block_B[4] = 0x00;
 8001656:	2300      	movs	r3, #0
 8001658:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

	Block_B[5] = Direction;
 800165c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8001660:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	Block_B[6] = DevAddr[3];
 8001664:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001668:	78db      	ldrb	r3, [r3, #3]
 800166a:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	Block_B[7] = DevAddr[2];
 800166e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001672:	789b      	ldrb	r3, [r3, #2]
 8001674:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	Block_B[8] = DevAddr[1];
 8001678:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800167c:	785b      	ldrb	r3, [r3, #1]
 800167e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	Block_B[9] = DevAddr[0];
 8001682:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	Block_B[10] = (Frame_Counter & 0x00FF);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	Block_B[11] = ((Frame_Counter >> 8) & 0x00FF);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	0a1b      	lsrs	r3, r3, #8
 8001698:	b2db      	uxtb	r3, r3
 800169a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	Block_B[12] = 0x00; //Frame counter upper bytes
 800169e:	2300      	movs	r3, #0
 80016a0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	Block_B[13] = 0x00;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	Block_B[14] = 0x00;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	Block_B[15] = Data_Length;
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	//Calculate number of Blocks and blocksize of last block
	Number_of_Blocks = Data_Length / 16;
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	Incomplete_Block_Size = Data_Length % 16;
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	f003 030f 	and.w	r3, r3, #15
 80016c4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

	if(Incomplete_Block_Size != 0)
 80016c8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d004      	beq.n	80016da <Calculate_MIC+0xee>
	{
		Number_of_Blocks++;
 80016d0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80016d4:	3301      	adds	r3, #1
 80016d6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	}

	Generate_Keys(Key_K1, Key_K2, NwkSkey);
 80016da:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80016de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 f901 	bl	80018ec <Generate_Keys>

	//Preform Calculation on Block B0

	//Preform AES encryption
	AES_Encrypt(Block_B, NwkSkey);
 80016ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fc27 	bl	8000f44 <AES_Encrypt>

	//Copy Block_B to Old_Data
	for(i = 0; i < 16; i++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80016fc:	e010      	b.n	8001720 <Calculate_MIC+0x134>
	{
		Old_Data[i] = Block_B[i];
 80016fe:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001702:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001706:	3268      	adds	r2, #104	; 0x68
 8001708:	443a      	add	r2, r7
 800170a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800170e:	3368      	adds	r3, #104	; 0x68
 8001710:	443b      	add	r3, r7
 8001712:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(i = 0; i < 16; i++)
 8001716:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800171a:	3301      	adds	r3, #1
 800171c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001720:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d9ea      	bls.n	80016fe <Calculate_MIC+0x112>
	}

	//Preform full calculating until n-1 messsage blocks
	while(Block_Counter < Number_of_Blocks)
 8001728:	e043      	b.n	80017b2 <Calculate_MIC+0x1c6>
	{
		//Copy data into array
		for(i = 0; i < 16; i++)
 800172a:	2300      	movs	r3, #0
 800172c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001730:	e00f      	b.n	8001752 <Calculate_MIC+0x166>
		{
			New_Data[i] = *Data;
 8001732:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	7812      	ldrb	r2, [r2, #0]
 800173a:	3368      	adds	r3, #104	; 0x68
 800173c:	443b      	add	r3, r7
 800173e:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	3301      	adds	r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8001748:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800174c:	3301      	adds	r3, #1
 800174e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001752:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001756:	2b0f      	cmp	r3, #15
 8001758:	d9eb      	bls.n	8001732 <Calculate_MIC+0x146>
		}

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 800175a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f000 f94a 	bl	80019fe <XOR>

		//Preform AES encryption
		AES_Encrypt(New_Data, NwkSkey);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fbe7 	bl	8000f44 <AES_Encrypt>

		//Copy New_Data to Old_Data
		for(i = 0; i < 16; i++)
 8001776:	2300      	movs	r3, #0
 8001778:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800177c:	e010      	b.n	80017a0 <Calculate_MIC+0x1b4>
		{
			Old_Data[i] = New_Data[i];
 800177e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001782:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001786:	3268      	adds	r2, #104	; 0x68
 8001788:	443a      	add	r2, r7
 800178a:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 800178e:	3368      	adds	r3, #104	; 0x68
 8001790:	443b      	add	r3, r7
 8001792:	f803 2c44 	strb.w	r2, [r3, #-68]
		for(i = 0; i < 16; i++)
 8001796:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800179a:	3301      	adds	r3, #1
 800179c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80017a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017a4:	2b0f      	cmp	r3, #15
 80017a6:	d9ea      	bls.n	800177e <Calculate_MIC+0x192>
		}

		//Raise Block counter
		Block_Counter++;
 80017a8:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80017ac:	3301      	adds	r3, #1
 80017ae:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	while(Block_Counter < Number_of_Blocks)
 80017b2:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80017b6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d3b5      	bcc.n	800172a <Calculate_MIC+0x13e>
	}

	//Perform calculation on last block
	//Check if Datalength is a multiple of 16
	if(Incomplete_Block_Size == 0)
 80017be:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d12e      	bne.n	8001824 <Calculate_MIC+0x238>
	{
		//Copy last data into array
		for(i = 0; i < 16; i++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80017cc:	e00f      	b.n	80017ee <Calculate_MIC+0x202>
		{
			New_Data[i] = *Data;
 80017ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	7812      	ldrb	r2, [r2, #0]
 80017d6:	3368      	adds	r3, #104	; 0x68
 80017d8:	443b      	add	r3, r7
 80017da:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	3301      	adds	r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 80017e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017e8:	3301      	adds	r3, #1
 80017ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80017ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017f2:	2b0f      	cmp	r3, #15
 80017f4:	d9eb      	bls.n	80017ce <Calculate_MIC+0x1e2>
		}

		//Preform XOR with Key 1
		XOR(New_Data,Key_K1);
 80017f6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f000 f8fc 	bl	80019fe <XOR>

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 8001806:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f000 f8f4 	bl	80019fe <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fb91 	bl	8000f44 <AES_Encrypt>
 8001822:	e04d      	b.n	80018c0 <Calculate_MIC+0x2d4>
	}
	else
	{
		//Copy the remaining data and fill the rest
		for(i =  0; i < 16; i++)
 8001824:	2300      	movs	r3, #0
 8001826:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800182a:	e02f      	b.n	800188c <Calculate_MIC+0x2a0>
		{
			if(i < Incomplete_Block_Size)
 800182c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001830:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001834:	429a      	cmp	r2, r3
 8001836:	d20a      	bcs.n	800184e <Calculate_MIC+0x262>
			{
				New_Data[i] = *Data;
 8001838:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	7812      	ldrb	r2, [r2, #0]
 8001840:	3368      	adds	r3, #104	; 0x68
 8001842:	443b      	add	r3, r7
 8001844:	f803 2c54 	strb.w	r2, [r3, #-84]
				Data++;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3301      	adds	r3, #1
 800184c:	60fb      	str	r3, [r7, #12]
			}
			if(i == Incomplete_Block_Size)
 800184e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001852:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001856:	429a      	cmp	r2, r3
 8001858:	d106      	bne.n	8001868 <Calculate_MIC+0x27c>
			{
				New_Data[i] = 0x80;
 800185a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800185e:	3368      	adds	r3, #104	; 0x68
 8001860:	443b      	add	r3, r7
 8001862:	2280      	movs	r2, #128	; 0x80
 8001864:	f803 2c54 	strb.w	r2, [r3, #-84]
			}
			if(i > Incomplete_Block_Size)
 8001868:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800186c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001870:	429a      	cmp	r2, r3
 8001872:	d906      	bls.n	8001882 <Calculate_MIC+0x296>
			{
				New_Data[i] = 0x00;
 8001874:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001878:	3368      	adds	r3, #104	; 0x68
 800187a:	443b      	add	r3, r7
 800187c:	2200      	movs	r2, #0
 800187e:	f803 2c54 	strb.w	r2, [r3, #-84]
		for(i =  0; i < 16; i++)
 8001882:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001886:	3301      	adds	r3, #1
 8001888:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800188c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d9cb      	bls.n	800182c <Calculate_MIC+0x240>
			}
		}

		//Preform XOR with Key 2
		XOR(New_Data,Key_K2);
 8001894:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f8ad 	bl	80019fe <XOR>

		//Preform XOR with Old data
		XOR(New_Data,Old_Data);
 80018a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 f8a5 	bl	80019fe <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fb42 	bl	8000f44 <AES_Encrypt>
	}

	Final_MIC[0] = New_Data[0];
 80018c0:	7d3a      	ldrb	r2, [r7, #20]
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	701a      	strb	r2, [r3, #0]
	Final_MIC[1] = New_Data[1];
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	3301      	adds	r3, #1
 80018ca:	7d7a      	ldrb	r2, [r7, #21]
 80018cc:	701a      	strb	r2, [r3, #0]
	Final_MIC[2] = New_Data[2];
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	3302      	adds	r3, #2
 80018d2:	7dba      	ldrb	r2, [r7, #22]
 80018d4:	701a      	strb	r2, [r3, #0]
	Final_MIC[3] = New_Data[3];
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	3303      	adds	r3, #3
 80018da:	7dfa      	ldrb	r2, [r7, #23]
 80018dc:	701a      	strb	r2, [r3, #0]
}
 80018de:	bf00      	nop
 80018e0:	376c      	adds	r7, #108	; 0x6c
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd90      	pop	{r4, r7, pc}
 80018e6:	bf00      	nop
 80018e8:	0800f158 	.word	0x0800f158

080018ec <Generate_Keys>:

void Generate_Keys(unsigned char *K1, unsigned char *K2, unsigned char NwkSkey[16])
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
	unsigned char i;
	unsigned char MSB_Key;

	//Encrypt the zeros in K1 with the NwkSkey
	AES_Encrypt(K1, NwkSkey);
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f7ff fb22 	bl	8000f44 <AES_Encrypt>

	//Create K1
	//Check if MSB is 1
	if((K1[0] & 0x80) == 0x80)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	b25b      	sxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	da02      	bge.n	8001910 <Generate_Keys+0x24>
	{
		MSB_Key = 1;
 800190a:	2301      	movs	r3, #1
 800190c:	75bb      	strb	r3, [r7, #22]
 800190e:	e001      	b.n	8001914 <Generate_Keys+0x28>
	}
	else
	{
		MSB_Key = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K1 one bit left
	Shift_Left(K1);
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 f83c 	bl	8001992 <Shift_Left>

	//if MSB was 1
	if(MSB_Key == 1)
 800191a:	7dbb      	ldrb	r3, [r7, #22]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d109      	bne.n	8001934 <Generate_Keys+0x48>
	{
		K1[15] = K1[15] ^ 0x87;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	330f      	adds	r3, #15
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	320f      	adds	r2, #15
 800192a:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800192e:	43db      	mvns	r3, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	7013      	strb	r3, [r2, #0]
	}

	//Copy K1 to K2
	for( i = 0; i < 16; i++)
 8001934:	2300      	movs	r3, #0
 8001936:	75fb      	strb	r3, [r7, #23]
 8001938:	e00a      	b.n	8001950 <Generate_Keys+0x64>
	{
		K2[i] = K1[i];
 800193a:	7dfb      	ldrb	r3, [r7, #23]
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	441a      	add	r2, r3
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	68b9      	ldr	r1, [r7, #8]
 8001944:	440b      	add	r3, r1
 8001946:	7812      	ldrb	r2, [r2, #0]
 8001948:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++)
 800194a:	7dfb      	ldrb	r3, [r7, #23]
 800194c:	3301      	adds	r3, #1
 800194e:	75fb      	strb	r3, [r7, #23]
 8001950:	7dfb      	ldrb	r3, [r7, #23]
 8001952:	2b0f      	cmp	r3, #15
 8001954:	d9f1      	bls.n	800193a <Generate_Keys+0x4e>
	}

	//Check if MSB is 1
	if((K2[0] & 0x80) == 0x80)
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	b25b      	sxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	da02      	bge.n	8001966 <Generate_Keys+0x7a>
	{
		MSB_Key = 1;
 8001960:	2301      	movs	r3, #1
 8001962:	75bb      	strb	r3, [r7, #22]
 8001964:	e001      	b.n	800196a <Generate_Keys+0x7e>
	}
	else
	{
		MSB_Key = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K2 one bit left
	Shift_Left(K2);
 800196a:	68b8      	ldr	r0, [r7, #8]
 800196c:	f000 f811 	bl	8001992 <Shift_Left>

	//Check if MSB was 1
	if(MSB_Key == 1)
 8001970:	7dbb      	ldrb	r3, [r7, #22]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d109      	bne.n	800198a <Generate_Keys+0x9e>
	{
		K2[15] = K2[15] ^ 0x87;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	330f      	adds	r3, #15
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	320f      	adds	r2, #15
 8001980:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8001984:	43db      	mvns	r3, r3
 8001986:	b2db      	uxtb	r3, r3
 8001988:	7013      	strb	r3, [r2, #0]
	}
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <Shift_Left>:

void Shift_Left(unsigned char *Data)
{
 8001992:	b480      	push	{r7}
 8001994:	b085      	sub	sp, #20
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
	unsigned char i;
	unsigned char Overflow = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	73bb      	strb	r3, [r7, #14]
	//unsigned char High_Byte, Low_Byte;

	for(i = 0; i < 16; i++)
 800199e:	2300      	movs	r3, #0
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	e022      	b.n	80019ea <Shift_Left+0x58>
	{
		//Check for overflow on next byte except for the last byte
		if(i < 15)
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	2b0e      	cmp	r3, #14
 80019a8:	d80d      	bhi.n	80019c6 <Shift_Left+0x34>
		{
			//Check if upper bit is one
			if((Data[i+1] & 0x80) == 0x80)
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	3301      	adds	r3, #1
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	da02      	bge.n	80019c0 <Shift_Left+0x2e>
			{
				Overflow = 1;
 80019ba:	2301      	movs	r3, #1
 80019bc:	73bb      	strb	r3, [r7, #14]
 80019be:	e004      	b.n	80019ca <Shift_Left+0x38>
			}
			else
			{
				Overflow = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	73bb      	strb	r3, [r7, #14]
 80019c4:	e001      	b.n	80019ca <Shift_Left+0x38>
			}
		}
		else
		{
			Overflow = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	73bb      	strb	r3, [r7, #14]
		}

		//Shift one left
		Data[i] = (Data[i] << 1) + Overflow;
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	4413      	add	r3, r2
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	b2d9      	uxtb	r1, r3
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	4413      	add	r3, r2
 80019dc:	7bba      	ldrb	r2, [r7, #14]
 80019de:	440a      	add	r2, r1
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	3301      	adds	r3, #1
 80019e8:	73fb      	strb	r3, [r7, #15]
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	2b0f      	cmp	r3, #15
 80019ee:	d9d9      	bls.n	80019a4 <Shift_Left+0x12>
	}
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <XOR>:

void XOR(unsigned char *New_Data,unsigned char *Old_Data)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b085      	sub	sp, #20
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	6039      	str	r1, [r7, #0]
	unsigned char i;

	for(i = 0; i < 16; i++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	e010      	b.n	8001a30 <XOR+0x32>
	{
		New_Data[i] = New_Data[i] ^ Old_Data[i];
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4413      	add	r3, r2
 8001a14:	7819      	ldrb	r1, [r3, #0]
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	781a      	ldrb	r2, [r3, #0]
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	4403      	add	r3, r0
 8001a24:	404a      	eors	r2, r1
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	73fb      	strb	r3, [r7, #15]
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	2b0f      	cmp	r3, #15
 8001a34:	d9eb      	bls.n	8001a0e <XOR+0x10>
	}
}
 8001a36:	bf00      	nop
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a48:	4b18      	ldr	r3, [pc, #96]	; (8001aac <MX_CAN1_Init+0x68>)
 8001a4a:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <MX_CAN1_Init+0x6c>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <MX_CAN1_Init+0x68>)
 8001a50:	2210      	movs	r2, #16
 8001a52:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <MX_CAN1_Init+0x68>)
 8001a56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a5a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <MX_CAN1_Init+0x68>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <MX_CAN1_Init+0x68>)
 8001a64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a68:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <MX_CAN1_Init+0x68>)
 8001a6c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a70:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <MX_CAN1_Init+0x68>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_CAN1_Init+0x68>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <MX_CAN1_Init+0x68>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_CAN1_Init+0x68>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <MX_CAN1_Init+0x68>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <MX_CAN1_Init+0x68>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a96:	4805      	ldr	r0, [pc, #20]	; (8001aac <MX_CAN1_Init+0x68>)
 8001a98:	f002 fc5e 	bl	8004358 <HAL_CAN_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001aa2:	f000 fbcf 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200003d4 	.word	0x200003d4
 8001ab0:	40006400 	.word	0x40006400

08001ab4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	; 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a24      	ldr	r2, [pc, #144]	; (8001b64 <HAL_CAN_MspInit+0xb0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d141      	bne.n	8001b5a <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ad6:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <HAL_CAN_MspInit+0xb4>)
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	4a23      	ldr	r2, [pc, #140]	; (8001b68 <HAL_CAN_MspInit+0xb4>)
 8001adc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae2:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <HAL_CAN_MspInit+0xb4>)
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <HAL_CAN_MspInit+0xb4>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	4a1d      	ldr	r2, [pc, #116]	; (8001b68 <HAL_CAN_MspInit+0xb4>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afa:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <HAL_CAN_MspInit+0xb4>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b06:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b18:	2309      	movs	r3, #9
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4619      	mov	r1, r3
 8001b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b26:	f003 fa5f 	bl	8004fe8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2105      	movs	r1, #5
 8001b2e:	2013      	movs	r0, #19
 8001b30:	f003 fa30 	bl	8004f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001b34:	2013      	movs	r0, #19
 8001b36:	f003 fa49 	bl	8004fcc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2105      	movs	r1, #5
 8001b3e:	2014      	movs	r0, #20
 8001b40:	f003 fa28 	bl	8004f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b44:	2014      	movs	r0, #20
 8001b46:	f003 fa41 	bl	8004fcc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2105      	movs	r1, #5
 8001b4e:	2015      	movs	r0, #21
 8001b50:	f003 fa20 	bl	8004f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001b54:	2015      	movs	r0, #21
 8001b56:	f003 fa39 	bl	8004fcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	3728      	adds	r7, #40	; 0x28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40006400 	.word	0x40006400
 8001b68:	40021000 	.word	0x40021000

08001b6c <CAN_Initialize>:
  }
}

/* USER CODE BEGIN 1 */

void CAN_Initialize() {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b094      	sub	sp, #80	; 0x50
 8001b70:	af00      	add	r7, sp, #0
	MX_CAN1_Init();
 8001b72:	f7ff ff67 	bl	8001a44 <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	CAN_FilterTypeDef high_priority_filter;
	high_priority_filter.FilterIdHigh = 0x100 << 5;
 8001b76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
	high_priority_filter.FilterMaskIdHigh = 0x700 << 5;
 8001b7c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b80:	633b      	str	r3, [r7, #48]	; 0x30
	high_priority_filter.FilterIdLow = 0x0000;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
	high_priority_filter.FilterMaskIdLow = 0x0000;
 8001b86:	2300      	movs	r3, #0
 8001b88:	637b      	str	r3, [r7, #52]	; 0x34
	high_priority_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	63bb      	str	r3, [r7, #56]	; 0x38
	high_priority_filter.FilterBank = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	63fb      	str	r3, [r7, #60]	; 0x3c
	high_priority_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	643b      	str	r3, [r7, #64]	; 0x40
	high_priority_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001b96:	2301      	movs	r3, #1
 8001b98:	647b      	str	r3, [r7, #68]	; 0x44
	high_priority_filter.FilterActivation = CAN_FILTER_ENABLE;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	64bb      	str	r3, [r7, #72]	; 0x48

	if (HAL_CAN_ConfigFilter(&hcan1, &high_priority_filter) != HAL_OK) {
 8001b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4833      	ldr	r0, [pc, #204]	; (8001c74 <CAN_Initialize+0x108>)
 8001ba6:	f002 fcd2 	bl	800454e <HAL_CAN_ConfigFilter>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <CAN_Initialize+0x48>
		/* Filter configuration Error */
		Error_Handler();
 8001bb0:	f000 fb48 	bl	8002244 <Error_Handler>
	}

	CAN_FilterTypeDef low_priority_filter;
	low_priority_filter.FilterIdHigh = 0x100 << 5;
 8001bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bb8:	603b      	str	r3, [r7, #0]
	low_priority_filter.FilterMaskIdHigh = 0x700 << 5;
 8001bba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001bbe:	60bb      	str	r3, [r7, #8]
	low_priority_filter.FilterIdLow = 0x0000;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	607b      	str	r3, [r7, #4]
	low_priority_filter.FilterMaskIdLow = 0x0000;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
	low_priority_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]
	low_priority_filter.FilterBank = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
	low_priority_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61bb      	str	r3, [r7, #24]
	low_priority_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	61fb      	str	r3, [r7, #28]
	low_priority_filter.FilterActivation = CAN_FILTER_ENABLE;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	623b      	str	r3, [r7, #32]

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001bdc:	4825      	ldr	r0, [pc, #148]	; (8001c74 <CAN_Initialize+0x108>)
 8001bde:	f002 fd80 	bl	80046e2 <HAL_CAN_Start>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d004      	beq.n	8001bf2 <CAN_Initialize+0x86>
		printf("[!SYSTEM ERROR]CAN Initialization Error At CAN Start");
 8001be8:	4823      	ldr	r0, [pc, #140]	; (8001c78 <CAN_Initialize+0x10c>)
 8001bea:	f00b fac7 	bl	800d17c <iprintf>
		Error_Handler();
 8001bee:	f000 fb29 	bl	8002244 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8001bf2:	2102      	movs	r1, #2
 8001bf4:	481f      	ldr	r0, [pc, #124]	; (8001c74 <CAN_Initialize+0x108>)
 8001bf6:	f002 feca 	bl	800498e <HAL_CAN_ActivateNotification>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d004      	beq.n	8001c0a <CAN_Initialize+0x9e>
			!= HAL_OK) {
		printf(
 8001c00:	481e      	ldr	r0, [pc, #120]	; (8001c7c <CAN_Initialize+0x110>)
 8001c02:	f00b fabb 	bl	800d17c <iprintf>
				"[!SYSTEM ERROR]CAN Initialization Error At CAN INTURRUPT MESSAGE PENDING RX FIFO 0");
		Error_Handler();
 8001c06:	f000 fb1d 	bl	8002244 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)
 8001c0a:	2110      	movs	r1, #16
 8001c0c:	4819      	ldr	r0, [pc, #100]	; (8001c74 <CAN_Initialize+0x108>)
 8001c0e:	f002 febe 	bl	800498e <HAL_CAN_ActivateNotification>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <CAN_Initialize+0xb6>
			!= HAL_OK) {
		printf(
 8001c18:	4819      	ldr	r0, [pc, #100]	; (8001c80 <CAN_Initialize+0x114>)
 8001c1a:	f00b faaf 	bl	800d17c <iprintf>
				"[!SYSTEM ERROR]CAN Initialization Error At CAN INTURRUPT MESSAGE PENDING RX FIFO 1");
		Error_Handler();
 8001c1e:	f000 fb11 	bl	8002244 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_FULL) != HAL_OK) {
 8001c22:	2104      	movs	r1, #4
 8001c24:	4813      	ldr	r0, [pc, #76]	; (8001c74 <CAN_Initialize+0x108>)
 8001c26:	f002 feb2 	bl	800498e <HAL_CAN_ActivateNotification>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d004      	beq.n	8001c3a <CAN_Initialize+0xce>
		printf(
 8001c30:	4814      	ldr	r0, [pc, #80]	; (8001c84 <CAN_Initialize+0x118>)
 8001c32:	f00b faa3 	bl	800d17c <iprintf>
				"[!SYSTEM ERROR]CAN Initialization Error At CAN INTURRUPT RX FIFO 0 FULL");
		Error_Handler();
 8001c36:	f000 fb05 	bl	8002244 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_FULL) != HAL_OK) {
 8001c3a:	2120      	movs	r1, #32
 8001c3c:	480d      	ldr	r0, [pc, #52]	; (8001c74 <CAN_Initialize+0x108>)
 8001c3e:	f002 fea6 	bl	800498e <HAL_CAN_ActivateNotification>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d004      	beq.n	8001c52 <CAN_Initialize+0xe6>
		printf(
 8001c48:	480f      	ldr	r0, [pc, #60]	; (8001c88 <CAN_Initialize+0x11c>)
 8001c4a:	f00b fa97 	bl	800d17c <iprintf>
				"[!SYSTEM ERROR]CAN Initialization Error At CAN INTURRUPT RX FIFO 1 FULL");
		Error_Handler();
 8001c4e:	f000 faf9 	bl	8002244 <Error_Handler>

//	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR))
//	!= HAL_OK) {
//		Error_Handler();
//	}
	TxHeader.RTR = CAN_RTR_DATA;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <CAN_Initialize+0x120>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <CAN_Initialize+0x120>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <CAN_Initialize+0x120>)
 8001c60:	2208      	movs	r2, #8
 8001c62:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <CAN_Initialize+0x120>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	751a      	strb	r2, [r3, #20]
}
 8001c6a:	bf00      	nop
 8001c6c:	3750      	adds	r7, #80	; 0x50
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200003d4 	.word	0x200003d4
 8001c78:	0800f168 	.word	0x0800f168
 8001c7c:	0800f1a0 	.word	0x0800f1a0
 8001c80:	0800f1f4 	.word	0x0800f1f4
 8001c84:	0800f248 	.word	0x0800f248
 8001c88:	0800f290 	.word	0x0800f290
 8001c8c:	200003bc 	.word	0x200003bc

08001c90 <configureTimerForRunTimeStats>:
void configureTimerForRunTimeStats(void);
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0

}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
	return 0;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Init */
	CAN_Initialize();
 8001cb4:	f7ff ff5a 	bl	8001b6c <CAN_Initialize>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of CAN_Transmission_Complete */
	CAN_Transmission_CompleteHandle = osSemaphoreNew(1, 0,
 8001cb8:	4a28      	ldr	r2, [pc, #160]	; (8001d5c <MX_FREERTOS_Init+0xac>)
 8001cba:	2100      	movs	r1, #0
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f007 fc3c 	bl	800953a <osSemaphoreNew>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4a26      	ldr	r2, [pc, #152]	; (8001d60 <MX_FREERTOS_Init+0xb0>)
 8001cc6:	6013      	str	r3, [r2, #0]
			&CAN_Transmission_Complete_attributes);

	/* creation of CAN_Recieve_Complete */
	CAN_Recieve_CompleteHandle = osSemaphoreNew(1, 0,
 8001cc8:	4a26      	ldr	r2, [pc, #152]	; (8001d64 <MX_FREERTOS_Init+0xb4>)
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2001      	movs	r0, #1
 8001cce:	f007 fc34 	bl	800953a <osSemaphoreNew>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4a24      	ldr	r2, [pc, #144]	; (8001d68 <MX_FREERTOS_Init+0xb8>)
 8001cd6:	6013      	str	r3, [r2, #0]
			&CAN_Recieve_Complete_attributes);

	/* creation of RELEASE_JERMA_GAS */
	RELEASE_JERMA_GASHandle = osSemaphoreNew(1, 0,
 8001cd8:	4a24      	ldr	r2, [pc, #144]	; (8001d6c <MX_FREERTOS_Init+0xbc>)
 8001cda:	2100      	movs	r1, #0
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f007 fc2c 	bl	800953a <osSemaphoreNew>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4a22      	ldr	r2, [pc, #136]	; (8001d70 <MX_FREERTOS_Init+0xc0>)
 8001ce6:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of CAN_Transmission_Queue */
	CAN_Transmission_QueueHandle = osMessageQueueNew(16, 8,
 8001ce8:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <MX_FREERTOS_Init+0xc4>)
 8001cea:	2108      	movs	r1, #8
 8001cec:	2010      	movs	r0, #16
 8001cee:	f007 fcf1 	bl	80096d4 <osMessageQueueNew>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4a20      	ldr	r2, [pc, #128]	; (8001d78 <MX_FREERTOS_Init+0xc8>)
 8001cf6:	6013      	str	r3, [r2, #0]
			&CAN_Transmission_Queue_attributes);

	/* creation of CAN_HIGHPrio_Reci_Queue */
	CAN_HIGHPrio_Reci_QueueHandle = osMessageQueueNew(16, 8,
 8001cf8:	4a20      	ldr	r2, [pc, #128]	; (8001d7c <MX_FREERTOS_Init+0xcc>)
 8001cfa:	2108      	movs	r1, #8
 8001cfc:	2010      	movs	r0, #16
 8001cfe:	f007 fce9 	bl	80096d4 <osMessageQueueNew>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4a1e      	ldr	r2, [pc, #120]	; (8001d80 <MX_FREERTOS_Init+0xd0>)
 8001d06:	6013      	str	r3, [r2, #0]
			&CAN_HIGHPrio_Reci_Queue_attributes);

	/* creation of CAN_LOWPrio_Reci_Queue */
	CAN_LOWPrio_Reci_QueueHandle = osMessageQueueNew(16, sizeof(IntrimPacket),
 8001d08:	4a1e      	ldr	r2, [pc, #120]	; (8001d84 <MX_FREERTOS_Init+0xd4>)
 8001d0a:	210c      	movs	r1, #12
 8001d0c:	2010      	movs	r0, #16
 8001d0e:	f007 fce1 	bl	80096d4 <osMessageQueueNew>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <MX_FREERTOS_Init+0xd8>)
 8001d16:	6013      	str	r3, [r2, #0]
			&CAN_LOWPrio_Reci_Queue_attributes);

	/* creation of CAN_JERMA_GAS_LEAK */
	CAN_JERMA_GAS_LEAKHandle = osMessageQueueNew(16, 8,
 8001d18:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <MX_FREERTOS_Init+0xdc>)
 8001d1a:	2108      	movs	r1, #8
 8001d1c:	2010      	movs	r0, #16
 8001d1e:	f007 fcd9 	bl	80096d4 <osMessageQueueNew>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4a1a      	ldr	r2, [pc, #104]	; (8001d90 <MX_FREERTOS_Init+0xe0>)
 8001d26:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of JERMAMainThread */
	JERMAMainThreadHandle = osThreadNew(startMainThread, NULL,
 8001d28:	4a1a      	ldr	r2, [pc, #104]	; (8001d94 <MX_FREERTOS_Init+0xe4>)
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	481a      	ldr	r0, [pc, #104]	; (8001d98 <MX_FREERTOS_Init+0xe8>)
 8001d2e:	f007 fb57 	bl	80093e0 <osThreadNew>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <MX_FREERTOS_Init+0xec>)
 8001d36:	6013      	str	r3, [r2, #0]
			&JERMAMainThread_attributes);

	/* creation of CANThread */
	CANThreadHandle = osThreadNew(startCANThread, NULL, &CANThread_attributes);
 8001d38:	4a19      	ldr	r2, [pc, #100]	; (8001da0 <MX_FREERTOS_Init+0xf0>)
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4819      	ldr	r0, [pc, #100]	; (8001da4 <MX_FREERTOS_Init+0xf4>)
 8001d3e:	f007 fb4f 	bl	80093e0 <osThreadNew>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4a18      	ldr	r2, [pc, #96]	; (8001da8 <MX_FREERTOS_Init+0xf8>)
 8001d46:	6013      	str	r3, [r2, #0]

	/* creation of RFThread */
	RFThreadHandle = osThreadNew(startRFThread, NULL, &RFThread_attributes);
 8001d48:	4a18      	ldr	r2, [pc, #96]	; (8001dac <MX_FREERTOS_Init+0xfc>)
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4818      	ldr	r0, [pc, #96]	; (8001db0 <MX_FREERTOS_Init+0x100>)
 8001d4e:	f007 fb47 	bl	80093e0 <osThreadNew>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4a17      	ldr	r2, [pc, #92]	; (8001db4 <MX_FREERTOS_Init+0x104>)
 8001d56:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	0800f620 	.word	0x0800f620
 8001d60:	20000460 	.word	0x20000460
 8001d64:	0800f630 	.word	0x0800f630
 8001d68:	200004b4 	.word	0x200004b4
 8001d6c:	0800f640 	.word	0x0800f640
 8001d70:	20000508 	.word	0x20000508
 8001d74:	0800f5c0 	.word	0x0800f5c0
 8001d78:	20000450 	.word	0x20000450
 8001d7c:	0800f5d8 	.word	0x0800f5d8
 8001d80:	20000454 	.word	0x20000454
 8001d84:	0800f5f0 	.word	0x0800f5f0
 8001d88:	20000458 	.word	0x20000458
 8001d8c:	0800f608 	.word	0x0800f608
 8001d90:	2000045c 	.word	0x2000045c
 8001d94:	0800f554 	.word	0x0800f554
 8001d98:	08001db9 	.word	0x08001db9
 8001d9c:	20000444 	.word	0x20000444
 8001da0:	0800f578 	.word	0x0800f578
 8001da4:	08001dc9 	.word	0x08001dc9
 8001da8:	20000448 	.word	0x20000448
 8001dac:	0800f59c 	.word	0x0800f59c
 8001db0:	08001e71 	.word	0x08001e71
 8001db4:	2000044c 	.word	0x2000044c

08001db8 <startMainThread>:
 * @brief  Function implementing the MainThread thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startMainThread */
void startMainThread(void *argument) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startMainThread */
	/* Infinite loop */
	for (;;) {
		//osSemaphoreWait(RELEASE_JERMA_GASHandle, 0);
		osDelay(1);
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	f007 fb9f 	bl	8009504 <osDelay>
 8001dc6:	e7fb      	b.n	8001dc0 <startMainThread+0x8>

08001dc8 <startCANThread>:
 * @param argument: Not used
 * @retval None
 */

/* USER CODE END Header_startCANThread */
void startCANThread(void *argument) {
 8001dc8:	b5b0      	push	{r4, r5, r7, lr}
 8001dca:	b08c      	sub	sp, #48	; 0x30
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startCANThread */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001dd0:	2104      	movs	r1, #4
 8001dd2:	4822      	ldr	r0, [pc, #136]	; (8001e5c <startCANThread+0x94>)
 8001dd4:	f005 fd16 	bl	8007804 <HAL_TIM_PWM_Start>
	//uint8_t message[8] = { 1, 2, 3, 4, 5, 6, 7, 8 };
	uint8_t message2[8] = { 0 };
 8001dd8:	2300      	movs	r3, #0
 8001dda:	623b      	str	r3, [r7, #32]
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
	IntrimPacket intrim;

	/* Infinite loop */
	for (;;) {

		osMessageQueueGet(CAN_LOWPrio_Reci_QueueHandle, &intrim, NULL,
 8001de0:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <startCANThread+0x98>)
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	f107 010c 	add.w	r1, r7, #12
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dec:	2200      	movs	r2, #0
 8001dee:	f007 fd45 	bl	800987c <osMessageQueueGet>
		osWaitForever);
		htim1.Instance->CCR2 = 5;
 8001df2:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <startCANThread+0x94>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2205      	movs	r2, #5
 8001df8:	639a      	str	r2, [r3, #56]	; 0x38
//		printf("Got message: ");
//		for (int i = 0; i < 8; i++)
//			printf("%u", data[i]);

		printf("\r\n");
 8001dfa:	481a      	ldr	r0, [pc, #104]	; (8001e64 <startCANThread+0x9c>)
 8001dfc:	f00b fa24 	bl	800d248 <puts>

		reciever = *((struct Data*) intrim.data);
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	1d1a      	adds	r2, r3, #4
 8001e06:	f107 0318 	add.w	r3, r7, #24
 8001e0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e0e:	e883 0003 	stmia.w	r3, {r0, r1}
		printf("Packet ID: %hx ", (uint8_t) intrim.id);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	4619      	mov	r1, r3
 8001e18:	4813      	ldr	r0, [pc, #76]	; (8001e68 <startCANThread+0xa0>)
 8001e1a:	f00b f9af 	bl	800d17c <iprintf>
		printf("H2: %f temp: %f", reciever.h2, reciever.temp);
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fb91 	bl	8000548 <__aeabi_f2d>
 8001e26:	4604      	mov	r4, r0
 8001e28:	460d      	mov	r5, r1
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fb8b 	bl	8000548 <__aeabi_f2d>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	e9cd 2300 	strd	r2, r3, [sp]
 8001e3a:	4622      	mov	r2, r4
 8001e3c:	462b      	mov	r3, r5
 8001e3e:	480b      	ldr	r0, [pc, #44]	; (8001e6c <startCANThread+0xa4>)
 8001e40:	f00b f99c 	bl	800d17c <iprintf>
		//CAN_Transmit(0x101, &data, sizeof(data));
		osDelay(100);
 8001e44:	2064      	movs	r0, #100	; 0x64
 8001e46:	f007 fb5d 	bl	8009504 <osDelay>
		htim1.Instance->CCR2 = 0;
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <startCANThread+0x94>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	639a      	str	r2, [r3, #56]	; 0x38
		osDelay(100);
 8001e52:	2064      	movs	r0, #100	; 0x64
 8001e54:	f007 fb56 	bl	8009504 <osDelay>
		osMessageQueueGet(CAN_LOWPrio_Reci_QueueHandle, &intrim, NULL,
 8001e58:	e7c2      	b.n	8001de0 <startCANThread+0x18>
 8001e5a:	bf00      	nop
 8001e5c:	200005dc 	.word	0x200005dc
 8001e60:	20000458 	.word	0x20000458
 8001e64:	0800f3e8 	.word	0x0800f3e8
 8001e68:	0800f3ec 	.word	0x0800f3ec
 8001e6c:	0800f3fc 	.word	0x0800f3fc

08001e70 <startRFThread>:
 * @brief Function implementing the RFThread thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startRFThread */
void startRFThread(void *argument) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startRFThread */
	struct Data {
		float h2;
		float temp;
	} test_message;
	test_message.h2 = 1;
 8001e78:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e7c:	60bb      	str	r3, [r7, #8]
	test_message.temp = 1;
 8001e7e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e82:	60fb      	str	r3, [r7, #12]

	rfm95_init(&rfm95_handle);
 8001e84:	480e      	ldr	r0, [pc, #56]	; (8001ec0 <startRFThread+0x50>)
 8001e86:	f000 fc3d 	bl	8002704 <rfm95_init>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001e8a:	2104      	movs	r1, #4
 8001e8c:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <startRFThread+0x54>)
 8001e8e:	f005 fcb9 	bl	8007804 <HAL_TIM_PWM_Start>
	/* Infinite loop */
	for (;;) {
//		HAL_RNG_GenerateRandomNumber(&hrng, (uint32_t*) &message3.h2);
//		HAL_RNG_GenerateRandomNumber(&hrng, (uint32_t*) &message3.temp);
//		message3.h2 = message3.h2 / 1000 + 1;
		htim2.Instance->CCR2 = 5;
 8001e92:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <startRFThread+0x54>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2205      	movs	r2, #5
 8001e98:	639a      	str	r2, [r3, #56]	; 0x38
		rfm95_send_receive_cycle(&rfm95_handle, &test_message,
 8001e9a:	f107 0308 	add.w	r3, r7, #8
 8001e9e:	2208      	movs	r2, #8
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4807      	ldr	r0, [pc, #28]	; (8001ec0 <startRFThread+0x50>)
 8001ea4:	f001 fb99 	bl	80035da <rfm95_send_receive_cycle>
				sizeof(test_message));
//		CAN_Transmit(0x123, (uint32_t*) &message3, sizeof(message3),
//		CAN_RTR_DATA);
//		//osMessageQueuePut(CAN_Transmission_QueueHandle, &message, 0,
//		//osWaitForever);
		osDelay(1000);
 8001ea8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eac:	f007 fb2a 	bl	8009504 <osDelay>
		htim2.Instance->CCR2 = 0;
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <startRFThread+0x54>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	639a      	str	r2, [r3, #56]	; 0x38

		osDelay(100);
 8001eb8:	2064      	movs	r0, #100	; 0x64
 8001eba:	f007 fb23 	bl	8009504 <osDelay>
		htim2.Instance->CCR2 = 5;
 8001ebe:	e7e8      	b.n	8001e92 <startRFThread+0x22>
 8001ec0:	20000100 	.word	0x20000100
 8001ec4:	20000628 	.word	0x20000628

08001ec8 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
volatile IntrimPacket packet; // Declared as a temporary variable outside ISR as this is being allocated and re allocated,
// therefore to save ISR time declaring it out side. Also volatile since only used in ISR.

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

	// Just check if there is atleast 1 spot open
	// If we dont and call get message we will loose that message since it wont fit and the ISR will exit.
	if (osMessageQueueGetSpace(CAN_LOWPrio_Reci_QueueHandle) >= 1) {
 8001ed0:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f007 fd2f 	bl	8009938 <osMessageQueueGetSpace>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d01d      	beq.n	8001f1c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData)
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001ee2:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f002 fc3f 	bl	800476a <HAL_CAN_GetRxMessage>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
				!= HAL_OK) {
			Error_Handler();
 8001ef2:	f000 f9a7 	bl	8002244 <Error_Handler>
		}
		// Mask the packet ID out.
		packet.id = RxHeader.StdId & 0x0FF;
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8001efe:	6013      	str	r3, [r2, #0]

		memcpy(packet.data, RxData, 8); // this is always 8 bytes therefore there
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8001f02:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001f04:	3304      	adds	r3, #4
 8001f06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f0a:	e883 0003 	stmia.w	r3, {r0, r1}
		// is pretty much no added iteration time. The compiler will optimize the loop away.

		osMessageQueuePut(CAN_LOWPrio_Reci_QueueHandle, &packet, 0, 0);
 8001f0e:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	2300      	movs	r3, #0
 8001f14:	2200      	movs	r2, #0
 8001f16:	4906      	ldr	r1, [pc, #24]	; (8001f30 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8001f18:	f007 fc50 	bl	80097bc <osMessageQueuePut>
	}

}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000458 	.word	0x20000458
 8001f28:	20000434 	.word	0x20000434
 8001f2c:	200003fc 	.word	0x200003fc
 8001f30:	2000050c 	.word	0x2000050c

08001f34 <HAL_CAN_RxFifo1MsgPendingCallback>:
struct Hydrogen_Board_Leak_Emergency_Transmission {
	float h2_concentration;
};

/** HIGH PRIORITY ONLY TALKS TO H2 Board. */
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader_Reserved,
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_CAN_RxFifo1MsgPendingCallback+0x50>)
 8001f3e:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 8001f40:	2101      	movs	r1, #1
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f002 fc11 	bl	800476a <HAL_CAN_GetRxMessage>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e>
			RxData_Reserved) != HAL_OK) {
		Error_Handler();
 8001f4e:	f000 f979 	bl	8002244 <Error_Handler>
	}
	if (RxHeader_Reserved.StdId == 0x000) {
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10f      	bne.n	8001f7a <HAL_CAN_RxFifo1MsgPendingCallback+0x46>
		// Emergency Release JERMA. GAS GAS GAS
		printf("[!HYDROGEN BOARD]: LEAK!!! Releasing JERMAAA");
 8001f5a:	480c      	ldr	r0, [pc, #48]	; (8001f8c <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 8001f5c:	f00b f90e 	bl	800d17c <iprintf>
		osSemaphoreRelease(RELEASE_JERMA_GASHandle);
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f007 fb71 	bl	800964c <osSemaphoreRelease>
		osMessageQueuePut(CAN_JERMA_GAS_LEAKHandle, RxData_Reserved, 0,
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f72:	2200      	movs	r2, #0
 8001f74:	4903      	ldr	r1, [pc, #12]	; (8001f84 <HAL_CAN_RxFifo1MsgPendingCallback+0x50>)
 8001f76:	f007 fc21 	bl	80097bc <osMessageQueuePut>
		osWaitForever);
	}

}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	2000043c 	.word	0x2000043c
 8001f88:	20000418 	.word	0x20000418
 8001f8c:	0800f40c 	.word	0x0800f40c
 8001f90:	20000508 	.word	0x20000508
 8001f94:	2000045c 	.word	0x2000045c

08001f98 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9e:	f107 030c 	add.w	r3, r7, #12
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]
 8001fac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fae:	4b50      	ldr	r3, [pc, #320]	; (80020f0 <MX_GPIO_Init+0x158>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb2:	4a4f      	ldr	r2, [pc, #316]	; (80020f0 <MX_GPIO_Init+0x158>)
 8001fb4:	f043 0304 	orr.w	r3, r3, #4
 8001fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fba:	4b4d      	ldr	r3, [pc, #308]	; (80020f0 <MX_GPIO_Init+0x158>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	4b4a      	ldr	r3, [pc, #296]	; (80020f0 <MX_GPIO_Init+0x158>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	4a49      	ldr	r2, [pc, #292]	; (80020f0 <MX_GPIO_Init+0x158>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd2:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <MX_GPIO_Init+0x158>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	4b44      	ldr	r3, [pc, #272]	; (80020f0 <MX_GPIO_Init+0x158>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	4a43      	ldr	r2, [pc, #268]	; (80020f0 <MX_GPIO_Init+0x158>)
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fea:	4b41      	ldr	r3, [pc, #260]	; (80020f0 <MX_GPIO_Init+0x158>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ffc:	483d      	ldr	r0, [pc, #244]	; (80020f4 <MX_GPIO_Init+0x15c>)
 8001ffe:	f003 f95d 	bl	80052bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_NSS_GPIO_GPIO_Port, SPI_NSS_GPIO_Pin, GPIO_PIN_RESET);
 8002002:	2200      	movs	r2, #0
 8002004:	2110      	movs	r1, #16
 8002006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800200a:	f003 f957 	bl	80052bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_NRST_GPIO_Port, RF_NRST_Pin, GPIO_PIN_RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	2120      	movs	r1, #32
 8002012:	4839      	ldr	r0, [pc, #228]	; (80020f8 <MX_GPIO_Init+0x160>)
 8002014:	f003 f952 	bl	80052bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO5_Pin;
 8002018:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800201c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800201e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002022:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO5_GPIO_Port, &GPIO_InitStruct);
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	4619      	mov	r1, r3
 800202e:	4831      	ldr	r0, [pc, #196]	; (80020f4 <MX_GPIO_Init+0x15c>)
 8002030:	f002 ffda 	bl	8004fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8002034:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002038:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203a:	2301      	movs	r3, #1
 800203c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8002046:	f107 030c 	add.w	r3, r7, #12
 800204a:	4619      	mov	r1, r3
 800204c:	4829      	ldr	r0, [pc, #164]	; (80020f4 <MX_GPIO_Init+0x15c>)
 800204e:	f002 ffcb 	bl	8004fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_NSS_GPIO_Pin;
 8002052:	2310      	movs	r3, #16
 8002054:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002056:	2301      	movs	r3, #1
 8002058:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_NSS_GPIO_GPIO_Port, &GPIO_InitStruct);
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	4619      	mov	r1, r3
 8002068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800206c:	f002 ffbc 	bl	8004fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin|DIO2_Pin|DIO3_Pin;
 8002070:	23c3      	movs	r3, #195	; 0xc3
 8002072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002074:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002078:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207e:	f107 030c 	add.w	r3, r7, #12
 8002082:	4619      	mov	r1, r3
 8002084:	481c      	ldr	r0, [pc, #112]	; (80020f8 <MX_GPIO_Init+0x160>)
 8002086:	f002 ffaf 	bl	8004fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800208a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800208e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800209c:	2300      	movs	r3, #0
 800209e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	4619      	mov	r1, r3
 80020a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020aa:	f002 ff9d 	bl	8004fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO4_Pin;
 80020ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO4_GPIO_Port, &GPIO_InitStruct);
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	4619      	mov	r1, r3
 80020c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c8:	f002 ff8e 	bl	8004fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_NRST_Pin;
 80020cc:	2320      	movs	r3, #32
 80020ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d0:	2301      	movs	r3, #1
 80020d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_NRST_GPIO_Port, &GPIO_InitStruct);
 80020dc:	f107 030c 	add.w	r3, r7, #12
 80020e0:	4619      	mov	r1, r3
 80020e2:	4805      	ldr	r0, [pc, #20]	; (80020f8 <MX_GPIO_Init+0x160>)
 80020e4:	f002 ff80 	bl	8004fe8 <HAL_GPIO_Init>

}
 80020e8:	bf00      	nop
 80020ea:	3720      	adds	r7, #32
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40021000 	.word	0x40021000
 80020f4:	48000800 	.word	0x48000800
 80020f8:	48000400 	.word	0x48000400

080020fc <_write>:
int _write(int file, char *ptr, int len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	b29a      	uxth	r2, r3
 800210c:	f04f 33ff 	mov.w	r3, #4294967295
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	4804      	ldr	r0, [pc, #16]	; (8002124 <_write+0x28>)
 8002114:	f006 fc66 	bl	80089e4 <HAL_UART_Transmit>
	return len;
 8002118:	687b      	ldr	r3, [r7, #4]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000674 	.word	0x20000674

08002128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800212c:	f002 f8b7 	bl	800429e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002130:	f000 f81d 	bl	800216e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002134:	f7ff ff30 	bl	8001f98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002138:	f002 f800 	bl	800413c <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800213c:	f7ff fc82 	bl	8001a44 <MX_CAN1_Init>
  MX_TIM1_Init();
 8002140:	f001 fe42 	bl	8003dc8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002144:	f001 fef8 	bl	8003f38 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002148:	f001 fb8a 	bl	8003860 <MX_SPI1_Init>
  MX_RNG_Init();
 800214c:	f001 fb30 	bl	80037b0 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002150:	f007 f8fc 	bl	800934c <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002154:	f7ff fdac 	bl	8001cb0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002158:	f007 f91c 	bl	8009394 <osKernelStart>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_Delay(500);
 800215c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002160:	f002 f8d6 	bl	8004310 <HAL_Delay>
		//HAL_GPIO_WritePin(GPIOA, LED_D1_Pin, GPIO_PIN_SET);

		//CAN_Transmit(TxData, sizeof(TxData));
		//CAN_Write_Hello();
		HAL_Delay(500);
 8002164:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002168:	f002 f8d2 	bl	8004310 <HAL_Delay>
		HAL_Delay(500);
 800216c:	e7f6      	b.n	800215c <main+0x34>

0800216e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b096      	sub	sp, #88	; 0x58
 8002172:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	2244      	movs	r2, #68	; 0x44
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f00b f953 	bl	800d428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002182:	463b      	mov	r3, r7
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002190:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002194:	f003 f8b8 	bl	8005308 <HAL_PWREx_ControlVoltageScaling>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800219e:	f000 f851 	bl	8002244 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021a2:	2301      	movs	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80021a6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80021aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ac:	2302      	movs	r3, #2
 80021ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021b0:	2303      	movs	r3, #3
 80021b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80021b4:	2301      	movs	r3, #1
 80021b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80021b8:	2314      	movs	r3, #20
 80021ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80021bc:	2307      	movs	r3, #7
 80021be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80021c0:	2302      	movs	r3, #2
 80021c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80021c4:	2302      	movs	r3, #2
 80021c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	4618      	mov	r0, r3
 80021ce:	f003 f8f1 	bl	80053b4 <HAL_RCC_OscConfig>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80021d8:	f000 f834 	bl	8002244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021dc:	230f      	movs	r3, #15
 80021de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021e0:	2303      	movs	r3, #3
 80021e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80021f0:	463b      	mov	r3, r7
 80021f2:	2104      	movs	r1, #4
 80021f4:	4618      	mov	r0, r3
 80021f6:	f003 fcf1 	bl	8005bdc <HAL_RCC_ClockConfig>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002200:	f000 f820 	bl	8002244 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_16);
 8002204:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002208:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800220c:	2000      	movs	r0, #0
 800220e:	f003 fde5 	bl	8005ddc <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002212:	f003 ff0d 	bl	8006030 <HAL_RCC_EnableCSS>
}
 8002216:	bf00      	nop
 8002218:	3758      	adds	r7, #88	; 0x58
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a04      	ldr	r2, [pc, #16]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d101      	bne.n	8002236 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002232:	f002 f84d 	bl	80042d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40001000 	.word	0x40001000

08002244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800224a:	b672      	cpsid	i
}
 800224c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	e002      	b.n	800225a <Error_Handler+0x16>
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	3301      	adds	r3, #1
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	4a1a      	ldr	r2, [pc, #104]	; (80022c8 <Error_Handler+0x84>)
 800225e:	4293      	cmp	r3, r2
 8002260:	ddf8      	ble.n	8002254 <Error_Handler+0x10>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D1_PWM_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	e002      	b.n	800226e <Error_Handler+0x2a>
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	3301      	adds	r3, #1
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4a15      	ldr	r2, [pc, #84]	; (80022c8 <Error_Handler+0x84>)
 8002272:	4293      	cmp	r3, r2
 8002274:	ddf8      	ble.n	8002268 <Error_Handler+0x24>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D2_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	e002      	b.n	8002282 <Error_Handler+0x3e>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	3301      	adds	r3, #1
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <Error_Handler+0x84>)
 8002286:	4293      	cmp	r3, r2
 8002288:	ddf8      	ble.n	800227c <Error_Handler+0x38>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D3_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	e002      	b.n	8002296 <Error_Handler+0x52>
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	3301      	adds	r3, #1
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	4a0b      	ldr	r2, [pc, #44]	; (80022c8 <Error_Handler+0x84>)
 800229a:	4293      	cmp	r3, r2
 800229c:	ddf8      	ble.n	8002290 <Error_Handler+0x4c>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D1_Pin, GPIO_PIN_RESET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 800229e:	2300      	movs	r3, #0
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	e002      	b.n	80022aa <Error_Handler+0x66>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3301      	adds	r3, #1
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a06      	ldr	r2, [pc, #24]	; (80022c8 <Error_Handler+0x84>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	ddf8      	ble.n	80022a4 <Error_Handler+0x60>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D2_Pin, GPIO_PIN_RESET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	603b      	str	r3, [r7, #0]
 80022b6:	e002      	b.n	80022be <Error_Handler+0x7a>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	3301      	adds	r3, #1
 80022bc:	603b      	str	r3, [r7, #0]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	4a01      	ldr	r2, [pc, #4]	; (80022c8 <Error_Handler+0x84>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	ddf8      	ble.n	80022b8 <Error_Handler+0x74>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80022c6:	e7c2      	b.n	800224e <Error_Handler+0xa>
 80022c8:	000c34ff 	.word	0x000c34ff

080022cc <read_register>:

#define RFM95_REGISTER_INVERT_IQ_1_RX                    		0x67
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19

static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	460b      	mov	r3, r1
 80022da:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6858      	ldr	r0, [r3, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	891b      	ldrh	r3, [r3, #8]
 80022e4:	2200      	movs	r2, #0
 80022e6:	4619      	mov	r1, r3
 80022e8:	f002 ffe8 	bl	80052bc <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 80022ec:	7afb      	ldrb	r3, [r7, #11]
 80022ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	f107 0117 	add.w	r1, r7, #23
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	2201      	movs	r2, #1
 8002304:	f004 fb02 	bl	800690c <HAL_SPI_Transmit>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <read_register+0x46>
		return false;
 800230e:	2300      	movs	r3, #0
 8002310:	e016      	b.n	8002340 <read_register+0x74>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	b29a      	uxth	r2, r3
 800231a:	f04f 33ff 	mov.w	r3, #4294967295
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	f004 fc62 	bl	8006be8 <HAL_SPI_Receive>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <read_register+0x62>
		return false;
 800232a:	2300      	movs	r3, #0
 800232c:	e008      	b.n	8002340 <read_register+0x74>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6858      	ldr	r0, [r3, #4]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	891b      	ldrh	r3, [r3, #8]
 8002336:	2201      	movs	r2, #1
 8002338:	4619      	mov	r1, r3
 800233a:	f002 ffbf 	bl	80052bc <HAL_GPIO_WritePin>

	return true;
 800233e:	2301      	movs	r3, #1
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <write_register>:

static bool write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	70fb      	strb	r3, [r7, #3]
 8002354:	4613      	mov	r3, r2
 8002356:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6858      	ldr	r0, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	891b      	ldrh	r3, [r3, #8]
 8002360:	2200      	movs	r2, #0
 8002362:	4619      	mov	r1, r3
 8002364:	f002 ffaa 	bl	80052bc <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800236e:	b2db      	uxtb	r3, r3
 8002370:	733b      	strb	r3, [r7, #12]
 8002372:	78bb      	ldrb	r3, [r7, #2]
 8002374:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	f107 010c 	add.w	r1, r7, #12
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
 8002382:	2202      	movs	r2, #2
 8002384:	f004 fac2 	bl	800690c <HAL_SPI_Transmit>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <write_register+0x4a>
		return false;
 800238e:	2300      	movs	r3, #0
 8002390:	e008      	b.n	80023a4 <write_register+0x5c>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6858      	ldr	r0, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	891b      	ldrh	r3, [r3, #8]
 800239a:	2201      	movs	r2, #1
 800239c:	4619      	mov	r1, r3
 800239e:	f002 ff8d 	bl	80052bc <HAL_GPIO_WritePin>

	return true;
 80023a2:	2301      	movs	r3, #1
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <config_set_channel>:

static void config_set_channel(rfm95_handle_t *handle, uint8_t channel_index, uint32_t frequency)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	460b      	mov	r3, r1
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	72fb      	strb	r3, [r7, #11]
	assert(channel_index < 16);
 80023ba:	7afb      	ldrb	r3, [r7, #11]
 80023bc:	2b0f      	cmp	r3, #15
 80023be:	d905      	bls.n	80023cc <config_set_channel+0x20>
 80023c0:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <config_set_channel+0x54>)
 80023c2:	4a10      	ldr	r2, [pc, #64]	; (8002404 <config_set_channel+0x58>)
 80023c4:	216d      	movs	r1, #109	; 0x6d
 80023c6:	4810      	ldr	r0, [pc, #64]	; (8002408 <config_set_channel+0x5c>)
 80023c8:	f00a f980 	bl	800c6cc <__assert_func>
	handle->config.channels[channel_index].frequency = frequency;
 80023cc:	7afa      	ldrb	r2, [r7, #11]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	321a      	adds	r2, #26
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	handle->config.channel_mask |= (1 << channel_index);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80023de:	b21a      	sxth	r2, r3
 80023e0:	7afb      	ldrb	r3, [r7, #11]
 80023e2:	2101      	movs	r1, #1
 80023e4:	fa01 f303 	lsl.w	r3, r1, r3
 80023e8:	b21b      	sxth	r3, r3
 80023ea:	4313      	orrs	r3, r2
 80023ec:	b21b      	sxth	r3, r3
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	0800f43c 	.word	0x0800f43c
 8002404:	0800f650 	.word	0x0800f650
 8002408:	0800f450 	.word	0x0800f450

0800240c <reset>:
	config_set_channel(handle, 1, 868300000);
	config_set_channel(handle, 2, 868500000);
}

static void reset(rfm95_handle_t *handle)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68d8      	ldr	r0, [r3, #12]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	8a1b      	ldrh	r3, [r3, #16]
 800241c:	2200      	movs	r2, #0
 800241e:	4619      	mov	r1, r3
 8002420:	f002 ff4c 	bl	80052bc <HAL_GPIO_WritePin>
	//HAL_Delay(1); // 0.1ms would theoretically be enough
	osDelay(5);
 8002424:	2005      	movs	r0, #5
 8002426:	f007 f86d 	bl	8009504 <osDelay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68d8      	ldr	r0, [r3, #12]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	8a1b      	ldrh	r3, [r3, #16]
 8002432:	2201      	movs	r2, #1
 8002434:	4619      	mov	r1, r3
 8002436:	f002 ff41 	bl	80052bc <HAL_GPIO_WritePin>
	osDelay(5);
 800243a:	2005      	movs	r0, #5
 800243c:	f007 f862 	bl	8009504 <osDelay>
	//HAL_Delay(5);
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <configure_frequency>:

static bool configure_frequency(rfm95_handle_t *handle, uint32_t frequency)
{
 8002448:	b5b0      	push	{r4, r5, r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
	// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8002452:	6839      	ldr	r1, [r7, #0]
 8002454:	2000      	movs	r0, #0
 8002456:	460a      	mov	r2, r1
 8002458:	4603      	mov	r3, r0
 800245a:	0b55      	lsrs	r5, r2, #13
 800245c:	04d4      	lsls	r4, r2, #19
 800245e:	4a27      	ldr	r2, [pc, #156]	; (80024fc <configure_frequency+0xb4>)
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	4620      	mov	r0, r4
 8002466:	4629      	mov	r1, r5
 8002468:	f7fe fbee 	bl	8000c48 <__aeabi_uldivmod>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 8002474:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	0c02      	lsrs	r2, r0, #16
 8002482:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002486:	0c0b      	lsrs	r3, r1, #16
 8002488:	b2d3      	uxtb	r3, r2
 800248a:	461a      	mov	r2, r3
 800248c:	2106      	movs	r1, #6
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff ff5a 	bl	8002348 <write_register>
 8002494:	4603      	mov	r3, r0
 8002496:	f083 0301 	eor.w	r3, r3, #1
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <configure_frequency+0x5c>
 80024a0:	2300      	movs	r3, #0
 80024a2:	e026      	b.n	80024f2 <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 80024a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	0a02      	lsrs	r2, r0, #8
 80024b2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80024b6:	0a0b      	lsrs	r3, r1, #8
 80024b8:	b2d3      	uxtb	r3, r2
 80024ba:	461a      	mov	r2, r3
 80024bc:	2107      	movs	r1, #7
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff ff42 	bl	8002348 <write_register>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f083 0301 	eor.w	r3, r3, #1
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <configure_frequency+0x8c>
 80024d0:	2300      	movs	r3, #0
 80024d2:	e00e      	b.n	80024f2 <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 80024d4:	7a3b      	ldrb	r3, [r7, #8]
 80024d6:	461a      	mov	r2, r3
 80024d8:	2108      	movs	r1, #8
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ff34 	bl	8002348 <write_register>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f083 0301 	eor.w	r3, r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <configure_frequency+0xa8>
 80024ec:	2300      	movs	r3, #0
 80024ee:	e000      	b.n	80024f2 <configure_frequency+0xaa>

	return true;
 80024f0:	2301      	movs	r3, #1
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bdb0      	pop	{r4, r5, r7, pc}
 80024fa:	bf00      	nop
 80024fc:	01e84800 	.word	0x01e84800

08002500 <configure_channel>:

static bool configure_channel(rfm95_handle_t *handle, size_t channel_index)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
	assert(handle->config.channel_mask & (1 << channel_index));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002510:	461a      	mov	r2, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	fa42 f303 	asr.w	r3, r2, r3
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d105      	bne.n	800252c <configure_channel+0x2c>
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <configure_channel+0x48>)
 8002522:	4a0a      	ldr	r2, [pc, #40]	; (800254c <configure_channel+0x4c>)
 8002524:	2196      	movs	r1, #150	; 0x96
 8002526:	480a      	ldr	r0, [pc, #40]	; (8002550 <configure_channel+0x50>)
 8002528:	f00a f8d0 	bl	800c6cc <__assert_func>
	return configure_frequency(handle, handle->config.channels[channel_index].frequency);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	321a      	adds	r2, #26
 8002532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002536:	4619      	mov	r1, r3
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ff85 	bl	8002448 <configure_frequency>
 800253e:	4603      	mov	r3, r0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	0800f464 	.word	0x0800f464
 800254c:	0800f664 	.word	0x0800f664
 8002550:	0800f450 	.word	0x0800f450

08002554 <wait_for_irq>:

static bool wait_for_irq(rfm95_handle_t *handle, rfm95_interrupt_t interrupt, uint32_t timeout_ms)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	460b      	mov	r3, r1
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	72fb      	strb	r3, [r7, #11]
	uint32_t timeout_tick = handle->get_precision_tick() + timeout_ms * handle->precision_tick_frequency / 1000;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	4798      	blx	r3
 8002568:	4601      	mov	r1, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	fb02 f303 	mul.w	r3, r2, r3
 8002574:	4a0e      	ldr	r2, [pc, #56]	; (80025b0 <wait_for_irq+0x5c>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	099b      	lsrs	r3, r3, #6
 800257c:	440b      	add	r3, r1
 800257e:	617b      	str	r3, [r7, #20]

	while (handle->interrupt_times[interrupt] == 0) {
 8002580:	e008      	b.n	8002594 <wait_for_irq+0x40>
		if (handle->get_precision_tick() >= timeout_tick) {
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	4798      	blx	r3
 8002588:	4602      	mov	r2, r0
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	4293      	cmp	r3, r2
 800258e:	d801      	bhi.n	8002594 <wait_for_irq+0x40>
			return false;
 8002590:	2300      	movs	r3, #0
 8002592:	e008      	b.n	80025a6 <wait_for_irq+0x52>
	while (handle->interrupt_times[interrupt] == 0) {
 8002594:	7afb      	ldrb	r3, [r7, #11]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	332a      	adds	r3, #42	; 0x2a
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0ee      	beq.n	8002582 <wait_for_irq+0x2e>
		}
	}

	return true;
 80025a4:	2301      	movs	r3, #1
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	10624dd3 	.word	0x10624dd3

080025b4 <wait_for_rx_irqs>:

static bool wait_for_rx_irqs(rfm95_handle_t *handle)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	uint32_t timeout_tick = handle->get_precision_tick() +
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c0:	4798      	blx	r3
 80025c2:	4602      	mov	r2, r0
	                        RFM95_RECEIVE_TIMEOUT * handle->precision_tick_frequency / 1000;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4912      	ldr	r1, [pc, #72]	; (800261c <wait_for_rx_irqs+0x68>)
 80025d2:	fba1 1303 	umull	r1, r3, r1, r3
 80025d6:	099b      	lsrs	r3, r3, #6
	uint32_t timeout_tick = handle->get_precision_tick() +
 80025d8:	4413      	add	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]

	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 80025dc:	e008      	b.n	80025f0 <wait_for_rx_irqs+0x3c>
		if (handle->get_precision_tick() >= timeout_tick) {
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	4798      	blx	r3
 80025e4:	4602      	mov	r2, r0
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d801      	bhi.n	80025f0 <wait_for_rx_irqs+0x3c>
			return false;
 80025ec:	2300      	movs	r3, #0
 80025ee:	e011      	b.n	8002614 <wait_for_rx_irqs+0x60>
	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d104      	bne.n	8002604 <wait_for_rx_irqs+0x50>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0ec      	beq.n	80025de <wait_for_rx_irqs+0x2a>
		}
	}

	return handle->interrupt_times[RFM95_INTERRUPT_DIO0] != 0;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800260a:	2b00      	cmp	r3, #0
 800260c:	bf14      	ite	ne
 800260e:	2301      	movne	r3, #1
 8002610:	2300      	moveq	r3, #0
 8002612:	b2db      	uxtb	r3, r3
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	10624dd3 	.word	0x10624dd3

08002620 <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 800262c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002630:	2b01      	cmp	r3, #1
 8002632:	dd03      	ble.n	800263c <rfm95_set_power+0x1c>
 8002634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002638:	2b11      	cmp	r3, #17
 800263a:	dd09      	ble.n	8002650 <rfm95_set_power+0x30>
 800263c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002640:	2b14      	cmp	r3, #20
 8002642:	d005      	beq.n	8002650 <rfm95_set_power+0x30>
 8002644:	4b2c      	ldr	r3, [pc, #176]	; (80026f8 <rfm95_set_power+0xd8>)
 8002646:	4a2d      	ldr	r2, [pc, #180]	; (80026fc <rfm95_set_power+0xdc>)
 8002648:	21b7      	movs	r1, #183	; 0xb7
 800264a:	482d      	ldr	r0, [pc, #180]	; (8002700 <rfm95_set_power+0xe0>)
 800264c:	f00a f83e 	bl	800c6cc <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 8002650:	2300      	movs	r3, #0
 8002652:	733b      	strb	r3, [r7, #12]
	uint8_t pa_dac_config = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	73fb      	strb	r3, [r7, #15]

	if (power >= 2 && power <= 17) {
 8002658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800265c:	2b01      	cmp	r3, #1
 800265e:	dd18      	ble.n	8002692 <rfm95_set_power+0x72>
 8002660:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002664:	2b11      	cmp	r3, #17
 8002666:	dc14      	bgt.n	8002692 <rfm95_set_power+0x72>
		pa_config.max_power = 7;
 8002668:	7b3b      	ldrb	r3, [r7, #12]
 800266a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800266e:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8002670:	7b3b      	ldrb	r3, [r7, #12]
 8002672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002676:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	3b02      	subs	r3, #2
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	b2da      	uxtb	r2, r3
 8002684:	7b3b      	ldrb	r3, [r7, #12]
 8002686:	f362 0303 	bfi	r3, r2, #0, #4
 800268a:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 800268c:	2384      	movs	r3, #132	; 0x84
 800268e:	73fb      	strb	r3, [r7, #15]
 8002690:	e011      	b.n	80026b6 <rfm95_set_power+0x96>

	} else if (power == 20) {
 8002692:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002696:	2b14      	cmp	r3, #20
 8002698:	d10d      	bne.n	80026b6 <rfm95_set_power+0x96>
		pa_config.max_power = 7;
 800269a:	7b3b      	ldrb	r3, [r7, #12]
 800269c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80026a0:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 80026a2:	7b3b      	ldrb	r3, [r7, #12]
 80026a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026a8:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 80026aa:	7b3b      	ldrb	r3, [r7, #12]
 80026ac:	f043 030f 	orr.w	r3, r3, #15
 80026b0:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 80026b2:	2387      	movs	r3, #135	; 0x87
 80026b4:	73fb      	strb	r3, [r7, #15]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 80026b6:	7b3b      	ldrb	r3, [r7, #12]
 80026b8:	461a      	mov	r2, r3
 80026ba:	2109      	movs	r1, #9
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff fe43 	bl	8002348 <write_register>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f083 0301 	eor.w	r3, r3, #1
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <rfm95_set_power+0xb2>
 80026ce:	2300      	movs	r3, #0
 80026d0:	e00e      	b.n	80026f0 <rfm95_set_power+0xd0>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	461a      	mov	r2, r3
 80026d6:	214d      	movs	r1, #77	; 0x4d
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff fe35 	bl	8002348 <write_register>
 80026de:	4603      	mov	r3, r0
 80026e0:	f083 0301 	eor.w	r3, r3, #1
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <rfm95_set_power+0xce>
 80026ea:	2300      	movs	r3, #0
 80026ec:	e000      	b.n	80026f0 <rfm95_set_power+0xd0>

	return true;
 80026ee:	2301      	movs	r3, #1
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	0800f498 	.word	0x0800f498
 80026fc:	0800f678 	.word	0x0800f678
 8002700:	0800f450 	.word	0x0800f450

08002704 <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
//	assert(handle->get_precision_tick != NULL);
//	assert(handle->random_int != NULL);
//	assert(handle->precision_sleep_until != NULL);
//	assert(handle->precision_tick_frequency > 10000);

	reset(handle);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff fe7d 	bl	800240c <reset>
//		config_load_default(handle);
//	}

	// Check for correct version.
	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 8002712:	f107 020f 	add.w	r2, r7, #15
 8002716:	2301      	movs	r3, #1
 8002718:	2142      	movs	r1, #66	; 0x42
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff fdd6 	bl	80022cc <read_register>
 8002720:	4603      	mov	r3, r0
 8002722:	f083 0301 	eor.w	r3, r3, #1
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <rfm95_init+0x2c>
 800272c:	2300      	movs	r3, #0
 800272e:	e0b6      	b.n	800289e <rfm95_init+0x19a>
	//if (version != RFM9x_VER) return false;
	printf("RFM Version: %d", version);
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	4619      	mov	r1, r3
 8002734:	485c      	ldr	r0, [pc, #368]	; (80028a8 <rfm95_init+0x1a4>)
 8002736:	f00a fd21 	bl	800d17c <iprintf>
	// Module must be placed in sleep mode before switching to lora.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;
 800273a:	2200      	movs	r2, #0
 800273c:	2101      	movs	r1, #1
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff fe02 	bl	8002348 <write_register>
 8002744:	4603      	mov	r3, r0
 8002746:	f083 0301 	eor.w	r3, r3, #1
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <rfm95_init+0x50>
 8002750:	2300      	movs	r3, #0
 8002752:	e0a4      	b.n	800289e <rfm95_init+0x19a>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8002754:	2280      	movs	r2, #128	; 0x80
 8002756:	2101      	movs	r1, #1
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff fdf5 	bl	8002348 <write_register>
 800275e:	4603      	mov	r3, r0
 8002760:	f083 0301 	eor.w	r3, r3, #1
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <rfm95_init+0x6a>
 800276a:	2300      	movs	r3, #0
 800276c:	e097      	b.n	800289e <rfm95_init+0x19a>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 800276e:	2200      	movs	r2, #0
 8002770:	2140      	movs	r1, #64	; 0x40
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff fde8 	bl	8002348 <write_register>
 8002778:	4603      	mov	r3, r0
 800277a:	f083 0301 	eor.w	r3, r3, #1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <rfm95_init+0x84>
 8002784:	2300      	movs	r3, #0
 8002786:	e08a      	b.n	800289e <rfm95_init+0x19a>

	if (handle->on_after_interrupts_configured != NULL) {
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <rfm95_init+0x92>
		handle->on_after_interrupts_configured();
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002794:	4798      	blx	r3
	}

	uint8_t temp;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &temp, 1)) return false;
 8002796:	f107 020e 	add.w	r2, r7, #14
 800279a:	2301      	movs	r3, #1
 800279c:	2142      	movs	r1, #66	; 0x42
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff fd94 	bl	80022cc <read_register>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f083 0301 	eor.w	r3, r3, #1
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <rfm95_init+0xb0>
 80027b0:	2300      	movs	r3, #0
 80027b2:	e074      	b.n	800289e <rfm95_init+0x19a>
	// Set module power to 17dbm.
	if (!rfm95_set_power(handle, 17)) return false;
 80027b4:	2111      	movs	r1, #17
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ff32 	bl	8002620 <rfm95_set_power>
 80027bc:	4603      	mov	r3, r0
 80027be:	f083 0301 	eor.w	r3, r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <rfm95_init+0xc8>
 80027c8:	2300      	movs	r3, #0
 80027ca:	e068      	b.n	800289e <rfm95_init+0x19a>

	// Set LNA to the highest gain with 150% boost.
	if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 80027cc:	2223      	movs	r2, #35	; 0x23
 80027ce:	210c      	movs	r1, #12
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff fdb9 	bl	8002348 <write_register>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f083 0301 	eor.w	r3, r3, #1
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <rfm95_init+0xe2>
 80027e2:	2300      	movs	r3, #0
 80027e4:	e05b      	b.n	800289e <rfm95_init+0x19a>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 80027e6:	2200      	movs	r2, #0
 80027e8:	2120      	movs	r1, #32
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff fdac 	bl	8002348 <write_register>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f083 0301 	eor.w	r3, r3, #1
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <rfm95_init+0xfc>
 80027fc:	2300      	movs	r3, #0
 80027fe:	e04e      	b.n	800289e <rfm95_init+0x19a>
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08)) return false;
 8002800:	2208      	movs	r2, #8
 8002802:	2121      	movs	r1, #33	; 0x21
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff fd9f 	bl	8002348 <write_register>
 800280a:	4603      	mov	r3, r0
 800280c:	f083 0301 	eor.w	r3, r3, #1
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <rfm95_init+0x116>
 8002816:	2300      	movs	r3, #0
 8002818:	e041      	b.n	800289e <rfm95_init+0x19a>

	// Set TTN sync word 0x34.
	if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34)) return false;
 800281a:	2234      	movs	r2, #52	; 0x34
 800281c:	2139      	movs	r1, #57	; 0x39
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff fd92 	bl	8002348 <write_register>
 8002824:	4603      	mov	r3, r0
 8002826:	f083 0301 	eor.w	r3, r3, #1
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <rfm95_init+0x130>
 8002830:	2300      	movs	r3, #0
 8002832:	e034      	b.n	800289e <rfm95_init+0x19a>

	// Set up TX and RX FIFO base addresses.
	if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80)) return false;
 8002834:	2280      	movs	r2, #128	; 0x80
 8002836:	210e      	movs	r1, #14
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff fd85 	bl	8002348 <write_register>
 800283e:	4603      	mov	r3, r0
 8002840:	f083 0301 	eor.w	r3, r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <rfm95_init+0x14a>
 800284a:	2300      	movs	r3, #0
 800284c:	e027      	b.n	800289e <rfm95_init+0x19a>
	if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00)) return false;
 800284e:	2200      	movs	r2, #0
 8002850:	210f      	movs	r1, #15
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff fd78 	bl	8002348 <write_register>
 8002858:	4603      	mov	r3, r0
 800285a:	f083 0301 	eor.w	r3, r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <rfm95_init+0x164>
 8002864:	2300      	movs	r3, #0
 8002866:	e01a      	b.n	800289e <rfm95_init+0x19a>

	// Maximum payload length of the RFM95 is 64.
	if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64)) return false;
 8002868:	2240      	movs	r2, #64	; 0x40
 800286a:	2123      	movs	r1, #35	; 0x23
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff fd6b 	bl	8002348 <write_register>
 8002872:	4603      	mov	r3, r0
 8002874:	f083 0301 	eor.w	r3, r3, #1
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <rfm95_init+0x17e>
 800287e:	2300      	movs	r3, #0
 8002880:	e00d      	b.n	800289e <rfm95_init+0x19a>

	// Let module sleep after initialisation.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8002882:	2280      	movs	r2, #128	; 0x80
 8002884:	2101      	movs	r1, #1
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff fd5e 	bl	8002348 <write_register>
 800288c:	4603      	mov	r3, r0
 800288e:	f083 0301 	eor.w	r3, r3, #1
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <rfm95_init+0x198>
 8002898:	2300      	movs	r3, #0
 800289a:	e000      	b.n	800289e <rfm95_init+0x19a>

	return true;
 800289c:	2301      	movs	r3, #1
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	0800f4c4 	.word	0x0800f4c4

080028ac <process_mac_commands>:

static bool process_mac_commands(rfm95_handle_t *handle, const uint8_t *frame_payload,
                                 size_t frame_payload_length, uint8_t answer_buffer[51], uint8_t *answer_buffer_length,
                                 int8_t snr)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08c      	sub	sp, #48	; 0x30
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
	uint8_t index = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t answer_index = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	while (index < frame_payload_length) {
 80028c6:	bf00      	nop
 80028c8:	e1d8      	b.n	8002c7c <process_mac_commands+0x3d0>
		switch (frame_payload[index++])
 80028ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80028d4:	461a      	mov	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	4413      	add	r3, r2
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	3b01      	subs	r3, #1
 80028de:	2b0c      	cmp	r3, #12
 80028e0:	f200 81cc 	bhi.w	8002c7c <process_mac_commands+0x3d0>
 80028e4:	a201      	add	r2, pc, #4	; (adr r2, 80028ec <process_mac_commands+0x40>)
 80028e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ea:	bf00      	nop
 80028ec:	08002921 	.word	0x08002921
 80028f0:	0800293b 	.word	0x0800293b
 80028f4:	08002959 	.word	0x08002959
 80028f8:	08002977 	.word	0x08002977
 80028fc:	08002991 	.word	0x08002991
 8002900:	08002a3f 	.word	0x08002a3f
 8002904:	08002aad 	.word	0x08002aad
 8002908:	08002bdf 	.word	0x08002bdf
 800290c:	08002c3f 	.word	0x08002c3f
 8002910:	08002c4d 	.word	0x08002c4d
 8002914:	08002c5f 	.word	0x08002c5f
 8002918:	08002c6d 	.word	0x08002c6d
 800291c:	08002c7b 	.word	0x08002c7b
		{
			case 0x01: // ResetConf
			{
				if (index >= frame_payload_length) return false;
 8002920:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	429a      	cmp	r2, r3
 8002928:	d801      	bhi.n	800292e <process_mac_commands+0x82>
 800292a:	2300      	movs	r3, #0
 800292c:	e1b1      	b.n	8002c92 <process_mac_commands+0x3e6>

				index += 1;
 800292e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002932:	3301      	adds	r3, #1
 8002934:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8002938:	e1a0      	b.n	8002c7c <process_mac_commands+0x3d0>
			}
			case 0x02: // LinkCheckReq
			{
				if ((index + 1) >= frame_payload_length) return false;
 800293a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800293e:	3301      	adds	r3, #1
 8002940:	461a      	mov	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4293      	cmp	r3, r2
 8002946:	d801      	bhi.n	800294c <process_mac_commands+0xa0>
 8002948:	2300      	movs	r3, #0
 800294a:	e1a2      	b.n	8002c92 <process_mac_commands+0x3e6>

				index += 2;
 800294c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002950:	3302      	adds	r3, #2
 8002952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8002956:	e191      	b.n	8002c7c <process_mac_commands+0x3d0>
			}
			case 0x03: // LinkADRReq
			{
				if ((index + 3) >= frame_payload_length) return false;
 8002958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800295c:	3303      	adds	r3, #3
 800295e:	461a      	mov	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4293      	cmp	r3, r2
 8002964:	d801      	bhi.n	800296a <process_mac_commands+0xbe>
 8002966:	2300      	movs	r3, #0
 8002968:	e193      	b.n	8002c92 <process_mac_commands+0x3e6>

				index += 4;
 800296a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800296e:	3304      	adds	r3, #4
 8002970:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8002974:	e182      	b.n	8002c7c <process_mac_commands+0x3d0>
			}
			case 0x04: // DutyCycleReq
			{
				if (index >= frame_payload_length) return false;
 8002976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	429a      	cmp	r2, r3
 800297e:	d801      	bhi.n	8002984 <process_mac_commands+0xd8>
 8002980:	2300      	movs	r3, #0
 8002982:	e186      	b.n	8002c92 <process_mac_commands+0x3e6>

				index += 1;
 8002984:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002988:	3301      	adds	r3, #1
 800298a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800298e:	e175      	b.n	8002c7c <process_mac_commands+0x3d0>
			}
			case 0x05: // RXParamSetupReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8002990:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002994:	3304      	adds	r3, #4
 8002996:	461a      	mov	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4293      	cmp	r3, r2
 800299c:	d801      	bhi.n	80029a2 <process_mac_commands+0xf6>
 800299e:	2300      	movs	r3, #0
 80029a0:	e177      	b.n	8002c92 <process_mac_commands+0x3e6>
				if ((answer_index + 2) >= 51) return false;
 80029a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80029a6:	2b30      	cmp	r3, #48	; 0x30
 80029a8:	d901      	bls.n	80029ae <process_mac_commands+0x102>
 80029aa:	2300      	movs	r3, #0
 80029ac:	e171      	b.n	8002c92 <process_mac_commands+0x3e6>

				uint8_t dl_settings = frame_payload[index++];
 80029ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80029b8:	461a      	mov	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	4413      	add	r3, r2
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	77bb      	strb	r3, [r7, #30]
				uint8_t frequency_lsb = frame_payload[index++];
 80029c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80029cc:	461a      	mov	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	4413      	add	r3, r2
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	777b      	strb	r3, [r7, #29]
				uint8_t frequency_msb = frame_payload[index++];
 80029d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80029e0:	461a      	mov	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4413      	add	r3, r2
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	773b      	strb	r3, [r7, #28]
				uint8_t frequency_hsb = frame_payload[index++];
 80029ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80029f4:	461a      	mov	r2, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	4413      	add	r3, r2
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	76fb      	strb	r3, [r7, #27]
				uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;
 80029fe:	7f7a      	ldrb	r2, [r7, #29]
 8002a00:	7f3b      	ldrb	r3, [r7, #28]
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	431a      	orrs	r2, r3
 8002a06:	7efb      	ldrb	r3, [r7, #27]
 8002a08:	041b      	lsls	r3, r3, #16
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	2264      	movs	r2, #100	; 0x64
 8002a0e:	fb02 f303 	mul.w	r3, r2, r3
 8002a12:	617b      	str	r3, [r7, #20]

				answer_buffer[answer_index++] = 0x05;
 8002a14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002a1e:	461a      	mov	r2, r3
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	4413      	add	r3, r2
 8002a24:	2205      	movs	r2, #5
 8002a26:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0b0000111;
 8002a28:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002a32:	461a      	mov	r2, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	4413      	add	r3, r2
 8002a38:	2207      	movs	r2, #7
 8002a3a:	701a      	strb	r2, [r3, #0]
				break;
 8002a3c:	e11e      	b.n	8002c7c <process_mac_commands+0x3d0>
			}
			case 0x06: // DevStatusReq
			{
				if ((answer_index + 3) >= 51) return false;
 8002a3e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a42:	2b2f      	cmp	r3, #47	; 0x2f
 8002a44:	d901      	bls.n	8002a4a <process_mac_commands+0x19e>
 8002a46:	2300      	movs	r3, #0
 8002a48:	e123      	b.n	8002c92 <process_mac_commands+0x3e6>

				uint8_t margin = (uint8_t)(snr & 0x1f);
 8002a4a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	f887 3020 	strb.w	r3, [r7, #32]
				uint8_t battery_level = handle->get_battery_level == NULL ? 0xff : handle->get_battery_level();
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d004      	beq.n	8002a68 <process_mac_commands+0x1bc>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a62:	4798      	blx	r3
 8002a64:	4603      	mov	r3, r0
 8002a66:	e000      	b.n	8002a6a <process_mac_commands+0x1be>
 8002a68:	23ff      	movs	r3, #255	; 0xff
 8002a6a:	77fb      	strb	r3, [r7, #31]

				answer_buffer[answer_index++] = 0x06;
 8002a6c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002a76:	461a      	mov	r2, r3
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	2206      	movs	r2, #6
 8002a7e:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = battery_level;
 8002a80:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	4413      	add	r3, r2
 8002a90:	7ffa      	ldrb	r2, [r7, #31]
 8002a92:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = margin;
 8002a94:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002aa8:	701a      	strb	r2, [r3, #0]
				break;
 8002aaa:	e0e7      	b.n	8002c7c <process_mac_commands+0x3d0>
			}
			case 0x07: // NewChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8002aac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d801      	bhi.n	8002abe <process_mac_commands+0x212>
 8002aba:	2300      	movs	r3, #0
 8002abc:	e0e9      	b.n	8002c92 <process_mac_commands+0x3e6>
				if ((answer_index + 2) >= 51) return false;
 8002abe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002ac2:	2b30      	cmp	r3, #48	; 0x30
 8002ac4:	d901      	bls.n	8002aca <process_mac_commands+0x21e>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e0e3      	b.n	8002c92 <process_mac_commands+0x3e6>

				uint8_t channel_index = frame_payload[index++];
 8002aca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	4413      	add	r3, r2
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				uint8_t frequency_lsb = frame_payload[index++];
 8002ae0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8002aea:	461a      	mov	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4413      	add	r3, r2
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				uint8_t frequency_msb = frame_payload[index++];
 8002af6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8002b00:	461a      	mov	r2, r3
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	4413      	add	r3, r2
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				uint8_t frequency_hsb = frame_payload[index++];
 8002b0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8002b16:	461a      	mov	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				uint8_t min_max_dr = frame_payload[index++];
 8002b22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4413      	add	r3, r2
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

				uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;
 8002b38:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002b3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b40:	021b      	lsls	r3, r3, #8
 8002b42:	431a      	orrs	r2, r3
 8002b44:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002b48:	041b      	lsls	r3, r3, #16
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	2264      	movs	r2, #100	; 0x64
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
				uint8_t min_dr = min_max_dr & 0x0f;
 8002b54:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				uint8_t max_dr = (min_max_dr >> 4) & 0x0f;
 8002b60:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002b64:	091b      	lsrs	r3, r3, #4
 8002b66:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

				if (channel_index >= 3) {
 8002b6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d906      	bls.n	8002b80 <process_mac_commands+0x2d4>
					config_set_channel(handle, channel_index, frequency);
 8002b72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b78:	4619      	mov	r1, r3
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f7ff fc16 	bl	80023ac <config_set_channel>
				}

				bool dr_supports_125kHz_SF7 = min_dr <= 5 || max_dr >= 5;
 8002b80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b84:	2b05      	cmp	r3, #5
 8002b86:	d903      	bls.n	8002b90 <process_mac_commands+0x2e4>
 8002b88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d901      	bls.n	8002b94 <process_mac_commands+0x2e8>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <process_mac_commands+0x2ea>
 8002b94:	2300      	movs	r3, #0
 8002b96:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002b9a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

				answer_buffer[answer_index++] = 0x07;
 8002ba6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	2207      	movs	r2, #7
 8002bb8:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0x01 | (dr_supports_125kHz_SF7 << 1);
 8002bba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	b25b      	sxtb	r3, r3
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	b25a      	sxtb	r2, r3
 8002bc8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002bcc:	1c59      	adds	r1, r3, #1
 8002bce:	f887 102e 	strb.w	r1, [r7, #46]	; 0x2e
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	440b      	add	r3, r1
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	701a      	strb	r2, [r3, #0]
				break;
 8002bdc:	e04e      	b.n	8002c7c <process_mac_commands+0x3d0>
			}
			case 0x08: // RXTimingSetupReq
			{
				if (index >= frame_payload_length) return false;
 8002bde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d801      	bhi.n	8002bec <process_mac_commands+0x340>
 8002be8:	2300      	movs	r3, #0
 8002bea:	e052      	b.n	8002c92 <process_mac_commands+0x3e6>
				if ((answer_index + 2) >= 51) return false;
 8002bec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002bf0:	2b30      	cmp	r3, #48	; 0x30
 8002bf2:	d901      	bls.n	8002bf8 <process_mac_commands+0x34c>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e04c      	b.n	8002c92 <process_mac_commands+0x3e6>

				handle->config.rx1_delay = frame_payload[index++] & 0xf;
 8002bf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8002c02:	461a      	mov	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	4413      	add	r3, r2
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
				if (handle->config.rx1_delay == 0) {
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d103      	bne.n	8002c28 <process_mac_commands+0x37c>
					handle->config.rx1_delay = 1;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
				}

				answer_buffer[answer_index++] = 0x08;
 8002c28:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002c32:	461a      	mov	r2, r3
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	4413      	add	r3, r2
 8002c38:	2208      	movs	r2, #8
 8002c3a:	701a      	strb	r2, [r3, #0]
				break;
 8002c3c:	e01e      	b.n	8002c7c <process_mac_commands+0x3d0>
			}
			case 0x09: // TxParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8002c3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d819      	bhi.n	8002c7c <process_mac_commands+0x3d0>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	e022      	b.n	8002c92 <process_mac_commands+0x3e6>

				break;
			}
			case 0x0a: // DlChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8002c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c50:	3304      	adds	r3, #4
 8002c52:	461a      	mov	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d810      	bhi.n	8002c7c <process_mac_commands+0x3d0>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e019      	b.n	8002c92 <process_mac_commands+0x3e6>

				break;
			}
			case 0x0b: // RekeyConf
			{
				if (index >= frame_payload_length) return false;
 8002c5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d809      	bhi.n	8002c7c <process_mac_commands+0x3d0>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	e012      	b.n	8002c92 <process_mac_commands+0x3e6>

				break;
			}
			case 0x0c: // ADRParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8002c6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d802      	bhi.n	8002c7c <process_mac_commands+0x3d0>
 8002c76:	2300      	movs	r3, #0
 8002c78:	e00b      	b.n	8002c92 <process_mac_commands+0x3e6>

				break;
			}
			case 0x0d: // DeviceTimeReq
			{
				break;
 8002c7a:	bf00      	nop
	while (index < frame_payload_length) {
 8002c7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	f63f ae21 	bhi.w	80028ca <process_mac_commands+0x1e>
			}
		}
	}

	*answer_buffer_length = answer_index;
 8002c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002c8e:	701a      	strb	r2, [r3, #0]
	return true;
 8002c90:	2301      	movs	r3, #1
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3730      	adds	r7, #48	; 0x30
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop

08002c9c <receive_at_scheduled_time>:

static bool receive_at_scheduled_time(rfm95_handle_t *handle, uint32_t scheduled_time)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
	// Sleep until 1ms before the scheduled time.
	handle->precision_sleep_until(scheduled_time - handle->precision_tick_frequency / 1000);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cae:	492b      	ldr	r1, [pc, #172]	; (8002d5c <receive_at_scheduled_time+0xc0>)
 8002cb0:	fba1 1202 	umull	r1, r2, r1, r2
 8002cb4:	0992      	lsrs	r2, r2, #6
 8002cb6:	6839      	ldr	r1, [r7, #0]
 8002cb8:	1a8a      	subs	r2, r1, r2
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4798      	blx	r3

	// Clear flags and previous interrupt time, configure mapping for RX done.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2140      	movs	r1, #64	; 0x40
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff fb40 	bl	8002348 <write_register>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f083 0301 	eor.w	r3, r3, #1
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <receive_at_scheduled_time+0x3c>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	e03c      	b.n	8002d52 <receive_at_scheduled_time+0xb6>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 8002cd8:	22ff      	movs	r2, #255	; 0xff
 8002cda:	2112      	movs	r1, #18
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff fb33 	bl	8002348 <write_register>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f083 0301 	eor.w	r3, r3, #1
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <receive_at_scheduled_time+0x56>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e02f      	b.n	8002d52 <receive_at_scheduled_time+0xb6>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 8002d0a:	2281      	movs	r2, #129	; 0x81
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff fb1a 	bl	8002348 <write_register>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f083 0301 	eor.w	r3, r3, #1
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <receive_at_scheduled_time+0x88>
 8002d20:	2300      	movs	r3, #0
 8002d22:	e016      	b.n	8002d52 <receive_at_scheduled_time+0xb6>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 8002d24:	220a      	movs	r2, #10
 8002d26:	2102      	movs	r1, #2
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff fc13 	bl	8002554 <wait_for_irq>

	// Now sleep until the real scheduled time.
	handle->precision_sleep_until(scheduled_time);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d32:	6838      	ldr	r0, [r7, #0]
 8002d34:	4798      	blx	r3

	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_RX_SINGLE)) return false;
 8002d36:	2286      	movs	r2, #134	; 0x86
 8002d38:	2101      	movs	r1, #1
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff fb04 	bl	8002348 <write_register>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f083 0301 	eor.w	r3, r3, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <receive_at_scheduled_time+0xb4>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e000      	b.n	8002d52 <receive_at_scheduled_time+0xb6>

	return true;
 8002d50:	2301      	movs	r3, #1
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	10624dd3 	.word	0x10624dd3

08002d60 <calculate_rx_timings>:

static void calculate_rx_timings(rfm95_handle_t *handle, uint32_t bw, uint8_t sf, uint32_t tx_ticks,
                                 uint32_t *rx_target, uint32_t *rx_window_symbols)
{
 8002d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d64:	b08a      	sub	sp, #40	; 0x28
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	71fb      	strb	r3, [r7, #7]
	volatile int32_t symbol_rate_ns = (int32_t)(((2 << (sf - 1)) * 1000000) / bw);
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	3b01      	subs	r3, #1
 8002d76:	2202      	movs	r2, #2
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	4a29      	ldr	r2, [pc, #164]	; (8002e24 <calculate_rx_timings+0xc4>)
 8002d7e:	fb02 f303 	mul.w	r3, r2, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24

	volatile int32_t rx_timing_error_ns = (int32_t)(handle->precision_tick_drift_ns_per_s * handle->config.rx1_delay);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8002d96:	fb02 f303 	mul.w	r3, r2, r3
 8002d9a:	623b      	str	r3, [r7, #32]
	volatile int32_t rx_window_ns = 2 * symbol_rate_ns + 2 * rx_timing_error_ns;
 8002d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	4413      	add	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	61fb      	str	r3, [r7, #28]
	volatile int32_t rx_offset_ns = 4 * symbol_rate_ns - (rx_timing_error_ns / 2);
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	009a      	lsls	r2, r3, #2
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	0fd9      	lsrs	r1, r3, #31
 8002dae:	440b      	add	r3, r1
 8002db0:	105b      	asrs	r3, r3, #1
 8002db2:	425b      	negs	r3, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
	volatile int32_t rx_offset_ticks = (int32_t)(((int64_t)rx_offset_ns * (int64_t)handle->precision_tick_frequency) / 1000000);
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	17da      	asrs	r2, r3, #31
 8002dbc:	469a      	mov	sl, r3
 8002dbe:	4693      	mov	fp, r2
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	4698      	mov	r8, r3
 8002dc8:	4691      	mov	r9, r2
 8002dca:	fb08 f20b 	mul.w	r2, r8, fp
 8002dce:	fb0a f309 	mul.w	r3, sl, r9
 8002dd2:	4413      	add	r3, r2
 8002dd4:	fbaa 4508 	umull	r4, r5, sl, r8
 8002dd8:	442b      	add	r3, r5
 8002dda:	461d      	mov	r5, r3
 8002ddc:	4a11      	ldr	r2, [pc, #68]	; (8002e24 <calculate_rx_timings+0xc4>)
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	4620      	mov	r0, r4
 8002de4:	4629      	mov	r1, r5
 8002de6:	f7fd fedf 	bl	8000ba8 <__aeabi_ldivmod>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4613      	mov	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]
	*rx_target = tx_ticks + handle->precision_tick_frequency * handle->config.rx1_delay + rx_offset_ticks;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8002dfc:	fb03 f202 	mul.w	r2, r3, r2
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	441a      	add	r2, r3
 8002e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e0a:	601a      	str	r2, [r3, #0]
	*rx_window_symbols = rx_window_ns / symbol_rate_ns;
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e18:	601a      	str	r2, [r3, #0]
}
 8002e1a:	bf00      	nop
 8002e1c:	3728      	adds	r7, #40	; 0x28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e24:	000f4240 	.word	0x000f4240

08002e28 <receive_package>:

static bool receive_package(rfm95_handle_t *handle, uint32_t tx_ticks, uint8_t *payload_buf, size_t *payload_len,
                            int8_t *snr)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08c      	sub	sp, #48	; 0x30
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
	*payload_len = 0;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

	uint32_t rx1_target, rx1_window_symbols;
	calculate_rx_timings(handle, 125000, 7, tx_ticks, &rx1_target, &rx1_window_symbols);
 8002e3c:	f107 0320 	add.w	r3, r7, #32
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2207      	movs	r2, #7
 8002e4c:	49ab      	ldr	r1, [pc, #684]	; (80030fc <receive_package+0x2d4>)
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f7ff ff86 	bl	8002d60 <calculate_rx_timings>

	assert(rx1_window_symbols <= 0x3ff);
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e5a:	d306      	bcc.n	8002e6a <receive_package+0x42>
 8002e5c:	4ba8      	ldr	r3, [pc, #672]	; (8003100 <receive_package+0x2d8>)
 8002e5e:	4aa9      	ldr	r2, [pc, #676]	; (8003104 <receive_package+0x2dc>)
 8002e60:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8002e64:	48a8      	ldr	r0, [pc, #672]	; (8003108 <receive_package+0x2e0>)
 8002e66:	f009 fc31 	bl	800c6cc <__assert_func>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 8002e6a:	2272      	movs	r2, #114	; 0x72
 8002e6c:	211d      	movs	r1, #29
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f7ff fa6a 	bl	8002348 <write_register>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f083 0301 	eor.w	r3, r3, #1
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <receive_package+0x5c>
 8002e80:	2300      	movs	r3, #0
 8002e82:	e136      	b.n	80030f2 <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx1_window_symbols >> 8) & 0x3))) return false;
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	0a1b      	lsrs	r3, r3, #8
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	f043 0374 	orr.w	r3, r3, #116	; 0x74
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	211e      	movs	r1, #30
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f7ff fa54 	bl	8002348 <write_register>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f083 0301 	eor.w	r3, r3, #1
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <receive_package+0x88>
 8002eac:	2300      	movs	r3, #0
 8002eae:	e120      	b.n	80030f2 <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	2126      	movs	r1, #38	; 0x26
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f7ff fa47 	bl	8002348 <write_register>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	f083 0301 	eor.w	r3, r3, #1
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <receive_package+0xa2>
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	e113      	b.n	80030f2 <receive_package+0x2ca>

	// Set maximum symbol timeout.
	if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx1_window_symbols)) return false;
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	211f      	movs	r1, #31
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f7ff fa38 	bl	8002348 <write_register>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	f083 0301 	eor.w	r3, r3, #1
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <receive_package+0xc0>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e104      	b.n	80030f2 <receive_package+0x2ca>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_RX)) return false;
 8002ee8:	2267      	movs	r2, #103	; 0x67
 8002eea:	2133      	movs	r1, #51	; 0x33
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f7ff fa2b 	bl	8002348 <write_register>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f083 0301 	eor.w	r3, r3, #1
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <receive_package+0xda>
 8002efe:	2300      	movs	r3, #0
 8002f00:	e0f7      	b.n	80030f2 <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_RX)) return false;
 8002f02:	2219      	movs	r2, #25
 8002f04:	213b      	movs	r1, #59	; 0x3b
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f7ff fa1e 	bl	8002348 <write_register>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f083 0301 	eor.w	r3, r3, #1
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <receive_package+0xf4>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e0ea      	b.n	80030f2 <receive_package+0x2ca>

	receive_at_scheduled_time(handle, rx1_target);
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	4619      	mov	r1, r3
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f7ff febb 	bl	8002c9c <receive_at_scheduled_time>

	// If there was nothing received during RX1, try RX2.
	if (!wait_for_rx_irqs(handle)) {
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f7ff fb44 	bl	80025b4 <wait_for_rx_irqs>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f083 0301 	eor.w	r3, r3, #1
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d07a      	beq.n	800302e <receive_package+0x206>

		// Return modem to sleep.
		if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8002f38:	2280      	movs	r2, #128	; 0x80
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f7ff fa03 	bl	8002348 <write_register>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f083 0301 	eor.w	r3, r3, #1
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <receive_package+0x12a>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	e0cf      	b.n	80030f2 <receive_package+0x2ca>

		if (handle->receive_mode == RFM95_RECEIVE_MODE_RX12) {
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d166      	bne.n	800302a <receive_package+0x202>

			uint32_t rx2_target, rx2_window_symbols;
			calculate_rx_timings(handle, 125000, 12, tx_ticks, &rx2_target, &rx2_window_symbols);
 8002f5c:	f107 0314 	add.w	r3, r7, #20
 8002f60:	9301      	str	r3, [sp, #4]
 8002f62:	f107 0318 	add.w	r3, r7, #24
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	220c      	movs	r2, #12
 8002f6c:	4963      	ldr	r1, [pc, #396]	; (80030fc <receive_package+0x2d4>)
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f7ff fef6 	bl	8002d60 <calculate_rx_timings>

			// Configure 869.525 MHz
			if (!configure_frequency(handle, 869525000)) return false;
 8002f74:	4965      	ldr	r1, [pc, #404]	; (800310c <receive_package+0x2e4>)
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f7ff fa66 	bl	8002448 <configure_frequency>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f083 0301 	eor.w	r3, r3, #1
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <receive_package+0x164>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e0b2      	b.n	80030f2 <receive_package+0x2ca>

			// Configure modem SF12
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0xc2)) return false;
 8002f8c:	22c2      	movs	r2, #194	; 0xc2
 8002f8e:	211d      	movs	r1, #29
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f7ff f9d9 	bl	8002348 <write_register>
 8002f96:	4603      	mov	r3, r0
 8002f98:	f083 0301 	eor.w	r3, r3, #1
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <receive_package+0x17e>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e0a5      	b.n	80030f2 <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx2_window_symbols >> 8) & 0x3))) return false;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	0a1b      	lsrs	r3, r3, #8
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	f043 0374 	orr.w	r3, r3, #116	; 0x74
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	211e      	movs	r1, #30
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f7ff f9c3 	bl	8002348 <write_register>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f083 0301 	eor.w	r3, r3, #1
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <receive_package+0x1aa>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e08f      	b.n	80030f2 <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	2126      	movs	r1, #38	; 0x26
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f7ff f9b6 	bl	8002348 <write_register>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f083 0301 	eor.w	r3, r3, #1
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <receive_package+0x1c4>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	e082      	b.n	80030f2 <receive_package+0x2ca>

			// Set maximum symbol timeout.
			if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx2_window_symbols)) return false;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	211f      	movs	r1, #31
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f7ff f9a7 	bl	8002348 <write_register>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f083 0301 	eor.w	r3, r3, #1
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <receive_package+0x1e2>
 8003006:	2300      	movs	r3, #0
 8003008:	e073      	b.n	80030f2 <receive_package+0x2ca>

			receive_at_scheduled_time(handle, rx2_target);
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	4619      	mov	r1, r3
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f7ff fe44 	bl	8002c9c <receive_at_scheduled_time>

			if (!wait_for_rx_irqs(handle)) {
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f7ff facd 	bl	80025b4 <wait_for_rx_irqs>
 800301a:	4603      	mov	r3, r0
 800301c:	f083 0301 	eor.w	r3, r3, #1
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <receive_package+0x202>
				// No payload during in RX1 and RX2
				return true;
 8003026:	2301      	movs	r3, #1
 8003028:	e063      	b.n	80030f2 <receive_package+0x2ca>
			}
		}

		return true;
 800302a:	2301      	movs	r3, #1
 800302c:	e061      	b.n	80030f2 <receive_package+0x2ca>
	}

	uint8_t irq_flags;
	read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irq_flags, 1);
 800302e:	f107 021f 	add.w	r2, r7, #31
 8003032:	2301      	movs	r3, #1
 8003034:	2112      	movs	r1, #18
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f7ff f948 	bl	80022cc <read_register>

	// Check if there was a CRC error.
	if (irq_flags & 0x20) {
 800303c:	7ffb      	ldrb	r3, [r7, #31]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <receive_package+0x222>
		return true;
 8003046:	2301      	movs	r3, #1
 8003048:	e053      	b.n	80030f2 <receive_package+0x2ca>
	}

	int8_t packet_snr;
	if (!read_register(handle, RFM95_REGISTER_PACKET_SNR, (uint8_t *)&packet_snr, 1)) return false;
 800304a:	f107 021e 	add.w	r2, r7, #30
 800304e:	2301      	movs	r3, #1
 8003050:	2119      	movs	r1, #25
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f7ff f93a 	bl	80022cc <read_register>
 8003058:	4603      	mov	r3, r0
 800305a:	f083 0301 	eor.w	r3, r3, #1
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <receive_package+0x240>
 8003064:	2300      	movs	r3, #0
 8003066:	e044      	b.n	80030f2 <receive_package+0x2ca>
	*snr = (int8_t)(packet_snr / 4);
 8003068:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800306c:	2b00      	cmp	r3, #0
 800306e:	da00      	bge.n	8003072 <receive_package+0x24a>
 8003070:	3303      	adds	r3, #3
 8003072:	109b      	asrs	r3, r3, #2
 8003074:	b25a      	sxtb	r2, r3
 8003076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003078:	701a      	strb	r2, [r3, #0]

	// Read received payload length.
	uint8_t payload_len_internal;
	if (!read_register(handle, RFM95_REGISTER_FIFO_RX_BYTES_NB, &payload_len_internal, 1)) return false;
 800307a:	f107 021d 	add.w	r2, r7, #29
 800307e:	2301      	movs	r3, #1
 8003080:	2113      	movs	r1, #19
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f7ff f922 	bl	80022cc <read_register>
 8003088:	4603      	mov	r3, r0
 800308a:	f083 0301 	eor.w	r3, r3, #1
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <receive_package+0x270>
 8003094:	2300      	movs	r3, #0
 8003096:	e02c      	b.n	80030f2 <receive_package+0x2ca>

	// Read received payload itself.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0)) return false;
 8003098:	2200      	movs	r2, #0
 800309a:	210d      	movs	r1, #13
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f7ff f953 	bl	8002348 <write_register>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f083 0301 	eor.w	r3, r3, #1
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <receive_package+0x28a>
 80030ae:	2300      	movs	r3, #0
 80030b0:	e01f      	b.n	80030f2 <receive_package+0x2ca>
	if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf, payload_len_internal)) return false;
 80030b2:	7f7b      	ldrb	r3, [r7, #29]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	2100      	movs	r1, #0
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f7ff f907 	bl	80022cc <read_register>
 80030be:	4603      	mov	r3, r0
 80030c0:	f083 0301 	eor.w	r3, r3, #1
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <receive_package+0x2a6>
 80030ca:	2300      	movs	r3, #0
 80030cc:	e011      	b.n	80030f2 <receive_package+0x2ca>

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 80030ce:	2280      	movs	r2, #128	; 0x80
 80030d0:	2101      	movs	r1, #1
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f7ff f938 	bl	8002348 <write_register>
 80030d8:	4603      	mov	r3, r0
 80030da:	f083 0301 	eor.w	r3, r3, #1
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <receive_package+0x2c0>
 80030e4:	2300      	movs	r3, #0
 80030e6:	e004      	b.n	80030f2 <receive_package+0x2ca>

	// Successful payload receive, set payload length to tell caller.
	*payload_len = payload_len_internal;
 80030e8:	7f7b      	ldrb	r3, [r7, #29]
 80030ea:	461a      	mov	r2, r3
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	601a      	str	r2, [r3, #0]
	return true;
 80030f0:	2301      	movs	r3, #1
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3728      	adds	r7, #40	; 0x28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	0001e848 	.word	0x0001e848
 8003100:	0800f4d4 	.word	0x0800f4d4
 8003104:	0800f688 	.word	0x0800f688
 8003108:	0800f450 	.word	0x0800f450
 800310c:	33d3e608 	.word	0x33d3e608

08003110 <send_package>:

static bool send_package(rfm95_handle_t *handle, uint8_t *payload_buf, size_t payload_len, uint8_t channel,
                         uint32_t *tx_ticks)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	70fb      	strb	r3, [r7, #3]
	// Configure channel for transmission.
	if (!configure_channel(handle, channel)) return false;
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	4619      	mov	r1, r3
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f7ff f9ec 	bl	8002500 <configure_channel>
 8003128:	4603      	mov	r3, r0
 800312a:	f083 0301 	eor.w	r3, r3, #1
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <send_package+0x28>
 8003134:	2300      	movs	r3, #0
 8003136:	e0d8      	b.n	80032ea <send_package+0x1da>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 8003138:	2272      	movs	r2, #114	; 0x72
 800313a:	211d      	movs	r1, #29
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7ff f903 	bl	8002348 <write_register>
 8003142:	4603      	mov	r3, r0
 8003144:	f083 0301 	eor.w	r3, r3, #1
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <send_package+0x42>
 800314e:	2300      	movs	r3, #0
 8003150:	e0cb      	b.n	80032ea <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74)) return false;
 8003152:	2274      	movs	r2, #116	; 0x74
 8003154:	211e      	movs	r1, #30
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f7ff f8f6 	bl	8002348 <write_register>
 800315c:	4603      	mov	r3, r0
 800315e:	f083 0301 	eor.w	r3, r3, #1
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <send_package+0x5c>
 8003168:	2300      	movs	r3, #0
 800316a:	e0be      	b.n	80032ea <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 800316c:	2204      	movs	r2, #4
 800316e:	2126      	movs	r1, #38	; 0x26
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f7ff f8e9 	bl	8002348 <write_register>
 8003176:	4603      	mov	r3, r0
 8003178:	f083 0301 	eor.w	r3, r3, #1
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <send_package+0x76>
 8003182:	2300      	movs	r3, #0
 8003184:	e0b1      	b.n	80032ea <send_package+0x1da>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_TX)) return false;
 8003186:	2227      	movs	r2, #39	; 0x27
 8003188:	2133      	movs	r1, #51	; 0x33
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f7ff f8dc 	bl	8002348 <write_register>
 8003190:	4603      	mov	r3, r0
 8003192:	f083 0301 	eor.w	r3, r3, #1
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <send_package+0x90>
 800319c:	2300      	movs	r3, #0
 800319e:	e0a4      	b.n	80032ea <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_TX)) return false;
 80031a0:	221d      	movs	r2, #29
 80031a2:	213b      	movs	r1, #59	; 0x3b
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f7ff f8cf 	bl	8002348 <write_register>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f083 0301 	eor.w	r3, r3, #1
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <send_package+0xaa>
 80031b6:	2300      	movs	r3, #0
 80031b8:	e097      	b.n	80032ea <send_package+0x1da>

	// Set the payload length.
	if (!write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, payload_len)) return false;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	461a      	mov	r2, r3
 80031c0:	2122      	movs	r1, #34	; 0x22
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f7ff f8c0 	bl	8002348 <write_register>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f083 0301 	eor.w	r3, r3, #1
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <send_package+0xc8>
 80031d4:	2300      	movs	r3, #0
 80031d6:	e088      	b.n	80032ea <send_package+0x1da>

	// Enable tx-done interrupt, clear flags and previous interrupt time.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 80031d8:	2240      	movs	r2, #64	; 0x40
 80031da:	2140      	movs	r1, #64	; 0x40
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f7ff f8b3 	bl	8002348 <write_register>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f083 0301 	eor.w	r3, r3, #1
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <send_package+0xe2>
 80031ee:	2300      	movs	r3, #0
 80031f0:	e07b      	b.n	80032ea <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 80031f2:	22ff      	movs	r2, #255	; 0xff
 80031f4:	2112      	movs	r1, #18
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f7ff f8a6 	bl	8002348 <write_register>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f083 0301 	eor.w	r3, r3, #1
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <send_package+0xfc>
 8003208:	2300      	movs	r3, #0
 800320a:	e06e      	b.n	80032ea <send_package+0x1da>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 800321c:	2281      	movs	r2, #129	; 0x81
 800321e:	2101      	movs	r1, #1
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f7ff f891 	bl	8002348 <write_register>
 8003226:	4603      	mov	r3, r0
 8003228:	f083 0301 	eor.w	r3, r3, #1
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <send_package+0x126>
 8003232:	2300      	movs	r3, #0
 8003234:	e059      	b.n	80032ea <send_package+0x1da>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 8003236:	220a      	movs	r2, #10
 8003238:	2102      	movs	r1, #2
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f7ff f98a 	bl	8002554 <wait_for_irq>

	// Set pointer to start of TX section in FIFO.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80)) return false;
 8003240:	2280      	movs	r2, #128	; 0x80
 8003242:	210d      	movs	r1, #13
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f7ff f87f 	bl	8002348 <write_register>
 800324a:	4603      	mov	r3, r0
 800324c:	f083 0301 	eor.w	r3, r3, #1
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <send_package+0x14a>
 8003256:	2300      	movs	r3, #0
 8003258:	e047      	b.n	80032ea <send_package+0x1da>

	// Write payload to FIFO.
	for (size_t i = 0; i < payload_len; i++) {
 800325a:	2300      	movs	r3, #0
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	e00b      	b.n	8003278 <send_package+0x168>
		write_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf[i]);
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	4413      	add	r3, r2
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	2100      	movs	r1, #0
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7ff f86b 	bl	8002348 <write_register>
	for (size_t i = 0; i < payload_len; i++) {
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	3301      	adds	r3, #1
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	429a      	cmp	r2, r3
 800327e:	d3ef      	bcc.n	8003260 <send_package+0x150>
	}

	// Set modem to tx mode.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_TX)) return false;
 8003280:	2283      	movs	r2, #131	; 0x83
 8003282:	2101      	movs	r1, #1
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f7ff f85f 	bl	8002348 <write_register>
 800328a:	4603      	mov	r3, r0
 800328c:	f083 0301 	eor.w	r3, r3, #1
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <send_package+0x18a>
 8003296:	2300      	movs	r3, #0
 8003298:	e027      	b.n	80032ea <send_package+0x1da>

	// Wait for the transfer complete interrupt.
	if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO0, RFM95_SEND_TIMEOUT)) return false;
 800329a:	2264      	movs	r2, #100	; 0x64
 800329c:	2100      	movs	r1, #0
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f7ff f958 	bl	8002554 <wait_for_irq>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f083 0301 	eor.w	r3, r3, #1
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <send_package+0x1a4>
 80032b0:	2300      	movs	r3, #0
 80032b2:	e01a      	b.n	80032ea <send_package+0x1da>

	// Set real tx time in ticks.
	*tx_ticks = handle->interrupt_times[RFM95_INTERRUPT_DIO0];
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	601a      	str	r2, [r3, #0]

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 80032be:	2280      	movs	r2, #128	; 0x80
 80032c0:	2101      	movs	r1, #1
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f7ff f840 	bl	8002348 <write_register>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f083 0301 	eor.w	r3, r3, #1
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <send_package+0x1c8>
 80032d4:	2300      	movs	r3, #0
 80032d6:	e008      	b.n	80032ea <send_package+0x1da>

	// Increment tx frame counter.
	handle->config.tx_frame_count++;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80032de:	3301      	adds	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

	return true;
 80032e8:	2301      	movs	r3, #1
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <encode_phy_payload>:

static size_t encode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], const uint8_t *frame_payload,
                                 size_t frame_payload_length, uint8_t port)
{
 80032f4:	b590      	push	{r4, r7, lr}
 80032f6:	b08d      	sub	sp, #52	; 0x34
 80032f8:	af04      	add	r7, sp, #16
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
	size_t payload_len = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	61bb      	str	r3, [r7, #24]

	// 64 bytes is maximum size of FIFO
	assert(frame_payload_length + 4 + 9 <= 64);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	330d      	adds	r3, #13
 800330a:	2b40      	cmp	r3, #64	; 0x40
 800330c:	d906      	bls.n	800331c <encode_phy_payload+0x28>
 800330e:	4b51      	ldr	r3, [pc, #324]	; (8003454 <encode_phy_payload+0x160>)
 8003310:	4a51      	ldr	r2, [pc, #324]	; (8003458 <encode_phy_payload+0x164>)
 8003312:	f240 2153 	movw	r1, #595	; 0x253
 8003316:	4851      	ldr	r0, [pc, #324]	; (800345c <encode_phy_payload+0x168>)
 8003318:	f009 f9d8 	bl	800c6cc <__assert_func>

	payload_buf[0] = 0x40; // MAC Header
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2240      	movs	r2, #64	; 0x40
 8003320:	701a      	strb	r2, [r3, #0]
	payload_buf[1] = handle->device_address[3];
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	3301      	adds	r3, #1
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	7d52      	ldrb	r2, [r2, #21]
 800332a:	701a      	strb	r2, [r3, #0]
	payload_buf[2] = handle->device_address[2];
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	3302      	adds	r3, #2
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	7d12      	ldrb	r2, [r2, #20]
 8003334:	701a      	strb	r2, [r3, #0]
	payload_buf[3] = handle->device_address[1];
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	3303      	adds	r3, #3
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	7cd2      	ldrb	r2, [r2, #19]
 800333e:	701a      	strb	r2, [r3, #0]
	payload_buf[4] = handle->device_address[0];
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	3304      	adds	r3, #4
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	7c92      	ldrb	r2, [r2, #18]
 8003348:	701a      	strb	r2, [r3, #0]
	payload_buf[5] = 0x00; // Frame Control
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	3305      	adds	r3, #5
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
	payload_buf[6] = (handle->config.tx_frame_count & 0x00ffu);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	3306      	adds	r3, #6
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	701a      	strb	r2, [r3, #0]
	payload_buf[7] = ((uint16_t)(handle->config.tx_frame_count >> 8u) & 0x00ffu);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003366:	0a1b      	lsrs	r3, r3, #8
 8003368:	b29a      	uxth	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	3307      	adds	r3, #7
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]
	payload_buf[8] = port; // Frame Port
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	3308      	adds	r3, #8
 8003376:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800337a:	701a      	strb	r2, [r3, #0]
	payload_len += 9;
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	3309      	adds	r3, #9
 8003380:	61bb      	str	r3, [r7, #24]

	// Encrypt payload in place in payload_buf.
	memcpy(payload_buf + payload_len, frame_payload, frame_payload_length);
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	4413      	add	r3, r2
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4618      	mov	r0, r3
 800338e:	f00a f8ca 	bl	800d526 <memcpy>
	if (port == 0) {
 8003392:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003396:	2b00      	cmp	r3, #0
 8003398:	d113      	bne.n	80033c2 <encode_phy_payload+0xce>
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	18d0      	adds	r0, r2, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	b2d9      	uxtb	r1, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80033aa:	461c      	mov	r4, r3
		                0, handle->network_session_key, handle->device_address);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	3316      	adds	r3, #22
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	3212      	adds	r2, #18
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 80033b4:	9201      	str	r2, [sp, #4]
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	2300      	movs	r3, #0
 80033ba:	4622      	mov	r2, r4
 80033bc:	f7fe f861 	bl	8001482 <Encrypt_Payload>
 80033c0:	e012      	b.n	80033e8 <encode_phy_payload+0xf4>
	} else {
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	18d0      	adds	r0, r2, r3
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	b2d9      	uxtb	r1, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80033d2:	461c      	mov	r4, r3
		                0, handle->application_session_key, handle->device_address);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	3326      	adds	r3, #38	; 0x26
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	3212      	adds	r2, #18
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 80033dc:	9201      	str	r2, [sp, #4]
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	2300      	movs	r3, #0
 80033e2:	4622      	mov	r2, r4
 80033e4:	f7fe f84d 	bl	8001482 <Encrypt_Payload>
	}
	payload_len += frame_payload_length;
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	4413      	add	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]

	// Calculate MIC and copy to last 4 bytes of the payload_buf.
	uint8_t mic[4];
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0,
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	b2d8      	uxtb	r0, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80033fa:	461c      	mov	r4, r3
	              handle->network_session_key, handle->device_address);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	3316      	adds	r3, #22
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	3212      	adds	r2, #18
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0,
 8003404:	f107 0114 	add.w	r1, r7, #20
 8003408:	9202      	str	r2, [sp, #8]
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	2300      	movs	r3, #0
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	4623      	mov	r3, r4
 8003412:	4602      	mov	r2, r0
 8003414:	68b8      	ldr	r0, [r7, #8]
 8003416:	f7fe f8e9 	bl	80015ec <Calculate_MIC>
	for (uint8_t i = 0; i < 4; i++) {
 800341a:	2300      	movs	r3, #0
 800341c:	77fb      	strb	r3, [r7, #31]
 800341e:	e00d      	b.n	800343c <encode_phy_payload+0x148>
		payload_buf[payload_len + i] = mic[i];
 8003420:	7ffa      	ldrb	r2, [r7, #31]
 8003422:	7ff9      	ldrb	r1, [r7, #31]
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	440b      	add	r3, r1
 8003428:	68b9      	ldr	r1, [r7, #8]
 800342a:	440b      	add	r3, r1
 800342c:	3220      	adds	r2, #32
 800342e:	443a      	add	r2, r7
 8003430:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003434:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 8003436:	7ffb      	ldrb	r3, [r7, #31]
 8003438:	3301      	adds	r3, #1
 800343a:	77fb      	strb	r3, [r7, #31]
 800343c:	7ffb      	ldrb	r3, [r7, #31]
 800343e:	2b03      	cmp	r3, #3
 8003440:	d9ee      	bls.n	8003420 <encode_phy_payload+0x12c>
	}
	payload_len += 4;
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	3304      	adds	r3, #4
 8003446:	61bb      	str	r3, [r7, #24]

	return payload_len;
 8003448:	69bb      	ldr	r3, [r7, #24]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3724      	adds	r7, #36	; 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd90      	pop	{r4, r7, pc}
 8003452:	bf00      	nop
 8003454:	0800f4f0 	.word	0x0800f4f0
 8003458:	0800f698 	.word	0x0800f698
 800345c:	0800f450 	.word	0x0800f450

08003460 <decode_phy_payload>:

static bool decode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], uint8_t payload_length,
                               uint8_t **decoded_frame_payload_ptr, uint8_t *decoded_frame_payload_length, uint8_t *frame_port)
{
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b08d      	sub	sp, #52	; 0x34
 8003464:	af04      	add	r7, sp, #16
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	71fb      	strb	r3, [r7, #7]
	// Only unconfirmed down-links are supported for now.
	if (payload_buf[0] != 0x60) {
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b60      	cmp	r3, #96	; 0x60
 8003476:	d001      	beq.n	800347c <decode_phy_payload+0x1c>
		return false;
 8003478:	2300      	movs	r3, #0
 800347a:	e0aa      	b.n	80035d2 <decode_phy_payload+0x172>
	}

	// Does the device address match?
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	3301      	adds	r3, #1
 8003480:	781a      	ldrb	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	7d5b      	ldrb	r3, [r3, #21]
 8003486:	429a      	cmp	r2, r3
 8003488:	d114      	bne.n	80034b4 <decode_phy_payload+0x54>
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	3302      	adds	r3, #2
 800348e:	781a      	ldrb	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	7d1b      	ldrb	r3, [r3, #20]
 8003494:	429a      	cmp	r2, r3
 8003496:	d10d      	bne.n	80034b4 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	3303      	adds	r3, #3
 800349c:	781a      	ldrb	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	7cdb      	ldrb	r3, [r3, #19]
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d106      	bne.n	80034b4 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	3304      	adds	r3, #4
 80034aa:	781a      	ldrb	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	7c9b      	ldrb	r3, [r3, #18]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <decode_phy_payload+0x58>
		return false;
 80034b4:	2300      	movs	r3, #0
 80034b6:	e08c      	b.n	80035d2 <decode_phy_payload+0x172>
	}

	uint8_t frame_control = payload_buf[5];
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	795b      	ldrb	r3, [r3, #5]
 80034bc:	77fb      	strb	r3, [r7, #31]
	uint8_t frame_opts_length = frame_control & 0x0f;
 80034be:	7ffb      	ldrb	r3, [r7, #31]
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	77bb      	strb	r3, [r7, #30]
	uint16_t rx_frame_count = (payload_buf[7] << 8) | payload_buf[6];
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	3307      	adds	r3, #7
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	021b      	lsls	r3, r3, #8
 80034ce:	b21a      	sxth	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	3306      	adds	r3, #6
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	b21b      	sxth	r3, r3
 80034d8:	4313      	orrs	r3, r2
 80034da:	b21b      	sxth	r3, r3
 80034dc:	83bb      	strh	r3, [r7, #28]

	// Check if rx frame count is valid and if so, update accordingly.
	if (rx_frame_count < handle->config.rx_frame_count) {
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80034e4:	8bba      	ldrh	r2, [r7, #28]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d201      	bcs.n	80034ee <decode_phy_payload+0x8e>
		return false;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e071      	b.n	80035d2 <decode_phy_payload+0x172>
	}
	handle->config.rx_frame_count = rx_frame_count;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8bba      	ldrh	r2, [r7, #28]
 80034f2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

	uint8_t check_mic[4];
	Calculate_MIC(payload_buf, check_mic, payload_length - 4, rx_frame_count, 1,
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	3b04      	subs	r3, #4
 80034fa:	b2d8      	uxtb	r0, r3
 80034fc:	8bbc      	ldrh	r4, [r7, #28]
	              handle->network_session_key, handle->device_address);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	3316      	adds	r3, #22
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	3212      	adds	r2, #18
	Calculate_MIC(payload_buf, check_mic, payload_length - 4, rx_frame_count, 1,
 8003506:	f107 0114 	add.w	r1, r7, #20
 800350a:	9202      	str	r2, [sp, #8]
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	2301      	movs	r3, #1
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	4623      	mov	r3, r4
 8003514:	4602      	mov	r2, r0
 8003516:	68b8      	ldr	r0, [r7, #8]
 8003518:	f7fe f868 	bl	80015ec <Calculate_MIC>
	if (memcmp(check_mic, &payload_buf[payload_length - 4], 4) != 0) {
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	3b04      	subs	r3, #4
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	18d1      	adds	r1, r2, r3
 8003524:	f107 0314 	add.w	r3, r7, #20
 8003528:	2204      	movs	r2, #4
 800352a:	4618      	mov	r0, r3
 800352c:	f009 ff6c 	bl	800d408 <memcmp>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <decode_phy_payload+0xda>
		return false;
 8003536:	2300      	movs	r3, #0
 8003538:	e04b      	b.n	80035d2 <decode_phy_payload+0x172>
	}

	if (payload_length - 12 - frame_opts_length == 0) {
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	f1a3 020c 	sub.w	r2, r3, #12
 8003540:	7fbb      	ldrb	r3, [r7, #30]
 8003542:	429a      	cmp	r2, r3
 8003544:	d10b      	bne.n	800355e <decode_phy_payload+0xfe>
		*frame_port = 0;
 8003546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003548:	2200      	movs	r2, #0
 800354a:	701a      	strb	r2, [r3, #0]
		*decoded_frame_payload_ptr = &payload_buf[8];
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f103 0208 	add.w	r2, r3, #8
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_opts_length;
 8003556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003558:	7fba      	ldrb	r2, [r7, #30]
 800355a:	701a      	strb	r2, [r3, #0]
 800355c:	e038      	b.n	80035d0 <decode_phy_payload+0x170>

	} else {
		*frame_port = payload_buf[8];
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	7a1a      	ldrb	r2, [r3, #8]
 8003562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003564:	701a      	strb	r2, [r3, #0]

		uint8_t frame_payload_start = 9 + frame_opts_length;
 8003566:	7fbb      	ldrb	r3, [r7, #30]
 8003568:	3309      	adds	r3, #9
 800356a:	76fb      	strb	r3, [r7, #27]
		uint8_t frame_payload_end = payload_length - 4;
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	3b04      	subs	r3, #4
 8003570:	76bb      	strb	r3, [r7, #26]
		uint8_t frame_payload_length = frame_payload_end - frame_payload_start;
 8003572:	7eba      	ldrb	r2, [r7, #26]
 8003574:	7efb      	ldrb	r3, [r7, #27]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	767b      	strb	r3, [r7, #25]

		if (*frame_port == 0) {
 800357a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10f      	bne.n	80035a2 <decode_phy_payload+0x142>
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 8003582:	7efb      	ldrb	r3, [r7, #27]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	18d0      	adds	r0, r2, r3
 8003588:	8bbc      	ldrh	r4, [r7, #28]
			                1, handle->network_session_key, handle->device_address);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3316      	adds	r3, #22
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	3212      	adds	r2, #18
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 8003592:	7e79      	ldrb	r1, [r7, #25]
 8003594:	9201      	str	r2, [sp, #4]
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	2301      	movs	r3, #1
 800359a:	4622      	mov	r2, r4
 800359c:	f7fd ff71 	bl	8001482 <Encrypt_Payload>
 80035a0:	e00e      	b.n	80035c0 <decode_phy_payload+0x160>
		} else {
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 80035a2:	7efb      	ldrb	r3, [r7, #27]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	18d0      	adds	r0, r2, r3
 80035a8:	8bbc      	ldrh	r4, [r7, #28]
			                1, handle->application_session_key, handle->device_address);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	3326      	adds	r3, #38	; 0x26
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	3212      	adds	r2, #18
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 80035b2:	7e79      	ldrb	r1, [r7, #25]
 80035b4:	9201      	str	r2, [sp, #4]
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	2301      	movs	r3, #1
 80035ba:	4622      	mov	r2, r4
 80035bc:	f7fd ff61 	bl	8001482 <Encrypt_Payload>
		}

		*decoded_frame_payload_ptr = &payload_buf[frame_payload_start];
 80035c0:	7efb      	ldrb	r3, [r7, #27]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	441a      	add	r2, r3
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_payload_length;
 80035ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035cc:	7e7a      	ldrb	r2, [r7, #25]
 80035ce:	701a      	strb	r2, [r3, #0]
	}

	return true;
 80035d0:	2301      	movs	r3, #1
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3724      	adds	r7, #36	; 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd90      	pop	{r4, r7, pc}

080035da <rfm95_send_receive_cycle>:

	return 0;
}

bool rfm95_send_receive_cycle(rfm95_handle_t *handle, const uint8_t *send_data, size_t send_data_length)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b0aa      	sub	sp, #168	; 0xa8
 80035de:	af02      	add	r7, sp, #8
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
	uint8_t phy_payload_buf[64] = { 0 };
 80035e6:	2300      	movs	r3, #0
 80035e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80035ee:	223c      	movs	r2, #60	; 0x3c
 80035f0:	2100      	movs	r1, #0
 80035f2:	4618      	mov	r0, r3
 80035f4:	f009 ff18 	bl	800d428 <memset>

	// Build the up-link phy payload.
	size_t phy_payload_len = encode_phy_payload(handle, phy_payload_buf, send_data, send_data_length, 1);
 80035f8:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80035fc:	2301      	movs	r3, #1
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f7ff fe75 	bl	80032f4 <encode_phy_payload>
 800360a:	4603      	mov	r3, r0
 800360c:	65bb      	str	r3, [r7, #88]	; 0x58

	uint8_t random_channel = 1;//select_random_channel(handle);
 800360e:	2301      	movs	r3, #1
 8003610:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	uint32_t tx_ticks;

	// Send the requested up-link.
	if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel, &tx_ticks)) {
 8003614:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003616:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 800361a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800361e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	4603      	mov	r3, r0
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f7ff fd72 	bl	8003110 <send_package>
 800362c:	4603      	mov	r3, r0
 800362e:	f083 0301 	eor.w	r3, r3, #1
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d006      	beq.n	8003646 <rfm95_send_receive_cycle+0x6c>
		write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8003638:	2280      	movs	r2, #128	; 0x80
 800363a:	2101      	movs	r1, #1
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f7fe fe83 	bl	8002348 <write_register>
		return false;
 8003642:	2300      	movs	r3, #0
 8003644:	e0af      	b.n	80037a6 <rfm95_send_receive_cycle+0x1cc>
	}

	// Clear phy payload buffer to reuse for the down-link message.
	memset(phy_payload_buf, 0x00, sizeof(phy_payload_buf));
 8003646:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800364a:	2240      	movs	r2, #64	; 0x40
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f009 feea 	bl	800d428 <memset>
	phy_payload_len = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	65bb      	str	r3, [r7, #88]	; 0x58

	// Only receive if configured to do so.
	if (handle->receive_mode != RFM95_RECEIVE_MODE_NONE) {
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 8096 	beq.w	8003790 <rfm95_send_receive_cycle+0x1b6>

		int8_t snr;

		// Try receiving a down-link.
		if (!receive_package(handle, tx_ticks, phy_payload_buf, &phy_payload_len, &snr)) {
 8003664:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003666:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800366a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800366e:	f107 0353 	add.w	r3, r7, #83	; 0x53
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	4603      	mov	r3, r0
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f7ff fbd6 	bl	8002e28 <receive_package>
 800367c:	4603      	mov	r3, r0
 800367e:	f083 0301 	eor.w	r3, r3, #1
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d010      	beq.n	80036aa <rfm95_send_receive_cycle+0xd0>
			write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8003688:	2280      	movs	r2, #128	; 0x80
 800368a:	2101      	movs	r1, #1
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f7fe fe5b 	bl	8002348 <write_register>
			if (handle->save_config) {
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <rfm95_send_receive_cycle+0xcc>
				handle->save_config(&(handle->config));
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	3260      	adds	r2, #96	; 0x60
 80036a2:	4610      	mov	r0, r2
 80036a4:	4798      	blx	r3
			}
			return false;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e07d      	b.n	80037a6 <rfm95_send_receive_cycle+0x1cc>
		}

		// Any RX payload was received.
		if (phy_payload_len != 0) {
 80036aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d06f      	beq.n	8003790 <rfm95_send_receive_cycle+0x1b6>

			uint8_t *frame_payload;
			uint8_t frame_payload_len = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			uint8_t frame_port;

			// Try decoding the frame payload.
			if (decode_phy_payload(handle, phy_payload_buf, phy_payload_len, &frame_payload, &frame_payload_len,
 80036b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80036be:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80036c2:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 80036c6:	9301      	str	r3, [sp, #4]
 80036c8:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	4603      	mov	r3, r0
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f7ff fec5 	bl	8003460 <decode_phy_payload>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d059      	beq.n	8003790 <rfm95_send_receive_cycle+0x1b6>
			                       &frame_port)) {

				// Process Mac Commands
				if (frame_port == 0) {
 80036dc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d155      	bne.n	8003790 <rfm95_send_receive_cycle+0x1b6>

					uint8_t mac_response_data[51] = {0};
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	f107 0318 	add.w	r3, r7, #24
 80036ec:	222f      	movs	r2, #47	; 0x2f
 80036ee:	2100      	movs	r1, #0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f009 fe99 	bl	800d428 <memset>
					uint8_t mac_response_len = 0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

					if (process_mac_commands(handle, frame_payload, frame_payload_len, mac_response_data,
 80036fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80036fe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003702:	4618      	mov	r0, r3
 8003704:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8003708:	f107 0214 	add.w	r2, r7, #20
 800370c:	9301      	str	r3, [sp, #4]
 800370e:	f107 0349 	add.w	r3, r7, #73	; 0x49
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	4613      	mov	r3, r2
 8003716:	4602      	mov	r2, r0
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f7ff f8c7 	bl	80028ac <process_mac_commands>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d035      	beq.n	8003790 <rfm95_send_receive_cycle+0x1b6>
					                         &mac_response_len, snr) && mac_response_len != 0) {
 8003724:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003728:	2b00      	cmp	r3, #0
 800372a:	d031      	beq.n	8003790 <rfm95_send_receive_cycle+0x1b6>

						// Build the up-link phy payload.
						phy_payload_len = encode_phy_payload(handle, phy_payload_buf, mac_response_data,
 800372c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003730:	4618      	mov	r0, r3
 8003732:	f107 0214 	add.w	r2, r7, #20
 8003736:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800373a:	2300      	movs	r3, #0
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	4603      	mov	r3, r0
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f7ff fdd7 	bl	80032f4 <encode_phy_payload>
 8003746:	4603      	mov	r3, r0
 8003748:	65bb      	str	r3, [r7, #88]	; 0x58
						                                     mac_response_len, 0);

						if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel,
 800374a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800374c:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 8003750:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003754:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	4603      	mov	r3, r0
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f7ff fcd7 	bl	8003110 <send_package>
 8003762:	4603      	mov	r3, r0
 8003764:	f083 0301 	eor.w	r3, r3, #1
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d010      	beq.n	8003790 <rfm95_send_receive_cycle+0x1b6>
						                  &tx_ticks)) {
							write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 800376e:	2280      	movs	r2, #128	; 0x80
 8003770:	2101      	movs	r1, #1
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f7fe fde8 	bl	8002348 <write_register>
							if (handle->save_config) {
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <rfm95_send_receive_cycle+0x1b2>
								handle->save_config(&(handle->config));
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	3260      	adds	r2, #96	; 0x60
 8003788:	4610      	mov	r0, r2
 800378a:	4798      	blx	r3
							}
							return false;
 800378c:	2300      	movs	r3, #0
			return false;
 800378e:	e00a      	b.n	80037a6 <rfm95_send_receive_cycle+0x1cc>
				}
			}
		}
	}

	if (handle->save_config) {
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <rfm95_send_receive_cycle+0x1ca>
		handle->save_config(&(handle->config));
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	3260      	adds	r2, #96	; 0x60
 80037a0:	4610      	mov	r0, r2
 80037a2:	4798      	blx	r3
	}

	return true;
 80037a4:	2301      	movs	r3, #1
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	37a0      	adds	r7, #160	; 0xa0
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80037b4:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <MX_RNG_Init+0x20>)
 80037b6:	4a07      	ldr	r2, [pc, #28]	; (80037d4 <MX_RNG_Init+0x24>)
 80037b8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80037ba:	4805      	ldr	r0, [pc, #20]	; (80037d0 <MX_RNG_Init+0x20>)
 80037bc:	f002 ffac 	bl	8006718 <HAL_RNG_Init>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80037c6:	f7fe fd3d 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000518 	.word	0x20000518
 80037d4:	50060800 	.word	0x50060800

080037d8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b098      	sub	sp, #96	; 0x60
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037e0:	f107 030c 	add.w	r3, r7, #12
 80037e4:	2254      	movs	r2, #84	; 0x54
 80037e6:	2100      	movs	r1, #0
 80037e8:	4618      	mov	r0, r3
 80037ea:	f009 fe1d 	bl	800d428 <memset>
  if(rngHandle->Instance==RNG)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a19      	ldr	r2, [pc, #100]	; (8003858 <HAL_RNG_MspInit+0x80>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d12a      	bne.n	800384e <HAL_RNG_MspInit+0x76>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80037f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037fc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80037fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003802:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003804:	2303      	movs	r3, #3
 8003806:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003808:	2301      	movs	r3, #1
 800380a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800380c:	2308      	movs	r3, #8
 800380e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003810:	2307      	movs	r3, #7
 8003812:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003814:	2302      	movs	r3, #2
 8003816:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003818:	2302      	movs	r3, #2
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800381c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003820:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003822:	f107 030c 	add.w	r3, r7, #12
 8003826:	4618      	mov	r0, r3
 8003828:	f002 fc8e 	bl	8006148 <HAL_RCCEx_PeriphCLKConfig>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_RNG_MspInit+0x5e>
    {
      Error_Handler();
 8003832:	f7fe fd07 	bl	8002244 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003836:	4b09      	ldr	r3, [pc, #36]	; (800385c <HAL_RNG_MspInit+0x84>)
 8003838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383a:	4a08      	ldr	r2, [pc, #32]	; (800385c <HAL_RNG_MspInit+0x84>)
 800383c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_RNG_MspInit+0x84>)
 8003844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800384e:	bf00      	nop
 8003850:	3760      	adds	r7, #96	; 0x60
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	50060800 	.word	0x50060800
 800385c:	40021000 	.word	0x40021000

08003860 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <MX_SPI1_Init+0x74>)
 8003866:	4a1c      	ldr	r2, [pc, #112]	; (80038d8 <MX_SPI1_Init+0x78>)
 8003868:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800386a:	4b1a      	ldr	r3, [pc, #104]	; (80038d4 <MX_SPI1_Init+0x74>)
 800386c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003870:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003872:	4b18      	ldr	r3, [pc, #96]	; (80038d4 <MX_SPI1_Init+0x74>)
 8003874:	2200      	movs	r2, #0
 8003876:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003878:	4b16      	ldr	r3, [pc, #88]	; (80038d4 <MX_SPI1_Init+0x74>)
 800387a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800387e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003880:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <MX_SPI1_Init+0x74>)
 8003882:	2200      	movs	r2, #0
 8003884:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003886:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <MX_SPI1_Init+0x74>)
 8003888:	2200      	movs	r2, #0
 800388a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800388c:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <MX_SPI1_Init+0x74>)
 800388e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003892:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003894:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <MX_SPI1_Init+0x74>)
 8003896:	2200      	movs	r2, #0
 8003898:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800389a:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <MX_SPI1_Init+0x74>)
 800389c:	2200      	movs	r2, #0
 800389e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038a0:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <MX_SPI1_Init+0x74>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038a6:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <MX_SPI1_Init+0x74>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80038ac:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <MX_SPI1_Init+0x74>)
 80038ae:	2207      	movs	r2, #7
 80038b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80038b2:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <MX_SPI1_Init+0x74>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80038b8:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <MX_SPI1_Init+0x74>)
 80038ba:	2208      	movs	r2, #8
 80038bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038be:	4805      	ldr	r0, [pc, #20]	; (80038d4 <MX_SPI1_Init+0x74>)
 80038c0:	f002 ff81 	bl	80067c6 <HAL_SPI_Init>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80038ca:	f7fe fcbb 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000528 	.word	0x20000528
 80038d8:	40013000 	.word	0x40013000

080038dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08a      	sub	sp, #40	; 0x28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e4:	f107 0314 	add.w	r3, r7, #20
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	60da      	str	r2, [r3, #12]
 80038f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a17      	ldr	r2, [pc, #92]	; (8003958 <HAL_SPI_MspInit+0x7c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d128      	bne.n	8003950 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038fe:	4b17      	ldr	r3, [pc, #92]	; (800395c <HAL_SPI_MspInit+0x80>)
 8003900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003902:	4a16      	ldr	r2, [pc, #88]	; (800395c <HAL_SPI_MspInit+0x80>)
 8003904:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003908:	6613      	str	r3, [r2, #96]	; 0x60
 800390a:	4b14      	ldr	r3, [pc, #80]	; (800395c <HAL_SPI_MspInit+0x80>)
 800390c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003916:	4b11      	ldr	r3, [pc, #68]	; (800395c <HAL_SPI_MspInit+0x80>)
 8003918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391a:	4a10      	ldr	r2, [pc, #64]	; (800395c <HAL_SPI_MspInit+0x80>)
 800391c:	f043 0301 	orr.w	r3, r3, #1
 8003920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003922:	4b0e      	ldr	r3, [pc, #56]	; (800395c <HAL_SPI_MspInit+0x80>)
 8003924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800392e:	23e0      	movs	r3, #224	; 0xe0
 8003930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003932:	2302      	movs	r3, #2
 8003934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800393a:	2303      	movs	r3, #3
 800393c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800393e:	2305      	movs	r3, #5
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003942:	f107 0314 	add.w	r3, r7, #20
 8003946:	4619      	mov	r1, r3
 8003948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800394c:	f001 fb4c 	bl	8004fe8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003950:	bf00      	nop
 8003952:	3728      	adds	r7, #40	; 0x28
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40013000 	.word	0x40013000
 800395c:	40021000 	.word	0x40021000

08003960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003966:	4b11      	ldr	r3, [pc, #68]	; (80039ac <HAL_MspInit+0x4c>)
 8003968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800396a:	4a10      	ldr	r2, [pc, #64]	; (80039ac <HAL_MspInit+0x4c>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	6613      	str	r3, [r2, #96]	; 0x60
 8003972:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <HAL_MspInit+0x4c>)
 8003974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	607b      	str	r3, [r7, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800397e:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_MspInit+0x4c>)
 8003980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003982:	4a0a      	ldr	r2, [pc, #40]	; (80039ac <HAL_MspInit+0x4c>)
 8003984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003988:	6593      	str	r3, [r2, #88]	; 0x58
 800398a:	4b08      	ldr	r3, [pc, #32]	; (80039ac <HAL_MspInit+0x4c>)
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003996:	2200      	movs	r2, #0
 8003998:	210f      	movs	r1, #15
 800399a:	f06f 0001 	mvn.w	r0, #1
 800399e:	f001 faf9 	bl	8004f94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000

080039b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08e      	sub	sp, #56	; 0x38
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80039be:	4b34      	ldr	r3, [pc, #208]	; (8003a90 <HAL_InitTick+0xe0>)
 80039c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c2:	4a33      	ldr	r2, [pc, #204]	; (8003a90 <HAL_InitTick+0xe0>)
 80039c4:	f043 0310 	orr.w	r3, r3, #16
 80039c8:	6593      	str	r3, [r2, #88]	; 0x58
 80039ca:	4b31      	ldr	r3, [pc, #196]	; (8003a90 <HAL_InitTick+0xe0>)
 80039cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80039d6:	f107 0210 	add.w	r2, r7, #16
 80039da:	f107 0314 	add.w	r3, r7, #20
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f002 faf3 	bl	8005fcc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d103      	bne.n	80039f8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80039f0:	f002 fac0 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 80039f4:	6378      	str	r0, [r7, #52]	; 0x34
 80039f6:	e004      	b.n	8003a02 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80039f8:	f002 fabc 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 80039fc:	4603      	mov	r3, r0
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a04:	4a23      	ldr	r2, [pc, #140]	; (8003a94 <HAL_InitTick+0xe4>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	0c9b      	lsrs	r3, r3, #18
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003a10:	4b21      	ldr	r3, [pc, #132]	; (8003a98 <HAL_InitTick+0xe8>)
 8003a12:	4a22      	ldr	r2, [pc, #136]	; (8003a9c <HAL_InitTick+0xec>)
 8003a14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003a16:	4b20      	ldr	r3, [pc, #128]	; (8003a98 <HAL_InitTick+0xe8>)
 8003a18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a1c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003a1e:	4a1e      	ldr	r2, [pc, #120]	; (8003a98 <HAL_InitTick+0xe8>)
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003a24:	4b1c      	ldr	r3, [pc, #112]	; (8003a98 <HAL_InitTick+0xe8>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a2a:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <HAL_InitTick+0xe8>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a30:	4b19      	ldr	r3, [pc, #100]	; (8003a98 <HAL_InitTick+0xe8>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003a36:	4818      	ldr	r0, [pc, #96]	; (8003a98 <HAL_InitTick+0xe8>)
 8003a38:	f003 fdd6 	bl	80075e8 <HAL_TIM_Base_Init>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003a42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d11b      	bne.n	8003a82 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003a4a:	4813      	ldr	r0, [pc, #76]	; (8003a98 <HAL_InitTick+0xe8>)
 8003a4c:	f003 fe24 	bl	8007698 <HAL_TIM_Base_Start_IT>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003a56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d111      	bne.n	8003a82 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a5e:	2036      	movs	r0, #54	; 0x36
 8003a60:	f001 fab4 	bl	8004fcc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b0f      	cmp	r3, #15
 8003a68:	d808      	bhi.n	8003a7c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	2036      	movs	r0, #54	; 0x36
 8003a70:	f001 fa90 	bl	8004f94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a74:	4a0a      	ldr	r2, [pc, #40]	; (8003aa0 <HAL_InitTick+0xf0>)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	e002      	b.n	8003a82 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003a82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3738      	adds	r7, #56	; 0x38
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000
 8003a94:	431bde83 	.word	0x431bde83
 8003a98:	2000058c 	.word	0x2000058c
 8003a9c:	40001000 	.word	0x40001000
 8003aa0:	200001bc 	.word	0x200001bc

08003aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003aa8:	f002 fad2 	bl	8006050 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003aac:	e7fe      	b.n	8003aac <NMI_Handler+0x8>
	...

08003ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08c      	sub	sp, #48	; 0x30
 8003ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003ab6:	1d3b      	adds	r3, r7, #4
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	60da      	str	r2, [r3, #12]
 8003ac2:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pins : PBPin PBPin PBPin PBPin */
	GPIO_InitStruct.Pin = LED_D1_PWM_Pin;
 8003ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ac8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aca:	2301      	movs	r3, #1
 8003acc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D1_PWM_GPIO_Port, &GPIO_InitStruct);
 8003ad2:	1d3b      	adds	r3, r7, #4
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ada:	f001 fa85 	bl	8004fe8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D2_PWM_Pin;
 8003ade:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ae2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D2_PWM_GPIO_Port, &GPIO_InitStruct);
 8003aec:	1d3b      	adds	r3, r7, #4
 8003aee:	4619      	mov	r1, r3
 8003af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003af4:	f001 fa78 	bl	8004fe8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D3_PWM_Pin;
 8003af8:	2302      	movs	r3, #2
 8003afa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003afc:	2301      	movs	r3, #1
 8003afe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8003b04:	1d3b      	adds	r3, r7, #4
 8003b06:	4619      	mov	r1, r3
 8003b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b0c:	f001 fa6c 	bl	8004fe8 <HAL_GPIO_Init>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8003b10:	2300      	movs	r3, #0
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b14:	e002      	b.n	8003b1c <HardFault_Handler+0x6c>
 8003b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b18:	3301      	adds	r3, #1
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1e:	4a2f      	ldr	r2, [pc, #188]	; (8003bdc <HardFault_Handler+0x12c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	ddf8      	ble.n	8003b16 <HardFault_Handler+0x66>
			;
		HAL_GPIO_WritePin(LED_D1_PWM_GPIO_Port, LED_D1_PWM_Pin, GPIO_PIN_SET);
 8003b24:	2201      	movs	r2, #1
 8003b26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b2e:	f001 fbc5 	bl	80052bc <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8003b32:	2300      	movs	r3, #0
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b36:	e002      	b.n	8003b3e <HardFault_Handler+0x8e>
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b40:	4a26      	ldr	r2, [pc, #152]	; (8003bdc <HardFault_Handler+0x12c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	ddf8      	ble.n	8003b38 <HardFault_Handler+0x88>
					;
		HAL_GPIO_WritePin(LED_D2_PWM_GPIO_Port, LED_D2_PWM_Pin, GPIO_PIN_SET);
 8003b46:	2201      	movs	r2, #1
 8003b48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b50:	f001 fbb4 	bl	80052bc <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8003b54:	2300      	movs	r3, #0
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
 8003b58:	e002      	b.n	8003b60 <HardFault_Handler+0xb0>
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	4a1e      	ldr	r2, [pc, #120]	; (8003bdc <HardFault_Handler+0x12c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	ddf8      	ble.n	8003b5a <HardFault_Handler+0xaa>
					;
		HAL_GPIO_WritePin(LED_D3_PWM_GPIO_Port, LED_D3_PWM_Pin, GPIO_PIN_SET);
 8003b68:	2201      	movs	r2, #1
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b70:	f001 fba4 	bl	80052bc <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8003b74:	2300      	movs	r3, #0
 8003b76:	623b      	str	r3, [r7, #32]
 8003b78:	e002      	b.n	8003b80 <HardFault_Handler+0xd0>
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	623b      	str	r3, [r7, #32]
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	4a16      	ldr	r2, [pc, #88]	; (8003bdc <HardFault_Handler+0x12c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	ddf8      	ble.n	8003b7a <HardFault_Handler+0xca>
			;
		HAL_GPIO_WritePin(LED_D1_PWM_GPIO_Port, LED_D1_PWM_Pin, GPIO_PIN_RESET);
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b92:	f001 fb93 	bl	80052bc <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
 8003b9a:	e002      	b.n	8003ba2 <HardFault_Handler+0xf2>
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	61fb      	str	r3, [r7, #28]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	4a0d      	ldr	r2, [pc, #52]	; (8003bdc <HardFault_Handler+0x12c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	ddf8      	ble.n	8003b9c <HardFault_Handler+0xec>
					;
		HAL_GPIO_WritePin(LED_D2_PWM_GPIO_Port, LED_D2_PWM_Pin, GPIO_PIN_RESET);
 8003baa:	2200      	movs	r2, #0
 8003bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bb4:	f001 fb82 	bl	80052bc <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61bb      	str	r3, [r7, #24]
 8003bbc:	e002      	b.n	8003bc4 <HardFault_Handler+0x114>
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	4a05      	ldr	r2, [pc, #20]	; (8003bdc <HardFault_Handler+0x12c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	ddf8      	ble.n	8003bbe <HardFault_Handler+0x10e>
					;
		HAL_GPIO_WritePin(LED_D3_PWM_GPIO_Port, LED_D3_PWM_Pin, GPIO_PIN_RESET);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2102      	movs	r1, #2
 8003bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bd4:	f001 fb72 	bl	80052bc <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8003bd8:	e79a      	b.n	8003b10 <HardFault_Handler+0x60>
 8003bda:	bf00      	nop
 8003bdc:	000c34ff 	.word	0x000c34ff

08003be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003be4:	e7fe      	b.n	8003be4 <MemManage_Handler+0x4>

08003be6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003be6:	b480      	push	{r7}
 8003be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bea:	e7fe      	b.n	8003bea <BusFault_Handler+0x4>

08003bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bf0:	e7fe      	b.n	8003bf0 <UsageFault_Handler+0x4>

08003bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bf6:	bf00      	nop
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c04:	4802      	ldr	r0, [pc, #8]	; (8003c10 <CAN1_TX_IRQHandler+0x10>)
 8003c06:	f000 fee8 	bl	80049da <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003c0a:	bf00      	nop
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	200003d4 	.word	0x200003d4

08003c14 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c18:	4802      	ldr	r0, [pc, #8]	; (8003c24 <CAN1_RX0_IRQHandler+0x10>)
 8003c1a:	f000 fede 	bl	80049da <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003c1e:	bf00      	nop
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	200003d4 	.word	0x200003d4

08003c28 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c2c:	4802      	ldr	r0, [pc, #8]	; (8003c38 <CAN1_RX1_IRQHandler+0x10>)
 8003c2e:	f000 fed4 	bl	80049da <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003c32:	bf00      	nop
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	200003d4 	.word	0x200003d4

08003c3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c40:	4802      	ldr	r0, [pc, #8]	; (8003c4c <TIM6_DAC_IRQHandler+0x10>)
 8003c42:	f003 febd 	bl	80079c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c46:	bf00      	nop
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	2000058c 	.word	0x2000058c

08003c50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return 1;
 8003c54:	2301      	movs	r3, #1
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <_kill>:

int _kill(int pid, int sig)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c6a:	f009 fc2f 	bl	800d4cc <__errno>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2216      	movs	r2, #22
 8003c72:	601a      	str	r2, [r3, #0]
  return -1;
 8003c74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <_exit>:

void _exit (int status)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c88:	f04f 31ff 	mov.w	r1, #4294967295
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff ffe7 	bl	8003c60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c92:	e7fe      	b.n	8003c92 <_exit+0x12>

08003c94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	e00a      	b.n	8003cbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ca6:	f3af 8000 	nop.w
 8003caa:	4601      	mov	r1, r0
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	60ba      	str	r2, [r7, #8]
 8003cb2:	b2ca      	uxtb	r2, r1
 8003cb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	dbf0      	blt.n	8003ca6 <_read+0x12>
  }

  return len;
 8003cc4:	687b      	ldr	r3, [r7, #4]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <_close>:
  }
  return len;
}

int _close(int file)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003cd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cf6:	605a      	str	r2, [r3, #4]
  return 0;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <_isatty>:

int _isatty(int file)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d0e:	2301      	movs	r3, #1
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d40:	4a14      	ldr	r2, [pc, #80]	; (8003d94 <_sbrk+0x5c>)
 8003d42:	4b15      	ldr	r3, [pc, #84]	; (8003d98 <_sbrk+0x60>)
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d4c:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <_sbrk+0x64>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d102      	bne.n	8003d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d54:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <_sbrk+0x64>)
 8003d56:	4a12      	ldr	r2, [pc, #72]	; (8003da0 <_sbrk+0x68>)
 8003d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d5a:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <_sbrk+0x64>)
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4413      	add	r3, r2
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d207      	bcs.n	8003d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d68:	f009 fbb0 	bl	800d4cc <__errno>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	220c      	movs	r2, #12
 8003d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d72:	f04f 33ff 	mov.w	r3, #4294967295
 8003d76:	e009      	b.n	8003d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d78:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <_sbrk+0x64>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d7e:	4b07      	ldr	r3, [pc, #28]	; (8003d9c <_sbrk+0x64>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4413      	add	r3, r2
 8003d86:	4a05      	ldr	r2, [pc, #20]	; (8003d9c <_sbrk+0x64>)
 8003d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	20010000 	.word	0x20010000
 8003d98:	00000400 	.word	0x00000400
 8003d9c:	200005d8 	.word	0x200005d8
 8003da0:	20002930 	.word	0x20002930

08003da4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003da8:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <SystemInit+0x20>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dae:	4a05      	ldr	r2, [pc, #20]	; (8003dc4 <SystemInit+0x20>)
 8003db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	e000ed00 	.word	0xe000ed00

08003dc8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b09a      	sub	sp, #104	; 0x68
 8003dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	605a      	str	r2, [r3, #4]
 8003dd8:	609a      	str	r2, [r3, #8]
 8003dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ddc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	605a      	str	r2, [r3, #4]
 8003de6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003de8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	60da      	str	r2, [r3, #12]
 8003df6:	611a      	str	r2, [r3, #16]
 8003df8:	615a      	str	r2, [r3, #20]
 8003dfa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003dfc:	1d3b      	adds	r3, r7, #4
 8003dfe:	222c      	movs	r2, #44	; 0x2c
 8003e00:	2100      	movs	r1, #0
 8003e02:	4618      	mov	r0, r3
 8003e04:	f009 fb10 	bl	800d428 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e08:	4b49      	ldr	r3, [pc, #292]	; (8003f30 <MX_TIM1_Init+0x168>)
 8003e0a:	4a4a      	ldr	r2, [pc, #296]	; (8003f34 <MX_TIM1_Init+0x16c>)
 8003e0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 8003e0e:	4b48      	ldr	r3, [pc, #288]	; (8003f30 <MX_TIM1_Init+0x168>)
 8003e10:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8003e14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e16:	4b46      	ldr	r3, [pc, #280]	; (8003f30 <MX_TIM1_Init+0x168>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003e1c:	4b44      	ldr	r3, [pc, #272]	; (8003f30 <MX_TIM1_Init+0x168>)
 8003e1e:	2263      	movs	r2, #99	; 0x63
 8003e20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e22:	4b43      	ldr	r3, [pc, #268]	; (8003f30 <MX_TIM1_Init+0x168>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e28:	4b41      	ldr	r3, [pc, #260]	; (8003f30 <MX_TIM1_Init+0x168>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e2e:	4b40      	ldr	r3, [pc, #256]	; (8003f30 <MX_TIM1_Init+0x168>)
 8003e30:	2280      	movs	r2, #128	; 0x80
 8003e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e34:	483e      	ldr	r0, [pc, #248]	; (8003f30 <MX_TIM1_Init+0x168>)
 8003e36:	f003 fbd7 	bl	80075e8 <HAL_TIM_Base_Init>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003e40:	f7fe fa00 	bl	8002244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e48:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4837      	ldr	r0, [pc, #220]	; (8003f30 <MX_TIM1_Init+0x168>)
 8003e52:	f003 ffe9 	bl	8007e28 <HAL_TIM_ConfigClockSource>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003e5c:	f7fe f9f2 	bl	8002244 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e60:	4833      	ldr	r0, [pc, #204]	; (8003f30 <MX_TIM1_Init+0x168>)
 8003e62:	f003 fc6d 	bl	8007740 <HAL_TIM_PWM_Init>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003e6c:	f7fe f9ea 	bl	8002244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e70:	2300      	movs	r3, #0
 8003e72:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003e74:	2300      	movs	r3, #0
 8003e76:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e80:	4619      	mov	r1, r3
 8003e82:	482b      	ldr	r0, [pc, #172]	; (8003f30 <MX_TIM1_Init+0x168>)
 8003e84:	f004 fc64 	bl	8008750 <HAL_TIMEx_MasterConfigSynchronization>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003e8e:	f7fe f9d9 	bl	8002244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e92:	2360      	movs	r3, #96	; 0x60
 8003e94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003eae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003eb2:	2204      	movs	r2, #4
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	481e      	ldr	r0, [pc, #120]	; (8003f30 <MX_TIM1_Init+0x168>)
 8003eb8:	f003 fea2 	bl	8007c00 <HAL_TIM_PWM_ConfigChannel>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8003ec2:	f7fe f9bf 	bl	8002244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ec6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003eca:	2208      	movs	r2, #8
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4818      	ldr	r0, [pc, #96]	; (8003f30 <MX_TIM1_Init+0x168>)
 8003ed0:	f003 fe96 	bl	8007c00 <HAL_TIM_PWM_ConfigChannel>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8003eda:	f7fe f9b3 	bl	8002244 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ef2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ef6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003efc:	2300      	movs	r3, #0
 8003efe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003f00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f0e:	1d3b      	adds	r3, r7, #4
 8003f10:	4619      	mov	r1, r3
 8003f12:	4807      	ldr	r0, [pc, #28]	; (8003f30 <MX_TIM1_Init+0x168>)
 8003f14:	f004 fc82 	bl	800881c <HAL_TIMEx_ConfigBreakDeadTime>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8003f1e:	f7fe f991 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003f22:	4803      	ldr	r0, [pc, #12]	; (8003f30 <MX_TIM1_Init+0x168>)
 8003f24:	f000 f8b0 	bl	8004088 <HAL_TIM_MspPostInit>

}
 8003f28:	bf00      	nop
 8003f2a:	3768      	adds	r7, #104	; 0x68
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	200005dc 	.word	0x200005dc
 8003f34:	40012c00 	.word	0x40012c00

08003f38 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08e      	sub	sp, #56	; 0x38
 8003f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	605a      	str	r2, [r3, #4]
 8003f48:	609a      	str	r2, [r3, #8]
 8003f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f4c:	f107 031c 	add.w	r3, r7, #28
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	605a      	str	r2, [r3, #4]
 8003f56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f58:	463b      	mov	r3, r7
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	605a      	str	r2, [r3, #4]
 8003f60:	609a      	str	r2, [r3, #8]
 8003f62:	60da      	str	r2, [r3, #12]
 8003f64:	611a      	str	r2, [r3, #16]
 8003f66:	615a      	str	r2, [r3, #20]
 8003f68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f6a:	4b2d      	ldr	r3, [pc, #180]	; (8004020 <MX_TIM2_Init+0xe8>)
 8003f6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8003f72:	4b2b      	ldr	r3, [pc, #172]	; (8004020 <MX_TIM2_Init+0xe8>)
 8003f74:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8003f78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f7a:	4b29      	ldr	r3, [pc, #164]	; (8004020 <MX_TIM2_Init+0xe8>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003f80:	4b27      	ldr	r3, [pc, #156]	; (8004020 <MX_TIM2_Init+0xe8>)
 8003f82:	2263      	movs	r2, #99	; 0x63
 8003f84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f86:	4b26      	ldr	r3, [pc, #152]	; (8004020 <MX_TIM2_Init+0xe8>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f8c:	4b24      	ldr	r3, [pc, #144]	; (8004020 <MX_TIM2_Init+0xe8>)
 8003f8e:	2280      	movs	r2, #128	; 0x80
 8003f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f92:	4823      	ldr	r0, [pc, #140]	; (8004020 <MX_TIM2_Init+0xe8>)
 8003f94:	f003 fb28 	bl	80075e8 <HAL_TIM_Base_Init>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003f9e:	f7fe f951 	bl	8002244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003fa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fac:	4619      	mov	r1, r3
 8003fae:	481c      	ldr	r0, [pc, #112]	; (8004020 <MX_TIM2_Init+0xe8>)
 8003fb0:	f003 ff3a 	bl	8007e28 <HAL_TIM_ConfigClockSource>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003fba:	f7fe f943 	bl	8002244 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003fbe:	4818      	ldr	r0, [pc, #96]	; (8004020 <MX_TIM2_Init+0xe8>)
 8003fc0:	f003 fbbe 	bl	8007740 <HAL_TIM_PWM_Init>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003fca:	f7fe f93b 	bl	8002244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003fd6:	f107 031c 	add.w	r3, r7, #28
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4810      	ldr	r0, [pc, #64]	; (8004020 <MX_TIM2_Init+0xe8>)
 8003fde:	f004 fbb7 	bl	8008750 <HAL_TIMEx_MasterConfigSynchronization>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003fe8:	f7fe f92c 	bl	8002244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fec:	2360      	movs	r3, #96	; 0x60
 8003fee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ffc:	463b      	mov	r3, r7
 8003ffe:	2204      	movs	r2, #4
 8004000:	4619      	mov	r1, r3
 8004002:	4807      	ldr	r0, [pc, #28]	; (8004020 <MX_TIM2_Init+0xe8>)
 8004004:	f003 fdfc 	bl	8007c00 <HAL_TIM_PWM_ConfigChannel>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800400e:	f7fe f919 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004012:	4803      	ldr	r0, [pc, #12]	; (8004020 <MX_TIM2_Init+0xe8>)
 8004014:	f000 f838 	bl	8004088 <HAL_TIM_MspPostInit>

}
 8004018:	bf00      	nop
 800401a:	3738      	adds	r7, #56	; 0x38
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20000628 	.word	0x20000628

08004024 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a13      	ldr	r2, [pc, #76]	; (8004080 <HAL_TIM_Base_MspInit+0x5c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d10c      	bne.n	8004050 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004036:	4b13      	ldr	r3, [pc, #76]	; (8004084 <HAL_TIM_Base_MspInit+0x60>)
 8004038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403a:	4a12      	ldr	r2, [pc, #72]	; (8004084 <HAL_TIM_Base_MspInit+0x60>)
 800403c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004040:	6613      	str	r3, [r2, #96]	; 0x60
 8004042:	4b10      	ldr	r3, [pc, #64]	; (8004084 <HAL_TIM_Base_MspInit+0x60>)
 8004044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800404e:	e010      	b.n	8004072 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004058:	d10b      	bne.n	8004072 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800405a:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <HAL_TIM_Base_MspInit+0x60>)
 800405c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405e:	4a09      	ldr	r2, [pc, #36]	; (8004084 <HAL_TIM_Base_MspInit+0x60>)
 8004060:	f043 0301 	orr.w	r3, r3, #1
 8004064:	6593      	str	r3, [r2, #88]	; 0x58
 8004066:	4b07      	ldr	r3, [pc, #28]	; (8004084 <HAL_TIM_Base_MspInit+0x60>)
 8004068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	60bb      	str	r3, [r7, #8]
 8004070:	68bb      	ldr	r3, [r7, #8]
}
 8004072:	bf00      	nop
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40012c00 	.word	0x40012c00
 8004084:	40021000 	.word	0x40021000

08004088 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08a      	sub	sp, #40	; 0x28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004090:	f107 0314 	add.w	r3, r7, #20
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	60da      	str	r2, [r3, #12]
 800409e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a23      	ldr	r2, [pc, #140]	; (8004134 <HAL_TIM_MspPostInit+0xac>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d11e      	bne.n	80040e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040aa:	4b23      	ldr	r3, [pc, #140]	; (8004138 <HAL_TIM_MspPostInit+0xb0>)
 80040ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ae:	4a22      	ldr	r2, [pc, #136]	; (8004138 <HAL_TIM_MspPostInit+0xb0>)
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040b6:	4b20      	ldr	r3, [pc, #128]	; (8004138 <HAL_TIM_MspPostInit+0xb0>)
 80040b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LED_D2_PWM_Pin|LED_D1_PWM_Pin;
 80040c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80040c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c8:	2302      	movs	r3, #2
 80040ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d0:	2300      	movs	r3, #0
 80040d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80040d4:	2301      	movs	r3, #1
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040d8:	f107 0314 	add.w	r3, r7, #20
 80040dc:	4619      	mov	r1, r3
 80040de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040e2:	f000 ff81 	bl	8004fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80040e6:	e021      	b.n	800412c <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f0:	d11c      	bne.n	800412c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040f2:	4b11      	ldr	r3, [pc, #68]	; (8004138 <HAL_TIM_MspPostInit+0xb0>)
 80040f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f6:	4a10      	ldr	r2, [pc, #64]	; (8004138 <HAL_TIM_MspPostInit+0xb0>)
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040fe:	4b0e      	ldr	r3, [pc, #56]	; (8004138 <HAL_TIM_MspPostInit+0xb0>)
 8004100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_D3_PWM_Pin;
 800410a:	2302      	movs	r3, #2
 800410c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800410e:	2302      	movs	r3, #2
 8004110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004116:	2300      	movs	r3, #0
 8004118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800411a:	2301      	movs	r3, #1
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 800411e:	f107 0314 	add.w	r3, r7, #20
 8004122:	4619      	mov	r1, r3
 8004124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004128:	f000 ff5e 	bl	8004fe8 <HAL_GPIO_Init>
}
 800412c:	bf00      	nop
 800412e:	3728      	adds	r7, #40	; 0x28
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40012c00 	.word	0x40012c00
 8004138:	40021000 	.word	0x40021000

0800413c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004140:	4b14      	ldr	r3, [pc, #80]	; (8004194 <MX_USART2_UART_Init+0x58>)
 8004142:	4a15      	ldr	r2, [pc, #84]	; (8004198 <MX_USART2_UART_Init+0x5c>)
 8004144:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004146:	4b13      	ldr	r3, [pc, #76]	; (8004194 <MX_USART2_UART_Init+0x58>)
 8004148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800414c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800414e:	4b11      	ldr	r3, [pc, #68]	; (8004194 <MX_USART2_UART_Init+0x58>)
 8004150:	2200      	movs	r2, #0
 8004152:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004154:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <MX_USART2_UART_Init+0x58>)
 8004156:	2200      	movs	r2, #0
 8004158:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800415a:	4b0e      	ldr	r3, [pc, #56]	; (8004194 <MX_USART2_UART_Init+0x58>)
 800415c:	2200      	movs	r2, #0
 800415e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004160:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <MX_USART2_UART_Init+0x58>)
 8004162:	220c      	movs	r2, #12
 8004164:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004166:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <MX_USART2_UART_Init+0x58>)
 8004168:	2200      	movs	r2, #0
 800416a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800416c:	4b09      	ldr	r3, [pc, #36]	; (8004194 <MX_USART2_UART_Init+0x58>)
 800416e:	2200      	movs	r2, #0
 8004170:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004172:	4b08      	ldr	r3, [pc, #32]	; (8004194 <MX_USART2_UART_Init+0x58>)
 8004174:	2200      	movs	r2, #0
 8004176:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004178:	4b06      	ldr	r3, [pc, #24]	; (8004194 <MX_USART2_UART_Init+0x58>)
 800417a:	2200      	movs	r2, #0
 800417c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800417e:	4805      	ldr	r0, [pc, #20]	; (8004194 <MX_USART2_UART_Init+0x58>)
 8004180:	f004 fbe2 	bl	8008948 <HAL_UART_Init>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800418a:	f7fe f85b 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800418e:	bf00      	nop
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20000674 	.word	0x20000674
 8004198:	40004400 	.word	0x40004400

0800419c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b09e      	sub	sp, #120	; 0x78
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	605a      	str	r2, [r3, #4]
 80041ae:	609a      	str	r2, [r3, #8]
 80041b0:	60da      	str	r2, [r3, #12]
 80041b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80041b4:	f107 0310 	add.w	r3, r7, #16
 80041b8:	2254      	movs	r2, #84	; 0x54
 80041ba:	2100      	movs	r1, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	f009 f933 	bl	800d428 <memset>
  if(uartHandle->Instance==USART2)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1f      	ldr	r2, [pc, #124]	; (8004244 <HAL_UART_MspInit+0xa8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d136      	bne.n	800423a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80041cc:	2302      	movs	r3, #2
 80041ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80041d0:	2300      	movs	r3, #0
 80041d2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041d4:	f107 0310 	add.w	r3, r7, #16
 80041d8:	4618      	mov	r0, r3
 80041da:	f001 ffb5 	bl	8006148 <HAL_RCCEx_PeriphCLKConfig>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80041e4:	f7fe f82e 	bl	8002244 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80041e8:	4b17      	ldr	r3, [pc, #92]	; (8004248 <HAL_UART_MspInit+0xac>)
 80041ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ec:	4a16      	ldr	r2, [pc, #88]	; (8004248 <HAL_UART_MspInit+0xac>)
 80041ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f2:	6593      	str	r3, [r2, #88]	; 0x58
 80041f4:	4b14      	ldr	r3, [pc, #80]	; (8004248 <HAL_UART_MspInit+0xac>)
 80041f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004200:	4b11      	ldr	r3, [pc, #68]	; (8004248 <HAL_UART_MspInit+0xac>)
 8004202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004204:	4a10      	ldr	r2, [pc, #64]	; (8004248 <HAL_UART_MspInit+0xac>)
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800420c:	4b0e      	ldr	r3, [pc, #56]	; (8004248 <HAL_UART_MspInit+0xac>)
 800420e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004218:	230c      	movs	r3, #12
 800421a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800421c:	2302      	movs	r3, #2
 800421e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004220:	2300      	movs	r3, #0
 8004222:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004224:	2303      	movs	r3, #3
 8004226:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004228:	2307      	movs	r3, #7
 800422a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800422c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004230:	4619      	mov	r1, r3
 8004232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004236:	f000 fed7 	bl	8004fe8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800423a:	bf00      	nop
 800423c:	3778      	adds	r7, #120	; 0x78
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40004400 	.word	0x40004400
 8004248:	40021000 	.word	0x40021000

0800424c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800424c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004284 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004250:	f7ff fda8 	bl	8003da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004254:	480c      	ldr	r0, [pc, #48]	; (8004288 <LoopForever+0x6>)
  ldr r1, =_edata
 8004256:	490d      	ldr	r1, [pc, #52]	; (800428c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004258:	4a0d      	ldr	r2, [pc, #52]	; (8004290 <LoopForever+0xe>)
  movs r3, #0
 800425a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800425c:	e002      	b.n	8004264 <LoopCopyDataInit>

0800425e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800425e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004262:	3304      	adds	r3, #4

08004264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004268:	d3f9      	bcc.n	800425e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800426a:	4a0a      	ldr	r2, [pc, #40]	; (8004294 <LoopForever+0x12>)
  ldr r4, =_ebss
 800426c:	4c0a      	ldr	r4, [pc, #40]	; (8004298 <LoopForever+0x16>)
  movs r3, #0
 800426e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004270:	e001      	b.n	8004276 <LoopFillZerobss>

08004272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004274:	3204      	adds	r2, #4

08004276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004278:	d3fb      	bcc.n	8004272 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800427a:	f009 f92d 	bl	800d4d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800427e:	f7fd ff53 	bl	8002128 <main>

08004282 <LoopForever>:

LoopForever:
    b LoopForever
 8004282:	e7fe      	b.n	8004282 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004284:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800428c:	20000390 	.word	0x20000390
  ldr r2, =_sidata
 8004290:	0800fa78 	.word	0x0800fa78
  ldr r2, =_sbss
 8004294:	20000390 	.word	0x20000390
  ldr r4, =_ebss
 8004298:	20002930 	.word	0x20002930

0800429c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800429c:	e7fe      	b.n	800429c <ADC1_IRQHandler>

0800429e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042a8:	2003      	movs	r0, #3
 80042aa:	f000 fe68 	bl	8004f7e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042ae:	200f      	movs	r0, #15
 80042b0:	f7ff fb7e 	bl	80039b0 <HAL_InitTick>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	71fb      	strb	r3, [r7, #7]
 80042be:	e001      	b.n	80042c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80042c0:	f7ff fb4e 	bl	8003960 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80042c4:	79fb      	ldrb	r3, [r7, #7]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80042d4:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <HAL_IncTick+0x20>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <HAL_IncTick+0x24>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4413      	add	r3, r2
 80042e0:	4a04      	ldr	r2, [pc, #16]	; (80042f4 <HAL_IncTick+0x24>)
 80042e2:	6013      	str	r3, [r2, #0]
}
 80042e4:	bf00      	nop
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	200001c0 	.word	0x200001c0
 80042f4:	200006f8 	.word	0x200006f8

080042f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  return uwTick;
 80042fc:	4b03      	ldr	r3, [pc, #12]	; (800430c <HAL_GetTick+0x14>)
 80042fe:	681b      	ldr	r3, [r3, #0]
}
 8004300:	4618      	mov	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	200006f8 	.word	0x200006f8

08004310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004318:	f7ff ffee 	bl	80042f8 <HAL_GetTick>
 800431c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004328:	d005      	beq.n	8004336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800432a:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <HAL_Delay+0x44>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4413      	add	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004336:	bf00      	nop
 8004338:	f7ff ffde 	bl	80042f8 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	429a      	cmp	r2, r3
 8004346:	d8f7      	bhi.n	8004338 <HAL_Delay+0x28>
  {
  }
}
 8004348:	bf00      	nop
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	200001c0 	.word	0x200001c0

08004358 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e0ed      	b.n	8004546 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d102      	bne.n	800437c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fd fb9c 	bl	8001ab4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0201 	orr.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800438c:	f7ff ffb4 	bl	80042f8 <HAL_GetTick>
 8004390:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004392:	e012      	b.n	80043ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004394:	f7ff ffb0 	bl	80042f8 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b0a      	cmp	r3, #10
 80043a0:	d90b      	bls.n	80043ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2205      	movs	r2, #5
 80043b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e0c5      	b.n	8004546 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0e5      	beq.n	8004394 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0202 	bic.w	r2, r2, #2
 80043d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043d8:	f7ff ff8e 	bl	80042f8 <HAL_GetTick>
 80043dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80043de:	e012      	b.n	8004406 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80043e0:	f7ff ff8a 	bl	80042f8 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b0a      	cmp	r3, #10
 80043ec:	d90b      	bls.n	8004406 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2205      	movs	r2, #5
 80043fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e09f      	b.n	8004546 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e5      	bne.n	80043e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	7e1b      	ldrb	r3, [r3, #24]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d108      	bne.n	800442e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	e007      	b.n	800443e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800443c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	7e5b      	ldrb	r3, [r3, #25]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d108      	bne.n	8004458 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	e007      	b.n	8004468 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004466:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	7e9b      	ldrb	r3, [r3, #26]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d108      	bne.n	8004482 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0220 	orr.w	r2, r2, #32
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	e007      	b.n	8004492 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0220 	bic.w	r2, r2, #32
 8004490:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	7edb      	ldrb	r3, [r3, #27]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d108      	bne.n	80044ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0210 	bic.w	r2, r2, #16
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	e007      	b.n	80044bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0210 	orr.w	r2, r2, #16
 80044ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	7f1b      	ldrb	r3, [r3, #28]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d108      	bne.n	80044d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0208 	orr.w	r2, r2, #8
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	e007      	b.n	80044e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0208 	bic.w	r2, r2, #8
 80044e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	7f5b      	ldrb	r3, [r3, #29]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d108      	bne.n	8004500 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0204 	orr.w	r2, r2, #4
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	e007      	b.n	8004510 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0204 	bic.w	r2, r2, #4
 800450e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	ea42 0103 	orr.w	r1, r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	1e5a      	subs	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800454e:	b480      	push	{r7}
 8004550:	b087      	sub	sp, #28
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004564:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004566:	7cfb      	ldrb	r3, [r7, #19]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d003      	beq.n	8004574 <HAL_CAN_ConfigFilter+0x26>
 800456c:	7cfb      	ldrb	r3, [r7, #19]
 800456e:	2b02      	cmp	r3, #2
 8004570:	f040 80aa 	bne.w	80046c8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800457a:	f043 0201 	orr.w	r2, r3, #1
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	f003 031f 	and.w	r3, r3, #31
 800458c:	2201      	movs	r2, #1
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	43db      	mvns	r3, r3
 800459e:	401a      	ands	r2, r3
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d123      	bne.n	80045f6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	43db      	mvns	r3, r3
 80045b8:	401a      	ands	r2, r3
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80045d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	3248      	adds	r2, #72	; 0x48
 80045d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80045ec:	6979      	ldr	r1, [r7, #20]
 80045ee:	3348      	adds	r3, #72	; 0x48
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	440b      	add	r3, r1
 80045f4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d122      	bne.n	8004644 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	431a      	orrs	r2, r3
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800461e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	3248      	adds	r2, #72	; 0x48
 8004624:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004638:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800463a:	6979      	ldr	r1, [r7, #20]
 800463c:	3348      	adds	r3, #72	; 0x48
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	440b      	add	r3, r1
 8004642:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d109      	bne.n	8004660 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	43db      	mvns	r3, r3
 8004656:	401a      	ands	r2, r3
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800465e:	e007      	b.n	8004670 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	431a      	orrs	r2, r3
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d109      	bne.n	800468c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	43db      	mvns	r3, r3
 8004682:	401a      	ands	r2, r3
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800468a:	e007      	b.n	800469c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	431a      	orrs	r2, r3
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d107      	bne.n	80046b4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	431a      	orrs	r2, r3
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80046ba:	f023 0201 	bic.w	r2, r3, #1
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	e006      	b.n	80046d6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
  }
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d12e      	bne.n	8004754 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2202      	movs	r2, #2
 80046fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0201 	bic.w	r2, r2, #1
 800470c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800470e:	f7ff fdf3 	bl	80042f8 <HAL_GetTick>
 8004712:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004714:	e012      	b.n	800473c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004716:	f7ff fdef 	bl	80042f8 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b0a      	cmp	r3, #10
 8004722:	d90b      	bls.n	800473c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2205      	movs	r2, #5
 8004734:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e012      	b.n	8004762 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e5      	bne.n	8004716 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	e006      	b.n	8004762 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
  }
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800476a:	b480      	push	{r7}
 800476c:	b087      	sub	sp, #28
 800476e:	af00      	add	r7, sp, #0
 8004770:	60f8      	str	r0, [r7, #12]
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	607a      	str	r2, [r7, #4]
 8004776:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800477e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004780:	7dfb      	ldrb	r3, [r7, #23]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d003      	beq.n	800478e <HAL_CAN_GetRxMessage+0x24>
 8004786:	7dfb      	ldrb	r3, [r7, #23]
 8004788:	2b02      	cmp	r3, #2
 800478a:	f040 80f3 	bne.w	8004974 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10e      	bne.n	80047b2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d116      	bne.n	80047d0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e0e7      	b.n	8004982 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	f003 0303 	and.w	r3, r3, #3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d107      	bne.n	80047d0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e0d8      	b.n	8004982 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	331b      	adds	r3, #27
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	4413      	add	r3, r2
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0204 	and.w	r2, r3, #4
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10c      	bne.n	8004808 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	331b      	adds	r3, #27
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	4413      	add	r3, r2
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	0d5b      	lsrs	r3, r3, #21
 80047fe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	e00b      	b.n	8004820 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	331b      	adds	r3, #27
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	4413      	add	r3, r2
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	08db      	lsrs	r3, r3, #3
 8004818:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	331b      	adds	r3, #27
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	4413      	add	r3, r2
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0202 	and.w	r2, r3, #2
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	331b      	adds	r3, #27
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	4413      	add	r3, r2
 8004842:	3304      	adds	r3, #4
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 020f 	and.w	r2, r3, #15
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	331b      	adds	r3, #27
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	4413      	add	r3, r2
 800485a:	3304      	adds	r3, #4
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	0a1b      	lsrs	r3, r3, #8
 8004860:	b2da      	uxtb	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	331b      	adds	r3, #27
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	4413      	add	r3, r2
 8004872:	3304      	adds	r3, #4
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	0c1b      	lsrs	r3, r3, #16
 8004878:	b29a      	uxth	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	011b      	lsls	r3, r3, #4
 8004886:	4413      	add	r3, r2
 8004888:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	b2da      	uxtb	r2, r3
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	4413      	add	r3, r2
 800489e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	0a1a      	lsrs	r2, r3, #8
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	3301      	adds	r3, #1
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	0c1a      	lsrs	r2, r3, #16
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	3302      	adds	r3, #2
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	0e1a      	lsrs	r2, r3, #24
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	3303      	adds	r3, #3
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	3304      	adds	r3, #4
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	4413      	add	r3, r2
 8004904:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	0a1a      	lsrs	r2, r3, #8
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	3305      	adds	r3, #5
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	4413      	add	r3, r2
 800491e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	0c1a      	lsrs	r2, r3, #16
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	3306      	adds	r3, #6
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	4413      	add	r3, r2
 8004938:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	0e1a      	lsrs	r2, r3, #24
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	3307      	adds	r3, #7
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d108      	bne.n	8004960 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f042 0220 	orr.w	r2, r2, #32
 800495c:	60da      	str	r2, [r3, #12]
 800495e:	e007      	b.n	8004970 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691a      	ldr	r2, [r3, #16]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0220 	orr.w	r2, r2, #32
 800496e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	e006      	b.n	8004982 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
  }
}
 8004982:	4618      	mov	r0, r3
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800498e:	b480      	push	{r7}
 8004990:	b085      	sub	sp, #20
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800499e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d002      	beq.n	80049ac <HAL_CAN_ActivateNotification+0x1e>
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d109      	bne.n	80049c0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6959      	ldr	r1, [r3, #20]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	e006      	b.n	80049ce <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
  }
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b08a      	sub	sp, #40	; 0x28
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80049e2:	2300      	movs	r3, #0
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d07c      	beq.n	8004b1a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d023      	beq.n	8004a72 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f983 	bl	8004d48 <HAL_CAN_TxMailbox0CompleteCallback>
 8004a42:	e016      	b.n	8004a72 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d004      	beq.n	8004a58 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
 8004a56:	e00c      	b.n	8004a72 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d004      	beq.n	8004a6c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6a:	e002      	b.n	8004a72 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f989 	bl	8004d84 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d024      	beq.n	8004ac6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a84:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f963 	bl	8004d5c <HAL_CAN_TxMailbox1CompleteCallback>
 8004a96:	e016      	b.n	8004ac6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d004      	beq.n	8004aac <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aaa:	e00c      	b.n	8004ac6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d004      	beq.n	8004ac0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
 8004abe:	e002      	b.n	8004ac6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f969 	bl	8004d98 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d024      	beq.n	8004b1a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ad8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f943 	bl	8004d70 <HAL_CAN_TxMailbox2CompleteCallback>
 8004aea:	e016      	b.n	8004b1a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d004      	beq.n	8004b00 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
 8004afe:	e00c      	b.n	8004b1a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d004      	beq.n	8004b14 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
 8004b12:	e002      	b.n	8004b1a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f949 	bl	8004dac <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00c      	beq.n	8004b3e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d007      	beq.n	8004b3e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2210      	movs	r2, #16
 8004b3c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00b      	beq.n	8004b60 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f003 0308 	and.w	r3, r3, #8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d006      	beq.n	8004b60 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2208      	movs	r2, #8
 8004b58:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f930 	bl	8004dc0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d009      	beq.n	8004b7e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0303 	and.w	r3, r3, #3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7fd f9a5 	bl	8001ec8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00c      	beq.n	8004ba2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f003 0310 	and.w	r3, r3, #16
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d007      	beq.n	8004ba2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2210      	movs	r2, #16
 8004ba0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	f003 0320 	and.w	r3, r3, #32
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00b      	beq.n	8004bc4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d006      	beq.n	8004bc4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2208      	movs	r2, #8
 8004bbc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f908 	bl	8004dd4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	f003 0310 	and.w	r3, r3, #16
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7fd f9a9 	bl	8001f34 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00b      	beq.n	8004c04 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f003 0310 	and.w	r3, r3, #16
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d006      	beq.n	8004c04 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2210      	movs	r2, #16
 8004bfc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f8f2 	bl	8004de8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00b      	beq.n	8004c26 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	f003 0308 	and.w	r3, r3, #8
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d006      	beq.n	8004c26 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2208      	movs	r2, #8
 8004c1e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f8eb 	bl	8004dfc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d07b      	beq.n	8004d28 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d072      	beq.n	8004d20 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d008      	beq.n	8004c56 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	f043 0301 	orr.w	r3, r3, #1
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	f043 0302 	orr.w	r3, r3, #2
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d008      	beq.n	8004c8e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	f043 0304 	orr.w	r3, r3, #4
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d043      	beq.n	8004d20 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d03e      	beq.n	8004d20 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ca8:	2b60      	cmp	r3, #96	; 0x60
 8004caa:	d02b      	beq.n	8004d04 <HAL_CAN_IRQHandler+0x32a>
 8004cac:	2b60      	cmp	r3, #96	; 0x60
 8004cae:	d82e      	bhi.n	8004d0e <HAL_CAN_IRQHandler+0x334>
 8004cb0:	2b50      	cmp	r3, #80	; 0x50
 8004cb2:	d022      	beq.n	8004cfa <HAL_CAN_IRQHandler+0x320>
 8004cb4:	2b50      	cmp	r3, #80	; 0x50
 8004cb6:	d82a      	bhi.n	8004d0e <HAL_CAN_IRQHandler+0x334>
 8004cb8:	2b40      	cmp	r3, #64	; 0x40
 8004cba:	d019      	beq.n	8004cf0 <HAL_CAN_IRQHandler+0x316>
 8004cbc:	2b40      	cmp	r3, #64	; 0x40
 8004cbe:	d826      	bhi.n	8004d0e <HAL_CAN_IRQHandler+0x334>
 8004cc0:	2b30      	cmp	r3, #48	; 0x30
 8004cc2:	d010      	beq.n	8004ce6 <HAL_CAN_IRQHandler+0x30c>
 8004cc4:	2b30      	cmp	r3, #48	; 0x30
 8004cc6:	d822      	bhi.n	8004d0e <HAL_CAN_IRQHandler+0x334>
 8004cc8:	2b10      	cmp	r3, #16
 8004cca:	d002      	beq.n	8004cd2 <HAL_CAN_IRQHandler+0x2f8>
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d005      	beq.n	8004cdc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004cd0:	e01d      	b.n	8004d0e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	f043 0308 	orr.w	r3, r3, #8
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cda:	e019      	b.n	8004d10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	f043 0310 	orr.w	r3, r3, #16
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ce4:	e014      	b.n	8004d10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	f043 0320 	orr.w	r3, r3, #32
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cee:	e00f      	b.n	8004d10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cf8:	e00a      	b.n	8004d10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004d02:	e005      	b.n	8004d10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004d0c:	e000      	b.n	8004d10 <HAL_CAN_IRQHandler+0x336>
            break;
 8004d0e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d1e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2204      	movs	r2, #4
 8004d26:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d008      	beq.n	8004d40 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f868 	bl	8004e10 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004d40:	bf00      	nop
 8004d42:	3728      	adds	r7, #40	; 0x28
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e34:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <__NVIC_SetPriorityGrouping+0x44>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e40:	4013      	ands	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e56:	4a04      	ldr	r2, [pc, #16]	; (8004e68 <__NVIC_SetPriorityGrouping+0x44>)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	60d3      	str	r3, [r2, #12]
}
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	e000ed00 	.word	0xe000ed00

08004e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e70:	4b04      	ldr	r3, [pc, #16]	; (8004e84 <__NVIC_GetPriorityGrouping+0x18>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	0a1b      	lsrs	r3, r3, #8
 8004e76:	f003 0307 	and.w	r3, r3, #7
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	e000ed00 	.word	0xe000ed00

08004e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	db0b      	blt.n	8004eb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	f003 021f 	and.w	r2, r3, #31
 8004ea0:	4907      	ldr	r1, [pc, #28]	; (8004ec0 <__NVIC_EnableIRQ+0x38>)
 8004ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	2001      	movs	r0, #1
 8004eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8004eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	e000e100 	.word	0xe000e100

08004ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	4603      	mov	r3, r0
 8004ecc:	6039      	str	r1, [r7, #0]
 8004ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	db0a      	blt.n	8004eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	490c      	ldr	r1, [pc, #48]	; (8004f10 <__NVIC_SetPriority+0x4c>)
 8004ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee2:	0112      	lsls	r2, r2, #4
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	440b      	add	r3, r1
 8004ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004eec:	e00a      	b.n	8004f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	4908      	ldr	r1, [pc, #32]	; (8004f14 <__NVIC_SetPriority+0x50>)
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	3b04      	subs	r3, #4
 8004efc:	0112      	lsls	r2, r2, #4
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	440b      	add	r3, r1
 8004f02:	761a      	strb	r2, [r3, #24]
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	e000e100 	.word	0xe000e100
 8004f14:	e000ed00 	.word	0xe000ed00

08004f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b089      	sub	sp, #36	; 0x24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f1c3 0307 	rsb	r3, r3, #7
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	bf28      	it	cs
 8004f36:	2304      	movcs	r3, #4
 8004f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	2b06      	cmp	r3, #6
 8004f40:	d902      	bls.n	8004f48 <NVIC_EncodePriority+0x30>
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	3b03      	subs	r3, #3
 8004f46:	e000      	b.n	8004f4a <NVIC_EncodePriority+0x32>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	fa02 f303 	lsl.w	r3, r2, r3
 8004f56:	43da      	mvns	r2, r3
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	401a      	ands	r2, r3
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f60:	f04f 31ff 	mov.w	r1, #4294967295
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	fa01 f303 	lsl.w	r3, r1, r3
 8004f6a:	43d9      	mvns	r1, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f70:	4313      	orrs	r3, r2
         );
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3724      	adds	r7, #36	; 0x24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b082      	sub	sp, #8
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7ff ff4c 	bl	8004e24 <__NVIC_SetPriorityGrouping>
}
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004fa6:	f7ff ff61 	bl	8004e6c <__NVIC_GetPriorityGrouping>
 8004faa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	68b9      	ldr	r1, [r7, #8]
 8004fb0:	6978      	ldr	r0, [r7, #20]
 8004fb2:	f7ff ffb1 	bl	8004f18 <NVIC_EncodePriority>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff ff80 	bl	8004ec4 <__NVIC_SetPriority>
}
 8004fc4:	bf00      	nop
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff ff54 	bl	8004e88 <__NVIC_EnableIRQ>
}
 8004fe0:	bf00      	nop
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ff6:	e148      	b.n	800528a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	fa01 f303 	lsl.w	r3, r1, r3
 8005004:	4013      	ands	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 813a 	beq.w	8005284 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f003 0303 	and.w	r3, r3, #3
 8005018:	2b01      	cmp	r3, #1
 800501a:	d005      	beq.n	8005028 <HAL_GPIO_Init+0x40>
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f003 0303 	and.w	r3, r3, #3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d130      	bne.n	800508a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	2203      	movs	r2, #3
 8005034:	fa02 f303 	lsl.w	r3, r2, r3
 8005038:	43db      	mvns	r3, r3
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4013      	ands	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800505e:	2201      	movs	r2, #1
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	43db      	mvns	r3, r3
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4013      	ands	r3, r2
 800506c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	091b      	lsrs	r3, r3, #4
 8005074:	f003 0201 	and.w	r2, r3, #1
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	2b03      	cmp	r3, #3
 8005094:	d017      	beq.n	80050c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	2203      	movs	r2, #3
 80050a2:	fa02 f303 	lsl.w	r3, r2, r3
 80050a6:	43db      	mvns	r3, r3
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4013      	ands	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d123      	bne.n	800511a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	08da      	lsrs	r2, r3, #3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3208      	adds	r2, #8
 80050da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	220f      	movs	r2, #15
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	43db      	mvns	r3, r3
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4013      	ands	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	691a      	ldr	r2, [r3, #16]
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	08da      	lsrs	r2, r3, #3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3208      	adds	r2, #8
 8005114:	6939      	ldr	r1, [r7, #16]
 8005116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	2203      	movs	r2, #3
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	43db      	mvns	r3, r3
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4013      	ands	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f003 0203 	and.w	r2, r3, #3
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 8094 	beq.w	8005284 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800515c:	4b52      	ldr	r3, [pc, #328]	; (80052a8 <HAL_GPIO_Init+0x2c0>)
 800515e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005160:	4a51      	ldr	r2, [pc, #324]	; (80052a8 <HAL_GPIO_Init+0x2c0>)
 8005162:	f043 0301 	orr.w	r3, r3, #1
 8005166:	6613      	str	r3, [r2, #96]	; 0x60
 8005168:	4b4f      	ldr	r3, [pc, #316]	; (80052a8 <HAL_GPIO_Init+0x2c0>)
 800516a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	60bb      	str	r3, [r7, #8]
 8005172:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005174:	4a4d      	ldr	r2, [pc, #308]	; (80052ac <HAL_GPIO_Init+0x2c4>)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	089b      	lsrs	r3, r3, #2
 800517a:	3302      	adds	r3, #2
 800517c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005180:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f003 0303 	and.w	r3, r3, #3
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	220f      	movs	r2, #15
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	43db      	mvns	r3, r3
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4013      	ands	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800519e:	d00d      	beq.n	80051bc <HAL_GPIO_Init+0x1d4>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a43      	ldr	r2, [pc, #268]	; (80052b0 <HAL_GPIO_Init+0x2c8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d007      	beq.n	80051b8 <HAL_GPIO_Init+0x1d0>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a42      	ldr	r2, [pc, #264]	; (80052b4 <HAL_GPIO_Init+0x2cc>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d101      	bne.n	80051b4 <HAL_GPIO_Init+0x1cc>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e004      	b.n	80051be <HAL_GPIO_Init+0x1d6>
 80051b4:	2307      	movs	r3, #7
 80051b6:	e002      	b.n	80051be <HAL_GPIO_Init+0x1d6>
 80051b8:	2301      	movs	r3, #1
 80051ba:	e000      	b.n	80051be <HAL_GPIO_Init+0x1d6>
 80051bc:	2300      	movs	r3, #0
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	f002 0203 	and.w	r2, r2, #3
 80051c4:	0092      	lsls	r2, r2, #2
 80051c6:	4093      	lsls	r3, r2
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80051ce:	4937      	ldr	r1, [pc, #220]	; (80052ac <HAL_GPIO_Init+0x2c4>)
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	089b      	lsrs	r3, r3, #2
 80051d4:	3302      	adds	r3, #2
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051dc:	4b36      	ldr	r3, [pc, #216]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	43db      	mvns	r3, r3
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4013      	ands	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005200:	4a2d      	ldr	r2, [pc, #180]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005206:	4b2c      	ldr	r3, [pc, #176]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	43db      	mvns	r3, r3
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4013      	ands	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800522a:	4a23      	ldr	r2, [pc, #140]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005230:	4b21      	ldr	r3, [pc, #132]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	43db      	mvns	r3, r3
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	4013      	ands	r3, r2
 800523e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005254:	4a18      	ldr	r2, [pc, #96]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800525a:	4b17      	ldr	r3, [pc, #92]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	43db      	mvns	r3, r3
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4013      	ands	r3, r2
 8005268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800527e:	4a0e      	ldr	r2, [pc, #56]	; (80052b8 <HAL_GPIO_Init+0x2d0>)
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	3301      	adds	r3, #1
 8005288:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	fa22 f303 	lsr.w	r3, r2, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	f47f aeaf 	bne.w	8004ff8 <HAL_GPIO_Init+0x10>
  }
}
 800529a:	bf00      	nop
 800529c:	bf00      	nop
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	40021000 	.word	0x40021000
 80052ac:	40010000 	.word	0x40010000
 80052b0:	48000400 	.word	0x48000400
 80052b4:	48000800 	.word	0x48000800
 80052b8:	40010400 	.word	0x40010400

080052bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	807b      	strh	r3, [r7, #2]
 80052c8:	4613      	mov	r3, r2
 80052ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052cc:	787b      	ldrb	r3, [r7, #1]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80052d2:	887a      	ldrh	r2, [r7, #2]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80052d8:	e002      	b.n	80052e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80052da:	887a      	ldrh	r2, [r7, #2]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80052f0:	4b04      	ldr	r3, [pc, #16]	; (8005304 <HAL_PWREx_GetVoltageRange+0x18>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40007000 	.word	0x40007000

08005308 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005316:	d130      	bne.n	800537a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005318:	4b23      	ldr	r3, [pc, #140]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005324:	d038      	beq.n	8005398 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005326:	4b20      	ldr	r3, [pc, #128]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800532e:	4a1e      	ldr	r2, [pc, #120]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005330:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005334:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005336:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2232      	movs	r2, #50	; 0x32
 800533c:	fb02 f303 	mul.w	r3, r2, r3
 8005340:	4a1b      	ldr	r2, [pc, #108]	; (80053b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005342:	fba2 2303 	umull	r2, r3, r2, r3
 8005346:	0c9b      	lsrs	r3, r3, #18
 8005348:	3301      	adds	r3, #1
 800534a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800534c:	e002      	b.n	8005354 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3b01      	subs	r3, #1
 8005352:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005354:	4b14      	ldr	r3, [pc, #80]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800535c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005360:	d102      	bne.n	8005368 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1f2      	bne.n	800534e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005368:	4b0f      	ldr	r3, [pc, #60]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005374:	d110      	bne.n	8005398 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e00f      	b.n	800539a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800537a:	4b0b      	ldr	r3, [pc, #44]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005386:	d007      	beq.n	8005398 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005388:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005390:	4a05      	ldr	r2, [pc, #20]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005396:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40007000 	.word	0x40007000
 80053ac:	200001b8 	.word	0x200001b8
 80053b0:	431bde83 	.word	0x431bde83

080053b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d102      	bne.n	80053c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f000 bc02 	b.w	8005bcc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053c8:	4b96      	ldr	r3, [pc, #600]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 030c 	and.w	r3, r3, #12
 80053d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053d2:	4b94      	ldr	r3, [pc, #592]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f003 0303 	and.w	r3, r3, #3
 80053da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 80e4 	beq.w	80055b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d007      	beq.n	8005400 <HAL_RCC_OscConfig+0x4c>
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	2b0c      	cmp	r3, #12
 80053f4:	f040 808b 	bne.w	800550e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	f040 8087 	bne.w	800550e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005400:	4b88      	ldr	r3, [pc, #544]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d005      	beq.n	8005418 <HAL_RCC_OscConfig+0x64>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e3d9      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1a      	ldr	r2, [r3, #32]
 800541c:	4b81      	ldr	r3, [pc, #516]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0308 	and.w	r3, r3, #8
 8005424:	2b00      	cmp	r3, #0
 8005426:	d004      	beq.n	8005432 <HAL_RCC_OscConfig+0x7e>
 8005428:	4b7e      	ldr	r3, [pc, #504]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005430:	e005      	b.n	800543e <HAL_RCC_OscConfig+0x8a>
 8005432:	4b7c      	ldr	r3, [pc, #496]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 8005434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005438:	091b      	lsrs	r3, r3, #4
 800543a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800543e:	4293      	cmp	r3, r2
 8005440:	d223      	bcs.n	800548a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fe1e 	bl	8006088 <RCC_SetFlashLatencyFromMSIRange>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e3ba      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005456:	4b73      	ldr	r3, [pc, #460]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a72      	ldr	r2, [pc, #456]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 800545c:	f043 0308 	orr.w	r3, r3, #8
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	4b70      	ldr	r3, [pc, #448]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	496d      	ldr	r1, [pc, #436]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 8005470:	4313      	orrs	r3, r2
 8005472:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005474:	4b6b      	ldr	r3, [pc, #428]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	021b      	lsls	r3, r3, #8
 8005482:	4968      	ldr	r1, [pc, #416]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 8005484:	4313      	orrs	r3, r2
 8005486:	604b      	str	r3, [r1, #4]
 8005488:	e025      	b.n	80054d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800548a:	4b66      	ldr	r3, [pc, #408]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a65      	ldr	r2, [pc, #404]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 8005490:	f043 0308 	orr.w	r3, r3, #8
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	4b63      	ldr	r3, [pc, #396]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	4960      	ldr	r1, [pc, #384]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054a8:	4b5e      	ldr	r3, [pc, #376]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	495b      	ldr	r1, [pc, #364]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d109      	bne.n	80054d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fdde 	bl	8006088 <RCC_SetFlashLatencyFromMSIRange>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e37a      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054d6:	f000 fcb5 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 80054da:	4602      	mov	r2, r0
 80054dc:	4b51      	ldr	r3, [pc, #324]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	091b      	lsrs	r3, r3, #4
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	4950      	ldr	r1, [pc, #320]	; (8005628 <HAL_RCC_OscConfig+0x274>)
 80054e8:	5ccb      	ldrb	r3, [r1, r3]
 80054ea:	f003 031f 	and.w	r3, r3, #31
 80054ee:	fa22 f303 	lsr.w	r3, r2, r3
 80054f2:	4a4e      	ldr	r2, [pc, #312]	; (800562c <HAL_RCC_OscConfig+0x278>)
 80054f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80054f6:	4b4e      	ldr	r3, [pc, #312]	; (8005630 <HAL_RCC_OscConfig+0x27c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fe fa58 	bl	80039b0 <HAL_InitTick>
 8005500:	4603      	mov	r3, r0
 8005502:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d052      	beq.n	80055b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800550a:	7bfb      	ldrb	r3, [r7, #15]
 800550c:	e35e      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d032      	beq.n	800557c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005516:	4b43      	ldr	r3, [pc, #268]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a42      	ldr	r2, [pc, #264]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 800551c:	f043 0301 	orr.w	r3, r3, #1
 8005520:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005522:	f7fe fee9 	bl	80042f8 <HAL_GetTick>
 8005526:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800552a:	f7fe fee5 	bl	80042f8 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e347      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800553c:	4b39      	ldr	r3, [pc, #228]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0f0      	beq.n	800552a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005548:	4b36      	ldr	r3, [pc, #216]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a35      	ldr	r2, [pc, #212]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 800554e:	f043 0308 	orr.w	r3, r3, #8
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	4b33      	ldr	r3, [pc, #204]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	4930      	ldr	r1, [pc, #192]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 8005562:	4313      	orrs	r3, r2
 8005564:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005566:	4b2f      	ldr	r3, [pc, #188]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	021b      	lsls	r3, r3, #8
 8005574:	492b      	ldr	r1, [pc, #172]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 8005576:	4313      	orrs	r3, r2
 8005578:	604b      	str	r3, [r1, #4]
 800557a:	e01a      	b.n	80055b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800557c:	4b29      	ldr	r3, [pc, #164]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a28      	ldr	r2, [pc, #160]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 8005582:	f023 0301 	bic.w	r3, r3, #1
 8005586:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005588:	f7fe feb6 	bl	80042f8 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005590:	f7fe feb2 	bl	80042f8 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e314      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055a2:	4b20      	ldr	r3, [pc, #128]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1f0      	bne.n	8005590 <HAL_RCC_OscConfig+0x1dc>
 80055ae:	e000      	b.n	80055b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d073      	beq.n	80056a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d005      	beq.n	80055d0 <HAL_RCC_OscConfig+0x21c>
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	2b0c      	cmp	r3, #12
 80055c8:	d10e      	bne.n	80055e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d10b      	bne.n	80055e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d0:	4b14      	ldr	r3, [pc, #80]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d063      	beq.n	80056a4 <HAL_RCC_OscConfig+0x2f0>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d15f      	bne.n	80056a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e2f1      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f0:	d106      	bne.n	8005600 <HAL_RCC_OscConfig+0x24c>
 80055f2:	4b0c      	ldr	r3, [pc, #48]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a0b      	ldr	r2, [pc, #44]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 80055f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	e025      	b.n	800564c <HAL_RCC_OscConfig+0x298>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005608:	d114      	bne.n	8005634 <HAL_RCC_OscConfig+0x280>
 800560a:	4b06      	ldr	r3, [pc, #24]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a05      	ldr	r2, [pc, #20]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 8005610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	4b03      	ldr	r3, [pc, #12]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a02      	ldr	r2, [pc, #8]	; (8005624 <HAL_RCC_OscConfig+0x270>)
 800561c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	e013      	b.n	800564c <HAL_RCC_OscConfig+0x298>
 8005624:	40021000 	.word	0x40021000
 8005628:	0800f6ac 	.word	0x0800f6ac
 800562c:	200001b8 	.word	0x200001b8
 8005630:	200001bc 	.word	0x200001bc
 8005634:	4ba0      	ldr	r3, [pc, #640]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a9f      	ldr	r2, [pc, #636]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 800563a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	4b9d      	ldr	r3, [pc, #628]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a9c      	ldr	r2, [pc, #624]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800564a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d013      	beq.n	800567c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005654:	f7fe fe50 	bl	80042f8 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800565c:	f7fe fe4c 	bl	80042f8 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b64      	cmp	r3, #100	; 0x64
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e2ae      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800566e:	4b92      	ldr	r3, [pc, #584]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f0      	beq.n	800565c <HAL_RCC_OscConfig+0x2a8>
 800567a:	e014      	b.n	80056a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567c:	f7fe fe3c 	bl	80042f8 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005684:	f7fe fe38 	bl	80042f8 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b64      	cmp	r3, #100	; 0x64
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e29a      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005696:	4b88      	ldr	r3, [pc, #544]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f0      	bne.n	8005684 <HAL_RCC_OscConfig+0x2d0>
 80056a2:	e000      	b.n	80056a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d060      	beq.n	8005774 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	d005      	beq.n	80056c4 <HAL_RCC_OscConfig+0x310>
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	2b0c      	cmp	r3, #12
 80056bc:	d119      	bne.n	80056f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d116      	bne.n	80056f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056c4:	4b7c      	ldr	r3, [pc, #496]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d005      	beq.n	80056dc <HAL_RCC_OscConfig+0x328>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e277      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056dc:	4b76      	ldr	r3, [pc, #472]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	061b      	lsls	r3, r3, #24
 80056ea:	4973      	ldr	r1, [pc, #460]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056f0:	e040      	b.n	8005774 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d023      	beq.n	8005742 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056fa:	4b6f      	ldr	r3, [pc, #444]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a6e      	ldr	r2, [pc, #440]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005706:	f7fe fdf7 	bl	80042f8 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800570c:	e008      	b.n	8005720 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800570e:	f7fe fdf3 	bl	80042f8 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e255      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005720:	4b65      	ldr	r3, [pc, #404]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0f0      	beq.n	800570e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800572c:	4b62      	ldr	r3, [pc, #392]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	061b      	lsls	r3, r3, #24
 800573a:	495f      	ldr	r1, [pc, #380]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 800573c:	4313      	orrs	r3, r2
 800573e:	604b      	str	r3, [r1, #4]
 8005740:	e018      	b.n	8005774 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005742:	4b5d      	ldr	r3, [pc, #372]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a5c      	ldr	r2, [pc, #368]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800574c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574e:	f7fe fdd3 	bl	80042f8 <HAL_GetTick>
 8005752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005756:	f7fe fdcf 	bl	80042f8 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e231      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005768:	4b53      	ldr	r3, [pc, #332]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1f0      	bne.n	8005756 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b00      	cmp	r3, #0
 800577e:	d03c      	beq.n	80057fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01c      	beq.n	80057c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005788:	4b4b      	ldr	r3, [pc, #300]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 800578a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800578e:	4a4a      	ldr	r2, [pc, #296]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005790:	f043 0301 	orr.w	r3, r3, #1
 8005794:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005798:	f7fe fdae 	bl	80042f8 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057a0:	f7fe fdaa 	bl	80042f8 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e20c      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057b2:	4b41      	ldr	r3, [pc, #260]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 80057b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0ef      	beq.n	80057a0 <HAL_RCC_OscConfig+0x3ec>
 80057c0:	e01b      	b.n	80057fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057c2:	4b3d      	ldr	r3, [pc, #244]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 80057c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057c8:	4a3b      	ldr	r2, [pc, #236]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 80057ca:	f023 0301 	bic.w	r3, r3, #1
 80057ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d2:	f7fe fd91 	bl	80042f8 <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057da:	f7fe fd8d 	bl	80042f8 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e1ef      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057ec:	4b32      	ldr	r3, [pc, #200]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 80057ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1ef      	bne.n	80057da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 80a6 	beq.w	8005954 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005808:	2300      	movs	r3, #0
 800580a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800580c:	4b2a      	ldr	r3, [pc, #168]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 800580e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10d      	bne.n	8005834 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005818:	4b27      	ldr	r3, [pc, #156]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 800581a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581c:	4a26      	ldr	r2, [pc, #152]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 800581e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005822:	6593      	str	r3, [r2, #88]	; 0x58
 8005824:	4b24      	ldr	r3, [pc, #144]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800582c:	60bb      	str	r3, [r7, #8]
 800582e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005830:	2301      	movs	r3, #1
 8005832:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005834:	4b21      	ldr	r3, [pc, #132]	; (80058bc <HAL_RCC_OscConfig+0x508>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583c:	2b00      	cmp	r3, #0
 800583e:	d118      	bne.n	8005872 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005840:	4b1e      	ldr	r3, [pc, #120]	; (80058bc <HAL_RCC_OscConfig+0x508>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1d      	ldr	r2, [pc, #116]	; (80058bc <HAL_RCC_OscConfig+0x508>)
 8005846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800584a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800584c:	f7fe fd54 	bl	80042f8 <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005852:	e008      	b.n	8005866 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005854:	f7fe fd50 	bl	80042f8 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e1b2      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005866:	4b15      	ldr	r3, [pc, #84]	; (80058bc <HAL_RCC_OscConfig+0x508>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0f0      	beq.n	8005854 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d108      	bne.n	800588c <HAL_RCC_OscConfig+0x4d8>
 800587a:	4b0f      	ldr	r3, [pc, #60]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 800587c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005880:	4a0d      	ldr	r2, [pc, #52]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005882:	f043 0301 	orr.w	r3, r3, #1
 8005886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800588a:	e029      	b.n	80058e0 <HAL_RCC_OscConfig+0x52c>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	2b05      	cmp	r3, #5
 8005892:	d115      	bne.n	80058c0 <HAL_RCC_OscConfig+0x50c>
 8005894:	4b08      	ldr	r3, [pc, #32]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589a:	4a07      	ldr	r2, [pc, #28]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 800589c:	f043 0304 	orr.w	r3, r3, #4
 80058a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058a4:	4b04      	ldr	r3, [pc, #16]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 80058a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058aa:	4a03      	ldr	r2, [pc, #12]	; (80058b8 <HAL_RCC_OscConfig+0x504>)
 80058ac:	f043 0301 	orr.w	r3, r3, #1
 80058b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058b4:	e014      	b.n	80058e0 <HAL_RCC_OscConfig+0x52c>
 80058b6:	bf00      	nop
 80058b8:	40021000 	.word	0x40021000
 80058bc:	40007000 	.word	0x40007000
 80058c0:	4b9a      	ldr	r3, [pc, #616]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 80058c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c6:	4a99      	ldr	r2, [pc, #612]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 80058c8:	f023 0301 	bic.w	r3, r3, #1
 80058cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058d0:	4b96      	ldr	r3, [pc, #600]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 80058d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d6:	4a95      	ldr	r2, [pc, #596]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 80058d8:	f023 0304 	bic.w	r3, r3, #4
 80058dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d016      	beq.n	8005916 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e8:	f7fe fd06 	bl	80042f8 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ee:	e00a      	b.n	8005906 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058f0:	f7fe fd02 	bl	80042f8 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fe:	4293      	cmp	r3, r2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e162      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005906:	4b89      	ldr	r3, [pc, #548]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 8005908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0ed      	beq.n	80058f0 <HAL_RCC_OscConfig+0x53c>
 8005914:	e015      	b.n	8005942 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005916:	f7fe fcef 	bl	80042f8 <HAL_GetTick>
 800591a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800591c:	e00a      	b.n	8005934 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800591e:	f7fe fceb 	bl	80042f8 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	f241 3288 	movw	r2, #5000	; 0x1388
 800592c:	4293      	cmp	r3, r2
 800592e:	d901      	bls.n	8005934 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e14b      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005934:	4b7d      	ldr	r3, [pc, #500]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 8005936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1ed      	bne.n	800591e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005942:	7ffb      	ldrb	r3, [r7, #31]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d105      	bne.n	8005954 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005948:	4b78      	ldr	r3, [pc, #480]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 800594a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594c:	4a77      	ldr	r2, [pc, #476]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 800594e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005952:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	2b00      	cmp	r3, #0
 800595e:	d03c      	beq.n	80059da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01c      	beq.n	80059a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005968:	4b70      	ldr	r3, [pc, #448]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 800596a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800596e:	4a6f      	ldr	r2, [pc, #444]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 8005970:	f043 0301 	orr.w	r3, r3, #1
 8005974:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005978:	f7fe fcbe 	bl	80042f8 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005980:	f7fe fcba 	bl	80042f8 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e11c      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005992:	4b66      	ldr	r3, [pc, #408]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 8005994:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0ef      	beq.n	8005980 <HAL_RCC_OscConfig+0x5cc>
 80059a0:	e01b      	b.n	80059da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059a2:	4b62      	ldr	r3, [pc, #392]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 80059a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059a8:	4a60      	ldr	r2, [pc, #384]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 80059aa:	f023 0301 	bic.w	r3, r3, #1
 80059ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b2:	f7fe fca1 	bl	80042f8 <HAL_GetTick>
 80059b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059b8:	e008      	b.n	80059cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059ba:	f7fe fc9d 	bl	80042f8 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d901      	bls.n	80059cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e0ff      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059cc:	4b57      	ldr	r3, [pc, #348]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 80059ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1ef      	bne.n	80059ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 80f3 	beq.w	8005bca <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	f040 80c9 	bne.w	8005b80 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80059ee:	4b4f      	ldr	r3, [pc, #316]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f003 0203 	and.w	r2, r3, #3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d12c      	bne.n	8005a5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d123      	bne.n	8005a5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d11b      	bne.n	8005a5c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d113      	bne.n	8005a5c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3e:	085b      	lsrs	r3, r3, #1
 8005a40:	3b01      	subs	r3, #1
 8005a42:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d109      	bne.n	8005a5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	085b      	lsrs	r3, r3, #1
 8005a54:	3b01      	subs	r3, #1
 8005a56:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d06b      	beq.n	8005b34 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	2b0c      	cmp	r3, #12
 8005a60:	d062      	beq.n	8005b28 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a62:	4b32      	ldr	r3, [pc, #200]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e0ac      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a72:	4b2e      	ldr	r3, [pc, #184]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a2d      	ldr	r2, [pc, #180]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 8005a78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a7c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a7e:	f7fe fc3b 	bl	80042f8 <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a84:	e008      	b.n	8005a98 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a86:	f7fe fc37 	bl	80042f8 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e099      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a98:	4b24      	ldr	r3, [pc, #144]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1f0      	bne.n	8005a86 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aa4:	4b21      	ldr	r3, [pc, #132]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	4b21      	ldr	r3, [pc, #132]	; (8005b30 <HAL_RCC_OscConfig+0x77c>)
 8005aaa:	4013      	ands	r3, r2
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ab4:	3a01      	subs	r2, #1
 8005ab6:	0112      	lsls	r2, r2, #4
 8005ab8:	4311      	orrs	r1, r2
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005abe:	0212      	lsls	r2, r2, #8
 8005ac0:	4311      	orrs	r1, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ac6:	0852      	lsrs	r2, r2, #1
 8005ac8:	3a01      	subs	r2, #1
 8005aca:	0552      	lsls	r2, r2, #21
 8005acc:	4311      	orrs	r1, r2
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ad2:	0852      	lsrs	r2, r2, #1
 8005ad4:	3a01      	subs	r2, #1
 8005ad6:	0652      	lsls	r2, r2, #25
 8005ad8:	4311      	orrs	r1, r2
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ade:	06d2      	lsls	r2, r2, #27
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	4912      	ldr	r1, [pc, #72]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ae8:	4b10      	ldr	r3, [pc, #64]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a0f      	ldr	r2, [pc, #60]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 8005aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005af2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005af4:	4b0d      	ldr	r3, [pc, #52]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	4a0c      	ldr	r2, [pc, #48]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 8005afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005afe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b00:	f7fe fbfa 	bl	80042f8 <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b08:	f7fe fbf6 	bl	80042f8 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e058      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b1a:	4b04      	ldr	r3, [pc, #16]	; (8005b2c <HAL_RCC_OscConfig+0x778>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0f0      	beq.n	8005b08 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b26:	e050      	b.n	8005bca <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e04f      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b34:	4b27      	ldr	r3, [pc, #156]	; (8005bd4 <HAL_RCC_OscConfig+0x820>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d144      	bne.n	8005bca <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b40:	4b24      	ldr	r3, [pc, #144]	; (8005bd4 <HAL_RCC_OscConfig+0x820>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a23      	ldr	r2, [pc, #140]	; (8005bd4 <HAL_RCC_OscConfig+0x820>)
 8005b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b4c:	4b21      	ldr	r3, [pc, #132]	; (8005bd4 <HAL_RCC_OscConfig+0x820>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	4a20      	ldr	r2, [pc, #128]	; (8005bd4 <HAL_RCC_OscConfig+0x820>)
 8005b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b58:	f7fe fbce 	bl	80042f8 <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b5e:	e008      	b.n	8005b72 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b60:	f7fe fbca 	bl	80042f8 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e02c      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b72:	4b18      	ldr	r3, [pc, #96]	; (8005bd4 <HAL_RCC_OscConfig+0x820>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0f0      	beq.n	8005b60 <HAL_RCC_OscConfig+0x7ac>
 8005b7e:	e024      	b.n	8005bca <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	2b0c      	cmp	r3, #12
 8005b84:	d01f      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b86:	4b13      	ldr	r3, [pc, #76]	; (8005bd4 <HAL_RCC_OscConfig+0x820>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a12      	ldr	r2, [pc, #72]	; (8005bd4 <HAL_RCC_OscConfig+0x820>)
 8005b8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b92:	f7fe fbb1 	bl	80042f8 <HAL_GetTick>
 8005b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b98:	e008      	b.n	8005bac <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b9a:	f7fe fbad 	bl	80042f8 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e00f      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bac:	4b09      	ldr	r3, [pc, #36]	; (8005bd4 <HAL_RCC_OscConfig+0x820>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1f0      	bne.n	8005b9a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005bb8:	4b06      	ldr	r3, [pc, #24]	; (8005bd4 <HAL_RCC_OscConfig+0x820>)
 8005bba:	68da      	ldr	r2, [r3, #12]
 8005bbc:	4905      	ldr	r1, [pc, #20]	; (8005bd4 <HAL_RCC_OscConfig+0x820>)
 8005bbe:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	60cb      	str	r3, [r1, #12]
 8005bc4:	e001      	b.n	8005bca <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e000      	b.n	8005bcc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3720      	adds	r7, #32
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	40021000 	.word	0x40021000
 8005bd8:	feeefffc 	.word	0xfeeefffc

08005bdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e0e7      	b.n	8005dc0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bf0:	4b75      	ldr	r3, [pc, #468]	; (8005dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0307 	and.w	r3, r3, #7
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d910      	bls.n	8005c20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bfe:	4b72      	ldr	r3, [pc, #456]	; (8005dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f023 0207 	bic.w	r2, r3, #7
 8005c06:	4970      	ldr	r1, [pc, #448]	; (8005dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c0e:	4b6e      	ldr	r3, [pc, #440]	; (8005dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0307 	and.w	r3, r3, #7
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d001      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e0cf      	b.n	8005dc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d010      	beq.n	8005c4e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	4b66      	ldr	r3, [pc, #408]	; (8005dcc <HAL_RCC_ClockConfig+0x1f0>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d908      	bls.n	8005c4e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c3c:	4b63      	ldr	r3, [pc, #396]	; (8005dcc <HAL_RCC_ClockConfig+0x1f0>)
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	4960      	ldr	r1, [pc, #384]	; (8005dcc <HAL_RCC_ClockConfig+0x1f0>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d04c      	beq.n	8005cf4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d107      	bne.n	8005c72 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c62:	4b5a      	ldr	r3, [pc, #360]	; (8005dcc <HAL_RCC_ClockConfig+0x1f0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d121      	bne.n	8005cb2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e0a6      	b.n	8005dc0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d107      	bne.n	8005c8a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c7a:	4b54      	ldr	r3, [pc, #336]	; (8005dcc <HAL_RCC_ClockConfig+0x1f0>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d115      	bne.n	8005cb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e09a      	b.n	8005dc0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d107      	bne.n	8005ca2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c92:	4b4e      	ldr	r3, [pc, #312]	; (8005dcc <HAL_RCC_ClockConfig+0x1f0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d109      	bne.n	8005cb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e08e      	b.n	8005dc0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ca2:	4b4a      	ldr	r3, [pc, #296]	; (8005dcc <HAL_RCC_ClockConfig+0x1f0>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e086      	b.n	8005dc0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cb2:	4b46      	ldr	r3, [pc, #280]	; (8005dcc <HAL_RCC_ClockConfig+0x1f0>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f023 0203 	bic.w	r2, r3, #3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	4943      	ldr	r1, [pc, #268]	; (8005dcc <HAL_RCC_ClockConfig+0x1f0>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cc4:	f7fe fb18 	bl	80042f8 <HAL_GetTick>
 8005cc8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cca:	e00a      	b.n	8005ce2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ccc:	f7fe fb14 	bl	80042f8 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e06e      	b.n	8005dc0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ce2:	4b3a      	ldr	r3, [pc, #232]	; (8005dcc <HAL_RCC_ClockConfig+0x1f0>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 020c 	and.w	r2, r3, #12
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d1eb      	bne.n	8005ccc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d010      	beq.n	8005d22 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	4b31      	ldr	r3, [pc, #196]	; (8005dcc <HAL_RCC_ClockConfig+0x1f0>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d208      	bcs.n	8005d22 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d10:	4b2e      	ldr	r3, [pc, #184]	; (8005dcc <HAL_RCC_ClockConfig+0x1f0>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	492b      	ldr	r1, [pc, #172]	; (8005dcc <HAL_RCC_ClockConfig+0x1f0>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d22:	4b29      	ldr	r3, [pc, #164]	; (8005dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0307 	and.w	r3, r3, #7
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d210      	bcs.n	8005d52 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d30:	4b25      	ldr	r3, [pc, #148]	; (8005dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f023 0207 	bic.w	r2, r3, #7
 8005d38:	4923      	ldr	r1, [pc, #140]	; (8005dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d40:	4b21      	ldr	r3, [pc, #132]	; (8005dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d001      	beq.n	8005d52 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e036      	b.n	8005dc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0304 	and.w	r3, r3, #4
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d008      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d5e:	4b1b      	ldr	r3, [pc, #108]	; (8005dcc <HAL_RCC_ClockConfig+0x1f0>)
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	4918      	ldr	r1, [pc, #96]	; (8005dcc <HAL_RCC_ClockConfig+0x1f0>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0308 	and.w	r3, r3, #8
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d009      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d7c:	4b13      	ldr	r3, [pc, #76]	; (8005dcc <HAL_RCC_ClockConfig+0x1f0>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	4910      	ldr	r1, [pc, #64]	; (8005dcc <HAL_RCC_ClockConfig+0x1f0>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d90:	f000 f858 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8005d94:	4602      	mov	r2, r0
 8005d96:	4b0d      	ldr	r3, [pc, #52]	; (8005dcc <HAL_RCC_ClockConfig+0x1f0>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	091b      	lsrs	r3, r3, #4
 8005d9c:	f003 030f 	and.w	r3, r3, #15
 8005da0:	490b      	ldr	r1, [pc, #44]	; (8005dd0 <HAL_RCC_ClockConfig+0x1f4>)
 8005da2:	5ccb      	ldrb	r3, [r1, r3]
 8005da4:	f003 031f 	and.w	r3, r3, #31
 8005da8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dac:	4a09      	ldr	r2, [pc, #36]	; (8005dd4 <HAL_RCC_ClockConfig+0x1f8>)
 8005dae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005db0:	4b09      	ldr	r3, [pc, #36]	; (8005dd8 <HAL_RCC_ClockConfig+0x1fc>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fd fdfb 	bl	80039b0 <HAL_InitTick>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	72fb      	strb	r3, [r7, #11]

  return status;
 8005dbe:	7afb      	ldrb	r3, [r7, #11]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	40022000 	.word	0x40022000
 8005dcc:	40021000 	.word	0x40021000
 8005dd0:	0800f6ac 	.word	0x0800f6ac
 8005dd4:	200001b8 	.word	0x200001b8
 8005dd8:	200001bc 	.word	0x200001bc

08005ddc <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08a      	sub	sp, #40	; 0x28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8005de8:	4b15      	ldr	r3, [pc, #84]	; (8005e40 <HAL_RCC_MCOConfig+0x64>)
 8005dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dec:	4a14      	ldr	r2, [pc, #80]	; (8005e40 <HAL_RCC_MCOConfig+0x64>)
 8005dee:	f043 0301 	orr.w	r3, r3, #1
 8005df2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005df4:	4b12      	ldr	r3, [pc, #72]	; (8005e40 <HAL_RCC_MCOConfig+0x64>)
 8005df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8005e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e06:	2302      	movs	r3, #2
 8005e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005e12:	2300      	movs	r3, #0
 8005e14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005e16:	f107 0314 	add.w	r3, r7, #20
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e20:	f7ff f8e2 	bl	8004fe8 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8005e24:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <HAL_RCC_MCOConfig+0x64>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	430b      	orrs	r3, r1
 8005e32:	4903      	ldr	r1, [pc, #12]	; (8005e40 <HAL_RCC_MCOConfig+0x64>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	608b      	str	r3, [r1, #8]
}
 8005e38:	bf00      	nop
 8005e3a:	3728      	adds	r7, #40	; 0x28
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	40021000 	.word	0x40021000

08005e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b089      	sub	sp, #36	; 0x24
 8005e48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61fb      	str	r3, [r7, #28]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e52:	4b3e      	ldr	r3, [pc, #248]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 030c 	and.w	r3, r3, #12
 8005e5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e5c:	4b3b      	ldr	r3, [pc, #236]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f003 0303 	and.w	r3, r3, #3
 8005e64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d005      	beq.n	8005e78 <HAL_RCC_GetSysClockFreq+0x34>
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	2b0c      	cmp	r3, #12
 8005e70:	d121      	bne.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d11e      	bne.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e78:	4b34      	ldr	r3, [pc, #208]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0308 	and.w	r3, r3, #8
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d107      	bne.n	8005e94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e84:	4b31      	ldr	r3, [pc, #196]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e8a:	0a1b      	lsrs	r3, r3, #8
 8005e8c:	f003 030f 	and.w	r3, r3, #15
 8005e90:	61fb      	str	r3, [r7, #28]
 8005e92:	e005      	b.n	8005ea0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e94:	4b2d      	ldr	r3, [pc, #180]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	091b      	lsrs	r3, r3, #4
 8005e9a:	f003 030f 	and.w	r3, r3, #15
 8005e9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ea0:	4a2b      	ldr	r2, [pc, #172]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ea8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10d      	bne.n	8005ecc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005eb4:	e00a      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	2b04      	cmp	r3, #4
 8005eba:	d102      	bne.n	8005ec2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ebc:	4b25      	ldr	r3, [pc, #148]	; (8005f54 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ebe:	61bb      	str	r3, [r7, #24]
 8005ec0:	e004      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	d101      	bne.n	8005ecc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ec8:	4b23      	ldr	r3, [pc, #140]	; (8005f58 <HAL_RCC_GetSysClockFreq+0x114>)
 8005eca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	2b0c      	cmp	r3, #12
 8005ed0:	d134      	bne.n	8005f3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ed2:	4b1e      	ldr	r3, [pc, #120]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d003      	beq.n	8005eea <HAL_RCC_GetSysClockFreq+0xa6>
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2b03      	cmp	r3, #3
 8005ee6:	d003      	beq.n	8005ef0 <HAL_RCC_GetSysClockFreq+0xac>
 8005ee8:	e005      	b.n	8005ef6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005eea:	4b1a      	ldr	r3, [pc, #104]	; (8005f54 <HAL_RCC_GetSysClockFreq+0x110>)
 8005eec:	617b      	str	r3, [r7, #20]
      break;
 8005eee:	e005      	b.n	8005efc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ef0:	4b19      	ldr	r3, [pc, #100]	; (8005f58 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ef2:	617b      	str	r3, [r7, #20]
      break;
 8005ef4:	e002      	b.n	8005efc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	617b      	str	r3, [r7, #20]
      break;
 8005efa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005efc:	4b13      	ldr	r3, [pc, #76]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	091b      	lsrs	r3, r3, #4
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	3301      	adds	r3, #1
 8005f08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f0a:	4b10      	ldr	r3, [pc, #64]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	0a1b      	lsrs	r3, r3, #8
 8005f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	fb03 f202 	mul.w	r2, r3, r2
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f22:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	0e5b      	lsrs	r3, r3, #25
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f3c:	69bb      	ldr	r3, [r7, #24]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3724      	adds	r7, #36	; 0x24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40021000 	.word	0x40021000
 8005f50:	0800f6c4 	.word	0x0800f6c4
 8005f54:	00f42400 	.word	0x00f42400
 8005f58:	007a1200 	.word	0x007a1200

08005f5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f60:	4b03      	ldr	r3, [pc, #12]	; (8005f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f62:	681b      	ldr	r3, [r3, #0]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	200001b8 	.word	0x200001b8

08005f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f78:	f7ff fff0 	bl	8005f5c <HAL_RCC_GetHCLKFreq>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	0a1b      	lsrs	r3, r3, #8
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	4904      	ldr	r1, [pc, #16]	; (8005f9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f8a:	5ccb      	ldrb	r3, [r1, r3]
 8005f8c:	f003 031f 	and.w	r3, r3, #31
 8005f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	0800f6bc 	.word	0x0800f6bc

08005fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005fa4:	f7ff ffda 	bl	8005f5c <HAL_RCC_GetHCLKFreq>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	0adb      	lsrs	r3, r3, #11
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	4904      	ldr	r1, [pc, #16]	; (8005fc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fb6:	5ccb      	ldrb	r3, [r1, r3]
 8005fb8:	f003 031f 	and.w	r3, r3, #31
 8005fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	40021000 	.word	0x40021000
 8005fc8:	0800f6bc 	.word	0x0800f6bc

08005fcc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	220f      	movs	r2, #15
 8005fda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005fdc:	4b12      	ldr	r3, [pc, #72]	; (8006028 <HAL_RCC_GetClockConfig+0x5c>)
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 0203 	and.w	r2, r3, #3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005fe8:	4b0f      	ldr	r3, [pc, #60]	; (8006028 <HAL_RCC_GetClockConfig+0x5c>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005ff4:	4b0c      	ldr	r3, [pc, #48]	; (8006028 <HAL_RCC_GetClockConfig+0x5c>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006000:	4b09      	ldr	r3, [pc, #36]	; (8006028 <HAL_RCC_GetClockConfig+0x5c>)
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	08db      	lsrs	r3, r3, #3
 8006006:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800600e:	4b07      	ldr	r3, [pc, #28]	; (800602c <HAL_RCC_GetClockConfig+0x60>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0207 	and.w	r2, r3, #7
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	601a      	str	r2, [r3, #0]
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40021000 	.word	0x40021000
 800602c:	40022000 	.word	0x40022000

08006030 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8006034:	4b05      	ldr	r3, [pc, #20]	; (800604c <HAL_RCC_EnableCSS+0x1c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a04      	ldr	r2, [pc, #16]	; (800604c <HAL_RCC_EnableCSS+0x1c>)
 800603a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800603e:	6013      	str	r3, [r2, #0]
}
 8006040:	bf00      	nop
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40021000 	.word	0x40021000

08006050 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006054:	4b07      	ldr	r3, [pc, #28]	; (8006074 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006060:	d105      	bne.n	800606e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006062:	f000 f809 	bl	8006078 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006066:	4b03      	ldr	r3, [pc, #12]	; (8006074 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006068:	f44f 7280 	mov.w	r2, #256	; 0x100
 800606c:	621a      	str	r2, [r3, #32]
  }
}
 800606e:	bf00      	nop
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40021000 	.word	0x40021000

08006078 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006078:	b480      	push	{r7}
 800607a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800607c:	bf00      	nop
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
	...

08006088 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006090:	2300      	movs	r3, #0
 8006092:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006094:	4b2a      	ldr	r3, [pc, #168]	; (8006140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d003      	beq.n	80060a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80060a0:	f7ff f924 	bl	80052ec <HAL_PWREx_GetVoltageRange>
 80060a4:	6178      	str	r0, [r7, #20]
 80060a6:	e014      	b.n	80060d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80060a8:	4b25      	ldr	r3, [pc, #148]	; (8006140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ac:	4a24      	ldr	r2, [pc, #144]	; (8006140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060b2:	6593      	str	r3, [r2, #88]	; 0x58
 80060b4:	4b22      	ldr	r3, [pc, #136]	; (8006140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80060c0:	f7ff f914 	bl	80052ec <HAL_PWREx_GetVoltageRange>
 80060c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80060c6:	4b1e      	ldr	r3, [pc, #120]	; (8006140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ca:	4a1d      	ldr	r2, [pc, #116]	; (8006140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060d8:	d10b      	bne.n	80060f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b80      	cmp	r3, #128	; 0x80
 80060de:	d919      	bls.n	8006114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2ba0      	cmp	r3, #160	; 0xa0
 80060e4:	d902      	bls.n	80060ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060e6:	2302      	movs	r3, #2
 80060e8:	613b      	str	r3, [r7, #16]
 80060ea:	e013      	b.n	8006114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060ec:	2301      	movs	r3, #1
 80060ee:	613b      	str	r3, [r7, #16]
 80060f0:	e010      	b.n	8006114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b80      	cmp	r3, #128	; 0x80
 80060f6:	d902      	bls.n	80060fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80060f8:	2303      	movs	r3, #3
 80060fa:	613b      	str	r3, [r7, #16]
 80060fc:	e00a      	b.n	8006114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b80      	cmp	r3, #128	; 0x80
 8006102:	d102      	bne.n	800610a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006104:	2302      	movs	r3, #2
 8006106:	613b      	str	r3, [r7, #16]
 8006108:	e004      	b.n	8006114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b70      	cmp	r3, #112	; 0x70
 800610e:	d101      	bne.n	8006114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006110:	2301      	movs	r3, #1
 8006112:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006114:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f023 0207 	bic.w	r2, r3, #7
 800611c:	4909      	ldr	r1, [pc, #36]	; (8006144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006124:	4b07      	ldr	r3, [pc, #28]	; (8006144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	429a      	cmp	r2, r3
 8006130:	d001      	beq.n	8006136 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e000      	b.n	8006138 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	40021000 	.word	0x40021000
 8006144:	40022000 	.word	0x40022000

08006148 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006150:	2300      	movs	r3, #0
 8006152:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006154:	2300      	movs	r3, #0
 8006156:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006160:	2b00      	cmp	r3, #0
 8006162:	d031      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006168:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800616c:	d01a      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800616e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006172:	d814      	bhi.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006174:	2b00      	cmp	r3, #0
 8006176:	d009      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006178:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800617c:	d10f      	bne.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800617e:	4b5d      	ldr	r3, [pc, #372]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	4a5c      	ldr	r2, [pc, #368]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006188:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800618a:	e00c      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3304      	adds	r3, #4
 8006190:	2100      	movs	r1, #0
 8006192:	4618      	mov	r0, r3
 8006194:	f000 f9ce 	bl	8006534 <RCCEx_PLLSAI1_Config>
 8006198:	4603      	mov	r3, r0
 800619a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800619c:	e003      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	74fb      	strb	r3, [r7, #19]
      break;
 80061a2:	e000      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80061a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061a6:	7cfb      	ldrb	r3, [r7, #19]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10b      	bne.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061ac:	4b51      	ldr	r3, [pc, #324]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ba:	494e      	ldr	r1, [pc, #312]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80061c2:	e001      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c4:	7cfb      	ldrb	r3, [r7, #19]
 80061c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 809e 	beq.w	8006312 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061d6:	2300      	movs	r3, #0
 80061d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80061da:	4b46      	ldr	r3, [pc, #280]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80061e6:	2301      	movs	r3, #1
 80061e8:	e000      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80061ea:	2300      	movs	r3, #0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00d      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061f0:	4b40      	ldr	r3, [pc, #256]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f4:	4a3f      	ldr	r2, [pc, #252]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061fa:	6593      	str	r3, [r2, #88]	; 0x58
 80061fc:	4b3d      	ldr	r3, [pc, #244]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006204:	60bb      	str	r3, [r7, #8]
 8006206:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006208:	2301      	movs	r3, #1
 800620a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800620c:	4b3a      	ldr	r3, [pc, #232]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a39      	ldr	r2, [pc, #228]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006216:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006218:	f7fe f86e 	bl	80042f8 <HAL_GetTick>
 800621c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800621e:	e009      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006220:	f7fe f86a 	bl	80042f8 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d902      	bls.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	74fb      	strb	r3, [r7, #19]
        break;
 8006232:	e005      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006234:	4b30      	ldr	r3, [pc, #192]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0ef      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006240:	7cfb      	ldrb	r3, [r7, #19]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d15a      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006246:	4b2b      	ldr	r3, [pc, #172]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006250:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d01e      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	429a      	cmp	r2, r3
 8006260:	d019      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006262:	4b24      	ldr	r3, [pc, #144]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800626c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800626e:	4b21      	ldr	r3, [pc, #132]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006274:	4a1f      	ldr	r2, [pc, #124]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800627a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800627e:	4b1d      	ldr	r3, [pc, #116]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006284:	4a1b      	ldr	r2, [pc, #108]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800628a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800628e:	4a19      	ldr	r2, [pc, #100]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d016      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a0:	f7fe f82a 	bl	80042f8 <HAL_GetTick>
 80062a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062a6:	e00b      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062a8:	f7fe f826 	bl	80042f8 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d902      	bls.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	74fb      	strb	r3, [r7, #19]
            break;
 80062be:	e006      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062c0:	4b0c      	ldr	r3, [pc, #48]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0ec      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80062ce:	7cfb      	ldrb	r3, [r7, #19]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10b      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062d4:	4b07      	ldr	r3, [pc, #28]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e2:	4904      	ldr	r1, [pc, #16]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80062ea:	e009      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062ec:	7cfb      	ldrb	r3, [r7, #19]
 80062ee:	74bb      	strb	r3, [r7, #18]
 80062f0:	e006      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80062f2:	bf00      	nop
 80062f4:	40021000 	.word	0x40021000
 80062f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fc:	7cfb      	ldrb	r3, [r7, #19]
 80062fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006300:	7c7b      	ldrb	r3, [r7, #17]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d105      	bne.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006306:	4b8a      	ldr	r3, [pc, #552]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800630a:	4a89      	ldr	r2, [pc, #548]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800630c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006310:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00a      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800631e:	4b84      	ldr	r3, [pc, #528]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006324:	f023 0203 	bic.w	r2, r3, #3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	4980      	ldr	r1, [pc, #512]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800632e:	4313      	orrs	r3, r2
 8006330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00a      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006340:	4b7b      	ldr	r3, [pc, #492]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006346:	f023 020c 	bic.w	r2, r3, #12
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	4978      	ldr	r1, [pc, #480]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006350:	4313      	orrs	r3, r2
 8006352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0320 	and.w	r3, r3, #32
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006362:	4b73      	ldr	r3, [pc, #460]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006368:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006370:	496f      	ldr	r1, [pc, #444]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006372:	4313      	orrs	r3, r2
 8006374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00a      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006384:	4b6a      	ldr	r3, [pc, #424]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800638a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006392:	4967      	ldr	r1, [pc, #412]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006394:	4313      	orrs	r3, r2
 8006396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063a6:	4b62      	ldr	r3, [pc, #392]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b4:	495e      	ldr	r1, [pc, #376]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00a      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063c8:	4b59      	ldr	r3, [pc, #356]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d6:	4956      	ldr	r1, [pc, #344]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063ea:	4b51      	ldr	r3, [pc, #324]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f8:	494d      	ldr	r1, [pc, #308]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d028      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800640c:	4b48      	ldr	r3, [pc, #288]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800640e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006412:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	4945      	ldr	r1, [pc, #276]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800641c:	4313      	orrs	r3, r2
 800641e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800642a:	d106      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800642c:	4b40      	ldr	r3, [pc, #256]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	4a3f      	ldr	r2, [pc, #252]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006436:	60d3      	str	r3, [r2, #12]
 8006438:	e011      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006442:	d10c      	bne.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3304      	adds	r3, #4
 8006448:	2101      	movs	r1, #1
 800644a:	4618      	mov	r0, r3
 800644c:	f000 f872 	bl	8006534 <RCCEx_PLLSAI1_Config>
 8006450:	4603      	mov	r3, r0
 8006452:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006454:	7cfb      	ldrb	r3, [r7, #19]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800645a:	7cfb      	ldrb	r3, [r7, #19]
 800645c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d028      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800646a:	4b31      	ldr	r3, [pc, #196]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800646c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006470:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006478:	492d      	ldr	r1, [pc, #180]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800647a:	4313      	orrs	r3, r2
 800647c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006488:	d106      	bne.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800648a:	4b29      	ldr	r3, [pc, #164]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	4a28      	ldr	r2, [pc, #160]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006494:	60d3      	str	r3, [r2, #12]
 8006496:	e011      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800649c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064a0:	d10c      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	3304      	adds	r3, #4
 80064a6:	2101      	movs	r1, #1
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 f843 	bl	8006534 <RCCEx_PLLSAI1_Config>
 80064ae:	4603      	mov	r3, r0
 80064b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064b2:	7cfb      	ldrb	r3, [r7, #19]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80064b8:	7cfb      	ldrb	r3, [r7, #19]
 80064ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01c      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064c8:	4b19      	ldr	r3, [pc, #100]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d6:	4916      	ldr	r1, [pc, #88]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064e6:	d10c      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3304      	adds	r3, #4
 80064ec:	2102      	movs	r1, #2
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 f820 	bl	8006534 <RCCEx_PLLSAI1_Config>
 80064f4:	4603      	mov	r3, r0
 80064f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064f8:	7cfb      	ldrb	r3, [r7, #19]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80064fe:	7cfb      	ldrb	r3, [r7, #19]
 8006500:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800650e:	4b08      	ldr	r3, [pc, #32]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006514:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800651c:	4904      	ldr	r1, [pc, #16]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800651e:	4313      	orrs	r3, r2
 8006520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006524:	7cbb      	ldrb	r3, [r7, #18]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	40021000 	.word	0x40021000

08006534 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006542:	4b74      	ldr	r3, [pc, #464]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	f003 0303 	and.w	r3, r3, #3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d018      	beq.n	8006580 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800654e:	4b71      	ldr	r3, [pc, #452]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f003 0203 	and.w	r2, r3, #3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d10d      	bne.n	800657a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
       ||
 8006562:	2b00      	cmp	r3, #0
 8006564:	d009      	beq.n	800657a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006566:	4b6b      	ldr	r3, [pc, #428]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	091b      	lsrs	r3, r3, #4
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
       ||
 8006576:	429a      	cmp	r2, r3
 8006578:	d047      	beq.n	800660a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	73fb      	strb	r3, [r7, #15]
 800657e:	e044      	b.n	800660a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b03      	cmp	r3, #3
 8006586:	d018      	beq.n	80065ba <RCCEx_PLLSAI1_Config+0x86>
 8006588:	2b03      	cmp	r3, #3
 800658a:	d825      	bhi.n	80065d8 <RCCEx_PLLSAI1_Config+0xa4>
 800658c:	2b01      	cmp	r3, #1
 800658e:	d002      	beq.n	8006596 <RCCEx_PLLSAI1_Config+0x62>
 8006590:	2b02      	cmp	r3, #2
 8006592:	d009      	beq.n	80065a8 <RCCEx_PLLSAI1_Config+0x74>
 8006594:	e020      	b.n	80065d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006596:	4b5f      	ldr	r3, [pc, #380]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d11d      	bne.n	80065de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065a6:	e01a      	b.n	80065de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065a8:	4b5a      	ldr	r3, [pc, #360]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d116      	bne.n	80065e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065b8:	e013      	b.n	80065e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80065ba:	4b56      	ldr	r3, [pc, #344]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10f      	bne.n	80065e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065c6:	4b53      	ldr	r3, [pc, #332]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d109      	bne.n	80065e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065d6:	e006      	b.n	80065e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	73fb      	strb	r3, [r7, #15]
      break;
 80065dc:	e004      	b.n	80065e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80065de:	bf00      	nop
 80065e0:	e002      	b.n	80065e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80065e2:	bf00      	nop
 80065e4:	e000      	b.n	80065e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80065e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10d      	bne.n	800660a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80065ee:	4b49      	ldr	r3, [pc, #292]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6819      	ldr	r1, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	3b01      	subs	r3, #1
 8006600:	011b      	lsls	r3, r3, #4
 8006602:	430b      	orrs	r3, r1
 8006604:	4943      	ldr	r1, [pc, #268]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006606:	4313      	orrs	r3, r2
 8006608:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800660a:	7bfb      	ldrb	r3, [r7, #15]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d17c      	bne.n	800670a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006610:	4b40      	ldr	r3, [pc, #256]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a3f      	ldr	r2, [pc, #252]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006616:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800661a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800661c:	f7fd fe6c 	bl	80042f8 <HAL_GetTick>
 8006620:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006622:	e009      	b.n	8006638 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006624:	f7fd fe68 	bl	80042f8 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d902      	bls.n	8006638 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	73fb      	strb	r3, [r7, #15]
        break;
 8006636:	e005      	b.n	8006644 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006638:	4b36      	ldr	r3, [pc, #216]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1ef      	bne.n	8006624 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006644:	7bfb      	ldrb	r3, [r7, #15]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d15f      	bne.n	800670a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d110      	bne.n	8006672 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006650:	4b30      	ldr	r3, [pc, #192]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006658:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6892      	ldr	r2, [r2, #8]
 8006660:	0211      	lsls	r1, r2, #8
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	68d2      	ldr	r2, [r2, #12]
 8006666:	06d2      	lsls	r2, r2, #27
 8006668:	430a      	orrs	r2, r1
 800666a:	492a      	ldr	r1, [pc, #168]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 800666c:	4313      	orrs	r3, r2
 800666e:	610b      	str	r3, [r1, #16]
 8006670:	e027      	b.n	80066c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d112      	bne.n	800669e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006678:	4b26      	ldr	r3, [pc, #152]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006680:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6892      	ldr	r2, [r2, #8]
 8006688:	0211      	lsls	r1, r2, #8
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6912      	ldr	r2, [r2, #16]
 800668e:	0852      	lsrs	r2, r2, #1
 8006690:	3a01      	subs	r2, #1
 8006692:	0552      	lsls	r2, r2, #21
 8006694:	430a      	orrs	r2, r1
 8006696:	491f      	ldr	r1, [pc, #124]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006698:	4313      	orrs	r3, r2
 800669a:	610b      	str	r3, [r1, #16]
 800669c:	e011      	b.n	80066c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800669e:	4b1d      	ldr	r3, [pc, #116]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80066a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6892      	ldr	r2, [r2, #8]
 80066ae:	0211      	lsls	r1, r2, #8
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6952      	ldr	r2, [r2, #20]
 80066b4:	0852      	lsrs	r2, r2, #1
 80066b6:	3a01      	subs	r2, #1
 80066b8:	0652      	lsls	r2, r2, #25
 80066ba:	430a      	orrs	r2, r1
 80066bc:	4915      	ldr	r1, [pc, #84]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80066c2:	4b14      	ldr	r3, [pc, #80]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a13      	ldr	r2, [pc, #76]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ce:	f7fd fe13 	bl	80042f8 <HAL_GetTick>
 80066d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80066d4:	e009      	b.n	80066ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066d6:	f7fd fe0f 	bl	80042f8 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d902      	bls.n	80066ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	73fb      	strb	r3, [r7, #15]
          break;
 80066e8:	e005      	b.n	80066f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80066ea:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0ef      	beq.n	80066d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d106      	bne.n	800670a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80066fc:	4b05      	ldr	r3, [pc, #20]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066fe:	691a      	ldr	r2, [r3, #16]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	4903      	ldr	r1, [pc, #12]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006706:	4313      	orrs	r3, r2
 8006708:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800670a:	7bfb      	ldrb	r3, [r7, #15]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	40021000 	.word	0x40021000

08006718 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e049      	b.n	80067be <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	795b      	ldrb	r3, [r3, #5]
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d105      	bne.n	8006740 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7fd f84c 	bl	80037d8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f042 0204 	orr.w	r2, r2, #4
 8006754:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006760:	2b40      	cmp	r3, #64	; 0x40
 8006762:	d104      	bne.n	800676e <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2204      	movs	r2, #4
 8006768:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e027      	b.n	80067be <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800676e:	f7fd fdc3 	bl	80042f8 <HAL_GetTick>
 8006772:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006774:	e015      	b.n	80067a2 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006776:	f7fd fdbf 	bl	80042f8 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d90e      	bls.n	80067a2 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f003 0304 	and.w	r3, r3, #4
 800678e:	2b04      	cmp	r3, #4
 8006790:	d107      	bne.n	80067a2 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2204      	movs	r2, #4
 8006796:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e00d      	b.n	80067be <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f003 0304 	and.w	r3, r3, #4
 80067ac:	2b04      	cmp	r3, #4
 80067ae:	d0e2      	beq.n	8006776 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b084      	sub	sp, #16
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e095      	b.n	8006904 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d108      	bne.n	80067f2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067e8:	d009      	beq.n	80067fe <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	61da      	str	r2, [r3, #28]
 80067f0:	e005      	b.n	80067fe <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	d106      	bne.n	800681e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7fd f85f 	bl	80038dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2202      	movs	r2, #2
 8006822:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006834:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800683e:	d902      	bls.n	8006846 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	e002      	b.n	800684c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800684a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006854:	d007      	beq.n	8006866 <HAL_SPI_Init+0xa0>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800685e:	d002      	beq.n	8006866 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	431a      	orrs	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006894:	431a      	orrs	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800689e:	431a      	orrs	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a8:	ea42 0103 	orr.w	r1, r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	0c1b      	lsrs	r3, r3, #16
 80068c2:	f003 0204 	and.w	r2, r3, #4
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ca:	f003 0310 	and.w	r3, r3, #16
 80068ce:	431a      	orrs	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d4:	f003 0308 	and.w	r3, r3, #8
 80068d8:	431a      	orrs	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80068e2:	ea42 0103 	orr.w	r1, r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b088      	sub	sp, #32
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	4613      	mov	r3, r2
 800691a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800691c:	2300      	movs	r3, #0
 800691e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006926:	2b01      	cmp	r3, #1
 8006928:	d101      	bne.n	800692e <HAL_SPI_Transmit+0x22>
 800692a:	2302      	movs	r3, #2
 800692c:	e158      	b.n	8006be0 <HAL_SPI_Transmit+0x2d4>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006936:	f7fd fcdf 	bl	80042f8 <HAL_GetTick>
 800693a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800693c:	88fb      	ldrh	r3, [r7, #6]
 800693e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b01      	cmp	r3, #1
 800694a:	d002      	beq.n	8006952 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800694c:	2302      	movs	r3, #2
 800694e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006950:	e13d      	b.n	8006bce <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <HAL_SPI_Transmit+0x52>
 8006958:	88fb      	ldrh	r3, [r7, #6]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d102      	bne.n	8006964 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006962:	e134      	b.n	8006bce <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2203      	movs	r2, #3
 8006968:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	88fa      	ldrh	r2, [r7, #6]
 800697c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	88fa      	ldrh	r2, [r7, #6]
 8006982:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ae:	d10f      	bne.n	80069d0 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069da:	2b40      	cmp	r3, #64	; 0x40
 80069dc:	d007      	beq.n	80069ee <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069f6:	d94b      	bls.n	8006a90 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <HAL_SPI_Transmit+0xfa>
 8006a00:	8afb      	ldrh	r3, [r7, #22]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d13e      	bne.n	8006a84 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0a:	881a      	ldrh	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a16:	1c9a      	adds	r2, r3, #2
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	3b01      	subs	r3, #1
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a2a:	e02b      	b.n	8006a84 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d112      	bne.n	8006a60 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3e:	881a      	ldrh	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4a:	1c9a      	adds	r2, r3, #2
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	3b01      	subs	r3, #1
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a5e:	e011      	b.n	8006a84 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a60:	f7fd fc4a 	bl	80042f8 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d803      	bhi.n	8006a78 <HAL_SPI_Transmit+0x16c>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a76:	d102      	bne.n	8006a7e <HAL_SPI_Transmit+0x172>
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d102      	bne.n	8006a84 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a82:	e0a4      	b.n	8006bce <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1ce      	bne.n	8006a2c <HAL_SPI_Transmit+0x120>
 8006a8e:	e07c      	b.n	8006b8a <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <HAL_SPI_Transmit+0x192>
 8006a98:	8afb      	ldrh	r3, [r7, #22]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d170      	bne.n	8006b80 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d912      	bls.n	8006ace <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aac:	881a      	ldrh	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab8:	1c9a      	adds	r2, r3, #2
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	3b02      	subs	r3, #2
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006acc:	e058      	b.n	8006b80 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	330c      	adds	r3, #12
 8006ad8:	7812      	ldrb	r2, [r2, #0]
 8006ada:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	3b01      	subs	r3, #1
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006af4:	e044      	b.n	8006b80 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d12b      	bne.n	8006b5c <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d912      	bls.n	8006b34 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b12:	881a      	ldrh	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1e:	1c9a      	adds	r2, r3, #2
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	3b02      	subs	r3, #2
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b32:	e025      	b.n	8006b80 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	330c      	adds	r3, #12
 8006b3e:	7812      	ldrb	r2, [r2, #0]
 8006b40:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	3b01      	subs	r3, #1
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b5a:	e011      	b.n	8006b80 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b5c:	f7fd fbcc 	bl	80042f8 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d803      	bhi.n	8006b74 <HAL_SPI_Transmit+0x268>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b72:	d102      	bne.n	8006b7a <HAL_SPI_Transmit+0x26e>
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d102      	bne.n	8006b80 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b7e:	e026      	b.n	8006bce <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1b5      	bne.n	8006af6 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 fce4 	bl	800755c <SPI_EndRxTxTransaction>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d002      	beq.n	8006ba0 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10a      	bne.n	8006bbe <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ba8:	2300      	movs	r3, #0
 8006baa:	613b      	str	r3, [r7, #16]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	613b      	str	r3, [r7, #16]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	613b      	str	r3, [r7, #16]
 8006bbc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d002      	beq.n	8006bcc <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	77fb      	strb	r3, [r7, #31]
 8006bca:	e000      	b.n	8006bce <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006bcc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006bde:	7ffb      	ldrb	r3, [r7, #31]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3720      	adds	r7, #32
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af02      	add	r7, sp, #8
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	603b      	str	r3, [r7, #0]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c04:	d112      	bne.n	8006c2c <HAL_SPI_Receive+0x44>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10e      	bne.n	8006c2c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2204      	movs	r2, #4
 8006c12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006c16:	88fa      	ldrh	r2, [r7, #6]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	68b9      	ldr	r1, [r7, #8]
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 f910 	bl	8006e48 <HAL_SPI_TransmitReceive>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	e109      	b.n	8006e40 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d101      	bne.n	8006c3a <HAL_SPI_Receive+0x52>
 8006c36:	2302      	movs	r3, #2
 8006c38:	e102      	b.n	8006e40 <HAL_SPI_Receive+0x258>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c42:	f7fd fb59 	bl	80042f8 <HAL_GetTick>
 8006c46:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d002      	beq.n	8006c5a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006c54:	2302      	movs	r3, #2
 8006c56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c58:	e0e9      	b.n	8006e2e <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <HAL_SPI_Receive+0x7e>
 8006c60:	88fb      	ldrh	r3, [r7, #6]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d102      	bne.n	8006c6c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c6a:	e0e0      	b.n	8006e2e <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2204      	movs	r2, #4
 8006c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	88fa      	ldrh	r2, [r7, #6]
 8006c84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	88fa      	ldrh	r2, [r7, #6]
 8006c8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006cb6:	d908      	bls.n	8006cca <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006cc6:	605a      	str	r2, [r3, #4]
 8006cc8:	e007      	b.n	8006cda <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cd8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce2:	d10f      	bne.n	8006d04 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cf2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d02:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0e:	2b40      	cmp	r3, #64	; 0x40
 8006d10:	d007      	beq.n	8006d22 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d20:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d2a:	d867      	bhi.n	8006dfc <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006d2c:	e030      	b.n	8006d90 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d117      	bne.n	8006d6c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f103 020c 	add.w	r2, r3, #12
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d48:	7812      	ldrb	r2, [r2, #0]
 8006d4a:	b2d2      	uxtb	r2, r2
 8006d4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	1c5a      	adds	r2, r3, #1
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	3b01      	subs	r3, #1
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006d6a:	e011      	b.n	8006d90 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d6c:	f7fd fac4 	bl	80042f8 <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d803      	bhi.n	8006d84 <HAL_SPI_Receive+0x19c>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d82:	d102      	bne.n	8006d8a <HAL_SPI_Receive+0x1a2>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d102      	bne.n	8006d90 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006d8e:	e04e      	b.n	8006e2e <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1c8      	bne.n	8006d2e <HAL_SPI_Receive+0x146>
 8006d9c:	e034      	b.n	8006e08 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d115      	bne.n	8006dd8 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68da      	ldr	r2, [r3, #12]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	b292      	uxth	r2, r2
 8006db8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	1c9a      	adds	r2, r3, #2
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006dd6:	e011      	b.n	8006dfc <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dd8:	f7fd fa8e 	bl	80042f8 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d803      	bhi.n	8006df0 <HAL_SPI_Receive+0x208>
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dee:	d102      	bne.n	8006df6 <HAL_SPI_Receive+0x20e>
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d102      	bne.n	8006dfc <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006dfa:	e018      	b.n	8006e2e <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1ca      	bne.n	8006d9e <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 fb4d 	bl	80074ac <SPI_EndRxTransaction>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	75fb      	strb	r3, [r7, #23]
 8006e2a:	e000      	b.n	8006e2e <HAL_SPI_Receive+0x246>
  }

error :
 8006e2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3718      	adds	r7, #24
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b08a      	sub	sp, #40	; 0x28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e56:	2301      	movs	r3, #1
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d101      	bne.n	8006e6e <HAL_SPI_TransmitReceive+0x26>
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	e1fb      	b.n	8007266 <HAL_SPI_TransmitReceive+0x41e>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e76:	f7fd fa3f 	bl	80042f8 <HAL_GetTick>
 8006e7a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e82:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006e8a:	887b      	ldrh	r3, [r7, #2]
 8006e8c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006e8e:	887b      	ldrh	r3, [r7, #2]
 8006e90:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e92:	7efb      	ldrb	r3, [r7, #27]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d00e      	beq.n	8006eb6 <HAL_SPI_TransmitReceive+0x6e>
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e9e:	d106      	bne.n	8006eae <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d102      	bne.n	8006eae <HAL_SPI_TransmitReceive+0x66>
 8006ea8:	7efb      	ldrb	r3, [r7, #27]
 8006eaa:	2b04      	cmp	r3, #4
 8006eac:	d003      	beq.n	8006eb6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006eae:	2302      	movs	r3, #2
 8006eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006eb4:	e1cd      	b.n	8007252 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d005      	beq.n	8006ec8 <HAL_SPI_TransmitReceive+0x80>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <HAL_SPI_TransmitReceive+0x80>
 8006ec2:	887b      	ldrh	r3, [r7, #2]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d103      	bne.n	8006ed0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006ece:	e1c0      	b.n	8007252 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b04      	cmp	r3, #4
 8006eda:	d003      	beq.n	8006ee4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2205      	movs	r2, #5
 8006ee0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	887a      	ldrh	r2, [r7, #2]
 8006ef4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	887a      	ldrh	r2, [r7, #2]
 8006efc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	887a      	ldrh	r2, [r7, #2]
 8006f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	887a      	ldrh	r2, [r7, #2]
 8006f10:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f26:	d802      	bhi.n	8006f2e <HAL_SPI_TransmitReceive+0xe6>
 8006f28:	8a3b      	ldrh	r3, [r7, #16]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d908      	bls.n	8006f40 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f3c:	605a      	str	r2, [r3, #4]
 8006f3e:	e007      	b.n	8006f50 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f4e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5a:	2b40      	cmp	r3, #64	; 0x40
 8006f5c:	d007      	beq.n	8006f6e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f76:	d97c      	bls.n	8007072 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <HAL_SPI_TransmitReceive+0x13e>
 8006f80:	8a7b      	ldrh	r3, [r7, #18]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d169      	bne.n	800705a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8a:	881a      	ldrh	r2, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f96:	1c9a      	adds	r2, r3, #2
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006faa:	e056      	b.n	800705a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d11b      	bne.n	8006ff2 <HAL_SPI_TransmitReceive+0x1aa>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d016      	beq.n	8006ff2 <HAL_SPI_TransmitReceive+0x1aa>
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d113      	bne.n	8006ff2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	881a      	ldrh	r2, [r3, #0]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fda:	1c9a      	adds	r2, r3, #2
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d11c      	bne.n	800703a <HAL_SPI_TransmitReceive+0x1f2>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007006:	b29b      	uxth	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	d016      	beq.n	800703a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68da      	ldr	r2, [r3, #12]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	b292      	uxth	r2, r2
 8007018:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	1c9a      	adds	r2, r3, #2
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800702a:	b29b      	uxth	r3, r3
 800702c:	3b01      	subs	r3, #1
 800702e:	b29a      	uxth	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007036:	2301      	movs	r3, #1
 8007038:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800703a:	f7fd f95d 	bl	80042f8 <HAL_GetTick>
 800703e:	4602      	mov	r2, r0
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007046:	429a      	cmp	r2, r3
 8007048:	d807      	bhi.n	800705a <HAL_SPI_TransmitReceive+0x212>
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007050:	d003      	beq.n	800705a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007058:	e0fb      	b.n	8007252 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800705e:	b29b      	uxth	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1a3      	bne.n	8006fac <HAL_SPI_TransmitReceive+0x164>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800706a:	b29b      	uxth	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d19d      	bne.n	8006fac <HAL_SPI_TransmitReceive+0x164>
 8007070:	e0df      	b.n	8007232 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d003      	beq.n	8007082 <HAL_SPI_TransmitReceive+0x23a>
 800707a:	8a7b      	ldrh	r3, [r7, #18]
 800707c:	2b01      	cmp	r3, #1
 800707e:	f040 80cb 	bne.w	8007218 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007086:	b29b      	uxth	r3, r3
 8007088:	2b01      	cmp	r3, #1
 800708a:	d912      	bls.n	80070b2 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007090:	881a      	ldrh	r2, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709c:	1c9a      	adds	r2, r3, #2
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	3b02      	subs	r3, #2
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070b0:	e0b2      	b.n	8007218 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	330c      	adds	r3, #12
 80070bc:	7812      	ldrb	r2, [r2, #0]
 80070be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	3b01      	subs	r3, #1
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070d8:	e09e      	b.n	8007218 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d134      	bne.n	8007152 <HAL_SPI_TransmitReceive+0x30a>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d02f      	beq.n	8007152 <HAL_SPI_TransmitReceive+0x30a>
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d12c      	bne.n	8007152 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d912      	bls.n	8007128 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007106:	881a      	ldrh	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007112:	1c9a      	adds	r2, r3, #2
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800711c:	b29b      	uxth	r3, r3
 800711e:	3b02      	subs	r3, #2
 8007120:	b29a      	uxth	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007126:	e012      	b.n	800714e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	330c      	adds	r3, #12
 8007132:	7812      	ldrb	r2, [r2, #0]
 8007134:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713a:	1c5a      	adds	r2, r3, #1
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007144:	b29b      	uxth	r3, r3
 8007146:	3b01      	subs	r3, #1
 8007148:	b29a      	uxth	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	2b01      	cmp	r3, #1
 800715e:	d148      	bne.n	80071f2 <HAL_SPI_TransmitReceive+0x3aa>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007166:	b29b      	uxth	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	d042      	beq.n	80071f2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007172:	b29b      	uxth	r3, r3
 8007174:	2b01      	cmp	r3, #1
 8007176:	d923      	bls.n	80071c0 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68da      	ldr	r2, [r3, #12]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007182:	b292      	uxth	r2, r2
 8007184:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	1c9a      	adds	r2, r3, #2
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007196:	b29b      	uxth	r3, r3
 8007198:	3b02      	subs	r3, #2
 800719a:	b29a      	uxth	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d81f      	bhi.n	80071ee <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071bc:	605a      	str	r2, [r3, #4]
 80071be:	e016      	b.n	80071ee <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f103 020c 	add.w	r2, r3, #12
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071cc:	7812      	ldrb	r2, [r2, #0]
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d6:	1c5a      	adds	r2, r3, #1
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	3b01      	subs	r3, #1
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071ee:	2301      	movs	r3, #1
 80071f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80071f2:	f7fd f881 	bl	80042f8 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071fe:	429a      	cmp	r2, r3
 8007200:	d803      	bhi.n	800720a <HAL_SPI_TransmitReceive+0x3c2>
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007208:	d102      	bne.n	8007210 <HAL_SPI_TransmitReceive+0x3c8>
 800720a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720c:	2b00      	cmp	r3, #0
 800720e:	d103      	bne.n	8007218 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007216:	e01c      	b.n	8007252 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800721c:	b29b      	uxth	r3, r3
 800721e:	2b00      	cmp	r3, #0
 8007220:	f47f af5b 	bne.w	80070da <HAL_SPI_TransmitReceive+0x292>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800722a:	b29b      	uxth	r3, r3
 800722c:	2b00      	cmp	r3, #0
 800722e:	f47f af54 	bne.w	80070da <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007232:	69fa      	ldr	r2, [r7, #28]
 8007234:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f000 f990 	bl	800755c <SPI_EndRxTxTransaction>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d006      	beq.n	8007250 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2220      	movs	r2, #32
 800724c:	661a      	str	r2, [r3, #96]	; 0x60
 800724e:	e000      	b.n	8007252 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007250:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007262:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007266:	4618      	mov	r0, r3
 8007268:	3728      	adds	r7, #40	; 0x28
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
	...

08007270 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	4613      	mov	r3, r2
 800727e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007280:	f7fd f83a 	bl	80042f8 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007288:	1a9b      	subs	r3, r3, r2
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	4413      	add	r3, r2
 800728e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007290:	f7fd f832 	bl	80042f8 <HAL_GetTick>
 8007294:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007296:	4b39      	ldr	r3, [pc, #228]	; (800737c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	015b      	lsls	r3, r3, #5
 800729c:	0d1b      	lsrs	r3, r3, #20
 800729e:	69fa      	ldr	r2, [r7, #28]
 80072a0:	fb02 f303 	mul.w	r3, r2, r3
 80072a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072a6:	e054      	b.n	8007352 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ae:	d050      	beq.n	8007352 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072b0:	f7fd f822 	bl	80042f8 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	69fa      	ldr	r2, [r7, #28]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d902      	bls.n	80072c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d13d      	bne.n	8007342 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80072d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072de:	d111      	bne.n	8007304 <SPI_WaitFlagStateUntilTimeout+0x94>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072e8:	d004      	beq.n	80072f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072f2:	d107      	bne.n	8007304 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007302:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800730c:	d10f      	bne.n	800732e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800732c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e017      	b.n	8007372 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	3b01      	subs	r3, #1
 8007350:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689a      	ldr	r2, [r3, #8]
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	4013      	ands	r3, r2
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	429a      	cmp	r2, r3
 8007360:	bf0c      	ite	eq
 8007362:	2301      	moveq	r3, #1
 8007364:	2300      	movne	r3, #0
 8007366:	b2db      	uxtb	r3, r3
 8007368:	461a      	mov	r2, r3
 800736a:	79fb      	ldrb	r3, [r7, #7]
 800736c:	429a      	cmp	r2, r3
 800736e:	d19b      	bne.n	80072a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3720      	adds	r7, #32
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	200001b8 	.word	0x200001b8

08007380 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b08a      	sub	sp, #40	; 0x28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
 800738c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800738e:	2300      	movs	r3, #0
 8007390:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007392:	f7fc ffb1 	bl	80042f8 <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	1a9b      	subs	r3, r3, r2
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	4413      	add	r3, r2
 80073a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80073a2:	f7fc ffa9 	bl	80042f8 <HAL_GetTick>
 80073a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	330c      	adds	r3, #12
 80073ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80073b0:	4b3d      	ldr	r3, [pc, #244]	; (80074a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	4613      	mov	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	00da      	lsls	r2, r3, #3
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	0d1b      	lsrs	r3, r3, #20
 80073c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c2:	fb02 f303 	mul.w	r3, r2, r3
 80073c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80073c8:	e060      	b.n	800748c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80073d0:	d107      	bne.n	80073e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d104      	bne.n	80073e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e8:	d050      	beq.n	800748c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073ea:	f7fc ff85 	bl	80042f8 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	6a3b      	ldr	r3, [r7, #32]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d902      	bls.n	8007400 <SPI_WaitFifoStateUntilTimeout+0x80>
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d13d      	bne.n	800747c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800740e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007418:	d111      	bne.n	800743e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007422:	d004      	beq.n	800742e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800742c:	d107      	bne.n	800743e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800743c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007446:	d10f      	bne.n	8007468 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007466:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e010      	b.n	800749e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	3b01      	subs	r3, #1
 800748a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689a      	ldr	r2, [r3, #8]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	4013      	ands	r3, r2
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	429a      	cmp	r2, r3
 800749a:	d196      	bne.n	80073ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3728      	adds	r7, #40	; 0x28
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	200001b8 	.word	0x200001b8

080074ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af02      	add	r7, sp, #8
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074c0:	d111      	bne.n	80074e6 <SPI_EndRxTransaction+0x3a>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ca:	d004      	beq.n	80074d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074d4:	d107      	bne.n	80074e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074e4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2200      	movs	r2, #0
 80074ee:	2180      	movs	r1, #128	; 0x80
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f7ff febd 	bl	8007270 <SPI_WaitFlagStateUntilTimeout>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d007      	beq.n	800750c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007500:	f043 0220 	orr.w	r2, r3, #32
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e023      	b.n	8007554 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007514:	d11d      	bne.n	8007552 <SPI_EndRxTransaction+0xa6>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800751e:	d004      	beq.n	800752a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007528:	d113      	bne.n	8007552 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	2200      	movs	r2, #0
 8007532:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f7ff ff22 	bl	8007380 <SPI_WaitFifoStateUntilTimeout>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d007      	beq.n	8007552 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007546:	f043 0220 	orr.w	r2, r3, #32
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e000      	b.n	8007554 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af02      	add	r7, sp, #8
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2200      	movs	r2, #0
 8007570:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f7ff ff03 	bl	8007380 <SPI_WaitFifoStateUntilTimeout>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d007      	beq.n	8007590 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007584:	f043 0220 	orr.w	r2, r3, #32
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e027      	b.n	80075e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2200      	movs	r2, #0
 8007598:	2180      	movs	r1, #128	; 0x80
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f7ff fe68 	bl	8007270 <SPI_WaitFlagStateUntilTimeout>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d007      	beq.n	80075b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075aa:	f043 0220 	orr.w	r2, r3, #32
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e014      	b.n	80075e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	2200      	movs	r2, #0
 80075be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f7ff fedc 	bl	8007380 <SPI_WaitFifoStateUntilTimeout>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d007      	beq.n	80075de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d2:	f043 0220 	orr.w	r2, r3, #32
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e000      	b.n	80075e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e049      	b.n	800768e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d106      	bne.n	8007614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7fc fd08 	bl	8004024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3304      	adds	r3, #4
 8007624:	4619      	mov	r1, r3
 8007626:	4610      	mov	r0, r2
 8007628:	f000 fcf0 	bl	800800c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
	...

08007698 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d001      	beq.n	80076b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e03b      	b.n	8007728 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2202      	movs	r2, #2
 80076b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68da      	ldr	r2, [r3, #12]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0201 	orr.w	r2, r2, #1
 80076c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a19      	ldr	r2, [pc, #100]	; (8007734 <HAL_TIM_Base_Start_IT+0x9c>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d009      	beq.n	80076e6 <HAL_TIM_Base_Start_IT+0x4e>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076da:	d004      	beq.n	80076e6 <HAL_TIM_Base_Start_IT+0x4e>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a15      	ldr	r2, [pc, #84]	; (8007738 <HAL_TIM_Base_Start_IT+0xa0>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d115      	bne.n	8007712 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689a      	ldr	r2, [r3, #8]
 80076ec:	4b13      	ldr	r3, [pc, #76]	; (800773c <HAL_TIM_Base_Start_IT+0xa4>)
 80076ee:	4013      	ands	r3, r2
 80076f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b06      	cmp	r3, #6
 80076f6:	d015      	beq.n	8007724 <HAL_TIM_Base_Start_IT+0x8c>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076fe:	d011      	beq.n	8007724 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0201 	orr.w	r2, r2, #1
 800770e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007710:	e008      	b.n	8007724 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f042 0201 	orr.w	r2, r2, #1
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	e000      	b.n	8007726 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007724:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr
 8007734:	40012c00 	.word	0x40012c00
 8007738:	40014000 	.word	0x40014000
 800773c:	00010007 	.word	0x00010007

08007740 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e049      	b.n	80077e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d106      	bne.n	800776c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f841 	bl	80077ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	3304      	adds	r3, #4
 800777c:	4619      	mov	r1, r3
 800777e:	4610      	mov	r0, r2
 8007780:	f000 fc44 	bl	800800c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80077ee:	b480      	push	{r7}
 80077f0:	b083      	sub	sp, #12
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80077f6:	bf00      	nop
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
	...

08007804 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d109      	bne.n	8007828 <HAL_TIM_PWM_Start+0x24>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b01      	cmp	r3, #1
 800781e:	bf14      	ite	ne
 8007820:	2301      	movne	r3, #1
 8007822:	2300      	moveq	r3, #0
 8007824:	b2db      	uxtb	r3, r3
 8007826:	e03c      	b.n	80078a2 <HAL_TIM_PWM_Start+0x9e>
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	2b04      	cmp	r3, #4
 800782c:	d109      	bne.n	8007842 <HAL_TIM_PWM_Start+0x3e>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b01      	cmp	r3, #1
 8007838:	bf14      	ite	ne
 800783a:	2301      	movne	r3, #1
 800783c:	2300      	moveq	r3, #0
 800783e:	b2db      	uxtb	r3, r3
 8007840:	e02f      	b.n	80078a2 <HAL_TIM_PWM_Start+0x9e>
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b08      	cmp	r3, #8
 8007846:	d109      	bne.n	800785c <HAL_TIM_PWM_Start+0x58>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b01      	cmp	r3, #1
 8007852:	bf14      	ite	ne
 8007854:	2301      	movne	r3, #1
 8007856:	2300      	moveq	r3, #0
 8007858:	b2db      	uxtb	r3, r3
 800785a:	e022      	b.n	80078a2 <HAL_TIM_PWM_Start+0x9e>
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2b0c      	cmp	r3, #12
 8007860:	d109      	bne.n	8007876 <HAL_TIM_PWM_Start+0x72>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b01      	cmp	r3, #1
 800786c:	bf14      	ite	ne
 800786e:	2301      	movne	r3, #1
 8007870:	2300      	moveq	r3, #0
 8007872:	b2db      	uxtb	r3, r3
 8007874:	e015      	b.n	80078a2 <HAL_TIM_PWM_Start+0x9e>
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	2b10      	cmp	r3, #16
 800787a:	d109      	bne.n	8007890 <HAL_TIM_PWM_Start+0x8c>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b01      	cmp	r3, #1
 8007886:	bf14      	ite	ne
 8007888:	2301      	movne	r3, #1
 800788a:	2300      	moveq	r3, #0
 800788c:	b2db      	uxtb	r3, r3
 800788e:	e008      	b.n	80078a2 <HAL_TIM_PWM_Start+0x9e>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b01      	cmp	r3, #1
 800789a:	bf14      	ite	ne
 800789c:	2301      	movne	r3, #1
 800789e:	2300      	moveq	r3, #0
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d001      	beq.n	80078aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e07e      	b.n	80079a8 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d104      	bne.n	80078ba <HAL_TIM_PWM_Start+0xb6>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078b8:	e023      	b.n	8007902 <HAL_TIM_PWM_Start+0xfe>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d104      	bne.n	80078ca <HAL_TIM_PWM_Start+0xc6>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078c8:	e01b      	b.n	8007902 <HAL_TIM_PWM_Start+0xfe>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b08      	cmp	r3, #8
 80078ce:	d104      	bne.n	80078da <HAL_TIM_PWM_Start+0xd6>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078d8:	e013      	b.n	8007902 <HAL_TIM_PWM_Start+0xfe>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b0c      	cmp	r3, #12
 80078de:	d104      	bne.n	80078ea <HAL_TIM_PWM_Start+0xe6>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078e8:	e00b      	b.n	8007902 <HAL_TIM_PWM_Start+0xfe>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b10      	cmp	r3, #16
 80078ee:	d104      	bne.n	80078fa <HAL_TIM_PWM_Start+0xf6>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2202      	movs	r2, #2
 80078f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078f8:	e003      	b.n	8007902 <HAL_TIM_PWM_Start+0xfe>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2202      	movs	r2, #2
 80078fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2201      	movs	r2, #1
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	4618      	mov	r0, r3
 800790c:	f000 fefa 	bl	8008704 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a26      	ldr	r2, [pc, #152]	; (80079b0 <HAL_TIM_PWM_Start+0x1ac>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d009      	beq.n	800792e <HAL_TIM_PWM_Start+0x12a>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a25      	ldr	r2, [pc, #148]	; (80079b4 <HAL_TIM_PWM_Start+0x1b0>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d004      	beq.n	800792e <HAL_TIM_PWM_Start+0x12a>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a23      	ldr	r2, [pc, #140]	; (80079b8 <HAL_TIM_PWM_Start+0x1b4>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d101      	bne.n	8007932 <HAL_TIM_PWM_Start+0x12e>
 800792e:	2301      	movs	r3, #1
 8007930:	e000      	b.n	8007934 <HAL_TIM_PWM_Start+0x130>
 8007932:	2300      	movs	r3, #0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d007      	beq.n	8007948 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007946:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a18      	ldr	r2, [pc, #96]	; (80079b0 <HAL_TIM_PWM_Start+0x1ac>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d009      	beq.n	8007966 <HAL_TIM_PWM_Start+0x162>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800795a:	d004      	beq.n	8007966 <HAL_TIM_PWM_Start+0x162>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a14      	ldr	r2, [pc, #80]	; (80079b4 <HAL_TIM_PWM_Start+0x1b0>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d115      	bne.n	8007992 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	689a      	ldr	r2, [r3, #8]
 800796c:	4b13      	ldr	r3, [pc, #76]	; (80079bc <HAL_TIM_PWM_Start+0x1b8>)
 800796e:	4013      	ands	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2b06      	cmp	r3, #6
 8007976:	d015      	beq.n	80079a4 <HAL_TIM_PWM_Start+0x1a0>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800797e:	d011      	beq.n	80079a4 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f042 0201 	orr.w	r2, r2, #1
 800798e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007990:	e008      	b.n	80079a4 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f042 0201 	orr.w	r2, r2, #1
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	e000      	b.n	80079a6 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	40012c00 	.word	0x40012c00
 80079b4:	40014000 	.word	0x40014000
 80079b8:	40014400 	.word	0x40014400
 80079bc:	00010007 	.word	0x00010007

080079c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d122      	bne.n	8007a1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	f003 0302 	and.w	r3, r3, #2
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d11b      	bne.n	8007a1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f06f 0202 	mvn.w	r2, #2
 80079ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	f003 0303 	and.w	r3, r3, #3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fae3 	bl	8007fce <HAL_TIM_IC_CaptureCallback>
 8007a08:	e005      	b.n	8007a16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fad5 	bl	8007fba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fae6 	bl	8007fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f003 0304 	and.w	r3, r3, #4
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	d122      	bne.n	8007a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f003 0304 	and.w	r3, r3, #4
 8007a34:	2b04      	cmp	r3, #4
 8007a36:	d11b      	bne.n	8007a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f06f 0204 	mvn.w	r2, #4
 8007a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2202      	movs	r2, #2
 8007a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fab9 	bl	8007fce <HAL_TIM_IC_CaptureCallback>
 8007a5c:	e005      	b.n	8007a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 faab 	bl	8007fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fabc 	bl	8007fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	f003 0308 	and.w	r3, r3, #8
 8007a7a:	2b08      	cmp	r3, #8
 8007a7c:	d122      	bne.n	8007ac4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	f003 0308 	and.w	r3, r3, #8
 8007a88:	2b08      	cmp	r3, #8
 8007a8a:	d11b      	bne.n	8007ac4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f06f 0208 	mvn.w	r2, #8
 8007a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2204      	movs	r2, #4
 8007a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fa8f 	bl	8007fce <HAL_TIM_IC_CaptureCallback>
 8007ab0:	e005      	b.n	8007abe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fa81 	bl	8007fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fa92 	bl	8007fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f003 0310 	and.w	r3, r3, #16
 8007ace:	2b10      	cmp	r3, #16
 8007ad0:	d122      	bne.n	8007b18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f003 0310 	and.w	r3, r3, #16
 8007adc:	2b10      	cmp	r3, #16
 8007ade:	d11b      	bne.n	8007b18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f06f 0210 	mvn.w	r2, #16
 8007ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2208      	movs	r2, #8
 8007aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d003      	beq.n	8007b06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fa65 	bl	8007fce <HAL_TIM_IC_CaptureCallback>
 8007b04:	e005      	b.n	8007b12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fa57 	bl	8007fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fa68 	bl	8007fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d10e      	bne.n	8007b44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d107      	bne.n	8007b44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f06f 0201 	mvn.w	r2, #1
 8007b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7fa fb6e 	bl	8002220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b4e:	2b80      	cmp	r3, #128	; 0x80
 8007b50:	d10e      	bne.n	8007b70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b5c:	2b80      	cmp	r3, #128	; 0x80
 8007b5e:	d107      	bne.n	8007b70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fed8 	bl	8008920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b7e:	d10e      	bne.n	8007b9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b8a:	2b80      	cmp	r3, #128	; 0x80
 8007b8c:	d107      	bne.n	8007b9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fecb 	bl	8008934 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba8:	2b40      	cmp	r3, #64	; 0x40
 8007baa:	d10e      	bne.n	8007bca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb6:	2b40      	cmp	r3, #64	; 0x40
 8007bb8:	d107      	bne.n	8007bca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fa16 	bl	8007ff6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	f003 0320 	and.w	r3, r3, #32
 8007bd4:	2b20      	cmp	r3, #32
 8007bd6:	d10e      	bne.n	8007bf6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f003 0320 	and.w	r3, r3, #32
 8007be2:	2b20      	cmp	r3, #32
 8007be4:	d107      	bne.n	8007bf6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f06f 0220 	mvn.w	r2, #32
 8007bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fe8b 	bl	800890c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bf6:	bf00      	nop
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
	...

08007c00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d101      	bne.n	8007c1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	e0ff      	b.n	8007e1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b14      	cmp	r3, #20
 8007c2a:	f200 80f0 	bhi.w	8007e0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007c2e:	a201      	add	r2, pc, #4	; (adr r2, 8007c34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c34:	08007c89 	.word	0x08007c89
 8007c38:	08007e0f 	.word	0x08007e0f
 8007c3c:	08007e0f 	.word	0x08007e0f
 8007c40:	08007e0f 	.word	0x08007e0f
 8007c44:	08007cc9 	.word	0x08007cc9
 8007c48:	08007e0f 	.word	0x08007e0f
 8007c4c:	08007e0f 	.word	0x08007e0f
 8007c50:	08007e0f 	.word	0x08007e0f
 8007c54:	08007d0b 	.word	0x08007d0b
 8007c58:	08007e0f 	.word	0x08007e0f
 8007c5c:	08007e0f 	.word	0x08007e0f
 8007c60:	08007e0f 	.word	0x08007e0f
 8007c64:	08007d4b 	.word	0x08007d4b
 8007c68:	08007e0f 	.word	0x08007e0f
 8007c6c:	08007e0f 	.word	0x08007e0f
 8007c70:	08007e0f 	.word	0x08007e0f
 8007c74:	08007d8d 	.word	0x08007d8d
 8007c78:	08007e0f 	.word	0x08007e0f
 8007c7c:	08007e0f 	.word	0x08007e0f
 8007c80:	08007e0f 	.word	0x08007e0f
 8007c84:	08007dcd 	.word	0x08007dcd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68b9      	ldr	r1, [r7, #8]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 fa20 	bl	80080d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	699a      	ldr	r2, [r3, #24]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f042 0208 	orr.w	r2, r2, #8
 8007ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	699a      	ldr	r2, [r3, #24]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 0204 	bic.w	r2, r2, #4
 8007cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6999      	ldr	r1, [r3, #24]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	691a      	ldr	r2, [r3, #16]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	619a      	str	r2, [r3, #24]
      break;
 8007cc6:	e0a5      	b.n	8007e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68b9      	ldr	r1, [r7, #8]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 fa7c 	bl	80081cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	699a      	ldr	r2, [r3, #24]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	699a      	ldr	r2, [r3, #24]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6999      	ldr	r1, [r3, #24]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	021a      	lsls	r2, r3, #8
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	430a      	orrs	r2, r1
 8007d06:	619a      	str	r2, [r3, #24]
      break;
 8007d08:	e084      	b.n	8007e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68b9      	ldr	r1, [r7, #8]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 fad5 	bl	80082c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69da      	ldr	r2, [r3, #28]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f042 0208 	orr.w	r2, r2, #8
 8007d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	69da      	ldr	r2, [r3, #28]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f022 0204 	bic.w	r2, r2, #4
 8007d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	69d9      	ldr	r1, [r3, #28]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	691a      	ldr	r2, [r3, #16]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	61da      	str	r2, [r3, #28]
      break;
 8007d48:	e064      	b.n	8007e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68b9      	ldr	r1, [r7, #8]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 fb2d 	bl	80083b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69da      	ldr	r2, [r3, #28]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	69da      	ldr	r2, [r3, #28]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	69d9      	ldr	r1, [r3, #28]
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	021a      	lsls	r2, r3, #8
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	61da      	str	r2, [r3, #28]
      break;
 8007d8a:	e043      	b.n	8007e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68b9      	ldr	r1, [r7, #8]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 fb6a 	bl	800846c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f042 0208 	orr.w	r2, r2, #8
 8007da6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f022 0204 	bic.w	r2, r2, #4
 8007db6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	691a      	ldr	r2, [r3, #16]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007dca:	e023      	b.n	8007e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68b9      	ldr	r1, [r7, #8]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fba2 	bl	800851c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007de6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007df6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	021a      	lsls	r2, r3, #8
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007e0c:	e002      	b.n	8007e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	75fb      	strb	r3, [r7, #23]
      break;
 8007e12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop

08007e28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d101      	bne.n	8007e44 <HAL_TIM_ConfigClockSource+0x1c>
 8007e40:	2302      	movs	r3, #2
 8007e42:	e0b6      	b.n	8007fb2 <HAL_TIM_ConfigClockSource+0x18a>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e80:	d03e      	beq.n	8007f00 <HAL_TIM_ConfigClockSource+0xd8>
 8007e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e86:	f200 8087 	bhi.w	8007f98 <HAL_TIM_ConfigClockSource+0x170>
 8007e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e8e:	f000 8086 	beq.w	8007f9e <HAL_TIM_ConfigClockSource+0x176>
 8007e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e96:	d87f      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x170>
 8007e98:	2b70      	cmp	r3, #112	; 0x70
 8007e9a:	d01a      	beq.n	8007ed2 <HAL_TIM_ConfigClockSource+0xaa>
 8007e9c:	2b70      	cmp	r3, #112	; 0x70
 8007e9e:	d87b      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x170>
 8007ea0:	2b60      	cmp	r3, #96	; 0x60
 8007ea2:	d050      	beq.n	8007f46 <HAL_TIM_ConfigClockSource+0x11e>
 8007ea4:	2b60      	cmp	r3, #96	; 0x60
 8007ea6:	d877      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x170>
 8007ea8:	2b50      	cmp	r3, #80	; 0x50
 8007eaa:	d03c      	beq.n	8007f26 <HAL_TIM_ConfigClockSource+0xfe>
 8007eac:	2b50      	cmp	r3, #80	; 0x50
 8007eae:	d873      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x170>
 8007eb0:	2b40      	cmp	r3, #64	; 0x40
 8007eb2:	d058      	beq.n	8007f66 <HAL_TIM_ConfigClockSource+0x13e>
 8007eb4:	2b40      	cmp	r3, #64	; 0x40
 8007eb6:	d86f      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x170>
 8007eb8:	2b30      	cmp	r3, #48	; 0x30
 8007eba:	d064      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x15e>
 8007ebc:	2b30      	cmp	r3, #48	; 0x30
 8007ebe:	d86b      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x170>
 8007ec0:	2b20      	cmp	r3, #32
 8007ec2:	d060      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x15e>
 8007ec4:	2b20      	cmp	r3, #32
 8007ec6:	d867      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x170>
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d05c      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x15e>
 8007ecc:	2b10      	cmp	r3, #16
 8007ece:	d05a      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x15e>
 8007ed0:	e062      	b.n	8007f98 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ee2:	f000 fbef 	bl	80086c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ef4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	609a      	str	r2, [r3, #8]
      break;
 8007efe:	e04f      	b.n	8007fa0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f10:	f000 fbd8 	bl	80086c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	689a      	ldr	r2, [r3, #8]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f22:	609a      	str	r2, [r3, #8]
      break;
 8007f24:	e03c      	b.n	8007fa0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f32:	461a      	mov	r2, r3
 8007f34:	f000 fb4c 	bl	80085d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2150      	movs	r1, #80	; 0x50
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 fba5 	bl	800868e <TIM_ITRx_SetConfig>
      break;
 8007f44:	e02c      	b.n	8007fa0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f52:	461a      	mov	r2, r3
 8007f54:	f000 fb6b 	bl	800862e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2160      	movs	r1, #96	; 0x60
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 fb95 	bl	800868e <TIM_ITRx_SetConfig>
      break;
 8007f64:	e01c      	b.n	8007fa0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f72:	461a      	mov	r2, r3
 8007f74:	f000 fb2c 	bl	80085d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2140      	movs	r1, #64	; 0x40
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 fb85 	bl	800868e <TIM_ITRx_SetConfig>
      break;
 8007f84:	e00c      	b.n	8007fa0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4619      	mov	r1, r3
 8007f90:	4610      	mov	r0, r2
 8007f92:	f000 fb7c 	bl	800868e <TIM_ITRx_SetConfig>
      break;
 8007f96:	e003      	b.n	8007fa0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f9c:	e000      	b.n	8007fa0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007f9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b083      	sub	sp, #12
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fc2:	bf00      	nop
 8007fc4:	370c      	adds	r7, #12
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b083      	sub	sp, #12
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fd6:	bf00      	nop
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	b083      	sub	sp, #12
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fea:	bf00      	nop
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b083      	sub	sp, #12
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ffe:	bf00      	nop
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
	...

0800800c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a2a      	ldr	r2, [pc, #168]	; (80080c8 <TIM_Base_SetConfig+0xbc>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d003      	beq.n	800802c <TIM_Base_SetConfig+0x20>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800802a:	d108      	bne.n	800803e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	4313      	orrs	r3, r2
 800803c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a21      	ldr	r2, [pc, #132]	; (80080c8 <TIM_Base_SetConfig+0xbc>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d00b      	beq.n	800805e <TIM_Base_SetConfig+0x52>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800804c:	d007      	beq.n	800805e <TIM_Base_SetConfig+0x52>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a1e      	ldr	r2, [pc, #120]	; (80080cc <TIM_Base_SetConfig+0xc0>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d003      	beq.n	800805e <TIM_Base_SetConfig+0x52>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a1d      	ldr	r2, [pc, #116]	; (80080d0 <TIM_Base_SetConfig+0xc4>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d108      	bne.n	8008070 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	4313      	orrs	r3, r2
 800806e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	4313      	orrs	r3, r2
 800807c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	689a      	ldr	r2, [r3, #8]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a0c      	ldr	r2, [pc, #48]	; (80080c8 <TIM_Base_SetConfig+0xbc>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d007      	beq.n	80080ac <TIM_Base_SetConfig+0xa0>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a0b      	ldr	r2, [pc, #44]	; (80080cc <TIM_Base_SetConfig+0xc0>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d003      	beq.n	80080ac <TIM_Base_SetConfig+0xa0>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a0a      	ldr	r2, [pc, #40]	; (80080d0 <TIM_Base_SetConfig+0xc4>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d103      	bne.n	80080b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	691a      	ldr	r2, [r3, #16]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	615a      	str	r2, [r3, #20]
}
 80080ba:	bf00      	nop
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	40012c00 	.word	0x40012c00
 80080cc:	40014000 	.word	0x40014000
 80080d0:	40014400 	.word	0x40014400

080080d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	f023 0201 	bic.w	r2, r3, #1
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f023 0303 	bic.w	r3, r3, #3
 800810e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	4313      	orrs	r3, r2
 8008118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	f023 0302 	bic.w	r3, r3, #2
 8008120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	4313      	orrs	r3, r2
 800812a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a24      	ldr	r2, [pc, #144]	; (80081c0 <TIM_OC1_SetConfig+0xec>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d007      	beq.n	8008144 <TIM_OC1_SetConfig+0x70>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a23      	ldr	r2, [pc, #140]	; (80081c4 <TIM_OC1_SetConfig+0xf0>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d003      	beq.n	8008144 <TIM_OC1_SetConfig+0x70>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a22      	ldr	r2, [pc, #136]	; (80081c8 <TIM_OC1_SetConfig+0xf4>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d10c      	bne.n	800815e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	f023 0308 	bic.w	r3, r3, #8
 800814a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	4313      	orrs	r3, r2
 8008154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f023 0304 	bic.w	r3, r3, #4
 800815c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a17      	ldr	r2, [pc, #92]	; (80081c0 <TIM_OC1_SetConfig+0xec>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d007      	beq.n	8008176 <TIM_OC1_SetConfig+0xa2>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a16      	ldr	r2, [pc, #88]	; (80081c4 <TIM_OC1_SetConfig+0xf0>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d003      	beq.n	8008176 <TIM_OC1_SetConfig+0xa2>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a15      	ldr	r2, [pc, #84]	; (80081c8 <TIM_OC1_SetConfig+0xf4>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d111      	bne.n	800819a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800817c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	4313      	orrs	r3, r2
 800818e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	4313      	orrs	r3, r2
 8008198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	621a      	str	r2, [r3, #32]
}
 80081b4:	bf00      	nop
 80081b6:	371c      	adds	r7, #28
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	40012c00 	.word	0x40012c00
 80081c4:	40014000 	.word	0x40014000
 80081c8:	40014400 	.word	0x40014400

080081cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b087      	sub	sp, #28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	f023 0210 	bic.w	r2, r3, #16
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	021b      	lsls	r3, r3, #8
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	4313      	orrs	r3, r2
 8008212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	f023 0320 	bic.w	r3, r3, #32
 800821a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	011b      	lsls	r3, r3, #4
 8008222:	697a      	ldr	r2, [r7, #20]
 8008224:	4313      	orrs	r3, r2
 8008226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a22      	ldr	r2, [pc, #136]	; (80082b4 <TIM_OC2_SetConfig+0xe8>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d10d      	bne.n	800824c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	011b      	lsls	r3, r3, #4
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	4313      	orrs	r3, r2
 8008242:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800824a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a19      	ldr	r2, [pc, #100]	; (80082b4 <TIM_OC2_SetConfig+0xe8>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d007      	beq.n	8008264 <TIM_OC2_SetConfig+0x98>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a18      	ldr	r2, [pc, #96]	; (80082b8 <TIM_OC2_SetConfig+0xec>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d003      	beq.n	8008264 <TIM_OC2_SetConfig+0x98>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a17      	ldr	r2, [pc, #92]	; (80082bc <TIM_OC2_SetConfig+0xf0>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d113      	bne.n	800828c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800826a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008272:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	695b      	ldr	r3, [r3, #20]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	4313      	orrs	r3, r2
 800827e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	4313      	orrs	r3, r2
 800828a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	685a      	ldr	r2, [r3, #4]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	621a      	str	r2, [r3, #32]
}
 80082a6:	bf00      	nop
 80082a8:	371c      	adds	r7, #28
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	40012c00 	.word	0x40012c00
 80082b8:	40014000 	.word	0x40014000
 80082bc:	40014400 	.word	0x40014400

080082c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b087      	sub	sp, #28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a1b      	ldr	r3, [r3, #32]
 80082da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f023 0303 	bic.w	r3, r3, #3
 80082fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	4313      	orrs	r3, r2
 8008304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800830c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	021b      	lsls	r3, r3, #8
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	4313      	orrs	r3, r2
 8008318:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a21      	ldr	r2, [pc, #132]	; (80083a4 <TIM_OC3_SetConfig+0xe4>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d10d      	bne.n	800833e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008328:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	021b      	lsls	r3, r3, #8
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	4313      	orrs	r3, r2
 8008334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800833c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a18      	ldr	r2, [pc, #96]	; (80083a4 <TIM_OC3_SetConfig+0xe4>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d007      	beq.n	8008356 <TIM_OC3_SetConfig+0x96>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a17      	ldr	r2, [pc, #92]	; (80083a8 <TIM_OC3_SetConfig+0xe8>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d003      	beq.n	8008356 <TIM_OC3_SetConfig+0x96>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a16      	ldr	r2, [pc, #88]	; (80083ac <TIM_OC3_SetConfig+0xec>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d113      	bne.n	800837e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800835c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	011b      	lsls	r3, r3, #4
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	4313      	orrs	r3, r2
 8008370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	011b      	lsls	r3, r3, #4
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	4313      	orrs	r3, r2
 800837c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	621a      	str	r2, [r3, #32]
}
 8008398:	bf00      	nop
 800839a:	371c      	adds	r7, #28
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	40012c00 	.word	0x40012c00
 80083a8:	40014000 	.word	0x40014000
 80083ac:	40014400 	.word	0x40014400

080083b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	69db      	ldr	r3, [r3, #28]
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	021b      	lsls	r3, r3, #8
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	031b      	lsls	r3, r3, #12
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	4313      	orrs	r3, r2
 800840a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a14      	ldr	r2, [pc, #80]	; (8008460 <TIM_OC4_SetConfig+0xb0>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d007      	beq.n	8008424 <TIM_OC4_SetConfig+0x74>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a13      	ldr	r2, [pc, #76]	; (8008464 <TIM_OC4_SetConfig+0xb4>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d003      	beq.n	8008424 <TIM_OC4_SetConfig+0x74>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a12      	ldr	r2, [pc, #72]	; (8008468 <TIM_OC4_SetConfig+0xb8>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d109      	bne.n	8008438 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800842a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	019b      	lsls	r3, r3, #6
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	4313      	orrs	r3, r2
 8008436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	685a      	ldr	r2, [r3, #4]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	621a      	str	r2, [r3, #32]
}
 8008452:	bf00      	nop
 8008454:	371c      	adds	r7, #28
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	40012c00 	.word	0x40012c00
 8008464:	40014000 	.word	0x40014000
 8008468:	40014400 	.word	0x40014400

0800846c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800846c:	b480      	push	{r7}
 800846e:	b087      	sub	sp, #28
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800849a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800849e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80084b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	041b      	lsls	r3, r3, #16
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a13      	ldr	r2, [pc, #76]	; (8008510 <TIM_OC5_SetConfig+0xa4>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d007      	beq.n	80084d6 <TIM_OC5_SetConfig+0x6a>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a12      	ldr	r2, [pc, #72]	; (8008514 <TIM_OC5_SetConfig+0xa8>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d003      	beq.n	80084d6 <TIM_OC5_SetConfig+0x6a>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a11      	ldr	r2, [pc, #68]	; (8008518 <TIM_OC5_SetConfig+0xac>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d109      	bne.n	80084ea <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	021b      	lsls	r3, r3, #8
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	697a      	ldr	r2, [r7, #20]
 80084ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	621a      	str	r2, [r3, #32]
}
 8008504:	bf00      	nop
 8008506:	371c      	adds	r7, #28
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	40012c00 	.word	0x40012c00
 8008514:	40014000 	.word	0x40014000
 8008518:	40014400 	.word	0x40014400

0800851c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800851c:	b480      	push	{r7}
 800851e:	b087      	sub	sp, #28
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800854a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800854e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	021b      	lsls	r3, r3, #8
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	4313      	orrs	r3, r2
 800855a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	051b      	lsls	r3, r3, #20
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	4313      	orrs	r3, r2
 800856e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a14      	ldr	r2, [pc, #80]	; (80085c4 <TIM_OC6_SetConfig+0xa8>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d007      	beq.n	8008588 <TIM_OC6_SetConfig+0x6c>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a13      	ldr	r2, [pc, #76]	; (80085c8 <TIM_OC6_SetConfig+0xac>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d003      	beq.n	8008588 <TIM_OC6_SetConfig+0x6c>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a12      	ldr	r2, [pc, #72]	; (80085cc <TIM_OC6_SetConfig+0xb0>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d109      	bne.n	800859c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800858e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	695b      	ldr	r3, [r3, #20]
 8008594:	029b      	lsls	r3, r3, #10
 8008596:	697a      	ldr	r2, [r7, #20]
 8008598:	4313      	orrs	r3, r2
 800859a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	621a      	str	r2, [r3, #32]
}
 80085b6:	bf00      	nop
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	40012c00 	.word	0x40012c00
 80085c8:	40014000 	.word	0x40014000
 80085cc:	40014400 	.word	0x40014400

080085d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b087      	sub	sp, #28
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6a1b      	ldr	r3, [r3, #32]
 80085e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	f023 0201 	bic.w	r2, r3, #1
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	011b      	lsls	r3, r3, #4
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	4313      	orrs	r3, r2
 8008604:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	f023 030a 	bic.w	r3, r3, #10
 800860c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	4313      	orrs	r3, r2
 8008614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	621a      	str	r2, [r3, #32]
}
 8008622:	bf00      	nop
 8008624:	371c      	adds	r7, #28
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800862e:	b480      	push	{r7}
 8008630:	b087      	sub	sp, #28
 8008632:	af00      	add	r7, sp, #0
 8008634:	60f8      	str	r0, [r7, #12]
 8008636:	60b9      	str	r1, [r7, #8]
 8008638:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6a1b      	ldr	r3, [r3, #32]
 800863e:	f023 0210 	bic.w	r2, r3, #16
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6a1b      	ldr	r3, [r3, #32]
 8008650:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008658:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	031b      	lsls	r3, r3, #12
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	4313      	orrs	r3, r2
 8008662:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800866a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	011b      	lsls	r3, r3, #4
 8008670:	693a      	ldr	r2, [r7, #16]
 8008672:	4313      	orrs	r3, r2
 8008674:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	693a      	ldr	r2, [r7, #16]
 8008680:	621a      	str	r2, [r3, #32]
}
 8008682:	bf00      	nop
 8008684:	371c      	adds	r7, #28
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr

0800868e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800868e:	b480      	push	{r7}
 8008690:	b085      	sub	sp, #20
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	f043 0307 	orr.w	r3, r3, #7
 80086b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	609a      	str	r2, [r3, #8]
}
 80086b8:	bf00      	nop
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
 80086d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	021a      	lsls	r2, r3, #8
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	431a      	orrs	r2, r3
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	609a      	str	r2, [r3, #8]
}
 80086f8:	bf00      	nop
 80086fa:	371c      	adds	r7, #28
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008704:	b480      	push	{r7}
 8008706:	b087      	sub	sp, #28
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	f003 031f 	and.w	r3, r3, #31
 8008716:	2201      	movs	r2, #1
 8008718:	fa02 f303 	lsl.w	r3, r2, r3
 800871c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6a1a      	ldr	r2, [r3, #32]
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	43db      	mvns	r3, r3
 8008726:	401a      	ands	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6a1a      	ldr	r2, [r3, #32]
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f003 031f 	and.w	r3, r3, #31
 8008736:	6879      	ldr	r1, [r7, #4]
 8008738:	fa01 f303 	lsl.w	r3, r1, r3
 800873c:	431a      	orrs	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	621a      	str	r2, [r3, #32]
}
 8008742:	bf00      	nop
 8008744:	371c      	adds	r7, #28
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
	...

08008750 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008760:	2b01      	cmp	r3, #1
 8008762:	d101      	bne.n	8008768 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008764:	2302      	movs	r3, #2
 8008766:	e04f      	b.n	8008808 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2202      	movs	r2, #2
 8008774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a21      	ldr	r2, [pc, #132]	; (8008814 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d108      	bne.n	80087a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008798:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a14      	ldr	r2, [pc, #80]	; (8008814 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d009      	beq.n	80087dc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d0:	d004      	beq.n	80087dc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a10      	ldr	r2, [pc, #64]	; (8008818 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d10c      	bne.n	80087f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3714      	adds	r7, #20
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr
 8008814:	40012c00 	.word	0x40012c00
 8008818:	40014000 	.word	0x40014000

0800881c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008826:	2300      	movs	r3, #0
 8008828:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008830:	2b01      	cmp	r3, #1
 8008832:	d101      	bne.n	8008838 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008834:	2302      	movs	r3, #2
 8008836:	e060      	b.n	80088fa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	4313      	orrs	r3, r2
 800884c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	4313      	orrs	r3, r2
 800885a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	4313      	orrs	r3, r2
 8008868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4313      	orrs	r3, r2
 8008876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	4313      	orrs	r3, r2
 8008884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	695b      	ldr	r3, [r3, #20]
 8008890:	4313      	orrs	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889e:	4313      	orrs	r3, r2
 80088a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	041b      	lsls	r3, r3, #16
 80088ae:	4313      	orrs	r3, r2
 80088b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a14      	ldr	r2, [pc, #80]	; (8008908 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d115      	bne.n	80088e8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c6:	051b      	lsls	r3, r3, #20
 80088c8:	4313      	orrs	r3, r2
 80088ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	69db      	ldr	r3, [r3, #28]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	6a1b      	ldr	r3, [r3, #32]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3714      	adds	r7, #20
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	40012c00 	.word	0x40012c00

0800890c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008928:	bf00      	nop
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d101      	bne.n	800895a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e040      	b.n	80089dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800895e:	2b00      	cmp	r3, #0
 8008960:	d106      	bne.n	8008970 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7fb fc16 	bl	800419c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2224      	movs	r2, #36	; 0x24
 8008974:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f022 0201 	bic.w	r2, r2, #1
 8008984:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f8c0 	bl	8008b0c <UART_SetConfig>
 800898c:	4603      	mov	r3, r0
 800898e:	2b01      	cmp	r3, #1
 8008990:	d101      	bne.n	8008996 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e022      	b.n	80089dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fae0 	bl	8008f64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	685a      	ldr	r2, [r3, #4]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	689a      	ldr	r2, [r3, #8]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f042 0201 	orr.w	r2, r2, #1
 80089d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fb67 	bl	80090a8 <UART_CheckIdleState>
 80089da:	4603      	mov	r3, r0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b08a      	sub	sp, #40	; 0x28
 80089e8:	af02      	add	r7, sp, #8
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	603b      	str	r3, [r7, #0]
 80089f0:	4613      	mov	r3, r2
 80089f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089f8:	2b20      	cmp	r3, #32
 80089fa:	f040 8082 	bne.w	8008b02 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <HAL_UART_Transmit+0x26>
 8008a04:	88fb      	ldrh	r3, [r7, #6]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e07a      	b.n	8008b04 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d101      	bne.n	8008a1c <HAL_UART_Transmit+0x38>
 8008a18:	2302      	movs	r3, #2
 8008a1a:	e073      	b.n	8008b04 <HAL_UART_Transmit+0x120>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2221      	movs	r2, #33	; 0x21
 8008a30:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a32:	f7fb fc61 	bl	80042f8 <HAL_GetTick>
 8008a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	88fa      	ldrh	r2, [r7, #6]
 8008a3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	88fa      	ldrh	r2, [r7, #6]
 8008a44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a50:	d108      	bne.n	8008a64 <HAL_UART_Transmit+0x80>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d104      	bne.n	8008a64 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	61bb      	str	r3, [r7, #24]
 8008a62:	e003      	b.n	8008a6c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008a74:	e02d      	b.n	8008ad2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	2180      	movs	r1, #128	; 0x80
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f000 fb5a 	bl	800913a <UART_WaitOnFlagUntilTimeout>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d001      	beq.n	8008a90 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e039      	b.n	8008b04 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10b      	bne.n	8008aae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	881a      	ldrh	r2, [r3, #0]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008aa2:	b292      	uxth	r2, r2
 8008aa4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	3302      	adds	r3, #2
 8008aaa:	61bb      	str	r3, [r7, #24]
 8008aac:	e008      	b.n	8008ac0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	781a      	ldrb	r2, [r3, #0]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	b292      	uxth	r2, r2
 8008ab8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	3301      	adds	r3, #1
 8008abe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1cb      	bne.n	8008a76 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	2140      	movs	r1, #64	; 0x40
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f000 fb26 	bl	800913a <UART_WaitOnFlagUntilTimeout>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008af4:	2303      	movs	r3, #3
 8008af6:	e005      	b.n	8008b04 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2220      	movs	r2, #32
 8008afc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	e000      	b.n	8008b04 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008b02:	2302      	movs	r3, #2
  }
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3720      	adds	r7, #32
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b10:	b08a      	sub	sp, #40	; 0x28
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	689a      	ldr	r2, [r3, #8]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	431a      	orrs	r2, r3
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	431a      	orrs	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	4bb4      	ldr	r3, [pc, #720]	; (8008e0c <UART_SetConfig+0x300>)
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	6812      	ldr	r2, [r2, #0]
 8008b42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b44:	430b      	orrs	r3, r1
 8008b46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	68da      	ldr	r2, [r3, #12]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4aa9      	ldr	r2, [pc, #676]	; (8008e10 <UART_SetConfig+0x304>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d004      	beq.n	8008b78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6a1b      	ldr	r3, [r3, #32]
 8008b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b74:	4313      	orrs	r3, r2
 8008b76:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b88:	430a      	orrs	r2, r1
 8008b8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4aa0      	ldr	r2, [pc, #640]	; (8008e14 <UART_SetConfig+0x308>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d126      	bne.n	8008be4 <UART_SetConfig+0xd8>
 8008b96:	4ba0      	ldr	r3, [pc, #640]	; (8008e18 <UART_SetConfig+0x30c>)
 8008b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b9c:	f003 0303 	and.w	r3, r3, #3
 8008ba0:	2b03      	cmp	r3, #3
 8008ba2:	d81b      	bhi.n	8008bdc <UART_SetConfig+0xd0>
 8008ba4:	a201      	add	r2, pc, #4	; (adr r2, 8008bac <UART_SetConfig+0xa0>)
 8008ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008baa:	bf00      	nop
 8008bac:	08008bbd 	.word	0x08008bbd
 8008bb0:	08008bcd 	.word	0x08008bcd
 8008bb4:	08008bc5 	.word	0x08008bc5
 8008bb8:	08008bd5 	.word	0x08008bd5
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bc2:	e080      	b.n	8008cc6 <UART_SetConfig+0x1ba>
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bca:	e07c      	b.n	8008cc6 <UART_SetConfig+0x1ba>
 8008bcc:	2304      	movs	r3, #4
 8008bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bd2:	e078      	b.n	8008cc6 <UART_SetConfig+0x1ba>
 8008bd4:	2308      	movs	r3, #8
 8008bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bda:	e074      	b.n	8008cc6 <UART_SetConfig+0x1ba>
 8008bdc:	2310      	movs	r3, #16
 8008bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008be2:	e070      	b.n	8008cc6 <UART_SetConfig+0x1ba>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a8c      	ldr	r2, [pc, #560]	; (8008e1c <UART_SetConfig+0x310>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d138      	bne.n	8008c60 <UART_SetConfig+0x154>
 8008bee:	4b8a      	ldr	r3, [pc, #552]	; (8008e18 <UART_SetConfig+0x30c>)
 8008bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bf4:	f003 030c 	and.w	r3, r3, #12
 8008bf8:	2b0c      	cmp	r3, #12
 8008bfa:	d82d      	bhi.n	8008c58 <UART_SetConfig+0x14c>
 8008bfc:	a201      	add	r2, pc, #4	; (adr r2, 8008c04 <UART_SetConfig+0xf8>)
 8008bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c02:	bf00      	nop
 8008c04:	08008c39 	.word	0x08008c39
 8008c08:	08008c59 	.word	0x08008c59
 8008c0c:	08008c59 	.word	0x08008c59
 8008c10:	08008c59 	.word	0x08008c59
 8008c14:	08008c49 	.word	0x08008c49
 8008c18:	08008c59 	.word	0x08008c59
 8008c1c:	08008c59 	.word	0x08008c59
 8008c20:	08008c59 	.word	0x08008c59
 8008c24:	08008c41 	.word	0x08008c41
 8008c28:	08008c59 	.word	0x08008c59
 8008c2c:	08008c59 	.word	0x08008c59
 8008c30:	08008c59 	.word	0x08008c59
 8008c34:	08008c51 	.word	0x08008c51
 8008c38:	2300      	movs	r3, #0
 8008c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c3e:	e042      	b.n	8008cc6 <UART_SetConfig+0x1ba>
 8008c40:	2302      	movs	r3, #2
 8008c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c46:	e03e      	b.n	8008cc6 <UART_SetConfig+0x1ba>
 8008c48:	2304      	movs	r3, #4
 8008c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c4e:	e03a      	b.n	8008cc6 <UART_SetConfig+0x1ba>
 8008c50:	2308      	movs	r3, #8
 8008c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c56:	e036      	b.n	8008cc6 <UART_SetConfig+0x1ba>
 8008c58:	2310      	movs	r3, #16
 8008c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c5e:	e032      	b.n	8008cc6 <UART_SetConfig+0x1ba>
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a6a      	ldr	r2, [pc, #424]	; (8008e10 <UART_SetConfig+0x304>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d12a      	bne.n	8008cc0 <UART_SetConfig+0x1b4>
 8008c6a:	4b6b      	ldr	r3, [pc, #428]	; (8008e18 <UART_SetConfig+0x30c>)
 8008c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c78:	d01a      	beq.n	8008cb0 <UART_SetConfig+0x1a4>
 8008c7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c7e:	d81b      	bhi.n	8008cb8 <UART_SetConfig+0x1ac>
 8008c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c84:	d00c      	beq.n	8008ca0 <UART_SetConfig+0x194>
 8008c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c8a:	d815      	bhi.n	8008cb8 <UART_SetConfig+0x1ac>
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d003      	beq.n	8008c98 <UART_SetConfig+0x18c>
 8008c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c94:	d008      	beq.n	8008ca8 <UART_SetConfig+0x19c>
 8008c96:	e00f      	b.n	8008cb8 <UART_SetConfig+0x1ac>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c9e:	e012      	b.n	8008cc6 <UART_SetConfig+0x1ba>
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ca6:	e00e      	b.n	8008cc6 <UART_SetConfig+0x1ba>
 8008ca8:	2304      	movs	r3, #4
 8008caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cae:	e00a      	b.n	8008cc6 <UART_SetConfig+0x1ba>
 8008cb0:	2308      	movs	r3, #8
 8008cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cb6:	e006      	b.n	8008cc6 <UART_SetConfig+0x1ba>
 8008cb8:	2310      	movs	r3, #16
 8008cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cbe:	e002      	b.n	8008cc6 <UART_SetConfig+0x1ba>
 8008cc0:	2310      	movs	r3, #16
 8008cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a51      	ldr	r2, [pc, #324]	; (8008e10 <UART_SetConfig+0x304>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d17a      	bne.n	8008dc6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008cd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008cd4:	2b08      	cmp	r3, #8
 8008cd6:	d824      	bhi.n	8008d22 <UART_SetConfig+0x216>
 8008cd8:	a201      	add	r2, pc, #4	; (adr r2, 8008ce0 <UART_SetConfig+0x1d4>)
 8008cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cde:	bf00      	nop
 8008ce0:	08008d05 	.word	0x08008d05
 8008ce4:	08008d23 	.word	0x08008d23
 8008ce8:	08008d0d 	.word	0x08008d0d
 8008cec:	08008d23 	.word	0x08008d23
 8008cf0:	08008d13 	.word	0x08008d13
 8008cf4:	08008d23 	.word	0x08008d23
 8008cf8:	08008d23 	.word	0x08008d23
 8008cfc:	08008d23 	.word	0x08008d23
 8008d00:	08008d1b 	.word	0x08008d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d04:	f7fd f936 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 8008d08:	61f8      	str	r0, [r7, #28]
        break;
 8008d0a:	e010      	b.n	8008d2e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d0c:	4b44      	ldr	r3, [pc, #272]	; (8008e20 <UART_SetConfig+0x314>)
 8008d0e:	61fb      	str	r3, [r7, #28]
        break;
 8008d10:	e00d      	b.n	8008d2e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d12:	f7fd f897 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8008d16:	61f8      	str	r0, [r7, #28]
        break;
 8008d18:	e009      	b.n	8008d2e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d1e:	61fb      	str	r3, [r7, #28]
        break;
 8008d20:	e005      	b.n	8008d2e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8008d22:	2300      	movs	r3, #0
 8008d24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008d2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f000 8107 	beq.w	8008f44 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	685a      	ldr	r2, [r3, #4]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	005b      	lsls	r3, r3, #1
 8008d3e:	4413      	add	r3, r2
 8008d40:	69fa      	ldr	r2, [r7, #28]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d305      	bcc.n	8008d52 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008d4c:	69fa      	ldr	r2, [r7, #28]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d903      	bls.n	8008d5a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008d58:	e0f4      	b.n	8008f44 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	461c      	mov	r4, r3
 8008d60:	4615      	mov	r5, r2
 8008d62:	f04f 0200 	mov.w	r2, #0
 8008d66:	f04f 0300 	mov.w	r3, #0
 8008d6a:	022b      	lsls	r3, r5, #8
 8008d6c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008d70:	0222      	lsls	r2, r4, #8
 8008d72:	68f9      	ldr	r1, [r7, #12]
 8008d74:	6849      	ldr	r1, [r1, #4]
 8008d76:	0849      	lsrs	r1, r1, #1
 8008d78:	2000      	movs	r0, #0
 8008d7a:	4688      	mov	r8, r1
 8008d7c:	4681      	mov	r9, r0
 8008d7e:	eb12 0a08 	adds.w	sl, r2, r8
 8008d82:	eb43 0b09 	adc.w	fp, r3, r9
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	603b      	str	r3, [r7, #0]
 8008d8e:	607a      	str	r2, [r7, #4]
 8008d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d94:	4650      	mov	r0, sl
 8008d96:	4659      	mov	r1, fp
 8008d98:	f7f7 ff56 	bl	8000c48 <__aeabi_uldivmod>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	460b      	mov	r3, r1
 8008da0:	4613      	mov	r3, r2
 8008da2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008daa:	d308      	bcc.n	8008dbe <UART_SetConfig+0x2b2>
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008db2:	d204      	bcs.n	8008dbe <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	69ba      	ldr	r2, [r7, #24]
 8008dba:	60da      	str	r2, [r3, #12]
 8008dbc:	e0c2      	b.n	8008f44 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008dc4:	e0be      	b.n	8008f44 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	69db      	ldr	r3, [r3, #28]
 8008dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dce:	d16a      	bne.n	8008ea6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8008dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008dd4:	2b08      	cmp	r3, #8
 8008dd6:	d834      	bhi.n	8008e42 <UART_SetConfig+0x336>
 8008dd8:	a201      	add	r2, pc, #4	; (adr r2, 8008de0 <UART_SetConfig+0x2d4>)
 8008dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dde:	bf00      	nop
 8008de0:	08008e05 	.word	0x08008e05
 8008de4:	08008e25 	.word	0x08008e25
 8008de8:	08008e2d 	.word	0x08008e2d
 8008dec:	08008e43 	.word	0x08008e43
 8008df0:	08008e33 	.word	0x08008e33
 8008df4:	08008e43 	.word	0x08008e43
 8008df8:	08008e43 	.word	0x08008e43
 8008dfc:	08008e43 	.word	0x08008e43
 8008e00:	08008e3b 	.word	0x08008e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e04:	f7fd f8b6 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 8008e08:	61f8      	str	r0, [r7, #28]
        break;
 8008e0a:	e020      	b.n	8008e4e <UART_SetConfig+0x342>
 8008e0c:	efff69f3 	.word	0xefff69f3
 8008e10:	40008000 	.word	0x40008000
 8008e14:	40013800 	.word	0x40013800
 8008e18:	40021000 	.word	0x40021000
 8008e1c:	40004400 	.word	0x40004400
 8008e20:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e24:	f7fd f8bc 	bl	8005fa0 <HAL_RCC_GetPCLK2Freq>
 8008e28:	61f8      	str	r0, [r7, #28]
        break;
 8008e2a:	e010      	b.n	8008e4e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e2c:	4b4c      	ldr	r3, [pc, #304]	; (8008f60 <UART_SetConfig+0x454>)
 8008e2e:	61fb      	str	r3, [r7, #28]
        break;
 8008e30:	e00d      	b.n	8008e4e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e32:	f7fd f807 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8008e36:	61f8      	str	r0, [r7, #28]
        break;
 8008e38:	e009      	b.n	8008e4e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e3e:	61fb      	str	r3, [r7, #28]
        break;
 8008e40:	e005      	b.n	8008e4e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8008e42:	2300      	movs	r3, #0
 8008e44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008e4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d077      	beq.n	8008f44 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	005a      	lsls	r2, r3, #1
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	085b      	lsrs	r3, r3, #1
 8008e5e:	441a      	add	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e68:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	2b0f      	cmp	r3, #15
 8008e6e:	d916      	bls.n	8008e9e <UART_SetConfig+0x392>
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e76:	d212      	bcs.n	8008e9e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	f023 030f 	bic.w	r3, r3, #15
 8008e80:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	085b      	lsrs	r3, r3, #1
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	f003 0307 	and.w	r3, r3, #7
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	8afb      	ldrh	r3, [r7, #22]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	8afa      	ldrh	r2, [r7, #22]
 8008e9a:	60da      	str	r2, [r3, #12]
 8008e9c:	e052      	b.n	8008f44 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008ea4:	e04e      	b.n	8008f44 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ea6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008eaa:	2b08      	cmp	r3, #8
 8008eac:	d827      	bhi.n	8008efe <UART_SetConfig+0x3f2>
 8008eae:	a201      	add	r2, pc, #4	; (adr r2, 8008eb4 <UART_SetConfig+0x3a8>)
 8008eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb4:	08008ed9 	.word	0x08008ed9
 8008eb8:	08008ee1 	.word	0x08008ee1
 8008ebc:	08008ee9 	.word	0x08008ee9
 8008ec0:	08008eff 	.word	0x08008eff
 8008ec4:	08008eef 	.word	0x08008eef
 8008ec8:	08008eff 	.word	0x08008eff
 8008ecc:	08008eff 	.word	0x08008eff
 8008ed0:	08008eff 	.word	0x08008eff
 8008ed4:	08008ef7 	.word	0x08008ef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ed8:	f7fd f84c 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 8008edc:	61f8      	str	r0, [r7, #28]
        break;
 8008ede:	e014      	b.n	8008f0a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ee0:	f7fd f85e 	bl	8005fa0 <HAL_RCC_GetPCLK2Freq>
 8008ee4:	61f8      	str	r0, [r7, #28]
        break;
 8008ee6:	e010      	b.n	8008f0a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ee8:	4b1d      	ldr	r3, [pc, #116]	; (8008f60 <UART_SetConfig+0x454>)
 8008eea:	61fb      	str	r3, [r7, #28]
        break;
 8008eec:	e00d      	b.n	8008f0a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008eee:	f7fc ffa9 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8008ef2:	61f8      	str	r0, [r7, #28]
        break;
 8008ef4:	e009      	b.n	8008f0a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008efa:	61fb      	str	r3, [r7, #28]
        break;
 8008efc:	e005      	b.n	8008f0a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8008efe:	2300      	movs	r3, #0
 8008f00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008f08:	bf00      	nop
    }

    if (pclk != 0U)
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d019      	beq.n	8008f44 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	085a      	lsrs	r2, r3, #1
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	441a      	add	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f22:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	2b0f      	cmp	r3, #15
 8008f28:	d909      	bls.n	8008f3e <UART_SetConfig+0x432>
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f30:	d205      	bcs.n	8008f3e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	60da      	str	r2, [r3, #12]
 8008f3c:	e002      	b.n	8008f44 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008f50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3728      	adds	r7, #40	; 0x28
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f5e:	bf00      	nop
 8008f60:	00f42400 	.word	0x00f42400

08008f64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f70:	f003 0301 	and.w	r3, r3, #1
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00a      	beq.n	8008f8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	430a      	orrs	r2, r1
 8008f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f92:	f003 0302 	and.w	r3, r3, #2
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00a      	beq.n	8008fb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	430a      	orrs	r2, r1
 8008fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb4:	f003 0304 	and.w	r3, r3, #4
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00a      	beq.n	8008fd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	430a      	orrs	r2, r1
 8008fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd6:	f003 0308 	and.w	r3, r3, #8
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00a      	beq.n	8008ff4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	430a      	orrs	r2, r1
 8008ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff8:	f003 0310 	and.w	r3, r3, #16
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00a      	beq.n	8009016 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	430a      	orrs	r2, r1
 8009014:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901a:	f003 0320 	and.w	r3, r3, #32
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00a      	beq.n	8009038 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	430a      	orrs	r2, r1
 8009036:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009040:	2b00      	cmp	r3, #0
 8009042:	d01a      	beq.n	800907a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	430a      	orrs	r2, r1
 8009058:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009062:	d10a      	bne.n	800907a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00a      	beq.n	800909c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	430a      	orrs	r2, r1
 800909a:	605a      	str	r2, [r3, #4]
  }
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	af02      	add	r7, sp, #8
 80090ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090b8:	f7fb f91e 	bl	80042f8 <HAL_GetTick>
 80090bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0308 	and.w	r3, r3, #8
 80090c8:	2b08      	cmp	r3, #8
 80090ca:	d10e      	bne.n	80090ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f82d 	bl	800913a <UART_WaitOnFlagUntilTimeout>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e023      	b.n	8009132 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0304 	and.w	r3, r3, #4
 80090f4:	2b04      	cmp	r3, #4
 80090f6:	d10e      	bne.n	8009116 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2200      	movs	r2, #0
 8009102:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f817 	bl	800913a <UART_WaitOnFlagUntilTimeout>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d001      	beq.n	8009116 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e00d      	b.n	8009132 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2220      	movs	r2, #32
 800911a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2220      	movs	r2, #32
 8009120:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b09c      	sub	sp, #112	; 0x70
 800913e:	af00      	add	r7, sp, #0
 8009140:	60f8      	str	r0, [r7, #12]
 8009142:	60b9      	str	r1, [r7, #8]
 8009144:	603b      	str	r3, [r7, #0]
 8009146:	4613      	mov	r3, r2
 8009148:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800914a:	e0a5      	b.n	8009298 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800914c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800914e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009152:	f000 80a1 	beq.w	8009298 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009156:	f7fb f8cf 	bl	80042f8 <HAL_GetTick>
 800915a:	4602      	mov	r2, r0
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009162:	429a      	cmp	r2, r3
 8009164:	d302      	bcc.n	800916c <UART_WaitOnFlagUntilTimeout+0x32>
 8009166:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009168:	2b00      	cmp	r3, #0
 800916a:	d13e      	bne.n	80091ea <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009174:	e853 3f00 	ldrex	r3, [r3]
 8009178:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800917a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800917c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009180:	667b      	str	r3, [r7, #100]	; 0x64
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800918a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800918c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009190:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009192:	e841 2300 	strex	r3, r2, [r1]
 8009196:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1e6      	bne.n	800916c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	3308      	adds	r3, #8
 80091a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091a8:	e853 3f00 	ldrex	r3, [r3]
 80091ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b0:	f023 0301 	bic.w	r3, r3, #1
 80091b4:	663b      	str	r3, [r7, #96]	; 0x60
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3308      	adds	r3, #8
 80091bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80091be:	64ba      	str	r2, [r7, #72]	; 0x48
 80091c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091c6:	e841 2300 	strex	r3, r2, [r1]
 80091ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80091cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1e5      	bne.n	800919e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2220      	movs	r2, #32
 80091d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2220      	movs	r2, #32
 80091dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e067      	b.n	80092ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 0304 	and.w	r3, r3, #4
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d04f      	beq.n	8009298 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	69db      	ldr	r3, [r3, #28]
 80091fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009206:	d147      	bne.n	8009298 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009210:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921a:	e853 3f00 	ldrex	r3, [r3]
 800921e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009222:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009226:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	461a      	mov	r2, r3
 800922e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009230:	637b      	str	r3, [r7, #52]	; 0x34
 8009232:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009234:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009238:	e841 2300 	strex	r3, r2, [r1]
 800923c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800923e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1e6      	bne.n	8009212 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	3308      	adds	r3, #8
 800924a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	e853 3f00 	ldrex	r3, [r3]
 8009252:	613b      	str	r3, [r7, #16]
   return(result);
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	f023 0301 	bic.w	r3, r3, #1
 800925a:	66bb      	str	r3, [r7, #104]	; 0x68
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	3308      	adds	r3, #8
 8009262:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009264:	623a      	str	r2, [r7, #32]
 8009266:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009268:	69f9      	ldr	r1, [r7, #28]
 800926a:	6a3a      	ldr	r2, [r7, #32]
 800926c:	e841 2300 	strex	r3, r2, [r1]
 8009270:	61bb      	str	r3, [r7, #24]
   return(result);
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1e5      	bne.n	8009244 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2220      	movs	r2, #32
 800927c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2220      	movs	r2, #32
 8009282:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2220      	movs	r2, #32
 8009288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e010      	b.n	80092ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	69da      	ldr	r2, [r3, #28]
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	4013      	ands	r3, r2
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	bf0c      	ite	eq
 80092a8:	2301      	moveq	r3, #1
 80092aa:	2300      	movne	r3, #0
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	461a      	mov	r2, r3
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	f43f af4a 	beq.w	800914c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3770      	adds	r7, #112	; 0x70
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
	...

080092c4 <__NVIC_SetPriority>:
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	4603      	mov	r3, r0
 80092cc:	6039      	str	r1, [r7, #0]
 80092ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	db0a      	blt.n	80092ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	b2da      	uxtb	r2, r3
 80092dc:	490c      	ldr	r1, [pc, #48]	; (8009310 <__NVIC_SetPriority+0x4c>)
 80092de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092e2:	0112      	lsls	r2, r2, #4
 80092e4:	b2d2      	uxtb	r2, r2
 80092e6:	440b      	add	r3, r1
 80092e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80092ec:	e00a      	b.n	8009304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	4908      	ldr	r1, [pc, #32]	; (8009314 <__NVIC_SetPriority+0x50>)
 80092f4:	79fb      	ldrb	r3, [r7, #7]
 80092f6:	f003 030f 	and.w	r3, r3, #15
 80092fa:	3b04      	subs	r3, #4
 80092fc:	0112      	lsls	r2, r2, #4
 80092fe:	b2d2      	uxtb	r2, r2
 8009300:	440b      	add	r3, r1
 8009302:	761a      	strb	r2, [r3, #24]
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr
 8009310:	e000e100 	.word	0xe000e100
 8009314:	e000ed00 	.word	0xe000ed00

08009318 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009318:	b580      	push	{r7, lr}
 800931a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800931c:	4b05      	ldr	r3, [pc, #20]	; (8009334 <SysTick_Handler+0x1c>)
 800931e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009320:	f002 f970 	bl	800b604 <xTaskGetSchedulerState>
 8009324:	4603      	mov	r3, r0
 8009326:	2b01      	cmp	r3, #1
 8009328:	d001      	beq.n	800932e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800932a:	f002 ff55 	bl	800c1d8 <xPortSysTickHandler>
  }
}
 800932e:	bf00      	nop
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	e000e010 	.word	0xe000e010

08009338 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009338:	b580      	push	{r7, lr}
 800933a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800933c:	2100      	movs	r1, #0
 800933e:	f06f 0004 	mvn.w	r0, #4
 8009342:	f7ff ffbf 	bl	80092c4 <__NVIC_SetPriority>
#endif
}
 8009346:	bf00      	nop
 8009348:	bd80      	pop	{r7, pc}
	...

0800934c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009352:	f3ef 8305 	mrs	r3, IPSR
 8009356:	603b      	str	r3, [r7, #0]
  return(result);
 8009358:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800935a:	2b00      	cmp	r3, #0
 800935c:	d003      	beq.n	8009366 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800935e:	f06f 0305 	mvn.w	r3, #5
 8009362:	607b      	str	r3, [r7, #4]
 8009364:	e00c      	b.n	8009380 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009366:	4b0a      	ldr	r3, [pc, #40]	; (8009390 <osKernelInitialize+0x44>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d105      	bne.n	800937a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800936e:	4b08      	ldr	r3, [pc, #32]	; (8009390 <osKernelInitialize+0x44>)
 8009370:	2201      	movs	r2, #1
 8009372:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009374:	2300      	movs	r3, #0
 8009376:	607b      	str	r3, [r7, #4]
 8009378:	e002      	b.n	8009380 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800937a:	f04f 33ff 	mov.w	r3, #4294967295
 800937e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009380:	687b      	ldr	r3, [r7, #4]
}
 8009382:	4618      	mov	r0, r3
 8009384:	370c      	adds	r7, #12
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	200006fc 	.word	0x200006fc

08009394 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800939a:	f3ef 8305 	mrs	r3, IPSR
 800939e:	603b      	str	r3, [r7, #0]
  return(result);
 80093a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d003      	beq.n	80093ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80093a6:	f06f 0305 	mvn.w	r3, #5
 80093aa:	607b      	str	r3, [r7, #4]
 80093ac:	e010      	b.n	80093d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80093ae:	4b0b      	ldr	r3, [pc, #44]	; (80093dc <osKernelStart+0x48>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d109      	bne.n	80093ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80093b6:	f7ff ffbf 	bl	8009338 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80093ba:	4b08      	ldr	r3, [pc, #32]	; (80093dc <osKernelStart+0x48>)
 80093bc:	2202      	movs	r2, #2
 80093be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80093c0:	f001 fcbc 	bl	800ad3c <vTaskStartScheduler>
      stat = osOK;
 80093c4:	2300      	movs	r3, #0
 80093c6:	607b      	str	r3, [r7, #4]
 80093c8:	e002      	b.n	80093d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80093ca:	f04f 33ff 	mov.w	r3, #4294967295
 80093ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80093d0:	687b      	ldr	r3, [r7, #4]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3708      	adds	r7, #8
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	200006fc 	.word	0x200006fc

080093e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b08e      	sub	sp, #56	; 0x38
 80093e4:	af04      	add	r7, sp, #16
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80093ec:	2300      	movs	r3, #0
 80093ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093f0:	f3ef 8305 	mrs	r3, IPSR
 80093f4:	617b      	str	r3, [r7, #20]
  return(result);
 80093f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d17e      	bne.n	80094fa <osThreadNew+0x11a>
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d07b      	beq.n	80094fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009402:	2380      	movs	r3, #128	; 0x80
 8009404:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009406:	2318      	movs	r3, #24
 8009408:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800940a:	2300      	movs	r3, #0
 800940c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800940e:	f04f 33ff 	mov.w	r3, #4294967295
 8009412:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d045      	beq.n	80094a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d002      	beq.n	8009428 <osThreadNew+0x48>
        name = attr->name;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d008      	beq.n	800944e <osThreadNew+0x6e>
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	2b38      	cmp	r3, #56	; 0x38
 8009440:	d805      	bhi.n	800944e <osThreadNew+0x6e>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	f003 0301 	and.w	r3, r3, #1
 800944a:	2b00      	cmp	r3, #0
 800944c:	d001      	beq.n	8009452 <osThreadNew+0x72>
        return (NULL);
 800944e:	2300      	movs	r3, #0
 8009450:	e054      	b.n	80094fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d003      	beq.n	8009462 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	695b      	ldr	r3, [r3, #20]
 800945e:	089b      	lsrs	r3, r3, #2
 8009460:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00e      	beq.n	8009488 <osThreadNew+0xa8>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	2b5f      	cmp	r3, #95	; 0x5f
 8009470:	d90a      	bls.n	8009488 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009476:	2b00      	cmp	r3, #0
 8009478:	d006      	beq.n	8009488 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	695b      	ldr	r3, [r3, #20]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d002      	beq.n	8009488 <osThreadNew+0xa8>
        mem = 1;
 8009482:	2301      	movs	r3, #1
 8009484:	61bb      	str	r3, [r7, #24]
 8009486:	e010      	b.n	80094aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10c      	bne.n	80094aa <osThreadNew+0xca>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d108      	bne.n	80094aa <osThreadNew+0xca>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d104      	bne.n	80094aa <osThreadNew+0xca>
          mem = 0;
 80094a0:	2300      	movs	r3, #0
 80094a2:	61bb      	str	r3, [r7, #24]
 80094a4:	e001      	b.n	80094aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80094a6:	2300      	movs	r3, #0
 80094a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d110      	bne.n	80094d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80094b8:	9202      	str	r2, [sp, #8]
 80094ba:	9301      	str	r3, [sp, #4]
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	6a3a      	ldr	r2, [r7, #32]
 80094c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f001 fa60 	bl	800a98c <xTaskCreateStatic>
 80094cc:	4603      	mov	r3, r0
 80094ce:	613b      	str	r3, [r7, #16]
 80094d0:	e013      	b.n	80094fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d110      	bne.n	80094fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80094d8:	6a3b      	ldr	r3, [r7, #32]
 80094da:	b29a      	uxth	r2, r3
 80094dc:	f107 0310 	add.w	r3, r7, #16
 80094e0:	9301      	str	r3, [sp, #4]
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f001 faab 	bl	800aa46 <xTaskCreate>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d001      	beq.n	80094fa <osThreadNew+0x11a>
            hTask = NULL;
 80094f6:	2300      	movs	r3, #0
 80094f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80094fa:	693b      	ldr	r3, [r7, #16]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3728      	adds	r7, #40	; 0x28
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800950c:	f3ef 8305 	mrs	r3, IPSR
 8009510:	60bb      	str	r3, [r7, #8]
  return(result);
 8009512:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009514:	2b00      	cmp	r3, #0
 8009516:	d003      	beq.n	8009520 <osDelay+0x1c>
    stat = osErrorISR;
 8009518:	f06f 0305 	mvn.w	r3, #5
 800951c:	60fb      	str	r3, [r7, #12]
 800951e:	e007      	b.n	8009530 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009520:	2300      	movs	r3, #0
 8009522:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d002      	beq.n	8009530 <osDelay+0x2c>
      vTaskDelay(ticks);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f001 fbd2 	bl	800acd4 <vTaskDelay>
    }
  }

  return (stat);
 8009530:	68fb      	ldr	r3, [r7, #12]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800953a:	b580      	push	{r7, lr}
 800953c:	b08a      	sub	sp, #40	; 0x28
 800953e:	af02      	add	r7, sp, #8
 8009540:	60f8      	str	r0, [r7, #12]
 8009542:	60b9      	str	r1, [r7, #8]
 8009544:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009546:	2300      	movs	r3, #0
 8009548:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800954a:	f3ef 8305 	mrs	r3, IPSR
 800954e:	613b      	str	r3, [r7, #16]
  return(result);
 8009550:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009552:	2b00      	cmp	r3, #0
 8009554:	d175      	bne.n	8009642 <osSemaphoreNew+0x108>
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d072      	beq.n	8009642 <osSemaphoreNew+0x108>
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	429a      	cmp	r2, r3
 8009562:	d86e      	bhi.n	8009642 <osSemaphoreNew+0x108>
    mem = -1;
 8009564:	f04f 33ff 	mov.w	r3, #4294967295
 8009568:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d015      	beq.n	800959c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d006      	beq.n	8009586 <osSemaphoreNew+0x4c>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	2b4f      	cmp	r3, #79	; 0x4f
 800957e:	d902      	bls.n	8009586 <osSemaphoreNew+0x4c>
        mem = 1;
 8009580:	2301      	movs	r3, #1
 8009582:	61bb      	str	r3, [r7, #24]
 8009584:	e00c      	b.n	80095a0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d108      	bne.n	80095a0 <osSemaphoreNew+0x66>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d104      	bne.n	80095a0 <osSemaphoreNew+0x66>
          mem = 0;
 8009596:	2300      	movs	r3, #0
 8009598:	61bb      	str	r3, [r7, #24]
 800959a:	e001      	b.n	80095a0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800959c:	2300      	movs	r3, #0
 800959e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a6:	d04c      	beq.n	8009642 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d128      	bne.n	8009600 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d10a      	bne.n	80095ca <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	2203      	movs	r2, #3
 80095ba:	9200      	str	r2, [sp, #0]
 80095bc:	2200      	movs	r2, #0
 80095be:	2100      	movs	r1, #0
 80095c0:	2001      	movs	r0, #1
 80095c2:	f000 fb3f 	bl	8009c44 <xQueueGenericCreateStatic>
 80095c6:	61f8      	str	r0, [r7, #28]
 80095c8:	e005      	b.n	80095d6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80095ca:	2203      	movs	r2, #3
 80095cc:	2100      	movs	r1, #0
 80095ce:	2001      	movs	r0, #1
 80095d0:	f000 fbb0 	bl	8009d34 <xQueueGenericCreate>
 80095d4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d022      	beq.n	8009622 <osSemaphoreNew+0xe8>
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d01f      	beq.n	8009622 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80095e2:	2300      	movs	r3, #0
 80095e4:	2200      	movs	r2, #0
 80095e6:	2100      	movs	r1, #0
 80095e8:	69f8      	ldr	r0, [r7, #28]
 80095ea:	f000 fc6b 	bl	8009ec4 <xQueueGenericSend>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d016      	beq.n	8009622 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80095f4:	69f8      	ldr	r0, [r7, #28]
 80095f6:	f001 f80e 	bl	800a616 <vQueueDelete>
            hSemaphore = NULL;
 80095fa:	2300      	movs	r3, #0
 80095fc:	61fb      	str	r3, [r7, #28]
 80095fe:	e010      	b.n	8009622 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	2b01      	cmp	r3, #1
 8009604:	d108      	bne.n	8009618 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	461a      	mov	r2, r3
 800960c:	68b9      	ldr	r1, [r7, #8]
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f000 fbed 	bl	8009dee <xQueueCreateCountingSemaphoreStatic>
 8009614:	61f8      	str	r0, [r7, #28]
 8009616:	e004      	b.n	8009622 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009618:	68b9      	ldr	r1, [r7, #8]
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f000 fc1e 	bl	8009e5c <xQueueCreateCountingSemaphore>
 8009620:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00c      	beq.n	8009642 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d003      	beq.n	8009636 <osSemaphoreNew+0xfc>
          name = attr->name;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	617b      	str	r3, [r7, #20]
 8009634:	e001      	b.n	800963a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009636:	2300      	movs	r3, #0
 8009638:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800963a:	6979      	ldr	r1, [r7, #20]
 800963c:	69f8      	ldr	r0, [r7, #28]
 800963e:	f001 f91d 	bl	800a87c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009642:	69fb      	ldr	r3, [r7, #28]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3720      	adds	r7, #32
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800964c:	b580      	push	{r7, lr}
 800964e:	b086      	sub	sp, #24
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009658:	2300      	movs	r3, #0
 800965a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d103      	bne.n	800966a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009662:	f06f 0303 	mvn.w	r3, #3
 8009666:	617b      	str	r3, [r7, #20]
 8009668:	e02c      	b.n	80096c4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800966a:	f3ef 8305 	mrs	r3, IPSR
 800966e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009670:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009672:	2b00      	cmp	r3, #0
 8009674:	d01a      	beq.n	80096ac <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009676:	2300      	movs	r3, #0
 8009678:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800967a:	f107 0308 	add.w	r3, r7, #8
 800967e:	4619      	mov	r1, r3
 8009680:	6938      	ldr	r0, [r7, #16]
 8009682:	f000 fdb8 	bl	800a1f6 <xQueueGiveFromISR>
 8009686:	4603      	mov	r3, r0
 8009688:	2b01      	cmp	r3, #1
 800968a:	d003      	beq.n	8009694 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800968c:	f06f 0302 	mvn.w	r3, #2
 8009690:	617b      	str	r3, [r7, #20]
 8009692:	e017      	b.n	80096c4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d014      	beq.n	80096c4 <osSemaphoreRelease+0x78>
 800969a:	4b0d      	ldr	r3, [pc, #52]	; (80096d0 <osSemaphoreRelease+0x84>)
 800969c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096a0:	601a      	str	r2, [r3, #0]
 80096a2:	f3bf 8f4f 	dsb	sy
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	e00b      	b.n	80096c4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80096ac:	2300      	movs	r3, #0
 80096ae:	2200      	movs	r2, #0
 80096b0:	2100      	movs	r1, #0
 80096b2:	6938      	ldr	r0, [r7, #16]
 80096b4:	f000 fc06 	bl	8009ec4 <xQueueGenericSend>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d002      	beq.n	80096c4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80096be:	f06f 0302 	mvn.w	r3, #2
 80096c2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80096c4:	697b      	ldr	r3, [r7, #20]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	e000ed04 	.word	0xe000ed04

080096d4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b08a      	sub	sp, #40	; 0x28
 80096d8:	af02      	add	r7, sp, #8
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80096e0:	2300      	movs	r3, #0
 80096e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096e4:	f3ef 8305 	mrs	r3, IPSR
 80096e8:	613b      	str	r3, [r7, #16]
  return(result);
 80096ea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d15f      	bne.n	80097b0 <osMessageQueueNew+0xdc>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d05c      	beq.n	80097b0 <osMessageQueueNew+0xdc>
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d059      	beq.n	80097b0 <osMessageQueueNew+0xdc>
    mem = -1;
 80096fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009700:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d029      	beq.n	800975c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d012      	beq.n	8009736 <osMessageQueueNew+0x62>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	2b4f      	cmp	r3, #79	; 0x4f
 8009716:	d90e      	bls.n	8009736 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00a      	beq.n	8009736 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	695a      	ldr	r2, [r3, #20]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	68b9      	ldr	r1, [r7, #8]
 8009728:	fb01 f303 	mul.w	r3, r1, r3
 800972c:	429a      	cmp	r2, r3
 800972e:	d302      	bcc.n	8009736 <osMessageQueueNew+0x62>
        mem = 1;
 8009730:	2301      	movs	r3, #1
 8009732:	61bb      	str	r3, [r7, #24]
 8009734:	e014      	b.n	8009760 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d110      	bne.n	8009760 <osMessageQueueNew+0x8c>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d10c      	bne.n	8009760 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800974a:	2b00      	cmp	r3, #0
 800974c:	d108      	bne.n	8009760 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d104      	bne.n	8009760 <osMessageQueueNew+0x8c>
          mem = 0;
 8009756:	2300      	movs	r3, #0
 8009758:	61bb      	str	r3, [r7, #24]
 800975a:	e001      	b.n	8009760 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800975c:	2300      	movs	r3, #0
 800975e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d10b      	bne.n	800977e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	691a      	ldr	r2, [r3, #16]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	2100      	movs	r1, #0
 8009770:	9100      	str	r1, [sp, #0]
 8009772:	68b9      	ldr	r1, [r7, #8]
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f000 fa65 	bl	8009c44 <xQueueGenericCreateStatic>
 800977a:	61f8      	str	r0, [r7, #28]
 800977c:	e008      	b.n	8009790 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d105      	bne.n	8009790 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009784:	2200      	movs	r2, #0
 8009786:	68b9      	ldr	r1, [r7, #8]
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f000 fad3 	bl	8009d34 <xQueueGenericCreate>
 800978e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00c      	beq.n	80097b0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d003      	beq.n	80097a4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	617b      	str	r3, [r7, #20]
 80097a2:	e001      	b.n	80097a8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80097a4:	2300      	movs	r3, #0
 80097a6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80097a8:	6979      	ldr	r1, [r7, #20]
 80097aa:	69f8      	ldr	r0, [r7, #28]
 80097ac:	f001 f866 	bl	800a87c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80097b0:	69fb      	ldr	r3, [r7, #28]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3720      	adds	r7, #32
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
	...

080097bc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80097bc:	b580      	push	{r7, lr}
 80097be:	b088      	sub	sp, #32
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	603b      	str	r3, [r7, #0]
 80097c8:	4613      	mov	r3, r2
 80097ca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80097d0:	2300      	movs	r3, #0
 80097d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097d4:	f3ef 8305 	mrs	r3, IPSR
 80097d8:	617b      	str	r3, [r7, #20]
  return(result);
 80097da:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d028      	beq.n	8009832 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d005      	beq.n	80097f2 <osMessageQueuePut+0x36>
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d002      	beq.n	80097f2 <osMessageQueuePut+0x36>
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d003      	beq.n	80097fa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80097f2:	f06f 0303 	mvn.w	r3, #3
 80097f6:	61fb      	str	r3, [r7, #28]
 80097f8:	e038      	b.n	800986c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80097fa:	2300      	movs	r3, #0
 80097fc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80097fe:	f107 0210 	add.w	r2, r7, #16
 8009802:	2300      	movs	r3, #0
 8009804:	68b9      	ldr	r1, [r7, #8]
 8009806:	69b8      	ldr	r0, [r7, #24]
 8009808:	f000 fc5a 	bl	800a0c0 <xQueueGenericSendFromISR>
 800980c:	4603      	mov	r3, r0
 800980e:	2b01      	cmp	r3, #1
 8009810:	d003      	beq.n	800981a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009812:	f06f 0302 	mvn.w	r3, #2
 8009816:	61fb      	str	r3, [r7, #28]
 8009818:	e028      	b.n	800986c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d025      	beq.n	800986c <osMessageQueuePut+0xb0>
 8009820:	4b15      	ldr	r3, [pc, #84]	; (8009878 <osMessageQueuePut+0xbc>)
 8009822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	f3bf 8f4f 	dsb	sy
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	e01c      	b.n	800986c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d002      	beq.n	800983e <osMessageQueuePut+0x82>
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d103      	bne.n	8009846 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800983e:	f06f 0303 	mvn.w	r3, #3
 8009842:	61fb      	str	r3, [r7, #28]
 8009844:	e012      	b.n	800986c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009846:	2300      	movs	r3, #0
 8009848:	683a      	ldr	r2, [r7, #0]
 800984a:	68b9      	ldr	r1, [r7, #8]
 800984c:	69b8      	ldr	r0, [r7, #24]
 800984e:	f000 fb39 	bl	8009ec4 <xQueueGenericSend>
 8009852:	4603      	mov	r3, r0
 8009854:	2b01      	cmp	r3, #1
 8009856:	d009      	beq.n	800986c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d003      	beq.n	8009866 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800985e:	f06f 0301 	mvn.w	r3, #1
 8009862:	61fb      	str	r3, [r7, #28]
 8009864:	e002      	b.n	800986c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009866:	f06f 0302 	mvn.w	r3, #2
 800986a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800986c:	69fb      	ldr	r3, [r7, #28]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3720      	adds	r7, #32
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	e000ed04 	.word	0xe000ed04

0800987c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800987c:	b580      	push	{r7, lr}
 800987e:	b088      	sub	sp, #32
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800988e:	2300      	movs	r3, #0
 8009890:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009892:	f3ef 8305 	mrs	r3, IPSR
 8009896:	617b      	str	r3, [r7, #20]
  return(result);
 8009898:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800989a:	2b00      	cmp	r3, #0
 800989c:	d028      	beq.n	80098f0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d005      	beq.n	80098b0 <osMessageQueueGet+0x34>
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d002      	beq.n	80098b0 <osMessageQueueGet+0x34>
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d003      	beq.n	80098b8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80098b0:	f06f 0303 	mvn.w	r3, #3
 80098b4:	61fb      	str	r3, [r7, #28]
 80098b6:	e037      	b.n	8009928 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80098b8:	2300      	movs	r3, #0
 80098ba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80098bc:	f107 0310 	add.w	r3, r7, #16
 80098c0:	461a      	mov	r2, r3
 80098c2:	68b9      	ldr	r1, [r7, #8]
 80098c4:	69b8      	ldr	r0, [r7, #24]
 80098c6:	f000 fe03 	bl	800a4d0 <xQueueReceiveFromISR>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d003      	beq.n	80098d8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80098d0:	f06f 0302 	mvn.w	r3, #2
 80098d4:	61fb      	str	r3, [r7, #28]
 80098d6:	e027      	b.n	8009928 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d024      	beq.n	8009928 <osMessageQueueGet+0xac>
 80098de:	4b15      	ldr	r3, [pc, #84]	; (8009934 <osMessageQueueGet+0xb8>)
 80098e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098e4:	601a      	str	r2, [r3, #0]
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	f3bf 8f6f 	isb	sy
 80098ee:	e01b      	b.n	8009928 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d002      	beq.n	80098fc <osMessageQueueGet+0x80>
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d103      	bne.n	8009904 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80098fc:	f06f 0303 	mvn.w	r3, #3
 8009900:	61fb      	str	r3, [r7, #28]
 8009902:	e011      	b.n	8009928 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009904:	683a      	ldr	r2, [r7, #0]
 8009906:	68b9      	ldr	r1, [r7, #8]
 8009908:	69b8      	ldr	r0, [r7, #24]
 800990a:	f000 fd01 	bl	800a310 <xQueueReceive>
 800990e:	4603      	mov	r3, r0
 8009910:	2b01      	cmp	r3, #1
 8009912:	d009      	beq.n	8009928 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d003      	beq.n	8009922 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800991a:	f06f 0301 	mvn.w	r3, #1
 800991e:	61fb      	str	r3, [r7, #28]
 8009920:	e002      	b.n	8009928 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009922:	f06f 0302 	mvn.w	r3, #2
 8009926:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009928:	69fb      	ldr	r3, [r7, #28]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3720      	adds	r7, #32
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	e000ed04 	.word	0xe000ed04

08009938 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8009938:	b580      	push	{r7, lr}
 800993a:	b08a      	sub	sp, #40	; 0x28
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d102      	bne.n	8009950 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800994a:	2300      	movs	r3, #0
 800994c:	627b      	str	r3, [r7, #36]	; 0x24
 800994e:	e023      	b.n	8009998 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009950:	f3ef 8305 	mrs	r3, IPSR
 8009954:	61bb      	str	r3, [r7, #24]
  return(result);
 8009956:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 8009958:	2b00      	cmp	r3, #0
 800995a:	d019      	beq.n	8009990 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800995c:	f3ef 8211 	mrs	r2, BASEPRI
 8009960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009964:	f383 8811 	msr	BASEPRI, r3
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	613a      	str	r2, [r7, #16]
 8009972:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009974:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 8009976:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8009978:	6a3b      	ldr	r3, [r7, #32]
 800997a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800997c:	6a3b      	ldr	r3, [r7, #32]
 800997e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	627b      	str	r3, [r7, #36]	; 0x24
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800998e:	e003      	b.n	8009998 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 8009990:	6a38      	ldr	r0, [r7, #32]
 8009992:	f000 fe1d 	bl	800a5d0 <uxQueueSpacesAvailable>
 8009996:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return (space);
 8009998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800999a:	4618      	mov	r0, r3
 800999c:	3728      	adds	r7, #40	; 0x28
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
	...

080099a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	4a07      	ldr	r2, [pc, #28]	; (80099d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80099b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	4a06      	ldr	r2, [pc, #24]	; (80099d4 <vApplicationGetIdleTaskMemory+0x30>)
 80099ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2280      	movs	r2, #128	; 0x80
 80099c0:	601a      	str	r2, [r3, #0]
}
 80099c2:	bf00      	nop
 80099c4:	3714      	adds	r7, #20
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	20000700 	.word	0x20000700
 80099d4:	20000760 	.word	0x20000760

080099d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	4a07      	ldr	r2, [pc, #28]	; (8009a04 <vApplicationGetTimerTaskMemory+0x2c>)
 80099e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	4a06      	ldr	r2, [pc, #24]	; (8009a08 <vApplicationGetTimerTaskMemory+0x30>)
 80099ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099f6:	601a      	str	r2, [r3, #0]
}
 80099f8:	bf00      	nop
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr
 8009a04:	20000960 	.word	0x20000960
 8009a08:	200009c0 	.word	0x200009c0

08009a0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f103 0208 	add.w	r2, r3, #8
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f04f 32ff 	mov.w	r2, #4294967295
 8009a24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f103 0208 	add.w	r2, r3, #8
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f103 0208 	add.w	r2, r3, #8
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009a5a:	bf00      	nop
 8009a5c:	370c      	adds	r7, #12
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr

08009a66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a66:	b480      	push	{r7}
 8009a68:	b085      	sub	sp, #20
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
 8009a6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	689a      	ldr	r2, [r3, #8]
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	683a      	ldr	r2, [r7, #0]
 8009a8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	1c5a      	adds	r2, r3, #1
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	601a      	str	r2, [r3, #0]
}
 8009aa2:	bf00      	nop
 8009aa4:	3714      	adds	r7, #20
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr

08009aae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009aae:	b480      	push	{r7}
 8009ab0:	b085      	sub	sp, #20
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
 8009ab6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac4:	d103      	bne.n	8009ace <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	e00c      	b.n	8009ae8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	60fb      	str	r3, [r7, #12]
 8009ad4:	e002      	b.n	8009adc <vListInsert+0x2e>
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	60fb      	str	r3, [r7, #12]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d2f6      	bcs.n	8009ad6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	683a      	ldr	r2, [r7, #0]
 8009af6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	683a      	ldr	r2, [r7, #0]
 8009b02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	1c5a      	adds	r2, r3, #1
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	601a      	str	r2, [r3, #0]
}
 8009b14:	bf00      	nop
 8009b16:	3714      	adds	r7, #20
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	6892      	ldr	r2, [r2, #8]
 8009b36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	6852      	ldr	r2, [r2, #4]
 8009b40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d103      	bne.n	8009b54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	689a      	ldr	r2, [r3, #8]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	1e5a      	subs	r2, r3, #1
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3714      	adds	r7, #20
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10a      	bne.n	8009b9e <xQueueGenericReset+0x2a>
	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	60bb      	str	r3, [r7, #8]
}
 8009b9a:	bf00      	nop
 8009b9c:	e7fe      	b.n	8009b9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009b9e:	f002 fa89 	bl	800c0b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009baa:	68f9      	ldr	r1, [r7, #12]
 8009bac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009bae:	fb01 f303 	mul.w	r3, r1, r3
 8009bb2:	441a      	add	r2, r3
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	68f9      	ldr	r1, [r7, #12]
 8009bd2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009bd4:	fb01 f303 	mul.w	r3, r1, r3
 8009bd8:	441a      	add	r2, r3
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	22ff      	movs	r2, #255	; 0xff
 8009be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	22ff      	movs	r2, #255	; 0xff
 8009bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d114      	bne.n	8009c1e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	691b      	ldr	r3, [r3, #16]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d01a      	beq.n	8009c32 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	3310      	adds	r3, #16
 8009c00:	4618      	mov	r0, r3
 8009c02:	f001 fb41 	bl	800b288 <xTaskRemoveFromEventList>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d012      	beq.n	8009c32 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c0c:	4b0c      	ldr	r3, [pc, #48]	; (8009c40 <xQueueGenericReset+0xcc>)
 8009c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c12:	601a      	str	r2, [r3, #0]
 8009c14:	f3bf 8f4f 	dsb	sy
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	e009      	b.n	8009c32 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	3310      	adds	r3, #16
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7ff fef2 	bl	8009a0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	3324      	adds	r3, #36	; 0x24
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7ff feed 	bl	8009a0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c32:	f002 fa6f 	bl	800c114 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c36:	2301      	movs	r3, #1
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	e000ed04 	.word	0xe000ed04

08009c44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b08e      	sub	sp, #56	; 0x38
 8009c48:	af02      	add	r7, sp, #8
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	607a      	str	r2, [r7, #4]
 8009c50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10a      	bne.n	8009c6e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5c:	f383 8811 	msr	BASEPRI, r3
 8009c60:	f3bf 8f6f 	isb	sy
 8009c64:	f3bf 8f4f 	dsb	sy
 8009c68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c6a:	bf00      	nop
 8009c6c:	e7fe      	b.n	8009c6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10a      	bne.n	8009c8a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c78:	f383 8811 	msr	BASEPRI, r3
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f3bf 8f4f 	dsb	sy
 8009c84:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c86:	bf00      	nop
 8009c88:	e7fe      	b.n	8009c88 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d002      	beq.n	8009c96 <xQueueGenericCreateStatic+0x52>
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d001      	beq.n	8009c9a <xQueueGenericCreateStatic+0x56>
 8009c96:	2301      	movs	r3, #1
 8009c98:	e000      	b.n	8009c9c <xQueueGenericCreateStatic+0x58>
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d10a      	bne.n	8009cb6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	623b      	str	r3, [r7, #32]
}
 8009cb2:	bf00      	nop
 8009cb4:	e7fe      	b.n	8009cb4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d102      	bne.n	8009cc2 <xQueueGenericCreateStatic+0x7e>
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d101      	bne.n	8009cc6 <xQueueGenericCreateStatic+0x82>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e000      	b.n	8009cc8 <xQueueGenericCreateStatic+0x84>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10a      	bne.n	8009ce2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	61fb      	str	r3, [r7, #28]
}
 8009cde:	bf00      	nop
 8009ce0:	e7fe      	b.n	8009ce0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009ce2:	2350      	movs	r3, #80	; 0x50
 8009ce4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	2b50      	cmp	r3, #80	; 0x50
 8009cea:	d00a      	beq.n	8009d02 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf0:	f383 8811 	msr	BASEPRI, r3
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	61bb      	str	r3, [r7, #24]
}
 8009cfe:	bf00      	nop
 8009d00:	e7fe      	b.n	8009d00 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009d02:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00d      	beq.n	8009d2a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d10:	2201      	movs	r2, #1
 8009d12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d16:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	4613      	mov	r3, r2
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	68b9      	ldr	r1, [r7, #8]
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f000 f83f 	bl	8009da8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3730      	adds	r7, #48	; 0x30
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b08a      	sub	sp, #40	; 0x28
 8009d38:	af02      	add	r7, sp, #8
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	4613      	mov	r3, r2
 8009d40:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10a      	bne.n	8009d5e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4c:	f383 8811 	msr	BASEPRI, r3
 8009d50:	f3bf 8f6f 	isb	sy
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	613b      	str	r3, [r7, #16]
}
 8009d5a:	bf00      	nop
 8009d5c:	e7fe      	b.n	8009d5c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	fb02 f303 	mul.w	r3, r2, r3
 8009d66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	3350      	adds	r3, #80	; 0x50
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f002 fac3 	bl	800c2f8 <pvPortMalloc>
 8009d72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d011      	beq.n	8009d9e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	3350      	adds	r3, #80	; 0x50
 8009d82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d8c:	79fa      	ldrb	r2, [r7, #7]
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	4613      	mov	r3, r2
 8009d94:	697a      	ldr	r2, [r7, #20]
 8009d96:	68b9      	ldr	r1, [r7, #8]
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f000 f805 	bl	8009da8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d9e:	69bb      	ldr	r3, [r7, #24]
	}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3720      	adds	r7, #32
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	607a      	str	r2, [r7, #4]
 8009db4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d103      	bne.n	8009dc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	69ba      	ldr	r2, [r7, #24]
 8009dc0:	601a      	str	r2, [r3, #0]
 8009dc2:	e002      	b.n	8009dca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009dd6:	2101      	movs	r1, #1
 8009dd8:	69b8      	ldr	r0, [r7, #24]
 8009dda:	f7ff fecb 	bl	8009b74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	78fa      	ldrb	r2, [r7, #3]
 8009de2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009de6:	bf00      	nop
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b08a      	sub	sp, #40	; 0x28
 8009df2:	af02      	add	r7, sp, #8
 8009df4:	60f8      	str	r0, [r7, #12]
 8009df6:	60b9      	str	r1, [r7, #8]
 8009df8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d10a      	bne.n	8009e16 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	61bb      	str	r3, [r7, #24]
}
 8009e12:	bf00      	nop
 8009e14:	e7fe      	b.n	8009e14 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d90a      	bls.n	8009e34 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	617b      	str	r3, [r7, #20]
}
 8009e30:	bf00      	nop
 8009e32:	e7fe      	b.n	8009e32 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009e34:	2302      	movs	r3, #2
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f7ff ff00 	bl	8009c44 <xQueueGenericCreateStatic>
 8009e44:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d002      	beq.n	8009e52 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	68ba      	ldr	r2, [r7, #8]
 8009e50:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009e52:	69fb      	ldr	r3, [r7, #28]
	}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3720      	adds	r7, #32
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b086      	sub	sp, #24
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d10a      	bne.n	8009e82 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e70:	f383 8811 	msr	BASEPRI, r3
 8009e74:	f3bf 8f6f 	isb	sy
 8009e78:	f3bf 8f4f 	dsb	sy
 8009e7c:	613b      	str	r3, [r7, #16]
}
 8009e7e:	bf00      	nop
 8009e80:	e7fe      	b.n	8009e80 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d90a      	bls.n	8009ea0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	60fb      	str	r3, [r7, #12]
}
 8009e9c:	bf00      	nop
 8009e9e:	e7fe      	b.n	8009e9e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009ea0:	2202      	movs	r2, #2
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f7ff ff45 	bl	8009d34 <xQueueGenericCreate>
 8009eaa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d002      	beq.n	8009eb8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	683a      	ldr	r2, [r7, #0]
 8009eb6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009eb8:	697b      	ldr	r3, [r7, #20]
	}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3718      	adds	r7, #24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
	...

08009ec4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b08e      	sub	sp, #56	; 0x38
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
 8009ed0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10a      	bne.n	8009ef6 <xQueueGenericSend+0x32>
	__asm volatile
 8009ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ef2:	bf00      	nop
 8009ef4:	e7fe      	b.n	8009ef4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d103      	bne.n	8009f04 <xQueueGenericSend+0x40>
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d101      	bne.n	8009f08 <xQueueGenericSend+0x44>
 8009f04:	2301      	movs	r3, #1
 8009f06:	e000      	b.n	8009f0a <xQueueGenericSend+0x46>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10a      	bne.n	8009f24 <xQueueGenericSend+0x60>
	__asm volatile
 8009f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f12:	f383 8811 	msr	BASEPRI, r3
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f20:	bf00      	nop
 8009f22:	e7fe      	b.n	8009f22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d103      	bne.n	8009f32 <xQueueGenericSend+0x6e>
 8009f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d101      	bne.n	8009f36 <xQueueGenericSend+0x72>
 8009f32:	2301      	movs	r3, #1
 8009f34:	e000      	b.n	8009f38 <xQueueGenericSend+0x74>
 8009f36:	2300      	movs	r3, #0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d10a      	bne.n	8009f52 <xQueueGenericSend+0x8e>
	__asm volatile
 8009f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f40:	f383 8811 	msr	BASEPRI, r3
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	623b      	str	r3, [r7, #32]
}
 8009f4e:	bf00      	nop
 8009f50:	e7fe      	b.n	8009f50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f52:	f001 fb57 	bl	800b604 <xTaskGetSchedulerState>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d102      	bne.n	8009f62 <xQueueGenericSend+0x9e>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d101      	bne.n	8009f66 <xQueueGenericSend+0xa2>
 8009f62:	2301      	movs	r3, #1
 8009f64:	e000      	b.n	8009f68 <xQueueGenericSend+0xa4>
 8009f66:	2300      	movs	r3, #0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10a      	bne.n	8009f82 <xQueueGenericSend+0xbe>
	__asm volatile
 8009f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f70:	f383 8811 	msr	BASEPRI, r3
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	61fb      	str	r3, [r7, #28]
}
 8009f7e:	bf00      	nop
 8009f80:	e7fe      	b.n	8009f80 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f82:	f002 f897 	bl	800c0b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d302      	bcc.n	8009f98 <xQueueGenericSend+0xd4>
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d129      	bne.n	8009fec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f98:	683a      	ldr	r2, [r7, #0]
 8009f9a:	68b9      	ldr	r1, [r7, #8]
 8009f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f9e:	f000 fb5d 	bl	800a65c <prvCopyDataToQueue>
 8009fa2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d010      	beq.n	8009fce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fae:	3324      	adds	r3, #36	; 0x24
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f001 f969 	bl	800b288 <xTaskRemoveFromEventList>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d013      	beq.n	8009fe4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009fbc:	4b3f      	ldr	r3, [pc, #252]	; (800a0bc <xQueueGenericSend+0x1f8>)
 8009fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fc2:	601a      	str	r2, [r3, #0]
 8009fc4:	f3bf 8f4f 	dsb	sy
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	e00a      	b.n	8009fe4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d007      	beq.n	8009fe4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009fd4:	4b39      	ldr	r3, [pc, #228]	; (800a0bc <xQueueGenericSend+0x1f8>)
 8009fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fda:	601a      	str	r2, [r3, #0]
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009fe4:	f002 f896 	bl	800c114 <vPortExitCritical>
				return pdPASS;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e063      	b.n	800a0b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d103      	bne.n	8009ffa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ff2:	f002 f88f 	bl	800c114 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	e05c      	b.n	800a0b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d106      	bne.n	800a00e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a000:	f107 0314 	add.w	r3, r7, #20
 800a004:	4618      	mov	r0, r3
 800a006:	f001 f9a3 	bl	800b350 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a00a:	2301      	movs	r3, #1
 800a00c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a00e:	f002 f881 	bl	800c114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a012:	f000 fefb 	bl	800ae0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a016:	f002 f84d 	bl	800c0b4 <vPortEnterCritical>
 800a01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a020:	b25b      	sxtb	r3, r3
 800a022:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a026:	d103      	bne.n	800a030 <xQueueGenericSend+0x16c>
 800a028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02a:	2200      	movs	r2, #0
 800a02c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a032:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a036:	b25b      	sxtb	r3, r3
 800a038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a03c:	d103      	bne.n	800a046 <xQueueGenericSend+0x182>
 800a03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a040:	2200      	movs	r2, #0
 800a042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a046:	f002 f865 	bl	800c114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a04a:	1d3a      	adds	r2, r7, #4
 800a04c:	f107 0314 	add.w	r3, r7, #20
 800a050:	4611      	mov	r1, r2
 800a052:	4618      	mov	r0, r3
 800a054:	f001 f992 	bl	800b37c <xTaskCheckForTimeOut>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d124      	bne.n	800a0a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a05e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a060:	f000 fbf4 	bl	800a84c <prvIsQueueFull>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d018      	beq.n	800a09c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06c:	3310      	adds	r3, #16
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	4611      	mov	r1, r2
 800a072:	4618      	mov	r0, r3
 800a074:	f001 f8b8 	bl	800b1e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a07a:	f000 fb7f 	bl	800a77c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a07e:	f000 fed3 	bl	800ae28 <xTaskResumeAll>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	f47f af7c 	bne.w	8009f82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a08a:	4b0c      	ldr	r3, [pc, #48]	; (800a0bc <xQueueGenericSend+0x1f8>)
 800a08c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a090:	601a      	str	r2, [r3, #0]
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	e772      	b.n	8009f82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a09c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a09e:	f000 fb6d 	bl	800a77c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0a2:	f000 fec1 	bl	800ae28 <xTaskResumeAll>
 800a0a6:	e76c      	b.n	8009f82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a0a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0aa:	f000 fb67 	bl	800a77c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0ae:	f000 febb 	bl	800ae28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a0b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3738      	adds	r7, #56	; 0x38
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	e000ed04 	.word	0xe000ed04

0800a0c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b090      	sub	sp, #64	; 0x40
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]
 800a0cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d10a      	bne.n	800a0ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0dc:	f383 8811 	msr	BASEPRI, r3
 800a0e0:	f3bf 8f6f 	isb	sy
 800a0e4:	f3bf 8f4f 	dsb	sy
 800a0e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a0ea:	bf00      	nop
 800a0ec:	e7fe      	b.n	800a0ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d103      	bne.n	800a0fc <xQueueGenericSendFromISR+0x3c>
 800a0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <xQueueGenericSendFromISR+0x40>
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e000      	b.n	800a102 <xQueueGenericSendFromISR+0x42>
 800a100:	2300      	movs	r3, #0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10a      	bne.n	800a11c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a118:	bf00      	nop
 800a11a:	e7fe      	b.n	800a11a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d103      	bne.n	800a12a <xQueueGenericSendFromISR+0x6a>
 800a122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a126:	2b01      	cmp	r3, #1
 800a128:	d101      	bne.n	800a12e <xQueueGenericSendFromISR+0x6e>
 800a12a:	2301      	movs	r3, #1
 800a12c:	e000      	b.n	800a130 <xQueueGenericSendFromISR+0x70>
 800a12e:	2300      	movs	r3, #0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10a      	bne.n	800a14a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	623b      	str	r3, [r7, #32]
}
 800a146:	bf00      	nop
 800a148:	e7fe      	b.n	800a148 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a14a:	f002 f895 	bl	800c278 <vPortValidateInterruptPriority>
	__asm volatile
 800a14e:	f3ef 8211 	mrs	r2, BASEPRI
 800a152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a156:	f383 8811 	msr	BASEPRI, r3
 800a15a:	f3bf 8f6f 	isb	sy
 800a15e:	f3bf 8f4f 	dsb	sy
 800a162:	61fa      	str	r2, [r7, #28]
 800a164:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a166:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a168:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a172:	429a      	cmp	r2, r3
 800a174:	d302      	bcc.n	800a17c <xQueueGenericSendFromISR+0xbc>
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d12f      	bne.n	800a1dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a18a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a18c:	683a      	ldr	r2, [r7, #0]
 800a18e:	68b9      	ldr	r1, [r7, #8]
 800a190:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a192:	f000 fa63 	bl	800a65c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a196:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a19e:	d112      	bne.n	800a1c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d016      	beq.n	800a1d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1aa:	3324      	adds	r3, #36	; 0x24
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f001 f86b 	bl	800b288 <xTaskRemoveFromEventList>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00e      	beq.n	800a1d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00b      	beq.n	800a1d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	e007      	b.n	800a1d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a1c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	b25a      	sxtb	r2, r3
 800a1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a1da:	e001      	b.n	800a1e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e2:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	f383 8811 	msr	BASEPRI, r3
}
 800a1ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a1ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3740      	adds	r7, #64	; 0x40
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b08e      	sub	sp, #56	; 0x38
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
 800a1fe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a206:	2b00      	cmp	r3, #0
 800a208:	d10a      	bne.n	800a220 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20e:	f383 8811 	msr	BASEPRI, r3
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	623b      	str	r3, [r7, #32]
}
 800a21c:	bf00      	nop
 800a21e:	e7fe      	b.n	800a21e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00a      	beq.n	800a23e <xQueueGiveFromISR+0x48>
	__asm volatile
 800a228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22c:	f383 8811 	msr	BASEPRI, r3
 800a230:	f3bf 8f6f 	isb	sy
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	61fb      	str	r3, [r7, #28]
}
 800a23a:	bf00      	nop
 800a23c:	e7fe      	b.n	800a23c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d103      	bne.n	800a24e <xQueueGiveFromISR+0x58>
 800a246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d101      	bne.n	800a252 <xQueueGiveFromISR+0x5c>
 800a24e:	2301      	movs	r3, #1
 800a250:	e000      	b.n	800a254 <xQueueGiveFromISR+0x5e>
 800a252:	2300      	movs	r3, #0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d10a      	bne.n	800a26e <xQueueGiveFromISR+0x78>
	__asm volatile
 800a258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25c:	f383 8811 	msr	BASEPRI, r3
 800a260:	f3bf 8f6f 	isb	sy
 800a264:	f3bf 8f4f 	dsb	sy
 800a268:	61bb      	str	r3, [r7, #24]
}
 800a26a:	bf00      	nop
 800a26c:	e7fe      	b.n	800a26c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a26e:	f002 f803 	bl	800c278 <vPortValidateInterruptPriority>
	__asm volatile
 800a272:	f3ef 8211 	mrs	r2, BASEPRI
 800a276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	617a      	str	r2, [r7, #20]
 800a288:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a28a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a28c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a292:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d22b      	bcs.n	800a2f6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2aa:	1c5a      	adds	r2, r3, #1
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a2b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2b8:	d112      	bne.n	800a2e0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d016      	beq.n	800a2f0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c4:	3324      	adds	r3, #36	; 0x24
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 ffde 	bl	800b288 <xTaskRemoveFromEventList>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00e      	beq.n	800a2f0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00b      	beq.n	800a2f0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	e007      	b.n	800a2f0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a2e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	b25a      	sxtb	r2, r3
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	637b      	str	r3, [r7, #52]	; 0x34
 800a2f4:	e001      	b.n	800a2fa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	637b      	str	r3, [r7, #52]	; 0x34
 800a2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f383 8811 	msr	BASEPRI, r3
}
 800a304:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3738      	adds	r7, #56	; 0x38
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b08c      	sub	sp, #48	; 0x30
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a31c:	2300      	movs	r3, #0
 800a31e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10a      	bne.n	800a340 <xQueueReceive+0x30>
	__asm volatile
 800a32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32e:	f383 8811 	msr	BASEPRI, r3
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	623b      	str	r3, [r7, #32]
}
 800a33c:	bf00      	nop
 800a33e:	e7fe      	b.n	800a33e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d103      	bne.n	800a34e <xQueueReceive+0x3e>
 800a346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d101      	bne.n	800a352 <xQueueReceive+0x42>
 800a34e:	2301      	movs	r3, #1
 800a350:	e000      	b.n	800a354 <xQueueReceive+0x44>
 800a352:	2300      	movs	r3, #0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d10a      	bne.n	800a36e <xQueueReceive+0x5e>
	__asm volatile
 800a358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35c:	f383 8811 	msr	BASEPRI, r3
 800a360:	f3bf 8f6f 	isb	sy
 800a364:	f3bf 8f4f 	dsb	sy
 800a368:	61fb      	str	r3, [r7, #28]
}
 800a36a:	bf00      	nop
 800a36c:	e7fe      	b.n	800a36c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a36e:	f001 f949 	bl	800b604 <xTaskGetSchedulerState>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d102      	bne.n	800a37e <xQueueReceive+0x6e>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d101      	bne.n	800a382 <xQueueReceive+0x72>
 800a37e:	2301      	movs	r3, #1
 800a380:	e000      	b.n	800a384 <xQueueReceive+0x74>
 800a382:	2300      	movs	r3, #0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10a      	bne.n	800a39e <xQueueReceive+0x8e>
	__asm volatile
 800a388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38c:	f383 8811 	msr	BASEPRI, r3
 800a390:	f3bf 8f6f 	isb	sy
 800a394:	f3bf 8f4f 	dsb	sy
 800a398:	61bb      	str	r3, [r7, #24]
}
 800a39a:	bf00      	nop
 800a39c:	e7fe      	b.n	800a39c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a39e:	f001 fe89 	bl	800c0b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d01f      	beq.n	800a3ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a3ae:	68b9      	ldr	r1, [r7, #8]
 800a3b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3b2:	f000 f9bd 	bl	800a730 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b8:	1e5a      	subs	r2, r3, #1
 800a3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00f      	beq.n	800a3e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c8:	3310      	adds	r3, #16
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f000 ff5c 	bl	800b288 <xTaskRemoveFromEventList>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d007      	beq.n	800a3e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a3d6:	4b3d      	ldr	r3, [pc, #244]	; (800a4cc <xQueueReceive+0x1bc>)
 800a3d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3dc:	601a      	str	r2, [r3, #0]
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a3e6:	f001 fe95 	bl	800c114 <vPortExitCritical>
				return pdPASS;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e069      	b.n	800a4c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d103      	bne.n	800a3fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3f4:	f001 fe8e 	bl	800c114 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	e062      	b.n	800a4c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d106      	bne.n	800a410 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a402:	f107 0310 	add.w	r3, r7, #16
 800a406:	4618      	mov	r0, r3
 800a408:	f000 ffa2 	bl	800b350 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a40c:	2301      	movs	r3, #1
 800a40e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a410:	f001 fe80 	bl	800c114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a414:	f000 fcfa 	bl	800ae0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a418:	f001 fe4c 	bl	800c0b4 <vPortEnterCritical>
 800a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a422:	b25b      	sxtb	r3, r3
 800a424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a428:	d103      	bne.n	800a432 <xQueueReceive+0x122>
 800a42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42c:	2200      	movs	r2, #0
 800a42e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a438:	b25b      	sxtb	r3, r3
 800a43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a43e:	d103      	bne.n	800a448 <xQueueReceive+0x138>
 800a440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a442:	2200      	movs	r2, #0
 800a444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a448:	f001 fe64 	bl	800c114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a44c:	1d3a      	adds	r2, r7, #4
 800a44e:	f107 0310 	add.w	r3, r7, #16
 800a452:	4611      	mov	r1, r2
 800a454:	4618      	mov	r0, r3
 800a456:	f000 ff91 	bl	800b37c <xTaskCheckForTimeOut>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d123      	bne.n	800a4a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a462:	f000 f9dd 	bl	800a820 <prvIsQueueEmpty>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d017      	beq.n	800a49c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46e:	3324      	adds	r3, #36	; 0x24
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	4611      	mov	r1, r2
 800a474:	4618      	mov	r0, r3
 800a476:	f000 feb7 	bl	800b1e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a47a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a47c:	f000 f97e 	bl	800a77c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a480:	f000 fcd2 	bl	800ae28 <xTaskResumeAll>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d189      	bne.n	800a39e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a48a:	4b10      	ldr	r3, [pc, #64]	; (800a4cc <xQueueReceive+0x1bc>)
 800a48c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a490:	601a      	str	r2, [r3, #0]
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	f3bf 8f6f 	isb	sy
 800a49a:	e780      	b.n	800a39e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a49c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a49e:	f000 f96d 	bl	800a77c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4a2:	f000 fcc1 	bl	800ae28 <xTaskResumeAll>
 800a4a6:	e77a      	b.n	800a39e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a4a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4aa:	f000 f967 	bl	800a77c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4ae:	f000 fcbb 	bl	800ae28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4b4:	f000 f9b4 	bl	800a820 <prvIsQueueEmpty>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	f43f af6f 	beq.w	800a39e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a4c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3730      	adds	r7, #48	; 0x30
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	e000ed04 	.word	0xe000ed04

0800a4d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b08e      	sub	sp, #56	; 0x38
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d10a      	bne.n	800a4fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	623b      	str	r3, [r7, #32]
}
 800a4f8:	bf00      	nop
 800a4fa:	e7fe      	b.n	800a4fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d103      	bne.n	800a50a <xQueueReceiveFromISR+0x3a>
 800a502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a506:	2b00      	cmp	r3, #0
 800a508:	d101      	bne.n	800a50e <xQueueReceiveFromISR+0x3e>
 800a50a:	2301      	movs	r3, #1
 800a50c:	e000      	b.n	800a510 <xQueueReceiveFromISR+0x40>
 800a50e:	2300      	movs	r3, #0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d10a      	bne.n	800a52a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a518:	f383 8811 	msr	BASEPRI, r3
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	61fb      	str	r3, [r7, #28]
}
 800a526:	bf00      	nop
 800a528:	e7fe      	b.n	800a528 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a52a:	f001 fea5 	bl	800c278 <vPortValidateInterruptPriority>
	__asm volatile
 800a52e:	f3ef 8211 	mrs	r2, BASEPRI
 800a532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a536:	f383 8811 	msr	BASEPRI, r3
 800a53a:	f3bf 8f6f 	isb	sy
 800a53e:	f3bf 8f4f 	dsb	sy
 800a542:	61ba      	str	r2, [r7, #24]
 800a544:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a546:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a548:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a54e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a552:	2b00      	cmp	r3, #0
 800a554:	d02f      	beq.n	800a5b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a55c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a560:	68b9      	ldr	r1, [r7, #8]
 800a562:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a564:	f000 f8e4 	bl	800a730 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56a:	1e5a      	subs	r2, r3, #1
 800a56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a570:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a578:	d112      	bne.n	800a5a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d016      	beq.n	800a5b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a584:	3310      	adds	r3, #16
 800a586:	4618      	mov	r0, r3
 800a588:	f000 fe7e 	bl	800b288 <xTaskRemoveFromEventList>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00e      	beq.n	800a5b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00b      	beq.n	800a5b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	601a      	str	r2, [r3, #0]
 800a59e:	e007      	b.n	800a5b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a5a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	b25a      	sxtb	r2, r3
 800a5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	637b      	str	r3, [r7, #52]	; 0x34
 800a5b4:	e001      	b.n	800a5ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	637b      	str	r3, [r7, #52]	; 0x34
 800a5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	f383 8811 	msr	BASEPRI, r3
}
 800a5c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3738      	adds	r7, #56	; 0x38
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b086      	sub	sp, #24
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10a      	bne.n	800a5f8 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 800a5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e6:	f383 8811 	msr	BASEPRI, r3
 800a5ea:	f3bf 8f6f 	isb	sy
 800a5ee:	f3bf 8f4f 	dsb	sy
 800a5f2:	60fb      	str	r3, [r7, #12]
}
 800a5f4:	bf00      	nop
 800a5f6:	e7fe      	b.n	800a5f6 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800a5f8:	f001 fd5c 	bl	800c0b4 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a604:	1ad3      	subs	r3, r2, r3
 800a606:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a608:	f001 fd84 	bl	800c114 <vPortExitCritical>

	return uxReturn;
 800a60c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a60e:	4618      	mov	r0, r3
 800a610:	3718      	adds	r7, #24
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b084      	sub	sp, #16
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10a      	bne.n	800a63e <vQueueDelete+0x28>
	__asm volatile
 800a628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62c:	f383 8811 	msr	BASEPRI, r3
 800a630:	f3bf 8f6f 	isb	sy
 800a634:	f3bf 8f4f 	dsb	sy
 800a638:	60bb      	str	r3, [r7, #8]
}
 800a63a:	bf00      	nop
 800a63c:	e7fe      	b.n	800a63c <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	f000 f946 	bl	800a8d0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d102      	bne.n	800a654 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	f001 ff1e 	bl	800c490 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a654:	bf00      	nop
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b086      	sub	sp, #24
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a668:	2300      	movs	r3, #0
 800a66a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a670:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a676:	2b00      	cmp	r3, #0
 800a678:	d10d      	bne.n	800a696 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d14d      	bne.n	800a71e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	4618      	mov	r0, r3
 800a688:	f000 ffda 	bl	800b640 <xTaskPriorityDisinherit>
 800a68c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2200      	movs	r2, #0
 800a692:	609a      	str	r2, [r3, #8]
 800a694:	e043      	b.n	800a71e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d119      	bne.n	800a6d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6858      	ldr	r0, [r3, #4]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	68b9      	ldr	r1, [r7, #8]
 800a6a8:	f002 ff3d 	bl	800d526 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	685a      	ldr	r2, [r3, #4]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b4:	441a      	add	r2, r3
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	685a      	ldr	r2, [r3, #4]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d32b      	bcc.n	800a71e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	605a      	str	r2, [r3, #4]
 800a6ce:	e026      	b.n	800a71e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	68d8      	ldr	r0, [r3, #12]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d8:	461a      	mov	r2, r3
 800a6da:	68b9      	ldr	r1, [r7, #8]
 800a6dc:	f002 ff23 	bl	800d526 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	68da      	ldr	r2, [r3, #12]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e8:	425b      	negs	r3, r3
 800a6ea:	441a      	add	r2, r3
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	68da      	ldr	r2, [r3, #12]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d207      	bcs.n	800a70c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	689a      	ldr	r2, [r3, #8]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a704:	425b      	negs	r3, r3
 800a706:	441a      	add	r2, r3
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d105      	bne.n	800a71e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	3b01      	subs	r3, #1
 800a71c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	1c5a      	adds	r2, r3, #1
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a726:	697b      	ldr	r3, [r7, #20]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3718      	adds	r7, #24
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d018      	beq.n	800a774 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	68da      	ldr	r2, [r3, #12]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a74a:	441a      	add	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	68da      	ldr	r2, [r3, #12]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d303      	bcc.n	800a764 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	68d9      	ldr	r1, [r3, #12]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a76c:	461a      	mov	r2, r3
 800a76e:	6838      	ldr	r0, [r7, #0]
 800a770:	f002 fed9 	bl	800d526 <memcpy>
	}
}
 800a774:	bf00      	nop
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a784:	f001 fc96 	bl	800c0b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a78e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a790:	e011      	b.n	800a7b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a796:	2b00      	cmp	r3, #0
 800a798:	d012      	beq.n	800a7c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	3324      	adds	r3, #36	; 0x24
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f000 fd72 	bl	800b288 <xTaskRemoveFromEventList>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d001      	beq.n	800a7ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a7aa:	f000 fe49 	bl	800b440 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a7ae:	7bfb      	ldrb	r3, [r7, #15]
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	dce9      	bgt.n	800a792 <prvUnlockQueue+0x16>
 800a7be:	e000      	b.n	800a7c2 <prvUnlockQueue+0x46>
					break;
 800a7c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	22ff      	movs	r2, #255	; 0xff
 800a7c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a7ca:	f001 fca3 	bl	800c114 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a7ce:	f001 fc71 	bl	800c0b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7da:	e011      	b.n	800a800 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d012      	beq.n	800a80a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	3310      	adds	r3, #16
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f000 fd4d 	bl	800b288 <xTaskRemoveFromEventList>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d001      	beq.n	800a7f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a7f4:	f000 fe24 	bl	800b440 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a7f8:	7bbb      	ldrb	r3, [r7, #14]
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a800:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a804:	2b00      	cmp	r3, #0
 800a806:	dce9      	bgt.n	800a7dc <prvUnlockQueue+0x60>
 800a808:	e000      	b.n	800a80c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a80a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	22ff      	movs	r2, #255	; 0xff
 800a810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a814:	f001 fc7e 	bl	800c114 <vPortExitCritical>
}
 800a818:	bf00      	nop
 800a81a:	3710      	adds	r7, #16
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a828:	f001 fc44 	bl	800c0b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a830:	2b00      	cmp	r3, #0
 800a832:	d102      	bne.n	800a83a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a834:	2301      	movs	r3, #1
 800a836:	60fb      	str	r3, [r7, #12]
 800a838:	e001      	b.n	800a83e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a83a:	2300      	movs	r3, #0
 800a83c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a83e:	f001 fc69 	bl	800c114 <vPortExitCritical>

	return xReturn;
 800a842:	68fb      	ldr	r3, [r7, #12]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3710      	adds	r7, #16
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a854:	f001 fc2e 	bl	800c0b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a860:	429a      	cmp	r2, r3
 800a862:	d102      	bne.n	800a86a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a864:	2301      	movs	r3, #1
 800a866:	60fb      	str	r3, [r7, #12]
 800a868:	e001      	b.n	800a86e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a86a:	2300      	movs	r3, #0
 800a86c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a86e:	f001 fc51 	bl	800c114 <vPortExitCritical>

	return xReturn;
 800a872:	68fb      	ldr	r3, [r7, #12]
}
 800a874:	4618      	mov	r0, r3
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a87c:	b480      	push	{r7}
 800a87e:	b085      	sub	sp, #20
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a886:	2300      	movs	r3, #0
 800a888:	60fb      	str	r3, [r7, #12]
 800a88a:	e014      	b.n	800a8b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a88c:	4a0f      	ldr	r2, [pc, #60]	; (800a8cc <vQueueAddToRegistry+0x50>)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10b      	bne.n	800a8b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a898:	490c      	ldr	r1, [pc, #48]	; (800a8cc <vQueueAddToRegistry+0x50>)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	683a      	ldr	r2, [r7, #0]
 800a89e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a8a2:	4a0a      	ldr	r2, [pc, #40]	; (800a8cc <vQueueAddToRegistry+0x50>)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	00db      	lsls	r3, r3, #3
 800a8a8:	4413      	add	r3, r2
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a8ae:	e006      	b.n	800a8be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	60fb      	str	r3, [r7, #12]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2b07      	cmp	r3, #7
 800a8ba:	d9e7      	bls.n	800a88c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a8bc:	bf00      	nop
 800a8be:	bf00      	nop
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	20000dc0 	.word	0x20000dc0

0800a8d0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8d8:	2300      	movs	r3, #0
 800a8da:	60fb      	str	r3, [r7, #12]
 800a8dc:	e016      	b.n	800a90c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a8de:	4a10      	ldr	r2, [pc, #64]	; (800a920 <vQueueUnregisterQueue+0x50>)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	00db      	lsls	r3, r3, #3
 800a8e4:	4413      	add	r3, r2
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d10b      	bne.n	800a906 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a8ee:	4a0c      	ldr	r2, [pc, #48]	; (800a920 <vQueueUnregisterQueue+0x50>)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a8f8:	4a09      	ldr	r2, [pc, #36]	; (800a920 <vQueueUnregisterQueue+0x50>)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	00db      	lsls	r3, r3, #3
 800a8fe:	4413      	add	r3, r2
 800a900:	2200      	movs	r2, #0
 800a902:	605a      	str	r2, [r3, #4]
				break;
 800a904:	e006      	b.n	800a914 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	3301      	adds	r3, #1
 800a90a:	60fb      	str	r3, [r7, #12]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2b07      	cmp	r3, #7
 800a910:	d9e5      	bls.n	800a8de <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a912:	bf00      	nop
 800a914:	bf00      	nop
 800a916:	3714      	adds	r7, #20
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr
 800a920:	20000dc0 	.word	0x20000dc0

0800a924 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a924:	b580      	push	{r7, lr}
 800a926:	b086      	sub	sp, #24
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a934:	f001 fbbe 	bl	800c0b4 <vPortEnterCritical>
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a93e:	b25b      	sxtb	r3, r3
 800a940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a944:	d103      	bne.n	800a94e <vQueueWaitForMessageRestricted+0x2a>
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a954:	b25b      	sxtb	r3, r3
 800a956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a95a:	d103      	bne.n	800a964 <vQueueWaitForMessageRestricted+0x40>
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a964:	f001 fbd6 	bl	800c114 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d106      	bne.n	800a97e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	3324      	adds	r3, #36	; 0x24
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	68b9      	ldr	r1, [r7, #8]
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 fc59 	bl	800b230 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a97e:	6978      	ldr	r0, [r7, #20]
 800a980:	f7ff fefc 	bl	800a77c <prvUnlockQueue>
	}
 800a984:	bf00      	nop
 800a986:	3718      	adds	r7, #24
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b08e      	sub	sp, #56	; 0x38
 800a990:	af04      	add	r7, sp, #16
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
 800a998:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10a      	bne.n	800a9b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	623b      	str	r3, [r7, #32]
}
 800a9b2:	bf00      	nop
 800a9b4:	e7fe      	b.n	800a9b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10a      	bne.n	800a9d2 <xTaskCreateStatic+0x46>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	61fb      	str	r3, [r7, #28]
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a9d2:	2360      	movs	r3, #96	; 0x60
 800a9d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	2b60      	cmp	r3, #96	; 0x60
 800a9da:	d00a      	beq.n	800a9f2 <xTaskCreateStatic+0x66>
	__asm volatile
 800a9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e0:	f383 8811 	msr	BASEPRI, r3
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	61bb      	str	r3, [r7, #24]
}
 800a9ee:	bf00      	nop
 800a9f0:	e7fe      	b.n	800a9f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a9f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d01e      	beq.n	800aa38 <xTaskCreateStatic+0xac>
 800a9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d01b      	beq.n	800aa38 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0c:	2202      	movs	r2, #2
 800aa0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa12:	2300      	movs	r3, #0
 800aa14:	9303      	str	r3, [sp, #12]
 800aa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa18:	9302      	str	r3, [sp, #8]
 800aa1a:	f107 0314 	add.w	r3, r7, #20
 800aa1e:	9301      	str	r3, [sp, #4]
 800aa20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	68b9      	ldr	r1, [r7, #8]
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f000 f850 	bl	800aad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa32:	f000 f8df 	bl	800abf4 <prvAddNewTaskToReadyList>
 800aa36:	e001      	b.n	800aa3c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aa3c:	697b      	ldr	r3, [r7, #20]
	}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3728      	adds	r7, #40	; 0x28
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b08c      	sub	sp, #48	; 0x30
 800aa4a:	af04      	add	r7, sp, #16
 800aa4c:	60f8      	str	r0, [r7, #12]
 800aa4e:	60b9      	str	r1, [r7, #8]
 800aa50:	603b      	str	r3, [r7, #0]
 800aa52:	4613      	mov	r3, r2
 800aa54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aa56:	88fb      	ldrh	r3, [r7, #6]
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f001 fc4c 	bl	800c2f8 <pvPortMalloc>
 800aa60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00e      	beq.n	800aa86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa68:	2060      	movs	r0, #96	; 0x60
 800aa6a:	f001 fc45 	bl	800c2f8 <pvPortMalloc>
 800aa6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d003      	beq.n	800aa7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	631a      	str	r2, [r3, #48]	; 0x30
 800aa7c:	e005      	b.n	800aa8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa7e:	6978      	ldr	r0, [r7, #20]
 800aa80:	f001 fd06 	bl	800c490 <vPortFree>
 800aa84:	e001      	b.n	800aa8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa86:	2300      	movs	r3, #0
 800aa88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa8a:	69fb      	ldr	r3, [r7, #28]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d017      	beq.n	800aac0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa98:	88fa      	ldrh	r2, [r7, #6]
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	9303      	str	r3, [sp, #12]
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	9302      	str	r3, [sp, #8]
 800aaa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa4:	9301      	str	r3, [sp, #4]
 800aaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	68b9      	ldr	r1, [r7, #8]
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f000 f80e 	bl	800aad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aab4:	69f8      	ldr	r0, [r7, #28]
 800aab6:	f000 f89d 	bl	800abf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aaba:	2301      	movs	r3, #1
 800aabc:	61bb      	str	r3, [r7, #24]
 800aabe:	e002      	b.n	800aac6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aac0:	f04f 33ff 	mov.w	r3, #4294967295
 800aac4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aac6:	69bb      	ldr	r3, [r7, #24]
	}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3720      	adds	r7, #32
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b088      	sub	sp, #32
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	607a      	str	r2, [r7, #4]
 800aadc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	461a      	mov	r2, r3
 800aae8:	21a5      	movs	r1, #165	; 0xa5
 800aaea:	f002 fc9d 	bl	800d428 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aaee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4413      	add	r3, r2
 800aafe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	f023 0307 	bic.w	r3, r3, #7
 800ab06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	f003 0307 	and.w	r3, r3, #7
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d00a      	beq.n	800ab28 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ab12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	617b      	str	r3, [r7, #20]
}
 800ab24:	bf00      	nop
 800ab26:	e7fe      	b.n	800ab26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d01f      	beq.n	800ab6e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab2e:	2300      	movs	r3, #0
 800ab30:	61fb      	str	r3, [r7, #28]
 800ab32:	e012      	b.n	800ab5a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab34:	68ba      	ldr	r2, [r7, #8]
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	4413      	add	r3, r2
 800ab3a:	7819      	ldrb	r1, [r3, #0]
 800ab3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	4413      	add	r3, r2
 800ab42:	3334      	adds	r3, #52	; 0x34
 800ab44:	460a      	mov	r2, r1
 800ab46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ab48:	68ba      	ldr	r2, [r7, #8]
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d006      	beq.n	800ab62 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	3301      	adds	r3, #1
 800ab58:	61fb      	str	r3, [r7, #28]
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	2b0f      	cmp	r3, #15
 800ab5e:	d9e9      	bls.n	800ab34 <prvInitialiseNewTask+0x64>
 800ab60:	e000      	b.n	800ab64 <prvInitialiseNewTask+0x94>
			{
				break;
 800ab62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab66:	2200      	movs	r2, #0
 800ab68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab6c:	e003      	b.n	800ab76 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	2200      	movs	r2, #0
 800ab72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab78:	2b37      	cmp	r3, #55	; 0x37
 800ab7a:	d901      	bls.n	800ab80 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab7c:	2337      	movs	r3, #55	; 0x37
 800ab7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ab8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8e:	2200      	movs	r2, #0
 800ab90:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab94:	3304      	adds	r3, #4
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7fe ff58 	bl	8009a4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9e:	3318      	adds	r3, #24
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7fe ff53 	bl	8009a4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abaa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800abb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800abb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800abbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbe:	2200      	movs	r2, #0
 800abc0:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800abc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc4:	2200      	movs	r2, #0
 800abc6:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800abc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abca:	2200      	movs	r2, #0
 800abcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800abd0:	683a      	ldr	r2, [r7, #0]
 800abd2:	68f9      	ldr	r1, [r7, #12]
 800abd4:	69b8      	ldr	r0, [r7, #24]
 800abd6:	f001 f943 	bl	800be60 <pxPortInitialiseStack>
 800abda:	4602      	mov	r2, r0
 800abdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abde:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800abe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d002      	beq.n	800abec <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800abe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abec:	bf00      	nop
 800abee:	3720      	adds	r7, #32
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800abfc:	f001 fa5a 	bl	800c0b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ac00:	4b2d      	ldr	r3, [pc, #180]	; (800acb8 <prvAddNewTaskToReadyList+0xc4>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	3301      	adds	r3, #1
 800ac06:	4a2c      	ldr	r2, [pc, #176]	; (800acb8 <prvAddNewTaskToReadyList+0xc4>)
 800ac08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ac0a:	4b2c      	ldr	r3, [pc, #176]	; (800acbc <prvAddNewTaskToReadyList+0xc8>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d109      	bne.n	800ac26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ac12:	4a2a      	ldr	r2, [pc, #168]	; (800acbc <prvAddNewTaskToReadyList+0xc8>)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac18:	4b27      	ldr	r3, [pc, #156]	; (800acb8 <prvAddNewTaskToReadyList+0xc4>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d110      	bne.n	800ac42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac20:	f000 fc32 	bl	800b488 <prvInitialiseTaskLists>
 800ac24:	e00d      	b.n	800ac42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac26:	4b26      	ldr	r3, [pc, #152]	; (800acc0 <prvAddNewTaskToReadyList+0xcc>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d109      	bne.n	800ac42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac2e:	4b23      	ldr	r3, [pc, #140]	; (800acbc <prvAddNewTaskToReadyList+0xc8>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d802      	bhi.n	800ac42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac3c:	4a1f      	ldr	r2, [pc, #124]	; (800acbc <prvAddNewTaskToReadyList+0xc8>)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac42:	4b20      	ldr	r3, [pc, #128]	; (800acc4 <prvAddNewTaskToReadyList+0xd0>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3301      	adds	r3, #1
 800ac48:	4a1e      	ldr	r2, [pc, #120]	; (800acc4 <prvAddNewTaskToReadyList+0xd0>)
 800ac4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ac4c:	4b1d      	ldr	r3, [pc, #116]	; (800acc4 <prvAddNewTaskToReadyList+0xd0>)
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac58:	4b1b      	ldr	r3, [pc, #108]	; (800acc8 <prvAddNewTaskToReadyList+0xd4>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d903      	bls.n	800ac68 <prvAddNewTaskToReadyList+0x74>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac64:	4a18      	ldr	r2, [pc, #96]	; (800acc8 <prvAddNewTaskToReadyList+0xd4>)
 800ac66:	6013      	str	r3, [r2, #0]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4413      	add	r3, r2
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	4a15      	ldr	r2, [pc, #84]	; (800accc <prvAddNewTaskToReadyList+0xd8>)
 800ac76:	441a      	add	r2, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	3304      	adds	r3, #4
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	4610      	mov	r0, r2
 800ac80:	f7fe fef1 	bl	8009a66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac84:	f001 fa46 	bl	800c114 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac88:	4b0d      	ldr	r3, [pc, #52]	; (800acc0 <prvAddNewTaskToReadyList+0xcc>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d00e      	beq.n	800acae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac90:	4b0a      	ldr	r3, [pc, #40]	; (800acbc <prvAddNewTaskToReadyList+0xc8>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d207      	bcs.n	800acae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac9e:	4b0c      	ldr	r3, [pc, #48]	; (800acd0 <prvAddNewTaskToReadyList+0xdc>)
 800aca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aca4:	601a      	str	r2, [r3, #0]
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acae:	bf00      	nop
 800acb0:	3708      	adds	r7, #8
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	200012d4 	.word	0x200012d4
 800acbc:	20000e00 	.word	0x20000e00
 800acc0:	200012e0 	.word	0x200012e0
 800acc4:	200012f0 	.word	0x200012f0
 800acc8:	200012dc 	.word	0x200012dc
 800accc:	20000e04 	.word	0x20000e04
 800acd0:	e000ed04 	.word	0xe000ed04

0800acd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b084      	sub	sp, #16
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800acdc:	2300      	movs	r3, #0
 800acde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d017      	beq.n	800ad16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ace6:	4b13      	ldr	r3, [pc, #76]	; (800ad34 <vTaskDelay+0x60>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d00a      	beq.n	800ad04 <vTaskDelay+0x30>
	__asm volatile
 800acee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf2:	f383 8811 	msr	BASEPRI, r3
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	f3bf 8f4f 	dsb	sy
 800acfe:	60bb      	str	r3, [r7, #8]
}
 800ad00:	bf00      	nop
 800ad02:	e7fe      	b.n	800ad02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ad04:	f000 f882 	bl	800ae0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ad08:	2100      	movs	r1, #0
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fd06 	bl	800b71c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ad10:	f000 f88a 	bl	800ae28 <xTaskResumeAll>
 800ad14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d107      	bne.n	800ad2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ad1c:	4b06      	ldr	r3, [pc, #24]	; (800ad38 <vTaskDelay+0x64>)
 800ad1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad22:	601a      	str	r2, [r3, #0]
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad2c:	bf00      	nop
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	200012fc 	.word	0x200012fc
 800ad38:	e000ed04 	.word	0xe000ed04

0800ad3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b08a      	sub	sp, #40	; 0x28
 800ad40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ad42:	2300      	movs	r3, #0
 800ad44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad46:	2300      	movs	r3, #0
 800ad48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad4a:	463a      	mov	r2, r7
 800ad4c:	1d39      	adds	r1, r7, #4
 800ad4e:	f107 0308 	add.w	r3, r7, #8
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fe fe26 	bl	80099a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad58:	6839      	ldr	r1, [r7, #0]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	68ba      	ldr	r2, [r7, #8]
 800ad5e:	9202      	str	r2, [sp, #8]
 800ad60:	9301      	str	r3, [sp, #4]
 800ad62:	2300      	movs	r3, #0
 800ad64:	9300      	str	r3, [sp, #0]
 800ad66:	2300      	movs	r3, #0
 800ad68:	460a      	mov	r2, r1
 800ad6a:	4922      	ldr	r1, [pc, #136]	; (800adf4 <vTaskStartScheduler+0xb8>)
 800ad6c:	4822      	ldr	r0, [pc, #136]	; (800adf8 <vTaskStartScheduler+0xbc>)
 800ad6e:	f7ff fe0d 	bl	800a98c <xTaskCreateStatic>
 800ad72:	4603      	mov	r3, r0
 800ad74:	4a21      	ldr	r2, [pc, #132]	; (800adfc <vTaskStartScheduler+0xc0>)
 800ad76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ad78:	4b20      	ldr	r3, [pc, #128]	; (800adfc <vTaskStartScheduler+0xc0>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d002      	beq.n	800ad86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ad80:	2301      	movs	r3, #1
 800ad82:	617b      	str	r3, [r7, #20]
 800ad84:	e001      	b.n	800ad8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ad86:	2300      	movs	r3, #0
 800ad88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d102      	bne.n	800ad96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ad90:	f000 fd18 	bl	800b7c4 <xTimerCreateTimerTask>
 800ad94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d118      	bne.n	800adce <vTaskStartScheduler+0x92>
	__asm volatile
 800ad9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada0:	f383 8811 	msr	BASEPRI, r3
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	613b      	str	r3, [r7, #16]
}
 800adae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800adb0:	4b13      	ldr	r3, [pc, #76]	; (800ae00 <vTaskStartScheduler+0xc4>)
 800adb2:	f04f 32ff 	mov.w	r2, #4294967295
 800adb6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800adb8:	4b12      	ldr	r3, [pc, #72]	; (800ae04 <vTaskStartScheduler+0xc8>)
 800adba:	2201      	movs	r2, #1
 800adbc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800adbe:	4b12      	ldr	r3, [pc, #72]	; (800ae08 <vTaskStartScheduler+0xcc>)
 800adc0:	2200      	movs	r2, #0
 800adc2:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800adc4:	f7f6 ff64 	bl	8001c90 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800adc8:	f001 f8d2 	bl	800bf70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800adcc:	e00e      	b.n	800adec <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add4:	d10a      	bne.n	800adec <vTaskStartScheduler+0xb0>
	__asm volatile
 800add6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adda:	f383 8811 	msr	BASEPRI, r3
 800adde:	f3bf 8f6f 	isb	sy
 800ade2:	f3bf 8f4f 	dsb	sy
 800ade6:	60fb      	str	r3, [r7, #12]
}
 800ade8:	bf00      	nop
 800adea:	e7fe      	b.n	800adea <vTaskStartScheduler+0xae>
}
 800adec:	bf00      	nop
 800adee:	3718      	adds	r7, #24
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	0800f514 	.word	0x0800f514
 800adf8:	0800b459 	.word	0x0800b459
 800adfc:	200012f8 	.word	0x200012f8
 800ae00:	200012f4 	.word	0x200012f4
 800ae04:	200012e0 	.word	0x200012e0
 800ae08:	200012d8 	.word	0x200012d8

0800ae0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ae10:	4b04      	ldr	r3, [pc, #16]	; (800ae24 <vTaskSuspendAll+0x18>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	3301      	adds	r3, #1
 800ae16:	4a03      	ldr	r2, [pc, #12]	; (800ae24 <vTaskSuspendAll+0x18>)
 800ae18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ae1a:	bf00      	nop
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr
 800ae24:	200012fc 	.word	0x200012fc

0800ae28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae32:	2300      	movs	r3, #0
 800ae34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ae36:	4b42      	ldr	r3, [pc, #264]	; (800af40 <xTaskResumeAll+0x118>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10a      	bne.n	800ae54 <xTaskResumeAll+0x2c>
	__asm volatile
 800ae3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	603b      	str	r3, [r7, #0]
}
 800ae50:	bf00      	nop
 800ae52:	e7fe      	b.n	800ae52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ae54:	f001 f92e 	bl	800c0b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ae58:	4b39      	ldr	r3, [pc, #228]	; (800af40 <xTaskResumeAll+0x118>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	4a38      	ldr	r2, [pc, #224]	; (800af40 <xTaskResumeAll+0x118>)
 800ae60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae62:	4b37      	ldr	r3, [pc, #220]	; (800af40 <xTaskResumeAll+0x118>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d162      	bne.n	800af30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ae6a:	4b36      	ldr	r3, [pc, #216]	; (800af44 <xTaskResumeAll+0x11c>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d05e      	beq.n	800af30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae72:	e02f      	b.n	800aed4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae74:	4b34      	ldr	r3, [pc, #208]	; (800af48 <xTaskResumeAll+0x120>)
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	3318      	adds	r3, #24
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7fe fe4d 	bl	8009b20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	3304      	adds	r3, #4
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7fe fe48 	bl	8009b20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae94:	4b2d      	ldr	r3, [pc, #180]	; (800af4c <xTaskResumeAll+0x124>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d903      	bls.n	800aea4 <xTaskResumeAll+0x7c>
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea0:	4a2a      	ldr	r2, [pc, #168]	; (800af4c <xTaskResumeAll+0x124>)
 800aea2:	6013      	str	r3, [r2, #0]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aea8:	4613      	mov	r3, r2
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	4413      	add	r3, r2
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	4a27      	ldr	r2, [pc, #156]	; (800af50 <xTaskResumeAll+0x128>)
 800aeb2:	441a      	add	r2, r3
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	3304      	adds	r3, #4
 800aeb8:	4619      	mov	r1, r3
 800aeba:	4610      	mov	r0, r2
 800aebc:	f7fe fdd3 	bl	8009a66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec4:	4b23      	ldr	r3, [pc, #140]	; (800af54 <xTaskResumeAll+0x12c>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d302      	bcc.n	800aed4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aece:	4b22      	ldr	r3, [pc, #136]	; (800af58 <xTaskResumeAll+0x130>)
 800aed0:	2201      	movs	r2, #1
 800aed2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aed4:	4b1c      	ldr	r3, [pc, #112]	; (800af48 <xTaskResumeAll+0x120>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d1cb      	bne.n	800ae74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d001      	beq.n	800aee6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aee2:	f000 fb6f 	bl	800b5c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aee6:	4b1d      	ldr	r3, [pc, #116]	; (800af5c <xTaskResumeAll+0x134>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d010      	beq.n	800af14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aef2:	f000 f847 	bl	800af84 <xTaskIncrementTick>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d002      	beq.n	800af02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aefc:	4b16      	ldr	r3, [pc, #88]	; (800af58 <xTaskResumeAll+0x130>)
 800aefe:	2201      	movs	r2, #1
 800af00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	3b01      	subs	r3, #1
 800af06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1f1      	bne.n	800aef2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800af0e:	4b13      	ldr	r3, [pc, #76]	; (800af5c <xTaskResumeAll+0x134>)
 800af10:	2200      	movs	r2, #0
 800af12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800af14:	4b10      	ldr	r3, [pc, #64]	; (800af58 <xTaskResumeAll+0x130>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d009      	beq.n	800af30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800af1c:	2301      	movs	r3, #1
 800af1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800af20:	4b0f      	ldr	r3, [pc, #60]	; (800af60 <xTaskResumeAll+0x138>)
 800af22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af26:	601a      	str	r2, [r3, #0]
 800af28:	f3bf 8f4f 	dsb	sy
 800af2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af30:	f001 f8f0 	bl	800c114 <vPortExitCritical>

	return xAlreadyYielded;
 800af34:	68bb      	ldr	r3, [r7, #8]
}
 800af36:	4618      	mov	r0, r3
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	200012fc 	.word	0x200012fc
 800af44:	200012d4 	.word	0x200012d4
 800af48:	20001294 	.word	0x20001294
 800af4c:	200012dc 	.word	0x200012dc
 800af50:	20000e04 	.word	0x20000e04
 800af54:	20000e00 	.word	0x20000e00
 800af58:	200012e8 	.word	0x200012e8
 800af5c:	200012e4 	.word	0x200012e4
 800af60:	e000ed04 	.word	0xe000ed04

0800af64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800af6a:	4b05      	ldr	r3, [pc, #20]	; (800af80 <xTaskGetTickCount+0x1c>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800af70:	687b      	ldr	r3, [r7, #4]
}
 800af72:	4618      	mov	r0, r3
 800af74:	370c      	adds	r7, #12
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	200012d8 	.word	0x200012d8

0800af84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b086      	sub	sp, #24
 800af88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800af8a:	2300      	movs	r3, #0
 800af8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af8e:	4b4f      	ldr	r3, [pc, #316]	; (800b0cc <xTaskIncrementTick+0x148>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	f040 808f 	bne.w	800b0b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800af98:	4b4d      	ldr	r3, [pc, #308]	; (800b0d0 <xTaskIncrementTick+0x14c>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	3301      	adds	r3, #1
 800af9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800afa0:	4a4b      	ldr	r2, [pc, #300]	; (800b0d0 <xTaskIncrementTick+0x14c>)
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d120      	bne.n	800afee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800afac:	4b49      	ldr	r3, [pc, #292]	; (800b0d4 <xTaskIncrementTick+0x150>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d00a      	beq.n	800afcc <xTaskIncrementTick+0x48>
	__asm volatile
 800afb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afba:	f383 8811 	msr	BASEPRI, r3
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	603b      	str	r3, [r7, #0]
}
 800afc8:	bf00      	nop
 800afca:	e7fe      	b.n	800afca <xTaskIncrementTick+0x46>
 800afcc:	4b41      	ldr	r3, [pc, #260]	; (800b0d4 <xTaskIncrementTick+0x150>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	60fb      	str	r3, [r7, #12]
 800afd2:	4b41      	ldr	r3, [pc, #260]	; (800b0d8 <xTaskIncrementTick+0x154>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a3f      	ldr	r2, [pc, #252]	; (800b0d4 <xTaskIncrementTick+0x150>)
 800afd8:	6013      	str	r3, [r2, #0]
 800afda:	4a3f      	ldr	r2, [pc, #252]	; (800b0d8 <xTaskIncrementTick+0x154>)
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6013      	str	r3, [r2, #0]
 800afe0:	4b3e      	ldr	r3, [pc, #248]	; (800b0dc <xTaskIncrementTick+0x158>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	3301      	adds	r3, #1
 800afe6:	4a3d      	ldr	r2, [pc, #244]	; (800b0dc <xTaskIncrementTick+0x158>)
 800afe8:	6013      	str	r3, [r2, #0]
 800afea:	f000 faeb 	bl	800b5c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800afee:	4b3c      	ldr	r3, [pc, #240]	; (800b0e0 <xTaskIncrementTick+0x15c>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	693a      	ldr	r2, [r7, #16]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d349      	bcc.n	800b08c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aff8:	4b36      	ldr	r3, [pc, #216]	; (800b0d4 <xTaskIncrementTick+0x150>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d104      	bne.n	800b00c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b002:	4b37      	ldr	r3, [pc, #220]	; (800b0e0 <xTaskIncrementTick+0x15c>)
 800b004:	f04f 32ff 	mov.w	r2, #4294967295
 800b008:	601a      	str	r2, [r3, #0]
					break;
 800b00a:	e03f      	b.n	800b08c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b00c:	4b31      	ldr	r3, [pc, #196]	; (800b0d4 <xTaskIncrementTick+0x150>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b01c:	693a      	ldr	r2, [r7, #16]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	429a      	cmp	r2, r3
 800b022:	d203      	bcs.n	800b02c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b024:	4a2e      	ldr	r2, [pc, #184]	; (800b0e0 <xTaskIncrementTick+0x15c>)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b02a:	e02f      	b.n	800b08c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	3304      	adds	r3, #4
 800b030:	4618      	mov	r0, r3
 800b032:	f7fe fd75 	bl	8009b20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d004      	beq.n	800b048 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	3318      	adds	r3, #24
 800b042:	4618      	mov	r0, r3
 800b044:	f7fe fd6c 	bl	8009b20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b04c:	4b25      	ldr	r3, [pc, #148]	; (800b0e4 <xTaskIncrementTick+0x160>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	429a      	cmp	r2, r3
 800b052:	d903      	bls.n	800b05c <xTaskIncrementTick+0xd8>
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b058:	4a22      	ldr	r2, [pc, #136]	; (800b0e4 <xTaskIncrementTick+0x160>)
 800b05a:	6013      	str	r3, [r2, #0]
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b060:	4613      	mov	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	4413      	add	r3, r2
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	4a1f      	ldr	r2, [pc, #124]	; (800b0e8 <xTaskIncrementTick+0x164>)
 800b06a:	441a      	add	r2, r3
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	3304      	adds	r3, #4
 800b070:	4619      	mov	r1, r3
 800b072:	4610      	mov	r0, r2
 800b074:	f7fe fcf7 	bl	8009a66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b07c:	4b1b      	ldr	r3, [pc, #108]	; (800b0ec <xTaskIncrementTick+0x168>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b082:	429a      	cmp	r2, r3
 800b084:	d3b8      	bcc.n	800aff8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b086:	2301      	movs	r3, #1
 800b088:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b08a:	e7b5      	b.n	800aff8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b08c:	4b17      	ldr	r3, [pc, #92]	; (800b0ec <xTaskIncrementTick+0x168>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b092:	4915      	ldr	r1, [pc, #84]	; (800b0e8 <xTaskIncrementTick+0x164>)
 800b094:	4613      	mov	r3, r2
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	4413      	add	r3, r2
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	440b      	add	r3, r1
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d901      	bls.n	800b0a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b0a8:	4b11      	ldr	r3, [pc, #68]	; (800b0f0 <xTaskIncrementTick+0x16c>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d007      	beq.n	800b0c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	617b      	str	r3, [r7, #20]
 800b0b4:	e004      	b.n	800b0c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b0b6:	4b0f      	ldr	r3, [pc, #60]	; (800b0f4 <xTaskIncrementTick+0x170>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	4a0d      	ldr	r2, [pc, #52]	; (800b0f4 <xTaskIncrementTick+0x170>)
 800b0be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b0c0:	697b      	ldr	r3, [r7, #20]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3718      	adds	r7, #24
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	200012fc 	.word	0x200012fc
 800b0d0:	200012d8 	.word	0x200012d8
 800b0d4:	2000128c 	.word	0x2000128c
 800b0d8:	20001290 	.word	0x20001290
 800b0dc:	200012ec 	.word	0x200012ec
 800b0e0:	200012f4 	.word	0x200012f4
 800b0e4:	200012dc 	.word	0x200012dc
 800b0e8:	20000e04 	.word	0x20000e04
 800b0ec:	20000e00 	.word	0x20000e00
 800b0f0:	200012e8 	.word	0x200012e8
 800b0f4:	200012e4 	.word	0x200012e4

0800b0f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b0fe:	4b33      	ldr	r3, [pc, #204]	; (800b1cc <vTaskSwitchContext+0xd4>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d003      	beq.n	800b10e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b106:	4b32      	ldr	r3, [pc, #200]	; (800b1d0 <vTaskSwitchContext+0xd8>)
 800b108:	2201      	movs	r2, #1
 800b10a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b10c:	e05a      	b.n	800b1c4 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 800b10e:	4b30      	ldr	r3, [pc, #192]	; (800b1d0 <vTaskSwitchContext+0xd8>)
 800b110:	2200      	movs	r2, #0
 800b112:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b114:	f7f6 fdc3 	bl	8001c9e <getRunTimeCounterValue>
 800b118:	4603      	mov	r3, r0
 800b11a:	4a2e      	ldr	r2, [pc, #184]	; (800b1d4 <vTaskSwitchContext+0xdc>)
 800b11c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b11e:	4b2d      	ldr	r3, [pc, #180]	; (800b1d4 <vTaskSwitchContext+0xdc>)
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	4b2d      	ldr	r3, [pc, #180]	; (800b1d8 <vTaskSwitchContext+0xe0>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	429a      	cmp	r2, r3
 800b128:	d909      	bls.n	800b13e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b12a:	4b2c      	ldr	r3, [pc, #176]	; (800b1dc <vTaskSwitchContext+0xe4>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b130:	4a28      	ldr	r2, [pc, #160]	; (800b1d4 <vTaskSwitchContext+0xdc>)
 800b132:	6810      	ldr	r0, [r2, #0]
 800b134:	4a28      	ldr	r2, [pc, #160]	; (800b1d8 <vTaskSwitchContext+0xe0>)
 800b136:	6812      	ldr	r2, [r2, #0]
 800b138:	1a82      	subs	r2, r0, r2
 800b13a:	440a      	add	r2, r1
 800b13c:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b13e:	4b25      	ldr	r3, [pc, #148]	; (800b1d4 <vTaskSwitchContext+0xdc>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4a25      	ldr	r2, [pc, #148]	; (800b1d8 <vTaskSwitchContext+0xe0>)
 800b144:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b146:	4b26      	ldr	r3, [pc, #152]	; (800b1e0 <vTaskSwitchContext+0xe8>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	60fb      	str	r3, [r7, #12]
 800b14c:	e010      	b.n	800b170 <vTaskSwitchContext+0x78>
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d10a      	bne.n	800b16a <vTaskSwitchContext+0x72>
	__asm volatile
 800b154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b158:	f383 8811 	msr	BASEPRI, r3
 800b15c:	f3bf 8f6f 	isb	sy
 800b160:	f3bf 8f4f 	dsb	sy
 800b164:	607b      	str	r3, [r7, #4]
}
 800b166:	bf00      	nop
 800b168:	e7fe      	b.n	800b168 <vTaskSwitchContext+0x70>
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	3b01      	subs	r3, #1
 800b16e:	60fb      	str	r3, [r7, #12]
 800b170:	491c      	ldr	r1, [pc, #112]	; (800b1e4 <vTaskSwitchContext+0xec>)
 800b172:	68fa      	ldr	r2, [r7, #12]
 800b174:	4613      	mov	r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	4413      	add	r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	440b      	add	r3, r1
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d0e4      	beq.n	800b14e <vTaskSwitchContext+0x56>
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	4613      	mov	r3, r2
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	4413      	add	r3, r2
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	4a15      	ldr	r2, [pc, #84]	; (800b1e4 <vTaskSwitchContext+0xec>)
 800b190:	4413      	add	r3, r2
 800b192:	60bb      	str	r3, [r7, #8]
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	685a      	ldr	r2, [r3, #4]
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	605a      	str	r2, [r3, #4]
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	685a      	ldr	r2, [r3, #4]
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	3308      	adds	r3, #8
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d104      	bne.n	800b1b4 <vTaskSwitchContext+0xbc>
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	685a      	ldr	r2, [r3, #4]
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	605a      	str	r2, [r3, #4]
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	4a08      	ldr	r2, [pc, #32]	; (800b1dc <vTaskSwitchContext+0xe4>)
 800b1bc:	6013      	str	r3, [r2, #0]
 800b1be:	4a08      	ldr	r2, [pc, #32]	; (800b1e0 <vTaskSwitchContext+0xe8>)
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	6013      	str	r3, [r2, #0]
}
 800b1c4:	bf00      	nop
 800b1c6:	3710      	adds	r7, #16
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	200012fc 	.word	0x200012fc
 800b1d0:	200012e8 	.word	0x200012e8
 800b1d4:	20001304 	.word	0x20001304
 800b1d8:	20001300 	.word	0x20001300
 800b1dc:	20000e00 	.word	0x20000e00
 800b1e0:	200012dc 	.word	0x200012dc
 800b1e4:	20000e04 	.word	0x20000e04

0800b1e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d10a      	bne.n	800b20e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fc:	f383 8811 	msr	BASEPRI, r3
 800b200:	f3bf 8f6f 	isb	sy
 800b204:	f3bf 8f4f 	dsb	sy
 800b208:	60fb      	str	r3, [r7, #12]
}
 800b20a:	bf00      	nop
 800b20c:	e7fe      	b.n	800b20c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b20e:	4b07      	ldr	r3, [pc, #28]	; (800b22c <vTaskPlaceOnEventList+0x44>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	3318      	adds	r3, #24
 800b214:	4619      	mov	r1, r3
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f7fe fc49 	bl	8009aae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b21c:	2101      	movs	r1, #1
 800b21e:	6838      	ldr	r0, [r7, #0]
 800b220:	f000 fa7c 	bl	800b71c <prvAddCurrentTaskToDelayedList>
}
 800b224:	bf00      	nop
 800b226:	3710      	adds	r7, #16
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}
 800b22c:	20000e00 	.word	0x20000e00

0800b230 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d10a      	bne.n	800b258 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b246:	f383 8811 	msr	BASEPRI, r3
 800b24a:	f3bf 8f6f 	isb	sy
 800b24e:	f3bf 8f4f 	dsb	sy
 800b252:	617b      	str	r3, [r7, #20]
}
 800b254:	bf00      	nop
 800b256:	e7fe      	b.n	800b256 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b258:	4b0a      	ldr	r3, [pc, #40]	; (800b284 <vTaskPlaceOnEventListRestricted+0x54>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	3318      	adds	r3, #24
 800b25e:	4619      	mov	r1, r3
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	f7fe fc00 	bl	8009a66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d002      	beq.n	800b272 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b26c:	f04f 33ff 	mov.w	r3, #4294967295
 800b270:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b272:	6879      	ldr	r1, [r7, #4]
 800b274:	68b8      	ldr	r0, [r7, #8]
 800b276:	f000 fa51 	bl	800b71c <prvAddCurrentTaskToDelayedList>
	}
 800b27a:	bf00      	nop
 800b27c:	3718      	adds	r7, #24
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	20000e00 	.word	0x20000e00

0800b288 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d10a      	bne.n	800b2b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a2:	f383 8811 	msr	BASEPRI, r3
 800b2a6:	f3bf 8f6f 	isb	sy
 800b2aa:	f3bf 8f4f 	dsb	sy
 800b2ae:	60fb      	str	r3, [r7, #12]
}
 800b2b0:	bf00      	nop
 800b2b2:	e7fe      	b.n	800b2b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	3318      	adds	r3, #24
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7fe fc31 	bl	8009b20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2be:	4b1e      	ldr	r3, [pc, #120]	; (800b338 <xTaskRemoveFromEventList+0xb0>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d11d      	bne.n	800b302 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	3304      	adds	r3, #4
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7fe fc28 	bl	8009b20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d4:	4b19      	ldr	r3, [pc, #100]	; (800b33c <xTaskRemoveFromEventList+0xb4>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d903      	bls.n	800b2e4 <xTaskRemoveFromEventList+0x5c>
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e0:	4a16      	ldr	r2, [pc, #88]	; (800b33c <xTaskRemoveFromEventList+0xb4>)
 800b2e2:	6013      	str	r3, [r2, #0]
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2e8:	4613      	mov	r3, r2
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	4413      	add	r3, r2
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	4a13      	ldr	r2, [pc, #76]	; (800b340 <xTaskRemoveFromEventList+0xb8>)
 800b2f2:	441a      	add	r2, r3
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	3304      	adds	r3, #4
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	4610      	mov	r0, r2
 800b2fc:	f7fe fbb3 	bl	8009a66 <vListInsertEnd>
 800b300:	e005      	b.n	800b30e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	3318      	adds	r3, #24
 800b306:	4619      	mov	r1, r3
 800b308:	480e      	ldr	r0, [pc, #56]	; (800b344 <xTaskRemoveFromEventList+0xbc>)
 800b30a:	f7fe fbac 	bl	8009a66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b312:	4b0d      	ldr	r3, [pc, #52]	; (800b348 <xTaskRemoveFromEventList+0xc0>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b318:	429a      	cmp	r2, r3
 800b31a:	d905      	bls.n	800b328 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b31c:	2301      	movs	r3, #1
 800b31e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b320:	4b0a      	ldr	r3, [pc, #40]	; (800b34c <xTaskRemoveFromEventList+0xc4>)
 800b322:	2201      	movs	r2, #1
 800b324:	601a      	str	r2, [r3, #0]
 800b326:	e001      	b.n	800b32c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b328:	2300      	movs	r3, #0
 800b32a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b32c:	697b      	ldr	r3, [r7, #20]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3718      	adds	r7, #24
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	200012fc 	.word	0x200012fc
 800b33c:	200012dc 	.word	0x200012dc
 800b340:	20000e04 	.word	0x20000e04
 800b344:	20001294 	.word	0x20001294
 800b348:	20000e00 	.word	0x20000e00
 800b34c:	200012e8 	.word	0x200012e8

0800b350 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b358:	4b06      	ldr	r3, [pc, #24]	; (800b374 <vTaskInternalSetTimeOutState+0x24>)
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b360:	4b05      	ldr	r3, [pc, #20]	; (800b378 <vTaskInternalSetTimeOutState+0x28>)
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	605a      	str	r2, [r3, #4]
}
 800b368:	bf00      	nop
 800b36a:	370c      	adds	r7, #12
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr
 800b374:	200012ec 	.word	0x200012ec
 800b378:	200012d8 	.word	0x200012d8

0800b37c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b088      	sub	sp, #32
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10a      	bne.n	800b3a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b390:	f383 8811 	msr	BASEPRI, r3
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	613b      	str	r3, [r7, #16]
}
 800b39e:	bf00      	nop
 800b3a0:	e7fe      	b.n	800b3a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10a      	bne.n	800b3be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ac:	f383 8811 	msr	BASEPRI, r3
 800b3b0:	f3bf 8f6f 	isb	sy
 800b3b4:	f3bf 8f4f 	dsb	sy
 800b3b8:	60fb      	str	r3, [r7, #12]
}
 800b3ba:	bf00      	nop
 800b3bc:	e7fe      	b.n	800b3bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b3be:	f000 fe79 	bl	800c0b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b3c2:	4b1d      	ldr	r3, [pc, #116]	; (800b438 <xTaskCheckForTimeOut+0xbc>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	69ba      	ldr	r2, [r7, #24]
 800b3ce:	1ad3      	subs	r3, r2, r3
 800b3d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3da:	d102      	bne.n	800b3e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	61fb      	str	r3, [r7, #28]
 800b3e0:	e023      	b.n	800b42a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	4b15      	ldr	r3, [pc, #84]	; (800b43c <xTaskCheckForTimeOut+0xc0>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d007      	beq.n	800b3fe <xTaskCheckForTimeOut+0x82>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	69ba      	ldr	r2, [r7, #24]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d302      	bcc.n	800b3fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	61fb      	str	r3, [r7, #28]
 800b3fc:	e015      	b.n	800b42a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	697a      	ldr	r2, [r7, #20]
 800b404:	429a      	cmp	r2, r3
 800b406:	d20b      	bcs.n	800b420 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	1ad2      	subs	r2, r2, r3
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f7ff ff9b 	bl	800b350 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b41a:	2300      	movs	r3, #0
 800b41c:	61fb      	str	r3, [r7, #28]
 800b41e:	e004      	b.n	800b42a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	2200      	movs	r2, #0
 800b424:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b426:	2301      	movs	r3, #1
 800b428:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b42a:	f000 fe73 	bl	800c114 <vPortExitCritical>

	return xReturn;
 800b42e:	69fb      	ldr	r3, [r7, #28]
}
 800b430:	4618      	mov	r0, r3
 800b432:	3720      	adds	r7, #32
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	200012d8 	.word	0x200012d8
 800b43c:	200012ec 	.word	0x200012ec

0800b440 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b440:	b480      	push	{r7}
 800b442:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b444:	4b03      	ldr	r3, [pc, #12]	; (800b454 <vTaskMissedYield+0x14>)
 800b446:	2201      	movs	r2, #1
 800b448:	601a      	str	r2, [r3, #0]
}
 800b44a:	bf00      	nop
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr
 800b454:	200012e8 	.word	0x200012e8

0800b458 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b460:	f000 f852 	bl	800b508 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b464:	4b06      	ldr	r3, [pc, #24]	; (800b480 <prvIdleTask+0x28>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d9f9      	bls.n	800b460 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b46c:	4b05      	ldr	r3, [pc, #20]	; (800b484 <prvIdleTask+0x2c>)
 800b46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b472:	601a      	str	r2, [r3, #0]
 800b474:	f3bf 8f4f 	dsb	sy
 800b478:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b47c:	e7f0      	b.n	800b460 <prvIdleTask+0x8>
 800b47e:	bf00      	nop
 800b480:	20000e04 	.word	0x20000e04
 800b484:	e000ed04 	.word	0xe000ed04

0800b488 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b48e:	2300      	movs	r3, #0
 800b490:	607b      	str	r3, [r7, #4]
 800b492:	e00c      	b.n	800b4ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	4613      	mov	r3, r2
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	4413      	add	r3, r2
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	4a12      	ldr	r2, [pc, #72]	; (800b4e8 <prvInitialiseTaskLists+0x60>)
 800b4a0:	4413      	add	r3, r2
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7fe fab2 	bl	8009a0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	607b      	str	r3, [r7, #4]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2b37      	cmp	r3, #55	; 0x37
 800b4b2:	d9ef      	bls.n	800b494 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b4b4:	480d      	ldr	r0, [pc, #52]	; (800b4ec <prvInitialiseTaskLists+0x64>)
 800b4b6:	f7fe faa9 	bl	8009a0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b4ba:	480d      	ldr	r0, [pc, #52]	; (800b4f0 <prvInitialiseTaskLists+0x68>)
 800b4bc:	f7fe faa6 	bl	8009a0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b4c0:	480c      	ldr	r0, [pc, #48]	; (800b4f4 <prvInitialiseTaskLists+0x6c>)
 800b4c2:	f7fe faa3 	bl	8009a0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b4c6:	480c      	ldr	r0, [pc, #48]	; (800b4f8 <prvInitialiseTaskLists+0x70>)
 800b4c8:	f7fe faa0 	bl	8009a0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b4cc:	480b      	ldr	r0, [pc, #44]	; (800b4fc <prvInitialiseTaskLists+0x74>)
 800b4ce:	f7fe fa9d 	bl	8009a0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b4d2:	4b0b      	ldr	r3, [pc, #44]	; (800b500 <prvInitialiseTaskLists+0x78>)
 800b4d4:	4a05      	ldr	r2, [pc, #20]	; (800b4ec <prvInitialiseTaskLists+0x64>)
 800b4d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b4d8:	4b0a      	ldr	r3, [pc, #40]	; (800b504 <prvInitialiseTaskLists+0x7c>)
 800b4da:	4a05      	ldr	r2, [pc, #20]	; (800b4f0 <prvInitialiseTaskLists+0x68>)
 800b4dc:	601a      	str	r2, [r3, #0]
}
 800b4de:	bf00      	nop
 800b4e0:	3708      	adds	r7, #8
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	20000e04 	.word	0x20000e04
 800b4ec:	20001264 	.word	0x20001264
 800b4f0:	20001278 	.word	0x20001278
 800b4f4:	20001294 	.word	0x20001294
 800b4f8:	200012a8 	.word	0x200012a8
 800b4fc:	200012c0 	.word	0x200012c0
 800b500:	2000128c 	.word	0x2000128c
 800b504:	20001290 	.word	0x20001290

0800b508 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b50e:	e019      	b.n	800b544 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b510:	f000 fdd0 	bl	800c0b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b514:	4b10      	ldr	r3, [pc, #64]	; (800b558 <prvCheckTasksWaitingTermination+0x50>)
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	3304      	adds	r3, #4
 800b520:	4618      	mov	r0, r3
 800b522:	f7fe fafd 	bl	8009b20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b526:	4b0d      	ldr	r3, [pc, #52]	; (800b55c <prvCheckTasksWaitingTermination+0x54>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	3b01      	subs	r3, #1
 800b52c:	4a0b      	ldr	r2, [pc, #44]	; (800b55c <prvCheckTasksWaitingTermination+0x54>)
 800b52e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b530:	4b0b      	ldr	r3, [pc, #44]	; (800b560 <prvCheckTasksWaitingTermination+0x58>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	3b01      	subs	r3, #1
 800b536:	4a0a      	ldr	r2, [pc, #40]	; (800b560 <prvCheckTasksWaitingTermination+0x58>)
 800b538:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b53a:	f000 fdeb 	bl	800c114 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f810 	bl	800b564 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b544:	4b06      	ldr	r3, [pc, #24]	; (800b560 <prvCheckTasksWaitingTermination+0x58>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d1e1      	bne.n	800b510 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b54c:	bf00      	nop
 800b54e:	bf00      	nop
 800b550:	3708      	adds	r7, #8
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	200012a8 	.word	0x200012a8
 800b55c:	200012d4 	.word	0x200012d4
 800b560:	200012bc 	.word	0x200012bc

0800b564 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b572:	2b00      	cmp	r3, #0
 800b574:	d108      	bne.n	800b588 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b57a:	4618      	mov	r0, r3
 800b57c:	f000 ff88 	bl	800c490 <vPortFree>
				vPortFree( pxTCB );
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 ff85 	bl	800c490 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b586:	e018      	b.n	800b5ba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d103      	bne.n	800b59a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 ff7c 	bl	800c490 <vPortFree>
	}
 800b598:	e00f      	b.n	800b5ba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b5a0:	2b02      	cmp	r3, #2
 800b5a2:	d00a      	beq.n	800b5ba <prvDeleteTCB+0x56>
	__asm volatile
 800b5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a8:	f383 8811 	msr	BASEPRI, r3
 800b5ac:	f3bf 8f6f 	isb	sy
 800b5b0:	f3bf 8f4f 	dsb	sy
 800b5b4:	60fb      	str	r3, [r7, #12]
}
 800b5b6:	bf00      	nop
 800b5b8:	e7fe      	b.n	800b5b8 <prvDeleteTCB+0x54>
	}
 800b5ba:	bf00      	nop
 800b5bc:	3710      	adds	r7, #16
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
	...

0800b5c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5ca:	4b0c      	ldr	r3, [pc, #48]	; (800b5fc <prvResetNextTaskUnblockTime+0x38>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d104      	bne.n	800b5de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b5d4:	4b0a      	ldr	r3, [pc, #40]	; (800b600 <prvResetNextTaskUnblockTime+0x3c>)
 800b5d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b5dc:	e008      	b.n	800b5f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5de:	4b07      	ldr	r3, [pc, #28]	; (800b5fc <prvResetNextTaskUnblockTime+0x38>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	4a04      	ldr	r2, [pc, #16]	; (800b600 <prvResetNextTaskUnblockTime+0x3c>)
 800b5ee:	6013      	str	r3, [r2, #0]
}
 800b5f0:	bf00      	nop
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr
 800b5fc:	2000128c 	.word	0x2000128c
 800b600:	200012f4 	.word	0x200012f4

0800b604 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b60a:	4b0b      	ldr	r3, [pc, #44]	; (800b638 <xTaskGetSchedulerState+0x34>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d102      	bne.n	800b618 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b612:	2301      	movs	r3, #1
 800b614:	607b      	str	r3, [r7, #4]
 800b616:	e008      	b.n	800b62a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b618:	4b08      	ldr	r3, [pc, #32]	; (800b63c <xTaskGetSchedulerState+0x38>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d102      	bne.n	800b626 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b620:	2302      	movs	r3, #2
 800b622:	607b      	str	r3, [r7, #4]
 800b624:	e001      	b.n	800b62a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b626:	2300      	movs	r3, #0
 800b628:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b62a:	687b      	ldr	r3, [r7, #4]
	}
 800b62c:	4618      	mov	r0, r3
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr
 800b638:	200012e0 	.word	0x200012e0
 800b63c:	200012fc 	.word	0x200012fc

0800b640 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b64c:	2300      	movs	r3, #0
 800b64e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d056      	beq.n	800b704 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b656:	4b2e      	ldr	r3, [pc, #184]	; (800b710 <xTaskPriorityDisinherit+0xd0>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	693a      	ldr	r2, [r7, #16]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d00a      	beq.n	800b676 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b664:	f383 8811 	msr	BASEPRI, r3
 800b668:	f3bf 8f6f 	isb	sy
 800b66c:	f3bf 8f4f 	dsb	sy
 800b670:	60fb      	str	r3, [r7, #12]
}
 800b672:	bf00      	nop
 800b674:	e7fe      	b.n	800b674 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d10a      	bne.n	800b694 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b682:	f383 8811 	msr	BASEPRI, r3
 800b686:	f3bf 8f6f 	isb	sy
 800b68a:	f3bf 8f4f 	dsb	sy
 800b68e:	60bb      	str	r3, [r7, #8]
}
 800b690:	bf00      	nop
 800b692:	e7fe      	b.n	800b692 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b698:	1e5a      	subs	r2, r3, #1
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d02c      	beq.n	800b704 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d128      	bne.n	800b704 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	3304      	adds	r3, #4
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7fe fa32 	bl	8009b20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d4:	4b0f      	ldr	r3, [pc, #60]	; (800b714 <xTaskPriorityDisinherit+0xd4>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d903      	bls.n	800b6e4 <xTaskPriorityDisinherit+0xa4>
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e0:	4a0c      	ldr	r2, [pc, #48]	; (800b714 <xTaskPriorityDisinherit+0xd4>)
 800b6e2:	6013      	str	r3, [r2, #0]
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e8:	4613      	mov	r3, r2
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	4413      	add	r3, r2
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	4a09      	ldr	r2, [pc, #36]	; (800b718 <xTaskPriorityDisinherit+0xd8>)
 800b6f2:	441a      	add	r2, r3
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	3304      	adds	r3, #4
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	4610      	mov	r0, r2
 800b6fc:	f7fe f9b3 	bl	8009a66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b700:	2301      	movs	r3, #1
 800b702:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b704:	697b      	ldr	r3, [r7, #20]
	}
 800b706:	4618      	mov	r0, r3
 800b708:	3718      	adds	r7, #24
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	20000e00 	.word	0x20000e00
 800b714:	200012dc 	.word	0x200012dc
 800b718:	20000e04 	.word	0x20000e04

0800b71c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b726:	4b21      	ldr	r3, [pc, #132]	; (800b7ac <prvAddCurrentTaskToDelayedList+0x90>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b72c:	4b20      	ldr	r3, [pc, #128]	; (800b7b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	3304      	adds	r3, #4
 800b732:	4618      	mov	r0, r3
 800b734:	f7fe f9f4 	bl	8009b20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b73e:	d10a      	bne.n	800b756 <prvAddCurrentTaskToDelayedList+0x3a>
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d007      	beq.n	800b756 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b746:	4b1a      	ldr	r3, [pc, #104]	; (800b7b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	3304      	adds	r3, #4
 800b74c:	4619      	mov	r1, r3
 800b74e:	4819      	ldr	r0, [pc, #100]	; (800b7b4 <prvAddCurrentTaskToDelayedList+0x98>)
 800b750:	f7fe f989 	bl	8009a66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b754:	e026      	b.n	800b7a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4413      	add	r3, r2
 800b75c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b75e:	4b14      	ldr	r3, [pc, #80]	; (800b7b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	68ba      	ldr	r2, [r7, #8]
 800b764:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b766:	68ba      	ldr	r2, [r7, #8]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d209      	bcs.n	800b782 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b76e:	4b12      	ldr	r3, [pc, #72]	; (800b7b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	4b0f      	ldr	r3, [pc, #60]	; (800b7b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	3304      	adds	r3, #4
 800b778:	4619      	mov	r1, r3
 800b77a:	4610      	mov	r0, r2
 800b77c:	f7fe f997 	bl	8009aae <vListInsert>
}
 800b780:	e010      	b.n	800b7a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b782:	4b0e      	ldr	r3, [pc, #56]	; (800b7bc <prvAddCurrentTaskToDelayedList+0xa0>)
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	4b0a      	ldr	r3, [pc, #40]	; (800b7b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	3304      	adds	r3, #4
 800b78c:	4619      	mov	r1, r3
 800b78e:	4610      	mov	r0, r2
 800b790:	f7fe f98d 	bl	8009aae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b794:	4b0a      	ldr	r3, [pc, #40]	; (800b7c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68ba      	ldr	r2, [r7, #8]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d202      	bcs.n	800b7a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b79e:	4a08      	ldr	r2, [pc, #32]	; (800b7c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	6013      	str	r3, [r2, #0]
}
 800b7a4:	bf00      	nop
 800b7a6:	3710      	adds	r7, #16
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	200012d8 	.word	0x200012d8
 800b7b0:	20000e00 	.word	0x20000e00
 800b7b4:	200012c0 	.word	0x200012c0
 800b7b8:	20001290 	.word	0x20001290
 800b7bc:	2000128c 	.word	0x2000128c
 800b7c0:	200012f4 	.word	0x200012f4

0800b7c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b08a      	sub	sp, #40	; 0x28
 800b7c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b7ce:	f000 fb07 	bl	800bde0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b7d2:	4b1c      	ldr	r3, [pc, #112]	; (800b844 <xTimerCreateTimerTask+0x80>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d021      	beq.n	800b81e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b7e2:	1d3a      	adds	r2, r7, #4
 800b7e4:	f107 0108 	add.w	r1, r7, #8
 800b7e8:	f107 030c 	add.w	r3, r7, #12
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f7fe f8f3 	bl	80099d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b7f2:	6879      	ldr	r1, [r7, #4]
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	9202      	str	r2, [sp, #8]
 800b7fa:	9301      	str	r3, [sp, #4]
 800b7fc:	2302      	movs	r3, #2
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	2300      	movs	r3, #0
 800b802:	460a      	mov	r2, r1
 800b804:	4910      	ldr	r1, [pc, #64]	; (800b848 <xTimerCreateTimerTask+0x84>)
 800b806:	4811      	ldr	r0, [pc, #68]	; (800b84c <xTimerCreateTimerTask+0x88>)
 800b808:	f7ff f8c0 	bl	800a98c <xTaskCreateStatic>
 800b80c:	4603      	mov	r3, r0
 800b80e:	4a10      	ldr	r2, [pc, #64]	; (800b850 <xTimerCreateTimerTask+0x8c>)
 800b810:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b812:	4b0f      	ldr	r3, [pc, #60]	; (800b850 <xTimerCreateTimerTask+0x8c>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d001      	beq.n	800b81e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b81a:	2301      	movs	r3, #1
 800b81c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d10a      	bne.n	800b83a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b828:	f383 8811 	msr	BASEPRI, r3
 800b82c:	f3bf 8f6f 	isb	sy
 800b830:	f3bf 8f4f 	dsb	sy
 800b834:	613b      	str	r3, [r7, #16]
}
 800b836:	bf00      	nop
 800b838:	e7fe      	b.n	800b838 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b83a:	697b      	ldr	r3, [r7, #20]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3718      	adds	r7, #24
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	20001338 	.word	0x20001338
 800b848:	0800f544 	.word	0x0800f544
 800b84c:	0800b989 	.word	0x0800b989
 800b850:	2000133c 	.word	0x2000133c

0800b854 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b08a      	sub	sp, #40	; 0x28
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	607a      	str	r2, [r7, #4]
 800b860:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b862:	2300      	movs	r3, #0
 800b864:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10a      	bne.n	800b882 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b870:	f383 8811 	msr	BASEPRI, r3
 800b874:	f3bf 8f6f 	isb	sy
 800b878:	f3bf 8f4f 	dsb	sy
 800b87c:	623b      	str	r3, [r7, #32]
}
 800b87e:	bf00      	nop
 800b880:	e7fe      	b.n	800b880 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b882:	4b1a      	ldr	r3, [pc, #104]	; (800b8ec <xTimerGenericCommand+0x98>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d02a      	beq.n	800b8e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	2b05      	cmp	r3, #5
 800b89a:	dc18      	bgt.n	800b8ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b89c:	f7ff feb2 	bl	800b604 <xTaskGetSchedulerState>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b02      	cmp	r3, #2
 800b8a4:	d109      	bne.n	800b8ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b8a6:	4b11      	ldr	r3, [pc, #68]	; (800b8ec <xTimerGenericCommand+0x98>)
 800b8a8:	6818      	ldr	r0, [r3, #0]
 800b8aa:	f107 0110 	add.w	r1, r7, #16
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8b2:	f7fe fb07 	bl	8009ec4 <xQueueGenericSend>
 800b8b6:	6278      	str	r0, [r7, #36]	; 0x24
 800b8b8:	e012      	b.n	800b8e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b8ba:	4b0c      	ldr	r3, [pc, #48]	; (800b8ec <xTimerGenericCommand+0x98>)
 800b8bc:	6818      	ldr	r0, [r3, #0]
 800b8be:	f107 0110 	add.w	r1, r7, #16
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f7fe fafd 	bl	8009ec4 <xQueueGenericSend>
 800b8ca:	6278      	str	r0, [r7, #36]	; 0x24
 800b8cc:	e008      	b.n	800b8e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b8ce:	4b07      	ldr	r3, [pc, #28]	; (800b8ec <xTimerGenericCommand+0x98>)
 800b8d0:	6818      	ldr	r0, [r3, #0]
 800b8d2:	f107 0110 	add.w	r1, r7, #16
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	683a      	ldr	r2, [r7, #0]
 800b8da:	f7fe fbf1 	bl	800a0c0 <xQueueGenericSendFromISR>
 800b8de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3728      	adds	r7, #40	; 0x28
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	20001338 	.word	0x20001338

0800b8f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b088      	sub	sp, #32
 800b8f4:	af02      	add	r7, sp, #8
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8fa:	4b22      	ldr	r3, [pc, #136]	; (800b984 <prvProcessExpiredTimer+0x94>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	3304      	adds	r3, #4
 800b908:	4618      	mov	r0, r3
 800b90a:	f7fe f909 	bl	8009b20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b914:	f003 0304 	and.w	r3, r3, #4
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d022      	beq.n	800b962 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	699a      	ldr	r2, [r3, #24]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	18d1      	adds	r1, r2, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	683a      	ldr	r2, [r7, #0]
 800b928:	6978      	ldr	r0, [r7, #20]
 800b92a:	f000 f8d1 	bl	800bad0 <prvInsertTimerInActiveList>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d01f      	beq.n	800b974 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b934:	2300      	movs	r3, #0
 800b936:	9300      	str	r3, [sp, #0]
 800b938:	2300      	movs	r3, #0
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	2100      	movs	r1, #0
 800b93e:	6978      	ldr	r0, [r7, #20]
 800b940:	f7ff ff88 	bl	800b854 <xTimerGenericCommand>
 800b944:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d113      	bne.n	800b974 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b950:	f383 8811 	msr	BASEPRI, r3
 800b954:	f3bf 8f6f 	isb	sy
 800b958:	f3bf 8f4f 	dsb	sy
 800b95c:	60fb      	str	r3, [r7, #12]
}
 800b95e:	bf00      	nop
 800b960:	e7fe      	b.n	800b960 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b968:	f023 0301 	bic.w	r3, r3, #1
 800b96c:	b2da      	uxtb	r2, r3
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	6a1b      	ldr	r3, [r3, #32]
 800b978:	6978      	ldr	r0, [r7, #20]
 800b97a:	4798      	blx	r3
}
 800b97c:	bf00      	nop
 800b97e:	3718      	adds	r7, #24
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	20001330 	.word	0x20001330

0800b988 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b990:	f107 0308 	add.w	r3, r7, #8
 800b994:	4618      	mov	r0, r3
 800b996:	f000 f857 	bl	800ba48 <prvGetNextExpireTime>
 800b99a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	4619      	mov	r1, r3
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f000 f803 	bl	800b9ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b9a6:	f000 f8d5 	bl	800bb54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b9aa:	e7f1      	b.n	800b990 <prvTimerTask+0x8>

0800b9ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b9b6:	f7ff fa29 	bl	800ae0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b9ba:	f107 0308 	add.w	r3, r7, #8
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f000 f866 	bl	800ba90 <prvSampleTimeNow>
 800b9c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d130      	bne.n	800ba2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10a      	bne.n	800b9e8 <prvProcessTimerOrBlockTask+0x3c>
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d806      	bhi.n	800b9e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b9da:	f7ff fa25 	bl	800ae28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b9de:	68f9      	ldr	r1, [r7, #12]
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7ff ff85 	bl	800b8f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b9e6:	e024      	b.n	800ba32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d008      	beq.n	800ba00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b9ee:	4b13      	ldr	r3, [pc, #76]	; (800ba3c <prvProcessTimerOrBlockTask+0x90>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d101      	bne.n	800b9fc <prvProcessTimerOrBlockTask+0x50>
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e000      	b.n	800b9fe <prvProcessTimerOrBlockTask+0x52>
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ba00:	4b0f      	ldr	r3, [pc, #60]	; (800ba40 <prvProcessTimerOrBlockTask+0x94>)
 800ba02:	6818      	ldr	r0, [r3, #0]
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	1ad3      	subs	r3, r2, r3
 800ba0a:	683a      	ldr	r2, [r7, #0]
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	f7fe ff89 	bl	800a924 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ba12:	f7ff fa09 	bl	800ae28 <xTaskResumeAll>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10a      	bne.n	800ba32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ba1c:	4b09      	ldr	r3, [pc, #36]	; (800ba44 <prvProcessTimerOrBlockTask+0x98>)
 800ba1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba22:	601a      	str	r2, [r3, #0]
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	f3bf 8f6f 	isb	sy
}
 800ba2c:	e001      	b.n	800ba32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ba2e:	f7ff f9fb 	bl	800ae28 <xTaskResumeAll>
}
 800ba32:	bf00      	nop
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	20001334 	.word	0x20001334
 800ba40:	20001338 	.word	0x20001338
 800ba44:	e000ed04 	.word	0xe000ed04

0800ba48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b085      	sub	sp, #20
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ba50:	4b0e      	ldr	r3, [pc, #56]	; (800ba8c <prvGetNextExpireTime+0x44>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d101      	bne.n	800ba5e <prvGetNextExpireTime+0x16>
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	e000      	b.n	800ba60 <prvGetNextExpireTime+0x18>
 800ba5e:	2200      	movs	r2, #0
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d105      	bne.n	800ba78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba6c:	4b07      	ldr	r3, [pc, #28]	; (800ba8c <prvGetNextExpireTime+0x44>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	60fb      	str	r3, [r7, #12]
 800ba76:	e001      	b.n	800ba7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3714      	adds	r7, #20
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr
 800ba8a:	bf00      	nop
 800ba8c:	20001330 	.word	0x20001330

0800ba90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ba98:	f7ff fa64 	bl	800af64 <xTaskGetTickCount>
 800ba9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ba9e:	4b0b      	ldr	r3, [pc, #44]	; (800bacc <prvSampleTimeNow+0x3c>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	68fa      	ldr	r2, [r7, #12]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d205      	bcs.n	800bab4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800baa8:	f000 f936 	bl	800bd18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2201      	movs	r2, #1
 800bab0:	601a      	str	r2, [r3, #0]
 800bab2:	e002      	b.n	800baba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800baba:	4a04      	ldr	r2, [pc, #16]	; (800bacc <prvSampleTimeNow+0x3c>)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bac0:	68fb      	ldr	r3, [r7, #12]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	20001340 	.word	0x20001340

0800bad0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
 800badc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bade:	2300      	movs	r3, #0
 800bae0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	68ba      	ldr	r2, [r7, #8]
 800bae6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	68fa      	ldr	r2, [r7, #12]
 800baec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800baee:	68ba      	ldr	r2, [r7, #8]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d812      	bhi.n	800bb1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	1ad2      	subs	r2, r2, r3
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	699b      	ldr	r3, [r3, #24]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d302      	bcc.n	800bb0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bb04:	2301      	movs	r3, #1
 800bb06:	617b      	str	r3, [r7, #20]
 800bb08:	e01b      	b.n	800bb42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bb0a:	4b10      	ldr	r3, [pc, #64]	; (800bb4c <prvInsertTimerInActiveList+0x7c>)
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	3304      	adds	r3, #4
 800bb12:	4619      	mov	r1, r3
 800bb14:	4610      	mov	r0, r2
 800bb16:	f7fd ffca 	bl	8009aae <vListInsert>
 800bb1a:	e012      	b.n	800bb42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d206      	bcs.n	800bb32 <prvInsertTimerInActiveList+0x62>
 800bb24:	68ba      	ldr	r2, [r7, #8]
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d302      	bcc.n	800bb32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	617b      	str	r3, [r7, #20]
 800bb30:	e007      	b.n	800bb42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb32:	4b07      	ldr	r3, [pc, #28]	; (800bb50 <prvInsertTimerInActiveList+0x80>)
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	3304      	adds	r3, #4
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	4610      	mov	r0, r2
 800bb3e:	f7fd ffb6 	bl	8009aae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bb42:	697b      	ldr	r3, [r7, #20]
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3718      	adds	r7, #24
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	20001334 	.word	0x20001334
 800bb50:	20001330 	.word	0x20001330

0800bb54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b08e      	sub	sp, #56	; 0x38
 800bb58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb5a:	e0ca      	b.n	800bcf2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	da18      	bge.n	800bb94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bb62:	1d3b      	adds	r3, r7, #4
 800bb64:	3304      	adds	r3, #4
 800bb66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d10a      	bne.n	800bb84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	61fb      	str	r3, [r7, #28]
}
 800bb80:	bf00      	nop
 800bb82:	e7fe      	b.n	800bb82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb8a:	6850      	ldr	r0, [r2, #4]
 800bb8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb8e:	6892      	ldr	r2, [r2, #8]
 800bb90:	4611      	mov	r1, r2
 800bb92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	f2c0 80ab 	blt.w	800bcf2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba2:	695b      	ldr	r3, [r3, #20]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d004      	beq.n	800bbb2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbaa:	3304      	adds	r3, #4
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7fd ffb7 	bl	8009b20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbb2:	463b      	mov	r3, r7
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7ff ff6b 	bl	800ba90 <prvSampleTimeNow>
 800bbba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2b09      	cmp	r3, #9
 800bbc0:	f200 8096 	bhi.w	800bcf0 <prvProcessReceivedCommands+0x19c>
 800bbc4:	a201      	add	r2, pc, #4	; (adr r2, 800bbcc <prvProcessReceivedCommands+0x78>)
 800bbc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbca:	bf00      	nop
 800bbcc:	0800bbf5 	.word	0x0800bbf5
 800bbd0:	0800bbf5 	.word	0x0800bbf5
 800bbd4:	0800bbf5 	.word	0x0800bbf5
 800bbd8:	0800bc69 	.word	0x0800bc69
 800bbdc:	0800bc7d 	.word	0x0800bc7d
 800bbe0:	0800bcc7 	.word	0x0800bcc7
 800bbe4:	0800bbf5 	.word	0x0800bbf5
 800bbe8:	0800bbf5 	.word	0x0800bbf5
 800bbec:	0800bc69 	.word	0x0800bc69
 800bbf0:	0800bc7d 	.word	0x0800bc7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbfa:	f043 0301 	orr.w	r3, r3, #1
 800bbfe:	b2da      	uxtb	r2, r3
 800bc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0a:	699b      	ldr	r3, [r3, #24]
 800bc0c:	18d1      	adds	r1, r2, r3
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc14:	f7ff ff5c 	bl	800bad0 <prvInsertTimerInActiveList>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d069      	beq.n	800bcf2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc20:	6a1b      	ldr	r3, [r3, #32]
 800bc22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc2c:	f003 0304 	and.w	r3, r3, #4
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d05e      	beq.n	800bcf2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bc34:	68ba      	ldr	r2, [r7, #8]
 800bc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc38:	699b      	ldr	r3, [r3, #24]
 800bc3a:	441a      	add	r2, r3
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	2300      	movs	r3, #0
 800bc42:	2100      	movs	r1, #0
 800bc44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc46:	f7ff fe05 	bl	800b854 <xTimerGenericCommand>
 800bc4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bc4c:	6a3b      	ldr	r3, [r7, #32]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d14f      	bne.n	800bcf2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc56:	f383 8811 	msr	BASEPRI, r3
 800bc5a:	f3bf 8f6f 	isb	sy
 800bc5e:	f3bf 8f4f 	dsb	sy
 800bc62:	61bb      	str	r3, [r7, #24]
}
 800bc64:	bf00      	nop
 800bc66:	e7fe      	b.n	800bc66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc6e:	f023 0301 	bic.w	r3, r3, #1
 800bc72:	b2da      	uxtb	r2, r3
 800bc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bc7a:	e03a      	b.n	800bcf2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc82:	f043 0301 	orr.w	r3, r3, #1
 800bc86:	b2da      	uxtb	r2, r3
 800bc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bc8e:	68ba      	ldr	r2, [r7, #8]
 800bc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc96:	699b      	ldr	r3, [r3, #24]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d10a      	bne.n	800bcb2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca0:	f383 8811 	msr	BASEPRI, r3
 800bca4:	f3bf 8f6f 	isb	sy
 800bca8:	f3bf 8f4f 	dsb	sy
 800bcac:	617b      	str	r3, [r7, #20]
}
 800bcae:	bf00      	nop
 800bcb0:	e7fe      	b.n	800bcb0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb4:	699a      	ldr	r2, [r3, #24]
 800bcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb8:	18d1      	adds	r1, r2, r3
 800bcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcc0:	f7ff ff06 	bl	800bad0 <prvInsertTimerInActiveList>
					break;
 800bcc4:	e015      	b.n	800bcf2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bccc:	f003 0302 	and.w	r3, r3, #2
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d103      	bne.n	800bcdc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bcd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcd6:	f000 fbdb 	bl	800c490 <vPortFree>
 800bcda:	e00a      	b.n	800bcf2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bcdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bce2:	f023 0301 	bic.w	r3, r3, #1
 800bce6:	b2da      	uxtb	r2, r3
 800bce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bcee:	e000      	b.n	800bcf2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800bcf0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bcf2:	4b08      	ldr	r3, [pc, #32]	; (800bd14 <prvProcessReceivedCommands+0x1c0>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	1d39      	adds	r1, r7, #4
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7fe fb08 	bl	800a310 <xQueueReceive>
 800bd00:	4603      	mov	r3, r0
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	f47f af2a 	bne.w	800bb5c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bd08:	bf00      	nop
 800bd0a:	bf00      	nop
 800bd0c:	3730      	adds	r7, #48	; 0x30
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	20001338 	.word	0x20001338

0800bd18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b088      	sub	sp, #32
 800bd1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd1e:	e048      	b.n	800bdb2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd20:	4b2d      	ldr	r3, [pc, #180]	; (800bdd8 <prvSwitchTimerLists+0xc0>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd2a:	4b2b      	ldr	r3, [pc, #172]	; (800bdd8 <prvSwitchTimerLists+0xc0>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	68db      	ldr	r3, [r3, #12]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	3304      	adds	r3, #4
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7fd fef1 	bl	8009b20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	6a1b      	ldr	r3, [r3, #32]
 800bd42:	68f8      	ldr	r0, [r7, #12]
 800bd44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd4c:	f003 0304 	and.w	r3, r3, #4
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d02e      	beq.n	800bdb2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	699b      	ldr	r3, [r3, #24]
 800bd58:	693a      	ldr	r2, [r7, #16]
 800bd5a:	4413      	add	r3, r2
 800bd5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bd5e:	68ba      	ldr	r2, [r7, #8]
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d90e      	bls.n	800bd84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	68ba      	ldr	r2, [r7, #8]
 800bd6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	68fa      	ldr	r2, [r7, #12]
 800bd70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd72:	4b19      	ldr	r3, [pc, #100]	; (800bdd8 <prvSwitchTimerLists+0xc0>)
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	3304      	adds	r3, #4
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	f7fd fe96 	bl	8009aae <vListInsert>
 800bd82:	e016      	b.n	800bdb2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd84:	2300      	movs	r3, #0
 800bd86:	9300      	str	r3, [sp, #0]
 800bd88:	2300      	movs	r3, #0
 800bd8a:	693a      	ldr	r2, [r7, #16]
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	68f8      	ldr	r0, [r7, #12]
 800bd90:	f7ff fd60 	bl	800b854 <xTimerGenericCommand>
 800bd94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d10a      	bne.n	800bdb2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda0:	f383 8811 	msr	BASEPRI, r3
 800bda4:	f3bf 8f6f 	isb	sy
 800bda8:	f3bf 8f4f 	dsb	sy
 800bdac:	603b      	str	r3, [r7, #0]
}
 800bdae:	bf00      	nop
 800bdb0:	e7fe      	b.n	800bdb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bdb2:	4b09      	ldr	r3, [pc, #36]	; (800bdd8 <prvSwitchTimerLists+0xc0>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d1b1      	bne.n	800bd20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bdbc:	4b06      	ldr	r3, [pc, #24]	; (800bdd8 <prvSwitchTimerLists+0xc0>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bdc2:	4b06      	ldr	r3, [pc, #24]	; (800bddc <prvSwitchTimerLists+0xc4>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4a04      	ldr	r2, [pc, #16]	; (800bdd8 <prvSwitchTimerLists+0xc0>)
 800bdc8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bdca:	4a04      	ldr	r2, [pc, #16]	; (800bddc <prvSwitchTimerLists+0xc4>)
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	6013      	str	r3, [r2, #0]
}
 800bdd0:	bf00      	nop
 800bdd2:	3718      	adds	r7, #24
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	20001330 	.word	0x20001330
 800bddc:	20001334 	.word	0x20001334

0800bde0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bde6:	f000 f965 	bl	800c0b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bdea:	4b15      	ldr	r3, [pc, #84]	; (800be40 <prvCheckForValidListAndQueue+0x60>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d120      	bne.n	800be34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bdf2:	4814      	ldr	r0, [pc, #80]	; (800be44 <prvCheckForValidListAndQueue+0x64>)
 800bdf4:	f7fd fe0a 	bl	8009a0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bdf8:	4813      	ldr	r0, [pc, #76]	; (800be48 <prvCheckForValidListAndQueue+0x68>)
 800bdfa:	f7fd fe07 	bl	8009a0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bdfe:	4b13      	ldr	r3, [pc, #76]	; (800be4c <prvCheckForValidListAndQueue+0x6c>)
 800be00:	4a10      	ldr	r2, [pc, #64]	; (800be44 <prvCheckForValidListAndQueue+0x64>)
 800be02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800be04:	4b12      	ldr	r3, [pc, #72]	; (800be50 <prvCheckForValidListAndQueue+0x70>)
 800be06:	4a10      	ldr	r2, [pc, #64]	; (800be48 <prvCheckForValidListAndQueue+0x68>)
 800be08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800be0a:	2300      	movs	r3, #0
 800be0c:	9300      	str	r3, [sp, #0]
 800be0e:	4b11      	ldr	r3, [pc, #68]	; (800be54 <prvCheckForValidListAndQueue+0x74>)
 800be10:	4a11      	ldr	r2, [pc, #68]	; (800be58 <prvCheckForValidListAndQueue+0x78>)
 800be12:	2110      	movs	r1, #16
 800be14:	200a      	movs	r0, #10
 800be16:	f7fd ff15 	bl	8009c44 <xQueueGenericCreateStatic>
 800be1a:	4603      	mov	r3, r0
 800be1c:	4a08      	ldr	r2, [pc, #32]	; (800be40 <prvCheckForValidListAndQueue+0x60>)
 800be1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800be20:	4b07      	ldr	r3, [pc, #28]	; (800be40 <prvCheckForValidListAndQueue+0x60>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d005      	beq.n	800be34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800be28:	4b05      	ldr	r3, [pc, #20]	; (800be40 <prvCheckForValidListAndQueue+0x60>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	490b      	ldr	r1, [pc, #44]	; (800be5c <prvCheckForValidListAndQueue+0x7c>)
 800be2e:	4618      	mov	r0, r3
 800be30:	f7fe fd24 	bl	800a87c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be34:	f000 f96e 	bl	800c114 <vPortExitCritical>
}
 800be38:	bf00      	nop
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	20001338 	.word	0x20001338
 800be44:	20001308 	.word	0x20001308
 800be48:	2000131c 	.word	0x2000131c
 800be4c:	20001330 	.word	0x20001330
 800be50:	20001334 	.word	0x20001334
 800be54:	200013e4 	.word	0x200013e4
 800be58:	20001344 	.word	0x20001344
 800be5c:	0800f54c 	.word	0x0800f54c

0800be60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be60:	b480      	push	{r7}
 800be62:	b085      	sub	sp, #20
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	3b04      	subs	r3, #4
 800be70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800be78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	3b04      	subs	r3, #4
 800be7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	f023 0201 	bic.w	r2, r3, #1
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	3b04      	subs	r3, #4
 800be8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800be90:	4a0c      	ldr	r2, [pc, #48]	; (800bec4 <pxPortInitialiseStack+0x64>)
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	3b14      	subs	r3, #20
 800be9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	3b04      	subs	r3, #4
 800bea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f06f 0202 	mvn.w	r2, #2
 800beae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	3b20      	subs	r3, #32
 800beb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800beb6:	68fb      	ldr	r3, [r7, #12]
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3714      	adds	r7, #20
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr
 800bec4:	0800bec9 	.word	0x0800bec9

0800bec8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bece:	2300      	movs	r3, #0
 800bed0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bed2:	4b12      	ldr	r3, [pc, #72]	; (800bf1c <prvTaskExitError+0x54>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beda:	d00a      	beq.n	800bef2 <prvTaskExitError+0x2a>
	__asm volatile
 800bedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee0:	f383 8811 	msr	BASEPRI, r3
 800bee4:	f3bf 8f6f 	isb	sy
 800bee8:	f3bf 8f4f 	dsb	sy
 800beec:	60fb      	str	r3, [r7, #12]
}
 800beee:	bf00      	nop
 800bef0:	e7fe      	b.n	800bef0 <prvTaskExitError+0x28>
	__asm volatile
 800bef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef6:	f383 8811 	msr	BASEPRI, r3
 800befa:	f3bf 8f6f 	isb	sy
 800befe:	f3bf 8f4f 	dsb	sy
 800bf02:	60bb      	str	r3, [r7, #8]
}
 800bf04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf06:	bf00      	nop
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d0fc      	beq.n	800bf08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf0e:	bf00      	nop
 800bf10:	bf00      	nop
 800bf12:	3714      	adds	r7, #20
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr
 800bf1c:	200001c4 	.word	0x200001c4

0800bf20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bf20:	4b07      	ldr	r3, [pc, #28]	; (800bf40 <pxCurrentTCBConst2>)
 800bf22:	6819      	ldr	r1, [r3, #0]
 800bf24:	6808      	ldr	r0, [r1, #0]
 800bf26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf2a:	f380 8809 	msr	PSP, r0
 800bf2e:	f3bf 8f6f 	isb	sy
 800bf32:	f04f 0000 	mov.w	r0, #0
 800bf36:	f380 8811 	msr	BASEPRI, r0
 800bf3a:	4770      	bx	lr
 800bf3c:	f3af 8000 	nop.w

0800bf40 <pxCurrentTCBConst2>:
 800bf40:	20000e00 	.word	0x20000e00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf44:	bf00      	nop
 800bf46:	bf00      	nop

0800bf48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bf48:	4808      	ldr	r0, [pc, #32]	; (800bf6c <prvPortStartFirstTask+0x24>)
 800bf4a:	6800      	ldr	r0, [r0, #0]
 800bf4c:	6800      	ldr	r0, [r0, #0]
 800bf4e:	f380 8808 	msr	MSP, r0
 800bf52:	f04f 0000 	mov.w	r0, #0
 800bf56:	f380 8814 	msr	CONTROL, r0
 800bf5a:	b662      	cpsie	i
 800bf5c:	b661      	cpsie	f
 800bf5e:	f3bf 8f4f 	dsb	sy
 800bf62:	f3bf 8f6f 	isb	sy
 800bf66:	df00      	svc	0
 800bf68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf6a:	bf00      	nop
 800bf6c:	e000ed08 	.word	0xe000ed08

0800bf70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b086      	sub	sp, #24
 800bf74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bf76:	4b46      	ldr	r3, [pc, #280]	; (800c090 <xPortStartScheduler+0x120>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4a46      	ldr	r2, [pc, #280]	; (800c094 <xPortStartScheduler+0x124>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d10a      	bne.n	800bf96 <xPortStartScheduler+0x26>
	__asm volatile
 800bf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf84:	f383 8811 	msr	BASEPRI, r3
 800bf88:	f3bf 8f6f 	isb	sy
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	613b      	str	r3, [r7, #16]
}
 800bf92:	bf00      	nop
 800bf94:	e7fe      	b.n	800bf94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bf96:	4b3e      	ldr	r3, [pc, #248]	; (800c090 <xPortStartScheduler+0x120>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a3f      	ldr	r2, [pc, #252]	; (800c098 <xPortStartScheduler+0x128>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d10a      	bne.n	800bfb6 <xPortStartScheduler+0x46>
	__asm volatile
 800bfa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa4:	f383 8811 	msr	BASEPRI, r3
 800bfa8:	f3bf 8f6f 	isb	sy
 800bfac:	f3bf 8f4f 	dsb	sy
 800bfb0:	60fb      	str	r3, [r7, #12]
}
 800bfb2:	bf00      	nop
 800bfb4:	e7fe      	b.n	800bfb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bfb6:	4b39      	ldr	r3, [pc, #228]	; (800c09c <xPortStartScheduler+0x12c>)
 800bfb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	b2db      	uxtb	r3, r3
 800bfc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	22ff      	movs	r2, #255	; 0xff
 800bfc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bfd0:	78fb      	ldrb	r3, [r7, #3]
 800bfd2:	b2db      	uxtb	r3, r3
 800bfd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bfd8:	b2da      	uxtb	r2, r3
 800bfda:	4b31      	ldr	r3, [pc, #196]	; (800c0a0 <xPortStartScheduler+0x130>)
 800bfdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bfde:	4b31      	ldr	r3, [pc, #196]	; (800c0a4 <xPortStartScheduler+0x134>)
 800bfe0:	2207      	movs	r2, #7
 800bfe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bfe4:	e009      	b.n	800bffa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bfe6:	4b2f      	ldr	r3, [pc, #188]	; (800c0a4 <xPortStartScheduler+0x134>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	3b01      	subs	r3, #1
 800bfec:	4a2d      	ldr	r2, [pc, #180]	; (800c0a4 <xPortStartScheduler+0x134>)
 800bfee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bff0:	78fb      	ldrb	r3, [r7, #3]
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	005b      	lsls	r3, r3, #1
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bffa:	78fb      	ldrb	r3, [r7, #3]
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c002:	2b80      	cmp	r3, #128	; 0x80
 800c004:	d0ef      	beq.n	800bfe6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c006:	4b27      	ldr	r3, [pc, #156]	; (800c0a4 <xPortStartScheduler+0x134>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f1c3 0307 	rsb	r3, r3, #7
 800c00e:	2b04      	cmp	r3, #4
 800c010:	d00a      	beq.n	800c028 <xPortStartScheduler+0xb8>
	__asm volatile
 800c012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c016:	f383 8811 	msr	BASEPRI, r3
 800c01a:	f3bf 8f6f 	isb	sy
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	60bb      	str	r3, [r7, #8]
}
 800c024:	bf00      	nop
 800c026:	e7fe      	b.n	800c026 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c028:	4b1e      	ldr	r3, [pc, #120]	; (800c0a4 <xPortStartScheduler+0x134>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	021b      	lsls	r3, r3, #8
 800c02e:	4a1d      	ldr	r2, [pc, #116]	; (800c0a4 <xPortStartScheduler+0x134>)
 800c030:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c032:	4b1c      	ldr	r3, [pc, #112]	; (800c0a4 <xPortStartScheduler+0x134>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c03a:	4a1a      	ldr	r2, [pc, #104]	; (800c0a4 <xPortStartScheduler+0x134>)
 800c03c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	b2da      	uxtb	r2, r3
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c046:	4b18      	ldr	r3, [pc, #96]	; (800c0a8 <xPortStartScheduler+0x138>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a17      	ldr	r2, [pc, #92]	; (800c0a8 <xPortStartScheduler+0x138>)
 800c04c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c050:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c052:	4b15      	ldr	r3, [pc, #84]	; (800c0a8 <xPortStartScheduler+0x138>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4a14      	ldr	r2, [pc, #80]	; (800c0a8 <xPortStartScheduler+0x138>)
 800c058:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c05c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c05e:	f000 f8dd 	bl	800c21c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c062:	4b12      	ldr	r3, [pc, #72]	; (800c0ac <xPortStartScheduler+0x13c>)
 800c064:	2200      	movs	r2, #0
 800c066:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c068:	f000 f8fc 	bl	800c264 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c06c:	4b10      	ldr	r3, [pc, #64]	; (800c0b0 <xPortStartScheduler+0x140>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a0f      	ldr	r2, [pc, #60]	; (800c0b0 <xPortStartScheduler+0x140>)
 800c072:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c076:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c078:	f7ff ff66 	bl	800bf48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c07c:	f7ff f83c 	bl	800b0f8 <vTaskSwitchContext>
	prvTaskExitError();
 800c080:	f7ff ff22 	bl	800bec8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c084:	2300      	movs	r3, #0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3718      	adds	r7, #24
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	e000ed00 	.word	0xe000ed00
 800c094:	410fc271 	.word	0x410fc271
 800c098:	410fc270 	.word	0x410fc270
 800c09c:	e000e400 	.word	0xe000e400
 800c0a0:	20001434 	.word	0x20001434
 800c0a4:	20001438 	.word	0x20001438
 800c0a8:	e000ed20 	.word	0xe000ed20
 800c0ac:	200001c4 	.word	0x200001c4
 800c0b0:	e000ef34 	.word	0xe000ef34

0800c0b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
	__asm volatile
 800c0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0be:	f383 8811 	msr	BASEPRI, r3
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	f3bf 8f4f 	dsb	sy
 800c0ca:	607b      	str	r3, [r7, #4]
}
 800c0cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c0ce:	4b0f      	ldr	r3, [pc, #60]	; (800c10c <vPortEnterCritical+0x58>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	4a0d      	ldr	r2, [pc, #52]	; (800c10c <vPortEnterCritical+0x58>)
 800c0d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c0d8:	4b0c      	ldr	r3, [pc, #48]	; (800c10c <vPortEnterCritical+0x58>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	d10f      	bne.n	800c100 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c0e0:	4b0b      	ldr	r3, [pc, #44]	; (800c110 <vPortEnterCritical+0x5c>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00a      	beq.n	800c100 <vPortEnterCritical+0x4c>
	__asm volatile
 800c0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ee:	f383 8811 	msr	BASEPRI, r3
 800c0f2:	f3bf 8f6f 	isb	sy
 800c0f6:	f3bf 8f4f 	dsb	sy
 800c0fa:	603b      	str	r3, [r7, #0]
}
 800c0fc:	bf00      	nop
 800c0fe:	e7fe      	b.n	800c0fe <vPortEnterCritical+0x4a>
	}
}
 800c100:	bf00      	nop
 800c102:	370c      	adds	r7, #12
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr
 800c10c:	200001c4 	.word	0x200001c4
 800c110:	e000ed04 	.word	0xe000ed04

0800c114 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c11a:	4b12      	ldr	r3, [pc, #72]	; (800c164 <vPortExitCritical+0x50>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d10a      	bne.n	800c138 <vPortExitCritical+0x24>
	__asm volatile
 800c122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c126:	f383 8811 	msr	BASEPRI, r3
 800c12a:	f3bf 8f6f 	isb	sy
 800c12e:	f3bf 8f4f 	dsb	sy
 800c132:	607b      	str	r3, [r7, #4]
}
 800c134:	bf00      	nop
 800c136:	e7fe      	b.n	800c136 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c138:	4b0a      	ldr	r3, [pc, #40]	; (800c164 <vPortExitCritical+0x50>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	3b01      	subs	r3, #1
 800c13e:	4a09      	ldr	r2, [pc, #36]	; (800c164 <vPortExitCritical+0x50>)
 800c140:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c142:	4b08      	ldr	r3, [pc, #32]	; (800c164 <vPortExitCritical+0x50>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d105      	bne.n	800c156 <vPortExitCritical+0x42>
 800c14a:	2300      	movs	r3, #0
 800c14c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	f383 8811 	msr	BASEPRI, r3
}
 800c154:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c156:	bf00      	nop
 800c158:	370c      	adds	r7, #12
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	200001c4 	.word	0x200001c4
	...

0800c170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c170:	f3ef 8009 	mrs	r0, PSP
 800c174:	f3bf 8f6f 	isb	sy
 800c178:	4b15      	ldr	r3, [pc, #84]	; (800c1d0 <pxCurrentTCBConst>)
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	f01e 0f10 	tst.w	lr, #16
 800c180:	bf08      	it	eq
 800c182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18a:	6010      	str	r0, [r2, #0]
 800c18c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c190:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c194:	f380 8811 	msr	BASEPRI, r0
 800c198:	f3bf 8f4f 	dsb	sy
 800c19c:	f3bf 8f6f 	isb	sy
 800c1a0:	f7fe ffaa 	bl	800b0f8 <vTaskSwitchContext>
 800c1a4:	f04f 0000 	mov.w	r0, #0
 800c1a8:	f380 8811 	msr	BASEPRI, r0
 800c1ac:	bc09      	pop	{r0, r3}
 800c1ae:	6819      	ldr	r1, [r3, #0]
 800c1b0:	6808      	ldr	r0, [r1, #0]
 800c1b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b6:	f01e 0f10 	tst.w	lr, #16
 800c1ba:	bf08      	it	eq
 800c1bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c1c0:	f380 8809 	msr	PSP, r0
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	f3af 8000 	nop.w

0800c1d0 <pxCurrentTCBConst>:
 800c1d0:	20000e00 	.word	0x20000e00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c1d4:	bf00      	nop
 800c1d6:	bf00      	nop

0800c1d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e2:	f383 8811 	msr	BASEPRI, r3
 800c1e6:	f3bf 8f6f 	isb	sy
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	607b      	str	r3, [r7, #4]
}
 800c1f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c1f2:	f7fe fec7 	bl	800af84 <xTaskIncrementTick>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d003      	beq.n	800c204 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c1fc:	4b06      	ldr	r3, [pc, #24]	; (800c218 <xPortSysTickHandler+0x40>)
 800c1fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c202:	601a      	str	r2, [r3, #0]
 800c204:	2300      	movs	r3, #0
 800c206:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	f383 8811 	msr	BASEPRI, r3
}
 800c20e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c210:	bf00      	nop
 800c212:	3708      	adds	r7, #8
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}
 800c218:	e000ed04 	.word	0xe000ed04

0800c21c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c21c:	b480      	push	{r7}
 800c21e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c220:	4b0b      	ldr	r3, [pc, #44]	; (800c250 <vPortSetupTimerInterrupt+0x34>)
 800c222:	2200      	movs	r2, #0
 800c224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c226:	4b0b      	ldr	r3, [pc, #44]	; (800c254 <vPortSetupTimerInterrupt+0x38>)
 800c228:	2200      	movs	r2, #0
 800c22a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c22c:	4b0a      	ldr	r3, [pc, #40]	; (800c258 <vPortSetupTimerInterrupt+0x3c>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4a0a      	ldr	r2, [pc, #40]	; (800c25c <vPortSetupTimerInterrupt+0x40>)
 800c232:	fba2 2303 	umull	r2, r3, r2, r3
 800c236:	099b      	lsrs	r3, r3, #6
 800c238:	4a09      	ldr	r2, [pc, #36]	; (800c260 <vPortSetupTimerInterrupt+0x44>)
 800c23a:	3b01      	subs	r3, #1
 800c23c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c23e:	4b04      	ldr	r3, [pc, #16]	; (800c250 <vPortSetupTimerInterrupt+0x34>)
 800c240:	2207      	movs	r2, #7
 800c242:	601a      	str	r2, [r3, #0]
}
 800c244:	bf00      	nop
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	e000e010 	.word	0xe000e010
 800c254:	e000e018 	.word	0xe000e018
 800c258:	200001b8 	.word	0x200001b8
 800c25c:	10624dd3 	.word	0x10624dd3
 800c260:	e000e014 	.word	0xe000e014

0800c264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c264:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c274 <vPortEnableVFP+0x10>
 800c268:	6801      	ldr	r1, [r0, #0]
 800c26a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c26e:	6001      	str	r1, [r0, #0]
 800c270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c272:	bf00      	nop
 800c274:	e000ed88 	.word	0xe000ed88

0800c278 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c278:	b480      	push	{r7}
 800c27a:	b085      	sub	sp, #20
 800c27c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c27e:	f3ef 8305 	mrs	r3, IPSR
 800c282:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2b0f      	cmp	r3, #15
 800c288:	d914      	bls.n	800c2b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c28a:	4a17      	ldr	r2, [pc, #92]	; (800c2e8 <vPortValidateInterruptPriority+0x70>)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	4413      	add	r3, r2
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c294:	4b15      	ldr	r3, [pc, #84]	; (800c2ec <vPortValidateInterruptPriority+0x74>)
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	7afa      	ldrb	r2, [r7, #11]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d20a      	bcs.n	800c2b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a2:	f383 8811 	msr	BASEPRI, r3
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	f3bf 8f4f 	dsb	sy
 800c2ae:	607b      	str	r3, [r7, #4]
}
 800c2b0:	bf00      	nop
 800c2b2:	e7fe      	b.n	800c2b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c2b4:	4b0e      	ldr	r3, [pc, #56]	; (800c2f0 <vPortValidateInterruptPriority+0x78>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c2bc:	4b0d      	ldr	r3, [pc, #52]	; (800c2f4 <vPortValidateInterruptPriority+0x7c>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d90a      	bls.n	800c2da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c8:	f383 8811 	msr	BASEPRI, r3
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	f3bf 8f4f 	dsb	sy
 800c2d4:	603b      	str	r3, [r7, #0]
}
 800c2d6:	bf00      	nop
 800c2d8:	e7fe      	b.n	800c2d8 <vPortValidateInterruptPriority+0x60>
	}
 800c2da:	bf00      	nop
 800c2dc:	3714      	adds	r7, #20
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr
 800c2e6:	bf00      	nop
 800c2e8:	e000e3f0 	.word	0xe000e3f0
 800c2ec:	20001434 	.word	0x20001434
 800c2f0:	e000ed0c 	.word	0xe000ed0c
 800c2f4:	20001438 	.word	0x20001438

0800c2f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b08a      	sub	sp, #40	; 0x28
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c300:	2300      	movs	r3, #0
 800c302:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c304:	f7fe fd82 	bl	800ae0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c308:	4b5b      	ldr	r3, [pc, #364]	; (800c478 <pvPortMalloc+0x180>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d101      	bne.n	800c314 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c310:	f000 f920 	bl	800c554 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c314:	4b59      	ldr	r3, [pc, #356]	; (800c47c <pvPortMalloc+0x184>)
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	4013      	ands	r3, r2
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	f040 8093 	bne.w	800c448 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d01d      	beq.n	800c364 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c328:	2208      	movs	r2, #8
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4413      	add	r3, r2
 800c32e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f003 0307 	and.w	r3, r3, #7
 800c336:	2b00      	cmp	r3, #0
 800c338:	d014      	beq.n	800c364 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f023 0307 	bic.w	r3, r3, #7
 800c340:	3308      	adds	r3, #8
 800c342:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f003 0307 	and.w	r3, r3, #7
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d00a      	beq.n	800c364 <pvPortMalloc+0x6c>
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	617b      	str	r3, [r7, #20]
}
 800c360:	bf00      	nop
 800c362:	e7fe      	b.n	800c362 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d06e      	beq.n	800c448 <pvPortMalloc+0x150>
 800c36a:	4b45      	ldr	r3, [pc, #276]	; (800c480 <pvPortMalloc+0x188>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	429a      	cmp	r2, r3
 800c372:	d869      	bhi.n	800c448 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c374:	4b43      	ldr	r3, [pc, #268]	; (800c484 <pvPortMalloc+0x18c>)
 800c376:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c378:	4b42      	ldr	r3, [pc, #264]	; (800c484 <pvPortMalloc+0x18c>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c37e:	e004      	b.n	800c38a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c382:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	429a      	cmp	r2, r3
 800c392:	d903      	bls.n	800c39c <pvPortMalloc+0xa4>
 800c394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d1f1      	bne.n	800c380 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c39c:	4b36      	ldr	r3, [pc, #216]	; (800c478 <pvPortMalloc+0x180>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d050      	beq.n	800c448 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c3a6:	6a3b      	ldr	r3, [r7, #32]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2208      	movs	r2, #8
 800c3ac:	4413      	add	r3, r2
 800c3ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	6a3b      	ldr	r3, [r7, #32]
 800c3b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ba:	685a      	ldr	r2, [r3, #4]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	1ad2      	subs	r2, r2, r3
 800c3c0:	2308      	movs	r3, #8
 800c3c2:	005b      	lsls	r3, r3, #1
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d91f      	bls.n	800c408 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c3c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	f003 0307 	and.w	r3, r3, #7
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00a      	beq.n	800c3f0 <pvPortMalloc+0xf8>
	__asm volatile
 800c3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3de:	f383 8811 	msr	BASEPRI, r3
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	f3bf 8f4f 	dsb	sy
 800c3ea:	613b      	str	r3, [r7, #16]
}
 800c3ec:	bf00      	nop
 800c3ee:	e7fe      	b.n	800c3ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f2:	685a      	ldr	r2, [r3, #4]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	1ad2      	subs	r2, r2, r3
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c402:	69b8      	ldr	r0, [r7, #24]
 800c404:	f000 f908 	bl	800c618 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c408:	4b1d      	ldr	r3, [pc, #116]	; (800c480 <pvPortMalloc+0x188>)
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	1ad3      	subs	r3, r2, r3
 800c412:	4a1b      	ldr	r2, [pc, #108]	; (800c480 <pvPortMalloc+0x188>)
 800c414:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c416:	4b1a      	ldr	r3, [pc, #104]	; (800c480 <pvPortMalloc+0x188>)
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	4b1b      	ldr	r3, [pc, #108]	; (800c488 <pvPortMalloc+0x190>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d203      	bcs.n	800c42a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c422:	4b17      	ldr	r3, [pc, #92]	; (800c480 <pvPortMalloc+0x188>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a18      	ldr	r2, [pc, #96]	; (800c488 <pvPortMalloc+0x190>)
 800c428:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42c:	685a      	ldr	r2, [r3, #4]
 800c42e:	4b13      	ldr	r3, [pc, #76]	; (800c47c <pvPortMalloc+0x184>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	431a      	orrs	r2, r3
 800c434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c436:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43a:	2200      	movs	r2, #0
 800c43c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c43e:	4b13      	ldr	r3, [pc, #76]	; (800c48c <pvPortMalloc+0x194>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	3301      	adds	r3, #1
 800c444:	4a11      	ldr	r2, [pc, #68]	; (800c48c <pvPortMalloc+0x194>)
 800c446:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c448:	f7fe fcee 	bl	800ae28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	f003 0307 	and.w	r3, r3, #7
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00a      	beq.n	800c46c <pvPortMalloc+0x174>
	__asm volatile
 800c456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45a:	f383 8811 	msr	BASEPRI, r3
 800c45e:	f3bf 8f6f 	isb	sy
 800c462:	f3bf 8f4f 	dsb	sy
 800c466:	60fb      	str	r3, [r7, #12]
}
 800c468:	bf00      	nop
 800c46a:	e7fe      	b.n	800c46a <pvPortMalloc+0x172>
	return pvReturn;
 800c46c:	69fb      	ldr	r3, [r7, #28]
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3728      	adds	r7, #40	; 0x28
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	200027cc 	.word	0x200027cc
 800c47c:	200027e0 	.word	0x200027e0
 800c480:	200027d0 	.word	0x200027d0
 800c484:	200027c4 	.word	0x200027c4
 800c488:	200027d4 	.word	0x200027d4
 800c48c:	200027d8 	.word	0x200027d8

0800c490 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b086      	sub	sp, #24
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d04d      	beq.n	800c53e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c4a2:	2308      	movs	r3, #8
 800c4a4:	425b      	negs	r3, r3
 800c4a6:	697a      	ldr	r2, [r7, #20]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	685a      	ldr	r2, [r3, #4]
 800c4b4:	4b24      	ldr	r3, [pc, #144]	; (800c548 <vPortFree+0xb8>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4013      	ands	r3, r2
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d10a      	bne.n	800c4d4 <vPortFree+0x44>
	__asm volatile
 800c4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c2:	f383 8811 	msr	BASEPRI, r3
 800c4c6:	f3bf 8f6f 	isb	sy
 800c4ca:	f3bf 8f4f 	dsb	sy
 800c4ce:	60fb      	str	r3, [r7, #12]
}
 800c4d0:	bf00      	nop
 800c4d2:	e7fe      	b.n	800c4d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d00a      	beq.n	800c4f2 <vPortFree+0x62>
	__asm volatile
 800c4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e0:	f383 8811 	msr	BASEPRI, r3
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	60bb      	str	r3, [r7, #8]
}
 800c4ee:	bf00      	nop
 800c4f0:	e7fe      	b.n	800c4f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	685a      	ldr	r2, [r3, #4]
 800c4f6:	4b14      	ldr	r3, [pc, #80]	; (800c548 <vPortFree+0xb8>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4013      	ands	r3, r2
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d01e      	beq.n	800c53e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d11a      	bne.n	800c53e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	685a      	ldr	r2, [r3, #4]
 800c50c:	4b0e      	ldr	r3, [pc, #56]	; (800c548 <vPortFree+0xb8>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	43db      	mvns	r3, r3
 800c512:	401a      	ands	r2, r3
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c518:	f7fe fc78 	bl	800ae0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	685a      	ldr	r2, [r3, #4]
 800c520:	4b0a      	ldr	r3, [pc, #40]	; (800c54c <vPortFree+0xbc>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4413      	add	r3, r2
 800c526:	4a09      	ldr	r2, [pc, #36]	; (800c54c <vPortFree+0xbc>)
 800c528:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c52a:	6938      	ldr	r0, [r7, #16]
 800c52c:	f000 f874 	bl	800c618 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c530:	4b07      	ldr	r3, [pc, #28]	; (800c550 <vPortFree+0xc0>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	3301      	adds	r3, #1
 800c536:	4a06      	ldr	r2, [pc, #24]	; (800c550 <vPortFree+0xc0>)
 800c538:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c53a:	f7fe fc75 	bl	800ae28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c53e:	bf00      	nop
 800c540:	3718      	adds	r7, #24
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	200027e0 	.word	0x200027e0
 800c54c:	200027d0 	.word	0x200027d0
 800c550:	200027dc 	.word	0x200027dc

0800c554 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c554:	b480      	push	{r7}
 800c556:	b085      	sub	sp, #20
 800c558:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c55a:	f241 3388 	movw	r3, #5000	; 0x1388
 800c55e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c560:	4b27      	ldr	r3, [pc, #156]	; (800c600 <prvHeapInit+0xac>)
 800c562:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f003 0307 	and.w	r3, r3, #7
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00c      	beq.n	800c588 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	3307      	adds	r3, #7
 800c572:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f023 0307 	bic.w	r3, r3, #7
 800c57a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c57c:	68ba      	ldr	r2, [r7, #8]
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	1ad3      	subs	r3, r2, r3
 800c582:	4a1f      	ldr	r2, [pc, #124]	; (800c600 <prvHeapInit+0xac>)
 800c584:	4413      	add	r3, r2
 800c586:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c58c:	4a1d      	ldr	r2, [pc, #116]	; (800c604 <prvHeapInit+0xb0>)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c592:	4b1c      	ldr	r3, [pc, #112]	; (800c604 <prvHeapInit+0xb0>)
 800c594:	2200      	movs	r2, #0
 800c596:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	68ba      	ldr	r2, [r7, #8]
 800c59c:	4413      	add	r3, r2
 800c59e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c5a0:	2208      	movs	r2, #8
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	1a9b      	subs	r3, r3, r2
 800c5a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f023 0307 	bic.w	r3, r3, #7
 800c5ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	4a15      	ldr	r2, [pc, #84]	; (800c608 <prvHeapInit+0xb4>)
 800c5b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c5b6:	4b14      	ldr	r3, [pc, #80]	; (800c608 <prvHeapInit+0xb4>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c5be:	4b12      	ldr	r3, [pc, #72]	; (800c608 <prvHeapInit+0xb4>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	68fa      	ldr	r2, [r7, #12]
 800c5ce:	1ad2      	subs	r2, r2, r3
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c5d4:	4b0c      	ldr	r3, [pc, #48]	; (800c608 <prvHeapInit+0xb4>)
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	4a0a      	ldr	r2, [pc, #40]	; (800c60c <prvHeapInit+0xb8>)
 800c5e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	4a09      	ldr	r2, [pc, #36]	; (800c610 <prvHeapInit+0xbc>)
 800c5ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c5ec:	4b09      	ldr	r3, [pc, #36]	; (800c614 <prvHeapInit+0xc0>)
 800c5ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c5f2:	601a      	str	r2, [r3, #0]
}
 800c5f4:	bf00      	nop
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr
 800c600:	2000143c 	.word	0x2000143c
 800c604:	200027c4 	.word	0x200027c4
 800c608:	200027cc 	.word	0x200027cc
 800c60c:	200027d4 	.word	0x200027d4
 800c610:	200027d0 	.word	0x200027d0
 800c614:	200027e0 	.word	0x200027e0

0800c618 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c618:	b480      	push	{r7}
 800c61a:	b085      	sub	sp, #20
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c620:	4b28      	ldr	r3, [pc, #160]	; (800c6c4 <prvInsertBlockIntoFreeList+0xac>)
 800c622:	60fb      	str	r3, [r7, #12]
 800c624:	e002      	b.n	800c62c <prvInsertBlockIntoFreeList+0x14>
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	60fb      	str	r3, [r7, #12]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	687a      	ldr	r2, [r7, #4]
 800c632:	429a      	cmp	r2, r3
 800c634:	d8f7      	bhi.n	800c626 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	68ba      	ldr	r2, [r7, #8]
 800c640:	4413      	add	r3, r2
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	429a      	cmp	r2, r3
 800c646:	d108      	bne.n	800c65a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	685a      	ldr	r2, [r3, #4]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	441a      	add	r2, r3
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	68ba      	ldr	r2, [r7, #8]
 800c664:	441a      	add	r2, r3
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d118      	bne.n	800c6a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	4b15      	ldr	r3, [pc, #84]	; (800c6c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	429a      	cmp	r2, r3
 800c678:	d00d      	beq.n	800c696 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	685a      	ldr	r2, [r3, #4]
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	441a      	add	r2, r3
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	681a      	ldr	r2, [r3, #0]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	e008      	b.n	800c6a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c696:	4b0c      	ldr	r3, [pc, #48]	; (800c6c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	601a      	str	r2, [r3, #0]
 800c69e:	e003      	b.n	800c6a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681a      	ldr	r2, [r3, #0]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d002      	beq.n	800c6b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6b6:	bf00      	nop
 800c6b8:	3714      	adds	r7, #20
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop
 800c6c4:	200027c4 	.word	0x200027c4
 800c6c8:	200027cc 	.word	0x200027cc

0800c6cc <__assert_func>:
 800c6cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6ce:	4614      	mov	r4, r2
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	4b09      	ldr	r3, [pc, #36]	; (800c6f8 <__assert_func+0x2c>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	4605      	mov	r5, r0
 800c6d8:	68d8      	ldr	r0, [r3, #12]
 800c6da:	b14c      	cbz	r4, 800c6f0 <__assert_func+0x24>
 800c6dc:	4b07      	ldr	r3, [pc, #28]	; (800c6fc <__assert_func+0x30>)
 800c6de:	9100      	str	r1, [sp, #0]
 800c6e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c6e4:	4906      	ldr	r1, [pc, #24]	; (800c700 <__assert_func+0x34>)
 800c6e6:	462b      	mov	r3, r5
 800c6e8:	f000 fd18 	bl	800d11c <fiprintf>
 800c6ec:	f000 ff29 	bl	800d542 <abort>
 800c6f0:	4b04      	ldr	r3, [pc, #16]	; (800c704 <__assert_func+0x38>)
 800c6f2:	461c      	mov	r4, r3
 800c6f4:	e7f3      	b.n	800c6de <__assert_func+0x12>
 800c6f6:	bf00      	nop
 800c6f8:	20000220 	.word	0x20000220
 800c6fc:	0800f6f4 	.word	0x0800f6f4
 800c700:	0800f701 	.word	0x0800f701
 800c704:	0800f72f 	.word	0x0800f72f

0800c708 <__cvt>:
 800c708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c70c:	ec55 4b10 	vmov	r4, r5, d0
 800c710:	2d00      	cmp	r5, #0
 800c712:	460e      	mov	r6, r1
 800c714:	4619      	mov	r1, r3
 800c716:	462b      	mov	r3, r5
 800c718:	bfbb      	ittet	lt
 800c71a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c71e:	461d      	movlt	r5, r3
 800c720:	2300      	movge	r3, #0
 800c722:	232d      	movlt	r3, #45	; 0x2d
 800c724:	700b      	strb	r3, [r1, #0]
 800c726:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c728:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c72c:	4691      	mov	r9, r2
 800c72e:	f023 0820 	bic.w	r8, r3, #32
 800c732:	bfbc      	itt	lt
 800c734:	4622      	movlt	r2, r4
 800c736:	4614      	movlt	r4, r2
 800c738:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c73c:	d005      	beq.n	800c74a <__cvt+0x42>
 800c73e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c742:	d100      	bne.n	800c746 <__cvt+0x3e>
 800c744:	3601      	adds	r6, #1
 800c746:	2102      	movs	r1, #2
 800c748:	e000      	b.n	800c74c <__cvt+0x44>
 800c74a:	2103      	movs	r1, #3
 800c74c:	ab03      	add	r3, sp, #12
 800c74e:	9301      	str	r3, [sp, #4]
 800c750:	ab02      	add	r3, sp, #8
 800c752:	9300      	str	r3, [sp, #0]
 800c754:	ec45 4b10 	vmov	d0, r4, r5
 800c758:	4653      	mov	r3, sl
 800c75a:	4632      	mov	r2, r6
 800c75c:	f000 ff80 	bl	800d660 <_dtoa_r>
 800c760:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c764:	4607      	mov	r7, r0
 800c766:	d102      	bne.n	800c76e <__cvt+0x66>
 800c768:	f019 0f01 	tst.w	r9, #1
 800c76c:	d022      	beq.n	800c7b4 <__cvt+0xac>
 800c76e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c772:	eb07 0906 	add.w	r9, r7, r6
 800c776:	d110      	bne.n	800c79a <__cvt+0x92>
 800c778:	783b      	ldrb	r3, [r7, #0]
 800c77a:	2b30      	cmp	r3, #48	; 0x30
 800c77c:	d10a      	bne.n	800c794 <__cvt+0x8c>
 800c77e:	2200      	movs	r2, #0
 800c780:	2300      	movs	r3, #0
 800c782:	4620      	mov	r0, r4
 800c784:	4629      	mov	r1, r5
 800c786:	f7f4 f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c78a:	b918      	cbnz	r0, 800c794 <__cvt+0x8c>
 800c78c:	f1c6 0601 	rsb	r6, r6, #1
 800c790:	f8ca 6000 	str.w	r6, [sl]
 800c794:	f8da 3000 	ldr.w	r3, [sl]
 800c798:	4499      	add	r9, r3
 800c79a:	2200      	movs	r2, #0
 800c79c:	2300      	movs	r3, #0
 800c79e:	4620      	mov	r0, r4
 800c7a0:	4629      	mov	r1, r5
 800c7a2:	f7f4 f991 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7a6:	b108      	cbz	r0, 800c7ac <__cvt+0xa4>
 800c7a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800c7ac:	2230      	movs	r2, #48	; 0x30
 800c7ae:	9b03      	ldr	r3, [sp, #12]
 800c7b0:	454b      	cmp	r3, r9
 800c7b2:	d307      	bcc.n	800c7c4 <__cvt+0xbc>
 800c7b4:	9b03      	ldr	r3, [sp, #12]
 800c7b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7b8:	1bdb      	subs	r3, r3, r7
 800c7ba:	4638      	mov	r0, r7
 800c7bc:	6013      	str	r3, [r2, #0]
 800c7be:	b004      	add	sp, #16
 800c7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7c4:	1c59      	adds	r1, r3, #1
 800c7c6:	9103      	str	r1, [sp, #12]
 800c7c8:	701a      	strb	r2, [r3, #0]
 800c7ca:	e7f0      	b.n	800c7ae <__cvt+0xa6>

0800c7cc <__exponent>:
 800c7cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2900      	cmp	r1, #0
 800c7d2:	bfb8      	it	lt
 800c7d4:	4249      	neglt	r1, r1
 800c7d6:	f803 2b02 	strb.w	r2, [r3], #2
 800c7da:	bfb4      	ite	lt
 800c7dc:	222d      	movlt	r2, #45	; 0x2d
 800c7de:	222b      	movge	r2, #43	; 0x2b
 800c7e0:	2909      	cmp	r1, #9
 800c7e2:	7042      	strb	r2, [r0, #1]
 800c7e4:	dd2a      	ble.n	800c83c <__exponent+0x70>
 800c7e6:	f10d 0207 	add.w	r2, sp, #7
 800c7ea:	4617      	mov	r7, r2
 800c7ec:	260a      	movs	r6, #10
 800c7ee:	4694      	mov	ip, r2
 800c7f0:	fb91 f5f6 	sdiv	r5, r1, r6
 800c7f4:	fb06 1415 	mls	r4, r6, r5, r1
 800c7f8:	3430      	adds	r4, #48	; 0x30
 800c7fa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c7fe:	460c      	mov	r4, r1
 800c800:	2c63      	cmp	r4, #99	; 0x63
 800c802:	f102 32ff 	add.w	r2, r2, #4294967295
 800c806:	4629      	mov	r1, r5
 800c808:	dcf1      	bgt.n	800c7ee <__exponent+0x22>
 800c80a:	3130      	adds	r1, #48	; 0x30
 800c80c:	f1ac 0402 	sub.w	r4, ip, #2
 800c810:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c814:	1c41      	adds	r1, r0, #1
 800c816:	4622      	mov	r2, r4
 800c818:	42ba      	cmp	r2, r7
 800c81a:	d30a      	bcc.n	800c832 <__exponent+0x66>
 800c81c:	f10d 0209 	add.w	r2, sp, #9
 800c820:	eba2 020c 	sub.w	r2, r2, ip
 800c824:	42bc      	cmp	r4, r7
 800c826:	bf88      	it	hi
 800c828:	2200      	movhi	r2, #0
 800c82a:	4413      	add	r3, r2
 800c82c:	1a18      	subs	r0, r3, r0
 800c82e:	b003      	add	sp, #12
 800c830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c832:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c836:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c83a:	e7ed      	b.n	800c818 <__exponent+0x4c>
 800c83c:	2330      	movs	r3, #48	; 0x30
 800c83e:	3130      	adds	r1, #48	; 0x30
 800c840:	7083      	strb	r3, [r0, #2]
 800c842:	70c1      	strb	r1, [r0, #3]
 800c844:	1d03      	adds	r3, r0, #4
 800c846:	e7f1      	b.n	800c82c <__exponent+0x60>

0800c848 <_printf_float>:
 800c848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c84c:	ed2d 8b02 	vpush	{d8}
 800c850:	b08d      	sub	sp, #52	; 0x34
 800c852:	460c      	mov	r4, r1
 800c854:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c858:	4616      	mov	r6, r2
 800c85a:	461f      	mov	r7, r3
 800c85c:	4605      	mov	r5, r0
 800c85e:	f000 fdeb 	bl	800d438 <_localeconv_r>
 800c862:	f8d0 a000 	ldr.w	sl, [r0]
 800c866:	4650      	mov	r0, sl
 800c868:	f7f3 fd02 	bl	8000270 <strlen>
 800c86c:	2300      	movs	r3, #0
 800c86e:	930a      	str	r3, [sp, #40]	; 0x28
 800c870:	6823      	ldr	r3, [r4, #0]
 800c872:	9305      	str	r3, [sp, #20]
 800c874:	f8d8 3000 	ldr.w	r3, [r8]
 800c878:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c87c:	3307      	adds	r3, #7
 800c87e:	f023 0307 	bic.w	r3, r3, #7
 800c882:	f103 0208 	add.w	r2, r3, #8
 800c886:	f8c8 2000 	str.w	r2, [r8]
 800c88a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c88e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c892:	9307      	str	r3, [sp, #28]
 800c894:	f8cd 8018 	str.w	r8, [sp, #24]
 800c898:	ee08 0a10 	vmov	s16, r0
 800c89c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c8a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8a4:	4b9e      	ldr	r3, [pc, #632]	; (800cb20 <_printf_float+0x2d8>)
 800c8a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c8aa:	f7f4 f93f 	bl	8000b2c <__aeabi_dcmpun>
 800c8ae:	bb88      	cbnz	r0, 800c914 <_printf_float+0xcc>
 800c8b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8b4:	4b9a      	ldr	r3, [pc, #616]	; (800cb20 <_printf_float+0x2d8>)
 800c8b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ba:	f7f4 f919 	bl	8000af0 <__aeabi_dcmple>
 800c8be:	bb48      	cbnz	r0, 800c914 <_printf_float+0xcc>
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	4640      	mov	r0, r8
 800c8c6:	4649      	mov	r1, r9
 800c8c8:	f7f4 f908 	bl	8000adc <__aeabi_dcmplt>
 800c8cc:	b110      	cbz	r0, 800c8d4 <_printf_float+0x8c>
 800c8ce:	232d      	movs	r3, #45	; 0x2d
 800c8d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8d4:	4a93      	ldr	r2, [pc, #588]	; (800cb24 <_printf_float+0x2dc>)
 800c8d6:	4b94      	ldr	r3, [pc, #592]	; (800cb28 <_printf_float+0x2e0>)
 800c8d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c8dc:	bf94      	ite	ls
 800c8de:	4690      	movls	r8, r2
 800c8e0:	4698      	movhi	r8, r3
 800c8e2:	2303      	movs	r3, #3
 800c8e4:	6123      	str	r3, [r4, #16]
 800c8e6:	9b05      	ldr	r3, [sp, #20]
 800c8e8:	f023 0304 	bic.w	r3, r3, #4
 800c8ec:	6023      	str	r3, [r4, #0]
 800c8ee:	f04f 0900 	mov.w	r9, #0
 800c8f2:	9700      	str	r7, [sp, #0]
 800c8f4:	4633      	mov	r3, r6
 800c8f6:	aa0b      	add	r2, sp, #44	; 0x2c
 800c8f8:	4621      	mov	r1, r4
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	f000 f9da 	bl	800ccb4 <_printf_common>
 800c900:	3001      	adds	r0, #1
 800c902:	f040 8090 	bne.w	800ca26 <_printf_float+0x1de>
 800c906:	f04f 30ff 	mov.w	r0, #4294967295
 800c90a:	b00d      	add	sp, #52	; 0x34
 800c90c:	ecbd 8b02 	vpop	{d8}
 800c910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c914:	4642      	mov	r2, r8
 800c916:	464b      	mov	r3, r9
 800c918:	4640      	mov	r0, r8
 800c91a:	4649      	mov	r1, r9
 800c91c:	f7f4 f906 	bl	8000b2c <__aeabi_dcmpun>
 800c920:	b140      	cbz	r0, 800c934 <_printf_float+0xec>
 800c922:	464b      	mov	r3, r9
 800c924:	2b00      	cmp	r3, #0
 800c926:	bfbc      	itt	lt
 800c928:	232d      	movlt	r3, #45	; 0x2d
 800c92a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c92e:	4a7f      	ldr	r2, [pc, #508]	; (800cb2c <_printf_float+0x2e4>)
 800c930:	4b7f      	ldr	r3, [pc, #508]	; (800cb30 <_printf_float+0x2e8>)
 800c932:	e7d1      	b.n	800c8d8 <_printf_float+0x90>
 800c934:	6863      	ldr	r3, [r4, #4]
 800c936:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c93a:	9206      	str	r2, [sp, #24]
 800c93c:	1c5a      	adds	r2, r3, #1
 800c93e:	d13f      	bne.n	800c9c0 <_printf_float+0x178>
 800c940:	2306      	movs	r3, #6
 800c942:	6063      	str	r3, [r4, #4]
 800c944:	9b05      	ldr	r3, [sp, #20]
 800c946:	6861      	ldr	r1, [r4, #4]
 800c948:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c94c:	2300      	movs	r3, #0
 800c94e:	9303      	str	r3, [sp, #12]
 800c950:	ab0a      	add	r3, sp, #40	; 0x28
 800c952:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c956:	ab09      	add	r3, sp, #36	; 0x24
 800c958:	ec49 8b10 	vmov	d0, r8, r9
 800c95c:	9300      	str	r3, [sp, #0]
 800c95e:	6022      	str	r2, [r4, #0]
 800c960:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c964:	4628      	mov	r0, r5
 800c966:	f7ff fecf 	bl	800c708 <__cvt>
 800c96a:	9b06      	ldr	r3, [sp, #24]
 800c96c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c96e:	2b47      	cmp	r3, #71	; 0x47
 800c970:	4680      	mov	r8, r0
 800c972:	d108      	bne.n	800c986 <_printf_float+0x13e>
 800c974:	1cc8      	adds	r0, r1, #3
 800c976:	db02      	blt.n	800c97e <_printf_float+0x136>
 800c978:	6863      	ldr	r3, [r4, #4]
 800c97a:	4299      	cmp	r1, r3
 800c97c:	dd41      	ble.n	800ca02 <_printf_float+0x1ba>
 800c97e:	f1ab 0302 	sub.w	r3, fp, #2
 800c982:	fa5f fb83 	uxtb.w	fp, r3
 800c986:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c98a:	d820      	bhi.n	800c9ce <_printf_float+0x186>
 800c98c:	3901      	subs	r1, #1
 800c98e:	465a      	mov	r2, fp
 800c990:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c994:	9109      	str	r1, [sp, #36]	; 0x24
 800c996:	f7ff ff19 	bl	800c7cc <__exponent>
 800c99a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c99c:	1813      	adds	r3, r2, r0
 800c99e:	2a01      	cmp	r2, #1
 800c9a0:	4681      	mov	r9, r0
 800c9a2:	6123      	str	r3, [r4, #16]
 800c9a4:	dc02      	bgt.n	800c9ac <_printf_float+0x164>
 800c9a6:	6822      	ldr	r2, [r4, #0]
 800c9a8:	07d2      	lsls	r2, r2, #31
 800c9aa:	d501      	bpl.n	800c9b0 <_printf_float+0x168>
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	6123      	str	r3, [r4, #16]
 800c9b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d09c      	beq.n	800c8f2 <_printf_float+0xaa>
 800c9b8:	232d      	movs	r3, #45	; 0x2d
 800c9ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9be:	e798      	b.n	800c8f2 <_printf_float+0xaa>
 800c9c0:	9a06      	ldr	r2, [sp, #24]
 800c9c2:	2a47      	cmp	r2, #71	; 0x47
 800c9c4:	d1be      	bne.n	800c944 <_printf_float+0xfc>
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d1bc      	bne.n	800c944 <_printf_float+0xfc>
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	e7b9      	b.n	800c942 <_printf_float+0xfa>
 800c9ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c9d2:	d118      	bne.n	800ca06 <_printf_float+0x1be>
 800c9d4:	2900      	cmp	r1, #0
 800c9d6:	6863      	ldr	r3, [r4, #4]
 800c9d8:	dd0b      	ble.n	800c9f2 <_printf_float+0x1aa>
 800c9da:	6121      	str	r1, [r4, #16]
 800c9dc:	b913      	cbnz	r3, 800c9e4 <_printf_float+0x19c>
 800c9de:	6822      	ldr	r2, [r4, #0]
 800c9e0:	07d0      	lsls	r0, r2, #31
 800c9e2:	d502      	bpl.n	800c9ea <_printf_float+0x1a2>
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	440b      	add	r3, r1
 800c9e8:	6123      	str	r3, [r4, #16]
 800c9ea:	65a1      	str	r1, [r4, #88]	; 0x58
 800c9ec:	f04f 0900 	mov.w	r9, #0
 800c9f0:	e7de      	b.n	800c9b0 <_printf_float+0x168>
 800c9f2:	b913      	cbnz	r3, 800c9fa <_printf_float+0x1b2>
 800c9f4:	6822      	ldr	r2, [r4, #0]
 800c9f6:	07d2      	lsls	r2, r2, #31
 800c9f8:	d501      	bpl.n	800c9fe <_printf_float+0x1b6>
 800c9fa:	3302      	adds	r3, #2
 800c9fc:	e7f4      	b.n	800c9e8 <_printf_float+0x1a0>
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e7f2      	b.n	800c9e8 <_printf_float+0x1a0>
 800ca02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ca06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca08:	4299      	cmp	r1, r3
 800ca0a:	db05      	blt.n	800ca18 <_printf_float+0x1d0>
 800ca0c:	6823      	ldr	r3, [r4, #0]
 800ca0e:	6121      	str	r1, [r4, #16]
 800ca10:	07d8      	lsls	r0, r3, #31
 800ca12:	d5ea      	bpl.n	800c9ea <_printf_float+0x1a2>
 800ca14:	1c4b      	adds	r3, r1, #1
 800ca16:	e7e7      	b.n	800c9e8 <_printf_float+0x1a0>
 800ca18:	2900      	cmp	r1, #0
 800ca1a:	bfd4      	ite	le
 800ca1c:	f1c1 0202 	rsble	r2, r1, #2
 800ca20:	2201      	movgt	r2, #1
 800ca22:	4413      	add	r3, r2
 800ca24:	e7e0      	b.n	800c9e8 <_printf_float+0x1a0>
 800ca26:	6823      	ldr	r3, [r4, #0]
 800ca28:	055a      	lsls	r2, r3, #21
 800ca2a:	d407      	bmi.n	800ca3c <_printf_float+0x1f4>
 800ca2c:	6923      	ldr	r3, [r4, #16]
 800ca2e:	4642      	mov	r2, r8
 800ca30:	4631      	mov	r1, r6
 800ca32:	4628      	mov	r0, r5
 800ca34:	47b8      	blx	r7
 800ca36:	3001      	adds	r0, #1
 800ca38:	d12c      	bne.n	800ca94 <_printf_float+0x24c>
 800ca3a:	e764      	b.n	800c906 <_printf_float+0xbe>
 800ca3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ca40:	f240 80e0 	bls.w	800cc04 <_printf_float+0x3bc>
 800ca44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca48:	2200      	movs	r2, #0
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	f7f4 f83c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca50:	2800      	cmp	r0, #0
 800ca52:	d034      	beq.n	800cabe <_printf_float+0x276>
 800ca54:	4a37      	ldr	r2, [pc, #220]	; (800cb34 <_printf_float+0x2ec>)
 800ca56:	2301      	movs	r3, #1
 800ca58:	4631      	mov	r1, r6
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	47b8      	blx	r7
 800ca5e:	3001      	adds	r0, #1
 800ca60:	f43f af51 	beq.w	800c906 <_printf_float+0xbe>
 800ca64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	db02      	blt.n	800ca72 <_printf_float+0x22a>
 800ca6c:	6823      	ldr	r3, [r4, #0]
 800ca6e:	07d8      	lsls	r0, r3, #31
 800ca70:	d510      	bpl.n	800ca94 <_printf_float+0x24c>
 800ca72:	ee18 3a10 	vmov	r3, s16
 800ca76:	4652      	mov	r2, sl
 800ca78:	4631      	mov	r1, r6
 800ca7a:	4628      	mov	r0, r5
 800ca7c:	47b8      	blx	r7
 800ca7e:	3001      	adds	r0, #1
 800ca80:	f43f af41 	beq.w	800c906 <_printf_float+0xbe>
 800ca84:	f04f 0800 	mov.w	r8, #0
 800ca88:	f104 091a 	add.w	r9, r4, #26
 800ca8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca8e:	3b01      	subs	r3, #1
 800ca90:	4543      	cmp	r3, r8
 800ca92:	dc09      	bgt.n	800caa8 <_printf_float+0x260>
 800ca94:	6823      	ldr	r3, [r4, #0]
 800ca96:	079b      	lsls	r3, r3, #30
 800ca98:	f100 8107 	bmi.w	800ccaa <_printf_float+0x462>
 800ca9c:	68e0      	ldr	r0, [r4, #12]
 800ca9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800caa0:	4298      	cmp	r0, r3
 800caa2:	bfb8      	it	lt
 800caa4:	4618      	movlt	r0, r3
 800caa6:	e730      	b.n	800c90a <_printf_float+0xc2>
 800caa8:	2301      	movs	r3, #1
 800caaa:	464a      	mov	r2, r9
 800caac:	4631      	mov	r1, r6
 800caae:	4628      	mov	r0, r5
 800cab0:	47b8      	blx	r7
 800cab2:	3001      	adds	r0, #1
 800cab4:	f43f af27 	beq.w	800c906 <_printf_float+0xbe>
 800cab8:	f108 0801 	add.w	r8, r8, #1
 800cabc:	e7e6      	b.n	800ca8c <_printf_float+0x244>
 800cabe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	dc39      	bgt.n	800cb38 <_printf_float+0x2f0>
 800cac4:	4a1b      	ldr	r2, [pc, #108]	; (800cb34 <_printf_float+0x2ec>)
 800cac6:	2301      	movs	r3, #1
 800cac8:	4631      	mov	r1, r6
 800caca:	4628      	mov	r0, r5
 800cacc:	47b8      	blx	r7
 800cace:	3001      	adds	r0, #1
 800cad0:	f43f af19 	beq.w	800c906 <_printf_float+0xbe>
 800cad4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cad8:	4313      	orrs	r3, r2
 800cada:	d102      	bne.n	800cae2 <_printf_float+0x29a>
 800cadc:	6823      	ldr	r3, [r4, #0]
 800cade:	07d9      	lsls	r1, r3, #31
 800cae0:	d5d8      	bpl.n	800ca94 <_printf_float+0x24c>
 800cae2:	ee18 3a10 	vmov	r3, s16
 800cae6:	4652      	mov	r2, sl
 800cae8:	4631      	mov	r1, r6
 800caea:	4628      	mov	r0, r5
 800caec:	47b8      	blx	r7
 800caee:	3001      	adds	r0, #1
 800caf0:	f43f af09 	beq.w	800c906 <_printf_float+0xbe>
 800caf4:	f04f 0900 	mov.w	r9, #0
 800caf8:	f104 0a1a 	add.w	sl, r4, #26
 800cafc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cafe:	425b      	negs	r3, r3
 800cb00:	454b      	cmp	r3, r9
 800cb02:	dc01      	bgt.n	800cb08 <_printf_float+0x2c0>
 800cb04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb06:	e792      	b.n	800ca2e <_printf_float+0x1e6>
 800cb08:	2301      	movs	r3, #1
 800cb0a:	4652      	mov	r2, sl
 800cb0c:	4631      	mov	r1, r6
 800cb0e:	4628      	mov	r0, r5
 800cb10:	47b8      	blx	r7
 800cb12:	3001      	adds	r0, #1
 800cb14:	f43f aef7 	beq.w	800c906 <_printf_float+0xbe>
 800cb18:	f109 0901 	add.w	r9, r9, #1
 800cb1c:	e7ee      	b.n	800cafc <_printf_float+0x2b4>
 800cb1e:	bf00      	nop
 800cb20:	7fefffff 	.word	0x7fefffff
 800cb24:	0800f730 	.word	0x0800f730
 800cb28:	0800f734 	.word	0x0800f734
 800cb2c:	0800f738 	.word	0x0800f738
 800cb30:	0800f73c 	.word	0x0800f73c
 800cb34:	0800f740 	.word	0x0800f740
 800cb38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	bfa8      	it	ge
 800cb40:	461a      	movge	r2, r3
 800cb42:	2a00      	cmp	r2, #0
 800cb44:	4691      	mov	r9, r2
 800cb46:	dc37      	bgt.n	800cbb8 <_printf_float+0x370>
 800cb48:	f04f 0b00 	mov.w	fp, #0
 800cb4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb50:	f104 021a 	add.w	r2, r4, #26
 800cb54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb56:	9305      	str	r3, [sp, #20]
 800cb58:	eba3 0309 	sub.w	r3, r3, r9
 800cb5c:	455b      	cmp	r3, fp
 800cb5e:	dc33      	bgt.n	800cbc8 <_printf_float+0x380>
 800cb60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb64:	429a      	cmp	r2, r3
 800cb66:	db3b      	blt.n	800cbe0 <_printf_float+0x398>
 800cb68:	6823      	ldr	r3, [r4, #0]
 800cb6a:	07da      	lsls	r2, r3, #31
 800cb6c:	d438      	bmi.n	800cbe0 <_printf_float+0x398>
 800cb6e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cb72:	eba2 0903 	sub.w	r9, r2, r3
 800cb76:	9b05      	ldr	r3, [sp, #20]
 800cb78:	1ad2      	subs	r2, r2, r3
 800cb7a:	4591      	cmp	r9, r2
 800cb7c:	bfa8      	it	ge
 800cb7e:	4691      	movge	r9, r2
 800cb80:	f1b9 0f00 	cmp.w	r9, #0
 800cb84:	dc35      	bgt.n	800cbf2 <_printf_float+0x3aa>
 800cb86:	f04f 0800 	mov.w	r8, #0
 800cb8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb8e:	f104 0a1a 	add.w	sl, r4, #26
 800cb92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb96:	1a9b      	subs	r3, r3, r2
 800cb98:	eba3 0309 	sub.w	r3, r3, r9
 800cb9c:	4543      	cmp	r3, r8
 800cb9e:	f77f af79 	ble.w	800ca94 <_printf_float+0x24c>
 800cba2:	2301      	movs	r3, #1
 800cba4:	4652      	mov	r2, sl
 800cba6:	4631      	mov	r1, r6
 800cba8:	4628      	mov	r0, r5
 800cbaa:	47b8      	blx	r7
 800cbac:	3001      	adds	r0, #1
 800cbae:	f43f aeaa 	beq.w	800c906 <_printf_float+0xbe>
 800cbb2:	f108 0801 	add.w	r8, r8, #1
 800cbb6:	e7ec      	b.n	800cb92 <_printf_float+0x34a>
 800cbb8:	4613      	mov	r3, r2
 800cbba:	4631      	mov	r1, r6
 800cbbc:	4642      	mov	r2, r8
 800cbbe:	4628      	mov	r0, r5
 800cbc0:	47b8      	blx	r7
 800cbc2:	3001      	adds	r0, #1
 800cbc4:	d1c0      	bne.n	800cb48 <_printf_float+0x300>
 800cbc6:	e69e      	b.n	800c906 <_printf_float+0xbe>
 800cbc8:	2301      	movs	r3, #1
 800cbca:	4631      	mov	r1, r6
 800cbcc:	4628      	mov	r0, r5
 800cbce:	9205      	str	r2, [sp, #20]
 800cbd0:	47b8      	blx	r7
 800cbd2:	3001      	adds	r0, #1
 800cbd4:	f43f ae97 	beq.w	800c906 <_printf_float+0xbe>
 800cbd8:	9a05      	ldr	r2, [sp, #20]
 800cbda:	f10b 0b01 	add.w	fp, fp, #1
 800cbde:	e7b9      	b.n	800cb54 <_printf_float+0x30c>
 800cbe0:	ee18 3a10 	vmov	r3, s16
 800cbe4:	4652      	mov	r2, sl
 800cbe6:	4631      	mov	r1, r6
 800cbe8:	4628      	mov	r0, r5
 800cbea:	47b8      	blx	r7
 800cbec:	3001      	adds	r0, #1
 800cbee:	d1be      	bne.n	800cb6e <_printf_float+0x326>
 800cbf0:	e689      	b.n	800c906 <_printf_float+0xbe>
 800cbf2:	9a05      	ldr	r2, [sp, #20]
 800cbf4:	464b      	mov	r3, r9
 800cbf6:	4442      	add	r2, r8
 800cbf8:	4631      	mov	r1, r6
 800cbfa:	4628      	mov	r0, r5
 800cbfc:	47b8      	blx	r7
 800cbfe:	3001      	adds	r0, #1
 800cc00:	d1c1      	bne.n	800cb86 <_printf_float+0x33e>
 800cc02:	e680      	b.n	800c906 <_printf_float+0xbe>
 800cc04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc06:	2a01      	cmp	r2, #1
 800cc08:	dc01      	bgt.n	800cc0e <_printf_float+0x3c6>
 800cc0a:	07db      	lsls	r3, r3, #31
 800cc0c:	d53a      	bpl.n	800cc84 <_printf_float+0x43c>
 800cc0e:	2301      	movs	r3, #1
 800cc10:	4642      	mov	r2, r8
 800cc12:	4631      	mov	r1, r6
 800cc14:	4628      	mov	r0, r5
 800cc16:	47b8      	blx	r7
 800cc18:	3001      	adds	r0, #1
 800cc1a:	f43f ae74 	beq.w	800c906 <_printf_float+0xbe>
 800cc1e:	ee18 3a10 	vmov	r3, s16
 800cc22:	4652      	mov	r2, sl
 800cc24:	4631      	mov	r1, r6
 800cc26:	4628      	mov	r0, r5
 800cc28:	47b8      	blx	r7
 800cc2a:	3001      	adds	r0, #1
 800cc2c:	f43f ae6b 	beq.w	800c906 <_printf_float+0xbe>
 800cc30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc34:	2200      	movs	r2, #0
 800cc36:	2300      	movs	r3, #0
 800cc38:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800cc3c:	f7f3 ff44 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc40:	b9d8      	cbnz	r0, 800cc7a <_printf_float+0x432>
 800cc42:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cc46:	f108 0201 	add.w	r2, r8, #1
 800cc4a:	4631      	mov	r1, r6
 800cc4c:	4628      	mov	r0, r5
 800cc4e:	47b8      	blx	r7
 800cc50:	3001      	adds	r0, #1
 800cc52:	d10e      	bne.n	800cc72 <_printf_float+0x42a>
 800cc54:	e657      	b.n	800c906 <_printf_float+0xbe>
 800cc56:	2301      	movs	r3, #1
 800cc58:	4652      	mov	r2, sl
 800cc5a:	4631      	mov	r1, r6
 800cc5c:	4628      	mov	r0, r5
 800cc5e:	47b8      	blx	r7
 800cc60:	3001      	adds	r0, #1
 800cc62:	f43f ae50 	beq.w	800c906 <_printf_float+0xbe>
 800cc66:	f108 0801 	add.w	r8, r8, #1
 800cc6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc6c:	3b01      	subs	r3, #1
 800cc6e:	4543      	cmp	r3, r8
 800cc70:	dcf1      	bgt.n	800cc56 <_printf_float+0x40e>
 800cc72:	464b      	mov	r3, r9
 800cc74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cc78:	e6da      	b.n	800ca30 <_printf_float+0x1e8>
 800cc7a:	f04f 0800 	mov.w	r8, #0
 800cc7e:	f104 0a1a 	add.w	sl, r4, #26
 800cc82:	e7f2      	b.n	800cc6a <_printf_float+0x422>
 800cc84:	2301      	movs	r3, #1
 800cc86:	4642      	mov	r2, r8
 800cc88:	e7df      	b.n	800cc4a <_printf_float+0x402>
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	464a      	mov	r2, r9
 800cc8e:	4631      	mov	r1, r6
 800cc90:	4628      	mov	r0, r5
 800cc92:	47b8      	blx	r7
 800cc94:	3001      	adds	r0, #1
 800cc96:	f43f ae36 	beq.w	800c906 <_printf_float+0xbe>
 800cc9a:	f108 0801 	add.w	r8, r8, #1
 800cc9e:	68e3      	ldr	r3, [r4, #12]
 800cca0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cca2:	1a5b      	subs	r3, r3, r1
 800cca4:	4543      	cmp	r3, r8
 800cca6:	dcf0      	bgt.n	800cc8a <_printf_float+0x442>
 800cca8:	e6f8      	b.n	800ca9c <_printf_float+0x254>
 800ccaa:	f04f 0800 	mov.w	r8, #0
 800ccae:	f104 0919 	add.w	r9, r4, #25
 800ccb2:	e7f4      	b.n	800cc9e <_printf_float+0x456>

0800ccb4 <_printf_common>:
 800ccb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccb8:	4616      	mov	r6, r2
 800ccba:	4699      	mov	r9, r3
 800ccbc:	688a      	ldr	r2, [r1, #8]
 800ccbe:	690b      	ldr	r3, [r1, #16]
 800ccc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	bfb8      	it	lt
 800ccc8:	4613      	movlt	r3, r2
 800ccca:	6033      	str	r3, [r6, #0]
 800cccc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ccd0:	4607      	mov	r7, r0
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	b10a      	cbz	r2, 800ccda <_printf_common+0x26>
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	6033      	str	r3, [r6, #0]
 800ccda:	6823      	ldr	r3, [r4, #0]
 800ccdc:	0699      	lsls	r1, r3, #26
 800ccde:	bf42      	ittt	mi
 800cce0:	6833      	ldrmi	r3, [r6, #0]
 800cce2:	3302      	addmi	r3, #2
 800cce4:	6033      	strmi	r3, [r6, #0]
 800cce6:	6825      	ldr	r5, [r4, #0]
 800cce8:	f015 0506 	ands.w	r5, r5, #6
 800ccec:	d106      	bne.n	800ccfc <_printf_common+0x48>
 800ccee:	f104 0a19 	add.w	sl, r4, #25
 800ccf2:	68e3      	ldr	r3, [r4, #12]
 800ccf4:	6832      	ldr	r2, [r6, #0]
 800ccf6:	1a9b      	subs	r3, r3, r2
 800ccf8:	42ab      	cmp	r3, r5
 800ccfa:	dc26      	bgt.n	800cd4a <_printf_common+0x96>
 800ccfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd00:	1e13      	subs	r3, r2, #0
 800cd02:	6822      	ldr	r2, [r4, #0]
 800cd04:	bf18      	it	ne
 800cd06:	2301      	movne	r3, #1
 800cd08:	0692      	lsls	r2, r2, #26
 800cd0a:	d42b      	bmi.n	800cd64 <_printf_common+0xb0>
 800cd0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd10:	4649      	mov	r1, r9
 800cd12:	4638      	mov	r0, r7
 800cd14:	47c0      	blx	r8
 800cd16:	3001      	adds	r0, #1
 800cd18:	d01e      	beq.n	800cd58 <_printf_common+0xa4>
 800cd1a:	6823      	ldr	r3, [r4, #0]
 800cd1c:	6922      	ldr	r2, [r4, #16]
 800cd1e:	f003 0306 	and.w	r3, r3, #6
 800cd22:	2b04      	cmp	r3, #4
 800cd24:	bf02      	ittt	eq
 800cd26:	68e5      	ldreq	r5, [r4, #12]
 800cd28:	6833      	ldreq	r3, [r6, #0]
 800cd2a:	1aed      	subeq	r5, r5, r3
 800cd2c:	68a3      	ldr	r3, [r4, #8]
 800cd2e:	bf0c      	ite	eq
 800cd30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd34:	2500      	movne	r5, #0
 800cd36:	4293      	cmp	r3, r2
 800cd38:	bfc4      	itt	gt
 800cd3a:	1a9b      	subgt	r3, r3, r2
 800cd3c:	18ed      	addgt	r5, r5, r3
 800cd3e:	2600      	movs	r6, #0
 800cd40:	341a      	adds	r4, #26
 800cd42:	42b5      	cmp	r5, r6
 800cd44:	d11a      	bne.n	800cd7c <_printf_common+0xc8>
 800cd46:	2000      	movs	r0, #0
 800cd48:	e008      	b.n	800cd5c <_printf_common+0xa8>
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	4652      	mov	r2, sl
 800cd4e:	4649      	mov	r1, r9
 800cd50:	4638      	mov	r0, r7
 800cd52:	47c0      	blx	r8
 800cd54:	3001      	adds	r0, #1
 800cd56:	d103      	bne.n	800cd60 <_printf_common+0xac>
 800cd58:	f04f 30ff 	mov.w	r0, #4294967295
 800cd5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd60:	3501      	adds	r5, #1
 800cd62:	e7c6      	b.n	800ccf2 <_printf_common+0x3e>
 800cd64:	18e1      	adds	r1, r4, r3
 800cd66:	1c5a      	adds	r2, r3, #1
 800cd68:	2030      	movs	r0, #48	; 0x30
 800cd6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd6e:	4422      	add	r2, r4
 800cd70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd78:	3302      	adds	r3, #2
 800cd7a:	e7c7      	b.n	800cd0c <_printf_common+0x58>
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	4622      	mov	r2, r4
 800cd80:	4649      	mov	r1, r9
 800cd82:	4638      	mov	r0, r7
 800cd84:	47c0      	blx	r8
 800cd86:	3001      	adds	r0, #1
 800cd88:	d0e6      	beq.n	800cd58 <_printf_common+0xa4>
 800cd8a:	3601      	adds	r6, #1
 800cd8c:	e7d9      	b.n	800cd42 <_printf_common+0x8e>
	...

0800cd90 <_printf_i>:
 800cd90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd94:	7e0f      	ldrb	r7, [r1, #24]
 800cd96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd98:	2f78      	cmp	r7, #120	; 0x78
 800cd9a:	4691      	mov	r9, r2
 800cd9c:	4680      	mov	r8, r0
 800cd9e:	460c      	mov	r4, r1
 800cda0:	469a      	mov	sl, r3
 800cda2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cda6:	d807      	bhi.n	800cdb8 <_printf_i+0x28>
 800cda8:	2f62      	cmp	r7, #98	; 0x62
 800cdaa:	d80a      	bhi.n	800cdc2 <_printf_i+0x32>
 800cdac:	2f00      	cmp	r7, #0
 800cdae:	f000 80d4 	beq.w	800cf5a <_printf_i+0x1ca>
 800cdb2:	2f58      	cmp	r7, #88	; 0x58
 800cdb4:	f000 80c0 	beq.w	800cf38 <_printf_i+0x1a8>
 800cdb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cdc0:	e03a      	b.n	800ce38 <_printf_i+0xa8>
 800cdc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cdc6:	2b15      	cmp	r3, #21
 800cdc8:	d8f6      	bhi.n	800cdb8 <_printf_i+0x28>
 800cdca:	a101      	add	r1, pc, #4	; (adr r1, 800cdd0 <_printf_i+0x40>)
 800cdcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cdd0:	0800ce29 	.word	0x0800ce29
 800cdd4:	0800ce3d 	.word	0x0800ce3d
 800cdd8:	0800cdb9 	.word	0x0800cdb9
 800cddc:	0800cdb9 	.word	0x0800cdb9
 800cde0:	0800cdb9 	.word	0x0800cdb9
 800cde4:	0800cdb9 	.word	0x0800cdb9
 800cde8:	0800ce3d 	.word	0x0800ce3d
 800cdec:	0800cdb9 	.word	0x0800cdb9
 800cdf0:	0800cdb9 	.word	0x0800cdb9
 800cdf4:	0800cdb9 	.word	0x0800cdb9
 800cdf8:	0800cdb9 	.word	0x0800cdb9
 800cdfc:	0800cf41 	.word	0x0800cf41
 800ce00:	0800ce69 	.word	0x0800ce69
 800ce04:	0800cefb 	.word	0x0800cefb
 800ce08:	0800cdb9 	.word	0x0800cdb9
 800ce0c:	0800cdb9 	.word	0x0800cdb9
 800ce10:	0800cf63 	.word	0x0800cf63
 800ce14:	0800cdb9 	.word	0x0800cdb9
 800ce18:	0800ce69 	.word	0x0800ce69
 800ce1c:	0800cdb9 	.word	0x0800cdb9
 800ce20:	0800cdb9 	.word	0x0800cdb9
 800ce24:	0800cf03 	.word	0x0800cf03
 800ce28:	682b      	ldr	r3, [r5, #0]
 800ce2a:	1d1a      	adds	r2, r3, #4
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	602a      	str	r2, [r5, #0]
 800ce30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce38:	2301      	movs	r3, #1
 800ce3a:	e09f      	b.n	800cf7c <_printf_i+0x1ec>
 800ce3c:	6820      	ldr	r0, [r4, #0]
 800ce3e:	682b      	ldr	r3, [r5, #0]
 800ce40:	0607      	lsls	r7, r0, #24
 800ce42:	f103 0104 	add.w	r1, r3, #4
 800ce46:	6029      	str	r1, [r5, #0]
 800ce48:	d501      	bpl.n	800ce4e <_printf_i+0xbe>
 800ce4a:	681e      	ldr	r6, [r3, #0]
 800ce4c:	e003      	b.n	800ce56 <_printf_i+0xc6>
 800ce4e:	0646      	lsls	r6, r0, #25
 800ce50:	d5fb      	bpl.n	800ce4a <_printf_i+0xba>
 800ce52:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ce56:	2e00      	cmp	r6, #0
 800ce58:	da03      	bge.n	800ce62 <_printf_i+0xd2>
 800ce5a:	232d      	movs	r3, #45	; 0x2d
 800ce5c:	4276      	negs	r6, r6
 800ce5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce62:	485a      	ldr	r0, [pc, #360]	; (800cfcc <_printf_i+0x23c>)
 800ce64:	230a      	movs	r3, #10
 800ce66:	e012      	b.n	800ce8e <_printf_i+0xfe>
 800ce68:	682b      	ldr	r3, [r5, #0]
 800ce6a:	6820      	ldr	r0, [r4, #0]
 800ce6c:	1d19      	adds	r1, r3, #4
 800ce6e:	6029      	str	r1, [r5, #0]
 800ce70:	0605      	lsls	r5, r0, #24
 800ce72:	d501      	bpl.n	800ce78 <_printf_i+0xe8>
 800ce74:	681e      	ldr	r6, [r3, #0]
 800ce76:	e002      	b.n	800ce7e <_printf_i+0xee>
 800ce78:	0641      	lsls	r1, r0, #25
 800ce7a:	d5fb      	bpl.n	800ce74 <_printf_i+0xe4>
 800ce7c:	881e      	ldrh	r6, [r3, #0]
 800ce7e:	4853      	ldr	r0, [pc, #332]	; (800cfcc <_printf_i+0x23c>)
 800ce80:	2f6f      	cmp	r7, #111	; 0x6f
 800ce82:	bf0c      	ite	eq
 800ce84:	2308      	moveq	r3, #8
 800ce86:	230a      	movne	r3, #10
 800ce88:	2100      	movs	r1, #0
 800ce8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce8e:	6865      	ldr	r5, [r4, #4]
 800ce90:	60a5      	str	r5, [r4, #8]
 800ce92:	2d00      	cmp	r5, #0
 800ce94:	bfa2      	ittt	ge
 800ce96:	6821      	ldrge	r1, [r4, #0]
 800ce98:	f021 0104 	bicge.w	r1, r1, #4
 800ce9c:	6021      	strge	r1, [r4, #0]
 800ce9e:	b90e      	cbnz	r6, 800cea4 <_printf_i+0x114>
 800cea0:	2d00      	cmp	r5, #0
 800cea2:	d04b      	beq.n	800cf3c <_printf_i+0x1ac>
 800cea4:	4615      	mov	r5, r2
 800cea6:	fbb6 f1f3 	udiv	r1, r6, r3
 800ceaa:	fb03 6711 	mls	r7, r3, r1, r6
 800ceae:	5dc7      	ldrb	r7, [r0, r7]
 800ceb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ceb4:	4637      	mov	r7, r6
 800ceb6:	42bb      	cmp	r3, r7
 800ceb8:	460e      	mov	r6, r1
 800ceba:	d9f4      	bls.n	800cea6 <_printf_i+0x116>
 800cebc:	2b08      	cmp	r3, #8
 800cebe:	d10b      	bne.n	800ced8 <_printf_i+0x148>
 800cec0:	6823      	ldr	r3, [r4, #0]
 800cec2:	07de      	lsls	r6, r3, #31
 800cec4:	d508      	bpl.n	800ced8 <_printf_i+0x148>
 800cec6:	6923      	ldr	r3, [r4, #16]
 800cec8:	6861      	ldr	r1, [r4, #4]
 800ceca:	4299      	cmp	r1, r3
 800cecc:	bfde      	ittt	le
 800cece:	2330      	movle	r3, #48	; 0x30
 800ced0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ced4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ced8:	1b52      	subs	r2, r2, r5
 800ceda:	6122      	str	r2, [r4, #16]
 800cedc:	f8cd a000 	str.w	sl, [sp]
 800cee0:	464b      	mov	r3, r9
 800cee2:	aa03      	add	r2, sp, #12
 800cee4:	4621      	mov	r1, r4
 800cee6:	4640      	mov	r0, r8
 800cee8:	f7ff fee4 	bl	800ccb4 <_printf_common>
 800ceec:	3001      	adds	r0, #1
 800ceee:	d14a      	bne.n	800cf86 <_printf_i+0x1f6>
 800cef0:	f04f 30ff 	mov.w	r0, #4294967295
 800cef4:	b004      	add	sp, #16
 800cef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cefa:	6823      	ldr	r3, [r4, #0]
 800cefc:	f043 0320 	orr.w	r3, r3, #32
 800cf00:	6023      	str	r3, [r4, #0]
 800cf02:	4833      	ldr	r0, [pc, #204]	; (800cfd0 <_printf_i+0x240>)
 800cf04:	2778      	movs	r7, #120	; 0x78
 800cf06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cf0a:	6823      	ldr	r3, [r4, #0]
 800cf0c:	6829      	ldr	r1, [r5, #0]
 800cf0e:	061f      	lsls	r7, r3, #24
 800cf10:	f851 6b04 	ldr.w	r6, [r1], #4
 800cf14:	d402      	bmi.n	800cf1c <_printf_i+0x18c>
 800cf16:	065f      	lsls	r7, r3, #25
 800cf18:	bf48      	it	mi
 800cf1a:	b2b6      	uxthmi	r6, r6
 800cf1c:	07df      	lsls	r7, r3, #31
 800cf1e:	bf48      	it	mi
 800cf20:	f043 0320 	orrmi.w	r3, r3, #32
 800cf24:	6029      	str	r1, [r5, #0]
 800cf26:	bf48      	it	mi
 800cf28:	6023      	strmi	r3, [r4, #0]
 800cf2a:	b91e      	cbnz	r6, 800cf34 <_printf_i+0x1a4>
 800cf2c:	6823      	ldr	r3, [r4, #0]
 800cf2e:	f023 0320 	bic.w	r3, r3, #32
 800cf32:	6023      	str	r3, [r4, #0]
 800cf34:	2310      	movs	r3, #16
 800cf36:	e7a7      	b.n	800ce88 <_printf_i+0xf8>
 800cf38:	4824      	ldr	r0, [pc, #144]	; (800cfcc <_printf_i+0x23c>)
 800cf3a:	e7e4      	b.n	800cf06 <_printf_i+0x176>
 800cf3c:	4615      	mov	r5, r2
 800cf3e:	e7bd      	b.n	800cebc <_printf_i+0x12c>
 800cf40:	682b      	ldr	r3, [r5, #0]
 800cf42:	6826      	ldr	r6, [r4, #0]
 800cf44:	6961      	ldr	r1, [r4, #20]
 800cf46:	1d18      	adds	r0, r3, #4
 800cf48:	6028      	str	r0, [r5, #0]
 800cf4a:	0635      	lsls	r5, r6, #24
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	d501      	bpl.n	800cf54 <_printf_i+0x1c4>
 800cf50:	6019      	str	r1, [r3, #0]
 800cf52:	e002      	b.n	800cf5a <_printf_i+0x1ca>
 800cf54:	0670      	lsls	r0, r6, #25
 800cf56:	d5fb      	bpl.n	800cf50 <_printf_i+0x1c0>
 800cf58:	8019      	strh	r1, [r3, #0]
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	6123      	str	r3, [r4, #16]
 800cf5e:	4615      	mov	r5, r2
 800cf60:	e7bc      	b.n	800cedc <_printf_i+0x14c>
 800cf62:	682b      	ldr	r3, [r5, #0]
 800cf64:	1d1a      	adds	r2, r3, #4
 800cf66:	602a      	str	r2, [r5, #0]
 800cf68:	681d      	ldr	r5, [r3, #0]
 800cf6a:	6862      	ldr	r2, [r4, #4]
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	4628      	mov	r0, r5
 800cf70:	f7f3 f92e 	bl	80001d0 <memchr>
 800cf74:	b108      	cbz	r0, 800cf7a <_printf_i+0x1ea>
 800cf76:	1b40      	subs	r0, r0, r5
 800cf78:	6060      	str	r0, [r4, #4]
 800cf7a:	6863      	ldr	r3, [r4, #4]
 800cf7c:	6123      	str	r3, [r4, #16]
 800cf7e:	2300      	movs	r3, #0
 800cf80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf84:	e7aa      	b.n	800cedc <_printf_i+0x14c>
 800cf86:	6923      	ldr	r3, [r4, #16]
 800cf88:	462a      	mov	r2, r5
 800cf8a:	4649      	mov	r1, r9
 800cf8c:	4640      	mov	r0, r8
 800cf8e:	47d0      	blx	sl
 800cf90:	3001      	adds	r0, #1
 800cf92:	d0ad      	beq.n	800cef0 <_printf_i+0x160>
 800cf94:	6823      	ldr	r3, [r4, #0]
 800cf96:	079b      	lsls	r3, r3, #30
 800cf98:	d413      	bmi.n	800cfc2 <_printf_i+0x232>
 800cf9a:	68e0      	ldr	r0, [r4, #12]
 800cf9c:	9b03      	ldr	r3, [sp, #12]
 800cf9e:	4298      	cmp	r0, r3
 800cfa0:	bfb8      	it	lt
 800cfa2:	4618      	movlt	r0, r3
 800cfa4:	e7a6      	b.n	800cef4 <_printf_i+0x164>
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	4632      	mov	r2, r6
 800cfaa:	4649      	mov	r1, r9
 800cfac:	4640      	mov	r0, r8
 800cfae:	47d0      	blx	sl
 800cfb0:	3001      	adds	r0, #1
 800cfb2:	d09d      	beq.n	800cef0 <_printf_i+0x160>
 800cfb4:	3501      	adds	r5, #1
 800cfb6:	68e3      	ldr	r3, [r4, #12]
 800cfb8:	9903      	ldr	r1, [sp, #12]
 800cfba:	1a5b      	subs	r3, r3, r1
 800cfbc:	42ab      	cmp	r3, r5
 800cfbe:	dcf2      	bgt.n	800cfa6 <_printf_i+0x216>
 800cfc0:	e7eb      	b.n	800cf9a <_printf_i+0x20a>
 800cfc2:	2500      	movs	r5, #0
 800cfc4:	f104 0619 	add.w	r6, r4, #25
 800cfc8:	e7f5      	b.n	800cfb6 <_printf_i+0x226>
 800cfca:	bf00      	nop
 800cfcc:	0800f742 	.word	0x0800f742
 800cfd0:	0800f753 	.word	0x0800f753

0800cfd4 <std>:
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	b510      	push	{r4, lr}
 800cfd8:	4604      	mov	r4, r0
 800cfda:	e9c0 3300 	strd	r3, r3, [r0]
 800cfde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cfe2:	6083      	str	r3, [r0, #8]
 800cfe4:	8181      	strh	r1, [r0, #12]
 800cfe6:	6643      	str	r3, [r0, #100]	; 0x64
 800cfe8:	81c2      	strh	r2, [r0, #14]
 800cfea:	6183      	str	r3, [r0, #24]
 800cfec:	4619      	mov	r1, r3
 800cfee:	2208      	movs	r2, #8
 800cff0:	305c      	adds	r0, #92	; 0x5c
 800cff2:	f000 fa19 	bl	800d428 <memset>
 800cff6:	4b0d      	ldr	r3, [pc, #52]	; (800d02c <std+0x58>)
 800cff8:	6263      	str	r3, [r4, #36]	; 0x24
 800cffa:	4b0d      	ldr	r3, [pc, #52]	; (800d030 <std+0x5c>)
 800cffc:	62a3      	str	r3, [r4, #40]	; 0x28
 800cffe:	4b0d      	ldr	r3, [pc, #52]	; (800d034 <std+0x60>)
 800d000:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d002:	4b0d      	ldr	r3, [pc, #52]	; (800d038 <std+0x64>)
 800d004:	6323      	str	r3, [r4, #48]	; 0x30
 800d006:	4b0d      	ldr	r3, [pc, #52]	; (800d03c <std+0x68>)
 800d008:	6224      	str	r4, [r4, #32]
 800d00a:	429c      	cmp	r4, r3
 800d00c:	d006      	beq.n	800d01c <std+0x48>
 800d00e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d012:	4294      	cmp	r4, r2
 800d014:	d002      	beq.n	800d01c <std+0x48>
 800d016:	33d0      	adds	r3, #208	; 0xd0
 800d018:	429c      	cmp	r4, r3
 800d01a:	d105      	bne.n	800d028 <std+0x54>
 800d01c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d024:	f000 ba7c 	b.w	800d520 <__retarget_lock_init_recursive>
 800d028:	bd10      	pop	{r4, pc}
 800d02a:	bf00      	nop
 800d02c:	0800d259 	.word	0x0800d259
 800d030:	0800d27b 	.word	0x0800d27b
 800d034:	0800d2b3 	.word	0x0800d2b3
 800d038:	0800d2d7 	.word	0x0800d2d7
 800d03c:	200027e4 	.word	0x200027e4

0800d040 <stdio_exit_handler>:
 800d040:	4a02      	ldr	r2, [pc, #8]	; (800d04c <stdio_exit_handler+0xc>)
 800d042:	4903      	ldr	r1, [pc, #12]	; (800d050 <stdio_exit_handler+0x10>)
 800d044:	4803      	ldr	r0, [pc, #12]	; (800d054 <stdio_exit_handler+0x14>)
 800d046:	f000 b87b 	b.w	800d140 <_fwalk_sglue>
 800d04a:	bf00      	nop
 800d04c:	200001c8 	.word	0x200001c8
 800d050:	0800eed1 	.word	0x0800eed1
 800d054:	200001d4 	.word	0x200001d4

0800d058 <cleanup_stdio>:
 800d058:	6841      	ldr	r1, [r0, #4]
 800d05a:	4b0c      	ldr	r3, [pc, #48]	; (800d08c <cleanup_stdio+0x34>)
 800d05c:	4299      	cmp	r1, r3
 800d05e:	b510      	push	{r4, lr}
 800d060:	4604      	mov	r4, r0
 800d062:	d001      	beq.n	800d068 <cleanup_stdio+0x10>
 800d064:	f001 ff34 	bl	800eed0 <_fflush_r>
 800d068:	68a1      	ldr	r1, [r4, #8]
 800d06a:	4b09      	ldr	r3, [pc, #36]	; (800d090 <cleanup_stdio+0x38>)
 800d06c:	4299      	cmp	r1, r3
 800d06e:	d002      	beq.n	800d076 <cleanup_stdio+0x1e>
 800d070:	4620      	mov	r0, r4
 800d072:	f001 ff2d 	bl	800eed0 <_fflush_r>
 800d076:	68e1      	ldr	r1, [r4, #12]
 800d078:	4b06      	ldr	r3, [pc, #24]	; (800d094 <cleanup_stdio+0x3c>)
 800d07a:	4299      	cmp	r1, r3
 800d07c:	d004      	beq.n	800d088 <cleanup_stdio+0x30>
 800d07e:	4620      	mov	r0, r4
 800d080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d084:	f001 bf24 	b.w	800eed0 <_fflush_r>
 800d088:	bd10      	pop	{r4, pc}
 800d08a:	bf00      	nop
 800d08c:	200027e4 	.word	0x200027e4
 800d090:	2000284c 	.word	0x2000284c
 800d094:	200028b4 	.word	0x200028b4

0800d098 <global_stdio_init.part.0>:
 800d098:	b510      	push	{r4, lr}
 800d09a:	4b0b      	ldr	r3, [pc, #44]	; (800d0c8 <global_stdio_init.part.0+0x30>)
 800d09c:	4c0b      	ldr	r4, [pc, #44]	; (800d0cc <global_stdio_init.part.0+0x34>)
 800d09e:	4a0c      	ldr	r2, [pc, #48]	; (800d0d0 <global_stdio_init.part.0+0x38>)
 800d0a0:	601a      	str	r2, [r3, #0]
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	2104      	movs	r1, #4
 800d0a8:	f7ff ff94 	bl	800cfd4 <std>
 800d0ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	2109      	movs	r1, #9
 800d0b4:	f7ff ff8e 	bl	800cfd4 <std>
 800d0b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d0bc:	2202      	movs	r2, #2
 800d0be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0c2:	2112      	movs	r1, #18
 800d0c4:	f7ff bf86 	b.w	800cfd4 <std>
 800d0c8:	2000291c 	.word	0x2000291c
 800d0cc:	200027e4 	.word	0x200027e4
 800d0d0:	0800d041 	.word	0x0800d041

0800d0d4 <__sfp_lock_acquire>:
 800d0d4:	4801      	ldr	r0, [pc, #4]	; (800d0dc <__sfp_lock_acquire+0x8>)
 800d0d6:	f000 ba24 	b.w	800d522 <__retarget_lock_acquire_recursive>
 800d0da:	bf00      	nop
 800d0dc:	20002925 	.word	0x20002925

0800d0e0 <__sfp_lock_release>:
 800d0e0:	4801      	ldr	r0, [pc, #4]	; (800d0e8 <__sfp_lock_release+0x8>)
 800d0e2:	f000 ba1f 	b.w	800d524 <__retarget_lock_release_recursive>
 800d0e6:	bf00      	nop
 800d0e8:	20002925 	.word	0x20002925

0800d0ec <__sinit>:
 800d0ec:	b510      	push	{r4, lr}
 800d0ee:	4604      	mov	r4, r0
 800d0f0:	f7ff fff0 	bl	800d0d4 <__sfp_lock_acquire>
 800d0f4:	6a23      	ldr	r3, [r4, #32]
 800d0f6:	b11b      	cbz	r3, 800d100 <__sinit+0x14>
 800d0f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0fc:	f7ff bff0 	b.w	800d0e0 <__sfp_lock_release>
 800d100:	4b04      	ldr	r3, [pc, #16]	; (800d114 <__sinit+0x28>)
 800d102:	6223      	str	r3, [r4, #32]
 800d104:	4b04      	ldr	r3, [pc, #16]	; (800d118 <__sinit+0x2c>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d1f5      	bne.n	800d0f8 <__sinit+0xc>
 800d10c:	f7ff ffc4 	bl	800d098 <global_stdio_init.part.0>
 800d110:	e7f2      	b.n	800d0f8 <__sinit+0xc>
 800d112:	bf00      	nop
 800d114:	0800d059 	.word	0x0800d059
 800d118:	2000291c 	.word	0x2000291c

0800d11c <fiprintf>:
 800d11c:	b40e      	push	{r1, r2, r3}
 800d11e:	b503      	push	{r0, r1, lr}
 800d120:	4601      	mov	r1, r0
 800d122:	ab03      	add	r3, sp, #12
 800d124:	4805      	ldr	r0, [pc, #20]	; (800d13c <fiprintf+0x20>)
 800d126:	f853 2b04 	ldr.w	r2, [r3], #4
 800d12a:	6800      	ldr	r0, [r0, #0]
 800d12c:	9301      	str	r3, [sp, #4]
 800d12e:	f001 fd2f 	bl	800eb90 <_vfiprintf_r>
 800d132:	b002      	add	sp, #8
 800d134:	f85d eb04 	ldr.w	lr, [sp], #4
 800d138:	b003      	add	sp, #12
 800d13a:	4770      	bx	lr
 800d13c:	20000220 	.word	0x20000220

0800d140 <_fwalk_sglue>:
 800d140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d144:	4607      	mov	r7, r0
 800d146:	4688      	mov	r8, r1
 800d148:	4614      	mov	r4, r2
 800d14a:	2600      	movs	r6, #0
 800d14c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d150:	f1b9 0901 	subs.w	r9, r9, #1
 800d154:	d505      	bpl.n	800d162 <_fwalk_sglue+0x22>
 800d156:	6824      	ldr	r4, [r4, #0]
 800d158:	2c00      	cmp	r4, #0
 800d15a:	d1f7      	bne.n	800d14c <_fwalk_sglue+0xc>
 800d15c:	4630      	mov	r0, r6
 800d15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d162:	89ab      	ldrh	r3, [r5, #12]
 800d164:	2b01      	cmp	r3, #1
 800d166:	d907      	bls.n	800d178 <_fwalk_sglue+0x38>
 800d168:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d16c:	3301      	adds	r3, #1
 800d16e:	d003      	beq.n	800d178 <_fwalk_sglue+0x38>
 800d170:	4629      	mov	r1, r5
 800d172:	4638      	mov	r0, r7
 800d174:	47c0      	blx	r8
 800d176:	4306      	orrs	r6, r0
 800d178:	3568      	adds	r5, #104	; 0x68
 800d17a:	e7e9      	b.n	800d150 <_fwalk_sglue+0x10>

0800d17c <iprintf>:
 800d17c:	b40f      	push	{r0, r1, r2, r3}
 800d17e:	b507      	push	{r0, r1, r2, lr}
 800d180:	4906      	ldr	r1, [pc, #24]	; (800d19c <iprintf+0x20>)
 800d182:	ab04      	add	r3, sp, #16
 800d184:	6808      	ldr	r0, [r1, #0]
 800d186:	f853 2b04 	ldr.w	r2, [r3], #4
 800d18a:	6881      	ldr	r1, [r0, #8]
 800d18c:	9301      	str	r3, [sp, #4]
 800d18e:	f001 fcff 	bl	800eb90 <_vfiprintf_r>
 800d192:	b003      	add	sp, #12
 800d194:	f85d eb04 	ldr.w	lr, [sp], #4
 800d198:	b004      	add	sp, #16
 800d19a:	4770      	bx	lr
 800d19c:	20000220 	.word	0x20000220

0800d1a0 <_puts_r>:
 800d1a0:	6a03      	ldr	r3, [r0, #32]
 800d1a2:	b570      	push	{r4, r5, r6, lr}
 800d1a4:	6884      	ldr	r4, [r0, #8]
 800d1a6:	4605      	mov	r5, r0
 800d1a8:	460e      	mov	r6, r1
 800d1aa:	b90b      	cbnz	r3, 800d1b0 <_puts_r+0x10>
 800d1ac:	f7ff ff9e 	bl	800d0ec <__sinit>
 800d1b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1b2:	07db      	lsls	r3, r3, #31
 800d1b4:	d405      	bmi.n	800d1c2 <_puts_r+0x22>
 800d1b6:	89a3      	ldrh	r3, [r4, #12]
 800d1b8:	0598      	lsls	r0, r3, #22
 800d1ba:	d402      	bmi.n	800d1c2 <_puts_r+0x22>
 800d1bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1be:	f000 f9b0 	bl	800d522 <__retarget_lock_acquire_recursive>
 800d1c2:	89a3      	ldrh	r3, [r4, #12]
 800d1c4:	0719      	lsls	r1, r3, #28
 800d1c6:	d513      	bpl.n	800d1f0 <_puts_r+0x50>
 800d1c8:	6923      	ldr	r3, [r4, #16]
 800d1ca:	b18b      	cbz	r3, 800d1f0 <_puts_r+0x50>
 800d1cc:	3e01      	subs	r6, #1
 800d1ce:	68a3      	ldr	r3, [r4, #8]
 800d1d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d1d4:	3b01      	subs	r3, #1
 800d1d6:	60a3      	str	r3, [r4, #8]
 800d1d8:	b9e9      	cbnz	r1, 800d216 <_puts_r+0x76>
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	da2e      	bge.n	800d23c <_puts_r+0x9c>
 800d1de:	4622      	mov	r2, r4
 800d1e0:	210a      	movs	r1, #10
 800d1e2:	4628      	mov	r0, r5
 800d1e4:	f000 f87b 	bl	800d2de <__swbuf_r>
 800d1e8:	3001      	adds	r0, #1
 800d1ea:	d007      	beq.n	800d1fc <_puts_r+0x5c>
 800d1ec:	250a      	movs	r5, #10
 800d1ee:	e007      	b.n	800d200 <_puts_r+0x60>
 800d1f0:	4621      	mov	r1, r4
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	f000 f8b0 	bl	800d358 <__swsetup_r>
 800d1f8:	2800      	cmp	r0, #0
 800d1fa:	d0e7      	beq.n	800d1cc <_puts_r+0x2c>
 800d1fc:	f04f 35ff 	mov.w	r5, #4294967295
 800d200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d202:	07da      	lsls	r2, r3, #31
 800d204:	d405      	bmi.n	800d212 <_puts_r+0x72>
 800d206:	89a3      	ldrh	r3, [r4, #12]
 800d208:	059b      	lsls	r3, r3, #22
 800d20a:	d402      	bmi.n	800d212 <_puts_r+0x72>
 800d20c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d20e:	f000 f989 	bl	800d524 <__retarget_lock_release_recursive>
 800d212:	4628      	mov	r0, r5
 800d214:	bd70      	pop	{r4, r5, r6, pc}
 800d216:	2b00      	cmp	r3, #0
 800d218:	da04      	bge.n	800d224 <_puts_r+0x84>
 800d21a:	69a2      	ldr	r2, [r4, #24]
 800d21c:	429a      	cmp	r2, r3
 800d21e:	dc06      	bgt.n	800d22e <_puts_r+0x8e>
 800d220:	290a      	cmp	r1, #10
 800d222:	d004      	beq.n	800d22e <_puts_r+0x8e>
 800d224:	6823      	ldr	r3, [r4, #0]
 800d226:	1c5a      	adds	r2, r3, #1
 800d228:	6022      	str	r2, [r4, #0]
 800d22a:	7019      	strb	r1, [r3, #0]
 800d22c:	e7cf      	b.n	800d1ce <_puts_r+0x2e>
 800d22e:	4622      	mov	r2, r4
 800d230:	4628      	mov	r0, r5
 800d232:	f000 f854 	bl	800d2de <__swbuf_r>
 800d236:	3001      	adds	r0, #1
 800d238:	d1c9      	bne.n	800d1ce <_puts_r+0x2e>
 800d23a:	e7df      	b.n	800d1fc <_puts_r+0x5c>
 800d23c:	6823      	ldr	r3, [r4, #0]
 800d23e:	250a      	movs	r5, #10
 800d240:	1c5a      	adds	r2, r3, #1
 800d242:	6022      	str	r2, [r4, #0]
 800d244:	701d      	strb	r5, [r3, #0]
 800d246:	e7db      	b.n	800d200 <_puts_r+0x60>

0800d248 <puts>:
 800d248:	4b02      	ldr	r3, [pc, #8]	; (800d254 <puts+0xc>)
 800d24a:	4601      	mov	r1, r0
 800d24c:	6818      	ldr	r0, [r3, #0]
 800d24e:	f7ff bfa7 	b.w	800d1a0 <_puts_r>
 800d252:	bf00      	nop
 800d254:	20000220 	.word	0x20000220

0800d258 <__sread>:
 800d258:	b510      	push	{r4, lr}
 800d25a:	460c      	mov	r4, r1
 800d25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d260:	f000 f910 	bl	800d484 <_read_r>
 800d264:	2800      	cmp	r0, #0
 800d266:	bfab      	itete	ge
 800d268:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d26a:	89a3      	ldrhlt	r3, [r4, #12]
 800d26c:	181b      	addge	r3, r3, r0
 800d26e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d272:	bfac      	ite	ge
 800d274:	6563      	strge	r3, [r4, #84]	; 0x54
 800d276:	81a3      	strhlt	r3, [r4, #12]
 800d278:	bd10      	pop	{r4, pc}

0800d27a <__swrite>:
 800d27a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d27e:	461f      	mov	r7, r3
 800d280:	898b      	ldrh	r3, [r1, #12]
 800d282:	05db      	lsls	r3, r3, #23
 800d284:	4605      	mov	r5, r0
 800d286:	460c      	mov	r4, r1
 800d288:	4616      	mov	r6, r2
 800d28a:	d505      	bpl.n	800d298 <__swrite+0x1e>
 800d28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d290:	2302      	movs	r3, #2
 800d292:	2200      	movs	r2, #0
 800d294:	f000 f8e4 	bl	800d460 <_lseek_r>
 800d298:	89a3      	ldrh	r3, [r4, #12]
 800d29a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d29e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d2a2:	81a3      	strh	r3, [r4, #12]
 800d2a4:	4632      	mov	r2, r6
 800d2a6:	463b      	mov	r3, r7
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2ae:	f000 b8fb 	b.w	800d4a8 <_write_r>

0800d2b2 <__sseek>:
 800d2b2:	b510      	push	{r4, lr}
 800d2b4:	460c      	mov	r4, r1
 800d2b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2ba:	f000 f8d1 	bl	800d460 <_lseek_r>
 800d2be:	1c43      	adds	r3, r0, #1
 800d2c0:	89a3      	ldrh	r3, [r4, #12]
 800d2c2:	bf15      	itete	ne
 800d2c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d2c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d2ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d2ce:	81a3      	strheq	r3, [r4, #12]
 800d2d0:	bf18      	it	ne
 800d2d2:	81a3      	strhne	r3, [r4, #12]
 800d2d4:	bd10      	pop	{r4, pc}

0800d2d6 <__sclose>:
 800d2d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2da:	f000 b8b1 	b.w	800d440 <_close_r>

0800d2de <__swbuf_r>:
 800d2de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2e0:	460e      	mov	r6, r1
 800d2e2:	4614      	mov	r4, r2
 800d2e4:	4605      	mov	r5, r0
 800d2e6:	b118      	cbz	r0, 800d2f0 <__swbuf_r+0x12>
 800d2e8:	6a03      	ldr	r3, [r0, #32]
 800d2ea:	b90b      	cbnz	r3, 800d2f0 <__swbuf_r+0x12>
 800d2ec:	f7ff fefe 	bl	800d0ec <__sinit>
 800d2f0:	69a3      	ldr	r3, [r4, #24]
 800d2f2:	60a3      	str	r3, [r4, #8]
 800d2f4:	89a3      	ldrh	r3, [r4, #12]
 800d2f6:	071a      	lsls	r2, r3, #28
 800d2f8:	d525      	bpl.n	800d346 <__swbuf_r+0x68>
 800d2fa:	6923      	ldr	r3, [r4, #16]
 800d2fc:	b31b      	cbz	r3, 800d346 <__swbuf_r+0x68>
 800d2fe:	6823      	ldr	r3, [r4, #0]
 800d300:	6922      	ldr	r2, [r4, #16]
 800d302:	1a98      	subs	r0, r3, r2
 800d304:	6963      	ldr	r3, [r4, #20]
 800d306:	b2f6      	uxtb	r6, r6
 800d308:	4283      	cmp	r3, r0
 800d30a:	4637      	mov	r7, r6
 800d30c:	dc04      	bgt.n	800d318 <__swbuf_r+0x3a>
 800d30e:	4621      	mov	r1, r4
 800d310:	4628      	mov	r0, r5
 800d312:	f001 fddd 	bl	800eed0 <_fflush_r>
 800d316:	b9e0      	cbnz	r0, 800d352 <__swbuf_r+0x74>
 800d318:	68a3      	ldr	r3, [r4, #8]
 800d31a:	3b01      	subs	r3, #1
 800d31c:	60a3      	str	r3, [r4, #8]
 800d31e:	6823      	ldr	r3, [r4, #0]
 800d320:	1c5a      	adds	r2, r3, #1
 800d322:	6022      	str	r2, [r4, #0]
 800d324:	701e      	strb	r6, [r3, #0]
 800d326:	6962      	ldr	r2, [r4, #20]
 800d328:	1c43      	adds	r3, r0, #1
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d004      	beq.n	800d338 <__swbuf_r+0x5a>
 800d32e:	89a3      	ldrh	r3, [r4, #12]
 800d330:	07db      	lsls	r3, r3, #31
 800d332:	d506      	bpl.n	800d342 <__swbuf_r+0x64>
 800d334:	2e0a      	cmp	r6, #10
 800d336:	d104      	bne.n	800d342 <__swbuf_r+0x64>
 800d338:	4621      	mov	r1, r4
 800d33a:	4628      	mov	r0, r5
 800d33c:	f001 fdc8 	bl	800eed0 <_fflush_r>
 800d340:	b938      	cbnz	r0, 800d352 <__swbuf_r+0x74>
 800d342:	4638      	mov	r0, r7
 800d344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d346:	4621      	mov	r1, r4
 800d348:	4628      	mov	r0, r5
 800d34a:	f000 f805 	bl	800d358 <__swsetup_r>
 800d34e:	2800      	cmp	r0, #0
 800d350:	d0d5      	beq.n	800d2fe <__swbuf_r+0x20>
 800d352:	f04f 37ff 	mov.w	r7, #4294967295
 800d356:	e7f4      	b.n	800d342 <__swbuf_r+0x64>

0800d358 <__swsetup_r>:
 800d358:	b538      	push	{r3, r4, r5, lr}
 800d35a:	4b2a      	ldr	r3, [pc, #168]	; (800d404 <__swsetup_r+0xac>)
 800d35c:	4605      	mov	r5, r0
 800d35e:	6818      	ldr	r0, [r3, #0]
 800d360:	460c      	mov	r4, r1
 800d362:	b118      	cbz	r0, 800d36c <__swsetup_r+0x14>
 800d364:	6a03      	ldr	r3, [r0, #32]
 800d366:	b90b      	cbnz	r3, 800d36c <__swsetup_r+0x14>
 800d368:	f7ff fec0 	bl	800d0ec <__sinit>
 800d36c:	89a3      	ldrh	r3, [r4, #12]
 800d36e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d372:	0718      	lsls	r0, r3, #28
 800d374:	d422      	bmi.n	800d3bc <__swsetup_r+0x64>
 800d376:	06d9      	lsls	r1, r3, #27
 800d378:	d407      	bmi.n	800d38a <__swsetup_r+0x32>
 800d37a:	2309      	movs	r3, #9
 800d37c:	602b      	str	r3, [r5, #0]
 800d37e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d382:	81a3      	strh	r3, [r4, #12]
 800d384:	f04f 30ff 	mov.w	r0, #4294967295
 800d388:	e034      	b.n	800d3f4 <__swsetup_r+0x9c>
 800d38a:	0758      	lsls	r0, r3, #29
 800d38c:	d512      	bpl.n	800d3b4 <__swsetup_r+0x5c>
 800d38e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d390:	b141      	cbz	r1, 800d3a4 <__swsetup_r+0x4c>
 800d392:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d396:	4299      	cmp	r1, r3
 800d398:	d002      	beq.n	800d3a0 <__swsetup_r+0x48>
 800d39a:	4628      	mov	r0, r5
 800d39c:	f000 ff52 	bl	800e244 <_free_r>
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	6363      	str	r3, [r4, #52]	; 0x34
 800d3a4:	89a3      	ldrh	r3, [r4, #12]
 800d3a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d3aa:	81a3      	strh	r3, [r4, #12]
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	6063      	str	r3, [r4, #4]
 800d3b0:	6923      	ldr	r3, [r4, #16]
 800d3b2:	6023      	str	r3, [r4, #0]
 800d3b4:	89a3      	ldrh	r3, [r4, #12]
 800d3b6:	f043 0308 	orr.w	r3, r3, #8
 800d3ba:	81a3      	strh	r3, [r4, #12]
 800d3bc:	6923      	ldr	r3, [r4, #16]
 800d3be:	b94b      	cbnz	r3, 800d3d4 <__swsetup_r+0x7c>
 800d3c0:	89a3      	ldrh	r3, [r4, #12]
 800d3c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d3c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3ca:	d003      	beq.n	800d3d4 <__swsetup_r+0x7c>
 800d3cc:	4621      	mov	r1, r4
 800d3ce:	4628      	mov	r0, r5
 800d3d0:	f001 fdcc 	bl	800ef6c <__smakebuf_r>
 800d3d4:	89a0      	ldrh	r0, [r4, #12]
 800d3d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3da:	f010 0301 	ands.w	r3, r0, #1
 800d3de:	d00a      	beq.n	800d3f6 <__swsetup_r+0x9e>
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	60a3      	str	r3, [r4, #8]
 800d3e4:	6963      	ldr	r3, [r4, #20]
 800d3e6:	425b      	negs	r3, r3
 800d3e8:	61a3      	str	r3, [r4, #24]
 800d3ea:	6923      	ldr	r3, [r4, #16]
 800d3ec:	b943      	cbnz	r3, 800d400 <__swsetup_r+0xa8>
 800d3ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d3f2:	d1c4      	bne.n	800d37e <__swsetup_r+0x26>
 800d3f4:	bd38      	pop	{r3, r4, r5, pc}
 800d3f6:	0781      	lsls	r1, r0, #30
 800d3f8:	bf58      	it	pl
 800d3fa:	6963      	ldrpl	r3, [r4, #20]
 800d3fc:	60a3      	str	r3, [r4, #8]
 800d3fe:	e7f4      	b.n	800d3ea <__swsetup_r+0x92>
 800d400:	2000      	movs	r0, #0
 800d402:	e7f7      	b.n	800d3f4 <__swsetup_r+0x9c>
 800d404:	20000220 	.word	0x20000220

0800d408 <memcmp>:
 800d408:	b510      	push	{r4, lr}
 800d40a:	3901      	subs	r1, #1
 800d40c:	4402      	add	r2, r0
 800d40e:	4290      	cmp	r0, r2
 800d410:	d101      	bne.n	800d416 <memcmp+0xe>
 800d412:	2000      	movs	r0, #0
 800d414:	e005      	b.n	800d422 <memcmp+0x1a>
 800d416:	7803      	ldrb	r3, [r0, #0]
 800d418:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d41c:	42a3      	cmp	r3, r4
 800d41e:	d001      	beq.n	800d424 <memcmp+0x1c>
 800d420:	1b18      	subs	r0, r3, r4
 800d422:	bd10      	pop	{r4, pc}
 800d424:	3001      	adds	r0, #1
 800d426:	e7f2      	b.n	800d40e <memcmp+0x6>

0800d428 <memset>:
 800d428:	4402      	add	r2, r0
 800d42a:	4603      	mov	r3, r0
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d100      	bne.n	800d432 <memset+0xa>
 800d430:	4770      	bx	lr
 800d432:	f803 1b01 	strb.w	r1, [r3], #1
 800d436:	e7f9      	b.n	800d42c <memset+0x4>

0800d438 <_localeconv_r>:
 800d438:	4800      	ldr	r0, [pc, #0]	; (800d43c <_localeconv_r+0x4>)
 800d43a:	4770      	bx	lr
 800d43c:	20000314 	.word	0x20000314

0800d440 <_close_r>:
 800d440:	b538      	push	{r3, r4, r5, lr}
 800d442:	4d06      	ldr	r5, [pc, #24]	; (800d45c <_close_r+0x1c>)
 800d444:	2300      	movs	r3, #0
 800d446:	4604      	mov	r4, r0
 800d448:	4608      	mov	r0, r1
 800d44a:	602b      	str	r3, [r5, #0]
 800d44c:	f7f6 fc3f 	bl	8003cce <_close>
 800d450:	1c43      	adds	r3, r0, #1
 800d452:	d102      	bne.n	800d45a <_close_r+0x1a>
 800d454:	682b      	ldr	r3, [r5, #0]
 800d456:	b103      	cbz	r3, 800d45a <_close_r+0x1a>
 800d458:	6023      	str	r3, [r4, #0]
 800d45a:	bd38      	pop	{r3, r4, r5, pc}
 800d45c:	20002920 	.word	0x20002920

0800d460 <_lseek_r>:
 800d460:	b538      	push	{r3, r4, r5, lr}
 800d462:	4d07      	ldr	r5, [pc, #28]	; (800d480 <_lseek_r+0x20>)
 800d464:	4604      	mov	r4, r0
 800d466:	4608      	mov	r0, r1
 800d468:	4611      	mov	r1, r2
 800d46a:	2200      	movs	r2, #0
 800d46c:	602a      	str	r2, [r5, #0]
 800d46e:	461a      	mov	r2, r3
 800d470:	f7f6 fc54 	bl	8003d1c <_lseek>
 800d474:	1c43      	adds	r3, r0, #1
 800d476:	d102      	bne.n	800d47e <_lseek_r+0x1e>
 800d478:	682b      	ldr	r3, [r5, #0]
 800d47a:	b103      	cbz	r3, 800d47e <_lseek_r+0x1e>
 800d47c:	6023      	str	r3, [r4, #0]
 800d47e:	bd38      	pop	{r3, r4, r5, pc}
 800d480:	20002920 	.word	0x20002920

0800d484 <_read_r>:
 800d484:	b538      	push	{r3, r4, r5, lr}
 800d486:	4d07      	ldr	r5, [pc, #28]	; (800d4a4 <_read_r+0x20>)
 800d488:	4604      	mov	r4, r0
 800d48a:	4608      	mov	r0, r1
 800d48c:	4611      	mov	r1, r2
 800d48e:	2200      	movs	r2, #0
 800d490:	602a      	str	r2, [r5, #0]
 800d492:	461a      	mov	r2, r3
 800d494:	f7f6 fbfe 	bl	8003c94 <_read>
 800d498:	1c43      	adds	r3, r0, #1
 800d49a:	d102      	bne.n	800d4a2 <_read_r+0x1e>
 800d49c:	682b      	ldr	r3, [r5, #0]
 800d49e:	b103      	cbz	r3, 800d4a2 <_read_r+0x1e>
 800d4a0:	6023      	str	r3, [r4, #0]
 800d4a2:	bd38      	pop	{r3, r4, r5, pc}
 800d4a4:	20002920 	.word	0x20002920

0800d4a8 <_write_r>:
 800d4a8:	b538      	push	{r3, r4, r5, lr}
 800d4aa:	4d07      	ldr	r5, [pc, #28]	; (800d4c8 <_write_r+0x20>)
 800d4ac:	4604      	mov	r4, r0
 800d4ae:	4608      	mov	r0, r1
 800d4b0:	4611      	mov	r1, r2
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	602a      	str	r2, [r5, #0]
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	f7f4 fe20 	bl	80020fc <_write>
 800d4bc:	1c43      	adds	r3, r0, #1
 800d4be:	d102      	bne.n	800d4c6 <_write_r+0x1e>
 800d4c0:	682b      	ldr	r3, [r5, #0]
 800d4c2:	b103      	cbz	r3, 800d4c6 <_write_r+0x1e>
 800d4c4:	6023      	str	r3, [r4, #0]
 800d4c6:	bd38      	pop	{r3, r4, r5, pc}
 800d4c8:	20002920 	.word	0x20002920

0800d4cc <__errno>:
 800d4cc:	4b01      	ldr	r3, [pc, #4]	; (800d4d4 <__errno+0x8>)
 800d4ce:	6818      	ldr	r0, [r3, #0]
 800d4d0:	4770      	bx	lr
 800d4d2:	bf00      	nop
 800d4d4:	20000220 	.word	0x20000220

0800d4d8 <__libc_init_array>:
 800d4d8:	b570      	push	{r4, r5, r6, lr}
 800d4da:	4d0d      	ldr	r5, [pc, #52]	; (800d510 <__libc_init_array+0x38>)
 800d4dc:	4c0d      	ldr	r4, [pc, #52]	; (800d514 <__libc_init_array+0x3c>)
 800d4de:	1b64      	subs	r4, r4, r5
 800d4e0:	10a4      	asrs	r4, r4, #2
 800d4e2:	2600      	movs	r6, #0
 800d4e4:	42a6      	cmp	r6, r4
 800d4e6:	d109      	bne.n	800d4fc <__libc_init_array+0x24>
 800d4e8:	4d0b      	ldr	r5, [pc, #44]	; (800d518 <__libc_init_array+0x40>)
 800d4ea:	4c0c      	ldr	r4, [pc, #48]	; (800d51c <__libc_init_array+0x44>)
 800d4ec:	f001 fe26 	bl	800f13c <_init>
 800d4f0:	1b64      	subs	r4, r4, r5
 800d4f2:	10a4      	asrs	r4, r4, #2
 800d4f4:	2600      	movs	r6, #0
 800d4f6:	42a6      	cmp	r6, r4
 800d4f8:	d105      	bne.n	800d506 <__libc_init_array+0x2e>
 800d4fa:	bd70      	pop	{r4, r5, r6, pc}
 800d4fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d500:	4798      	blx	r3
 800d502:	3601      	adds	r6, #1
 800d504:	e7ee      	b.n	800d4e4 <__libc_init_array+0xc>
 800d506:	f855 3b04 	ldr.w	r3, [r5], #4
 800d50a:	4798      	blx	r3
 800d50c:	3601      	adds	r6, #1
 800d50e:	e7f2      	b.n	800d4f6 <__libc_init_array+0x1e>
 800d510:	0800fa70 	.word	0x0800fa70
 800d514:	0800fa70 	.word	0x0800fa70
 800d518:	0800fa70 	.word	0x0800fa70
 800d51c:	0800fa74 	.word	0x0800fa74

0800d520 <__retarget_lock_init_recursive>:
 800d520:	4770      	bx	lr

0800d522 <__retarget_lock_acquire_recursive>:
 800d522:	4770      	bx	lr

0800d524 <__retarget_lock_release_recursive>:
 800d524:	4770      	bx	lr

0800d526 <memcpy>:
 800d526:	440a      	add	r2, r1
 800d528:	4291      	cmp	r1, r2
 800d52a:	f100 33ff 	add.w	r3, r0, #4294967295
 800d52e:	d100      	bne.n	800d532 <memcpy+0xc>
 800d530:	4770      	bx	lr
 800d532:	b510      	push	{r4, lr}
 800d534:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d538:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d53c:	4291      	cmp	r1, r2
 800d53e:	d1f9      	bne.n	800d534 <memcpy+0xe>
 800d540:	bd10      	pop	{r4, pc}

0800d542 <abort>:
 800d542:	b508      	push	{r3, lr}
 800d544:	2006      	movs	r0, #6
 800d546:	f001 fd75 	bl	800f034 <raise>
 800d54a:	2001      	movs	r0, #1
 800d54c:	f7f6 fb98 	bl	8003c80 <_exit>

0800d550 <quorem>:
 800d550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d554:	6903      	ldr	r3, [r0, #16]
 800d556:	690c      	ldr	r4, [r1, #16]
 800d558:	42a3      	cmp	r3, r4
 800d55a:	4607      	mov	r7, r0
 800d55c:	db7e      	blt.n	800d65c <quorem+0x10c>
 800d55e:	3c01      	subs	r4, #1
 800d560:	f101 0814 	add.w	r8, r1, #20
 800d564:	f100 0514 	add.w	r5, r0, #20
 800d568:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d56c:	9301      	str	r3, [sp, #4]
 800d56e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d572:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d576:	3301      	adds	r3, #1
 800d578:	429a      	cmp	r2, r3
 800d57a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d57e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d582:	fbb2 f6f3 	udiv	r6, r2, r3
 800d586:	d331      	bcc.n	800d5ec <quorem+0x9c>
 800d588:	f04f 0e00 	mov.w	lr, #0
 800d58c:	4640      	mov	r0, r8
 800d58e:	46ac      	mov	ip, r5
 800d590:	46f2      	mov	sl, lr
 800d592:	f850 2b04 	ldr.w	r2, [r0], #4
 800d596:	b293      	uxth	r3, r2
 800d598:	fb06 e303 	mla	r3, r6, r3, lr
 800d59c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d5a0:	0c1a      	lsrs	r2, r3, #16
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	ebaa 0303 	sub.w	r3, sl, r3
 800d5a8:	f8dc a000 	ldr.w	sl, [ip]
 800d5ac:	fa13 f38a 	uxtah	r3, r3, sl
 800d5b0:	fb06 220e 	mla	r2, r6, lr, r2
 800d5b4:	9300      	str	r3, [sp, #0]
 800d5b6:	9b00      	ldr	r3, [sp, #0]
 800d5b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d5bc:	b292      	uxth	r2, r2
 800d5be:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d5c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d5c6:	f8bd 3000 	ldrh.w	r3, [sp]
 800d5ca:	4581      	cmp	r9, r0
 800d5cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5d0:	f84c 3b04 	str.w	r3, [ip], #4
 800d5d4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d5d8:	d2db      	bcs.n	800d592 <quorem+0x42>
 800d5da:	f855 300b 	ldr.w	r3, [r5, fp]
 800d5de:	b92b      	cbnz	r3, 800d5ec <quorem+0x9c>
 800d5e0:	9b01      	ldr	r3, [sp, #4]
 800d5e2:	3b04      	subs	r3, #4
 800d5e4:	429d      	cmp	r5, r3
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	d32c      	bcc.n	800d644 <quorem+0xf4>
 800d5ea:	613c      	str	r4, [r7, #16]
 800d5ec:	4638      	mov	r0, r7
 800d5ee:	f001 f9a5 	bl	800e93c <__mcmp>
 800d5f2:	2800      	cmp	r0, #0
 800d5f4:	db22      	blt.n	800d63c <quorem+0xec>
 800d5f6:	3601      	adds	r6, #1
 800d5f8:	4629      	mov	r1, r5
 800d5fa:	2000      	movs	r0, #0
 800d5fc:	f858 2b04 	ldr.w	r2, [r8], #4
 800d600:	f8d1 c000 	ldr.w	ip, [r1]
 800d604:	b293      	uxth	r3, r2
 800d606:	1ac3      	subs	r3, r0, r3
 800d608:	0c12      	lsrs	r2, r2, #16
 800d60a:	fa13 f38c 	uxtah	r3, r3, ip
 800d60e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d612:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d616:	b29b      	uxth	r3, r3
 800d618:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d61c:	45c1      	cmp	r9, r8
 800d61e:	f841 3b04 	str.w	r3, [r1], #4
 800d622:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d626:	d2e9      	bcs.n	800d5fc <quorem+0xac>
 800d628:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d62c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d630:	b922      	cbnz	r2, 800d63c <quorem+0xec>
 800d632:	3b04      	subs	r3, #4
 800d634:	429d      	cmp	r5, r3
 800d636:	461a      	mov	r2, r3
 800d638:	d30a      	bcc.n	800d650 <quorem+0x100>
 800d63a:	613c      	str	r4, [r7, #16]
 800d63c:	4630      	mov	r0, r6
 800d63e:	b003      	add	sp, #12
 800d640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d644:	6812      	ldr	r2, [r2, #0]
 800d646:	3b04      	subs	r3, #4
 800d648:	2a00      	cmp	r2, #0
 800d64a:	d1ce      	bne.n	800d5ea <quorem+0x9a>
 800d64c:	3c01      	subs	r4, #1
 800d64e:	e7c9      	b.n	800d5e4 <quorem+0x94>
 800d650:	6812      	ldr	r2, [r2, #0]
 800d652:	3b04      	subs	r3, #4
 800d654:	2a00      	cmp	r2, #0
 800d656:	d1f0      	bne.n	800d63a <quorem+0xea>
 800d658:	3c01      	subs	r4, #1
 800d65a:	e7eb      	b.n	800d634 <quorem+0xe4>
 800d65c:	2000      	movs	r0, #0
 800d65e:	e7ee      	b.n	800d63e <quorem+0xee>

0800d660 <_dtoa_r>:
 800d660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d664:	ed2d 8b04 	vpush	{d8-d9}
 800d668:	69c5      	ldr	r5, [r0, #28]
 800d66a:	b093      	sub	sp, #76	; 0x4c
 800d66c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d670:	ec57 6b10 	vmov	r6, r7, d0
 800d674:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d678:	9107      	str	r1, [sp, #28]
 800d67a:	4604      	mov	r4, r0
 800d67c:	920a      	str	r2, [sp, #40]	; 0x28
 800d67e:	930d      	str	r3, [sp, #52]	; 0x34
 800d680:	b975      	cbnz	r5, 800d6a0 <_dtoa_r+0x40>
 800d682:	2010      	movs	r0, #16
 800d684:	f000 fe2a 	bl	800e2dc <malloc>
 800d688:	4602      	mov	r2, r0
 800d68a:	61e0      	str	r0, [r4, #28]
 800d68c:	b920      	cbnz	r0, 800d698 <_dtoa_r+0x38>
 800d68e:	4bae      	ldr	r3, [pc, #696]	; (800d948 <_dtoa_r+0x2e8>)
 800d690:	21ef      	movs	r1, #239	; 0xef
 800d692:	48ae      	ldr	r0, [pc, #696]	; (800d94c <_dtoa_r+0x2ec>)
 800d694:	f7ff f81a 	bl	800c6cc <__assert_func>
 800d698:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d69c:	6005      	str	r5, [r0, #0]
 800d69e:	60c5      	str	r5, [r0, #12]
 800d6a0:	69e3      	ldr	r3, [r4, #28]
 800d6a2:	6819      	ldr	r1, [r3, #0]
 800d6a4:	b151      	cbz	r1, 800d6bc <_dtoa_r+0x5c>
 800d6a6:	685a      	ldr	r2, [r3, #4]
 800d6a8:	604a      	str	r2, [r1, #4]
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	4093      	lsls	r3, r2
 800d6ae:	608b      	str	r3, [r1, #8]
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	f000 ff07 	bl	800e4c4 <_Bfree>
 800d6b6:	69e3      	ldr	r3, [r4, #28]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	601a      	str	r2, [r3, #0]
 800d6bc:	1e3b      	subs	r3, r7, #0
 800d6be:	bfbb      	ittet	lt
 800d6c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d6c4:	9303      	strlt	r3, [sp, #12]
 800d6c6:	2300      	movge	r3, #0
 800d6c8:	2201      	movlt	r2, #1
 800d6ca:	bfac      	ite	ge
 800d6cc:	f8c8 3000 	strge.w	r3, [r8]
 800d6d0:	f8c8 2000 	strlt.w	r2, [r8]
 800d6d4:	4b9e      	ldr	r3, [pc, #632]	; (800d950 <_dtoa_r+0x2f0>)
 800d6d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d6da:	ea33 0308 	bics.w	r3, r3, r8
 800d6de:	d11b      	bne.n	800d718 <_dtoa_r+0xb8>
 800d6e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d6e2:	f242 730f 	movw	r3, #9999	; 0x270f
 800d6e6:	6013      	str	r3, [r2, #0]
 800d6e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d6ec:	4333      	orrs	r3, r6
 800d6ee:	f000 8593 	beq.w	800e218 <_dtoa_r+0xbb8>
 800d6f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6f4:	b963      	cbnz	r3, 800d710 <_dtoa_r+0xb0>
 800d6f6:	4b97      	ldr	r3, [pc, #604]	; (800d954 <_dtoa_r+0x2f4>)
 800d6f8:	e027      	b.n	800d74a <_dtoa_r+0xea>
 800d6fa:	4b97      	ldr	r3, [pc, #604]	; (800d958 <_dtoa_r+0x2f8>)
 800d6fc:	9300      	str	r3, [sp, #0]
 800d6fe:	3308      	adds	r3, #8
 800d700:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d702:	6013      	str	r3, [r2, #0]
 800d704:	9800      	ldr	r0, [sp, #0]
 800d706:	b013      	add	sp, #76	; 0x4c
 800d708:	ecbd 8b04 	vpop	{d8-d9}
 800d70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d710:	4b90      	ldr	r3, [pc, #576]	; (800d954 <_dtoa_r+0x2f4>)
 800d712:	9300      	str	r3, [sp, #0]
 800d714:	3303      	adds	r3, #3
 800d716:	e7f3      	b.n	800d700 <_dtoa_r+0xa0>
 800d718:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d71c:	2200      	movs	r2, #0
 800d71e:	ec51 0b17 	vmov	r0, r1, d7
 800d722:	eeb0 8a47 	vmov.f32	s16, s14
 800d726:	eef0 8a67 	vmov.f32	s17, s15
 800d72a:	2300      	movs	r3, #0
 800d72c:	f7f3 f9cc 	bl	8000ac8 <__aeabi_dcmpeq>
 800d730:	4681      	mov	r9, r0
 800d732:	b160      	cbz	r0, 800d74e <_dtoa_r+0xee>
 800d734:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d736:	2301      	movs	r3, #1
 800d738:	6013      	str	r3, [r2, #0]
 800d73a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	f000 8568 	beq.w	800e212 <_dtoa_r+0xbb2>
 800d742:	4b86      	ldr	r3, [pc, #536]	; (800d95c <_dtoa_r+0x2fc>)
 800d744:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d746:	6013      	str	r3, [r2, #0]
 800d748:	3b01      	subs	r3, #1
 800d74a:	9300      	str	r3, [sp, #0]
 800d74c:	e7da      	b.n	800d704 <_dtoa_r+0xa4>
 800d74e:	aa10      	add	r2, sp, #64	; 0x40
 800d750:	a911      	add	r1, sp, #68	; 0x44
 800d752:	4620      	mov	r0, r4
 800d754:	eeb0 0a48 	vmov.f32	s0, s16
 800d758:	eef0 0a68 	vmov.f32	s1, s17
 800d75c:	f001 f994 	bl	800ea88 <__d2b>
 800d760:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d764:	4682      	mov	sl, r0
 800d766:	2d00      	cmp	r5, #0
 800d768:	d07f      	beq.n	800d86a <_dtoa_r+0x20a>
 800d76a:	ee18 3a90 	vmov	r3, s17
 800d76e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d772:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d776:	ec51 0b18 	vmov	r0, r1, d8
 800d77a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d77e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d782:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d786:	4619      	mov	r1, r3
 800d788:	2200      	movs	r2, #0
 800d78a:	4b75      	ldr	r3, [pc, #468]	; (800d960 <_dtoa_r+0x300>)
 800d78c:	f7f2 fd7c 	bl	8000288 <__aeabi_dsub>
 800d790:	a367      	add	r3, pc, #412	; (adr r3, 800d930 <_dtoa_r+0x2d0>)
 800d792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d796:	f7f2 ff2f 	bl	80005f8 <__aeabi_dmul>
 800d79a:	a367      	add	r3, pc, #412	; (adr r3, 800d938 <_dtoa_r+0x2d8>)
 800d79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a0:	f7f2 fd74 	bl	800028c <__adddf3>
 800d7a4:	4606      	mov	r6, r0
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	460f      	mov	r7, r1
 800d7aa:	f7f2 febb 	bl	8000524 <__aeabi_i2d>
 800d7ae:	a364      	add	r3, pc, #400	; (adr r3, 800d940 <_dtoa_r+0x2e0>)
 800d7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b4:	f7f2 ff20 	bl	80005f8 <__aeabi_dmul>
 800d7b8:	4602      	mov	r2, r0
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	4630      	mov	r0, r6
 800d7be:	4639      	mov	r1, r7
 800d7c0:	f7f2 fd64 	bl	800028c <__adddf3>
 800d7c4:	4606      	mov	r6, r0
 800d7c6:	460f      	mov	r7, r1
 800d7c8:	f7f3 f9c6 	bl	8000b58 <__aeabi_d2iz>
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	4683      	mov	fp, r0
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	4630      	mov	r0, r6
 800d7d4:	4639      	mov	r1, r7
 800d7d6:	f7f3 f981 	bl	8000adc <__aeabi_dcmplt>
 800d7da:	b148      	cbz	r0, 800d7f0 <_dtoa_r+0x190>
 800d7dc:	4658      	mov	r0, fp
 800d7de:	f7f2 fea1 	bl	8000524 <__aeabi_i2d>
 800d7e2:	4632      	mov	r2, r6
 800d7e4:	463b      	mov	r3, r7
 800d7e6:	f7f3 f96f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7ea:	b908      	cbnz	r0, 800d7f0 <_dtoa_r+0x190>
 800d7ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d7f0:	f1bb 0f16 	cmp.w	fp, #22
 800d7f4:	d857      	bhi.n	800d8a6 <_dtoa_r+0x246>
 800d7f6:	4b5b      	ldr	r3, [pc, #364]	; (800d964 <_dtoa_r+0x304>)
 800d7f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d800:	ec51 0b18 	vmov	r0, r1, d8
 800d804:	f7f3 f96a 	bl	8000adc <__aeabi_dcmplt>
 800d808:	2800      	cmp	r0, #0
 800d80a:	d04e      	beq.n	800d8aa <_dtoa_r+0x24a>
 800d80c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d810:	2300      	movs	r3, #0
 800d812:	930c      	str	r3, [sp, #48]	; 0x30
 800d814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d816:	1b5b      	subs	r3, r3, r5
 800d818:	1e5a      	subs	r2, r3, #1
 800d81a:	bf45      	ittet	mi
 800d81c:	f1c3 0301 	rsbmi	r3, r3, #1
 800d820:	9305      	strmi	r3, [sp, #20]
 800d822:	2300      	movpl	r3, #0
 800d824:	2300      	movmi	r3, #0
 800d826:	9206      	str	r2, [sp, #24]
 800d828:	bf54      	ite	pl
 800d82a:	9305      	strpl	r3, [sp, #20]
 800d82c:	9306      	strmi	r3, [sp, #24]
 800d82e:	f1bb 0f00 	cmp.w	fp, #0
 800d832:	db3c      	blt.n	800d8ae <_dtoa_r+0x24e>
 800d834:	9b06      	ldr	r3, [sp, #24]
 800d836:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d83a:	445b      	add	r3, fp
 800d83c:	9306      	str	r3, [sp, #24]
 800d83e:	2300      	movs	r3, #0
 800d840:	9308      	str	r3, [sp, #32]
 800d842:	9b07      	ldr	r3, [sp, #28]
 800d844:	2b09      	cmp	r3, #9
 800d846:	d868      	bhi.n	800d91a <_dtoa_r+0x2ba>
 800d848:	2b05      	cmp	r3, #5
 800d84a:	bfc4      	itt	gt
 800d84c:	3b04      	subgt	r3, #4
 800d84e:	9307      	strgt	r3, [sp, #28]
 800d850:	9b07      	ldr	r3, [sp, #28]
 800d852:	f1a3 0302 	sub.w	r3, r3, #2
 800d856:	bfcc      	ite	gt
 800d858:	2500      	movgt	r5, #0
 800d85a:	2501      	movle	r5, #1
 800d85c:	2b03      	cmp	r3, #3
 800d85e:	f200 8085 	bhi.w	800d96c <_dtoa_r+0x30c>
 800d862:	e8df f003 	tbb	[pc, r3]
 800d866:	3b2e      	.short	0x3b2e
 800d868:	5839      	.short	0x5839
 800d86a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d86e:	441d      	add	r5, r3
 800d870:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d874:	2b20      	cmp	r3, #32
 800d876:	bfc1      	itttt	gt
 800d878:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d87c:	fa08 f803 	lslgt.w	r8, r8, r3
 800d880:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d884:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d888:	bfd6      	itet	le
 800d88a:	f1c3 0320 	rsble	r3, r3, #32
 800d88e:	ea48 0003 	orrgt.w	r0, r8, r3
 800d892:	fa06 f003 	lslle.w	r0, r6, r3
 800d896:	f7f2 fe35 	bl	8000504 <__aeabi_ui2d>
 800d89a:	2201      	movs	r2, #1
 800d89c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d8a0:	3d01      	subs	r5, #1
 800d8a2:	920e      	str	r2, [sp, #56]	; 0x38
 800d8a4:	e76f      	b.n	800d786 <_dtoa_r+0x126>
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	e7b3      	b.n	800d812 <_dtoa_r+0x1b2>
 800d8aa:	900c      	str	r0, [sp, #48]	; 0x30
 800d8ac:	e7b2      	b.n	800d814 <_dtoa_r+0x1b4>
 800d8ae:	9b05      	ldr	r3, [sp, #20]
 800d8b0:	eba3 030b 	sub.w	r3, r3, fp
 800d8b4:	9305      	str	r3, [sp, #20]
 800d8b6:	f1cb 0300 	rsb	r3, fp, #0
 800d8ba:	9308      	str	r3, [sp, #32]
 800d8bc:	2300      	movs	r3, #0
 800d8be:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8c0:	e7bf      	b.n	800d842 <_dtoa_r+0x1e2>
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d8c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	dc52      	bgt.n	800d972 <_dtoa_r+0x312>
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	9301      	str	r3, [sp, #4]
 800d8d0:	9304      	str	r3, [sp, #16]
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	920a      	str	r2, [sp, #40]	; 0x28
 800d8d6:	e00b      	b.n	800d8f0 <_dtoa_r+0x290>
 800d8d8:	2301      	movs	r3, #1
 800d8da:	e7f3      	b.n	800d8c4 <_dtoa_r+0x264>
 800d8dc:	2300      	movs	r3, #0
 800d8de:	9309      	str	r3, [sp, #36]	; 0x24
 800d8e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8e2:	445b      	add	r3, fp
 800d8e4:	9301      	str	r3, [sp, #4]
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	9304      	str	r3, [sp, #16]
 800d8ec:	bfb8      	it	lt
 800d8ee:	2301      	movlt	r3, #1
 800d8f0:	69e0      	ldr	r0, [r4, #28]
 800d8f2:	2100      	movs	r1, #0
 800d8f4:	2204      	movs	r2, #4
 800d8f6:	f102 0614 	add.w	r6, r2, #20
 800d8fa:	429e      	cmp	r6, r3
 800d8fc:	d93d      	bls.n	800d97a <_dtoa_r+0x31a>
 800d8fe:	6041      	str	r1, [r0, #4]
 800d900:	4620      	mov	r0, r4
 800d902:	f000 fd9f 	bl	800e444 <_Balloc>
 800d906:	9000      	str	r0, [sp, #0]
 800d908:	2800      	cmp	r0, #0
 800d90a:	d139      	bne.n	800d980 <_dtoa_r+0x320>
 800d90c:	4b16      	ldr	r3, [pc, #88]	; (800d968 <_dtoa_r+0x308>)
 800d90e:	4602      	mov	r2, r0
 800d910:	f240 11af 	movw	r1, #431	; 0x1af
 800d914:	e6bd      	b.n	800d692 <_dtoa_r+0x32>
 800d916:	2301      	movs	r3, #1
 800d918:	e7e1      	b.n	800d8de <_dtoa_r+0x27e>
 800d91a:	2501      	movs	r5, #1
 800d91c:	2300      	movs	r3, #0
 800d91e:	9307      	str	r3, [sp, #28]
 800d920:	9509      	str	r5, [sp, #36]	; 0x24
 800d922:	f04f 33ff 	mov.w	r3, #4294967295
 800d926:	9301      	str	r3, [sp, #4]
 800d928:	9304      	str	r3, [sp, #16]
 800d92a:	2200      	movs	r2, #0
 800d92c:	2312      	movs	r3, #18
 800d92e:	e7d1      	b.n	800d8d4 <_dtoa_r+0x274>
 800d930:	636f4361 	.word	0x636f4361
 800d934:	3fd287a7 	.word	0x3fd287a7
 800d938:	8b60c8b3 	.word	0x8b60c8b3
 800d93c:	3fc68a28 	.word	0x3fc68a28
 800d940:	509f79fb 	.word	0x509f79fb
 800d944:	3fd34413 	.word	0x3fd34413
 800d948:	0800f771 	.word	0x0800f771
 800d94c:	0800f788 	.word	0x0800f788
 800d950:	7ff00000 	.word	0x7ff00000
 800d954:	0800f76d 	.word	0x0800f76d
 800d958:	0800f764 	.word	0x0800f764
 800d95c:	0800f741 	.word	0x0800f741
 800d960:	3ff80000 	.word	0x3ff80000
 800d964:	0800f878 	.word	0x0800f878
 800d968:	0800f7e0 	.word	0x0800f7e0
 800d96c:	2301      	movs	r3, #1
 800d96e:	9309      	str	r3, [sp, #36]	; 0x24
 800d970:	e7d7      	b.n	800d922 <_dtoa_r+0x2c2>
 800d972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d974:	9301      	str	r3, [sp, #4]
 800d976:	9304      	str	r3, [sp, #16]
 800d978:	e7ba      	b.n	800d8f0 <_dtoa_r+0x290>
 800d97a:	3101      	adds	r1, #1
 800d97c:	0052      	lsls	r2, r2, #1
 800d97e:	e7ba      	b.n	800d8f6 <_dtoa_r+0x296>
 800d980:	69e3      	ldr	r3, [r4, #28]
 800d982:	9a00      	ldr	r2, [sp, #0]
 800d984:	601a      	str	r2, [r3, #0]
 800d986:	9b04      	ldr	r3, [sp, #16]
 800d988:	2b0e      	cmp	r3, #14
 800d98a:	f200 80a8 	bhi.w	800dade <_dtoa_r+0x47e>
 800d98e:	2d00      	cmp	r5, #0
 800d990:	f000 80a5 	beq.w	800dade <_dtoa_r+0x47e>
 800d994:	f1bb 0f00 	cmp.w	fp, #0
 800d998:	dd38      	ble.n	800da0c <_dtoa_r+0x3ac>
 800d99a:	4bc0      	ldr	r3, [pc, #768]	; (800dc9c <_dtoa_r+0x63c>)
 800d99c:	f00b 020f 	and.w	r2, fp, #15
 800d9a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d9a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d9ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d9b0:	d019      	beq.n	800d9e6 <_dtoa_r+0x386>
 800d9b2:	4bbb      	ldr	r3, [pc, #748]	; (800dca0 <_dtoa_r+0x640>)
 800d9b4:	ec51 0b18 	vmov	r0, r1, d8
 800d9b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d9bc:	f7f2 ff46 	bl	800084c <__aeabi_ddiv>
 800d9c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9c4:	f008 080f 	and.w	r8, r8, #15
 800d9c8:	2503      	movs	r5, #3
 800d9ca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800dca0 <_dtoa_r+0x640>
 800d9ce:	f1b8 0f00 	cmp.w	r8, #0
 800d9d2:	d10a      	bne.n	800d9ea <_dtoa_r+0x38a>
 800d9d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9d8:	4632      	mov	r2, r6
 800d9da:	463b      	mov	r3, r7
 800d9dc:	f7f2 ff36 	bl	800084c <__aeabi_ddiv>
 800d9e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9e4:	e02b      	b.n	800da3e <_dtoa_r+0x3de>
 800d9e6:	2502      	movs	r5, #2
 800d9e8:	e7ef      	b.n	800d9ca <_dtoa_r+0x36a>
 800d9ea:	f018 0f01 	tst.w	r8, #1
 800d9ee:	d008      	beq.n	800da02 <_dtoa_r+0x3a2>
 800d9f0:	4630      	mov	r0, r6
 800d9f2:	4639      	mov	r1, r7
 800d9f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d9f8:	f7f2 fdfe 	bl	80005f8 <__aeabi_dmul>
 800d9fc:	3501      	adds	r5, #1
 800d9fe:	4606      	mov	r6, r0
 800da00:	460f      	mov	r7, r1
 800da02:	ea4f 0868 	mov.w	r8, r8, asr #1
 800da06:	f109 0908 	add.w	r9, r9, #8
 800da0a:	e7e0      	b.n	800d9ce <_dtoa_r+0x36e>
 800da0c:	f000 809f 	beq.w	800db4e <_dtoa_r+0x4ee>
 800da10:	f1cb 0600 	rsb	r6, fp, #0
 800da14:	4ba1      	ldr	r3, [pc, #644]	; (800dc9c <_dtoa_r+0x63c>)
 800da16:	4fa2      	ldr	r7, [pc, #648]	; (800dca0 <_dtoa_r+0x640>)
 800da18:	f006 020f 	and.w	r2, r6, #15
 800da1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da24:	ec51 0b18 	vmov	r0, r1, d8
 800da28:	f7f2 fde6 	bl	80005f8 <__aeabi_dmul>
 800da2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da30:	1136      	asrs	r6, r6, #4
 800da32:	2300      	movs	r3, #0
 800da34:	2502      	movs	r5, #2
 800da36:	2e00      	cmp	r6, #0
 800da38:	d17e      	bne.n	800db38 <_dtoa_r+0x4d8>
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d1d0      	bne.n	800d9e0 <_dtoa_r+0x380>
 800da3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da40:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800da44:	2b00      	cmp	r3, #0
 800da46:	f000 8084 	beq.w	800db52 <_dtoa_r+0x4f2>
 800da4a:	4b96      	ldr	r3, [pc, #600]	; (800dca4 <_dtoa_r+0x644>)
 800da4c:	2200      	movs	r2, #0
 800da4e:	4640      	mov	r0, r8
 800da50:	4649      	mov	r1, r9
 800da52:	f7f3 f843 	bl	8000adc <__aeabi_dcmplt>
 800da56:	2800      	cmp	r0, #0
 800da58:	d07b      	beq.n	800db52 <_dtoa_r+0x4f2>
 800da5a:	9b04      	ldr	r3, [sp, #16]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d078      	beq.n	800db52 <_dtoa_r+0x4f2>
 800da60:	9b01      	ldr	r3, [sp, #4]
 800da62:	2b00      	cmp	r3, #0
 800da64:	dd39      	ble.n	800dada <_dtoa_r+0x47a>
 800da66:	4b90      	ldr	r3, [pc, #576]	; (800dca8 <_dtoa_r+0x648>)
 800da68:	2200      	movs	r2, #0
 800da6a:	4640      	mov	r0, r8
 800da6c:	4649      	mov	r1, r9
 800da6e:	f7f2 fdc3 	bl	80005f8 <__aeabi_dmul>
 800da72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da76:	9e01      	ldr	r6, [sp, #4]
 800da78:	f10b 37ff 	add.w	r7, fp, #4294967295
 800da7c:	3501      	adds	r5, #1
 800da7e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800da82:	4628      	mov	r0, r5
 800da84:	f7f2 fd4e 	bl	8000524 <__aeabi_i2d>
 800da88:	4642      	mov	r2, r8
 800da8a:	464b      	mov	r3, r9
 800da8c:	f7f2 fdb4 	bl	80005f8 <__aeabi_dmul>
 800da90:	4b86      	ldr	r3, [pc, #536]	; (800dcac <_dtoa_r+0x64c>)
 800da92:	2200      	movs	r2, #0
 800da94:	f7f2 fbfa 	bl	800028c <__adddf3>
 800da98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800da9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800daa0:	9303      	str	r3, [sp, #12]
 800daa2:	2e00      	cmp	r6, #0
 800daa4:	d158      	bne.n	800db58 <_dtoa_r+0x4f8>
 800daa6:	4b82      	ldr	r3, [pc, #520]	; (800dcb0 <_dtoa_r+0x650>)
 800daa8:	2200      	movs	r2, #0
 800daaa:	4640      	mov	r0, r8
 800daac:	4649      	mov	r1, r9
 800daae:	f7f2 fbeb 	bl	8000288 <__aeabi_dsub>
 800dab2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dab6:	4680      	mov	r8, r0
 800dab8:	4689      	mov	r9, r1
 800daba:	f7f3 f82d 	bl	8000b18 <__aeabi_dcmpgt>
 800dabe:	2800      	cmp	r0, #0
 800dac0:	f040 8296 	bne.w	800dff0 <_dtoa_r+0x990>
 800dac4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dac8:	4640      	mov	r0, r8
 800daca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dace:	4649      	mov	r1, r9
 800dad0:	f7f3 f804 	bl	8000adc <__aeabi_dcmplt>
 800dad4:	2800      	cmp	r0, #0
 800dad6:	f040 8289 	bne.w	800dfec <_dtoa_r+0x98c>
 800dada:	ed8d 8b02 	vstr	d8, [sp, #8]
 800dade:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	f2c0 814e 	blt.w	800dd82 <_dtoa_r+0x722>
 800dae6:	f1bb 0f0e 	cmp.w	fp, #14
 800daea:	f300 814a 	bgt.w	800dd82 <_dtoa_r+0x722>
 800daee:	4b6b      	ldr	r3, [pc, #428]	; (800dc9c <_dtoa_r+0x63c>)
 800daf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800daf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800daf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	f280 80dc 	bge.w	800dcb8 <_dtoa_r+0x658>
 800db00:	9b04      	ldr	r3, [sp, #16]
 800db02:	2b00      	cmp	r3, #0
 800db04:	f300 80d8 	bgt.w	800dcb8 <_dtoa_r+0x658>
 800db08:	f040 826f 	bne.w	800dfea <_dtoa_r+0x98a>
 800db0c:	4b68      	ldr	r3, [pc, #416]	; (800dcb0 <_dtoa_r+0x650>)
 800db0e:	2200      	movs	r2, #0
 800db10:	4640      	mov	r0, r8
 800db12:	4649      	mov	r1, r9
 800db14:	f7f2 fd70 	bl	80005f8 <__aeabi_dmul>
 800db18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db1c:	f7f2 fff2 	bl	8000b04 <__aeabi_dcmpge>
 800db20:	9e04      	ldr	r6, [sp, #16]
 800db22:	4637      	mov	r7, r6
 800db24:	2800      	cmp	r0, #0
 800db26:	f040 8245 	bne.w	800dfb4 <_dtoa_r+0x954>
 800db2a:	9d00      	ldr	r5, [sp, #0]
 800db2c:	2331      	movs	r3, #49	; 0x31
 800db2e:	f805 3b01 	strb.w	r3, [r5], #1
 800db32:	f10b 0b01 	add.w	fp, fp, #1
 800db36:	e241      	b.n	800dfbc <_dtoa_r+0x95c>
 800db38:	07f2      	lsls	r2, r6, #31
 800db3a:	d505      	bpl.n	800db48 <_dtoa_r+0x4e8>
 800db3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db40:	f7f2 fd5a 	bl	80005f8 <__aeabi_dmul>
 800db44:	3501      	adds	r5, #1
 800db46:	2301      	movs	r3, #1
 800db48:	1076      	asrs	r6, r6, #1
 800db4a:	3708      	adds	r7, #8
 800db4c:	e773      	b.n	800da36 <_dtoa_r+0x3d6>
 800db4e:	2502      	movs	r5, #2
 800db50:	e775      	b.n	800da3e <_dtoa_r+0x3de>
 800db52:	9e04      	ldr	r6, [sp, #16]
 800db54:	465f      	mov	r7, fp
 800db56:	e792      	b.n	800da7e <_dtoa_r+0x41e>
 800db58:	9900      	ldr	r1, [sp, #0]
 800db5a:	4b50      	ldr	r3, [pc, #320]	; (800dc9c <_dtoa_r+0x63c>)
 800db5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db60:	4431      	add	r1, r6
 800db62:	9102      	str	r1, [sp, #8]
 800db64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db66:	eeb0 9a47 	vmov.f32	s18, s14
 800db6a:	eef0 9a67 	vmov.f32	s19, s15
 800db6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800db72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800db76:	2900      	cmp	r1, #0
 800db78:	d044      	beq.n	800dc04 <_dtoa_r+0x5a4>
 800db7a:	494e      	ldr	r1, [pc, #312]	; (800dcb4 <_dtoa_r+0x654>)
 800db7c:	2000      	movs	r0, #0
 800db7e:	f7f2 fe65 	bl	800084c <__aeabi_ddiv>
 800db82:	ec53 2b19 	vmov	r2, r3, d9
 800db86:	f7f2 fb7f 	bl	8000288 <__aeabi_dsub>
 800db8a:	9d00      	ldr	r5, [sp, #0]
 800db8c:	ec41 0b19 	vmov	d9, r0, r1
 800db90:	4649      	mov	r1, r9
 800db92:	4640      	mov	r0, r8
 800db94:	f7f2 ffe0 	bl	8000b58 <__aeabi_d2iz>
 800db98:	4606      	mov	r6, r0
 800db9a:	f7f2 fcc3 	bl	8000524 <__aeabi_i2d>
 800db9e:	4602      	mov	r2, r0
 800dba0:	460b      	mov	r3, r1
 800dba2:	4640      	mov	r0, r8
 800dba4:	4649      	mov	r1, r9
 800dba6:	f7f2 fb6f 	bl	8000288 <__aeabi_dsub>
 800dbaa:	3630      	adds	r6, #48	; 0x30
 800dbac:	f805 6b01 	strb.w	r6, [r5], #1
 800dbb0:	ec53 2b19 	vmov	r2, r3, d9
 800dbb4:	4680      	mov	r8, r0
 800dbb6:	4689      	mov	r9, r1
 800dbb8:	f7f2 ff90 	bl	8000adc <__aeabi_dcmplt>
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	d164      	bne.n	800dc8a <_dtoa_r+0x62a>
 800dbc0:	4642      	mov	r2, r8
 800dbc2:	464b      	mov	r3, r9
 800dbc4:	4937      	ldr	r1, [pc, #220]	; (800dca4 <_dtoa_r+0x644>)
 800dbc6:	2000      	movs	r0, #0
 800dbc8:	f7f2 fb5e 	bl	8000288 <__aeabi_dsub>
 800dbcc:	ec53 2b19 	vmov	r2, r3, d9
 800dbd0:	f7f2 ff84 	bl	8000adc <__aeabi_dcmplt>
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	f040 80b6 	bne.w	800dd46 <_dtoa_r+0x6e6>
 800dbda:	9b02      	ldr	r3, [sp, #8]
 800dbdc:	429d      	cmp	r5, r3
 800dbde:	f43f af7c 	beq.w	800dada <_dtoa_r+0x47a>
 800dbe2:	4b31      	ldr	r3, [pc, #196]	; (800dca8 <_dtoa_r+0x648>)
 800dbe4:	ec51 0b19 	vmov	r0, r1, d9
 800dbe8:	2200      	movs	r2, #0
 800dbea:	f7f2 fd05 	bl	80005f8 <__aeabi_dmul>
 800dbee:	4b2e      	ldr	r3, [pc, #184]	; (800dca8 <_dtoa_r+0x648>)
 800dbf0:	ec41 0b19 	vmov	d9, r0, r1
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	4640      	mov	r0, r8
 800dbf8:	4649      	mov	r1, r9
 800dbfa:	f7f2 fcfd 	bl	80005f8 <__aeabi_dmul>
 800dbfe:	4680      	mov	r8, r0
 800dc00:	4689      	mov	r9, r1
 800dc02:	e7c5      	b.n	800db90 <_dtoa_r+0x530>
 800dc04:	ec51 0b17 	vmov	r0, r1, d7
 800dc08:	f7f2 fcf6 	bl	80005f8 <__aeabi_dmul>
 800dc0c:	9b02      	ldr	r3, [sp, #8]
 800dc0e:	9d00      	ldr	r5, [sp, #0]
 800dc10:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc12:	ec41 0b19 	vmov	d9, r0, r1
 800dc16:	4649      	mov	r1, r9
 800dc18:	4640      	mov	r0, r8
 800dc1a:	f7f2 ff9d 	bl	8000b58 <__aeabi_d2iz>
 800dc1e:	4606      	mov	r6, r0
 800dc20:	f7f2 fc80 	bl	8000524 <__aeabi_i2d>
 800dc24:	3630      	adds	r6, #48	; 0x30
 800dc26:	4602      	mov	r2, r0
 800dc28:	460b      	mov	r3, r1
 800dc2a:	4640      	mov	r0, r8
 800dc2c:	4649      	mov	r1, r9
 800dc2e:	f7f2 fb2b 	bl	8000288 <__aeabi_dsub>
 800dc32:	f805 6b01 	strb.w	r6, [r5], #1
 800dc36:	9b02      	ldr	r3, [sp, #8]
 800dc38:	429d      	cmp	r5, r3
 800dc3a:	4680      	mov	r8, r0
 800dc3c:	4689      	mov	r9, r1
 800dc3e:	f04f 0200 	mov.w	r2, #0
 800dc42:	d124      	bne.n	800dc8e <_dtoa_r+0x62e>
 800dc44:	4b1b      	ldr	r3, [pc, #108]	; (800dcb4 <_dtoa_r+0x654>)
 800dc46:	ec51 0b19 	vmov	r0, r1, d9
 800dc4a:	f7f2 fb1f 	bl	800028c <__adddf3>
 800dc4e:	4602      	mov	r2, r0
 800dc50:	460b      	mov	r3, r1
 800dc52:	4640      	mov	r0, r8
 800dc54:	4649      	mov	r1, r9
 800dc56:	f7f2 ff5f 	bl	8000b18 <__aeabi_dcmpgt>
 800dc5a:	2800      	cmp	r0, #0
 800dc5c:	d173      	bne.n	800dd46 <_dtoa_r+0x6e6>
 800dc5e:	ec53 2b19 	vmov	r2, r3, d9
 800dc62:	4914      	ldr	r1, [pc, #80]	; (800dcb4 <_dtoa_r+0x654>)
 800dc64:	2000      	movs	r0, #0
 800dc66:	f7f2 fb0f 	bl	8000288 <__aeabi_dsub>
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	4640      	mov	r0, r8
 800dc70:	4649      	mov	r1, r9
 800dc72:	f7f2 ff33 	bl	8000adc <__aeabi_dcmplt>
 800dc76:	2800      	cmp	r0, #0
 800dc78:	f43f af2f 	beq.w	800dada <_dtoa_r+0x47a>
 800dc7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dc7e:	1e6b      	subs	r3, r5, #1
 800dc80:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dc86:	2b30      	cmp	r3, #48	; 0x30
 800dc88:	d0f8      	beq.n	800dc7c <_dtoa_r+0x61c>
 800dc8a:	46bb      	mov	fp, r7
 800dc8c:	e04a      	b.n	800dd24 <_dtoa_r+0x6c4>
 800dc8e:	4b06      	ldr	r3, [pc, #24]	; (800dca8 <_dtoa_r+0x648>)
 800dc90:	f7f2 fcb2 	bl	80005f8 <__aeabi_dmul>
 800dc94:	4680      	mov	r8, r0
 800dc96:	4689      	mov	r9, r1
 800dc98:	e7bd      	b.n	800dc16 <_dtoa_r+0x5b6>
 800dc9a:	bf00      	nop
 800dc9c:	0800f878 	.word	0x0800f878
 800dca0:	0800f850 	.word	0x0800f850
 800dca4:	3ff00000 	.word	0x3ff00000
 800dca8:	40240000 	.word	0x40240000
 800dcac:	401c0000 	.word	0x401c0000
 800dcb0:	40140000 	.word	0x40140000
 800dcb4:	3fe00000 	.word	0x3fe00000
 800dcb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dcbc:	9d00      	ldr	r5, [sp, #0]
 800dcbe:	4642      	mov	r2, r8
 800dcc0:	464b      	mov	r3, r9
 800dcc2:	4630      	mov	r0, r6
 800dcc4:	4639      	mov	r1, r7
 800dcc6:	f7f2 fdc1 	bl	800084c <__aeabi_ddiv>
 800dcca:	f7f2 ff45 	bl	8000b58 <__aeabi_d2iz>
 800dcce:	9001      	str	r0, [sp, #4]
 800dcd0:	f7f2 fc28 	bl	8000524 <__aeabi_i2d>
 800dcd4:	4642      	mov	r2, r8
 800dcd6:	464b      	mov	r3, r9
 800dcd8:	f7f2 fc8e 	bl	80005f8 <__aeabi_dmul>
 800dcdc:	4602      	mov	r2, r0
 800dcde:	460b      	mov	r3, r1
 800dce0:	4630      	mov	r0, r6
 800dce2:	4639      	mov	r1, r7
 800dce4:	f7f2 fad0 	bl	8000288 <__aeabi_dsub>
 800dce8:	9e01      	ldr	r6, [sp, #4]
 800dcea:	9f04      	ldr	r7, [sp, #16]
 800dcec:	3630      	adds	r6, #48	; 0x30
 800dcee:	f805 6b01 	strb.w	r6, [r5], #1
 800dcf2:	9e00      	ldr	r6, [sp, #0]
 800dcf4:	1bae      	subs	r6, r5, r6
 800dcf6:	42b7      	cmp	r7, r6
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	460b      	mov	r3, r1
 800dcfc:	d134      	bne.n	800dd68 <_dtoa_r+0x708>
 800dcfe:	f7f2 fac5 	bl	800028c <__adddf3>
 800dd02:	4642      	mov	r2, r8
 800dd04:	464b      	mov	r3, r9
 800dd06:	4606      	mov	r6, r0
 800dd08:	460f      	mov	r7, r1
 800dd0a:	f7f2 ff05 	bl	8000b18 <__aeabi_dcmpgt>
 800dd0e:	b9c8      	cbnz	r0, 800dd44 <_dtoa_r+0x6e4>
 800dd10:	4642      	mov	r2, r8
 800dd12:	464b      	mov	r3, r9
 800dd14:	4630      	mov	r0, r6
 800dd16:	4639      	mov	r1, r7
 800dd18:	f7f2 fed6 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd1c:	b110      	cbz	r0, 800dd24 <_dtoa_r+0x6c4>
 800dd1e:	9b01      	ldr	r3, [sp, #4]
 800dd20:	07db      	lsls	r3, r3, #31
 800dd22:	d40f      	bmi.n	800dd44 <_dtoa_r+0x6e4>
 800dd24:	4651      	mov	r1, sl
 800dd26:	4620      	mov	r0, r4
 800dd28:	f000 fbcc 	bl	800e4c4 <_Bfree>
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dd30:	702b      	strb	r3, [r5, #0]
 800dd32:	f10b 0301 	add.w	r3, fp, #1
 800dd36:	6013      	str	r3, [r2, #0]
 800dd38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	f43f ace2 	beq.w	800d704 <_dtoa_r+0xa4>
 800dd40:	601d      	str	r5, [r3, #0]
 800dd42:	e4df      	b.n	800d704 <_dtoa_r+0xa4>
 800dd44:	465f      	mov	r7, fp
 800dd46:	462b      	mov	r3, r5
 800dd48:	461d      	mov	r5, r3
 800dd4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd4e:	2a39      	cmp	r2, #57	; 0x39
 800dd50:	d106      	bne.n	800dd60 <_dtoa_r+0x700>
 800dd52:	9a00      	ldr	r2, [sp, #0]
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d1f7      	bne.n	800dd48 <_dtoa_r+0x6e8>
 800dd58:	9900      	ldr	r1, [sp, #0]
 800dd5a:	2230      	movs	r2, #48	; 0x30
 800dd5c:	3701      	adds	r7, #1
 800dd5e:	700a      	strb	r2, [r1, #0]
 800dd60:	781a      	ldrb	r2, [r3, #0]
 800dd62:	3201      	adds	r2, #1
 800dd64:	701a      	strb	r2, [r3, #0]
 800dd66:	e790      	b.n	800dc8a <_dtoa_r+0x62a>
 800dd68:	4ba3      	ldr	r3, [pc, #652]	; (800dff8 <_dtoa_r+0x998>)
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	f7f2 fc44 	bl	80005f8 <__aeabi_dmul>
 800dd70:	2200      	movs	r2, #0
 800dd72:	2300      	movs	r3, #0
 800dd74:	4606      	mov	r6, r0
 800dd76:	460f      	mov	r7, r1
 800dd78:	f7f2 fea6 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd7c:	2800      	cmp	r0, #0
 800dd7e:	d09e      	beq.n	800dcbe <_dtoa_r+0x65e>
 800dd80:	e7d0      	b.n	800dd24 <_dtoa_r+0x6c4>
 800dd82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd84:	2a00      	cmp	r2, #0
 800dd86:	f000 80ca 	beq.w	800df1e <_dtoa_r+0x8be>
 800dd8a:	9a07      	ldr	r2, [sp, #28]
 800dd8c:	2a01      	cmp	r2, #1
 800dd8e:	f300 80ad 	bgt.w	800deec <_dtoa_r+0x88c>
 800dd92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd94:	2a00      	cmp	r2, #0
 800dd96:	f000 80a5 	beq.w	800dee4 <_dtoa_r+0x884>
 800dd9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dd9e:	9e08      	ldr	r6, [sp, #32]
 800dda0:	9d05      	ldr	r5, [sp, #20]
 800dda2:	9a05      	ldr	r2, [sp, #20]
 800dda4:	441a      	add	r2, r3
 800dda6:	9205      	str	r2, [sp, #20]
 800dda8:	9a06      	ldr	r2, [sp, #24]
 800ddaa:	2101      	movs	r1, #1
 800ddac:	441a      	add	r2, r3
 800ddae:	4620      	mov	r0, r4
 800ddb0:	9206      	str	r2, [sp, #24]
 800ddb2:	f000 fc3d 	bl	800e630 <__i2b>
 800ddb6:	4607      	mov	r7, r0
 800ddb8:	b165      	cbz	r5, 800ddd4 <_dtoa_r+0x774>
 800ddba:	9b06      	ldr	r3, [sp, #24]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	dd09      	ble.n	800ddd4 <_dtoa_r+0x774>
 800ddc0:	42ab      	cmp	r3, r5
 800ddc2:	9a05      	ldr	r2, [sp, #20]
 800ddc4:	bfa8      	it	ge
 800ddc6:	462b      	movge	r3, r5
 800ddc8:	1ad2      	subs	r2, r2, r3
 800ddca:	9205      	str	r2, [sp, #20]
 800ddcc:	9a06      	ldr	r2, [sp, #24]
 800ddce:	1aed      	subs	r5, r5, r3
 800ddd0:	1ad3      	subs	r3, r2, r3
 800ddd2:	9306      	str	r3, [sp, #24]
 800ddd4:	9b08      	ldr	r3, [sp, #32]
 800ddd6:	b1f3      	cbz	r3, 800de16 <_dtoa_r+0x7b6>
 800ddd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	f000 80a3 	beq.w	800df26 <_dtoa_r+0x8c6>
 800dde0:	2e00      	cmp	r6, #0
 800dde2:	dd10      	ble.n	800de06 <_dtoa_r+0x7a6>
 800dde4:	4639      	mov	r1, r7
 800dde6:	4632      	mov	r2, r6
 800dde8:	4620      	mov	r0, r4
 800ddea:	f000 fce1 	bl	800e7b0 <__pow5mult>
 800ddee:	4652      	mov	r2, sl
 800ddf0:	4601      	mov	r1, r0
 800ddf2:	4607      	mov	r7, r0
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	f000 fc31 	bl	800e65c <__multiply>
 800ddfa:	4651      	mov	r1, sl
 800ddfc:	4680      	mov	r8, r0
 800ddfe:	4620      	mov	r0, r4
 800de00:	f000 fb60 	bl	800e4c4 <_Bfree>
 800de04:	46c2      	mov	sl, r8
 800de06:	9b08      	ldr	r3, [sp, #32]
 800de08:	1b9a      	subs	r2, r3, r6
 800de0a:	d004      	beq.n	800de16 <_dtoa_r+0x7b6>
 800de0c:	4651      	mov	r1, sl
 800de0e:	4620      	mov	r0, r4
 800de10:	f000 fcce 	bl	800e7b0 <__pow5mult>
 800de14:	4682      	mov	sl, r0
 800de16:	2101      	movs	r1, #1
 800de18:	4620      	mov	r0, r4
 800de1a:	f000 fc09 	bl	800e630 <__i2b>
 800de1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de20:	2b00      	cmp	r3, #0
 800de22:	4606      	mov	r6, r0
 800de24:	f340 8081 	ble.w	800df2a <_dtoa_r+0x8ca>
 800de28:	461a      	mov	r2, r3
 800de2a:	4601      	mov	r1, r0
 800de2c:	4620      	mov	r0, r4
 800de2e:	f000 fcbf 	bl	800e7b0 <__pow5mult>
 800de32:	9b07      	ldr	r3, [sp, #28]
 800de34:	2b01      	cmp	r3, #1
 800de36:	4606      	mov	r6, r0
 800de38:	dd7a      	ble.n	800df30 <_dtoa_r+0x8d0>
 800de3a:	f04f 0800 	mov.w	r8, #0
 800de3e:	6933      	ldr	r3, [r6, #16]
 800de40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800de44:	6918      	ldr	r0, [r3, #16]
 800de46:	f000 fba5 	bl	800e594 <__hi0bits>
 800de4a:	f1c0 0020 	rsb	r0, r0, #32
 800de4e:	9b06      	ldr	r3, [sp, #24]
 800de50:	4418      	add	r0, r3
 800de52:	f010 001f 	ands.w	r0, r0, #31
 800de56:	f000 8094 	beq.w	800df82 <_dtoa_r+0x922>
 800de5a:	f1c0 0320 	rsb	r3, r0, #32
 800de5e:	2b04      	cmp	r3, #4
 800de60:	f340 8085 	ble.w	800df6e <_dtoa_r+0x90e>
 800de64:	9b05      	ldr	r3, [sp, #20]
 800de66:	f1c0 001c 	rsb	r0, r0, #28
 800de6a:	4403      	add	r3, r0
 800de6c:	9305      	str	r3, [sp, #20]
 800de6e:	9b06      	ldr	r3, [sp, #24]
 800de70:	4403      	add	r3, r0
 800de72:	4405      	add	r5, r0
 800de74:	9306      	str	r3, [sp, #24]
 800de76:	9b05      	ldr	r3, [sp, #20]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	dd05      	ble.n	800de88 <_dtoa_r+0x828>
 800de7c:	4651      	mov	r1, sl
 800de7e:	461a      	mov	r2, r3
 800de80:	4620      	mov	r0, r4
 800de82:	f000 fcef 	bl	800e864 <__lshift>
 800de86:	4682      	mov	sl, r0
 800de88:	9b06      	ldr	r3, [sp, #24]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	dd05      	ble.n	800de9a <_dtoa_r+0x83a>
 800de8e:	4631      	mov	r1, r6
 800de90:	461a      	mov	r2, r3
 800de92:	4620      	mov	r0, r4
 800de94:	f000 fce6 	bl	800e864 <__lshift>
 800de98:	4606      	mov	r6, r0
 800de9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d072      	beq.n	800df86 <_dtoa_r+0x926>
 800dea0:	4631      	mov	r1, r6
 800dea2:	4650      	mov	r0, sl
 800dea4:	f000 fd4a 	bl	800e93c <__mcmp>
 800dea8:	2800      	cmp	r0, #0
 800deaa:	da6c      	bge.n	800df86 <_dtoa_r+0x926>
 800deac:	2300      	movs	r3, #0
 800deae:	4651      	mov	r1, sl
 800deb0:	220a      	movs	r2, #10
 800deb2:	4620      	mov	r0, r4
 800deb4:	f000 fb28 	bl	800e508 <__multadd>
 800deb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800debe:	4682      	mov	sl, r0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	f000 81b0 	beq.w	800e226 <_dtoa_r+0xbc6>
 800dec6:	2300      	movs	r3, #0
 800dec8:	4639      	mov	r1, r7
 800deca:	220a      	movs	r2, #10
 800decc:	4620      	mov	r0, r4
 800dece:	f000 fb1b 	bl	800e508 <__multadd>
 800ded2:	9b01      	ldr	r3, [sp, #4]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	4607      	mov	r7, r0
 800ded8:	f300 8096 	bgt.w	800e008 <_dtoa_r+0x9a8>
 800dedc:	9b07      	ldr	r3, [sp, #28]
 800dede:	2b02      	cmp	r3, #2
 800dee0:	dc59      	bgt.n	800df96 <_dtoa_r+0x936>
 800dee2:	e091      	b.n	800e008 <_dtoa_r+0x9a8>
 800dee4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dee6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800deea:	e758      	b.n	800dd9e <_dtoa_r+0x73e>
 800deec:	9b04      	ldr	r3, [sp, #16]
 800deee:	1e5e      	subs	r6, r3, #1
 800def0:	9b08      	ldr	r3, [sp, #32]
 800def2:	42b3      	cmp	r3, r6
 800def4:	bfbf      	itttt	lt
 800def6:	9b08      	ldrlt	r3, [sp, #32]
 800def8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800defa:	9608      	strlt	r6, [sp, #32]
 800defc:	1af3      	sublt	r3, r6, r3
 800defe:	bfb4      	ite	lt
 800df00:	18d2      	addlt	r2, r2, r3
 800df02:	1b9e      	subge	r6, r3, r6
 800df04:	9b04      	ldr	r3, [sp, #16]
 800df06:	bfbc      	itt	lt
 800df08:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800df0a:	2600      	movlt	r6, #0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	bfb7      	itett	lt
 800df10:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800df14:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800df18:	1a9d      	sublt	r5, r3, r2
 800df1a:	2300      	movlt	r3, #0
 800df1c:	e741      	b.n	800dda2 <_dtoa_r+0x742>
 800df1e:	9e08      	ldr	r6, [sp, #32]
 800df20:	9d05      	ldr	r5, [sp, #20]
 800df22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800df24:	e748      	b.n	800ddb8 <_dtoa_r+0x758>
 800df26:	9a08      	ldr	r2, [sp, #32]
 800df28:	e770      	b.n	800de0c <_dtoa_r+0x7ac>
 800df2a:	9b07      	ldr	r3, [sp, #28]
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	dc19      	bgt.n	800df64 <_dtoa_r+0x904>
 800df30:	9b02      	ldr	r3, [sp, #8]
 800df32:	b9bb      	cbnz	r3, 800df64 <_dtoa_r+0x904>
 800df34:	9b03      	ldr	r3, [sp, #12]
 800df36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df3a:	b99b      	cbnz	r3, 800df64 <_dtoa_r+0x904>
 800df3c:	9b03      	ldr	r3, [sp, #12]
 800df3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df42:	0d1b      	lsrs	r3, r3, #20
 800df44:	051b      	lsls	r3, r3, #20
 800df46:	b183      	cbz	r3, 800df6a <_dtoa_r+0x90a>
 800df48:	9b05      	ldr	r3, [sp, #20]
 800df4a:	3301      	adds	r3, #1
 800df4c:	9305      	str	r3, [sp, #20]
 800df4e:	9b06      	ldr	r3, [sp, #24]
 800df50:	3301      	adds	r3, #1
 800df52:	9306      	str	r3, [sp, #24]
 800df54:	f04f 0801 	mov.w	r8, #1
 800df58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f47f af6f 	bne.w	800de3e <_dtoa_r+0x7de>
 800df60:	2001      	movs	r0, #1
 800df62:	e774      	b.n	800de4e <_dtoa_r+0x7ee>
 800df64:	f04f 0800 	mov.w	r8, #0
 800df68:	e7f6      	b.n	800df58 <_dtoa_r+0x8f8>
 800df6a:	4698      	mov	r8, r3
 800df6c:	e7f4      	b.n	800df58 <_dtoa_r+0x8f8>
 800df6e:	d082      	beq.n	800de76 <_dtoa_r+0x816>
 800df70:	9a05      	ldr	r2, [sp, #20]
 800df72:	331c      	adds	r3, #28
 800df74:	441a      	add	r2, r3
 800df76:	9205      	str	r2, [sp, #20]
 800df78:	9a06      	ldr	r2, [sp, #24]
 800df7a:	441a      	add	r2, r3
 800df7c:	441d      	add	r5, r3
 800df7e:	9206      	str	r2, [sp, #24]
 800df80:	e779      	b.n	800de76 <_dtoa_r+0x816>
 800df82:	4603      	mov	r3, r0
 800df84:	e7f4      	b.n	800df70 <_dtoa_r+0x910>
 800df86:	9b04      	ldr	r3, [sp, #16]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	dc37      	bgt.n	800dffc <_dtoa_r+0x99c>
 800df8c:	9b07      	ldr	r3, [sp, #28]
 800df8e:	2b02      	cmp	r3, #2
 800df90:	dd34      	ble.n	800dffc <_dtoa_r+0x99c>
 800df92:	9b04      	ldr	r3, [sp, #16]
 800df94:	9301      	str	r3, [sp, #4]
 800df96:	9b01      	ldr	r3, [sp, #4]
 800df98:	b963      	cbnz	r3, 800dfb4 <_dtoa_r+0x954>
 800df9a:	4631      	mov	r1, r6
 800df9c:	2205      	movs	r2, #5
 800df9e:	4620      	mov	r0, r4
 800dfa0:	f000 fab2 	bl	800e508 <__multadd>
 800dfa4:	4601      	mov	r1, r0
 800dfa6:	4606      	mov	r6, r0
 800dfa8:	4650      	mov	r0, sl
 800dfaa:	f000 fcc7 	bl	800e93c <__mcmp>
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	f73f adbb 	bgt.w	800db2a <_dtoa_r+0x4ca>
 800dfb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfb6:	9d00      	ldr	r5, [sp, #0]
 800dfb8:	ea6f 0b03 	mvn.w	fp, r3
 800dfbc:	f04f 0800 	mov.w	r8, #0
 800dfc0:	4631      	mov	r1, r6
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	f000 fa7e 	bl	800e4c4 <_Bfree>
 800dfc8:	2f00      	cmp	r7, #0
 800dfca:	f43f aeab 	beq.w	800dd24 <_dtoa_r+0x6c4>
 800dfce:	f1b8 0f00 	cmp.w	r8, #0
 800dfd2:	d005      	beq.n	800dfe0 <_dtoa_r+0x980>
 800dfd4:	45b8      	cmp	r8, r7
 800dfd6:	d003      	beq.n	800dfe0 <_dtoa_r+0x980>
 800dfd8:	4641      	mov	r1, r8
 800dfda:	4620      	mov	r0, r4
 800dfdc:	f000 fa72 	bl	800e4c4 <_Bfree>
 800dfe0:	4639      	mov	r1, r7
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	f000 fa6e 	bl	800e4c4 <_Bfree>
 800dfe8:	e69c      	b.n	800dd24 <_dtoa_r+0x6c4>
 800dfea:	2600      	movs	r6, #0
 800dfec:	4637      	mov	r7, r6
 800dfee:	e7e1      	b.n	800dfb4 <_dtoa_r+0x954>
 800dff0:	46bb      	mov	fp, r7
 800dff2:	4637      	mov	r7, r6
 800dff4:	e599      	b.n	800db2a <_dtoa_r+0x4ca>
 800dff6:	bf00      	nop
 800dff8:	40240000 	.word	0x40240000
 800dffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dffe:	2b00      	cmp	r3, #0
 800e000:	f000 80c8 	beq.w	800e194 <_dtoa_r+0xb34>
 800e004:	9b04      	ldr	r3, [sp, #16]
 800e006:	9301      	str	r3, [sp, #4]
 800e008:	2d00      	cmp	r5, #0
 800e00a:	dd05      	ble.n	800e018 <_dtoa_r+0x9b8>
 800e00c:	4639      	mov	r1, r7
 800e00e:	462a      	mov	r2, r5
 800e010:	4620      	mov	r0, r4
 800e012:	f000 fc27 	bl	800e864 <__lshift>
 800e016:	4607      	mov	r7, r0
 800e018:	f1b8 0f00 	cmp.w	r8, #0
 800e01c:	d05b      	beq.n	800e0d6 <_dtoa_r+0xa76>
 800e01e:	6879      	ldr	r1, [r7, #4]
 800e020:	4620      	mov	r0, r4
 800e022:	f000 fa0f 	bl	800e444 <_Balloc>
 800e026:	4605      	mov	r5, r0
 800e028:	b928      	cbnz	r0, 800e036 <_dtoa_r+0x9d6>
 800e02a:	4b83      	ldr	r3, [pc, #524]	; (800e238 <_dtoa_r+0xbd8>)
 800e02c:	4602      	mov	r2, r0
 800e02e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e032:	f7ff bb2e 	b.w	800d692 <_dtoa_r+0x32>
 800e036:	693a      	ldr	r2, [r7, #16]
 800e038:	3202      	adds	r2, #2
 800e03a:	0092      	lsls	r2, r2, #2
 800e03c:	f107 010c 	add.w	r1, r7, #12
 800e040:	300c      	adds	r0, #12
 800e042:	f7ff fa70 	bl	800d526 <memcpy>
 800e046:	2201      	movs	r2, #1
 800e048:	4629      	mov	r1, r5
 800e04a:	4620      	mov	r0, r4
 800e04c:	f000 fc0a 	bl	800e864 <__lshift>
 800e050:	9b00      	ldr	r3, [sp, #0]
 800e052:	3301      	adds	r3, #1
 800e054:	9304      	str	r3, [sp, #16]
 800e056:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e05a:	4413      	add	r3, r2
 800e05c:	9308      	str	r3, [sp, #32]
 800e05e:	9b02      	ldr	r3, [sp, #8]
 800e060:	f003 0301 	and.w	r3, r3, #1
 800e064:	46b8      	mov	r8, r7
 800e066:	9306      	str	r3, [sp, #24]
 800e068:	4607      	mov	r7, r0
 800e06a:	9b04      	ldr	r3, [sp, #16]
 800e06c:	4631      	mov	r1, r6
 800e06e:	3b01      	subs	r3, #1
 800e070:	4650      	mov	r0, sl
 800e072:	9301      	str	r3, [sp, #4]
 800e074:	f7ff fa6c 	bl	800d550 <quorem>
 800e078:	4641      	mov	r1, r8
 800e07a:	9002      	str	r0, [sp, #8]
 800e07c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e080:	4650      	mov	r0, sl
 800e082:	f000 fc5b 	bl	800e93c <__mcmp>
 800e086:	463a      	mov	r2, r7
 800e088:	9005      	str	r0, [sp, #20]
 800e08a:	4631      	mov	r1, r6
 800e08c:	4620      	mov	r0, r4
 800e08e:	f000 fc71 	bl	800e974 <__mdiff>
 800e092:	68c2      	ldr	r2, [r0, #12]
 800e094:	4605      	mov	r5, r0
 800e096:	bb02      	cbnz	r2, 800e0da <_dtoa_r+0xa7a>
 800e098:	4601      	mov	r1, r0
 800e09a:	4650      	mov	r0, sl
 800e09c:	f000 fc4e 	bl	800e93c <__mcmp>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	4629      	mov	r1, r5
 800e0a4:	4620      	mov	r0, r4
 800e0a6:	9209      	str	r2, [sp, #36]	; 0x24
 800e0a8:	f000 fa0c 	bl	800e4c4 <_Bfree>
 800e0ac:	9b07      	ldr	r3, [sp, #28]
 800e0ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0b0:	9d04      	ldr	r5, [sp, #16]
 800e0b2:	ea43 0102 	orr.w	r1, r3, r2
 800e0b6:	9b06      	ldr	r3, [sp, #24]
 800e0b8:	4319      	orrs	r1, r3
 800e0ba:	d110      	bne.n	800e0de <_dtoa_r+0xa7e>
 800e0bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e0c0:	d029      	beq.n	800e116 <_dtoa_r+0xab6>
 800e0c2:	9b05      	ldr	r3, [sp, #20]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	dd02      	ble.n	800e0ce <_dtoa_r+0xa6e>
 800e0c8:	9b02      	ldr	r3, [sp, #8]
 800e0ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e0ce:	9b01      	ldr	r3, [sp, #4]
 800e0d0:	f883 9000 	strb.w	r9, [r3]
 800e0d4:	e774      	b.n	800dfc0 <_dtoa_r+0x960>
 800e0d6:	4638      	mov	r0, r7
 800e0d8:	e7ba      	b.n	800e050 <_dtoa_r+0x9f0>
 800e0da:	2201      	movs	r2, #1
 800e0dc:	e7e1      	b.n	800e0a2 <_dtoa_r+0xa42>
 800e0de:	9b05      	ldr	r3, [sp, #20]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	db04      	blt.n	800e0ee <_dtoa_r+0xa8e>
 800e0e4:	9907      	ldr	r1, [sp, #28]
 800e0e6:	430b      	orrs	r3, r1
 800e0e8:	9906      	ldr	r1, [sp, #24]
 800e0ea:	430b      	orrs	r3, r1
 800e0ec:	d120      	bne.n	800e130 <_dtoa_r+0xad0>
 800e0ee:	2a00      	cmp	r2, #0
 800e0f0:	dded      	ble.n	800e0ce <_dtoa_r+0xa6e>
 800e0f2:	4651      	mov	r1, sl
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	f000 fbb4 	bl	800e864 <__lshift>
 800e0fc:	4631      	mov	r1, r6
 800e0fe:	4682      	mov	sl, r0
 800e100:	f000 fc1c 	bl	800e93c <__mcmp>
 800e104:	2800      	cmp	r0, #0
 800e106:	dc03      	bgt.n	800e110 <_dtoa_r+0xab0>
 800e108:	d1e1      	bne.n	800e0ce <_dtoa_r+0xa6e>
 800e10a:	f019 0f01 	tst.w	r9, #1
 800e10e:	d0de      	beq.n	800e0ce <_dtoa_r+0xa6e>
 800e110:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e114:	d1d8      	bne.n	800e0c8 <_dtoa_r+0xa68>
 800e116:	9a01      	ldr	r2, [sp, #4]
 800e118:	2339      	movs	r3, #57	; 0x39
 800e11a:	7013      	strb	r3, [r2, #0]
 800e11c:	462b      	mov	r3, r5
 800e11e:	461d      	mov	r5, r3
 800e120:	3b01      	subs	r3, #1
 800e122:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e126:	2a39      	cmp	r2, #57	; 0x39
 800e128:	d06c      	beq.n	800e204 <_dtoa_r+0xba4>
 800e12a:	3201      	adds	r2, #1
 800e12c:	701a      	strb	r2, [r3, #0]
 800e12e:	e747      	b.n	800dfc0 <_dtoa_r+0x960>
 800e130:	2a00      	cmp	r2, #0
 800e132:	dd07      	ble.n	800e144 <_dtoa_r+0xae4>
 800e134:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e138:	d0ed      	beq.n	800e116 <_dtoa_r+0xab6>
 800e13a:	9a01      	ldr	r2, [sp, #4]
 800e13c:	f109 0301 	add.w	r3, r9, #1
 800e140:	7013      	strb	r3, [r2, #0]
 800e142:	e73d      	b.n	800dfc0 <_dtoa_r+0x960>
 800e144:	9b04      	ldr	r3, [sp, #16]
 800e146:	9a08      	ldr	r2, [sp, #32]
 800e148:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e14c:	4293      	cmp	r3, r2
 800e14e:	d043      	beq.n	800e1d8 <_dtoa_r+0xb78>
 800e150:	4651      	mov	r1, sl
 800e152:	2300      	movs	r3, #0
 800e154:	220a      	movs	r2, #10
 800e156:	4620      	mov	r0, r4
 800e158:	f000 f9d6 	bl	800e508 <__multadd>
 800e15c:	45b8      	cmp	r8, r7
 800e15e:	4682      	mov	sl, r0
 800e160:	f04f 0300 	mov.w	r3, #0
 800e164:	f04f 020a 	mov.w	r2, #10
 800e168:	4641      	mov	r1, r8
 800e16a:	4620      	mov	r0, r4
 800e16c:	d107      	bne.n	800e17e <_dtoa_r+0xb1e>
 800e16e:	f000 f9cb 	bl	800e508 <__multadd>
 800e172:	4680      	mov	r8, r0
 800e174:	4607      	mov	r7, r0
 800e176:	9b04      	ldr	r3, [sp, #16]
 800e178:	3301      	adds	r3, #1
 800e17a:	9304      	str	r3, [sp, #16]
 800e17c:	e775      	b.n	800e06a <_dtoa_r+0xa0a>
 800e17e:	f000 f9c3 	bl	800e508 <__multadd>
 800e182:	4639      	mov	r1, r7
 800e184:	4680      	mov	r8, r0
 800e186:	2300      	movs	r3, #0
 800e188:	220a      	movs	r2, #10
 800e18a:	4620      	mov	r0, r4
 800e18c:	f000 f9bc 	bl	800e508 <__multadd>
 800e190:	4607      	mov	r7, r0
 800e192:	e7f0      	b.n	800e176 <_dtoa_r+0xb16>
 800e194:	9b04      	ldr	r3, [sp, #16]
 800e196:	9301      	str	r3, [sp, #4]
 800e198:	9d00      	ldr	r5, [sp, #0]
 800e19a:	4631      	mov	r1, r6
 800e19c:	4650      	mov	r0, sl
 800e19e:	f7ff f9d7 	bl	800d550 <quorem>
 800e1a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e1a6:	9b00      	ldr	r3, [sp, #0]
 800e1a8:	f805 9b01 	strb.w	r9, [r5], #1
 800e1ac:	1aea      	subs	r2, r5, r3
 800e1ae:	9b01      	ldr	r3, [sp, #4]
 800e1b0:	4293      	cmp	r3, r2
 800e1b2:	dd07      	ble.n	800e1c4 <_dtoa_r+0xb64>
 800e1b4:	4651      	mov	r1, sl
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	220a      	movs	r2, #10
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	f000 f9a4 	bl	800e508 <__multadd>
 800e1c0:	4682      	mov	sl, r0
 800e1c2:	e7ea      	b.n	800e19a <_dtoa_r+0xb3a>
 800e1c4:	9b01      	ldr	r3, [sp, #4]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	bfc8      	it	gt
 800e1ca:	461d      	movgt	r5, r3
 800e1cc:	9b00      	ldr	r3, [sp, #0]
 800e1ce:	bfd8      	it	le
 800e1d0:	2501      	movle	r5, #1
 800e1d2:	441d      	add	r5, r3
 800e1d4:	f04f 0800 	mov.w	r8, #0
 800e1d8:	4651      	mov	r1, sl
 800e1da:	2201      	movs	r2, #1
 800e1dc:	4620      	mov	r0, r4
 800e1de:	f000 fb41 	bl	800e864 <__lshift>
 800e1e2:	4631      	mov	r1, r6
 800e1e4:	4682      	mov	sl, r0
 800e1e6:	f000 fba9 	bl	800e93c <__mcmp>
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	dc96      	bgt.n	800e11c <_dtoa_r+0xabc>
 800e1ee:	d102      	bne.n	800e1f6 <_dtoa_r+0xb96>
 800e1f0:	f019 0f01 	tst.w	r9, #1
 800e1f4:	d192      	bne.n	800e11c <_dtoa_r+0xabc>
 800e1f6:	462b      	mov	r3, r5
 800e1f8:	461d      	mov	r5, r3
 800e1fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e1fe:	2a30      	cmp	r2, #48	; 0x30
 800e200:	d0fa      	beq.n	800e1f8 <_dtoa_r+0xb98>
 800e202:	e6dd      	b.n	800dfc0 <_dtoa_r+0x960>
 800e204:	9a00      	ldr	r2, [sp, #0]
 800e206:	429a      	cmp	r2, r3
 800e208:	d189      	bne.n	800e11e <_dtoa_r+0xabe>
 800e20a:	f10b 0b01 	add.w	fp, fp, #1
 800e20e:	2331      	movs	r3, #49	; 0x31
 800e210:	e796      	b.n	800e140 <_dtoa_r+0xae0>
 800e212:	4b0a      	ldr	r3, [pc, #40]	; (800e23c <_dtoa_r+0xbdc>)
 800e214:	f7ff ba99 	b.w	800d74a <_dtoa_r+0xea>
 800e218:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	f47f aa6d 	bne.w	800d6fa <_dtoa_r+0x9a>
 800e220:	4b07      	ldr	r3, [pc, #28]	; (800e240 <_dtoa_r+0xbe0>)
 800e222:	f7ff ba92 	b.w	800d74a <_dtoa_r+0xea>
 800e226:	9b01      	ldr	r3, [sp, #4]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	dcb5      	bgt.n	800e198 <_dtoa_r+0xb38>
 800e22c:	9b07      	ldr	r3, [sp, #28]
 800e22e:	2b02      	cmp	r3, #2
 800e230:	f73f aeb1 	bgt.w	800df96 <_dtoa_r+0x936>
 800e234:	e7b0      	b.n	800e198 <_dtoa_r+0xb38>
 800e236:	bf00      	nop
 800e238:	0800f7e0 	.word	0x0800f7e0
 800e23c:	0800f740 	.word	0x0800f740
 800e240:	0800f764 	.word	0x0800f764

0800e244 <_free_r>:
 800e244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e246:	2900      	cmp	r1, #0
 800e248:	d044      	beq.n	800e2d4 <_free_r+0x90>
 800e24a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e24e:	9001      	str	r0, [sp, #4]
 800e250:	2b00      	cmp	r3, #0
 800e252:	f1a1 0404 	sub.w	r4, r1, #4
 800e256:	bfb8      	it	lt
 800e258:	18e4      	addlt	r4, r4, r3
 800e25a:	f000 f8e7 	bl	800e42c <__malloc_lock>
 800e25e:	4a1e      	ldr	r2, [pc, #120]	; (800e2d8 <_free_r+0x94>)
 800e260:	9801      	ldr	r0, [sp, #4]
 800e262:	6813      	ldr	r3, [r2, #0]
 800e264:	b933      	cbnz	r3, 800e274 <_free_r+0x30>
 800e266:	6063      	str	r3, [r4, #4]
 800e268:	6014      	str	r4, [r2, #0]
 800e26a:	b003      	add	sp, #12
 800e26c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e270:	f000 b8e2 	b.w	800e438 <__malloc_unlock>
 800e274:	42a3      	cmp	r3, r4
 800e276:	d908      	bls.n	800e28a <_free_r+0x46>
 800e278:	6825      	ldr	r5, [r4, #0]
 800e27a:	1961      	adds	r1, r4, r5
 800e27c:	428b      	cmp	r3, r1
 800e27e:	bf01      	itttt	eq
 800e280:	6819      	ldreq	r1, [r3, #0]
 800e282:	685b      	ldreq	r3, [r3, #4]
 800e284:	1949      	addeq	r1, r1, r5
 800e286:	6021      	streq	r1, [r4, #0]
 800e288:	e7ed      	b.n	800e266 <_free_r+0x22>
 800e28a:	461a      	mov	r2, r3
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	b10b      	cbz	r3, 800e294 <_free_r+0x50>
 800e290:	42a3      	cmp	r3, r4
 800e292:	d9fa      	bls.n	800e28a <_free_r+0x46>
 800e294:	6811      	ldr	r1, [r2, #0]
 800e296:	1855      	adds	r5, r2, r1
 800e298:	42a5      	cmp	r5, r4
 800e29a:	d10b      	bne.n	800e2b4 <_free_r+0x70>
 800e29c:	6824      	ldr	r4, [r4, #0]
 800e29e:	4421      	add	r1, r4
 800e2a0:	1854      	adds	r4, r2, r1
 800e2a2:	42a3      	cmp	r3, r4
 800e2a4:	6011      	str	r1, [r2, #0]
 800e2a6:	d1e0      	bne.n	800e26a <_free_r+0x26>
 800e2a8:	681c      	ldr	r4, [r3, #0]
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	6053      	str	r3, [r2, #4]
 800e2ae:	440c      	add	r4, r1
 800e2b0:	6014      	str	r4, [r2, #0]
 800e2b2:	e7da      	b.n	800e26a <_free_r+0x26>
 800e2b4:	d902      	bls.n	800e2bc <_free_r+0x78>
 800e2b6:	230c      	movs	r3, #12
 800e2b8:	6003      	str	r3, [r0, #0]
 800e2ba:	e7d6      	b.n	800e26a <_free_r+0x26>
 800e2bc:	6825      	ldr	r5, [r4, #0]
 800e2be:	1961      	adds	r1, r4, r5
 800e2c0:	428b      	cmp	r3, r1
 800e2c2:	bf04      	itt	eq
 800e2c4:	6819      	ldreq	r1, [r3, #0]
 800e2c6:	685b      	ldreq	r3, [r3, #4]
 800e2c8:	6063      	str	r3, [r4, #4]
 800e2ca:	bf04      	itt	eq
 800e2cc:	1949      	addeq	r1, r1, r5
 800e2ce:	6021      	streq	r1, [r4, #0]
 800e2d0:	6054      	str	r4, [r2, #4]
 800e2d2:	e7ca      	b.n	800e26a <_free_r+0x26>
 800e2d4:	b003      	add	sp, #12
 800e2d6:	bd30      	pop	{r4, r5, pc}
 800e2d8:	20002928 	.word	0x20002928

0800e2dc <malloc>:
 800e2dc:	4b02      	ldr	r3, [pc, #8]	; (800e2e8 <malloc+0xc>)
 800e2de:	4601      	mov	r1, r0
 800e2e0:	6818      	ldr	r0, [r3, #0]
 800e2e2:	f000 b823 	b.w	800e32c <_malloc_r>
 800e2e6:	bf00      	nop
 800e2e8:	20000220 	.word	0x20000220

0800e2ec <sbrk_aligned>:
 800e2ec:	b570      	push	{r4, r5, r6, lr}
 800e2ee:	4e0e      	ldr	r6, [pc, #56]	; (800e328 <sbrk_aligned+0x3c>)
 800e2f0:	460c      	mov	r4, r1
 800e2f2:	6831      	ldr	r1, [r6, #0]
 800e2f4:	4605      	mov	r5, r0
 800e2f6:	b911      	cbnz	r1, 800e2fe <sbrk_aligned+0x12>
 800e2f8:	f000 feda 	bl	800f0b0 <_sbrk_r>
 800e2fc:	6030      	str	r0, [r6, #0]
 800e2fe:	4621      	mov	r1, r4
 800e300:	4628      	mov	r0, r5
 800e302:	f000 fed5 	bl	800f0b0 <_sbrk_r>
 800e306:	1c43      	adds	r3, r0, #1
 800e308:	d00a      	beq.n	800e320 <sbrk_aligned+0x34>
 800e30a:	1cc4      	adds	r4, r0, #3
 800e30c:	f024 0403 	bic.w	r4, r4, #3
 800e310:	42a0      	cmp	r0, r4
 800e312:	d007      	beq.n	800e324 <sbrk_aligned+0x38>
 800e314:	1a21      	subs	r1, r4, r0
 800e316:	4628      	mov	r0, r5
 800e318:	f000 feca 	bl	800f0b0 <_sbrk_r>
 800e31c:	3001      	adds	r0, #1
 800e31e:	d101      	bne.n	800e324 <sbrk_aligned+0x38>
 800e320:	f04f 34ff 	mov.w	r4, #4294967295
 800e324:	4620      	mov	r0, r4
 800e326:	bd70      	pop	{r4, r5, r6, pc}
 800e328:	2000292c 	.word	0x2000292c

0800e32c <_malloc_r>:
 800e32c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e330:	1ccd      	adds	r5, r1, #3
 800e332:	f025 0503 	bic.w	r5, r5, #3
 800e336:	3508      	adds	r5, #8
 800e338:	2d0c      	cmp	r5, #12
 800e33a:	bf38      	it	cc
 800e33c:	250c      	movcc	r5, #12
 800e33e:	2d00      	cmp	r5, #0
 800e340:	4607      	mov	r7, r0
 800e342:	db01      	blt.n	800e348 <_malloc_r+0x1c>
 800e344:	42a9      	cmp	r1, r5
 800e346:	d905      	bls.n	800e354 <_malloc_r+0x28>
 800e348:	230c      	movs	r3, #12
 800e34a:	603b      	str	r3, [r7, #0]
 800e34c:	2600      	movs	r6, #0
 800e34e:	4630      	mov	r0, r6
 800e350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e354:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e428 <_malloc_r+0xfc>
 800e358:	f000 f868 	bl	800e42c <__malloc_lock>
 800e35c:	f8d8 3000 	ldr.w	r3, [r8]
 800e360:	461c      	mov	r4, r3
 800e362:	bb5c      	cbnz	r4, 800e3bc <_malloc_r+0x90>
 800e364:	4629      	mov	r1, r5
 800e366:	4638      	mov	r0, r7
 800e368:	f7ff ffc0 	bl	800e2ec <sbrk_aligned>
 800e36c:	1c43      	adds	r3, r0, #1
 800e36e:	4604      	mov	r4, r0
 800e370:	d155      	bne.n	800e41e <_malloc_r+0xf2>
 800e372:	f8d8 4000 	ldr.w	r4, [r8]
 800e376:	4626      	mov	r6, r4
 800e378:	2e00      	cmp	r6, #0
 800e37a:	d145      	bne.n	800e408 <_malloc_r+0xdc>
 800e37c:	2c00      	cmp	r4, #0
 800e37e:	d048      	beq.n	800e412 <_malloc_r+0xe6>
 800e380:	6823      	ldr	r3, [r4, #0]
 800e382:	4631      	mov	r1, r6
 800e384:	4638      	mov	r0, r7
 800e386:	eb04 0903 	add.w	r9, r4, r3
 800e38a:	f000 fe91 	bl	800f0b0 <_sbrk_r>
 800e38e:	4581      	cmp	r9, r0
 800e390:	d13f      	bne.n	800e412 <_malloc_r+0xe6>
 800e392:	6821      	ldr	r1, [r4, #0]
 800e394:	1a6d      	subs	r5, r5, r1
 800e396:	4629      	mov	r1, r5
 800e398:	4638      	mov	r0, r7
 800e39a:	f7ff ffa7 	bl	800e2ec <sbrk_aligned>
 800e39e:	3001      	adds	r0, #1
 800e3a0:	d037      	beq.n	800e412 <_malloc_r+0xe6>
 800e3a2:	6823      	ldr	r3, [r4, #0]
 800e3a4:	442b      	add	r3, r5
 800e3a6:	6023      	str	r3, [r4, #0]
 800e3a8:	f8d8 3000 	ldr.w	r3, [r8]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d038      	beq.n	800e422 <_malloc_r+0xf6>
 800e3b0:	685a      	ldr	r2, [r3, #4]
 800e3b2:	42a2      	cmp	r2, r4
 800e3b4:	d12b      	bne.n	800e40e <_malloc_r+0xe2>
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	605a      	str	r2, [r3, #4]
 800e3ba:	e00f      	b.n	800e3dc <_malloc_r+0xb0>
 800e3bc:	6822      	ldr	r2, [r4, #0]
 800e3be:	1b52      	subs	r2, r2, r5
 800e3c0:	d41f      	bmi.n	800e402 <_malloc_r+0xd6>
 800e3c2:	2a0b      	cmp	r2, #11
 800e3c4:	d917      	bls.n	800e3f6 <_malloc_r+0xca>
 800e3c6:	1961      	adds	r1, r4, r5
 800e3c8:	42a3      	cmp	r3, r4
 800e3ca:	6025      	str	r5, [r4, #0]
 800e3cc:	bf18      	it	ne
 800e3ce:	6059      	strne	r1, [r3, #4]
 800e3d0:	6863      	ldr	r3, [r4, #4]
 800e3d2:	bf08      	it	eq
 800e3d4:	f8c8 1000 	streq.w	r1, [r8]
 800e3d8:	5162      	str	r2, [r4, r5]
 800e3da:	604b      	str	r3, [r1, #4]
 800e3dc:	4638      	mov	r0, r7
 800e3de:	f104 060b 	add.w	r6, r4, #11
 800e3e2:	f000 f829 	bl	800e438 <__malloc_unlock>
 800e3e6:	f026 0607 	bic.w	r6, r6, #7
 800e3ea:	1d23      	adds	r3, r4, #4
 800e3ec:	1af2      	subs	r2, r6, r3
 800e3ee:	d0ae      	beq.n	800e34e <_malloc_r+0x22>
 800e3f0:	1b9b      	subs	r3, r3, r6
 800e3f2:	50a3      	str	r3, [r4, r2]
 800e3f4:	e7ab      	b.n	800e34e <_malloc_r+0x22>
 800e3f6:	42a3      	cmp	r3, r4
 800e3f8:	6862      	ldr	r2, [r4, #4]
 800e3fa:	d1dd      	bne.n	800e3b8 <_malloc_r+0x8c>
 800e3fc:	f8c8 2000 	str.w	r2, [r8]
 800e400:	e7ec      	b.n	800e3dc <_malloc_r+0xb0>
 800e402:	4623      	mov	r3, r4
 800e404:	6864      	ldr	r4, [r4, #4]
 800e406:	e7ac      	b.n	800e362 <_malloc_r+0x36>
 800e408:	4634      	mov	r4, r6
 800e40a:	6876      	ldr	r6, [r6, #4]
 800e40c:	e7b4      	b.n	800e378 <_malloc_r+0x4c>
 800e40e:	4613      	mov	r3, r2
 800e410:	e7cc      	b.n	800e3ac <_malloc_r+0x80>
 800e412:	230c      	movs	r3, #12
 800e414:	603b      	str	r3, [r7, #0]
 800e416:	4638      	mov	r0, r7
 800e418:	f000 f80e 	bl	800e438 <__malloc_unlock>
 800e41c:	e797      	b.n	800e34e <_malloc_r+0x22>
 800e41e:	6025      	str	r5, [r4, #0]
 800e420:	e7dc      	b.n	800e3dc <_malloc_r+0xb0>
 800e422:	605b      	str	r3, [r3, #4]
 800e424:	deff      	udf	#255	; 0xff
 800e426:	bf00      	nop
 800e428:	20002928 	.word	0x20002928

0800e42c <__malloc_lock>:
 800e42c:	4801      	ldr	r0, [pc, #4]	; (800e434 <__malloc_lock+0x8>)
 800e42e:	f7ff b878 	b.w	800d522 <__retarget_lock_acquire_recursive>
 800e432:	bf00      	nop
 800e434:	20002924 	.word	0x20002924

0800e438 <__malloc_unlock>:
 800e438:	4801      	ldr	r0, [pc, #4]	; (800e440 <__malloc_unlock+0x8>)
 800e43a:	f7ff b873 	b.w	800d524 <__retarget_lock_release_recursive>
 800e43e:	bf00      	nop
 800e440:	20002924 	.word	0x20002924

0800e444 <_Balloc>:
 800e444:	b570      	push	{r4, r5, r6, lr}
 800e446:	69c6      	ldr	r6, [r0, #28]
 800e448:	4604      	mov	r4, r0
 800e44a:	460d      	mov	r5, r1
 800e44c:	b976      	cbnz	r6, 800e46c <_Balloc+0x28>
 800e44e:	2010      	movs	r0, #16
 800e450:	f7ff ff44 	bl	800e2dc <malloc>
 800e454:	4602      	mov	r2, r0
 800e456:	61e0      	str	r0, [r4, #28]
 800e458:	b920      	cbnz	r0, 800e464 <_Balloc+0x20>
 800e45a:	4b18      	ldr	r3, [pc, #96]	; (800e4bc <_Balloc+0x78>)
 800e45c:	4818      	ldr	r0, [pc, #96]	; (800e4c0 <_Balloc+0x7c>)
 800e45e:	216b      	movs	r1, #107	; 0x6b
 800e460:	f7fe f934 	bl	800c6cc <__assert_func>
 800e464:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e468:	6006      	str	r6, [r0, #0]
 800e46a:	60c6      	str	r6, [r0, #12]
 800e46c:	69e6      	ldr	r6, [r4, #28]
 800e46e:	68f3      	ldr	r3, [r6, #12]
 800e470:	b183      	cbz	r3, 800e494 <_Balloc+0x50>
 800e472:	69e3      	ldr	r3, [r4, #28]
 800e474:	68db      	ldr	r3, [r3, #12]
 800e476:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e47a:	b9b8      	cbnz	r0, 800e4ac <_Balloc+0x68>
 800e47c:	2101      	movs	r1, #1
 800e47e:	fa01 f605 	lsl.w	r6, r1, r5
 800e482:	1d72      	adds	r2, r6, #5
 800e484:	0092      	lsls	r2, r2, #2
 800e486:	4620      	mov	r0, r4
 800e488:	f000 fe22 	bl	800f0d0 <_calloc_r>
 800e48c:	b160      	cbz	r0, 800e4a8 <_Balloc+0x64>
 800e48e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e492:	e00e      	b.n	800e4b2 <_Balloc+0x6e>
 800e494:	2221      	movs	r2, #33	; 0x21
 800e496:	2104      	movs	r1, #4
 800e498:	4620      	mov	r0, r4
 800e49a:	f000 fe19 	bl	800f0d0 <_calloc_r>
 800e49e:	69e3      	ldr	r3, [r4, #28]
 800e4a0:	60f0      	str	r0, [r6, #12]
 800e4a2:	68db      	ldr	r3, [r3, #12]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d1e4      	bne.n	800e472 <_Balloc+0x2e>
 800e4a8:	2000      	movs	r0, #0
 800e4aa:	bd70      	pop	{r4, r5, r6, pc}
 800e4ac:	6802      	ldr	r2, [r0, #0]
 800e4ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e4b8:	e7f7      	b.n	800e4aa <_Balloc+0x66>
 800e4ba:	bf00      	nop
 800e4bc:	0800f771 	.word	0x0800f771
 800e4c0:	0800f7f1 	.word	0x0800f7f1

0800e4c4 <_Bfree>:
 800e4c4:	b570      	push	{r4, r5, r6, lr}
 800e4c6:	69c6      	ldr	r6, [r0, #28]
 800e4c8:	4605      	mov	r5, r0
 800e4ca:	460c      	mov	r4, r1
 800e4cc:	b976      	cbnz	r6, 800e4ec <_Bfree+0x28>
 800e4ce:	2010      	movs	r0, #16
 800e4d0:	f7ff ff04 	bl	800e2dc <malloc>
 800e4d4:	4602      	mov	r2, r0
 800e4d6:	61e8      	str	r0, [r5, #28]
 800e4d8:	b920      	cbnz	r0, 800e4e4 <_Bfree+0x20>
 800e4da:	4b09      	ldr	r3, [pc, #36]	; (800e500 <_Bfree+0x3c>)
 800e4dc:	4809      	ldr	r0, [pc, #36]	; (800e504 <_Bfree+0x40>)
 800e4de:	218f      	movs	r1, #143	; 0x8f
 800e4e0:	f7fe f8f4 	bl	800c6cc <__assert_func>
 800e4e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4e8:	6006      	str	r6, [r0, #0]
 800e4ea:	60c6      	str	r6, [r0, #12]
 800e4ec:	b13c      	cbz	r4, 800e4fe <_Bfree+0x3a>
 800e4ee:	69eb      	ldr	r3, [r5, #28]
 800e4f0:	6862      	ldr	r2, [r4, #4]
 800e4f2:	68db      	ldr	r3, [r3, #12]
 800e4f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e4f8:	6021      	str	r1, [r4, #0]
 800e4fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e4fe:	bd70      	pop	{r4, r5, r6, pc}
 800e500:	0800f771 	.word	0x0800f771
 800e504:	0800f7f1 	.word	0x0800f7f1

0800e508 <__multadd>:
 800e508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e50c:	690d      	ldr	r5, [r1, #16]
 800e50e:	4607      	mov	r7, r0
 800e510:	460c      	mov	r4, r1
 800e512:	461e      	mov	r6, r3
 800e514:	f101 0c14 	add.w	ip, r1, #20
 800e518:	2000      	movs	r0, #0
 800e51a:	f8dc 3000 	ldr.w	r3, [ip]
 800e51e:	b299      	uxth	r1, r3
 800e520:	fb02 6101 	mla	r1, r2, r1, r6
 800e524:	0c1e      	lsrs	r6, r3, #16
 800e526:	0c0b      	lsrs	r3, r1, #16
 800e528:	fb02 3306 	mla	r3, r2, r6, r3
 800e52c:	b289      	uxth	r1, r1
 800e52e:	3001      	adds	r0, #1
 800e530:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e534:	4285      	cmp	r5, r0
 800e536:	f84c 1b04 	str.w	r1, [ip], #4
 800e53a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e53e:	dcec      	bgt.n	800e51a <__multadd+0x12>
 800e540:	b30e      	cbz	r6, 800e586 <__multadd+0x7e>
 800e542:	68a3      	ldr	r3, [r4, #8]
 800e544:	42ab      	cmp	r3, r5
 800e546:	dc19      	bgt.n	800e57c <__multadd+0x74>
 800e548:	6861      	ldr	r1, [r4, #4]
 800e54a:	4638      	mov	r0, r7
 800e54c:	3101      	adds	r1, #1
 800e54e:	f7ff ff79 	bl	800e444 <_Balloc>
 800e552:	4680      	mov	r8, r0
 800e554:	b928      	cbnz	r0, 800e562 <__multadd+0x5a>
 800e556:	4602      	mov	r2, r0
 800e558:	4b0c      	ldr	r3, [pc, #48]	; (800e58c <__multadd+0x84>)
 800e55a:	480d      	ldr	r0, [pc, #52]	; (800e590 <__multadd+0x88>)
 800e55c:	21ba      	movs	r1, #186	; 0xba
 800e55e:	f7fe f8b5 	bl	800c6cc <__assert_func>
 800e562:	6922      	ldr	r2, [r4, #16]
 800e564:	3202      	adds	r2, #2
 800e566:	f104 010c 	add.w	r1, r4, #12
 800e56a:	0092      	lsls	r2, r2, #2
 800e56c:	300c      	adds	r0, #12
 800e56e:	f7fe ffda 	bl	800d526 <memcpy>
 800e572:	4621      	mov	r1, r4
 800e574:	4638      	mov	r0, r7
 800e576:	f7ff ffa5 	bl	800e4c4 <_Bfree>
 800e57a:	4644      	mov	r4, r8
 800e57c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e580:	3501      	adds	r5, #1
 800e582:	615e      	str	r6, [r3, #20]
 800e584:	6125      	str	r5, [r4, #16]
 800e586:	4620      	mov	r0, r4
 800e588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e58c:	0800f7e0 	.word	0x0800f7e0
 800e590:	0800f7f1 	.word	0x0800f7f1

0800e594 <__hi0bits>:
 800e594:	0c03      	lsrs	r3, r0, #16
 800e596:	041b      	lsls	r3, r3, #16
 800e598:	b9d3      	cbnz	r3, 800e5d0 <__hi0bits+0x3c>
 800e59a:	0400      	lsls	r0, r0, #16
 800e59c:	2310      	movs	r3, #16
 800e59e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e5a2:	bf04      	itt	eq
 800e5a4:	0200      	lsleq	r0, r0, #8
 800e5a6:	3308      	addeq	r3, #8
 800e5a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e5ac:	bf04      	itt	eq
 800e5ae:	0100      	lsleq	r0, r0, #4
 800e5b0:	3304      	addeq	r3, #4
 800e5b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e5b6:	bf04      	itt	eq
 800e5b8:	0080      	lsleq	r0, r0, #2
 800e5ba:	3302      	addeq	r3, #2
 800e5bc:	2800      	cmp	r0, #0
 800e5be:	db05      	blt.n	800e5cc <__hi0bits+0x38>
 800e5c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e5c4:	f103 0301 	add.w	r3, r3, #1
 800e5c8:	bf08      	it	eq
 800e5ca:	2320      	moveq	r3, #32
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	4770      	bx	lr
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	e7e4      	b.n	800e59e <__hi0bits+0xa>

0800e5d4 <__lo0bits>:
 800e5d4:	6803      	ldr	r3, [r0, #0]
 800e5d6:	f013 0207 	ands.w	r2, r3, #7
 800e5da:	d00c      	beq.n	800e5f6 <__lo0bits+0x22>
 800e5dc:	07d9      	lsls	r1, r3, #31
 800e5de:	d422      	bmi.n	800e626 <__lo0bits+0x52>
 800e5e0:	079a      	lsls	r2, r3, #30
 800e5e2:	bf49      	itett	mi
 800e5e4:	085b      	lsrmi	r3, r3, #1
 800e5e6:	089b      	lsrpl	r3, r3, #2
 800e5e8:	6003      	strmi	r3, [r0, #0]
 800e5ea:	2201      	movmi	r2, #1
 800e5ec:	bf5c      	itt	pl
 800e5ee:	6003      	strpl	r3, [r0, #0]
 800e5f0:	2202      	movpl	r2, #2
 800e5f2:	4610      	mov	r0, r2
 800e5f4:	4770      	bx	lr
 800e5f6:	b299      	uxth	r1, r3
 800e5f8:	b909      	cbnz	r1, 800e5fe <__lo0bits+0x2a>
 800e5fa:	0c1b      	lsrs	r3, r3, #16
 800e5fc:	2210      	movs	r2, #16
 800e5fe:	b2d9      	uxtb	r1, r3
 800e600:	b909      	cbnz	r1, 800e606 <__lo0bits+0x32>
 800e602:	3208      	adds	r2, #8
 800e604:	0a1b      	lsrs	r3, r3, #8
 800e606:	0719      	lsls	r1, r3, #28
 800e608:	bf04      	itt	eq
 800e60a:	091b      	lsreq	r3, r3, #4
 800e60c:	3204      	addeq	r2, #4
 800e60e:	0799      	lsls	r1, r3, #30
 800e610:	bf04      	itt	eq
 800e612:	089b      	lsreq	r3, r3, #2
 800e614:	3202      	addeq	r2, #2
 800e616:	07d9      	lsls	r1, r3, #31
 800e618:	d403      	bmi.n	800e622 <__lo0bits+0x4e>
 800e61a:	085b      	lsrs	r3, r3, #1
 800e61c:	f102 0201 	add.w	r2, r2, #1
 800e620:	d003      	beq.n	800e62a <__lo0bits+0x56>
 800e622:	6003      	str	r3, [r0, #0]
 800e624:	e7e5      	b.n	800e5f2 <__lo0bits+0x1e>
 800e626:	2200      	movs	r2, #0
 800e628:	e7e3      	b.n	800e5f2 <__lo0bits+0x1e>
 800e62a:	2220      	movs	r2, #32
 800e62c:	e7e1      	b.n	800e5f2 <__lo0bits+0x1e>
	...

0800e630 <__i2b>:
 800e630:	b510      	push	{r4, lr}
 800e632:	460c      	mov	r4, r1
 800e634:	2101      	movs	r1, #1
 800e636:	f7ff ff05 	bl	800e444 <_Balloc>
 800e63a:	4602      	mov	r2, r0
 800e63c:	b928      	cbnz	r0, 800e64a <__i2b+0x1a>
 800e63e:	4b05      	ldr	r3, [pc, #20]	; (800e654 <__i2b+0x24>)
 800e640:	4805      	ldr	r0, [pc, #20]	; (800e658 <__i2b+0x28>)
 800e642:	f240 1145 	movw	r1, #325	; 0x145
 800e646:	f7fe f841 	bl	800c6cc <__assert_func>
 800e64a:	2301      	movs	r3, #1
 800e64c:	6144      	str	r4, [r0, #20]
 800e64e:	6103      	str	r3, [r0, #16]
 800e650:	bd10      	pop	{r4, pc}
 800e652:	bf00      	nop
 800e654:	0800f7e0 	.word	0x0800f7e0
 800e658:	0800f7f1 	.word	0x0800f7f1

0800e65c <__multiply>:
 800e65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e660:	4691      	mov	r9, r2
 800e662:	690a      	ldr	r2, [r1, #16]
 800e664:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e668:	429a      	cmp	r2, r3
 800e66a:	bfb8      	it	lt
 800e66c:	460b      	movlt	r3, r1
 800e66e:	460c      	mov	r4, r1
 800e670:	bfbc      	itt	lt
 800e672:	464c      	movlt	r4, r9
 800e674:	4699      	movlt	r9, r3
 800e676:	6927      	ldr	r7, [r4, #16]
 800e678:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e67c:	68a3      	ldr	r3, [r4, #8]
 800e67e:	6861      	ldr	r1, [r4, #4]
 800e680:	eb07 060a 	add.w	r6, r7, sl
 800e684:	42b3      	cmp	r3, r6
 800e686:	b085      	sub	sp, #20
 800e688:	bfb8      	it	lt
 800e68a:	3101      	addlt	r1, #1
 800e68c:	f7ff feda 	bl	800e444 <_Balloc>
 800e690:	b930      	cbnz	r0, 800e6a0 <__multiply+0x44>
 800e692:	4602      	mov	r2, r0
 800e694:	4b44      	ldr	r3, [pc, #272]	; (800e7a8 <__multiply+0x14c>)
 800e696:	4845      	ldr	r0, [pc, #276]	; (800e7ac <__multiply+0x150>)
 800e698:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e69c:	f7fe f816 	bl	800c6cc <__assert_func>
 800e6a0:	f100 0514 	add.w	r5, r0, #20
 800e6a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e6a8:	462b      	mov	r3, r5
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	4543      	cmp	r3, r8
 800e6ae:	d321      	bcc.n	800e6f4 <__multiply+0x98>
 800e6b0:	f104 0314 	add.w	r3, r4, #20
 800e6b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e6b8:	f109 0314 	add.w	r3, r9, #20
 800e6bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e6c0:	9202      	str	r2, [sp, #8]
 800e6c2:	1b3a      	subs	r2, r7, r4
 800e6c4:	3a15      	subs	r2, #21
 800e6c6:	f022 0203 	bic.w	r2, r2, #3
 800e6ca:	3204      	adds	r2, #4
 800e6cc:	f104 0115 	add.w	r1, r4, #21
 800e6d0:	428f      	cmp	r7, r1
 800e6d2:	bf38      	it	cc
 800e6d4:	2204      	movcc	r2, #4
 800e6d6:	9201      	str	r2, [sp, #4]
 800e6d8:	9a02      	ldr	r2, [sp, #8]
 800e6da:	9303      	str	r3, [sp, #12]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d80c      	bhi.n	800e6fa <__multiply+0x9e>
 800e6e0:	2e00      	cmp	r6, #0
 800e6e2:	dd03      	ble.n	800e6ec <__multiply+0x90>
 800e6e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d05b      	beq.n	800e7a4 <__multiply+0x148>
 800e6ec:	6106      	str	r6, [r0, #16]
 800e6ee:	b005      	add	sp, #20
 800e6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6f4:	f843 2b04 	str.w	r2, [r3], #4
 800e6f8:	e7d8      	b.n	800e6ac <__multiply+0x50>
 800e6fa:	f8b3 a000 	ldrh.w	sl, [r3]
 800e6fe:	f1ba 0f00 	cmp.w	sl, #0
 800e702:	d024      	beq.n	800e74e <__multiply+0xf2>
 800e704:	f104 0e14 	add.w	lr, r4, #20
 800e708:	46a9      	mov	r9, r5
 800e70a:	f04f 0c00 	mov.w	ip, #0
 800e70e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e712:	f8d9 1000 	ldr.w	r1, [r9]
 800e716:	fa1f fb82 	uxth.w	fp, r2
 800e71a:	b289      	uxth	r1, r1
 800e71c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e720:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e724:	f8d9 2000 	ldr.w	r2, [r9]
 800e728:	4461      	add	r1, ip
 800e72a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e72e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e732:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e736:	b289      	uxth	r1, r1
 800e738:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e73c:	4577      	cmp	r7, lr
 800e73e:	f849 1b04 	str.w	r1, [r9], #4
 800e742:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e746:	d8e2      	bhi.n	800e70e <__multiply+0xb2>
 800e748:	9a01      	ldr	r2, [sp, #4]
 800e74a:	f845 c002 	str.w	ip, [r5, r2]
 800e74e:	9a03      	ldr	r2, [sp, #12]
 800e750:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e754:	3304      	adds	r3, #4
 800e756:	f1b9 0f00 	cmp.w	r9, #0
 800e75a:	d021      	beq.n	800e7a0 <__multiply+0x144>
 800e75c:	6829      	ldr	r1, [r5, #0]
 800e75e:	f104 0c14 	add.w	ip, r4, #20
 800e762:	46ae      	mov	lr, r5
 800e764:	f04f 0a00 	mov.w	sl, #0
 800e768:	f8bc b000 	ldrh.w	fp, [ip]
 800e76c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e770:	fb09 220b 	mla	r2, r9, fp, r2
 800e774:	4452      	add	r2, sl
 800e776:	b289      	uxth	r1, r1
 800e778:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e77c:	f84e 1b04 	str.w	r1, [lr], #4
 800e780:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e784:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e788:	f8be 1000 	ldrh.w	r1, [lr]
 800e78c:	fb09 110a 	mla	r1, r9, sl, r1
 800e790:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e794:	4567      	cmp	r7, ip
 800e796:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e79a:	d8e5      	bhi.n	800e768 <__multiply+0x10c>
 800e79c:	9a01      	ldr	r2, [sp, #4]
 800e79e:	50a9      	str	r1, [r5, r2]
 800e7a0:	3504      	adds	r5, #4
 800e7a2:	e799      	b.n	800e6d8 <__multiply+0x7c>
 800e7a4:	3e01      	subs	r6, #1
 800e7a6:	e79b      	b.n	800e6e0 <__multiply+0x84>
 800e7a8:	0800f7e0 	.word	0x0800f7e0
 800e7ac:	0800f7f1 	.word	0x0800f7f1

0800e7b0 <__pow5mult>:
 800e7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7b4:	4615      	mov	r5, r2
 800e7b6:	f012 0203 	ands.w	r2, r2, #3
 800e7ba:	4606      	mov	r6, r0
 800e7bc:	460f      	mov	r7, r1
 800e7be:	d007      	beq.n	800e7d0 <__pow5mult+0x20>
 800e7c0:	4c25      	ldr	r4, [pc, #148]	; (800e858 <__pow5mult+0xa8>)
 800e7c2:	3a01      	subs	r2, #1
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e7ca:	f7ff fe9d 	bl	800e508 <__multadd>
 800e7ce:	4607      	mov	r7, r0
 800e7d0:	10ad      	asrs	r5, r5, #2
 800e7d2:	d03d      	beq.n	800e850 <__pow5mult+0xa0>
 800e7d4:	69f4      	ldr	r4, [r6, #28]
 800e7d6:	b97c      	cbnz	r4, 800e7f8 <__pow5mult+0x48>
 800e7d8:	2010      	movs	r0, #16
 800e7da:	f7ff fd7f 	bl	800e2dc <malloc>
 800e7de:	4602      	mov	r2, r0
 800e7e0:	61f0      	str	r0, [r6, #28]
 800e7e2:	b928      	cbnz	r0, 800e7f0 <__pow5mult+0x40>
 800e7e4:	4b1d      	ldr	r3, [pc, #116]	; (800e85c <__pow5mult+0xac>)
 800e7e6:	481e      	ldr	r0, [pc, #120]	; (800e860 <__pow5mult+0xb0>)
 800e7e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e7ec:	f7fd ff6e 	bl	800c6cc <__assert_func>
 800e7f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e7f4:	6004      	str	r4, [r0, #0]
 800e7f6:	60c4      	str	r4, [r0, #12]
 800e7f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e7fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e800:	b94c      	cbnz	r4, 800e816 <__pow5mult+0x66>
 800e802:	f240 2171 	movw	r1, #625	; 0x271
 800e806:	4630      	mov	r0, r6
 800e808:	f7ff ff12 	bl	800e630 <__i2b>
 800e80c:	2300      	movs	r3, #0
 800e80e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e812:	4604      	mov	r4, r0
 800e814:	6003      	str	r3, [r0, #0]
 800e816:	f04f 0900 	mov.w	r9, #0
 800e81a:	07eb      	lsls	r3, r5, #31
 800e81c:	d50a      	bpl.n	800e834 <__pow5mult+0x84>
 800e81e:	4639      	mov	r1, r7
 800e820:	4622      	mov	r2, r4
 800e822:	4630      	mov	r0, r6
 800e824:	f7ff ff1a 	bl	800e65c <__multiply>
 800e828:	4639      	mov	r1, r7
 800e82a:	4680      	mov	r8, r0
 800e82c:	4630      	mov	r0, r6
 800e82e:	f7ff fe49 	bl	800e4c4 <_Bfree>
 800e832:	4647      	mov	r7, r8
 800e834:	106d      	asrs	r5, r5, #1
 800e836:	d00b      	beq.n	800e850 <__pow5mult+0xa0>
 800e838:	6820      	ldr	r0, [r4, #0]
 800e83a:	b938      	cbnz	r0, 800e84c <__pow5mult+0x9c>
 800e83c:	4622      	mov	r2, r4
 800e83e:	4621      	mov	r1, r4
 800e840:	4630      	mov	r0, r6
 800e842:	f7ff ff0b 	bl	800e65c <__multiply>
 800e846:	6020      	str	r0, [r4, #0]
 800e848:	f8c0 9000 	str.w	r9, [r0]
 800e84c:	4604      	mov	r4, r0
 800e84e:	e7e4      	b.n	800e81a <__pow5mult+0x6a>
 800e850:	4638      	mov	r0, r7
 800e852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e856:	bf00      	nop
 800e858:	0800f940 	.word	0x0800f940
 800e85c:	0800f771 	.word	0x0800f771
 800e860:	0800f7f1 	.word	0x0800f7f1

0800e864 <__lshift>:
 800e864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e868:	460c      	mov	r4, r1
 800e86a:	6849      	ldr	r1, [r1, #4]
 800e86c:	6923      	ldr	r3, [r4, #16]
 800e86e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e872:	68a3      	ldr	r3, [r4, #8]
 800e874:	4607      	mov	r7, r0
 800e876:	4691      	mov	r9, r2
 800e878:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e87c:	f108 0601 	add.w	r6, r8, #1
 800e880:	42b3      	cmp	r3, r6
 800e882:	db0b      	blt.n	800e89c <__lshift+0x38>
 800e884:	4638      	mov	r0, r7
 800e886:	f7ff fddd 	bl	800e444 <_Balloc>
 800e88a:	4605      	mov	r5, r0
 800e88c:	b948      	cbnz	r0, 800e8a2 <__lshift+0x3e>
 800e88e:	4602      	mov	r2, r0
 800e890:	4b28      	ldr	r3, [pc, #160]	; (800e934 <__lshift+0xd0>)
 800e892:	4829      	ldr	r0, [pc, #164]	; (800e938 <__lshift+0xd4>)
 800e894:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e898:	f7fd ff18 	bl	800c6cc <__assert_func>
 800e89c:	3101      	adds	r1, #1
 800e89e:	005b      	lsls	r3, r3, #1
 800e8a0:	e7ee      	b.n	800e880 <__lshift+0x1c>
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	f100 0114 	add.w	r1, r0, #20
 800e8a8:	f100 0210 	add.w	r2, r0, #16
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	4553      	cmp	r3, sl
 800e8b0:	db33      	blt.n	800e91a <__lshift+0xb6>
 800e8b2:	6920      	ldr	r0, [r4, #16]
 800e8b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e8b8:	f104 0314 	add.w	r3, r4, #20
 800e8bc:	f019 091f 	ands.w	r9, r9, #31
 800e8c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e8c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e8c8:	d02b      	beq.n	800e922 <__lshift+0xbe>
 800e8ca:	f1c9 0e20 	rsb	lr, r9, #32
 800e8ce:	468a      	mov	sl, r1
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	6818      	ldr	r0, [r3, #0]
 800e8d4:	fa00 f009 	lsl.w	r0, r0, r9
 800e8d8:	4310      	orrs	r0, r2
 800e8da:	f84a 0b04 	str.w	r0, [sl], #4
 800e8de:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8e2:	459c      	cmp	ip, r3
 800e8e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e8e8:	d8f3      	bhi.n	800e8d2 <__lshift+0x6e>
 800e8ea:	ebac 0304 	sub.w	r3, ip, r4
 800e8ee:	3b15      	subs	r3, #21
 800e8f0:	f023 0303 	bic.w	r3, r3, #3
 800e8f4:	3304      	adds	r3, #4
 800e8f6:	f104 0015 	add.w	r0, r4, #21
 800e8fa:	4584      	cmp	ip, r0
 800e8fc:	bf38      	it	cc
 800e8fe:	2304      	movcc	r3, #4
 800e900:	50ca      	str	r2, [r1, r3]
 800e902:	b10a      	cbz	r2, 800e908 <__lshift+0xa4>
 800e904:	f108 0602 	add.w	r6, r8, #2
 800e908:	3e01      	subs	r6, #1
 800e90a:	4638      	mov	r0, r7
 800e90c:	612e      	str	r6, [r5, #16]
 800e90e:	4621      	mov	r1, r4
 800e910:	f7ff fdd8 	bl	800e4c4 <_Bfree>
 800e914:	4628      	mov	r0, r5
 800e916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e91a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e91e:	3301      	adds	r3, #1
 800e920:	e7c5      	b.n	800e8ae <__lshift+0x4a>
 800e922:	3904      	subs	r1, #4
 800e924:	f853 2b04 	ldr.w	r2, [r3], #4
 800e928:	f841 2f04 	str.w	r2, [r1, #4]!
 800e92c:	459c      	cmp	ip, r3
 800e92e:	d8f9      	bhi.n	800e924 <__lshift+0xc0>
 800e930:	e7ea      	b.n	800e908 <__lshift+0xa4>
 800e932:	bf00      	nop
 800e934:	0800f7e0 	.word	0x0800f7e0
 800e938:	0800f7f1 	.word	0x0800f7f1

0800e93c <__mcmp>:
 800e93c:	b530      	push	{r4, r5, lr}
 800e93e:	6902      	ldr	r2, [r0, #16]
 800e940:	690c      	ldr	r4, [r1, #16]
 800e942:	1b12      	subs	r2, r2, r4
 800e944:	d10e      	bne.n	800e964 <__mcmp+0x28>
 800e946:	f100 0314 	add.w	r3, r0, #20
 800e94a:	3114      	adds	r1, #20
 800e94c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e950:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e954:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e958:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e95c:	42a5      	cmp	r5, r4
 800e95e:	d003      	beq.n	800e968 <__mcmp+0x2c>
 800e960:	d305      	bcc.n	800e96e <__mcmp+0x32>
 800e962:	2201      	movs	r2, #1
 800e964:	4610      	mov	r0, r2
 800e966:	bd30      	pop	{r4, r5, pc}
 800e968:	4283      	cmp	r3, r0
 800e96a:	d3f3      	bcc.n	800e954 <__mcmp+0x18>
 800e96c:	e7fa      	b.n	800e964 <__mcmp+0x28>
 800e96e:	f04f 32ff 	mov.w	r2, #4294967295
 800e972:	e7f7      	b.n	800e964 <__mcmp+0x28>

0800e974 <__mdiff>:
 800e974:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e978:	460c      	mov	r4, r1
 800e97a:	4606      	mov	r6, r0
 800e97c:	4611      	mov	r1, r2
 800e97e:	4620      	mov	r0, r4
 800e980:	4690      	mov	r8, r2
 800e982:	f7ff ffdb 	bl	800e93c <__mcmp>
 800e986:	1e05      	subs	r5, r0, #0
 800e988:	d110      	bne.n	800e9ac <__mdiff+0x38>
 800e98a:	4629      	mov	r1, r5
 800e98c:	4630      	mov	r0, r6
 800e98e:	f7ff fd59 	bl	800e444 <_Balloc>
 800e992:	b930      	cbnz	r0, 800e9a2 <__mdiff+0x2e>
 800e994:	4b3a      	ldr	r3, [pc, #232]	; (800ea80 <__mdiff+0x10c>)
 800e996:	4602      	mov	r2, r0
 800e998:	f240 2137 	movw	r1, #567	; 0x237
 800e99c:	4839      	ldr	r0, [pc, #228]	; (800ea84 <__mdiff+0x110>)
 800e99e:	f7fd fe95 	bl	800c6cc <__assert_func>
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e9a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ac:	bfa4      	itt	ge
 800e9ae:	4643      	movge	r3, r8
 800e9b0:	46a0      	movge	r8, r4
 800e9b2:	4630      	mov	r0, r6
 800e9b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e9b8:	bfa6      	itte	ge
 800e9ba:	461c      	movge	r4, r3
 800e9bc:	2500      	movge	r5, #0
 800e9be:	2501      	movlt	r5, #1
 800e9c0:	f7ff fd40 	bl	800e444 <_Balloc>
 800e9c4:	b920      	cbnz	r0, 800e9d0 <__mdiff+0x5c>
 800e9c6:	4b2e      	ldr	r3, [pc, #184]	; (800ea80 <__mdiff+0x10c>)
 800e9c8:	4602      	mov	r2, r0
 800e9ca:	f240 2145 	movw	r1, #581	; 0x245
 800e9ce:	e7e5      	b.n	800e99c <__mdiff+0x28>
 800e9d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e9d4:	6926      	ldr	r6, [r4, #16]
 800e9d6:	60c5      	str	r5, [r0, #12]
 800e9d8:	f104 0914 	add.w	r9, r4, #20
 800e9dc:	f108 0514 	add.w	r5, r8, #20
 800e9e0:	f100 0e14 	add.w	lr, r0, #20
 800e9e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e9e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e9ec:	f108 0210 	add.w	r2, r8, #16
 800e9f0:	46f2      	mov	sl, lr
 800e9f2:	2100      	movs	r1, #0
 800e9f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e9f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e9fc:	fa11 f88b 	uxtah	r8, r1, fp
 800ea00:	b299      	uxth	r1, r3
 800ea02:	0c1b      	lsrs	r3, r3, #16
 800ea04:	eba8 0801 	sub.w	r8, r8, r1
 800ea08:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ea0c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ea10:	fa1f f888 	uxth.w	r8, r8
 800ea14:	1419      	asrs	r1, r3, #16
 800ea16:	454e      	cmp	r6, r9
 800ea18:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ea1c:	f84a 3b04 	str.w	r3, [sl], #4
 800ea20:	d8e8      	bhi.n	800e9f4 <__mdiff+0x80>
 800ea22:	1b33      	subs	r3, r6, r4
 800ea24:	3b15      	subs	r3, #21
 800ea26:	f023 0303 	bic.w	r3, r3, #3
 800ea2a:	3304      	adds	r3, #4
 800ea2c:	3415      	adds	r4, #21
 800ea2e:	42a6      	cmp	r6, r4
 800ea30:	bf38      	it	cc
 800ea32:	2304      	movcc	r3, #4
 800ea34:	441d      	add	r5, r3
 800ea36:	4473      	add	r3, lr
 800ea38:	469e      	mov	lr, r3
 800ea3a:	462e      	mov	r6, r5
 800ea3c:	4566      	cmp	r6, ip
 800ea3e:	d30e      	bcc.n	800ea5e <__mdiff+0xea>
 800ea40:	f10c 0203 	add.w	r2, ip, #3
 800ea44:	1b52      	subs	r2, r2, r5
 800ea46:	f022 0203 	bic.w	r2, r2, #3
 800ea4a:	3d03      	subs	r5, #3
 800ea4c:	45ac      	cmp	ip, r5
 800ea4e:	bf38      	it	cc
 800ea50:	2200      	movcc	r2, #0
 800ea52:	4413      	add	r3, r2
 800ea54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ea58:	b17a      	cbz	r2, 800ea7a <__mdiff+0x106>
 800ea5a:	6107      	str	r7, [r0, #16]
 800ea5c:	e7a4      	b.n	800e9a8 <__mdiff+0x34>
 800ea5e:	f856 8b04 	ldr.w	r8, [r6], #4
 800ea62:	fa11 f288 	uxtah	r2, r1, r8
 800ea66:	1414      	asrs	r4, r2, #16
 800ea68:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ea6c:	b292      	uxth	r2, r2
 800ea6e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ea72:	f84e 2b04 	str.w	r2, [lr], #4
 800ea76:	1421      	asrs	r1, r4, #16
 800ea78:	e7e0      	b.n	800ea3c <__mdiff+0xc8>
 800ea7a:	3f01      	subs	r7, #1
 800ea7c:	e7ea      	b.n	800ea54 <__mdiff+0xe0>
 800ea7e:	bf00      	nop
 800ea80:	0800f7e0 	.word	0x0800f7e0
 800ea84:	0800f7f1 	.word	0x0800f7f1

0800ea88 <__d2b>:
 800ea88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea8c:	460f      	mov	r7, r1
 800ea8e:	2101      	movs	r1, #1
 800ea90:	ec59 8b10 	vmov	r8, r9, d0
 800ea94:	4616      	mov	r6, r2
 800ea96:	f7ff fcd5 	bl	800e444 <_Balloc>
 800ea9a:	4604      	mov	r4, r0
 800ea9c:	b930      	cbnz	r0, 800eaac <__d2b+0x24>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	4b24      	ldr	r3, [pc, #144]	; (800eb34 <__d2b+0xac>)
 800eaa2:	4825      	ldr	r0, [pc, #148]	; (800eb38 <__d2b+0xb0>)
 800eaa4:	f240 310f 	movw	r1, #783	; 0x30f
 800eaa8:	f7fd fe10 	bl	800c6cc <__assert_func>
 800eaac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eab0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eab4:	bb2d      	cbnz	r5, 800eb02 <__d2b+0x7a>
 800eab6:	9301      	str	r3, [sp, #4]
 800eab8:	f1b8 0300 	subs.w	r3, r8, #0
 800eabc:	d026      	beq.n	800eb0c <__d2b+0x84>
 800eabe:	4668      	mov	r0, sp
 800eac0:	9300      	str	r3, [sp, #0]
 800eac2:	f7ff fd87 	bl	800e5d4 <__lo0bits>
 800eac6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eaca:	b1e8      	cbz	r0, 800eb08 <__d2b+0x80>
 800eacc:	f1c0 0320 	rsb	r3, r0, #32
 800ead0:	fa02 f303 	lsl.w	r3, r2, r3
 800ead4:	430b      	orrs	r3, r1
 800ead6:	40c2      	lsrs	r2, r0
 800ead8:	6163      	str	r3, [r4, #20]
 800eada:	9201      	str	r2, [sp, #4]
 800eadc:	9b01      	ldr	r3, [sp, #4]
 800eade:	61a3      	str	r3, [r4, #24]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	bf14      	ite	ne
 800eae4:	2202      	movne	r2, #2
 800eae6:	2201      	moveq	r2, #1
 800eae8:	6122      	str	r2, [r4, #16]
 800eaea:	b1bd      	cbz	r5, 800eb1c <__d2b+0x94>
 800eaec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eaf0:	4405      	add	r5, r0
 800eaf2:	603d      	str	r5, [r7, #0]
 800eaf4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eaf8:	6030      	str	r0, [r6, #0]
 800eafa:	4620      	mov	r0, r4
 800eafc:	b003      	add	sp, #12
 800eafe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eb06:	e7d6      	b.n	800eab6 <__d2b+0x2e>
 800eb08:	6161      	str	r1, [r4, #20]
 800eb0a:	e7e7      	b.n	800eadc <__d2b+0x54>
 800eb0c:	a801      	add	r0, sp, #4
 800eb0e:	f7ff fd61 	bl	800e5d4 <__lo0bits>
 800eb12:	9b01      	ldr	r3, [sp, #4]
 800eb14:	6163      	str	r3, [r4, #20]
 800eb16:	3020      	adds	r0, #32
 800eb18:	2201      	movs	r2, #1
 800eb1a:	e7e5      	b.n	800eae8 <__d2b+0x60>
 800eb1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eb20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eb24:	6038      	str	r0, [r7, #0]
 800eb26:	6918      	ldr	r0, [r3, #16]
 800eb28:	f7ff fd34 	bl	800e594 <__hi0bits>
 800eb2c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eb30:	e7e2      	b.n	800eaf8 <__d2b+0x70>
 800eb32:	bf00      	nop
 800eb34:	0800f7e0 	.word	0x0800f7e0
 800eb38:	0800f7f1 	.word	0x0800f7f1

0800eb3c <__sfputc_r>:
 800eb3c:	6893      	ldr	r3, [r2, #8]
 800eb3e:	3b01      	subs	r3, #1
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	b410      	push	{r4}
 800eb44:	6093      	str	r3, [r2, #8]
 800eb46:	da08      	bge.n	800eb5a <__sfputc_r+0x1e>
 800eb48:	6994      	ldr	r4, [r2, #24]
 800eb4a:	42a3      	cmp	r3, r4
 800eb4c:	db01      	blt.n	800eb52 <__sfputc_r+0x16>
 800eb4e:	290a      	cmp	r1, #10
 800eb50:	d103      	bne.n	800eb5a <__sfputc_r+0x1e>
 800eb52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb56:	f7fe bbc2 	b.w	800d2de <__swbuf_r>
 800eb5a:	6813      	ldr	r3, [r2, #0]
 800eb5c:	1c58      	adds	r0, r3, #1
 800eb5e:	6010      	str	r0, [r2, #0]
 800eb60:	7019      	strb	r1, [r3, #0]
 800eb62:	4608      	mov	r0, r1
 800eb64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb68:	4770      	bx	lr

0800eb6a <__sfputs_r>:
 800eb6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb6c:	4606      	mov	r6, r0
 800eb6e:	460f      	mov	r7, r1
 800eb70:	4614      	mov	r4, r2
 800eb72:	18d5      	adds	r5, r2, r3
 800eb74:	42ac      	cmp	r4, r5
 800eb76:	d101      	bne.n	800eb7c <__sfputs_r+0x12>
 800eb78:	2000      	movs	r0, #0
 800eb7a:	e007      	b.n	800eb8c <__sfputs_r+0x22>
 800eb7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb80:	463a      	mov	r2, r7
 800eb82:	4630      	mov	r0, r6
 800eb84:	f7ff ffda 	bl	800eb3c <__sfputc_r>
 800eb88:	1c43      	adds	r3, r0, #1
 800eb8a:	d1f3      	bne.n	800eb74 <__sfputs_r+0xa>
 800eb8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb90 <_vfiprintf_r>:
 800eb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb94:	460d      	mov	r5, r1
 800eb96:	b09d      	sub	sp, #116	; 0x74
 800eb98:	4614      	mov	r4, r2
 800eb9a:	4698      	mov	r8, r3
 800eb9c:	4606      	mov	r6, r0
 800eb9e:	b118      	cbz	r0, 800eba8 <_vfiprintf_r+0x18>
 800eba0:	6a03      	ldr	r3, [r0, #32]
 800eba2:	b90b      	cbnz	r3, 800eba8 <_vfiprintf_r+0x18>
 800eba4:	f7fe faa2 	bl	800d0ec <__sinit>
 800eba8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebaa:	07d9      	lsls	r1, r3, #31
 800ebac:	d405      	bmi.n	800ebba <_vfiprintf_r+0x2a>
 800ebae:	89ab      	ldrh	r3, [r5, #12]
 800ebb0:	059a      	lsls	r2, r3, #22
 800ebb2:	d402      	bmi.n	800ebba <_vfiprintf_r+0x2a>
 800ebb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebb6:	f7fe fcb4 	bl	800d522 <__retarget_lock_acquire_recursive>
 800ebba:	89ab      	ldrh	r3, [r5, #12]
 800ebbc:	071b      	lsls	r3, r3, #28
 800ebbe:	d501      	bpl.n	800ebc4 <_vfiprintf_r+0x34>
 800ebc0:	692b      	ldr	r3, [r5, #16]
 800ebc2:	b99b      	cbnz	r3, 800ebec <_vfiprintf_r+0x5c>
 800ebc4:	4629      	mov	r1, r5
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	f7fe fbc6 	bl	800d358 <__swsetup_r>
 800ebcc:	b170      	cbz	r0, 800ebec <_vfiprintf_r+0x5c>
 800ebce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebd0:	07dc      	lsls	r4, r3, #31
 800ebd2:	d504      	bpl.n	800ebde <_vfiprintf_r+0x4e>
 800ebd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebd8:	b01d      	add	sp, #116	; 0x74
 800ebda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebde:	89ab      	ldrh	r3, [r5, #12]
 800ebe0:	0598      	lsls	r0, r3, #22
 800ebe2:	d4f7      	bmi.n	800ebd4 <_vfiprintf_r+0x44>
 800ebe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebe6:	f7fe fc9d 	bl	800d524 <__retarget_lock_release_recursive>
 800ebea:	e7f3      	b.n	800ebd4 <_vfiprintf_r+0x44>
 800ebec:	2300      	movs	r3, #0
 800ebee:	9309      	str	r3, [sp, #36]	; 0x24
 800ebf0:	2320      	movs	r3, #32
 800ebf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ebf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebfa:	2330      	movs	r3, #48	; 0x30
 800ebfc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800edb0 <_vfiprintf_r+0x220>
 800ec00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec04:	f04f 0901 	mov.w	r9, #1
 800ec08:	4623      	mov	r3, r4
 800ec0a:	469a      	mov	sl, r3
 800ec0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec10:	b10a      	cbz	r2, 800ec16 <_vfiprintf_r+0x86>
 800ec12:	2a25      	cmp	r2, #37	; 0x25
 800ec14:	d1f9      	bne.n	800ec0a <_vfiprintf_r+0x7a>
 800ec16:	ebba 0b04 	subs.w	fp, sl, r4
 800ec1a:	d00b      	beq.n	800ec34 <_vfiprintf_r+0xa4>
 800ec1c:	465b      	mov	r3, fp
 800ec1e:	4622      	mov	r2, r4
 800ec20:	4629      	mov	r1, r5
 800ec22:	4630      	mov	r0, r6
 800ec24:	f7ff ffa1 	bl	800eb6a <__sfputs_r>
 800ec28:	3001      	adds	r0, #1
 800ec2a:	f000 80a9 	beq.w	800ed80 <_vfiprintf_r+0x1f0>
 800ec2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec30:	445a      	add	r2, fp
 800ec32:	9209      	str	r2, [sp, #36]	; 0x24
 800ec34:	f89a 3000 	ldrb.w	r3, [sl]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	f000 80a1 	beq.w	800ed80 <_vfiprintf_r+0x1f0>
 800ec3e:	2300      	movs	r3, #0
 800ec40:	f04f 32ff 	mov.w	r2, #4294967295
 800ec44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec48:	f10a 0a01 	add.w	sl, sl, #1
 800ec4c:	9304      	str	r3, [sp, #16]
 800ec4e:	9307      	str	r3, [sp, #28]
 800ec50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec54:	931a      	str	r3, [sp, #104]	; 0x68
 800ec56:	4654      	mov	r4, sl
 800ec58:	2205      	movs	r2, #5
 800ec5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec5e:	4854      	ldr	r0, [pc, #336]	; (800edb0 <_vfiprintf_r+0x220>)
 800ec60:	f7f1 fab6 	bl	80001d0 <memchr>
 800ec64:	9a04      	ldr	r2, [sp, #16]
 800ec66:	b9d8      	cbnz	r0, 800eca0 <_vfiprintf_r+0x110>
 800ec68:	06d1      	lsls	r1, r2, #27
 800ec6a:	bf44      	itt	mi
 800ec6c:	2320      	movmi	r3, #32
 800ec6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec72:	0713      	lsls	r3, r2, #28
 800ec74:	bf44      	itt	mi
 800ec76:	232b      	movmi	r3, #43	; 0x2b
 800ec78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ec80:	2b2a      	cmp	r3, #42	; 0x2a
 800ec82:	d015      	beq.n	800ecb0 <_vfiprintf_r+0x120>
 800ec84:	9a07      	ldr	r2, [sp, #28]
 800ec86:	4654      	mov	r4, sl
 800ec88:	2000      	movs	r0, #0
 800ec8a:	f04f 0c0a 	mov.w	ip, #10
 800ec8e:	4621      	mov	r1, r4
 800ec90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec94:	3b30      	subs	r3, #48	; 0x30
 800ec96:	2b09      	cmp	r3, #9
 800ec98:	d94d      	bls.n	800ed36 <_vfiprintf_r+0x1a6>
 800ec9a:	b1b0      	cbz	r0, 800ecca <_vfiprintf_r+0x13a>
 800ec9c:	9207      	str	r2, [sp, #28]
 800ec9e:	e014      	b.n	800ecca <_vfiprintf_r+0x13a>
 800eca0:	eba0 0308 	sub.w	r3, r0, r8
 800eca4:	fa09 f303 	lsl.w	r3, r9, r3
 800eca8:	4313      	orrs	r3, r2
 800ecaa:	9304      	str	r3, [sp, #16]
 800ecac:	46a2      	mov	sl, r4
 800ecae:	e7d2      	b.n	800ec56 <_vfiprintf_r+0xc6>
 800ecb0:	9b03      	ldr	r3, [sp, #12]
 800ecb2:	1d19      	adds	r1, r3, #4
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	9103      	str	r1, [sp, #12]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	bfbb      	ittet	lt
 800ecbc:	425b      	neglt	r3, r3
 800ecbe:	f042 0202 	orrlt.w	r2, r2, #2
 800ecc2:	9307      	strge	r3, [sp, #28]
 800ecc4:	9307      	strlt	r3, [sp, #28]
 800ecc6:	bfb8      	it	lt
 800ecc8:	9204      	strlt	r2, [sp, #16]
 800ecca:	7823      	ldrb	r3, [r4, #0]
 800eccc:	2b2e      	cmp	r3, #46	; 0x2e
 800ecce:	d10c      	bne.n	800ecea <_vfiprintf_r+0x15a>
 800ecd0:	7863      	ldrb	r3, [r4, #1]
 800ecd2:	2b2a      	cmp	r3, #42	; 0x2a
 800ecd4:	d134      	bne.n	800ed40 <_vfiprintf_r+0x1b0>
 800ecd6:	9b03      	ldr	r3, [sp, #12]
 800ecd8:	1d1a      	adds	r2, r3, #4
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	9203      	str	r2, [sp, #12]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	bfb8      	it	lt
 800ece2:	f04f 33ff 	movlt.w	r3, #4294967295
 800ece6:	3402      	adds	r4, #2
 800ece8:	9305      	str	r3, [sp, #20]
 800ecea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800edc0 <_vfiprintf_r+0x230>
 800ecee:	7821      	ldrb	r1, [r4, #0]
 800ecf0:	2203      	movs	r2, #3
 800ecf2:	4650      	mov	r0, sl
 800ecf4:	f7f1 fa6c 	bl	80001d0 <memchr>
 800ecf8:	b138      	cbz	r0, 800ed0a <_vfiprintf_r+0x17a>
 800ecfa:	9b04      	ldr	r3, [sp, #16]
 800ecfc:	eba0 000a 	sub.w	r0, r0, sl
 800ed00:	2240      	movs	r2, #64	; 0x40
 800ed02:	4082      	lsls	r2, r0
 800ed04:	4313      	orrs	r3, r2
 800ed06:	3401      	adds	r4, #1
 800ed08:	9304      	str	r3, [sp, #16]
 800ed0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed0e:	4829      	ldr	r0, [pc, #164]	; (800edb4 <_vfiprintf_r+0x224>)
 800ed10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed14:	2206      	movs	r2, #6
 800ed16:	f7f1 fa5b 	bl	80001d0 <memchr>
 800ed1a:	2800      	cmp	r0, #0
 800ed1c:	d03f      	beq.n	800ed9e <_vfiprintf_r+0x20e>
 800ed1e:	4b26      	ldr	r3, [pc, #152]	; (800edb8 <_vfiprintf_r+0x228>)
 800ed20:	bb1b      	cbnz	r3, 800ed6a <_vfiprintf_r+0x1da>
 800ed22:	9b03      	ldr	r3, [sp, #12]
 800ed24:	3307      	adds	r3, #7
 800ed26:	f023 0307 	bic.w	r3, r3, #7
 800ed2a:	3308      	adds	r3, #8
 800ed2c:	9303      	str	r3, [sp, #12]
 800ed2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed30:	443b      	add	r3, r7
 800ed32:	9309      	str	r3, [sp, #36]	; 0x24
 800ed34:	e768      	b.n	800ec08 <_vfiprintf_r+0x78>
 800ed36:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed3a:	460c      	mov	r4, r1
 800ed3c:	2001      	movs	r0, #1
 800ed3e:	e7a6      	b.n	800ec8e <_vfiprintf_r+0xfe>
 800ed40:	2300      	movs	r3, #0
 800ed42:	3401      	adds	r4, #1
 800ed44:	9305      	str	r3, [sp, #20]
 800ed46:	4619      	mov	r1, r3
 800ed48:	f04f 0c0a 	mov.w	ip, #10
 800ed4c:	4620      	mov	r0, r4
 800ed4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed52:	3a30      	subs	r2, #48	; 0x30
 800ed54:	2a09      	cmp	r2, #9
 800ed56:	d903      	bls.n	800ed60 <_vfiprintf_r+0x1d0>
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d0c6      	beq.n	800ecea <_vfiprintf_r+0x15a>
 800ed5c:	9105      	str	r1, [sp, #20]
 800ed5e:	e7c4      	b.n	800ecea <_vfiprintf_r+0x15a>
 800ed60:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed64:	4604      	mov	r4, r0
 800ed66:	2301      	movs	r3, #1
 800ed68:	e7f0      	b.n	800ed4c <_vfiprintf_r+0x1bc>
 800ed6a:	ab03      	add	r3, sp, #12
 800ed6c:	9300      	str	r3, [sp, #0]
 800ed6e:	462a      	mov	r2, r5
 800ed70:	4b12      	ldr	r3, [pc, #72]	; (800edbc <_vfiprintf_r+0x22c>)
 800ed72:	a904      	add	r1, sp, #16
 800ed74:	4630      	mov	r0, r6
 800ed76:	f7fd fd67 	bl	800c848 <_printf_float>
 800ed7a:	4607      	mov	r7, r0
 800ed7c:	1c78      	adds	r0, r7, #1
 800ed7e:	d1d6      	bne.n	800ed2e <_vfiprintf_r+0x19e>
 800ed80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed82:	07d9      	lsls	r1, r3, #31
 800ed84:	d405      	bmi.n	800ed92 <_vfiprintf_r+0x202>
 800ed86:	89ab      	ldrh	r3, [r5, #12]
 800ed88:	059a      	lsls	r2, r3, #22
 800ed8a:	d402      	bmi.n	800ed92 <_vfiprintf_r+0x202>
 800ed8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed8e:	f7fe fbc9 	bl	800d524 <__retarget_lock_release_recursive>
 800ed92:	89ab      	ldrh	r3, [r5, #12]
 800ed94:	065b      	lsls	r3, r3, #25
 800ed96:	f53f af1d 	bmi.w	800ebd4 <_vfiprintf_r+0x44>
 800ed9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed9c:	e71c      	b.n	800ebd8 <_vfiprintf_r+0x48>
 800ed9e:	ab03      	add	r3, sp, #12
 800eda0:	9300      	str	r3, [sp, #0]
 800eda2:	462a      	mov	r2, r5
 800eda4:	4b05      	ldr	r3, [pc, #20]	; (800edbc <_vfiprintf_r+0x22c>)
 800eda6:	a904      	add	r1, sp, #16
 800eda8:	4630      	mov	r0, r6
 800edaa:	f7fd fff1 	bl	800cd90 <_printf_i>
 800edae:	e7e4      	b.n	800ed7a <_vfiprintf_r+0x1ea>
 800edb0:	0800f94c 	.word	0x0800f94c
 800edb4:	0800f956 	.word	0x0800f956
 800edb8:	0800c849 	.word	0x0800c849
 800edbc:	0800eb6b 	.word	0x0800eb6b
 800edc0:	0800f952 	.word	0x0800f952

0800edc4 <__sflush_r>:
 800edc4:	898a      	ldrh	r2, [r1, #12]
 800edc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edca:	4605      	mov	r5, r0
 800edcc:	0710      	lsls	r0, r2, #28
 800edce:	460c      	mov	r4, r1
 800edd0:	d458      	bmi.n	800ee84 <__sflush_r+0xc0>
 800edd2:	684b      	ldr	r3, [r1, #4]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	dc05      	bgt.n	800ede4 <__sflush_r+0x20>
 800edd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800edda:	2b00      	cmp	r3, #0
 800eddc:	dc02      	bgt.n	800ede4 <__sflush_r+0x20>
 800edde:	2000      	movs	r0, #0
 800ede0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ede4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ede6:	2e00      	cmp	r6, #0
 800ede8:	d0f9      	beq.n	800edde <__sflush_r+0x1a>
 800edea:	2300      	movs	r3, #0
 800edec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800edf0:	682f      	ldr	r7, [r5, #0]
 800edf2:	6a21      	ldr	r1, [r4, #32]
 800edf4:	602b      	str	r3, [r5, #0]
 800edf6:	d032      	beq.n	800ee5e <__sflush_r+0x9a>
 800edf8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800edfa:	89a3      	ldrh	r3, [r4, #12]
 800edfc:	075a      	lsls	r2, r3, #29
 800edfe:	d505      	bpl.n	800ee0c <__sflush_r+0x48>
 800ee00:	6863      	ldr	r3, [r4, #4]
 800ee02:	1ac0      	subs	r0, r0, r3
 800ee04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee06:	b10b      	cbz	r3, 800ee0c <__sflush_r+0x48>
 800ee08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ee0a:	1ac0      	subs	r0, r0, r3
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	4602      	mov	r2, r0
 800ee10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee12:	6a21      	ldr	r1, [r4, #32]
 800ee14:	4628      	mov	r0, r5
 800ee16:	47b0      	blx	r6
 800ee18:	1c43      	adds	r3, r0, #1
 800ee1a:	89a3      	ldrh	r3, [r4, #12]
 800ee1c:	d106      	bne.n	800ee2c <__sflush_r+0x68>
 800ee1e:	6829      	ldr	r1, [r5, #0]
 800ee20:	291d      	cmp	r1, #29
 800ee22:	d82b      	bhi.n	800ee7c <__sflush_r+0xb8>
 800ee24:	4a29      	ldr	r2, [pc, #164]	; (800eecc <__sflush_r+0x108>)
 800ee26:	410a      	asrs	r2, r1
 800ee28:	07d6      	lsls	r6, r2, #31
 800ee2a:	d427      	bmi.n	800ee7c <__sflush_r+0xb8>
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	6062      	str	r2, [r4, #4]
 800ee30:	04d9      	lsls	r1, r3, #19
 800ee32:	6922      	ldr	r2, [r4, #16]
 800ee34:	6022      	str	r2, [r4, #0]
 800ee36:	d504      	bpl.n	800ee42 <__sflush_r+0x7e>
 800ee38:	1c42      	adds	r2, r0, #1
 800ee3a:	d101      	bne.n	800ee40 <__sflush_r+0x7c>
 800ee3c:	682b      	ldr	r3, [r5, #0]
 800ee3e:	b903      	cbnz	r3, 800ee42 <__sflush_r+0x7e>
 800ee40:	6560      	str	r0, [r4, #84]	; 0x54
 800ee42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee44:	602f      	str	r7, [r5, #0]
 800ee46:	2900      	cmp	r1, #0
 800ee48:	d0c9      	beq.n	800edde <__sflush_r+0x1a>
 800ee4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee4e:	4299      	cmp	r1, r3
 800ee50:	d002      	beq.n	800ee58 <__sflush_r+0x94>
 800ee52:	4628      	mov	r0, r5
 800ee54:	f7ff f9f6 	bl	800e244 <_free_r>
 800ee58:	2000      	movs	r0, #0
 800ee5a:	6360      	str	r0, [r4, #52]	; 0x34
 800ee5c:	e7c0      	b.n	800ede0 <__sflush_r+0x1c>
 800ee5e:	2301      	movs	r3, #1
 800ee60:	4628      	mov	r0, r5
 800ee62:	47b0      	blx	r6
 800ee64:	1c41      	adds	r1, r0, #1
 800ee66:	d1c8      	bne.n	800edfa <__sflush_r+0x36>
 800ee68:	682b      	ldr	r3, [r5, #0]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d0c5      	beq.n	800edfa <__sflush_r+0x36>
 800ee6e:	2b1d      	cmp	r3, #29
 800ee70:	d001      	beq.n	800ee76 <__sflush_r+0xb2>
 800ee72:	2b16      	cmp	r3, #22
 800ee74:	d101      	bne.n	800ee7a <__sflush_r+0xb6>
 800ee76:	602f      	str	r7, [r5, #0]
 800ee78:	e7b1      	b.n	800edde <__sflush_r+0x1a>
 800ee7a:	89a3      	ldrh	r3, [r4, #12]
 800ee7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee80:	81a3      	strh	r3, [r4, #12]
 800ee82:	e7ad      	b.n	800ede0 <__sflush_r+0x1c>
 800ee84:	690f      	ldr	r7, [r1, #16]
 800ee86:	2f00      	cmp	r7, #0
 800ee88:	d0a9      	beq.n	800edde <__sflush_r+0x1a>
 800ee8a:	0793      	lsls	r3, r2, #30
 800ee8c:	680e      	ldr	r6, [r1, #0]
 800ee8e:	bf08      	it	eq
 800ee90:	694b      	ldreq	r3, [r1, #20]
 800ee92:	600f      	str	r7, [r1, #0]
 800ee94:	bf18      	it	ne
 800ee96:	2300      	movne	r3, #0
 800ee98:	eba6 0807 	sub.w	r8, r6, r7
 800ee9c:	608b      	str	r3, [r1, #8]
 800ee9e:	f1b8 0f00 	cmp.w	r8, #0
 800eea2:	dd9c      	ble.n	800edde <__sflush_r+0x1a>
 800eea4:	6a21      	ldr	r1, [r4, #32]
 800eea6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eea8:	4643      	mov	r3, r8
 800eeaa:	463a      	mov	r2, r7
 800eeac:	4628      	mov	r0, r5
 800eeae:	47b0      	blx	r6
 800eeb0:	2800      	cmp	r0, #0
 800eeb2:	dc06      	bgt.n	800eec2 <__sflush_r+0xfe>
 800eeb4:	89a3      	ldrh	r3, [r4, #12]
 800eeb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eeba:	81a3      	strh	r3, [r4, #12]
 800eebc:	f04f 30ff 	mov.w	r0, #4294967295
 800eec0:	e78e      	b.n	800ede0 <__sflush_r+0x1c>
 800eec2:	4407      	add	r7, r0
 800eec4:	eba8 0800 	sub.w	r8, r8, r0
 800eec8:	e7e9      	b.n	800ee9e <__sflush_r+0xda>
 800eeca:	bf00      	nop
 800eecc:	dfbffffe 	.word	0xdfbffffe

0800eed0 <_fflush_r>:
 800eed0:	b538      	push	{r3, r4, r5, lr}
 800eed2:	690b      	ldr	r3, [r1, #16]
 800eed4:	4605      	mov	r5, r0
 800eed6:	460c      	mov	r4, r1
 800eed8:	b913      	cbnz	r3, 800eee0 <_fflush_r+0x10>
 800eeda:	2500      	movs	r5, #0
 800eedc:	4628      	mov	r0, r5
 800eede:	bd38      	pop	{r3, r4, r5, pc}
 800eee0:	b118      	cbz	r0, 800eeea <_fflush_r+0x1a>
 800eee2:	6a03      	ldr	r3, [r0, #32]
 800eee4:	b90b      	cbnz	r3, 800eeea <_fflush_r+0x1a>
 800eee6:	f7fe f901 	bl	800d0ec <__sinit>
 800eeea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d0f3      	beq.n	800eeda <_fflush_r+0xa>
 800eef2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eef4:	07d0      	lsls	r0, r2, #31
 800eef6:	d404      	bmi.n	800ef02 <_fflush_r+0x32>
 800eef8:	0599      	lsls	r1, r3, #22
 800eefa:	d402      	bmi.n	800ef02 <_fflush_r+0x32>
 800eefc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eefe:	f7fe fb10 	bl	800d522 <__retarget_lock_acquire_recursive>
 800ef02:	4628      	mov	r0, r5
 800ef04:	4621      	mov	r1, r4
 800ef06:	f7ff ff5d 	bl	800edc4 <__sflush_r>
 800ef0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ef0c:	07da      	lsls	r2, r3, #31
 800ef0e:	4605      	mov	r5, r0
 800ef10:	d4e4      	bmi.n	800eedc <_fflush_r+0xc>
 800ef12:	89a3      	ldrh	r3, [r4, #12]
 800ef14:	059b      	lsls	r3, r3, #22
 800ef16:	d4e1      	bmi.n	800eedc <_fflush_r+0xc>
 800ef18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef1a:	f7fe fb03 	bl	800d524 <__retarget_lock_release_recursive>
 800ef1e:	e7dd      	b.n	800eedc <_fflush_r+0xc>

0800ef20 <__swhatbuf_r>:
 800ef20:	b570      	push	{r4, r5, r6, lr}
 800ef22:	460c      	mov	r4, r1
 800ef24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef28:	2900      	cmp	r1, #0
 800ef2a:	b096      	sub	sp, #88	; 0x58
 800ef2c:	4615      	mov	r5, r2
 800ef2e:	461e      	mov	r6, r3
 800ef30:	da0d      	bge.n	800ef4e <__swhatbuf_r+0x2e>
 800ef32:	89a3      	ldrh	r3, [r4, #12]
 800ef34:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ef38:	f04f 0100 	mov.w	r1, #0
 800ef3c:	bf0c      	ite	eq
 800ef3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ef42:	2340      	movne	r3, #64	; 0x40
 800ef44:	2000      	movs	r0, #0
 800ef46:	6031      	str	r1, [r6, #0]
 800ef48:	602b      	str	r3, [r5, #0]
 800ef4a:	b016      	add	sp, #88	; 0x58
 800ef4c:	bd70      	pop	{r4, r5, r6, pc}
 800ef4e:	466a      	mov	r2, sp
 800ef50:	f000 f878 	bl	800f044 <_fstat_r>
 800ef54:	2800      	cmp	r0, #0
 800ef56:	dbec      	blt.n	800ef32 <__swhatbuf_r+0x12>
 800ef58:	9901      	ldr	r1, [sp, #4]
 800ef5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ef5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ef62:	4259      	negs	r1, r3
 800ef64:	4159      	adcs	r1, r3
 800ef66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef6a:	e7eb      	b.n	800ef44 <__swhatbuf_r+0x24>

0800ef6c <__smakebuf_r>:
 800ef6c:	898b      	ldrh	r3, [r1, #12]
 800ef6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef70:	079d      	lsls	r5, r3, #30
 800ef72:	4606      	mov	r6, r0
 800ef74:	460c      	mov	r4, r1
 800ef76:	d507      	bpl.n	800ef88 <__smakebuf_r+0x1c>
 800ef78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef7c:	6023      	str	r3, [r4, #0]
 800ef7e:	6123      	str	r3, [r4, #16]
 800ef80:	2301      	movs	r3, #1
 800ef82:	6163      	str	r3, [r4, #20]
 800ef84:	b002      	add	sp, #8
 800ef86:	bd70      	pop	{r4, r5, r6, pc}
 800ef88:	ab01      	add	r3, sp, #4
 800ef8a:	466a      	mov	r2, sp
 800ef8c:	f7ff ffc8 	bl	800ef20 <__swhatbuf_r>
 800ef90:	9900      	ldr	r1, [sp, #0]
 800ef92:	4605      	mov	r5, r0
 800ef94:	4630      	mov	r0, r6
 800ef96:	f7ff f9c9 	bl	800e32c <_malloc_r>
 800ef9a:	b948      	cbnz	r0, 800efb0 <__smakebuf_r+0x44>
 800ef9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efa0:	059a      	lsls	r2, r3, #22
 800efa2:	d4ef      	bmi.n	800ef84 <__smakebuf_r+0x18>
 800efa4:	f023 0303 	bic.w	r3, r3, #3
 800efa8:	f043 0302 	orr.w	r3, r3, #2
 800efac:	81a3      	strh	r3, [r4, #12]
 800efae:	e7e3      	b.n	800ef78 <__smakebuf_r+0xc>
 800efb0:	89a3      	ldrh	r3, [r4, #12]
 800efb2:	6020      	str	r0, [r4, #0]
 800efb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efb8:	81a3      	strh	r3, [r4, #12]
 800efba:	9b00      	ldr	r3, [sp, #0]
 800efbc:	6163      	str	r3, [r4, #20]
 800efbe:	9b01      	ldr	r3, [sp, #4]
 800efc0:	6120      	str	r0, [r4, #16]
 800efc2:	b15b      	cbz	r3, 800efdc <__smakebuf_r+0x70>
 800efc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efc8:	4630      	mov	r0, r6
 800efca:	f000 f84d 	bl	800f068 <_isatty_r>
 800efce:	b128      	cbz	r0, 800efdc <__smakebuf_r+0x70>
 800efd0:	89a3      	ldrh	r3, [r4, #12]
 800efd2:	f023 0303 	bic.w	r3, r3, #3
 800efd6:	f043 0301 	orr.w	r3, r3, #1
 800efda:	81a3      	strh	r3, [r4, #12]
 800efdc:	89a3      	ldrh	r3, [r4, #12]
 800efde:	431d      	orrs	r5, r3
 800efe0:	81a5      	strh	r5, [r4, #12]
 800efe2:	e7cf      	b.n	800ef84 <__smakebuf_r+0x18>

0800efe4 <_raise_r>:
 800efe4:	291f      	cmp	r1, #31
 800efe6:	b538      	push	{r3, r4, r5, lr}
 800efe8:	4604      	mov	r4, r0
 800efea:	460d      	mov	r5, r1
 800efec:	d904      	bls.n	800eff8 <_raise_r+0x14>
 800efee:	2316      	movs	r3, #22
 800eff0:	6003      	str	r3, [r0, #0]
 800eff2:	f04f 30ff 	mov.w	r0, #4294967295
 800eff6:	bd38      	pop	{r3, r4, r5, pc}
 800eff8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800effa:	b112      	cbz	r2, 800f002 <_raise_r+0x1e>
 800effc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f000:	b94b      	cbnz	r3, 800f016 <_raise_r+0x32>
 800f002:	4620      	mov	r0, r4
 800f004:	f000 f852 	bl	800f0ac <_getpid_r>
 800f008:	462a      	mov	r2, r5
 800f00a:	4601      	mov	r1, r0
 800f00c:	4620      	mov	r0, r4
 800f00e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f012:	f000 b839 	b.w	800f088 <_kill_r>
 800f016:	2b01      	cmp	r3, #1
 800f018:	d00a      	beq.n	800f030 <_raise_r+0x4c>
 800f01a:	1c59      	adds	r1, r3, #1
 800f01c:	d103      	bne.n	800f026 <_raise_r+0x42>
 800f01e:	2316      	movs	r3, #22
 800f020:	6003      	str	r3, [r0, #0]
 800f022:	2001      	movs	r0, #1
 800f024:	e7e7      	b.n	800eff6 <_raise_r+0x12>
 800f026:	2400      	movs	r4, #0
 800f028:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f02c:	4628      	mov	r0, r5
 800f02e:	4798      	blx	r3
 800f030:	2000      	movs	r0, #0
 800f032:	e7e0      	b.n	800eff6 <_raise_r+0x12>

0800f034 <raise>:
 800f034:	4b02      	ldr	r3, [pc, #8]	; (800f040 <raise+0xc>)
 800f036:	4601      	mov	r1, r0
 800f038:	6818      	ldr	r0, [r3, #0]
 800f03a:	f7ff bfd3 	b.w	800efe4 <_raise_r>
 800f03e:	bf00      	nop
 800f040:	20000220 	.word	0x20000220

0800f044 <_fstat_r>:
 800f044:	b538      	push	{r3, r4, r5, lr}
 800f046:	4d07      	ldr	r5, [pc, #28]	; (800f064 <_fstat_r+0x20>)
 800f048:	2300      	movs	r3, #0
 800f04a:	4604      	mov	r4, r0
 800f04c:	4608      	mov	r0, r1
 800f04e:	4611      	mov	r1, r2
 800f050:	602b      	str	r3, [r5, #0]
 800f052:	f7f4 fe48 	bl	8003ce6 <_fstat>
 800f056:	1c43      	adds	r3, r0, #1
 800f058:	d102      	bne.n	800f060 <_fstat_r+0x1c>
 800f05a:	682b      	ldr	r3, [r5, #0]
 800f05c:	b103      	cbz	r3, 800f060 <_fstat_r+0x1c>
 800f05e:	6023      	str	r3, [r4, #0]
 800f060:	bd38      	pop	{r3, r4, r5, pc}
 800f062:	bf00      	nop
 800f064:	20002920 	.word	0x20002920

0800f068 <_isatty_r>:
 800f068:	b538      	push	{r3, r4, r5, lr}
 800f06a:	4d06      	ldr	r5, [pc, #24]	; (800f084 <_isatty_r+0x1c>)
 800f06c:	2300      	movs	r3, #0
 800f06e:	4604      	mov	r4, r0
 800f070:	4608      	mov	r0, r1
 800f072:	602b      	str	r3, [r5, #0]
 800f074:	f7f4 fe47 	bl	8003d06 <_isatty>
 800f078:	1c43      	adds	r3, r0, #1
 800f07a:	d102      	bne.n	800f082 <_isatty_r+0x1a>
 800f07c:	682b      	ldr	r3, [r5, #0]
 800f07e:	b103      	cbz	r3, 800f082 <_isatty_r+0x1a>
 800f080:	6023      	str	r3, [r4, #0]
 800f082:	bd38      	pop	{r3, r4, r5, pc}
 800f084:	20002920 	.word	0x20002920

0800f088 <_kill_r>:
 800f088:	b538      	push	{r3, r4, r5, lr}
 800f08a:	4d07      	ldr	r5, [pc, #28]	; (800f0a8 <_kill_r+0x20>)
 800f08c:	2300      	movs	r3, #0
 800f08e:	4604      	mov	r4, r0
 800f090:	4608      	mov	r0, r1
 800f092:	4611      	mov	r1, r2
 800f094:	602b      	str	r3, [r5, #0]
 800f096:	f7f4 fde3 	bl	8003c60 <_kill>
 800f09a:	1c43      	adds	r3, r0, #1
 800f09c:	d102      	bne.n	800f0a4 <_kill_r+0x1c>
 800f09e:	682b      	ldr	r3, [r5, #0]
 800f0a0:	b103      	cbz	r3, 800f0a4 <_kill_r+0x1c>
 800f0a2:	6023      	str	r3, [r4, #0]
 800f0a4:	bd38      	pop	{r3, r4, r5, pc}
 800f0a6:	bf00      	nop
 800f0a8:	20002920 	.word	0x20002920

0800f0ac <_getpid_r>:
 800f0ac:	f7f4 bdd0 	b.w	8003c50 <_getpid>

0800f0b0 <_sbrk_r>:
 800f0b0:	b538      	push	{r3, r4, r5, lr}
 800f0b2:	4d06      	ldr	r5, [pc, #24]	; (800f0cc <_sbrk_r+0x1c>)
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	4604      	mov	r4, r0
 800f0b8:	4608      	mov	r0, r1
 800f0ba:	602b      	str	r3, [r5, #0]
 800f0bc:	f7f4 fe3c 	bl	8003d38 <_sbrk>
 800f0c0:	1c43      	adds	r3, r0, #1
 800f0c2:	d102      	bne.n	800f0ca <_sbrk_r+0x1a>
 800f0c4:	682b      	ldr	r3, [r5, #0]
 800f0c6:	b103      	cbz	r3, 800f0ca <_sbrk_r+0x1a>
 800f0c8:	6023      	str	r3, [r4, #0]
 800f0ca:	bd38      	pop	{r3, r4, r5, pc}
 800f0cc:	20002920 	.word	0x20002920

0800f0d0 <_calloc_r>:
 800f0d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f0d2:	fba1 2402 	umull	r2, r4, r1, r2
 800f0d6:	b94c      	cbnz	r4, 800f0ec <_calloc_r+0x1c>
 800f0d8:	4611      	mov	r1, r2
 800f0da:	9201      	str	r2, [sp, #4]
 800f0dc:	f7ff f926 	bl	800e32c <_malloc_r>
 800f0e0:	9a01      	ldr	r2, [sp, #4]
 800f0e2:	4605      	mov	r5, r0
 800f0e4:	b930      	cbnz	r0, 800f0f4 <_calloc_r+0x24>
 800f0e6:	4628      	mov	r0, r5
 800f0e8:	b003      	add	sp, #12
 800f0ea:	bd30      	pop	{r4, r5, pc}
 800f0ec:	220c      	movs	r2, #12
 800f0ee:	6002      	str	r2, [r0, #0]
 800f0f0:	2500      	movs	r5, #0
 800f0f2:	e7f8      	b.n	800f0e6 <_calloc_r+0x16>
 800f0f4:	4621      	mov	r1, r4
 800f0f6:	f7fe f997 	bl	800d428 <memset>
 800f0fa:	e7f4      	b.n	800f0e6 <_calloc_r+0x16>

0800f0fc <__ascii_mbtowc>:
 800f0fc:	b082      	sub	sp, #8
 800f0fe:	b901      	cbnz	r1, 800f102 <__ascii_mbtowc+0x6>
 800f100:	a901      	add	r1, sp, #4
 800f102:	b142      	cbz	r2, 800f116 <__ascii_mbtowc+0x1a>
 800f104:	b14b      	cbz	r3, 800f11a <__ascii_mbtowc+0x1e>
 800f106:	7813      	ldrb	r3, [r2, #0]
 800f108:	600b      	str	r3, [r1, #0]
 800f10a:	7812      	ldrb	r2, [r2, #0]
 800f10c:	1e10      	subs	r0, r2, #0
 800f10e:	bf18      	it	ne
 800f110:	2001      	movne	r0, #1
 800f112:	b002      	add	sp, #8
 800f114:	4770      	bx	lr
 800f116:	4610      	mov	r0, r2
 800f118:	e7fb      	b.n	800f112 <__ascii_mbtowc+0x16>
 800f11a:	f06f 0001 	mvn.w	r0, #1
 800f11e:	e7f8      	b.n	800f112 <__ascii_mbtowc+0x16>

0800f120 <__ascii_wctomb>:
 800f120:	b149      	cbz	r1, 800f136 <__ascii_wctomb+0x16>
 800f122:	2aff      	cmp	r2, #255	; 0xff
 800f124:	bf85      	ittet	hi
 800f126:	238a      	movhi	r3, #138	; 0x8a
 800f128:	6003      	strhi	r3, [r0, #0]
 800f12a:	700a      	strbls	r2, [r1, #0]
 800f12c:	f04f 30ff 	movhi.w	r0, #4294967295
 800f130:	bf98      	it	ls
 800f132:	2001      	movls	r0, #1
 800f134:	4770      	bx	lr
 800f136:	4608      	mov	r0, r1
 800f138:	4770      	bx	lr
	...

0800f13c <_init>:
 800f13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f13e:	bf00      	nop
 800f140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f142:	bc08      	pop	{r3}
 800f144:	469e      	mov	lr, r3
 800f146:	4770      	bx	lr

0800f148 <_fini>:
 800f148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f14a:	bf00      	nop
 800f14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f14e:	bc08      	pop	{r3}
 800f150:	469e      	mov	lr, r3
 800f152:	4770      	bx	lr
