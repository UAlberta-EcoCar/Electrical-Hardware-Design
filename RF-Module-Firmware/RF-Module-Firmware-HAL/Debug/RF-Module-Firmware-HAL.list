
RF-Module-Firmware-HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a8  08008ee8  08008ee8  00009ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009690  08009690  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009690  08009690  0000a690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009698  08009698  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009698  08009698  0000a698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800969c  0800969c  0000a69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080096a0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  200001d4  08009874  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08009874  0000b4f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147e0  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fdd  00000000  00000000  0001f9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  000229c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb1  00000000  00000000  00023cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000227af  00000000  00000000  00024b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178f5  00000000  00000000  00047318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0d9a  00000000  00000000  0005ec0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0012f9a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f54  00000000  00000000  0012fa30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00135984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ecc 	.word	0x08008ecc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008ecc 	.word	0x08008ecc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000e9e:	4a19      	ldr	r2, [pc, #100]	@ (8000f04 <MX_CAN1_Init+0x6c>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000ea4:	2210      	movs	r2, #16
 8000ea6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000eaa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eae:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eb0:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000eb6:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000eb8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ebc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ebe:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000ec0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000ec4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ede:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000eea:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <MX_CAN1_Init+0x68>)
 8000eec:	f001 facc 	bl	8002488 <HAL_CAN_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000ef6:	f000 f9a5 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200001f0 	.word	0x200001f0
 8000f04:	40006400 	.word	0x40006400

08000f08 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	@ 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a18      	ldr	r2, [pc, #96]	@ (8000f88 <HAL_CAN_MspInit+0x80>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d129      	bne.n	8000f7e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f2a:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <HAL_CAN_MspInit+0x84>)
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f2e:	4a17      	ldr	r2, [pc, #92]	@ (8000f8c <HAL_CAN_MspInit+0x84>)
 8000f30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <HAL_CAN_MspInit+0x84>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <HAL_CAN_MspInit+0x84>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	4a11      	ldr	r2, [pc, #68]	@ (8000f8c <HAL_CAN_MspInit+0x84>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <HAL_CAN_MspInit+0x84>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f5a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f6c:	2309      	movs	r3, #9
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f7a:	f001 fc67 	bl	800284c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000f7e:	bf00      	nop
 8000f80:	3728      	adds	r7, #40	@ 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40006400 	.word	0x40006400
 8000f8c:	40021000 	.word	0x40021000

08000f90 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	4b49      	ldr	r3, [pc, #292]	@ (80010cc <MX_GPIO_Init+0x13c>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000faa:	4a48      	ldr	r2, [pc, #288]	@ (80010cc <MX_GPIO_Init+0x13c>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb2:	4b46      	ldr	r3, [pc, #280]	@ (80010cc <MX_GPIO_Init+0x13c>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b43      	ldr	r3, [pc, #268]	@ (80010cc <MX_GPIO_Init+0x13c>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc2:	4a42      	ldr	r2, [pc, #264]	@ (80010cc <MX_GPIO_Init+0x13c>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fca:	4b40      	ldr	r3, [pc, #256]	@ (80010cc <MX_GPIO_Init+0x13c>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80010cc <MX_GPIO_Init+0x13c>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fda:	4a3c      	ldr	r2, [pc, #240]	@ (80010cc <MX_GPIO_Init+0x13c>)
 8000fdc:	f043 0302 	orr.w	r3, r3, #2
 8000fe0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe2:	4b3a      	ldr	r3, [pc, #232]	@ (80010cc <MX_GPIO_Init+0x13c>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ff4:	4836      	ldr	r0, [pc, #216]	@ (80010d0 <MX_GPIO_Init+0x140>)
 8000ff6:	f001 fd93 	bl	8002b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2110      	movs	r1, #16
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001002:	f001 fd8d 	bl	8002b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_NRST_GPIO_Port, RF_NRST_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	2120      	movs	r1, #32
 800100a:	4832      	ldr	r0, [pc, #200]	@ (80010d4 <MX_GPIO_Init+0x144>)
 800100c:	f001 fd88 	bl	8002b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_STBY_Pin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8001010:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001014:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	4619      	mov	r1, r3
 8001028:	4829      	ldr	r0, [pc, #164]	@ (80010d0 <MX_GPIO_Init+0x140>)
 800102a:	f001 fc0f 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 800102e:	2310      	movs	r3, #16
 8001030:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	2301      	movs	r3, #1
 8001034:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	4619      	mov	r1, r3
 8001044:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001048:	f001 fc00 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin DIO1_Pin DIO2_Pin DIO3_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin|DIO2_Pin|DIO3_Pin;
 800104c:	23c3      	movs	r3, #195	@ 0xc3
 800104e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001050:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001054:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	4619      	mov	r1, r3
 8001060:	481c      	ldr	r0, [pc, #112]	@ (80010d4 <MX_GPIO_Init+0x144>)
 8001062:	f001 fbf3 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001066:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800106a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	4619      	mov	r1, r3
 8001082:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001086:	f001 fbe1 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO4_Pin */
  GPIO_InitStruct.Pin = DIO4_Pin;
 800108a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800108e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001090:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001094:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO4_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	4619      	mov	r1, r3
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a4:	f001 fbd2 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_NRST_Pin */
  GPIO_InitStruct.Pin = RF_NRST_Pin;
 80010a8:	2320      	movs	r3, #32
 80010aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_NRST_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	4619      	mov	r1, r3
 80010be:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <MX_GPIO_Init+0x144>)
 80010c0:	f001 fbc4 	bl	800284c <HAL_GPIO_Init>

}
 80010c4:	bf00      	nop
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40021000 	.word	0x40021000
 80010d0:	48000800 	.word	0x48000800
 80010d4:	48000400 	.word	0x48000400

080010d8 <_write>:
int _write(int file, char *ptr, int len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	4804      	ldr	r0, [pc, #16]	@ (8001100 <_write+0x28>)
 80010f0:	f004 fd88 	bl	8005c04 <HAL_UART_Transmit>
	return len;
 80010f4:	687b      	ldr	r3, [r7, #4]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000318 	.word	0x20000318

08001104 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b08c      	sub	sp, #48	@ 0x30
 8001108:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800110a:	f001 f924 	bl	8002356 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800110e:	f000 f841 	bl	8001194 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001112:	f7ff ff3d 	bl	8000f90 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001116:	f001 f86d 	bl	80021f4 <MX_USART2_UART_Init>
	MX_CAN1_Init();
 800111a:	f7ff febd 	bl	8000e98 <MX_CAN1_Init>
	MX_TIM1_Init();
 800111e:	f000 feaf 	bl	8001e80 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001122:	f000 ff65 	bl	8001ff0 <MX_TIM2_Init>
	MX_SPI1_Init();
 8001126:	f000 fc85 	bl	8001a34 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
//	rfm95_init();
//	uint8_t version = 0, temp = 0;
	rf_handle_t rfm95 = { .rf_nreset_port = RF_NRST_GPIO_Port, .rf_nreset_pin =
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	2228      	movs	r2, #40	@ 0x28
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f005 ffa5 	bl	8007082 <memset>
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <main+0x84>)
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	f04f 33ff 	mov.w	r3, #4294967295
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	2310      	movs	r3, #16
 800114a:	82bb      	strh	r3, [r7, #20]
 800114c:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <main+0x88>)
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	2320      	movs	r3, #32
 8001152:	83bb      	strh	r3, [r7, #28]
 8001154:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <main+0x8c>)
 8001156:	627b      	str	r3, [r7, #36]	@ 0x24
	RF_NRST_Pin, .rf_nss_port = SPI1_NSS_GPIO_Port, .rf_nss_pin =
	SPI1_NSS_Pin, .rf_spi_handle = &hspi1, .rf_delay_func = HAL_Delay,
			.rf_spi_timeout = HAL_MAX_DELAY };

	rf_initialize_radio(&rfm95);
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	4618      	mov	r0, r3
 800115e:	f000 f8b5 	bl	80012cc <rf_initialize_radio>
	uint8_t testdata = 347;
 8001162:	235b      	movs	r3, #91	@ 0x5b
 8001164:	71fb      	strb	r3, [r7, #7]
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		HAL_Delay(500);
 8001166:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800116a:	f001 f969 	bl	8002440 <HAL_Delay>

		//rf_initialize_radio(&rfm95);
		rf_send(&rfm95, &testdata, 1);
 800116e:	1df9      	adds	r1, r7, #7
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	2201      	movs	r2, #1
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f9a8 	bl	80014cc <rf_send>
//		}

//		if (version != RFM9x_VER)
//			return 1;
		//CAN_Write_Hello();
		HAL_Delay(500);
 800117c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001180:	f001 f95e 	bl	8002440 <HAL_Delay>
		HAL_Delay(500);
 8001184:	bf00      	nop
 8001186:	e7ee      	b.n	8001166 <main+0x62>
 8001188:	20000218 	.word	0x20000218
 800118c:	48000400 	.word	0x48000400
 8001190:	08002441 	.word	0x08002441

08001194 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b096      	sub	sp, #88	@ 0x58
 8001198:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	2244      	movs	r2, #68	@ 0x44
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f005 ff6d 	bl	8007082 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011a8:	463b      	mov	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80011b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011ba:	f001 fcd7 	bl	8002b6c <HAL_PWREx_ControlVoltageScaling>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80011c4:	f000 f83e 	bl	8001244 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c8:	2301      	movs	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011cc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80011d0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d2:	2302      	movs	r3, #2
 80011d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d6:	2303      	movs	r3, #3
 80011d8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80011da:	2301      	movs	r3, #1
 80011dc:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 20;
 80011de:	2314      	movs	r3, #20
 80011e0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011e2:	2307      	movs	r3, #7
 80011e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ea:	2302      	movs	r3, #2
 80011ec:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 fd10 	bl	8002c18 <HAL_RCC_OscConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0x6e>
		Error_Handler();
 80011fe:	f000 f821 	bl	8001244 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001202:	230f      	movs	r3, #15
 8001204:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001206:	2303      	movs	r3, #3
 8001208:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001216:	463b      	mov	r3, r7
 8001218:	2104      	movs	r1, #4
 800121a:	4618      	mov	r0, r3
 800121c:	f002 f910 	bl	8003440 <HAL_RCC_ClockConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0x96>
		Error_Handler();
 8001226:	f000 f80d 	bl	8001244 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_16);
 800122a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800122e:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001232:	2000      	movs	r0, #0
 8001234:	f002 fa04 	bl	8003640 <HAL_RCC_MCOConfig>

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8001238:	f002 fafa 	bl	8003830 <HAL_RCC_EnableCSS>
}
 800123c:	bf00      	nop
 800123e:	3758      	adds	r7, #88	@ 0x58
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124a:	b672      	cpsid	i
}
 800124c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	e002      	b.n	800125a <Error_Handler+0x16>
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	3301      	adds	r3, #1
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	4a1a      	ldr	r2, [pc, #104]	@ (80012c8 <Error_Handler+0x84>)
 800125e:	4293      	cmp	r3, r2
 8001260:	ddf8      	ble.n	8001254 <Error_Handler+0x10>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D1_PWM_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	e002      	b.n	800126e <Error_Handler+0x2a>
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	3301      	adds	r3, #1
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4a15      	ldr	r2, [pc, #84]	@ (80012c8 <Error_Handler+0x84>)
 8001272:	4293      	cmp	r3, r2
 8001274:	ddf8      	ble.n	8001268 <Error_Handler+0x24>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D2_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	e002      	b.n	8001282 <Error_Handler+0x3e>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3301      	adds	r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4a10      	ldr	r2, [pc, #64]	@ (80012c8 <Error_Handler+0x84>)
 8001286:	4293      	cmp	r3, r2
 8001288:	ddf8      	ble.n	800127c <Error_Handler+0x38>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D3_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	e002      	b.n	8001296 <Error_Handler+0x52>
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	3301      	adds	r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	4a0b      	ldr	r2, [pc, #44]	@ (80012c8 <Error_Handler+0x84>)
 800129a:	4293      	cmp	r3, r2
 800129c:	ddf8      	ble.n	8001290 <Error_Handler+0x4c>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D1_Pin, GPIO_PIN_RESET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	e002      	b.n	80012aa <Error_Handler+0x66>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3301      	adds	r3, #1
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a06      	ldr	r2, [pc, #24]	@ (80012c8 <Error_Handler+0x84>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	ddf8      	ble.n	80012a4 <Error_Handler+0x60>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D2_Pin, GPIO_PIN_RESET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	e002      	b.n	80012be <Error_Handler+0x7a>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	3301      	adds	r3, #1
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	4a01      	ldr	r2, [pc, #4]	@ (80012c8 <Error_Handler+0x84>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	ddf8      	ble.n	80012b8 <Error_Handler+0x74>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80012c6:	e7c2      	b.n	800124e <Error_Handler+0xa>
 80012c8:	000c34ff 	.word	0x000c34ff

080012cc <rf_initialize_radio>:
		};
		uint8_t dio_mapping_2;
	};
} rf_register_dio_mapping_2_config_t;

int rf_initialize_radio(rf_handle_t *rf_handle) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	if (rf_handle == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <rf_initialize_radio+0x12>
		return 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	e0ea      	b.n	80014b4 <rf_initialize_radio+0x1e8>

	if (rf_handle->rf_spi_timeout == NULL)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d102      	bne.n	80012ec <rf_initialize_radio+0x20>
		rf_handle->rf_spi_timeout = 100;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2264      	movs	r2, #100	@ 0x64
 80012ea:	605a      	str	r2, [r3, #4]

	if (rf_handle->rf_module_identifier == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d103      	bne.n	80012fe <rf_initialize_radio+0x32>
		rf_handle->rf_module_identifier = -1;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	22ff      	movs	r2, #255	@ 0xff
 80012fa:	f883 2020 	strb.w	r2, [r3, #32]

	rf_reset(rf_handle);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 fb6e 	bl	80019e0 <rf_reset>

	// check version
	uint8_t version;
	if (!rf_spi_read_register(rf_handle, RegVersion, &version)) {
 8001304:	f107 0317 	add.w	r3, r7, #23
 8001308:	461a      	mov	r2, r3
 800130a:	2142      	movs	r1, #66	@ 0x42
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 fad9 	bl	80018c4 <rf_spi_read_register>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d108      	bne.n	800132a <rf_initialize_radio+0x5e>
		printf(
				"\x1b[31;1;9m[RFlib] [%d] [ERROR] \x1b[0m\x1b[31m Module did not return a version; SPI Error\x1b[0m\n\r",
				rf_handle->rf_module_identifier);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3020 	ldrb.w	r3, [r3, #32]
		printf(
 800131e:	4619      	mov	r1, r3
 8001320:	4866      	ldr	r0, [pc, #408]	@ (80014bc <rf_initialize_radio+0x1f0>)
 8001322:	f005 fe59 	bl	8006fd8 <iprintf>
		return 0;
 8001326:	2300      	movs	r3, #0
 8001328:	e0c4      	b.n	80014b4 <rf_initialize_radio+0x1e8>
	}

	if (RFM9x_VER != version) {
 800132a:	7dfb      	ldrb	r3, [r7, #23]
 800132c:	2b12      	cmp	r3, #18
 800132e:	d008      	beq.n	8001342 <rf_initialize_radio+0x76>

		printf(
				"\x1b[31;1;9m[RFlib] [%d] [ERROR] \x1b[0m\x1b[31m Module did not return the correct version\x1b[0m\n\r",
				rf_handle->rf_module_identifier);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3020 	ldrb.w	r3, [r3, #32]
		printf(
 8001336:	4619      	mov	r1, r3
 8001338:	4861      	ldr	r0, [pc, #388]	@ (80014c0 <rf_initialize_radio+0x1f4>)
 800133a:	f005 fe4d 	bl	8006fd8 <iprintf>

		return 0;
 800133e:	2300      	movs	r3, #0
 8001340:	e0b8      	b.n	80014b4 <rf_initialize_radio+0x1e8>
	}

	printf(
			"\x1b[32;1;4m[RFlib] [%d] \x1b[0m Module Available; \x1b[34;1;4mVersion: 0x%x\x1b[0m\n\r",
			rf_handle->rf_module_identifier, version);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3020 	ldrb.w	r3, [r3, #32]
	printf(
 8001348:	4619      	mov	r1, r3
 800134a:	7dfb      	ldrb	r3, [r7, #23]
 800134c:	461a      	mov	r2, r3
 800134e:	485d      	ldr	r0, [pc, #372]	@ (80014c4 <rf_initialize_radio+0x1f8>)
 8001350:	f005 fe42 	bl	8006fd8 <iprintf>

	// Module must be placed in sleep mode before switching to lora.
	if (!rf_spi_write_register(rf_handle, RegOpMode,
 8001354:	2200      	movs	r2, #0
 8001356:	2101      	movs	r1, #1
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 fb03 	bl	8001964 <rf_spi_write_register>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <rf_initialize_radio+0x9c>
	RFM95_REGISTER_OP_MODE_SLEEP))
		return 0;
 8001364:	2300      	movs	r3, #0
 8001366:	e0a5      	b.n	80014b4 <rf_initialize_radio+0x1e8>
	if (!rf_spi_write_register(rf_handle, RegOpMode,
 8001368:	2280      	movs	r2, #128	@ 0x80
 800136a:	2101      	movs	r1, #1
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 faf9 	bl	8001964 <rf_spi_write_register>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <rf_initialize_radio+0xb0>
	RFM95_REGISTER_OP_MODE_LORA_SLEEP))
		return 0;
 8001378:	2300      	movs	r3, #0
 800137a:	e09b      	b.n	80014b4 <rf_initialize_radio+0x1e8>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz
	if (!rf_spi_write_register(rf_handle, RegDioMapping1,
 800137c:	2200      	movs	r2, #0
 800137e:	2140      	movs	r1, #64	@ 0x40
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 faef 	bl	8001964 <rf_spi_write_register>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <rf_initialize_radio+0xc4>
	RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE))
		return 0;
 800138c:	2300      	movs	r3, #0
 800138e:	e091      	b.n	80014b4 <rf_initialize_radio+0x1e8>

	if (rf_handle->rf_post_init_clbk != NULL) {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <rf_initialize_radio+0xd2>
		rf_handle->rf_post_init_clbk();
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4798      	blx	r3
	}

	// Set module power to 17dbm.
	if (!rf_set_tx_power(rf_handle, 15))
 800139e:	210f      	movs	r1, #15
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 fa0b 	bl	80017bc <rf_set_tx_power>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <rf_initialize_radio+0xe4>
		return 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	e081      	b.n	80014b4 <rf_initialize_radio+0x1e8>

	// Set LNA to the highest gain with 150% boost.

	rf_register_lna_config_t reglna = { .LnaGain = 0b001, .LnaBoostLf = 0b00,
 80013b0:	4b45      	ldr	r3, [pc, #276]	@ (80014c8 <rf_initialize_radio+0x1fc>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	753b      	strb	r3, [r7, #20]
			.reserved = 0, .LnaBoostHf = 0b11 };
	if (!rf_spi_write_register(rf_handle, RegLna, reglna.lna_config))
 80013b6:	7d3b      	ldrb	r3, [r7, #20]
 80013b8:	461a      	mov	r2, r3
 80013ba:	210c      	movs	r1, #12
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 fad1 	bl	8001964 <rf_spi_write_register>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <rf_initialize_radio+0x100>
		return 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	e073      	b.n	80014b4 <rf_initialize_radio+0x1e8>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!rf_spi_write_register(rf_handle, RegPreambleMsb, 0x00))
 80013cc:	2200      	movs	r2, #0
 80013ce:	2120      	movs	r1, #32
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 fac7 	bl	8001964 <rf_spi_write_register>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <rf_initialize_radio+0x114>
		return 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	e069      	b.n	80014b4 <rf_initialize_radio+0x1e8>
	if (!rf_spi_write_register(rf_handle, RegPreambleLsb, 0x08))
 80013e0:	2208      	movs	r2, #8
 80013e2:	2121      	movs	r1, #33	@ 0x21
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 fabd 	bl	8001964 <rf_spi_write_register>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <rf_initialize_radio+0x128>
		return 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	e05f      	b.n	80014b4 <rf_initialize_radio+0x1e8>

	// Set TTN sync word 0x34.
	if (!rf_spi_write_register(rf_handle, RegSyncWord, 0x34))
 80013f4:	2234      	movs	r2, #52	@ 0x34
 80013f6:	2139      	movs	r1, #57	@ 0x39
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 fab3 	bl	8001964 <rf_spi_write_register>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <rf_initialize_radio+0x13c>
		return 0;
 8001404:	2300      	movs	r3, #0
 8001406:	e055      	b.n	80014b4 <rf_initialize_radio+0x1e8>

	// Set up TX and RX FIFO base addresses.
	if (!rf_spi_write_register(rf_handle, RegFifoTxBaseAddr, 0x80))
 8001408:	2280      	movs	r2, #128	@ 0x80
 800140a:	210e      	movs	r1, #14
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 faa9 	bl	8001964 <rf_spi_write_register>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <rf_initialize_radio+0x150>
		return 0;
 8001418:	2300      	movs	r3, #0
 800141a:	e04b      	b.n	80014b4 <rf_initialize_radio+0x1e8>
	if (!rf_spi_write_register(rf_handle, RegFifoRxBaseAddr, 0x00))
 800141c:	2200      	movs	r2, #0
 800141e:	210f      	movs	r1, #15
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 fa9f 	bl	8001964 <rf_spi_write_register>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <rf_initialize_radio+0x164>
		return 0;
 800142c:	2300      	movs	r3, #0
 800142e:	e041      	b.n	80014b4 <rf_initialize_radio+0x1e8>

	// Maximum payload length of the RFM95 is 64.
	if (!rf_spi_write_register(rf_handle, RegMaxPayloadLength, 64))
 8001430:	2240      	movs	r2, #64	@ 0x40
 8001432:	2123      	movs	r1, #35	@ 0x23
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 fa95 	bl	8001964 <rf_spi_write_register>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <rf_initialize_radio+0x178>
		return 0;
 8001440:	2300      	movs	r3, #0
 8001442:	e037      	b.n	80014b4 <rf_initialize_radio+0x1e8>

	// Let module sleep after initialization.
	if (!rf_spi_write_register(rf_handle, RegOpMode,
 8001444:	2280      	movs	r2, #128	@ 0x80
 8001446:	2101      	movs	r1, #1
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 fa8b 	bl	8001964 <rf_spi_write_register>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <rf_initialize_radio+0x18c>
	RFM95_REGISTER_OP_MODE_LORA_SLEEP))
		return 0;
 8001454:	2300      	movs	r3, #0
 8001456:	e02d      	b.n	80014b4 <rf_initialize_radio+0x1e8>

	// make sure this is defined
	rf_set_frequency(rf_handle, rf_handle->rf_carrier_frequency);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145c:	4619      	mov	r1, r3
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 f95a 	bl	8001718 <rf_set_frequency>

	rf_register_modem_config_3_t rf_modem_config_3 = { .agc_auto_on = 0b1,
 8001464:	2300      	movs	r3, #0
 8001466:	743b      	strb	r3, [r7, #16]
 8001468:	7c3b      	ldrb	r3, [r7, #16]
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	743b      	strb	r3, [r7, #16]
			.low_data_rate_optimize = 0b0 };

	if (!rf_spi_write_register(rf_handle, RegModemConfig3,
 8001470:	7c3b      	ldrb	r3, [r7, #16]
 8001472:	461a      	mov	r2, r3
 8001474:	2126      	movs	r1, #38	@ 0x26
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 fa74 	bl	8001964 <rf_spi_write_register>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <rf_initialize_radio+0x1ba>
			rf_modem_config_3.modem_config_3))
		return 0;
 8001482:	2300      	movs	r3, #0
 8001484:	e016      	b.n	80014b4 <rf_initialize_radio+0x1e8>

	rf_register_op_mode_config_t rf_op_mode_config = { .access_shared_reg = 0,
 8001486:	2300      	movs	r3, #0
 8001488:	733b      	strb	r3, [r7, #12]
 800148a:	7b3b      	ldrb	r3, [r7, #12]
 800148c:	2201      	movs	r2, #1
 800148e:	f362 0302 	bfi	r3, r2, #0, #3
 8001492:	733b      	strb	r3, [r7, #12]
 8001494:	7b3b      	ldrb	r3, [r7, #12]
 8001496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800149a:	733b      	strb	r3, [r7, #12]
			.long_range_mode = 1, .low_frequency_mode_on = 0, .mode = 0b001 };

	// idle in lora mode
	if (!rf_spi_write_register(rf_handle, RegOpMode, rf_op_mode_config.op_mode))
 800149c:	7b3b      	ldrb	r3, [r7, #12]
 800149e:	461a      	mov	r2, r3
 80014a0:	2101      	movs	r1, #1
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 fa5e 	bl	8001964 <rf_spi_write_register>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <rf_initialize_radio+0x1e6>
		return 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e000      	b.n	80014b4 <rf_initialize_radio+0x1e8>

	return 1;
 80014b2:	2301      	movs	r3, #1

}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	08008ee8 	.word	0x08008ee8
 80014c0:	08008f44 	.word	0x08008f44
 80014c4:	08008f9c 	.word	0x08008f9c
 80014c8:	08008fe8 	.word	0x08008fe8

080014cc <rf_send>:

int rf_send(rf_handle_t *rf_handle, uint8_t *buffer, uint8_t length_bytes) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08e      	sub	sp, #56	@ 0x38
 80014d0:	af02      	add	r7, sp, #8
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	4613      	mov	r3, r2
 80014d8:	71fb      	strb	r3, [r7, #7]

	rf_register_op_mode_config_t current_op_mode;
	if (!rf_spi_read_register(rf_handle, RegOpMode, &current_op_mode.op_mode))
 80014da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014de:	461a      	mov	r2, r3
 80014e0:	2101      	movs	r1, #1
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f000 f9ee 	bl	80018c4 <rf_spi_read_register>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <rf_send+0x26>
		return 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e108      	b.n	8001704 <rf_send+0x238>

	// check if in transmit mode.
	if (RF_OP_MODE_TX == current_op_mode.mode) {
 80014f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	d108      	bne.n	8001512 <rf_send+0x46>
		printf(
				"\x1b[33;3m[RFlib] [%d] [WARN] Module in TX unable to send.\x1b[0m\n\r",
				rf_handle->rf_module_identifier);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f893 3020 	ldrb.w	r3, [r3, #32]
		printf(
 8001506:	4619      	mov	r1, r3
 8001508:	4880      	ldr	r0, [pc, #512]	@ (800170c <rf_send+0x240>)
 800150a:	f005 fd65 	bl	8006fd8 <iprintf>
		return 0;
 800150e:	2300      	movs	r3, #0
 8001510:	e0f8      	b.n	8001704 <rf_send+0x238>
	}
	// here, since the module is not transmitting lets clear the inturrpt flags for tx done.
	rf_register_irq_flags_t irq_flags;
	if (!rf_spi_read_register(rf_handle, RegIrqFlags, &irq_flags.irq_flags))
 8001512:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001516:	461a      	mov	r2, r3
 8001518:	2112      	movs	r1, #18
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 f9d2 	bl	80018c4 <rf_spi_read_register>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <rf_send+0x5e>
		return 0;
 8001526:	2300      	movs	r3, #0
 8001528:	e0ec      	b.n	8001704 <rf_send+0x238>
	// if the flag is still set
	if (irq_flags.tx_done) {
 800152a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d014      	beq.n	8001562 <rf_send+0x96>
		// then clear it.
		irq_flags.irq_flags = 0b0; // first set all else to 0
 8001538:	2300      	movs	r3, #0
 800153a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		irq_flags.tx_done = 1;
 800153e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001542:	f043 0308 	orr.w	r3, r3, #8
 8001546:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		if (!rf_spi_write_register(rf_handle, RegIrqFlags, irq_flags.irq_flags))
 800154a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800154e:	461a      	mov	r2, r3
 8001550:	2112      	movs	r1, #18
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f000 fa06 	bl	8001964 <rf_spi_write_register>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <rf_send+0x96>
			return 0;
 800155e:	2300      	movs	r3, #0
 8001560:	e0d0      	b.n	8001704 <rf_send+0x238>
	}

	// put in idle lora
	rf_register_op_mode_config_t idle_op_mode;
	idle_op_mode.long_range_mode = 1;
 8001562:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800156a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	idle_op_mode.mode = RF_OP_MODE_STDBY;
 800156e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001572:	2201      	movs	r2, #1
 8001574:	f362 0302 	bfi	r3, r2, #0, #3
 8001578:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	if (!rf_spi_write_register(rf_handle, RegOpMode, idle_op_mode.op_mode))
 800157c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001580:	461a      	mov	r2, r3
 8001582:	2101      	movs	r1, #1
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f000 f9ed 	bl	8001964 <rf_spi_write_register>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <rf_send+0xc8>
		return 0;
 8001590:	2300      	movs	r3, #0
 8001592:	e0b7      	b.n	8001704 <rf_send+0x238>

	// TODO: add a global that configures the implicit or explicit header mode.

	rf_register_modem_config_1_t modem_config_1;
	if (!rf_spi_read_register(rf_handle, RegModemConfig1,
 8001594:	f107 0320 	add.w	r3, r7, #32
 8001598:	461a      	mov	r2, r3
 800159a:	211d      	movs	r1, #29
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f000 f991 	bl	80018c4 <rf_spi_read_register>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <rf_send+0xe0>
			&modem_config_1.modem_config_1))
		return 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e0ab      	b.n	8001704 <rf_send+0x238>

	// Default to implicit header.
	modem_config_1.implicit_header_mode_on = 1;
 80015ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	f887 3020 	strb.w	r3, [r7, #32]
	if (!rf_spi_write_register(rf_handle, RegModemConfig1,
 80015b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015bc:	461a      	mov	r2, r3
 80015be:	211d      	movs	r1, #29
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f000 f9cf 	bl	8001964 <rf_spi_write_register>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <rf_send+0x104>
			modem_config_1.modem_config_1))
		return 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	e099      	b.n	8001704 <rf_send+0x238>

	// Reset fifo address and payload length

	if (!rf_spi_write_register(rf_handle, RegFifoAddrPtr, 0))
 80015d0:	2200      	movs	r2, #0
 80015d2:	210d      	movs	r1, #13
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f000 f9c5 	bl	8001964 <rf_spi_write_register>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <rf_send+0x118>
		return 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	e08f      	b.n	8001704 <rf_send+0x238>

	if (!rf_spi_write_register(rf_handle, RegPayloadLength, 0)) // set to 0 for now.
 80015e4:	2200      	movs	r2, #0
 80015e6:	2122      	movs	r1, #34	@ 0x22
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f000 f9bb 	bl	8001964 <rf_spi_write_register>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <rf_send+0x12c>
		return 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	e085      	b.n	8001704 <rf_send+0x238>

	// add data

	// check size TODO: optimize this since it is constant.
	uint8_t max_payload_length = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	77fb      	strb	r3, [r7, #31]
	if (!rf_spi_read_register(rf_handle, RegMaxPayloadLength,
 80015fc:	f107 031f 	add.w	r3, r7, #31
 8001600:	461a      	mov	r2, r3
 8001602:	2123      	movs	r1, #35	@ 0x23
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f000 f95d 	bl	80018c4 <rf_spi_read_register>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <rf_send+0x148>
			&max_payload_length))
		return 0;
 8001610:	2300      	movs	r3, #0
 8001612:	e077      	b.n	8001704 <rf_send+0x238>

	if (max_payload_length < length_bytes) {
 8001614:	7ffb      	ldrb	r3, [r7, #31]
 8001616:	79fa      	ldrb	r2, [r7, #7]
 8001618:	429a      	cmp	r2, r3
 800161a:	d909      	bls.n	8001630 <rf_send+0x164>
		printf(
				"\x1b[31;4;3;1m[RFlib] [%d] [ERROR] Max payload length exceeded with %d; max is %d.\x1b[0m\n\r",
				rf_handle->rf_module_identifier, max_payload_length,
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f893 3020 	ldrb.w	r3, [r3, #32]
		printf(
 8001622:	4619      	mov	r1, r3
 8001624:	7ffb      	ldrb	r3, [r7, #31]
 8001626:	461a      	mov	r2, r3
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	4839      	ldr	r0, [pc, #228]	@ (8001710 <rf_send+0x244>)
 800162c:	f005 fcd4 	bl	8006fd8 <iprintf>
				length_bytes);
	}

	uint8_t current_payload_length = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	77bb      	strb	r3, [r7, #30]
	if (!rf_spi_read_register(rf_handle, RegPayloadLength,
 8001634:	f107 031e 	add.w	r3, r7, #30
 8001638:	461a      	mov	r2, r3
 800163a:	2122      	movs	r1, #34	@ 0x22
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f000 f941 	bl	80018c4 <rf_spi_read_register>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <rf_send+0x180>
			&current_payload_length))
		return 0;
 8001648:	2300      	movs	r3, #0
 800164a:	e05b      	b.n	8001704 <rf_send+0x238>

	if (current_payload_length + length_bytes > max_payload_length) {
 800164c:	7fbb      	ldrb	r3, [r7, #30]
 800164e:	461a      	mov	r2, r3
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	4413      	add	r3, r2
 8001654:	7ffa      	ldrb	r2, [r7, #31]
 8001656:	4293      	cmp	r3, r2
 8001658:	dd0d      	ble.n	8001676 <rf_send+0x1aa>
		printf(
				"\x1b[31;4;3;1m[RFlib] [%d] [ERROR] Old buffer not clear and adding current bytes exceeds max payload %d, prev %d, new %d.\x1b[0m\n\r",
				rf_handle->rf_module_identifier, max_payload_length,
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f893 3020 	ldrb.w	r3, [r3, #32]
		printf(
 8001660:	4619      	mov	r1, r3
 8001662:	7ffb      	ldrb	r3, [r7, #31]
 8001664:	461a      	mov	r2, r3
 8001666:	7fbb      	ldrb	r3, [r7, #30]
 8001668:	4618      	mov	r0, r3
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	4603      	mov	r3, r0
 8001670:	4828      	ldr	r0, [pc, #160]	@ (8001714 <rf_send+0x248>)
 8001672:	f005 fcb1 	bl	8006fd8 <iprintf>

	//TODO: use dio0 inturrupt

	// put in tx mode
	rf_register_op_mode_config_t tx_mode_config;
	tx_mode_config.long_range_mode = 1;
 8001676:	7e3b      	ldrb	r3, [r7, #24]
 8001678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800167c:	763b      	strb	r3, [r7, #24]
	tx_mode_config.mode = RF_OP_MODE_TX;
 800167e:	7e3b      	ldrb	r3, [r7, #24]
 8001680:	2203      	movs	r2, #3
 8001682:	f362 0302 	bfi	r3, r2, #0, #3
 8001686:	763b      	strb	r3, [r7, #24]

	if (!rf_spi_write_register(rf_handle, RegOpMode, tx_mode_config.op_mode))
 8001688:	7e3b      	ldrb	r3, [r7, #24]
 800168a:	461a      	mov	r2, r3
 800168c:	2101      	movs	r1, #1
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 f968 	bl	8001964 <rf_spi_write_register>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <rf_send+0x1d2>
		return 0;
 800169a:	2300      	movs	r3, #0
 800169c:	e032      	b.n	8001704 <rf_send+0x238>

	// Blocking

	rf_register_irq_flags_t tx_done_flags;
	if (!rf_spi_read_register(rf_handle, RegIrqFlags, &tx_done_flags.irq_flags))
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	461a      	mov	r2, r3
 80016a4:	2112      	movs	r1, #18
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 f90c 	bl	80018c4 <rf_spi_read_register>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d110      	bne.n	80016d4 <rf_send+0x208>
		return 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e026      	b.n	8001704 <rf_send+0x238>
	while (!tx_done_flags.tx_done) {
		HAL_Delay(1);
 80016b6:	2001      	movs	r0, #1
 80016b8:	f000 fec2 	bl	8002440 <HAL_Delay>
		if (!rf_spi_read_register(rf_handle, RegIrqFlags,
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	461a      	mov	r2, r3
 80016c2:	2112      	movs	r1, #18
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 f8fd 	bl	80018c4 <rf_spi_read_register>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <rf_send+0x208>
				&tx_done_flags.irq_flags))
			return 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	e017      	b.n	8001704 <rf_send+0x238>
	while (!tx_done_flags.tx_done) {
 80016d4:	7d3b      	ldrb	r3, [r7, #20]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0ea      	beq.n	80016b6 <rf_send+0x1ea>
	}

	// done sending
	// clear flags
	tx_done_flags.irq_flags = 0; // 0 out the rest
 80016e0:	2300      	movs	r3, #0
 80016e2:	753b      	strb	r3, [r7, #20]
	tx_done_flags.tx_done = 1; // set the tx done bit to clear.
 80016e4:	7d3b      	ldrb	r3, [r7, #20]
 80016e6:	f043 0308 	orr.w	r3, r3, #8
 80016ea:	753b      	strb	r3, [r7, #20]

	// clear the tx done flag for next packet.
	if (!rf_spi_write_register(rf_handle, RegIrqFlags, tx_done_flags.irq_flags))
 80016ec:	7d3b      	ldrb	r3, [r7, #20]
 80016ee:	461a      	mov	r2, r3
 80016f0:	2112      	movs	r1, #18
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f000 f936 	bl	8001964 <rf_spi_write_register>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <rf_send+0x236>
		return 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	e000      	b.n	8001704 <rf_send+0x238>

	return 1;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3730      	adds	r7, #48	@ 0x30
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	08008fec 	.word	0x08008fec
 8001710:	0800902c 	.word	0x0800902c
 8001714:	08009084 	.word	0x08009084

08001718 <rf_set_frequency>:

int rf_set_frequency(rf_handle_t *rf_handle, uint32_t rf_carrier_frequency) {
 8001718:	b5b0      	push	{r4, r5, r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]

// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t) rf_carrier_frequency << 19) / 32000000;
 8001722:	6839      	ldr	r1, [r7, #0]
 8001724:	2000      	movs	r0, #0
 8001726:	460a      	mov	r2, r1
 8001728:	4603      	mov	r3, r0
 800172a:	0b55      	lsrs	r5, r2, #13
 800172c:	04d4      	lsls	r4, r2, #19
 800172e:	4a22      	ldr	r2, [pc, #136]	@ (80017b8 <rf_set_frequency+0xa0>)
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7ff fa36 	bl	8000ba8 <__aeabi_uldivmod>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!rf_spi_write_register(rf_handle, RegFrfMsb, (uint8_t) (frf >> 16)))
 8001744:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	0c02      	lsrs	r2, r0, #16
 8001752:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001756:	0c0b      	lsrs	r3, r1, #16
 8001758:	b2d3      	uxtb	r3, r2
 800175a:	461a      	mov	r2, r3
 800175c:	2106      	movs	r1, #6
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f900 	bl	8001964 <rf_spi_write_register>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <rf_set_frequency+0x56>
		return 0;
 800176a:	2300      	movs	r3, #0
 800176c:	e020      	b.n	80017b0 <rf_set_frequency+0x98>
	if (!rf_spi_write_register(rf_handle, RegFrfMid, (uint8_t) (frf >> 8)))
 800176e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	0a02      	lsrs	r2, r0, #8
 800177c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001780:	0a0b      	lsrs	r3, r1, #8
 8001782:	b2d3      	uxtb	r3, r2
 8001784:	461a      	mov	r2, r3
 8001786:	2107      	movs	r1, #7
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f8eb 	bl	8001964 <rf_spi_write_register>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <rf_set_frequency+0x80>
		return 0;
 8001794:	2300      	movs	r3, #0
 8001796:	e00b      	b.n	80017b0 <rf_set_frequency+0x98>
	if (!rf_spi_write_register(rf_handle, RegFrfLsb, (uint8_t) (frf >> 0)))
 8001798:	7a3b      	ldrb	r3, [r7, #8]
 800179a:	461a      	mov	r2, r3
 800179c:	2108      	movs	r1, #8
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f8e0 	bl	8001964 <rf_spi_write_register>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <rf_set_frequency+0x96>
		return 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	e000      	b.n	80017b0 <rf_set_frequency+0x98>

	return 1;
 80017ae:	2301      	movs	r3, #1

}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bdb0      	pop	{r4, r5, r7, pc}
 80017b8:	01e84800 	.word	0x01e84800

080017bc <rf_set_tx_power>:

int rf_set_tx_power(rf_handle_t *rf_handle, uint8_t rf_power_dbm) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	70fb      	strb	r3, [r7, #3]

	if (!(rf_power_dbm >= 2 && rf_power_dbm <= 17) || !(rf_power_dbm == 20)) {
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d905      	bls.n	80017da <rf_set_tx_power+0x1e>
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	2b11      	cmp	r3, #17
 80017d2:	d802      	bhi.n	80017da <rf_set_tx_power+0x1e>
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	2b14      	cmp	r3, #20
 80017d8:	d00a      	beq.n	80017f0 <rf_set_tx_power+0x34>
		printf(
				"\x1b[31;1;9m[RFlib] [%d] [ERROR] \x1b[0m\x1b[31m Unable to set power to %d out of range.\x1b[0m\n\r",
				rf_handle->rf_module_identifier, rf_power_dbm);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3020 	ldrb.w	r3, [r3, #32]
		printf(
 80017e0:	4619      	mov	r1, r3
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4834      	ldr	r0, [pc, #208]	@ (80018b8 <rf_set_tx_power+0xfc>)
 80017e8:	f005 fbf6 	bl	8006fd8 <iprintf>
		return 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	e05f      	b.n	80018b0 <rf_set_tx_power+0xf4>
	}

	rf_register_pa_config_t reg_pa_config;
	uint8_t reg_pa_dac_config = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	73fb      	strb	r3, [r7, #15]

	if (rf_power_dbm >= 2 || rf_power_dbm <= 17) {
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d802      	bhi.n	8001800 <rf_set_tx_power+0x44>
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	2b11      	cmp	r3, #17
 80017fe:	d814      	bhi.n	800182a <rf_set_tx_power+0x6e>
		reg_pa_config.max_power = 7;
 8001800:	7b3b      	ldrb	r3, [r7, #12]
 8001802:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001806:	733b      	strb	r3, [r7, #12]
		reg_pa_config.pa_select = 1;
 8001808:	7b3b      	ldrb	r3, [r7, #12]
 800180a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800180e:	733b      	strb	r3, [r7, #12]
		reg_pa_config.output_power = (rf_power_dbm - 2);
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	3b02      	subs	r3, #2
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	b2da      	uxtb	r2, r3
 800181c:	7b3b      	ldrb	r3, [r7, #12]
 800181e:	f362 0303 	bfi	r3, r2, #0, #4
 8001822:	733b      	strb	r3, [r7, #12]
		reg_pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 8001824:	2384      	movs	r3, #132	@ 0x84
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	e010      	b.n	800184c <rf_set_tx_power+0x90>
	} else if (rf_power_dbm == 20) {
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	2b14      	cmp	r3, #20
 800182e:	d10d      	bne.n	800184c <rf_set_tx_power+0x90>
		reg_pa_config.max_power = 7;
 8001830:	7b3b      	ldrb	r3, [r7, #12]
 8001832:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001836:	733b      	strb	r3, [r7, #12]
		reg_pa_config.pa_select = 1;
 8001838:	7b3b      	ldrb	r3, [r7, #12]
 800183a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800183e:	733b      	strb	r3, [r7, #12]
		reg_pa_config.output_power = 15;
 8001840:	7b3b      	ldrb	r3, [r7, #12]
 8001842:	f043 030f 	orr.w	r3, r3, #15
 8001846:	733b      	strb	r3, [r7, #12]
		reg_pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8001848:	2387      	movs	r3, #135	@ 0x87
 800184a:	73fb      	strb	r3, [r7, #15]
	}

	if (!rf_spi_write_register(rf_handle, RegPaConfig,
 800184c:	7b3b      	ldrb	r3, [r7, #12]
 800184e:	461a      	mov	r2, r3
 8001850:	2109      	movs	r1, #9
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f886 	bl	8001964 <rf_spi_write_register>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10a      	bne.n	8001874 <rf_set_tx_power+0xb8>
			reg_pa_config.pa_config)) {
		printf(
				"\x1b[31;1;9m[RFlib] [%d] [ERROR] \x1b[0m\x1b[31m Unable to set power to %d SPI write error.\x1b[0m\n\r",
				rf_handle->rf_module_identifier, rf_power_dbm);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3020 	ldrb.w	r3, [r3, #32]
		printf(
 8001864:	4619      	mov	r1, r3
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	461a      	mov	r2, r3
 800186a:	4814      	ldr	r0, [pc, #80]	@ (80018bc <rf_set_tx_power+0x100>)
 800186c:	f005 fbb4 	bl	8006fd8 <iprintf>
		return 0;
 8001870:	2300      	movs	r3, #0
 8001872:	e01d      	b.n	80018b0 <rf_set_tx_power+0xf4>
	}
	if (!rf_spi_write_register(rf_handle, RegPaDac, reg_pa_dac_config)) {
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	461a      	mov	r2, r3
 8001878:	214d      	movs	r1, #77	@ 0x4d
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f872 	bl	8001964 <rf_spi_write_register>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10a      	bne.n	800189c <rf_set_tx_power+0xe0>
		printf(
				"\x1b[31;1;9m[RFlib] [%d] [ERROR] \x1b[0m\x1b[31m Unable to set power to %d SPI write error.\x1b[0m\n\r",
				rf_handle->rf_module_identifier, rf_power_dbm);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 3020 	ldrb.w	r3, [r3, #32]
		printf(
 800188c:	4619      	mov	r1, r3
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	461a      	mov	r2, r3
 8001892:	480a      	ldr	r0, [pc, #40]	@ (80018bc <rf_set_tx_power+0x100>)
 8001894:	f005 fba0 	bl	8006fd8 <iprintf>
		return 0;
 8001898:	2300      	movs	r3, #0
 800189a:	e009      	b.n	80018b0 <rf_set_tx_power+0xf4>
	}
	printf("\x1b[32;4;1;3m[RFlib] [%d] [ERROR] Set power to %d.\x1b[0m\n\r",
			rf_handle->rf_module_identifier, rf_power_dbm);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3020 	ldrb.w	r3, [r3, #32]
	printf("\x1b[32;4;1;3m[RFlib] [%d] [ERROR] Set power to %d.\x1b[0m\n\r",
 80018a2:	4619      	mov	r1, r3
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	461a      	mov	r2, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	@ (80018c0 <rf_set_tx_power+0x104>)
 80018aa:	f005 fb95 	bl	8006fd8 <iprintf>
	return 1;
 80018ae:	2301      	movs	r3, #1

}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	08009104 	.word	0x08009104
 80018bc:	0800915c 	.word	0x0800915c
 80018c0:	080091b8 	.word	0x080091b8

080018c4 <rf_spi_read_register>:
	return 1;

}

int rf_spi_read_register(rf_handle_t *rf_handle, uint8_t rf_register_address,
		uint8_t *rf_register_result) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	460b      	mov	r3, r1
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	72fb      	strb	r3, [r7, #11]

// 0 the MSB since that is the wnr bit. we are reading so it must be 0.
	uint8_t prep_register = rf_register_address & 0x7f;
 80018d2:	7afb      	ldrb	r3, [r7, #11]
 80018d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(rf_handle->rf_nss_port, rf_handle->rf_nss_pin,
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6898      	ldr	r0, [r3, #8]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	899b      	ldrh	r3, [r3, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	4619      	mov	r1, r3
 80018e8:	f001 f91a 	bl	8002b20 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	if (HAL_SPI_Transmit(rf_handle->rf_spi_handle, &prep_register, 1,
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f107 0117 	add.w	r1, r7, #23
 80018f8:	2201      	movs	r2, #1
 80018fa:	f002 fbb0 	bl	800405e <HAL_SPI_Transmit>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00a      	beq.n	800191a <rf_spi_read_register+0x56>
			rf_handle->rf_spi_timeout) != HAL_OK) {
		printf(
				"\x1b[31;1;4m[RFlib] [%d] [ERROR]\x1b[0m : Failed to read register \x1b[33;4;1;3m0x%x\x1b[0m\n\r",
				rf_handle->rf_module_identifier, rf_register_address);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f893 3020 	ldrb.w	r3, [r3, #32]
		printf(
 800190a:	4619      	mov	r1, r3
 800190c:	7afb      	ldrb	r3, [r7, #11]
 800190e:	461a      	mov	r2, r3
 8001910:	4813      	ldr	r0, [pc, #76]	@ (8001960 <rf_spi_read_register+0x9c>)
 8001912:	f005 fb61 	bl	8006fd8 <iprintf>
		return 0;
 8001916:	2300      	movs	r3, #0
 8001918:	e01e      	b.n	8001958 <rf_spi_read_register+0x94>
	}

	if (HAL_SPI_Receive(rf_handle->rf_spi_handle, rf_register_result, 1,
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	f002 fd10 	bl	800434a <HAL_SPI_Receive>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00a      	beq.n	8001946 <rf_spi_read_register+0x82>
			rf_handle->rf_spi_timeout) != HAL_OK) {
		printf(
				"\x1b[31;1;4m[RFlib] [%d] [ERROR]\x1b[0m : Failed to read register \x1b[33;4;1;3m0x%x\x1b[0m\n\r",
				rf_handle->rf_module_identifier, rf_register_address);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f893 3020 	ldrb.w	r3, [r3, #32]
		printf(
 8001936:	4619      	mov	r1, r3
 8001938:	7afb      	ldrb	r3, [r7, #11]
 800193a:	461a      	mov	r2, r3
 800193c:	4808      	ldr	r0, [pc, #32]	@ (8001960 <rf_spi_read_register+0x9c>)
 800193e:	f005 fb4b 	bl	8006fd8 <iprintf>
		return 0;
 8001942:	2300      	movs	r3, #0
 8001944:	e008      	b.n	8001958 <rf_spi_read_register+0x94>
	}

	HAL_GPIO_WritePin(rf_handle->rf_nss_port, rf_handle->rf_nss_pin,
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6898      	ldr	r0, [r3, #8]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	899b      	ldrh	r3, [r3, #12]
 800194e:	2201      	movs	r2, #1
 8001950:	4619      	mov	r1, r3
 8001952:	f001 f8e5 	bl	8002b20 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	return 1;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	080091f0 	.word	0x080091f0

08001964 <rf_spi_write_register>:

int rf_spi_write_register(rf_handle_t *rf_handle, uint8_t rf_register_address,
		uint8_t rf_register_value) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	70fb      	strb	r3, [r7, #3]
 8001970:	4613      	mov	r3, r2
 8001972:	70bb      	strb	r3, [r7, #2]
// 1 the MSB since that is the wnr bit. we are writing so it must be 1.
	uint8_t prep_register_buffer[2] = { ((uint8_t) rf_register_address | 0x80u),
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800197a:	b2db      	uxtb	r3, r3
 800197c:	733b      	strb	r3, [r7, #12]
 800197e:	78bb      	ldrb	r3, [r7, #2]
 8001980:	737b      	strb	r3, [r7, #13]
			rf_register_value };

	HAL_GPIO_WritePin(rf_handle->rf_nss_port, rf_handle->rf_nss_pin,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6898      	ldr	r0, [r3, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	899b      	ldrh	r3, [r3, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	4619      	mov	r1, r3
 800198e:	f001 f8c7 	bl	8002b20 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	if (HAL_SPI_Transmit(rf_handle->rf_spi_handle, &prep_register_buffer, 1,
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f107 010c 	add.w	r1, r7, #12
 800199e:	2201      	movs	r2, #1
 80019a0:	f002 fb5d 	bl	800405e <HAL_SPI_Transmit>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00a      	beq.n	80019c0 <rf_spi_write_register+0x5c>
			rf_handle->rf_spi_timeout) != HAL_OK) {
		printf(
				"\x1b[31;1;4m[RFlib] [%d] [ERROR]\x1b[0m : Failed to set register \x1b[33;4;1;3m0x%x : 0x%x\x1b[0m\n\r",
				rf_handle->rf_module_identifier, rf_register_address,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3020 	ldrb.w	r3, [r3, #32]
		printf(
 80019b0:	4619      	mov	r1, r3
 80019b2:	78fa      	ldrb	r2, [r7, #3]
 80019b4:	78bb      	ldrb	r3, [r7, #2]
 80019b6:	4809      	ldr	r0, [pc, #36]	@ (80019dc <rf_spi_write_register+0x78>)
 80019b8:	f005 fb0e 	bl	8006fd8 <iprintf>
				rf_register_value);
		return 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	e008      	b.n	80019d2 <rf_spi_write_register+0x6e>
	}

	HAL_GPIO_WritePin(rf_handle->rf_nss_port, rf_handle->rf_nss_pin,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6898      	ldr	r0, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	899b      	ldrh	r3, [r3, #12]
 80019c8:	2201      	movs	r2, #1
 80019ca:	4619      	mov	r1, r3
 80019cc:	f001 f8a8 	bl	8002b20 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	return 1;
 80019d0:	2301      	movs	r3, #1

}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	08009244 	.word	0x08009244

080019e0 <rf_reset>:

int rf_reset(rf_handle_t *rf_handle) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

	printf("\x1b[33;1;3;4m[RFlib] [%d] [INFO] : Reseting module\x1b[0m\n\r",
			rf_handle->rf_module_identifier);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3020 	ldrb.w	r3, [r3, #32]
	printf("\x1b[33;1;3;4m[RFlib] [%d] [INFO] : Reseting module\x1b[0m\n\r",
 80019ee:	4619      	mov	r1, r3
 80019f0:	480f      	ldr	r0, [pc, #60]	@ (8001a30 <rf_reset+0x50>)
 80019f2:	f005 faf1 	bl	8006fd8 <iprintf>

	HAL_GPIO_WritePin(rf_handle->rf_nreset_port, rf_handle->rf_nreset_pin,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6918      	ldr	r0, [r3, #16]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	8a9b      	ldrh	r3, [r3, #20]
 80019fe:	2200      	movs	r2, #0
 8001a00:	4619      	mov	r1, r3
 8001a02:	f001 f88d 	bl	8002b20 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	rf_handle->rf_delay_func(100);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	2064      	movs	r0, #100	@ 0x64
 8001a0c:	4798      	blx	r3
	HAL_GPIO_WritePin(rf_handle->rf_nreset_port, rf_handle->rf_nreset_pin,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6918      	ldr	r0, [r3, #16]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	8a9b      	ldrh	r3, [r3, #20]
 8001a16:	2201      	movs	r2, #1
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f001 f881 	bl	8002b20 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	rf_handle->rf_delay_func(100);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	2064      	movs	r0, #100	@ 0x64
 8001a24:	4798      	blx	r3

	return 1;
 8001a26:	2301      	movs	r3, #1

}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	0800929c 	.word	0x0800929c

08001a34 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a38:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa8 <MX_SPI1_Init+0x74>)
 8001a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8001aac <MX_SPI1_Init+0x78>)
 8001a3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa8 <MX_SPI1_Init+0x74>)
 8001a40:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a46:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <MX_SPI1_Init+0x74>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a4c:	4b16      	ldr	r3, [pc, #88]	@ (8001aa8 <MX_SPI1_Init+0x74>)
 8001a4e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001a52:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a54:	4b14      	ldr	r3, [pc, #80]	@ (8001aa8 <MX_SPI1_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a5a:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <MX_SPI1_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a60:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <MX_SPI1_Init+0x74>)
 8001a62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a66:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001a68:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa8 <MX_SPI1_Init+0x74>)
 8001a6a:	2228      	movs	r2, #40	@ 0x28
 8001a6c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <MX_SPI1_Init+0x74>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <MX_SPI1_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <MX_SPI1_Init+0x74>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a80:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <MX_SPI1_Init+0x74>)
 8001a82:	2207      	movs	r2, #7
 8001a84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a86:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <MX_SPI1_Init+0x74>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <MX_SPI1_Init+0x74>)
 8001a8e:	2208      	movs	r2, #8
 8001a90:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a92:	4805      	ldr	r0, [pc, #20]	@ (8001aa8 <MX_SPI1_Init+0x74>)
 8001a94:	f002 fa40 	bl	8003f18 <HAL_SPI_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a9e:	f7ff fbd1 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000218 	.word	0x20000218
 8001aac:	40013000 	.word	0x40013000

08001ab0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	@ 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a17      	ldr	r2, [pc, #92]	@ (8001b2c <HAL_SPI_MspInit+0x7c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d128      	bne.n	8001b24 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ad2:	4b17      	ldr	r3, [pc, #92]	@ (8001b30 <HAL_SPI_MspInit+0x80>)
 8001ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad6:	4a16      	ldr	r2, [pc, #88]	@ (8001b30 <HAL_SPI_MspInit+0x80>)
 8001ad8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001adc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ade:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <HAL_SPI_MspInit+0x80>)
 8001ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <HAL_SPI_MspInit+0x80>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aee:	4a10      	ldr	r2, [pc, #64]	@ (8001b30 <HAL_SPI_MspInit+0x80>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <HAL_SPI_MspInit+0x80>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b02:	23e0      	movs	r3, #224	@ 0xe0
 8001b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b12:	2305      	movs	r3, #5
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b20:	f000 fe94 	bl	800284c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b24:	bf00      	nop
 8001b26:	3728      	adds	r7, #40	@ 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40013000 	.word	0x40013000
 8001b30:	40021000 	.word	0x40021000

08001b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b46:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b56:	4a08      	ldr	r2, [pc, #32]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b5e:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000

08001b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001b80:	f001 fe66 	bl	8003850 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <NMI_Handler+0x8>

08001b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08c      	sub	sp, #48	@ 0x30
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pins : PBPin PBPin PBPin PBPin */
	GPIO_InitStruct.Pin = LED_D1_PWM_Pin;
 8001b9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ba0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D1_PWM_GPIO_Port, &GPIO_InitStruct);
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	4619      	mov	r1, r3
 8001bae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb2:	f000 fe4b 	bl	800284c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D2_PWM_Pin;
 8001bb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bba:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D2_PWM_GPIO_Port, &GPIO_InitStruct);
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bcc:	f000 fe3e 	bl	800284c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D3_PWM_Pin;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	4619      	mov	r1, r3
 8001be0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001be4:	f000 fe32 	bl	800284c <HAL_GPIO_Init>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bec:	e002      	b.n	8001bf4 <HardFault_Handler+0x6c>
 8001bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bf6:	4a2f      	ldr	r2, [pc, #188]	@ (8001cb4 <HardFault_Handler+0x12c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	ddf8      	ble.n	8001bee <HardFault_Handler+0x66>
			;
		HAL_GPIO_WritePin(LED_D1_PWM_GPIO_Port, LED_D1_PWM_Pin, GPIO_PIN_SET);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c06:	f000 ff8b 	bl	8002b20 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c0e:	e002      	b.n	8001c16 <HardFault_Handler+0x8e>
 8001c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c12:	3301      	adds	r3, #1
 8001c14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c18:	4a26      	ldr	r2, [pc, #152]	@ (8001cb4 <HardFault_Handler+0x12c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	ddf8      	ble.n	8001c10 <HardFault_Handler+0x88>
					;
		HAL_GPIO_WritePin(LED_D2_PWM_GPIO_Port, LED_D2_PWM_Pin, GPIO_PIN_SET);
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c28:	f000 ff7a 	bl	8002b20 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c30:	e002      	b.n	8001c38 <HardFault_Handler+0xb0>
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	3301      	adds	r3, #1
 8001c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb4 <HardFault_Handler+0x12c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	ddf8      	ble.n	8001c32 <HardFault_Handler+0xaa>
					;
		HAL_GPIO_WritePin(LED_D3_PWM_GPIO_Port, LED_D3_PWM_Pin, GPIO_PIN_SET);
 8001c40:	2201      	movs	r2, #1
 8001c42:	2102      	movs	r1, #2
 8001c44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c48:	f000 ff6a 	bl	8002b20 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	623b      	str	r3, [r7, #32]
 8001c50:	e002      	b.n	8001c58 <HardFault_Handler+0xd0>
 8001c52:	6a3b      	ldr	r3, [r7, #32]
 8001c54:	3301      	adds	r3, #1
 8001c56:	623b      	str	r3, [r7, #32]
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	4a16      	ldr	r2, [pc, #88]	@ (8001cb4 <HardFault_Handler+0x12c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	ddf8      	ble.n	8001c52 <HardFault_Handler+0xca>
			;
		HAL_GPIO_WritePin(LED_D1_PWM_GPIO_Port, LED_D1_PWM_Pin, GPIO_PIN_RESET);
 8001c60:	2200      	movs	r2, #0
 8001c62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c6a:	f000 ff59 	bl	8002b20 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
 8001c72:	e002      	b.n	8001c7a <HardFault_Handler+0xf2>
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	3301      	adds	r3, #1
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb4 <HardFault_Handler+0x12c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	ddf8      	ble.n	8001c74 <HardFault_Handler+0xec>
					;
		HAL_GPIO_WritePin(LED_D2_PWM_GPIO_Port, LED_D2_PWM_Pin, GPIO_PIN_RESET);
 8001c82:	2200      	movs	r2, #0
 8001c84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c8c:	f000 ff48 	bl	8002b20 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	61bb      	str	r3, [r7, #24]
 8001c94:	e002      	b.n	8001c9c <HardFault_Handler+0x114>
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	4a05      	ldr	r2, [pc, #20]	@ (8001cb4 <HardFault_Handler+0x12c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	ddf8      	ble.n	8001c96 <HardFault_Handler+0x10e>
					;
		HAL_GPIO_WritePin(LED_D3_PWM_GPIO_Port, LED_D3_PWM_Pin, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cac:	f000 ff38 	bl	8002b20 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001cb0:	e79a      	b.n	8001be8 <HardFault_Handler+0x60>
 8001cb2:	bf00      	nop
 8001cb4:	000c34ff 	.word	0x000c34ff

08001cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <MemManage_Handler+0x4>

08001cc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <BusFault_Handler+0x4>

08001cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <UsageFault_Handler+0x4>

08001cd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cfe:	f000 fb7f 	bl	8002400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  return 1;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <_kill>:

int _kill(int pid, int sig)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d20:	f005 fa02 	bl	8007128 <__errno>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2216      	movs	r2, #22
 8001d28:	601a      	str	r2, [r3, #0]
  return -1;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <_exit>:

void _exit (int status)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d3e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ffe7 	bl	8001d16 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <_exit+0x12>

08001d4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	e00a      	b.n	8001d74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d5e:	f3af 8000 	nop.w
 8001d62:	4601      	mov	r1, r0
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	60ba      	str	r2, [r7, #8]
 8001d6a:	b2ca      	uxtb	r2, r1
 8001d6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3301      	adds	r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	dbf0      	blt.n	8001d5e <_read+0x12>
  }

  return len;
 8001d7c:	687b      	ldr	r3, [r7, #4]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dae:	605a      	str	r2, [r3, #4]
  return 0;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <_isatty>:

int _isatty(int file)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dc6:	2301      	movs	r3, #1
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df8:	4a14      	ldr	r2, [pc, #80]	@ (8001e4c <_sbrk+0x5c>)
 8001dfa:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <_sbrk+0x60>)
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e04:	4b13      	ldr	r3, [pc, #76]	@ (8001e54 <_sbrk+0x64>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	@ (8001e54 <_sbrk+0x64>)
 8001e0e:	4a12      	ldr	r2, [pc, #72]	@ (8001e58 <_sbrk+0x68>)
 8001e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e12:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <_sbrk+0x64>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d207      	bcs.n	8001e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e20:	f005 f982 	bl	8007128 <__errno>
 8001e24:	4603      	mov	r3, r0
 8001e26:	220c      	movs	r2, #12
 8001e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2e:	e009      	b.n	8001e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e30:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <_sbrk+0x64>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e36:	4b07      	ldr	r3, [pc, #28]	@ (8001e54 <_sbrk+0x64>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	4a05      	ldr	r2, [pc, #20]	@ (8001e54 <_sbrk+0x64>)
 8001e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e42:	68fb      	ldr	r3, [r7, #12]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20010000 	.word	0x20010000
 8001e50:	00000400 	.word	0x00000400
 8001e54:	2000027c 	.word	0x2000027c
 8001e58:	200004f0 	.word	0x200004f0

08001e5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e60:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <SystemInit+0x20>)
 8001e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e66:	4a05      	ldr	r2, [pc, #20]	@ (8001e7c <SystemInit+0x20>)
 8001e68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b09a      	sub	sp, #104	@ 0x68
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e86:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e94:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ea0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
 8001eb0:	615a      	str	r2, [r3, #20]
 8001eb2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	222c      	movs	r2, #44	@ 0x2c
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f005 f8e1 	bl	8007082 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ec0:	4b49      	ldr	r3, [pc, #292]	@ (8001fe8 <MX_TIM1_Init+0x168>)
 8001ec2:	4a4a      	ldr	r2, [pc, #296]	@ (8001fec <MX_TIM1_Init+0x16c>)
 8001ec4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 8001ec6:	4b48      	ldr	r3, [pc, #288]	@ (8001fe8 <MX_TIM1_Init+0x168>)
 8001ec8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001ecc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ece:	4b46      	ldr	r3, [pc, #280]	@ (8001fe8 <MX_TIM1_Init+0x168>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001ed4:	4b44      	ldr	r3, [pc, #272]	@ (8001fe8 <MX_TIM1_Init+0x168>)
 8001ed6:	2263      	movs	r2, #99	@ 0x63
 8001ed8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eda:	4b43      	ldr	r3, [pc, #268]	@ (8001fe8 <MX_TIM1_Init+0x168>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ee0:	4b41      	ldr	r3, [pc, #260]	@ (8001fe8 <MX_TIM1_Init+0x168>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ee6:	4b40      	ldr	r3, [pc, #256]	@ (8001fe8 <MX_TIM1_Init+0x168>)
 8001ee8:	2280      	movs	r2, #128	@ 0x80
 8001eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001eec:	483e      	ldr	r0, [pc, #248]	@ (8001fe8 <MX_TIM1_Init+0x168>)
 8001eee:	f002 ff3f 	bl	8004d70 <HAL_TIM_Base_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001ef8:	f7ff f9a4 	bl	8001244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001efc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f00:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f02:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001f06:	4619      	mov	r1, r3
 8001f08:	4837      	ldr	r0, [pc, #220]	@ (8001fe8 <MX_TIM1_Init+0x168>)
 8001f0a:	f003 f8fd 	bl	8005108 <HAL_TIM_ConfigClockSource>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001f14:	f7ff f996 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f18:	4833      	ldr	r0, [pc, #204]	@ (8001fe8 <MX_TIM1_Init+0x168>)
 8001f1a:	f002 ff80 	bl	8004e1e <HAL_TIM_PWM_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001f24:	f7ff f98e 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f34:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001f38:	4619      	mov	r1, r3
 8001f3a:	482b      	ldr	r0, [pc, #172]	@ (8001fe8 <MX_TIM1_Init+0x168>)
 8001f3c:	f003 fd36 	bl	80059ac <HAL_TIMEx_MasterConfigSynchronization>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001f46:	f7ff f97d 	bl	8001244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f4a:	2360      	movs	r3, #96	@ 0x60
 8001f4c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f52:	2300      	movs	r3, #0
 8001f54:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f56:	2300      	movs	r3, #0
 8001f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f62:	2300      	movs	r3, #0
 8001f64:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f66:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	481e      	ldr	r0, [pc, #120]	@ (8001fe8 <MX_TIM1_Init+0x168>)
 8001f70:	f002 ffb6 	bl	8004ee0 <HAL_TIM_PWM_ConfigChannel>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001f7a:	f7ff f963 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f7e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f82:	2208      	movs	r2, #8
 8001f84:	4619      	mov	r1, r3
 8001f86:	4818      	ldr	r0, [pc, #96]	@ (8001fe8 <MX_TIM1_Init+0x168>)
 8001f88:	f002 ffaa 	bl	8004ee0 <HAL_TIM_PWM_ConfigChannel>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001f92:	f7ff f957 	bl	8001244 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001faa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001fb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4807      	ldr	r0, [pc, #28]	@ (8001fe8 <MX_TIM1_Init+0x168>)
 8001fcc:	f003 fd54 	bl	8005a78 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001fd6:	f7ff f935 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fda:	4803      	ldr	r0, [pc, #12]	@ (8001fe8 <MX_TIM1_Init+0x168>)
 8001fdc:	f000 f8b0 	bl	8002140 <HAL_TIM_MspPostInit>

}
 8001fe0:	bf00      	nop
 8001fe2:	3768      	adds	r7, #104	@ 0x68
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000280 	.word	0x20000280
 8001fec:	40012c00 	.word	0x40012c00

08001ff0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08e      	sub	sp, #56	@ 0x38
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ff6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]
 8002002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002010:	463b      	mov	r3, r7
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	60da      	str	r2, [r3, #12]
 800201c:	611a      	str	r2, [r3, #16]
 800201e:	615a      	str	r2, [r3, #20]
 8002020:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002022:	4b2d      	ldr	r3, [pc, #180]	@ (80020d8 <MX_TIM2_Init+0xe8>)
 8002024:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002028:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 800202a:	4b2b      	ldr	r3, [pc, #172]	@ (80020d8 <MX_TIM2_Init+0xe8>)
 800202c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002030:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002032:	4b29      	ldr	r3, [pc, #164]	@ (80020d8 <MX_TIM2_Init+0xe8>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002038:	4b27      	ldr	r3, [pc, #156]	@ (80020d8 <MX_TIM2_Init+0xe8>)
 800203a:	2263      	movs	r2, #99	@ 0x63
 800203c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800203e:	4b26      	ldr	r3, [pc, #152]	@ (80020d8 <MX_TIM2_Init+0xe8>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002044:	4b24      	ldr	r3, [pc, #144]	@ (80020d8 <MX_TIM2_Init+0xe8>)
 8002046:	2280      	movs	r2, #128	@ 0x80
 8002048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800204a:	4823      	ldr	r0, [pc, #140]	@ (80020d8 <MX_TIM2_Init+0xe8>)
 800204c:	f002 fe90 	bl	8004d70 <HAL_TIM_Base_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002056:	f7ff f8f5 	bl	8001244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800205a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800205e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002060:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002064:	4619      	mov	r1, r3
 8002066:	481c      	ldr	r0, [pc, #112]	@ (80020d8 <MX_TIM2_Init+0xe8>)
 8002068:	f003 f84e 	bl	8005108 <HAL_TIM_ConfigClockSource>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002072:	f7ff f8e7 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002076:	4818      	ldr	r0, [pc, #96]	@ (80020d8 <MX_TIM2_Init+0xe8>)
 8002078:	f002 fed1 	bl	8004e1e <HAL_TIM_PWM_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002082:	f7ff f8df 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800208e:	f107 031c 	add.w	r3, r7, #28
 8002092:	4619      	mov	r1, r3
 8002094:	4810      	ldr	r0, [pc, #64]	@ (80020d8 <MX_TIM2_Init+0xe8>)
 8002096:	f003 fc89 	bl	80059ac <HAL_TIMEx_MasterConfigSynchronization>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80020a0:	f7ff f8d0 	bl	8001244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020a4:	2360      	movs	r3, #96	@ 0x60
 80020a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020b4:	463b      	mov	r3, r7
 80020b6:	2204      	movs	r2, #4
 80020b8:	4619      	mov	r1, r3
 80020ba:	4807      	ldr	r0, [pc, #28]	@ (80020d8 <MX_TIM2_Init+0xe8>)
 80020bc:	f002 ff10 	bl	8004ee0 <HAL_TIM_PWM_ConfigChannel>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80020c6:	f7ff f8bd 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020ca:	4803      	ldr	r0, [pc, #12]	@ (80020d8 <MX_TIM2_Init+0xe8>)
 80020cc:	f000 f838 	bl	8002140 <HAL_TIM_MspPostInit>

}
 80020d0:	bf00      	nop
 80020d2:	3738      	adds	r7, #56	@ 0x38
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200002cc 	.word	0x200002cc

080020dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a13      	ldr	r2, [pc, #76]	@ (8002138 <HAL_TIM_Base_MspInit+0x5c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d10c      	bne.n	8002108 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ee:	4b13      	ldr	r3, [pc, #76]	@ (800213c <HAL_TIM_Base_MspInit+0x60>)
 80020f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f2:	4a12      	ldr	r2, [pc, #72]	@ (800213c <HAL_TIM_Base_MspInit+0x60>)
 80020f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80020fa:	4b10      	ldr	r3, [pc, #64]	@ (800213c <HAL_TIM_Base_MspInit+0x60>)
 80020fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002106:	e010      	b.n	800212a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002110:	d10b      	bne.n	800212a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002112:	4b0a      	ldr	r3, [pc, #40]	@ (800213c <HAL_TIM_Base_MspInit+0x60>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002116:	4a09      	ldr	r2, [pc, #36]	@ (800213c <HAL_TIM_Base_MspInit+0x60>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6593      	str	r3, [r2, #88]	@ 0x58
 800211e:	4b07      	ldr	r3, [pc, #28]	@ (800213c <HAL_TIM_Base_MspInit+0x60>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40012c00 	.word	0x40012c00
 800213c:	40021000 	.word	0x40021000

08002140 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08a      	sub	sp, #40	@ 0x28
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a23      	ldr	r2, [pc, #140]	@ (80021ec <HAL_TIM_MspPostInit+0xac>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d11e      	bne.n	80021a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002162:	4b23      	ldr	r3, [pc, #140]	@ (80021f0 <HAL_TIM_MspPostInit+0xb0>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002166:	4a22      	ldr	r2, [pc, #136]	@ (80021f0 <HAL_TIM_MspPostInit+0xb0>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800216e:	4b20      	ldr	r3, [pc, #128]	@ (80021f0 <HAL_TIM_MspPostInit+0xb0>)
 8002170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LED_D2_PWM_Pin|LED_D1_PWM_Pin;
 800217a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800217e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002180:	2302      	movs	r3, #2
 8002182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2300      	movs	r3, #0
 800218a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800218c:	2301      	movs	r3, #1
 800218e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	4619      	mov	r1, r3
 8002196:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800219a:	f000 fb57 	bl	800284c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800219e:	e021      	b.n	80021e4 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM2)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a8:	d11c      	bne.n	80021e4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <HAL_TIM_MspPostInit+0xb0>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ae:	4a10      	ldr	r2, [pc, #64]	@ (80021f0 <HAL_TIM_MspPostInit+0xb0>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021b6:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <HAL_TIM_MspPostInit+0xb0>)
 80021b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_D3_PWM_Pin;
 80021c2:	2302      	movs	r3, #2
 80021c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021d2:	2301      	movs	r3, #1
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021e0:	f000 fb34 	bl	800284c <HAL_GPIO_Init>
}
 80021e4:	bf00      	nop
 80021e6:	3728      	adds	r7, #40	@ 0x28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40012c00 	.word	0x40012c00
 80021f0:	40021000 	.word	0x40021000

080021f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021f8:	4b14      	ldr	r3, [pc, #80]	@ (800224c <MX_USART2_UART_Init+0x58>)
 80021fa:	4a15      	ldr	r2, [pc, #84]	@ (8002250 <MX_USART2_UART_Init+0x5c>)
 80021fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021fe:	4b13      	ldr	r3, [pc, #76]	@ (800224c <MX_USART2_UART_Init+0x58>)
 8002200:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002204:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002206:	4b11      	ldr	r3, [pc, #68]	@ (800224c <MX_USART2_UART_Init+0x58>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800220c:	4b0f      	ldr	r3, [pc, #60]	@ (800224c <MX_USART2_UART_Init+0x58>)
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002212:	4b0e      	ldr	r3, [pc, #56]	@ (800224c <MX_USART2_UART_Init+0x58>)
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002218:	4b0c      	ldr	r3, [pc, #48]	@ (800224c <MX_USART2_UART_Init+0x58>)
 800221a:	220c      	movs	r2, #12
 800221c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800221e:	4b0b      	ldr	r3, [pc, #44]	@ (800224c <MX_USART2_UART_Init+0x58>)
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002224:	4b09      	ldr	r3, [pc, #36]	@ (800224c <MX_USART2_UART_Init+0x58>)
 8002226:	2200      	movs	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800222a:	4b08      	ldr	r3, [pc, #32]	@ (800224c <MX_USART2_UART_Init+0x58>)
 800222c:	2200      	movs	r2, #0
 800222e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002230:	4b06      	ldr	r3, [pc, #24]	@ (800224c <MX_USART2_UART_Init+0x58>)
 8002232:	2200      	movs	r2, #0
 8002234:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002236:	4805      	ldr	r0, [pc, #20]	@ (800224c <MX_USART2_UART_Init+0x58>)
 8002238:	f003 fc96 	bl	8005b68 <HAL_UART_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002242:	f7fe ffff 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000318 	.word	0x20000318
 8002250:	40004400 	.word	0x40004400

08002254 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b09e      	sub	sp, #120	@ 0x78
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800226c:	f107 0310 	add.w	r3, r7, #16
 8002270:	2254      	movs	r2, #84	@ 0x54
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f004 ff04 	bl	8007082 <memset>
  if(uartHandle->Instance==USART2)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a1f      	ldr	r2, [pc, #124]	@ (80022fc <HAL_UART_MspInit+0xa8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d136      	bne.n	80022f2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002284:	2302      	movs	r3, #2
 8002286:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002288:	2300      	movs	r3, #0
 800228a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800228c:	f107 0310 	add.w	r3, r7, #16
 8002290:	4618      	mov	r0, r3
 8002292:	f001 fb59 	bl	8003948 <HAL_RCCEx_PeriphCLKConfig>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800229c:	f7fe ffd2 	bl	8001244 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022a0:	4b17      	ldr	r3, [pc, #92]	@ (8002300 <HAL_UART_MspInit+0xac>)
 80022a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a4:	4a16      	ldr	r2, [pc, #88]	@ (8002300 <HAL_UART_MspInit+0xac>)
 80022a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80022ac:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <HAL_UART_MspInit+0xac>)
 80022ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b8:	4b11      	ldr	r3, [pc, #68]	@ (8002300 <HAL_UART_MspInit+0xac>)
 80022ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022bc:	4a10      	ldr	r2, [pc, #64]	@ (8002300 <HAL_UART_MspInit+0xac>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002300 <HAL_UART_MspInit+0xac>)
 80022c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022d0:	230c      	movs	r3, #12
 80022d2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022dc:	2303      	movs	r3, #3
 80022de:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022e0:	2307      	movs	r3, #7
 80022e2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80022e8:	4619      	mov	r1, r3
 80022ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ee:	f000 faad 	bl	800284c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022f2:	bf00      	nop
 80022f4:	3778      	adds	r7, #120	@ 0x78
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40004400 	.word	0x40004400
 8002300:	40021000 	.word	0x40021000

08002304 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002304:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800233c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002308:	f7ff fda8 	bl	8001e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800230c:	480c      	ldr	r0, [pc, #48]	@ (8002340 <LoopForever+0x6>)
  ldr r1, =_edata
 800230e:	490d      	ldr	r1, [pc, #52]	@ (8002344 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002310:	4a0d      	ldr	r2, [pc, #52]	@ (8002348 <LoopForever+0xe>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002314:	e002      	b.n	800231c <LoopCopyDataInit>

08002316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231a:	3304      	adds	r3, #4

0800231c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800231c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002320:	d3f9      	bcc.n	8002316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002322:	4a0a      	ldr	r2, [pc, #40]	@ (800234c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002324:	4c0a      	ldr	r4, [pc, #40]	@ (8002350 <LoopForever+0x16>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002328:	e001      	b.n	800232e <LoopFillZerobss>

0800232a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800232c:	3204      	adds	r2, #4

0800232e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002330:	d3fb      	bcc.n	800232a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002332:	f004 feff 	bl	8007134 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002336:	f7fe fee5 	bl	8001104 <main>

0800233a <LoopForever>:

LoopForever:
    b LoopForever
 800233a:	e7fe      	b.n	800233a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800233c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002344:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002348:	080096a0 	.word	0x080096a0
  ldr r2, =_sbss
 800234c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002350:	200004f0 	.word	0x200004f0

08002354 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002354:	e7fe      	b.n	8002354 <ADC1_IRQHandler>

08002356 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002360:	2003      	movs	r0, #3
 8002362:	f000 fa3f 	bl	80027e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002366:	2000      	movs	r0, #0
 8002368:	f000 f80e 	bl	8002388 <HAL_InitTick>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	71fb      	strb	r3, [r7, #7]
 8002376:	e001      	b.n	800237c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002378:	f7ff fbdc 	bl	8001b34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800237c:	79fb      	ldrb	r3, [r7, #7]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002394:	4b17      	ldr	r3, [pc, #92]	@ (80023f4 <HAL_InitTick+0x6c>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d023      	beq.n	80023e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800239c:	4b16      	ldr	r3, [pc, #88]	@ (80023f8 <HAL_InitTick+0x70>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b14      	ldr	r3, [pc, #80]	@ (80023f4 <HAL_InitTick+0x6c>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	4619      	mov	r1, r3
 80023a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fa3d 	bl	8002832 <HAL_SYSTICK_Config>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10f      	bne.n	80023de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b0f      	cmp	r3, #15
 80023c2:	d809      	bhi.n	80023d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c4:	2200      	movs	r2, #0
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f000 fa15 	bl	80027fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023d0:	4a0a      	ldr	r2, [pc, #40]	@ (80023fc <HAL_InitTick+0x74>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e007      	b.n	80023e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	e004      	b.n	80023e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	e001      	b.n	80023e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000008 	.word	0x20000008
 80023f8:	20000000 	.word	0x20000000
 80023fc:	20000004 	.word	0x20000004

08002400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002404:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <HAL_IncTick+0x20>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_IncTick+0x24>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4413      	add	r3, r2
 8002410:	4a04      	ldr	r2, [pc, #16]	@ (8002424 <HAL_IncTick+0x24>)
 8002412:	6013      	str	r3, [r2, #0]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000008 	.word	0x20000008
 8002424:	200003a0 	.word	0x200003a0

08002428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return uwTick;
 800242c:	4b03      	ldr	r3, [pc, #12]	@ (800243c <HAL_GetTick+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	200003a0 	.word	0x200003a0

08002440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002448:	f7ff ffee 	bl	8002428 <HAL_GetTick>
 800244c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002458:	d005      	beq.n	8002466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800245a:	4b0a      	ldr	r3, [pc, #40]	@ (8002484 <HAL_Delay+0x44>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4413      	add	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002466:	bf00      	nop
 8002468:	f7ff ffde 	bl	8002428 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	429a      	cmp	r2, r3
 8002476:	d8f7      	bhi.n	8002468 <HAL_Delay+0x28>
  {
  }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000008 	.word	0x20000008

08002488 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e0ed      	b.n	8002676 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d102      	bne.n	80024ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe fd2e 	bl	8000f08 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024bc:	f7ff ffb4 	bl	8002428 <HAL_GetTick>
 80024c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024c2:	e012      	b.n	80024ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024c4:	f7ff ffb0 	bl	8002428 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b0a      	cmp	r3, #10
 80024d0:	d90b      	bls.n	80024ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2205      	movs	r2, #5
 80024e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e0c5      	b.n	8002676 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0e5      	beq.n	80024c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0202 	bic.w	r2, r2, #2
 8002506:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002508:	f7ff ff8e 	bl	8002428 <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800250e:	e012      	b.n	8002536 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002510:	f7ff ff8a 	bl	8002428 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b0a      	cmp	r3, #10
 800251c:	d90b      	bls.n	8002536 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002522:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2205      	movs	r2, #5
 800252e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e09f      	b.n	8002676 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1e5      	bne.n	8002510 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	7e1b      	ldrb	r3, [r3, #24]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d108      	bne.n	800255e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	e007      	b.n	800256e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800256c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	7e5b      	ldrb	r3, [r3, #25]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d108      	bne.n	8002588 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	e007      	b.n	8002598 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002596:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	7e9b      	ldrb	r3, [r3, #26]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d108      	bne.n	80025b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0220 	orr.w	r2, r2, #32
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	e007      	b.n	80025c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0220 	bic.w	r2, r2, #32
 80025c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	7edb      	ldrb	r3, [r3, #27]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d108      	bne.n	80025dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0210 	bic.w	r2, r2, #16
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	e007      	b.n	80025ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0210 	orr.w	r2, r2, #16
 80025ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	7f1b      	ldrb	r3, [r3, #28]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d108      	bne.n	8002606 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0208 	orr.w	r2, r2, #8
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	e007      	b.n	8002616 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0208 	bic.w	r2, r2, #8
 8002614:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	7f5b      	ldrb	r3, [r3, #29]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d108      	bne.n	8002630 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f042 0204 	orr.w	r2, r2, #4
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	e007      	b.n	8002640 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0204 	bic.w	r2, r2, #4
 800263e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	ea42 0103 	orr.w	r1, r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	1e5a      	subs	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002690:	4b0c      	ldr	r3, [pc, #48]	@ (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800269c:	4013      	ands	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026b2:	4a04      	ldr	r2, [pc, #16]	@ (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	60d3      	str	r3, [r2, #12]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026cc:	4b04      	ldr	r3, [pc, #16]	@ (80026e0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	f003 0307 	and.w	r3, r3, #7
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	6039      	str	r1, [r7, #0]
 80026ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	db0a      	blt.n	800270e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	490c      	ldr	r1, [pc, #48]	@ (8002730 <__NVIC_SetPriority+0x4c>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	0112      	lsls	r2, r2, #4
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	440b      	add	r3, r1
 8002708:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800270c:	e00a      	b.n	8002724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	b2da      	uxtb	r2, r3
 8002712:	4908      	ldr	r1, [pc, #32]	@ (8002734 <__NVIC_SetPriority+0x50>)
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	3b04      	subs	r3, #4
 800271c:	0112      	lsls	r2, r2, #4
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	440b      	add	r3, r1
 8002722:	761a      	strb	r2, [r3, #24]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000e100 	.word	0xe000e100
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002738:	b480      	push	{r7}
 800273a:	b089      	sub	sp, #36	@ 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f1c3 0307 	rsb	r3, r3, #7
 8002752:	2b04      	cmp	r3, #4
 8002754:	bf28      	it	cs
 8002756:	2304      	movcs	r3, #4
 8002758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3304      	adds	r3, #4
 800275e:	2b06      	cmp	r3, #6
 8002760:	d902      	bls.n	8002768 <NVIC_EncodePriority+0x30>
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3b03      	subs	r3, #3
 8002766:	e000      	b.n	800276a <NVIC_EncodePriority+0x32>
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276c:	f04f 32ff 	mov.w	r2, #4294967295
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43da      	mvns	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	401a      	ands	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002780:	f04f 31ff 	mov.w	r1, #4294967295
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	fa01 f303 	lsl.w	r3, r1, r3
 800278a:	43d9      	mvns	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	4313      	orrs	r3, r2
         );
}
 8002792:	4618      	mov	r0, r3
 8002794:	3724      	adds	r7, #36	@ 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027b0:	d301      	bcc.n	80027b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027b2:	2301      	movs	r3, #1
 80027b4:	e00f      	b.n	80027d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b6:	4a0a      	ldr	r2, [pc, #40]	@ (80027e0 <SysTick_Config+0x40>)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027be:	210f      	movs	r1, #15
 80027c0:	f04f 30ff 	mov.w	r0, #4294967295
 80027c4:	f7ff ff8e 	bl	80026e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c8:	4b05      	ldr	r3, [pc, #20]	@ (80027e0 <SysTick_Config+0x40>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ce:	4b04      	ldr	r3, [pc, #16]	@ (80027e0 <SysTick_Config+0x40>)
 80027d0:	2207      	movs	r2, #7
 80027d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	e000e010 	.word	0xe000e010

080027e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff ff47 	bl	8002680 <__NVIC_SetPriorityGrouping>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800280c:	f7ff ff5c 	bl	80026c8 <__NVIC_GetPriorityGrouping>
 8002810:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	6978      	ldr	r0, [r7, #20]
 8002818:	f7ff ff8e 	bl	8002738 <NVIC_EncodePriority>
 800281c:	4602      	mov	r2, r0
 800281e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff5d 	bl	80026e4 <__NVIC_SetPriority>
}
 800282a:	bf00      	nop
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff ffb0 	bl	80027a0 <SysTick_Config>
 8002840:	4603      	mov	r3, r0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800285a:	e148      	b.n	8002aee <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	2101      	movs	r1, #1
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	fa01 f303 	lsl.w	r3, r1, r3
 8002868:	4013      	ands	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 813a 	beq.w	8002ae8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	2b01      	cmp	r3, #1
 800287e:	d005      	beq.n	800288c <HAL_GPIO_Init+0x40>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d130      	bne.n	80028ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	2203      	movs	r2, #3
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028c2:	2201      	movs	r2, #1
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4013      	ands	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	091b      	lsrs	r3, r3, #4
 80028d8:	f003 0201 	and.w	r2, r3, #1
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d017      	beq.n	800292a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	2203      	movs	r2, #3
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d123      	bne.n	800297e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	08da      	lsrs	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3208      	adds	r2, #8
 800293e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002942:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	220f      	movs	r2, #15
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	08da      	lsrs	r2, r3, #3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3208      	adds	r2, #8
 8002978:	6939      	ldr	r1, [r7, #16]
 800297a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	2203      	movs	r2, #3
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 0203 	and.w	r2, r3, #3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 8094 	beq.w	8002ae8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c0:	4b52      	ldr	r3, [pc, #328]	@ (8002b0c <HAL_GPIO_Init+0x2c0>)
 80029c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c4:	4a51      	ldr	r2, [pc, #324]	@ (8002b0c <HAL_GPIO_Init+0x2c0>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80029cc:	4b4f      	ldr	r3, [pc, #316]	@ (8002b0c <HAL_GPIO_Init+0x2c0>)
 80029ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029d8:	4a4d      	ldr	r2, [pc, #308]	@ (8002b10 <HAL_GPIO_Init+0x2c4>)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	089b      	lsrs	r3, r3, #2
 80029de:	3302      	adds	r3, #2
 80029e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	220f      	movs	r2, #15
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a02:	d00d      	beq.n	8002a20 <HAL_GPIO_Init+0x1d4>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a43      	ldr	r2, [pc, #268]	@ (8002b14 <HAL_GPIO_Init+0x2c8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d007      	beq.n	8002a1c <HAL_GPIO_Init+0x1d0>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a42      	ldr	r2, [pc, #264]	@ (8002b18 <HAL_GPIO_Init+0x2cc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d101      	bne.n	8002a18 <HAL_GPIO_Init+0x1cc>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e004      	b.n	8002a22 <HAL_GPIO_Init+0x1d6>
 8002a18:	2307      	movs	r3, #7
 8002a1a:	e002      	b.n	8002a22 <HAL_GPIO_Init+0x1d6>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <HAL_GPIO_Init+0x1d6>
 8002a20:	2300      	movs	r3, #0
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	f002 0203 	and.w	r2, r2, #3
 8002a28:	0092      	lsls	r2, r2, #2
 8002a2a:	4093      	lsls	r3, r2
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a32:	4937      	ldr	r1, [pc, #220]	@ (8002b10 <HAL_GPIO_Init+0x2c4>)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	089b      	lsrs	r3, r3, #2
 8002a38:	3302      	adds	r3, #2
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a40:	4b36      	ldr	r3, [pc, #216]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a64:	4a2d      	ldr	r2, [pc, #180]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a6a:	4b2c      	ldr	r3, [pc, #176]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a8e:	4a23      	ldr	r2, [pc, #140]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a94:	4b21      	ldr	r3, [pc, #132]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ab8:	4a18      	ldr	r2, [pc, #96]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002abe:	4b17      	ldr	r3, [pc, #92]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	3301      	adds	r3, #1
 8002aec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	fa22 f303 	lsr.w	r3, r2, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f47f aeaf 	bne.w	800285c <HAL_GPIO_Init+0x10>
  }
}
 8002afe:	bf00      	nop
 8002b00:	bf00      	nop
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40010000 	.word	0x40010000
 8002b14:	48000400 	.word	0x48000400
 8002b18:	48000800 	.word	0x48000800
 8002b1c:	40010400 	.word	0x40010400

08002b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	807b      	strh	r3, [r7, #2]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b30:	787b      	ldrb	r3, [r7, #1]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b36:	887a      	ldrh	r2, [r7, #2]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b3c:	e002      	b.n	8002b44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b54:	4b04      	ldr	r3, [pc, #16]	@ (8002b68 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40007000 	.word	0x40007000

08002b6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b7a:	d130      	bne.n	8002bde <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b7c:	4b23      	ldr	r3, [pc, #140]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b88:	d038      	beq.n	8002bfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b8a:	4b20      	ldr	r3, [pc, #128]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b92:	4a1e      	ldr	r2, [pc, #120]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2232      	movs	r2, #50	@ 0x32
 8002ba0:	fb02 f303 	mul.w	r3, r2, r3
 8002ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	0c9b      	lsrs	r3, r3, #18
 8002bac:	3301      	adds	r3, #1
 8002bae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bb0:	e002      	b.n	8002bb8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bb8:	4b14      	ldr	r3, [pc, #80]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bc4:	d102      	bne.n	8002bcc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f2      	bne.n	8002bb2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bd8:	d110      	bne.n	8002bfc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e00f      	b.n	8002bfe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bde:	4b0b      	ldr	r3, [pc, #44]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bea:	d007      	beq.n	8002bfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bec:	4b07      	ldr	r3, [pc, #28]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bf4:	4a05      	ldr	r2, [pc, #20]	@ (8002c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bfa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40007000 	.word	0x40007000
 8002c10:	20000000 	.word	0x20000000
 8002c14:	431bde83 	.word	0x431bde83

08002c18 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d102      	bne.n	8002c2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	f000 bc02 	b.w	8003430 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c2c:	4b96      	ldr	r3, [pc, #600]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 030c 	and.w	r3, r3, #12
 8002c34:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c36:	4b94      	ldr	r3, [pc, #592]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80e4 	beq.w	8002e16 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d007      	beq.n	8002c64 <HAL_RCC_OscConfig+0x4c>
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	f040 808b 	bne.w	8002d72 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	f040 8087 	bne.w	8002d72 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c64:	4b88      	ldr	r3, [pc, #544]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_OscConfig+0x64>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e3d9      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1a      	ldr	r2, [r3, #32]
 8002c80:	4b81      	ldr	r3, [pc, #516]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d004      	beq.n	8002c96 <HAL_RCC_OscConfig+0x7e>
 8002c8c:	4b7e      	ldr	r3, [pc, #504]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c94:	e005      	b.n	8002ca2 <HAL_RCC_OscConfig+0x8a>
 8002c96:	4b7c      	ldr	r3, [pc, #496]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d223      	bcs.n	8002cee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 fdec 	bl	8003888 <RCC_SetFlashLatencyFromMSIRange>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e3ba      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cba:	4b73      	ldr	r3, [pc, #460]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a72      	ldr	r2, [pc, #456]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002cc0:	f043 0308 	orr.w	r3, r3, #8
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	4b70      	ldr	r3, [pc, #448]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	496d      	ldr	r1, [pc, #436]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cd8:	4b6b      	ldr	r3, [pc, #428]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	4968      	ldr	r1, [pc, #416]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	604b      	str	r3, [r1, #4]
 8002cec:	e025      	b.n	8002d3a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cee:	4b66      	ldr	r3, [pc, #408]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a65      	ldr	r2, [pc, #404]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002cf4:	f043 0308 	orr.w	r3, r3, #8
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	4b63      	ldr	r3, [pc, #396]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	4960      	ldr	r1, [pc, #384]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d0c:	4b5e      	ldr	r3, [pc, #376]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	021b      	lsls	r3, r3, #8
 8002d1a:	495b      	ldr	r1, [pc, #364]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fdac 	bl	8003888 <RCC_SetFlashLatencyFromMSIRange>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e37a      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d3a:	f000 fcb5 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	4b51      	ldr	r3, [pc, #324]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	4950      	ldr	r1, [pc, #320]	@ (8002e8c <HAL_RCC_OscConfig+0x274>)
 8002d4c:	5ccb      	ldrb	r3, [r1, r3]
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	fa22 f303 	lsr.w	r3, r2, r3
 8002d56:	4a4e      	ldr	r2, [pc, #312]	@ (8002e90 <HAL_RCC_OscConfig+0x278>)
 8002d58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d5a:	4b4e      	ldr	r3, [pc, #312]	@ (8002e94 <HAL_RCC_OscConfig+0x27c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fb12 	bl	8002388 <HAL_InitTick>
 8002d64:	4603      	mov	r3, r0
 8002d66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d052      	beq.n	8002e14 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	e35e      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d032      	beq.n	8002de0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d7a:	4b43      	ldr	r3, [pc, #268]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a42      	ldr	r2, [pc, #264]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d86:	f7ff fb4f 	bl	8002428 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d8e:	f7ff fb4b 	bl	8002428 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e347      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002da0:	4b39      	ldr	r3, [pc, #228]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dac:	4b36      	ldr	r3, [pc, #216]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a35      	ldr	r2, [pc, #212]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002db2:	f043 0308 	orr.w	r3, r3, #8
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	4b33      	ldr	r3, [pc, #204]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	4930      	ldr	r1, [pc, #192]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dca:	4b2f      	ldr	r3, [pc, #188]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	492b      	ldr	r1, [pc, #172]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	604b      	str	r3, [r1, #4]
 8002dde:	e01a      	b.n	8002e16 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002de0:	4b29      	ldr	r3, [pc, #164]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a28      	ldr	r2, [pc, #160]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002de6:	f023 0301 	bic.w	r3, r3, #1
 8002dea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dec:	f7ff fb1c 	bl	8002428 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002df4:	f7ff fb18 	bl	8002428 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e314      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e06:	4b20      	ldr	r3, [pc, #128]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x1dc>
 8002e12:	e000      	b.n	8002e16 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d073      	beq.n	8002f0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d005      	beq.n	8002e34 <HAL_RCC_OscConfig+0x21c>
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	2b0c      	cmp	r3, #12
 8002e2c:	d10e      	bne.n	8002e4c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d10b      	bne.n	8002e4c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e34:	4b14      	ldr	r3, [pc, #80]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d063      	beq.n	8002f08 <HAL_RCC_OscConfig+0x2f0>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d15f      	bne.n	8002f08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e2f1      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e54:	d106      	bne.n	8002e64 <HAL_RCC_OscConfig+0x24c>
 8002e56:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a0b      	ldr	r2, [pc, #44]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e025      	b.n	8002eb0 <HAL_RCC_OscConfig+0x298>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e6c:	d114      	bne.n	8002e98 <HAL_RCC_OscConfig+0x280>
 8002e6e:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a05      	ldr	r2, [pc, #20]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002e74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	4b03      	ldr	r3, [pc, #12]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a02      	ldr	r2, [pc, #8]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002e80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	e013      	b.n	8002eb0 <HAL_RCC_OscConfig+0x298>
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	080092d4 	.word	0x080092d4
 8002e90:	20000000 	.word	0x20000000
 8002e94:	20000004 	.word	0x20000004
 8002e98:	4ba0      	ldr	r3, [pc, #640]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a9f      	ldr	r2, [pc, #636]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8002e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	4b9d      	ldr	r3, [pc, #628]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a9c      	ldr	r2, [pc, #624]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8002eaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d013      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7ff fab6 	bl	8002428 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec0:	f7ff fab2 	bl	8002428 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	@ 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e2ae      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ed2:	4b92      	ldr	r3, [pc, #584]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x2a8>
 8002ede:	e014      	b.n	8002f0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7ff faa2 	bl	8002428 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee8:	f7ff fa9e 	bl	8002428 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	@ 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e29a      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002efa:	4b88      	ldr	r3, [pc, #544]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x2d0>
 8002f06:	e000      	b.n	8002f0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d060      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d005      	beq.n	8002f28 <HAL_RCC_OscConfig+0x310>
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	2b0c      	cmp	r3, #12
 8002f20:	d119      	bne.n	8002f56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d116      	bne.n	8002f56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f28:	4b7c      	ldr	r3, [pc, #496]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_OscConfig+0x328>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e277      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f40:	4b76      	ldr	r3, [pc, #472]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	061b      	lsls	r3, r3, #24
 8002f4e:	4973      	ldr	r1, [pc, #460]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f54:	e040      	b.n	8002fd8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d023      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f5e:	4b6f      	ldr	r3, [pc, #444]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a6e      	ldr	r2, [pc, #440]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8002f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6a:	f7ff fa5d 	bl	8002428 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f72:	f7ff fa59 	bl	8002428 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e255      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f84:	4b65      	ldr	r3, [pc, #404]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f90:	4b62      	ldr	r3, [pc, #392]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	061b      	lsls	r3, r3, #24
 8002f9e:	495f      	ldr	r1, [pc, #380]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	604b      	str	r3, [r1, #4]
 8002fa4:	e018      	b.n	8002fd8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa6:	4b5d      	ldr	r3, [pc, #372]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a5c      	ldr	r2, [pc, #368]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8002fac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb2:	f7ff fa39 	bl	8002428 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fba:	f7ff fa35 	bl	8002428 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e231      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fcc:	4b53      	ldr	r3, [pc, #332]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f0      	bne.n	8002fba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d03c      	beq.n	800305e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01c      	beq.n	8003026 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fec:	4b4b      	ldr	r3, [pc, #300]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8002fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ff2:	4a4a      	ldr	r2, [pc, #296]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffc:	f7ff fa14 	bl	8002428 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003004:	f7ff fa10 	bl	8002428 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e20c      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003016:	4b41      	ldr	r3, [pc, #260]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8003018:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0ef      	beq.n	8003004 <HAL_RCC_OscConfig+0x3ec>
 8003024:	e01b      	b.n	800305e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003026:	4b3d      	ldr	r3, [pc, #244]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8003028:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800302c:	4a3b      	ldr	r2, [pc, #236]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 800302e:	f023 0301 	bic.w	r3, r3, #1
 8003032:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003036:	f7ff f9f7 	bl	8002428 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800303e:	f7ff f9f3 	bl	8002428 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e1ef      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003050:	4b32      	ldr	r3, [pc, #200]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8003052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1ef      	bne.n	800303e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80a6 	beq.w	80031b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306c:	2300      	movs	r3, #0
 800306e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003070:	4b2a      	ldr	r3, [pc, #168]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10d      	bne.n	8003098 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800307c:	4b27      	ldr	r3, [pc, #156]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 800307e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003080:	4a26      	ldr	r2, [pc, #152]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8003082:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003086:	6593      	str	r3, [r2, #88]	@ 0x58
 8003088:	4b24      	ldr	r3, [pc, #144]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 800308a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003094:	2301      	movs	r3, #1
 8003096:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003098:	4b21      	ldr	r3, [pc, #132]	@ (8003120 <HAL_RCC_OscConfig+0x508>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d118      	bne.n	80030d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003120 <HAL_RCC_OscConfig+0x508>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003120 <HAL_RCC_OscConfig+0x508>)
 80030aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b0:	f7ff f9ba 	bl	8002428 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b8:	f7ff f9b6 	bl	8002428 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e1b2      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ca:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <HAL_RCC_OscConfig+0x508>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d108      	bne.n	80030f0 <HAL_RCC_OscConfig+0x4d8>
 80030de:	4b0f      	ldr	r3, [pc, #60]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e4:	4a0d      	ldr	r2, [pc, #52]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030ee:	e029      	b.n	8003144 <HAL_RCC_OscConfig+0x52c>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b05      	cmp	r3, #5
 80030f6:	d115      	bne.n	8003124 <HAL_RCC_OscConfig+0x50c>
 80030f8:	4b08      	ldr	r3, [pc, #32]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030fe:	4a07      	ldr	r2, [pc, #28]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8003100:	f043 0304 	orr.w	r3, r3, #4
 8003104:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003108:	4b04      	ldr	r3, [pc, #16]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800310e:	4a03      	ldr	r2, [pc, #12]	@ (800311c <HAL_RCC_OscConfig+0x504>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003118:	e014      	b.n	8003144 <HAL_RCC_OscConfig+0x52c>
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000
 8003120:	40007000 	.word	0x40007000
 8003124:	4b9a      	ldr	r3, [pc, #616]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312a:	4a99      	ldr	r2, [pc, #612]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 800312c:	f023 0301 	bic.w	r3, r3, #1
 8003130:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003134:	4b96      	ldr	r3, [pc, #600]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313a:	4a95      	ldr	r2, [pc, #596]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 800313c:	f023 0304 	bic.w	r3, r3, #4
 8003140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d016      	beq.n	800317a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314c:	f7ff f96c 	bl	8002428 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003152:	e00a      	b.n	800316a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003154:	f7ff f968 	bl	8002428 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e162      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800316a:	4b89      	ldr	r3, [pc, #548]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 800316c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0ed      	beq.n	8003154 <HAL_RCC_OscConfig+0x53c>
 8003178:	e015      	b.n	80031a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317a:	f7ff f955 	bl	8002428 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003180:	e00a      	b.n	8003198 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003182:	f7ff f951 	bl	8002428 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003190:	4293      	cmp	r3, r2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e14b      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003198:	4b7d      	ldr	r3, [pc, #500]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 800319a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1ed      	bne.n	8003182 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031a6:	7ffb      	ldrb	r3, [r7, #31]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d105      	bne.n	80031b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ac:	4b78      	ldr	r3, [pc, #480]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 80031ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b0:	4a77      	ldr	r2, [pc, #476]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 80031b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031b6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d03c      	beq.n	800323e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d01c      	beq.n	8003206 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031cc:	4b70      	ldr	r3, [pc, #448]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 80031ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031d2:	4a6f      	ldr	r2, [pc, #444]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031dc:	f7ff f924 	bl	8002428 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031e4:	f7ff f920 	bl	8002428 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e11c      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031f6:	4b66      	ldr	r3, [pc, #408]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 80031f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0ef      	beq.n	80031e4 <HAL_RCC_OscConfig+0x5cc>
 8003204:	e01b      	b.n	800323e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003206:	4b62      	ldr	r3, [pc, #392]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 8003208:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800320c:	4a60      	ldr	r2, [pc, #384]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 800320e:	f023 0301 	bic.w	r3, r3, #1
 8003212:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003216:	f7ff f907 	bl	8002428 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800321e:	f7ff f903 	bl	8002428 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e0ff      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003230:	4b57      	ldr	r3, [pc, #348]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 8003232:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1ef      	bne.n	800321e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 80f3 	beq.w	800342e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324c:	2b02      	cmp	r3, #2
 800324e:	f040 80c9 	bne.w	80033e4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003252:	4b4f      	ldr	r3, [pc, #316]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f003 0203 	and.w	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003262:	429a      	cmp	r2, r3
 8003264:	d12c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003270:	3b01      	subs	r3, #1
 8003272:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d123      	bne.n	80032c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003282:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003284:	429a      	cmp	r2, r3
 8003286:	d11b      	bne.n	80032c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003292:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003294:	429a      	cmp	r2, r3
 8003296:	d113      	bne.n	80032c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	3b01      	subs	r3, #1
 80032a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d109      	bne.n	80032c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b6:	085b      	lsrs	r3, r3, #1
 80032b8:	3b01      	subs	r3, #1
 80032ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032bc:	429a      	cmp	r2, r3
 80032be:	d06b      	beq.n	8003398 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2b0c      	cmp	r3, #12
 80032c4:	d062      	beq.n	800338c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032c6:	4b32      	ldr	r3, [pc, #200]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e0ac      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032d6:	4b2e      	ldr	r3, [pc, #184]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a2d      	ldr	r2, [pc, #180]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 80032dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032e2:	f7ff f8a1 	bl	8002428 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ea:	f7ff f89d 	bl	8002428 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e099      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032fc:	4b24      	ldr	r3, [pc, #144]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1f0      	bne.n	80032ea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003308:	4b21      	ldr	r3, [pc, #132]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	4b21      	ldr	r3, [pc, #132]	@ (8003394 <HAL_RCC_OscConfig+0x77c>)
 800330e:	4013      	ands	r3, r2
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003318:	3a01      	subs	r2, #1
 800331a:	0112      	lsls	r2, r2, #4
 800331c:	4311      	orrs	r1, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003322:	0212      	lsls	r2, r2, #8
 8003324:	4311      	orrs	r1, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800332a:	0852      	lsrs	r2, r2, #1
 800332c:	3a01      	subs	r2, #1
 800332e:	0552      	lsls	r2, r2, #21
 8003330:	4311      	orrs	r1, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003336:	0852      	lsrs	r2, r2, #1
 8003338:	3a01      	subs	r2, #1
 800333a:	0652      	lsls	r2, r2, #25
 800333c:	4311      	orrs	r1, r2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003342:	06d2      	lsls	r2, r2, #27
 8003344:	430a      	orrs	r2, r1
 8003346:	4912      	ldr	r1, [pc, #72]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 8003348:	4313      	orrs	r3, r2
 800334a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800334c:	4b10      	ldr	r3, [pc, #64]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0f      	ldr	r2, [pc, #60]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 8003352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003356:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003358:	4b0d      	ldr	r3, [pc, #52]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4a0c      	ldr	r2, [pc, #48]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 800335e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003362:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003364:	f7ff f860 	bl	8002428 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336c:	f7ff f85c 	bl	8002428 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e058      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800337e:	4b04      	ldr	r3, [pc, #16]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800338a:	e050      	b.n	800342e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e04f      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
 8003390:	40021000 	.word	0x40021000
 8003394:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003398:	4b27      	ldr	r3, [pc, #156]	@ (8003438 <HAL_RCC_OscConfig+0x820>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d144      	bne.n	800342e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033a4:	4b24      	ldr	r3, [pc, #144]	@ (8003438 <HAL_RCC_OscConfig+0x820>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a23      	ldr	r2, [pc, #140]	@ (8003438 <HAL_RCC_OscConfig+0x820>)
 80033aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033b0:	4b21      	ldr	r3, [pc, #132]	@ (8003438 <HAL_RCC_OscConfig+0x820>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4a20      	ldr	r2, [pc, #128]	@ (8003438 <HAL_RCC_OscConfig+0x820>)
 80033b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033bc:	f7ff f834 	bl	8002428 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c4:	f7ff f830 	bl	8002428 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e02c      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d6:	4b18      	ldr	r3, [pc, #96]	@ (8003438 <HAL_RCC_OscConfig+0x820>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x7ac>
 80033e2:	e024      	b.n	800342e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2b0c      	cmp	r3, #12
 80033e8:	d01f      	beq.n	800342a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ea:	4b13      	ldr	r3, [pc, #76]	@ (8003438 <HAL_RCC_OscConfig+0x820>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a12      	ldr	r2, [pc, #72]	@ (8003438 <HAL_RCC_OscConfig+0x820>)
 80033f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f6:	f7ff f817 	bl	8002428 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fe:	f7ff f813 	bl	8002428 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e00f      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003410:	4b09      	ldr	r3, [pc, #36]	@ (8003438 <HAL_RCC_OscConfig+0x820>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1f0      	bne.n	80033fe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800341c:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <HAL_RCC_OscConfig+0x820>)
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	4905      	ldr	r1, [pc, #20]	@ (8003438 <HAL_RCC_OscConfig+0x820>)
 8003422:	4b06      	ldr	r3, [pc, #24]	@ (800343c <HAL_RCC_OscConfig+0x824>)
 8003424:	4013      	ands	r3, r2
 8003426:	60cb      	str	r3, [r1, #12]
 8003428:	e001      	b.n	800342e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3720      	adds	r7, #32
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40021000 	.word	0x40021000
 800343c:	feeefffc 	.word	0xfeeefffc

08003440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0e7      	b.n	8003624 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003454:	4b75      	ldr	r3, [pc, #468]	@ (800362c <HAL_RCC_ClockConfig+0x1ec>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d910      	bls.n	8003484 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003462:	4b72      	ldr	r3, [pc, #456]	@ (800362c <HAL_RCC_ClockConfig+0x1ec>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 0207 	bic.w	r2, r3, #7
 800346a:	4970      	ldr	r1, [pc, #448]	@ (800362c <HAL_RCC_ClockConfig+0x1ec>)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	4313      	orrs	r3, r2
 8003470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	4b6e      	ldr	r3, [pc, #440]	@ (800362c <HAL_RCC_ClockConfig+0x1ec>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0cf      	b.n	8003624 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d010      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	4b66      	ldr	r3, [pc, #408]	@ (8003630 <HAL_RCC_ClockConfig+0x1f0>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800349c:	429a      	cmp	r2, r3
 800349e:	d908      	bls.n	80034b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a0:	4b63      	ldr	r3, [pc, #396]	@ (8003630 <HAL_RCC_ClockConfig+0x1f0>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	4960      	ldr	r1, [pc, #384]	@ (8003630 <HAL_RCC_ClockConfig+0x1f0>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d04c      	beq.n	8003558 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c6:	4b5a      	ldr	r3, [pc, #360]	@ (8003630 <HAL_RCC_ClockConfig+0x1f0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d121      	bne.n	8003516 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e0a6      	b.n	8003624 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d107      	bne.n	80034ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034de:	4b54      	ldr	r3, [pc, #336]	@ (8003630 <HAL_RCC_ClockConfig+0x1f0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d115      	bne.n	8003516 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e09a      	b.n	8003624 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d107      	bne.n	8003506 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034f6:	4b4e      	ldr	r3, [pc, #312]	@ (8003630 <HAL_RCC_ClockConfig+0x1f0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d109      	bne.n	8003516 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e08e      	b.n	8003624 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003506:	4b4a      	ldr	r3, [pc, #296]	@ (8003630 <HAL_RCC_ClockConfig+0x1f0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e086      	b.n	8003624 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003516:	4b46      	ldr	r3, [pc, #280]	@ (8003630 <HAL_RCC_ClockConfig+0x1f0>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f023 0203 	bic.w	r2, r3, #3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	4943      	ldr	r1, [pc, #268]	@ (8003630 <HAL_RCC_ClockConfig+0x1f0>)
 8003524:	4313      	orrs	r3, r2
 8003526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003528:	f7fe ff7e 	bl	8002428 <HAL_GetTick>
 800352c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352e:	e00a      	b.n	8003546 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003530:	f7fe ff7a 	bl	8002428 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e06e      	b.n	8003624 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003546:	4b3a      	ldr	r3, [pc, #232]	@ (8003630 <HAL_RCC_ClockConfig+0x1f0>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 020c 	and.w	r2, r3, #12
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	429a      	cmp	r2, r3
 8003556:	d1eb      	bne.n	8003530 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d010      	beq.n	8003586 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	4b31      	ldr	r3, [pc, #196]	@ (8003630 <HAL_RCC_ClockConfig+0x1f0>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003570:	429a      	cmp	r2, r3
 8003572:	d208      	bcs.n	8003586 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003574:	4b2e      	ldr	r3, [pc, #184]	@ (8003630 <HAL_RCC_ClockConfig+0x1f0>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	492b      	ldr	r1, [pc, #172]	@ (8003630 <HAL_RCC_ClockConfig+0x1f0>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003586:	4b29      	ldr	r3, [pc, #164]	@ (800362c <HAL_RCC_ClockConfig+0x1ec>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d210      	bcs.n	80035b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003594:	4b25      	ldr	r3, [pc, #148]	@ (800362c <HAL_RCC_ClockConfig+0x1ec>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f023 0207 	bic.w	r2, r3, #7
 800359c:	4923      	ldr	r1, [pc, #140]	@ (800362c <HAL_RCC_ClockConfig+0x1ec>)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a4:	4b21      	ldr	r3, [pc, #132]	@ (800362c <HAL_RCC_ClockConfig+0x1ec>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d001      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e036      	b.n	8003624 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003630 <HAL_RCC_ClockConfig+0x1f0>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	4918      	ldr	r1, [pc, #96]	@ (8003630 <HAL_RCC_ClockConfig+0x1f0>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d009      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035e0:	4b13      	ldr	r3, [pc, #76]	@ (8003630 <HAL_RCC_ClockConfig+0x1f0>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	4910      	ldr	r1, [pc, #64]	@ (8003630 <HAL_RCC_ClockConfig+0x1f0>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035f4:	f000 f858 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003630 <HAL_RCC_ClockConfig+0x1f0>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	091b      	lsrs	r3, r3, #4
 8003600:	f003 030f 	and.w	r3, r3, #15
 8003604:	490b      	ldr	r1, [pc, #44]	@ (8003634 <HAL_RCC_ClockConfig+0x1f4>)
 8003606:	5ccb      	ldrb	r3, [r1, r3]
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
 8003610:	4a09      	ldr	r2, [pc, #36]	@ (8003638 <HAL_RCC_ClockConfig+0x1f8>)
 8003612:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003614:	4b09      	ldr	r3, [pc, #36]	@ (800363c <HAL_RCC_ClockConfig+0x1fc>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f7fe feb5 	bl	8002388 <HAL_InitTick>
 800361e:	4603      	mov	r3, r0
 8003620:	72fb      	strb	r3, [r7, #11]

  return status;
 8003622:	7afb      	ldrb	r3, [r7, #11]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40022000 	.word	0x40022000
 8003630:	40021000 	.word	0x40021000
 8003634:	080092d4 	.word	0x080092d4
 8003638:	20000000 	.word	0x20000000
 800363c:	20000004 	.word	0x20000004

08003640 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08a      	sub	sp, #40	@ 0x28
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 800364c:	4b15      	ldr	r3, [pc, #84]	@ (80036a4 <HAL_RCC_MCOConfig+0x64>)
 800364e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003650:	4a14      	ldr	r2, [pc, #80]	@ (80036a4 <HAL_RCC_MCOConfig+0x64>)
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003658:	4b12      	ldr	r3, [pc, #72]	@ (80036a4 <HAL_RCC_MCOConfig+0x64>)
 800365a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8003664:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366a:	2302      	movs	r3, #2
 800366c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800366e:	2302      	movs	r3, #2
 8003670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003676:	2300      	movs	r3, #0
 8003678:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800367a:	f107 0314 	add.w	r3, r7, #20
 800367e:	4619      	mov	r1, r3
 8003680:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003684:	f7ff f8e2 	bl	800284c <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8003688:	4b06      	ldr	r3, [pc, #24]	@ (80036a4 <HAL_RCC_MCOConfig+0x64>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	430b      	orrs	r3, r1
 8003696:	4903      	ldr	r1, [pc, #12]	@ (80036a4 <HAL_RCC_MCOConfig+0x64>)
 8003698:	4313      	orrs	r3, r2
 800369a:	608b      	str	r3, [r1, #8]
}
 800369c:	bf00      	nop
 800369e:	3728      	adds	r7, #40	@ 0x28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40021000 	.word	0x40021000

080036a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b089      	sub	sp, #36	@ 0x24
 80036ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	2300      	movs	r3, #0
 80036b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036b6:	4b3e      	ldr	r3, [pc, #248]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036c0:	4b3b      	ldr	r3, [pc, #236]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0303 	and.w	r3, r3, #3
 80036c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x34>
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	2b0c      	cmp	r3, #12
 80036d4:	d121      	bne.n	800371a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d11e      	bne.n	800371a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036dc:	4b34      	ldr	r3, [pc, #208]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d107      	bne.n	80036f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036e8:	4b31      	ldr	r3, [pc, #196]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ee:	0a1b      	lsrs	r3, r3, #8
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	61fb      	str	r3, [r7, #28]
 80036f6:	e005      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036f8:	4b2d      	ldr	r3, [pc, #180]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003704:	4a2b      	ldr	r2, [pc, #172]	@ (80037b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800370c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10d      	bne.n	8003730 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003718:	e00a      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b04      	cmp	r3, #4
 800371e:	d102      	bne.n	8003726 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003720:	4b25      	ldr	r3, [pc, #148]	@ (80037b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003722:	61bb      	str	r3, [r7, #24]
 8003724:	e004      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b08      	cmp	r3, #8
 800372a:	d101      	bne.n	8003730 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800372c:	4b23      	ldr	r3, [pc, #140]	@ (80037bc <HAL_RCC_GetSysClockFreq+0x114>)
 800372e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	2b0c      	cmp	r3, #12
 8003734:	d134      	bne.n	80037a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003736:	4b1e      	ldr	r3, [pc, #120]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d003      	beq.n	800374e <HAL_RCC_GetSysClockFreq+0xa6>
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b03      	cmp	r3, #3
 800374a:	d003      	beq.n	8003754 <HAL_RCC_GetSysClockFreq+0xac>
 800374c:	e005      	b.n	800375a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800374e:	4b1a      	ldr	r3, [pc, #104]	@ (80037b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003750:	617b      	str	r3, [r7, #20]
      break;
 8003752:	e005      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003754:	4b19      	ldr	r3, [pc, #100]	@ (80037bc <HAL_RCC_GetSysClockFreq+0x114>)
 8003756:	617b      	str	r3, [r7, #20]
      break;
 8003758:	e002      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	617b      	str	r3, [r7, #20]
      break;
 800375e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003760:	4b13      	ldr	r3, [pc, #76]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	091b      	lsrs	r3, r3, #4
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	3301      	adds	r3, #1
 800376c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800376e:	4b10      	ldr	r3, [pc, #64]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	0a1b      	lsrs	r3, r3, #8
 8003774:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	fb03 f202 	mul.w	r2, r3, r2
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	fbb2 f3f3 	udiv	r3, r2, r3
 8003784:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003786:	4b0a      	ldr	r3, [pc, #40]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	0e5b      	lsrs	r3, r3, #25
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	3301      	adds	r3, #1
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	fbb2 f3f3 	udiv	r3, r2, r3
 800379e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037a0:	69bb      	ldr	r3, [r7, #24]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3724      	adds	r7, #36	@ 0x24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40021000 	.word	0x40021000
 80037b4:	080092ec 	.word	0x080092ec
 80037b8:	00f42400 	.word	0x00f42400
 80037bc:	007a1200 	.word	0x007a1200

080037c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037c4:	4b03      	ldr	r3, [pc, #12]	@ (80037d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037c6:	681b      	ldr	r3, [r3, #0]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20000000 	.word	0x20000000

080037d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037dc:	f7ff fff0 	bl	80037c0 <HAL_RCC_GetHCLKFreq>
 80037e0:	4602      	mov	r2, r0
 80037e2:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	0a1b      	lsrs	r3, r3, #8
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	4904      	ldr	r1, [pc, #16]	@ (8003800 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037ee:	5ccb      	ldrb	r3, [r1, r3]
 80037f0:	f003 031f 	and.w	r3, r3, #31
 80037f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40021000 	.word	0x40021000
 8003800:	080092e4 	.word	0x080092e4

08003804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003808:	f7ff ffda 	bl	80037c0 <HAL_RCC_GetHCLKFreq>
 800380c:	4602      	mov	r2, r0
 800380e:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	0adb      	lsrs	r3, r3, #11
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	4904      	ldr	r1, [pc, #16]	@ (800382c <HAL_RCC_GetPCLK2Freq+0x28>)
 800381a:	5ccb      	ldrb	r3, [r1, r3]
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003824:	4618      	mov	r0, r3
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40021000 	.word	0x40021000
 800382c:	080092e4 	.word	0x080092e4

08003830 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003834:	4b05      	ldr	r3, [pc, #20]	@ (800384c <HAL_RCC_EnableCSS+0x1c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a04      	ldr	r2, [pc, #16]	@ (800384c <HAL_RCC_EnableCSS+0x1c>)
 800383a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800383e:	6013      	str	r3, [r2, #0]
}
 8003840:	bf00      	nop
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000

08003850 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003854:	4b07      	ldr	r3, [pc, #28]	@ (8003874 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003860:	d105      	bne.n	800386e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003862:	f000 f809 	bl	8003878 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003866:	4b03      	ldr	r3, [pc, #12]	@ (8003874 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003868:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800386c:	621a      	str	r2, [r3, #32]
  }
}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000

08003878 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
	...

08003888 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003890:	2300      	movs	r3, #0
 8003892:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003894:	4b2a      	ldr	r3, [pc, #168]	@ (8003940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038a0:	f7ff f956 	bl	8002b50 <HAL_PWREx_GetVoltageRange>
 80038a4:	6178      	str	r0, [r7, #20]
 80038a6:	e014      	b.n	80038d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038a8:	4b25      	ldr	r3, [pc, #148]	@ (8003940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ac:	4a24      	ldr	r2, [pc, #144]	@ (8003940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80038b4:	4b22      	ldr	r3, [pc, #136]	@ (8003940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038c0:	f7ff f946 	bl	8002b50 <HAL_PWREx_GetVoltageRange>
 80038c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038d8:	d10b      	bne.n	80038f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b80      	cmp	r3, #128	@ 0x80
 80038de:	d919      	bls.n	8003914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80038e4:	d902      	bls.n	80038ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038e6:	2302      	movs	r3, #2
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	e013      	b.n	8003914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038ec:	2301      	movs	r3, #1
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	e010      	b.n	8003914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b80      	cmp	r3, #128	@ 0x80
 80038f6:	d902      	bls.n	80038fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038f8:	2303      	movs	r3, #3
 80038fa:	613b      	str	r3, [r7, #16]
 80038fc:	e00a      	b.n	8003914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b80      	cmp	r3, #128	@ 0x80
 8003902:	d102      	bne.n	800390a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003904:	2302      	movs	r3, #2
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	e004      	b.n	8003914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b70      	cmp	r3, #112	@ 0x70
 800390e:	d101      	bne.n	8003914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003910:	2301      	movs	r3, #1
 8003912:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003914:	4b0b      	ldr	r3, [pc, #44]	@ (8003944 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f023 0207 	bic.w	r2, r3, #7
 800391c:	4909      	ldr	r1, [pc, #36]	@ (8003944 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003924:	4b07      	ldr	r3, [pc, #28]	@ (8003944 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	429a      	cmp	r2, r3
 8003930:	d001      	beq.n	8003936 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021000 	.word	0x40021000
 8003944:	40022000 	.word	0x40022000

08003948 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003950:	2300      	movs	r3, #0
 8003952:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003954:	2300      	movs	r3, #0
 8003956:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003960:	2b00      	cmp	r3, #0
 8003962:	d031      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003968:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800396c:	d01a      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800396e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003972:	d814      	bhi.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003974:	2b00      	cmp	r3, #0
 8003976:	d009      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003978:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800397c:	d10f      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800397e:	4b5d      	ldr	r3, [pc, #372]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	4a5c      	ldr	r2, [pc, #368]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003988:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800398a:	e00c      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3304      	adds	r3, #4
 8003990:	2100      	movs	r1, #0
 8003992:	4618      	mov	r0, r3
 8003994:	f000 f9ce 	bl	8003d34 <RCCEx_PLLSAI1_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800399c:	e003      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	74fb      	strb	r3, [r7, #19]
      break;
 80039a2:	e000      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80039a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039a6:	7cfb      	ldrb	r3, [r7, #19]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10b      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039ac:	4b51      	ldr	r3, [pc, #324]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ba:	494e      	ldr	r1, [pc, #312]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80039c2:	e001      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c4:	7cfb      	ldrb	r3, [r7, #19]
 80039c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 809e 	beq.w	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039d6:	2300      	movs	r3, #0
 80039d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039da:	4b46      	ldr	r3, [pc, #280]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80039ea:	2300      	movs	r3, #0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00d      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f0:	4b40      	ldr	r3, [pc, #256]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f4:	4a3f      	ldr	r2, [pc, #252]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80039fc:	4b3d      	ldr	r3, [pc, #244]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a39      	ldr	r2, [pc, #228]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a18:	f7fe fd06 	bl	8002428 <HAL_GetTick>
 8003a1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a1e:	e009      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a20:	f7fe fd02 	bl	8002428 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d902      	bls.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	74fb      	strb	r3, [r7, #19]
        break;
 8003a32:	e005      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a34:	4b30      	ldr	r3, [pc, #192]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0ef      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003a40:	7cfb      	ldrb	r3, [r7, #19]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d15a      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a46:	4b2b      	ldr	r3, [pc, #172]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01e      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d019      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a62:	4b24      	ldr	r3, [pc, #144]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a6c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a6e:	4b21      	ldr	r3, [pc, #132]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a74:	4a1f      	ldr	r2, [pc, #124]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a84:	4a1b      	ldr	r2, [pc, #108]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a8e:	4a19      	ldr	r2, [pc, #100]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d016      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fe fcc2 	bl	8002428 <HAL_GetTick>
 8003aa4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aa6:	e00b      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa8:	f7fe fcbe 	bl	8002428 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d902      	bls.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	74fb      	strb	r3, [r7, #19]
            break;
 8003abe:	e006      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0ec      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003ace:	7cfb      	ldrb	r3, [r7, #19]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10b      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ad4:	4b07      	ldr	r3, [pc, #28]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ada:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae2:	4904      	ldr	r1, [pc, #16]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003aea:	e009      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003aec:	7cfb      	ldrb	r3, [r7, #19]
 8003aee:	74bb      	strb	r3, [r7, #18]
 8003af0:	e006      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003afc:	7cfb      	ldrb	r3, [r7, #19]
 8003afe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b00:	7c7b      	ldrb	r3, [r7, #17]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d105      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b06:	4b8a      	ldr	r3, [pc, #552]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0a:	4a89      	ldr	r2, [pc, #548]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b10:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b1e:	4b84      	ldr	r3, [pc, #528]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b24:	f023 0203 	bic.w	r2, r3, #3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	4980      	ldr	r1, [pc, #512]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b40:	4b7b      	ldr	r3, [pc, #492]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b46:	f023 020c 	bic.w	r2, r3, #12
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4e:	4978      	ldr	r1, [pc, #480]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b62:	4b73      	ldr	r3, [pc, #460]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b68:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b70:	496f      	ldr	r1, [pc, #444]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b84:	4b6a      	ldr	r3, [pc, #424]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b92:	4967      	ldr	r1, [pc, #412]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ba6:	4b62      	ldr	r3, [pc, #392]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb4:	495e      	ldr	r1, [pc, #376]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bc8:	4b59      	ldr	r3, [pc, #356]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd6:	4956      	ldr	r1, [pc, #344]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bea:	4b51      	ldr	r3, [pc, #324]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf8:	494d      	ldr	r1, [pc, #308]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d028      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c0c:	4b48      	ldr	r3, [pc, #288]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	4945      	ldr	r1, [pc, #276]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c2a:	d106      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c2c:	4b40      	ldr	r3, [pc, #256]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4a3f      	ldr	r2, [pc, #252]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c36:	60d3      	str	r3, [r2, #12]
 8003c38:	e011      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c42:	d10c      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3304      	adds	r3, #4
 8003c48:	2101      	movs	r1, #1
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 f872 	bl	8003d34 <RCCEx_PLLSAI1_Config>
 8003c50:	4603      	mov	r3, r0
 8003c52:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c54:	7cfb      	ldrb	r3, [r7, #19]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003c5a:	7cfb      	ldrb	r3, [r7, #19]
 8003c5c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d028      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c6a:	4b31      	ldr	r3, [pc, #196]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c70:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c78:	492d      	ldr	r1, [pc, #180]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c88:	d106      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c8a:	4b29      	ldr	r3, [pc, #164]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	4a28      	ldr	r2, [pc, #160]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c94:	60d3      	str	r3, [r2, #12]
 8003c96:	e011      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 f843 	bl	8003d34 <RCCEx_PLLSAI1_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cb2:	7cfb      	ldrb	r3, [r7, #19]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003cb8:	7cfb      	ldrb	r3, [r7, #19]
 8003cba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01c      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cc8:	4b19      	ldr	r3, [pc, #100]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cd6:	4916      	ldr	r1, [pc, #88]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ce6:	d10c      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3304      	adds	r3, #4
 8003cec:	2102      	movs	r1, #2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f820 	bl	8003d34 <RCCEx_PLLSAI1_Config>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cf8:	7cfb      	ldrb	r3, [r7, #19]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003cfe:	7cfb      	ldrb	r3, [r7, #19]
 8003d00:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d0e:	4b08      	ldr	r3, [pc, #32]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d14:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1c:	4904      	ldr	r1, [pc, #16]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d24:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40021000 	.word	0x40021000

08003d34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d42:	4b74      	ldr	r3, [pc, #464]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d018      	beq.n	8003d80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d4e:	4b71      	ldr	r3, [pc, #452]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f003 0203 	and.w	r2, r3, #3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d10d      	bne.n	8003d7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
       ||
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d009      	beq.n	8003d7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d66:	4b6b      	ldr	r3, [pc, #428]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	091b      	lsrs	r3, r3, #4
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
       ||
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d047      	beq.n	8003e0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	73fb      	strb	r3, [r7, #15]
 8003d7e:	e044      	b.n	8003e0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d018      	beq.n	8003dba <RCCEx_PLLSAI1_Config+0x86>
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d825      	bhi.n	8003dd8 <RCCEx_PLLSAI1_Config+0xa4>
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d002      	beq.n	8003d96 <RCCEx_PLLSAI1_Config+0x62>
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d009      	beq.n	8003da8 <RCCEx_PLLSAI1_Config+0x74>
 8003d94:	e020      	b.n	8003dd8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d96:	4b5f      	ldr	r3, [pc, #380]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d11d      	bne.n	8003dde <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da6:	e01a      	b.n	8003dde <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003da8:	4b5a      	ldr	r3, [pc, #360]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d116      	bne.n	8003de2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db8:	e013      	b.n	8003de2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dba:	4b56      	ldr	r3, [pc, #344]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10f      	bne.n	8003de6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dc6:	4b53      	ldr	r3, [pc, #332]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d109      	bne.n	8003de6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dd6:	e006      	b.n	8003de6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	73fb      	strb	r3, [r7, #15]
      break;
 8003ddc:	e004      	b.n	8003de8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dde:	bf00      	nop
 8003de0:	e002      	b.n	8003de8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003de2:	bf00      	nop
 8003de4:	e000      	b.n	8003de8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003de6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10d      	bne.n	8003e0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dee:	4b49      	ldr	r3, [pc, #292]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6819      	ldr	r1, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	430b      	orrs	r3, r1
 8003e04:	4943      	ldr	r1, [pc, #268]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d17c      	bne.n	8003f0a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e10:	4b40      	ldr	r3, [pc, #256]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a3f      	ldr	r2, [pc, #252]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e1c:	f7fe fb04 	bl	8002428 <HAL_GetTick>
 8003e20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e22:	e009      	b.n	8003e38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e24:	f7fe fb00 	bl	8002428 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d902      	bls.n	8003e38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	73fb      	strb	r3, [r7, #15]
        break;
 8003e36:	e005      	b.n	8003e44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e38:	4b36      	ldr	r3, [pc, #216]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1ef      	bne.n	8003e24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d15f      	bne.n	8003f0a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d110      	bne.n	8003e72 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e50:	4b30      	ldr	r3, [pc, #192]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003e58:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6892      	ldr	r2, [r2, #8]
 8003e60:	0211      	lsls	r1, r2, #8
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68d2      	ldr	r2, [r2, #12]
 8003e66:	06d2      	lsls	r2, r2, #27
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	492a      	ldr	r1, [pc, #168]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	610b      	str	r3, [r1, #16]
 8003e70:	e027      	b.n	8003ec2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d112      	bne.n	8003e9e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e78:	4b26      	ldr	r3, [pc, #152]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003e80:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6892      	ldr	r2, [r2, #8]
 8003e88:	0211      	lsls	r1, r2, #8
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6912      	ldr	r2, [r2, #16]
 8003e8e:	0852      	lsrs	r2, r2, #1
 8003e90:	3a01      	subs	r2, #1
 8003e92:	0552      	lsls	r2, r2, #21
 8003e94:	430a      	orrs	r2, r1
 8003e96:	491f      	ldr	r1, [pc, #124]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	610b      	str	r3, [r1, #16]
 8003e9c:	e011      	b.n	8003ec2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ea6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6892      	ldr	r2, [r2, #8]
 8003eae:	0211      	lsls	r1, r2, #8
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6952      	ldr	r2, [r2, #20]
 8003eb4:	0852      	lsrs	r2, r2, #1
 8003eb6:	3a01      	subs	r2, #1
 8003eb8:	0652      	lsls	r2, r2, #25
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	4915      	ldr	r1, [pc, #84]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ec2:	4b14      	ldr	r3, [pc, #80]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a13      	ldr	r2, [pc, #76]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ecc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ece:	f7fe faab 	bl	8002428 <HAL_GetTick>
 8003ed2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ed4:	e009      	b.n	8003eea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ed6:	f7fe faa7 	bl	8002428 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d902      	bls.n	8003eea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	73fb      	strb	r3, [r7, #15]
          break;
 8003ee8:	e005      	b.n	8003ef6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003eea:	4b0a      	ldr	r3, [pc, #40]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0ef      	beq.n	8003ed6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d106      	bne.n	8003f0a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003efc:	4b05      	ldr	r3, [pc, #20]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003efe:	691a      	ldr	r2, [r3, #16]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	4903      	ldr	r1, [pc, #12]	@ (8003f14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40021000 	.word	0x40021000

08003f18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e095      	b.n	8004056 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d108      	bne.n	8003f44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f3a:	d009      	beq.n	8003f50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	61da      	str	r2, [r3, #28]
 8003f42:	e005      	b.n	8003f50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fd fda0 	bl	8001ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f90:	d902      	bls.n	8003f98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	e002      	b.n	8003f9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003fa6:	d007      	beq.n	8003fb8 <HAL_SPI_Init+0xa0>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fb0:	d002      	beq.n	8003fb8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffa:	ea42 0103 	orr.w	r1, r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004002:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	0c1b      	lsrs	r3, r3, #16
 8004014:	f003 0204 	and.w	r2, r3, #4
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004034:	ea42 0103 	orr.w	r1, r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b088      	sub	sp, #32
 8004062:	af00      	add	r7, sp, #0
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	603b      	str	r3, [r7, #0]
 800406a:	4613      	mov	r3, r2
 800406c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800406e:	f7fe f9db 	bl	8002428 <HAL_GetTick>
 8004072:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004074:	88fb      	ldrh	r3, [r7, #6]
 8004076:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b01      	cmp	r3, #1
 8004082:	d001      	beq.n	8004088 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004084:	2302      	movs	r3, #2
 8004086:	e15c      	b.n	8004342 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <HAL_SPI_Transmit+0x36>
 800408e:	88fb      	ldrh	r3, [r7, #6]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e154      	b.n	8004342 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_SPI_Transmit+0x48>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e14d      	b.n	8004342 <HAL_SPI_Transmit+0x2e4>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2203      	movs	r2, #3
 80040b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	88fa      	ldrh	r2, [r7, #6]
 80040c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	88fa      	ldrh	r2, [r7, #6]
 80040cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040f8:	d10f      	bne.n	800411a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004108:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004118:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004124:	2b40      	cmp	r3, #64	@ 0x40
 8004126:	d007      	beq.n	8004138 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004136:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004140:	d952      	bls.n	80041e8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_SPI_Transmit+0xf2>
 800414a:	8b7b      	ldrh	r3, [r7, #26]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d145      	bne.n	80041dc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004154:	881a      	ldrh	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004160:	1c9a      	adds	r2, r3, #2
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800416a:	b29b      	uxth	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004174:	e032      	b.n	80041dc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b02      	cmp	r3, #2
 8004182:	d112      	bne.n	80041aa <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004188:	881a      	ldrh	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004194:	1c9a      	adds	r2, r3, #2
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041a8:	e018      	b.n	80041dc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041aa:	f7fe f93d 	bl	8002428 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d803      	bhi.n	80041c2 <HAL_SPI_Transmit+0x164>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c0:	d102      	bne.n	80041c8 <HAL_SPI_Transmit+0x16a>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d109      	bne.n	80041dc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e0b2      	b.n	8004342 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1c7      	bne.n	8004176 <HAL_SPI_Transmit+0x118>
 80041e6:	e083      	b.n	80042f0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <HAL_SPI_Transmit+0x198>
 80041f0:	8b7b      	ldrh	r3, [r7, #26]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d177      	bne.n	80042e6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d912      	bls.n	8004226 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004204:	881a      	ldrh	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004210:	1c9a      	adds	r2, r3, #2
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b02      	subs	r3, #2
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004224:	e05f      	b.n	80042e6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	330c      	adds	r3, #12
 8004230:	7812      	ldrb	r2, [r2, #0]
 8004232:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800424c:	e04b      	b.n	80042e6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b02      	cmp	r3, #2
 800425a:	d12b      	bne.n	80042b4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b01      	cmp	r3, #1
 8004264:	d912      	bls.n	800428c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800426a:	881a      	ldrh	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004276:	1c9a      	adds	r2, r3, #2
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b02      	subs	r3, #2
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800428a:	e02c      	b.n	80042e6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	7812      	ldrb	r2, [r2, #0]
 8004298:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042b2:	e018      	b.n	80042e6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042b4:	f7fe f8b8 	bl	8002428 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d803      	bhi.n	80042cc <HAL_SPI_Transmit+0x26e>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ca:	d102      	bne.n	80042d2 <HAL_SPI_Transmit+0x274>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e02d      	b.n	8004342 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1ae      	bne.n	800424e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	6839      	ldr	r1, [r7, #0]
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 fcf5 	bl	8004ce4 <SPI_EndRxTxTransaction>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004340:	2300      	movs	r3, #0
  }
}
 8004342:	4618      	mov	r0, r3
 8004344:	3720      	adds	r7, #32
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b088      	sub	sp, #32
 800434e:	af02      	add	r7, sp, #8
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	603b      	str	r3, [r7, #0]
 8004356:	4613      	mov	r3, r2
 8004358:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	d001      	beq.n	800436a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004366:	2302      	movs	r3, #2
 8004368:	e123      	b.n	80045b2 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004372:	d112      	bne.n	800439a <HAL_SPI_Receive+0x50>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10e      	bne.n	800439a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2204      	movs	r2, #4
 8004380:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004384:	88fa      	ldrh	r2, [r7, #6]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	4613      	mov	r3, r2
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	68b9      	ldr	r1, [r7, #8]
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f912 	bl	80045ba <HAL_SPI_TransmitReceive>
 8004396:	4603      	mov	r3, r0
 8004398:	e10b      	b.n	80045b2 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800439a:	f7fe f845 	bl	8002428 <HAL_GetTick>
 800439e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <HAL_SPI_Receive+0x62>
 80043a6:	88fb      	ldrh	r3, [r7, #6]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e100      	b.n	80045b2 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_SPI_Receive+0x74>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e0f9      	b.n	80045b2 <HAL_SPI_Receive+0x268>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2204      	movs	r2, #4
 80043ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	88fa      	ldrh	r2, [r7, #6]
 80043de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	88fa      	ldrh	r2, [r7, #6]
 80043e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004410:	d908      	bls.n	8004424 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004420:	605a      	str	r2, [r3, #4]
 8004422:	e007      	b.n	8004434 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004432:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800443c:	d10f      	bne.n	800445e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800444c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800445c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004468:	2b40      	cmp	r3, #64	@ 0x40
 800446a:	d007      	beq.n	800447c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800447a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004484:	d875      	bhi.n	8004572 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004486:	e037      	b.n	80044f8 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b01      	cmp	r3, #1
 8004494:	d117      	bne.n	80044c6 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f103 020c 	add.w	r2, r3, #12
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a2:	7812      	ldrb	r2, [r2, #0]
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80044c4:	e018      	b.n	80044f8 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044c6:	f7fd ffaf 	bl	8002428 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d803      	bhi.n	80044de <HAL_SPI_Receive+0x194>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044dc:	d102      	bne.n	80044e4 <HAL_SPI_Receive+0x19a>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d109      	bne.n	80044f8 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e05c      	b.n	80045b2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1c1      	bne.n	8004488 <HAL_SPI_Receive+0x13e>
 8004504:	e03b      	b.n	800457e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b01      	cmp	r3, #1
 8004512:	d115      	bne.n	8004540 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451e:	b292      	uxth	r2, r2
 8004520:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	1c9a      	adds	r2, r3, #2
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800453e:	e018      	b.n	8004572 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004540:	f7fd ff72 	bl	8002428 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	429a      	cmp	r2, r3
 800454e:	d803      	bhi.n	8004558 <HAL_SPI_Receive+0x20e>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004556:	d102      	bne.n	800455e <HAL_SPI_Receive+0x214>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d109      	bne.n	8004572 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e01f      	b.n	80045b2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1c3      	bne.n	8004506 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	6839      	ldr	r1, [r7, #0]
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 fb56 	bl	8004c34 <SPI_EndRxTransaction>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80045b0:	2300      	movs	r3, #0
  }
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b08a      	sub	sp, #40	@ 0x28
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	607a      	str	r2, [r7, #4]
 80045c6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045c8:	2301      	movs	r3, #1
 80045ca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045cc:	f7fd ff2c 	bl	8002428 <HAL_GetTick>
 80045d0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045d8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80045e0:	887b      	ldrh	r3, [r7, #2]
 80045e2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80045e4:	887b      	ldrh	r3, [r7, #2]
 80045e6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045e8:	7ffb      	ldrb	r3, [r7, #31]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d00c      	beq.n	8004608 <HAL_SPI_TransmitReceive+0x4e>
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045f4:	d106      	bne.n	8004604 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d102      	bne.n	8004604 <HAL_SPI_TransmitReceive+0x4a>
 80045fe:	7ffb      	ldrb	r3, [r7, #31]
 8004600:	2b04      	cmp	r3, #4
 8004602:	d001      	beq.n	8004608 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004604:	2302      	movs	r3, #2
 8004606:	e1f3      	b.n	80049f0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d005      	beq.n	800461a <HAL_SPI_TransmitReceive+0x60>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <HAL_SPI_TransmitReceive+0x60>
 8004614:	887b      	ldrh	r3, [r7, #2]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e1e8      	b.n	80049f0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_SPI_TransmitReceive+0x72>
 8004628:	2302      	movs	r3, #2
 800462a:	e1e1      	b.n	80049f0 <HAL_SPI_TransmitReceive+0x436>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b04      	cmp	r3, #4
 800463e:	d003      	beq.n	8004648 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2205      	movs	r2, #5
 8004644:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	887a      	ldrh	r2, [r7, #2]
 8004658:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	887a      	ldrh	r2, [r7, #2]
 8004660:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	887a      	ldrh	r2, [r7, #2]
 800466e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	887a      	ldrh	r2, [r7, #2]
 8004674:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800468a:	d802      	bhi.n	8004692 <HAL_SPI_TransmitReceive+0xd8>
 800468c:	8abb      	ldrh	r3, [r7, #20]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d908      	bls.n	80046a4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	e007      	b.n	80046b4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80046b2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046be:	2b40      	cmp	r3, #64	@ 0x40
 80046c0:	d007      	beq.n	80046d2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046da:	f240 8083 	bls.w	80047e4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <HAL_SPI_TransmitReceive+0x132>
 80046e6:	8afb      	ldrh	r3, [r7, #22]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d16f      	bne.n	80047cc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f0:	881a      	ldrh	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fc:	1c9a      	adds	r2, r3, #2
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004710:	e05c      	b.n	80047cc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b02      	cmp	r3, #2
 800471e:	d11b      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x19e>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d016      	beq.n	8004758 <HAL_SPI_TransmitReceive+0x19e>
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	2b01      	cmp	r3, #1
 800472e:	d113      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004734:	881a      	ldrh	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004740:	1c9a      	adds	r2, r3, #2
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b01      	cmp	r3, #1
 8004764:	d11c      	bne.n	80047a0 <HAL_SPI_TransmitReceive+0x1e6>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d016      	beq.n	80047a0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477c:	b292      	uxth	r2, r2
 800477e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004784:	1c9a      	adds	r2, r3, #2
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800479c:	2301      	movs	r3, #1
 800479e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047a0:	f7fd fe42 	bl	8002428 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d80d      	bhi.n	80047cc <HAL_SPI_TransmitReceive+0x212>
 80047b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b6:	d009      	beq.n	80047cc <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e111      	b.n	80049f0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d19d      	bne.n	8004712 <HAL_SPI_TransmitReceive+0x158>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d197      	bne.n	8004712 <HAL_SPI_TransmitReceive+0x158>
 80047e2:	e0e5      	b.n	80049b0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_SPI_TransmitReceive+0x23a>
 80047ec:	8afb      	ldrh	r3, [r7, #22]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	f040 80d1 	bne.w	8004996 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d912      	bls.n	8004824 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004802:	881a      	ldrh	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480e:	1c9a      	adds	r2, r3, #2
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b02      	subs	r3, #2
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004822:	e0b8      	b.n	8004996 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	330c      	adds	r3, #12
 800482e:	7812      	ldrb	r2, [r2, #0]
 8004830:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004836:	1c5a      	adds	r2, r3, #1
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800484a:	e0a4      	b.n	8004996 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b02      	cmp	r3, #2
 8004858:	d134      	bne.n	80048c4 <HAL_SPI_TransmitReceive+0x30a>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d02f      	beq.n	80048c4 <HAL_SPI_TransmitReceive+0x30a>
 8004864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004866:	2b01      	cmp	r3, #1
 8004868:	d12c      	bne.n	80048c4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b01      	cmp	r3, #1
 8004872:	d912      	bls.n	800489a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004878:	881a      	ldrh	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004884:	1c9a      	adds	r2, r3, #2
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b02      	subs	r3, #2
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004898:	e012      	b.n	80048c0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	330c      	adds	r3, #12
 80048a4:	7812      	ldrb	r2, [r2, #0]
 80048a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d148      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x3aa>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d042      	beq.n	8004964 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d923      	bls.n	8004932 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f4:	b292      	uxth	r2, r2
 80048f6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fc:	1c9a      	adds	r2, r3, #2
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004908:	b29b      	uxth	r3, r3
 800490a:	3b02      	subs	r3, #2
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b01      	cmp	r3, #1
 800491e:	d81f      	bhi.n	8004960 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800492e:	605a      	str	r2, [r3, #4]
 8004930:	e016      	b.n	8004960 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f103 020c 	add.w	r2, r3, #12
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493e:	7812      	ldrb	r2, [r2, #0]
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004960:	2301      	movs	r3, #1
 8004962:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004964:	f7fd fd60 	bl	8002428 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004970:	429a      	cmp	r2, r3
 8004972:	d803      	bhi.n	800497c <HAL_SPI_TransmitReceive+0x3c2>
 8004974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497a:	d102      	bne.n	8004982 <HAL_SPI_TransmitReceive+0x3c8>
 800497c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497e:	2b00      	cmp	r3, #0
 8004980:	d109      	bne.n	8004996 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e02c      	b.n	80049f0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	f47f af55 	bne.w	800484c <HAL_SPI_TransmitReceive+0x292>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f47f af4e 	bne.w	800484c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049b0:	6a3a      	ldr	r2, [r7, #32]
 80049b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f995 	bl	8004ce4 <SPI_EndRxTxTransaction>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e00e      	b.n	80049f0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80049ee:	2300      	movs	r3, #0
  }
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3728      	adds	r7, #40	@ 0x28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	603b      	str	r3, [r7, #0]
 8004a04:	4613      	mov	r3, r2
 8004a06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a08:	f7fd fd0e 	bl	8002428 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a10:	1a9b      	subs	r3, r3, r2
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	4413      	add	r3, r2
 8004a16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a18:	f7fd fd06 	bl	8002428 <HAL_GetTick>
 8004a1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a1e:	4b39      	ldr	r3, [pc, #228]	@ (8004b04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	015b      	lsls	r3, r3, #5
 8004a24:	0d1b      	lsrs	r3, r3, #20
 8004a26:	69fa      	ldr	r2, [r7, #28]
 8004a28:	fb02 f303 	mul.w	r3, r2, r3
 8004a2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a2e:	e054      	b.n	8004ada <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a36:	d050      	beq.n	8004ada <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a38:	f7fd fcf6 	bl	8002428 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	69fa      	ldr	r2, [r7, #28]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d902      	bls.n	8004a4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d13d      	bne.n	8004aca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a66:	d111      	bne.n	8004a8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a70:	d004      	beq.n	8004a7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a7a:	d107      	bne.n	8004a8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a94:	d10f      	bne.n	8004ab6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ab4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e017      	b.n	8004afa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	bf0c      	ite	eq
 8004aea:	2301      	moveq	r3, #1
 8004aec:	2300      	movne	r3, #0
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	461a      	mov	r2, r3
 8004af2:	79fb      	ldrb	r3, [r7, #7]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d19b      	bne.n	8004a30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3720      	adds	r7, #32
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20000000 	.word	0x20000000

08004b08 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08a      	sub	sp, #40	@ 0x28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b16:	2300      	movs	r3, #0
 8004b18:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b1a:	f7fd fc85 	bl	8002428 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b22:	1a9b      	subs	r3, r3, r2
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	4413      	add	r3, r2
 8004b28:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004b2a:	f7fd fc7d 	bl	8002428 <HAL_GetTick>
 8004b2e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	330c      	adds	r3, #12
 8004b36:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b38:	4b3d      	ldr	r3, [pc, #244]	@ (8004c30 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	00da      	lsls	r2, r3, #3
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	0d1b      	lsrs	r3, r3, #20
 8004b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
 8004b4e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b50:	e060      	b.n	8004c14 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b58:	d107      	bne.n	8004b6a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d104      	bne.n	8004b6a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b70:	d050      	beq.n	8004c14 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b72:	f7fd fc59 	bl	8002428 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d902      	bls.n	8004b88 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d13d      	bne.n	8004c04 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ba0:	d111      	bne.n	8004bc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004baa:	d004      	beq.n	8004bb6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bb4:	d107      	bne.n	8004bc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bc4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bce:	d10f      	bne.n	8004bf0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e010      	b.n	8004c26 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d196      	bne.n	8004b52 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3728      	adds	r7, #40	@ 0x28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000000 	.word	0x20000000

08004c34 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c48:	d111      	bne.n	8004c6e <SPI_EndRxTransaction+0x3a>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c52:	d004      	beq.n	8004c5e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c5c:	d107      	bne.n	8004c6e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c6c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2200      	movs	r2, #0
 8004c76:	2180      	movs	r1, #128	@ 0x80
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f7ff febd 	bl	80049f8 <SPI_WaitFlagStateUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d007      	beq.n	8004c94 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c88:	f043 0220 	orr.w	r2, r3, #32
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e023      	b.n	8004cdc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c9c:	d11d      	bne.n	8004cda <SPI_EndRxTransaction+0xa6>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ca6:	d004      	beq.n	8004cb2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb0:	d113      	bne.n	8004cda <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f7ff ff22 	bl	8004b08 <SPI_WaitFifoStateUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d007      	beq.n	8004cda <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cce:	f043 0220 	orr.w	r2, r3, #32
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e000      	b.n	8004cdc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af02      	add	r7, sp, #8
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f7ff ff03 	bl	8004b08 <SPI_WaitFifoStateUntilTimeout>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d0c:	f043 0220 	orr.w	r2, r3, #32
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e027      	b.n	8004d68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	2180      	movs	r1, #128	@ 0x80
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7ff fe68 	bl	80049f8 <SPI_WaitFlagStateUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d32:	f043 0220 	orr.w	r2, r3, #32
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e014      	b.n	8004d68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f7ff fedc 	bl	8004b08 <SPI_WaitFifoStateUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d007      	beq.n	8004d66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d5a:	f043 0220 	orr.w	r2, r3, #32
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e000      	b.n	8004d68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e049      	b.n	8004e16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d106      	bne.n	8004d9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7fd f9a0 	bl	80020dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3304      	adds	r3, #4
 8004dac:	4619      	mov	r1, r3
 8004dae:	4610      	mov	r0, r2
 8004db0:	f000 fa74 	bl	800529c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b082      	sub	sp, #8
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e049      	b.n	8004ec4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d106      	bne.n	8004e4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f841 	bl	8004ecc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3304      	adds	r3, #4
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	f000 fa1d 	bl	800529c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eec:	2300      	movs	r3, #0
 8004eee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e0ff      	b.n	80050fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b14      	cmp	r3, #20
 8004f0a:	f200 80f0 	bhi.w	80050ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f14:	08004f69 	.word	0x08004f69
 8004f18:	080050ef 	.word	0x080050ef
 8004f1c:	080050ef 	.word	0x080050ef
 8004f20:	080050ef 	.word	0x080050ef
 8004f24:	08004fa9 	.word	0x08004fa9
 8004f28:	080050ef 	.word	0x080050ef
 8004f2c:	080050ef 	.word	0x080050ef
 8004f30:	080050ef 	.word	0x080050ef
 8004f34:	08004feb 	.word	0x08004feb
 8004f38:	080050ef 	.word	0x080050ef
 8004f3c:	080050ef 	.word	0x080050ef
 8004f40:	080050ef 	.word	0x080050ef
 8004f44:	0800502b 	.word	0x0800502b
 8004f48:	080050ef 	.word	0x080050ef
 8004f4c:	080050ef 	.word	0x080050ef
 8004f50:	080050ef 	.word	0x080050ef
 8004f54:	0800506d 	.word	0x0800506d
 8004f58:	080050ef 	.word	0x080050ef
 8004f5c:	080050ef 	.word	0x080050ef
 8004f60:	080050ef 	.word	0x080050ef
 8004f64:	080050ad 	.word	0x080050ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fa04 	bl	800537c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699a      	ldr	r2, [r3, #24]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0208 	orr.w	r2, r2, #8
 8004f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699a      	ldr	r2, [r3, #24]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0204 	bic.w	r2, r2, #4
 8004f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6999      	ldr	r1, [r3, #24]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	691a      	ldr	r2, [r3, #16]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	619a      	str	r2, [r3, #24]
      break;
 8004fa6:	e0a5      	b.n	80050f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68b9      	ldr	r1, [r7, #8]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fa60 	bl	8005474 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699a      	ldr	r2, [r3, #24]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6999      	ldr	r1, [r3, #24]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	021a      	lsls	r2, r3, #8
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	619a      	str	r2, [r3, #24]
      break;
 8004fe8:	e084      	b.n	80050f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68b9      	ldr	r1, [r7, #8]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fab9 	bl	8005568 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0208 	orr.w	r2, r2, #8
 8005004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69da      	ldr	r2, [r3, #28]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0204 	bic.w	r2, r2, #4
 8005014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69d9      	ldr	r1, [r3, #28]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	61da      	str	r2, [r3, #28]
      break;
 8005028:	e064      	b.n	80050f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fb11 	bl	8005658 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69da      	ldr	r2, [r3, #28]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69da      	ldr	r2, [r3, #28]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69d9      	ldr	r1, [r3, #28]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	021a      	lsls	r2, r3, #8
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	61da      	str	r2, [r3, #28]
      break;
 800506a:	e043      	b.n	80050f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68b9      	ldr	r1, [r7, #8]
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fb4e 	bl	8005714 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0208 	orr.w	r2, r2, #8
 8005086:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0204 	bic.w	r2, r2, #4
 8005096:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80050aa:	e023      	b.n	80050f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68b9      	ldr	r1, [r7, #8]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fb86 	bl	80057c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	021a      	lsls	r2, r3, #8
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80050ec:	e002      	b.n	80050f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	75fb      	strb	r3, [r7, #23]
      break;
 80050f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop

08005108 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_TIM_ConfigClockSource+0x1c>
 8005120:	2302      	movs	r3, #2
 8005122:	e0b6      	b.n	8005292 <HAL_TIM_ConfigClockSource+0x18a>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005142:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800514e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005160:	d03e      	beq.n	80051e0 <HAL_TIM_ConfigClockSource+0xd8>
 8005162:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005166:	f200 8087 	bhi.w	8005278 <HAL_TIM_ConfigClockSource+0x170>
 800516a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800516e:	f000 8086 	beq.w	800527e <HAL_TIM_ConfigClockSource+0x176>
 8005172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005176:	d87f      	bhi.n	8005278 <HAL_TIM_ConfigClockSource+0x170>
 8005178:	2b70      	cmp	r3, #112	@ 0x70
 800517a:	d01a      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0xaa>
 800517c:	2b70      	cmp	r3, #112	@ 0x70
 800517e:	d87b      	bhi.n	8005278 <HAL_TIM_ConfigClockSource+0x170>
 8005180:	2b60      	cmp	r3, #96	@ 0x60
 8005182:	d050      	beq.n	8005226 <HAL_TIM_ConfigClockSource+0x11e>
 8005184:	2b60      	cmp	r3, #96	@ 0x60
 8005186:	d877      	bhi.n	8005278 <HAL_TIM_ConfigClockSource+0x170>
 8005188:	2b50      	cmp	r3, #80	@ 0x50
 800518a:	d03c      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0xfe>
 800518c:	2b50      	cmp	r3, #80	@ 0x50
 800518e:	d873      	bhi.n	8005278 <HAL_TIM_ConfigClockSource+0x170>
 8005190:	2b40      	cmp	r3, #64	@ 0x40
 8005192:	d058      	beq.n	8005246 <HAL_TIM_ConfigClockSource+0x13e>
 8005194:	2b40      	cmp	r3, #64	@ 0x40
 8005196:	d86f      	bhi.n	8005278 <HAL_TIM_ConfigClockSource+0x170>
 8005198:	2b30      	cmp	r3, #48	@ 0x30
 800519a:	d064      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0x15e>
 800519c:	2b30      	cmp	r3, #48	@ 0x30
 800519e:	d86b      	bhi.n	8005278 <HAL_TIM_ConfigClockSource+0x170>
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	d060      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0x15e>
 80051a4:	2b20      	cmp	r3, #32
 80051a6:	d867      	bhi.n	8005278 <HAL_TIM_ConfigClockSource+0x170>
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d05c      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0x15e>
 80051ac:	2b10      	cmp	r3, #16
 80051ae:	d05a      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0x15e>
 80051b0:	e062      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051c2:	f000 fbd3 	bl	800596c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	609a      	str	r2, [r3, #8]
      break;
 80051de:	e04f      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051f0:	f000 fbbc 	bl	800596c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005202:	609a      	str	r2, [r3, #8]
      break;
 8005204:	e03c      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005212:	461a      	mov	r2, r3
 8005214:	f000 fb30 	bl	8005878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2150      	movs	r1, #80	@ 0x50
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fb89 	bl	8005936 <TIM_ITRx_SetConfig>
      break;
 8005224:	e02c      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005232:	461a      	mov	r2, r3
 8005234:	f000 fb4f 	bl	80058d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2160      	movs	r1, #96	@ 0x60
 800523e:	4618      	mov	r0, r3
 8005240:	f000 fb79 	bl	8005936 <TIM_ITRx_SetConfig>
      break;
 8005244:	e01c      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005252:	461a      	mov	r2, r3
 8005254:	f000 fb10 	bl	8005878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2140      	movs	r1, #64	@ 0x40
 800525e:	4618      	mov	r0, r3
 8005260:	f000 fb69 	bl	8005936 <TIM_ITRx_SetConfig>
      break;
 8005264:	e00c      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4619      	mov	r1, r3
 8005270:	4610      	mov	r0, r2
 8005272:	f000 fb60 	bl	8005936 <TIM_ITRx_SetConfig>
      break;
 8005276:	e003      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
      break;
 800527c:	e000      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800527e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005290:	7bfb      	ldrb	r3, [r7, #15]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a30      	ldr	r2, [pc, #192]	@ (8005370 <TIM_Base_SetConfig+0xd4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d003      	beq.n	80052bc <TIM_Base_SetConfig+0x20>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ba:	d108      	bne.n	80052ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a27      	ldr	r2, [pc, #156]	@ (8005370 <TIM_Base_SetConfig+0xd4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00b      	beq.n	80052ee <TIM_Base_SetConfig+0x52>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052dc:	d007      	beq.n	80052ee <TIM_Base_SetConfig+0x52>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a24      	ldr	r2, [pc, #144]	@ (8005374 <TIM_Base_SetConfig+0xd8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d003      	beq.n	80052ee <TIM_Base_SetConfig+0x52>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a23      	ldr	r2, [pc, #140]	@ (8005378 <TIM_Base_SetConfig+0xdc>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d108      	bne.n	8005300 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a12      	ldr	r2, [pc, #72]	@ (8005370 <TIM_Base_SetConfig+0xd4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d007      	beq.n	800533c <TIM_Base_SetConfig+0xa0>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a11      	ldr	r2, [pc, #68]	@ (8005374 <TIM_Base_SetConfig+0xd8>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_Base_SetConfig+0xa0>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a10      	ldr	r2, [pc, #64]	@ (8005378 <TIM_Base_SetConfig+0xdc>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d103      	bne.n	8005344 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b01      	cmp	r3, #1
 8005354:	d105      	bne.n	8005362 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f023 0201 	bic.w	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	611a      	str	r2, [r3, #16]
  }
}
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40012c00 	.word	0x40012c00
 8005374:	40014000 	.word	0x40014000
 8005378:	40014400 	.word	0x40014400

0800537c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	f023 0201 	bic.w	r2, r3, #1
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0303 	bic.w	r3, r3, #3
 80053b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f023 0302 	bic.w	r3, r3, #2
 80053c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a24      	ldr	r2, [pc, #144]	@ (8005468 <TIM_OC1_SetConfig+0xec>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d007      	beq.n	80053ec <TIM_OC1_SetConfig+0x70>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a23      	ldr	r2, [pc, #140]	@ (800546c <TIM_OC1_SetConfig+0xf0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d003      	beq.n	80053ec <TIM_OC1_SetConfig+0x70>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a22      	ldr	r2, [pc, #136]	@ (8005470 <TIM_OC1_SetConfig+0xf4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d10c      	bne.n	8005406 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f023 0308 	bic.w	r3, r3, #8
 80053f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f023 0304 	bic.w	r3, r3, #4
 8005404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a17      	ldr	r2, [pc, #92]	@ (8005468 <TIM_OC1_SetConfig+0xec>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d007      	beq.n	800541e <TIM_OC1_SetConfig+0xa2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a16      	ldr	r2, [pc, #88]	@ (800546c <TIM_OC1_SetConfig+0xf0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d003      	beq.n	800541e <TIM_OC1_SetConfig+0xa2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a15      	ldr	r2, [pc, #84]	@ (8005470 <TIM_OC1_SetConfig+0xf4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d111      	bne.n	8005442 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800542c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	621a      	str	r2, [r3, #32]
}
 800545c:	bf00      	nop
 800545e:	371c      	adds	r7, #28
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	40012c00 	.word	0x40012c00
 800546c:	40014000 	.word	0x40014000
 8005470:	40014400 	.word	0x40014400

08005474 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	f023 0210 	bic.w	r2, r3, #16
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f023 0320 	bic.w	r3, r3, #32
 80054c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a22      	ldr	r2, [pc, #136]	@ (800555c <TIM_OC2_SetConfig+0xe8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d10d      	bne.n	80054f4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a19      	ldr	r2, [pc, #100]	@ (800555c <TIM_OC2_SetConfig+0xe8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d007      	beq.n	800550c <TIM_OC2_SetConfig+0x98>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a18      	ldr	r2, [pc, #96]	@ (8005560 <TIM_OC2_SetConfig+0xec>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d003      	beq.n	800550c <TIM_OC2_SetConfig+0x98>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a17      	ldr	r2, [pc, #92]	@ (8005564 <TIM_OC2_SetConfig+0xf0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d113      	bne.n	8005534 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005512:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800551a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	621a      	str	r2, [r3, #32]
}
 800554e:	bf00      	nop
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40012c00 	.word	0x40012c00
 8005560:	40014000 	.word	0x40014000
 8005564:	40014400 	.word	0x40014400

08005568 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800559a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0303 	bic.w	r3, r3, #3
 80055a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	021b      	lsls	r3, r3, #8
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	4313      	orrs	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a21      	ldr	r2, [pc, #132]	@ (800564c <TIM_OC3_SetConfig+0xe4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d10d      	bne.n	80055e6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	021b      	lsls	r3, r3, #8
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a18      	ldr	r2, [pc, #96]	@ (800564c <TIM_OC3_SetConfig+0xe4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d007      	beq.n	80055fe <TIM_OC3_SetConfig+0x96>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a17      	ldr	r2, [pc, #92]	@ (8005650 <TIM_OC3_SetConfig+0xe8>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d003      	beq.n	80055fe <TIM_OC3_SetConfig+0x96>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a16      	ldr	r2, [pc, #88]	@ (8005654 <TIM_OC3_SetConfig+0xec>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d113      	bne.n	8005626 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800560c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4313      	orrs	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	621a      	str	r2, [r3, #32]
}
 8005640:	bf00      	nop
 8005642:	371c      	adds	r7, #28
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	40012c00 	.word	0x40012c00
 8005650:	40014000 	.word	0x40014000
 8005654:	40014400 	.word	0x40014400

08005658 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005686:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800568a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	021b      	lsls	r3, r3, #8
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4313      	orrs	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	031b      	lsls	r3, r3, #12
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a14      	ldr	r2, [pc, #80]	@ (8005708 <TIM_OC4_SetConfig+0xb0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d007      	beq.n	80056cc <TIM_OC4_SetConfig+0x74>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a13      	ldr	r2, [pc, #76]	@ (800570c <TIM_OC4_SetConfig+0xb4>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_OC4_SetConfig+0x74>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a12      	ldr	r2, [pc, #72]	@ (8005710 <TIM_OC4_SetConfig+0xb8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d109      	bne.n	80056e0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	019b      	lsls	r3, r3, #6
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	621a      	str	r2, [r3, #32]
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40012c00 	.word	0x40012c00
 800570c:	40014000 	.word	0x40014000
 8005710:	40014400 	.word	0x40014400

08005714 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800573a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005758:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	041b      	lsls	r3, r3, #16
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	4313      	orrs	r3, r2
 8005764:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a13      	ldr	r2, [pc, #76]	@ (80057b8 <TIM_OC5_SetConfig+0xa4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d007      	beq.n	800577e <TIM_OC5_SetConfig+0x6a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a12      	ldr	r2, [pc, #72]	@ (80057bc <TIM_OC5_SetConfig+0xa8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d003      	beq.n	800577e <TIM_OC5_SetConfig+0x6a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a11      	ldr	r2, [pc, #68]	@ (80057c0 <TIM_OC5_SetConfig+0xac>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d109      	bne.n	8005792 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005784:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	021b      	lsls	r3, r3, #8
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	621a      	str	r2, [r3, #32]
}
 80057ac:	bf00      	nop
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	40012c00 	.word	0x40012c00
 80057bc:	40014000 	.word	0x40014000
 80057c0:	40014400 	.word	0x40014400

080057c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4313      	orrs	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800580a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	051b      	lsls	r3, r3, #20
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	4313      	orrs	r3, r2
 8005816:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a14      	ldr	r2, [pc, #80]	@ (800586c <TIM_OC6_SetConfig+0xa8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d007      	beq.n	8005830 <TIM_OC6_SetConfig+0x6c>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a13      	ldr	r2, [pc, #76]	@ (8005870 <TIM_OC6_SetConfig+0xac>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d003      	beq.n	8005830 <TIM_OC6_SetConfig+0x6c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a12      	ldr	r2, [pc, #72]	@ (8005874 <TIM_OC6_SetConfig+0xb0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d109      	bne.n	8005844 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005836:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	029b      	lsls	r3, r3, #10
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	621a      	str	r2, [r3, #32]
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	40012c00 	.word	0x40012c00
 8005870:	40014000 	.word	0x40014000
 8005874:	40014400 	.word	0x40014400

08005878 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	f023 0201 	bic.w	r2, r3, #1
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f023 030a 	bic.w	r3, r3, #10
 80058b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	621a      	str	r2, [r3, #32]
}
 80058ca:	bf00      	nop
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b087      	sub	sp, #28
 80058da:	af00      	add	r7, sp, #0
 80058dc:	60f8      	str	r0, [r7, #12]
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	f023 0210 	bic.w	r2, r3, #16
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005900:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	031b      	lsls	r3, r3, #12
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	4313      	orrs	r3, r2
 800590a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005912:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	4313      	orrs	r3, r2
 800591c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	621a      	str	r2, [r3, #32]
}
 800592a:	bf00      	nop
 800592c:	371c      	adds	r7, #28
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005936:	b480      	push	{r7}
 8005938:	b085      	sub	sp, #20
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800594c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4313      	orrs	r3, r2
 8005954:	f043 0307 	orr.w	r3, r3, #7
 8005958:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	609a      	str	r2, [r3, #8]
}
 8005960:	bf00      	nop
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005986:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	021a      	lsls	r2, r3, #8
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	431a      	orrs	r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4313      	orrs	r3, r2
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	609a      	str	r2, [r3, #8]
}
 80059a0:	bf00      	nop
 80059a2:	371c      	adds	r7, #28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d101      	bne.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059c0:	2302      	movs	r3, #2
 80059c2:	e04f      	b.n	8005a64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a21      	ldr	r2, [pc, #132]	@ (8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d108      	bne.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80059f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a14      	ldr	r2, [pc, #80]	@ (8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d009      	beq.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a2c:	d004      	beq.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a10      	ldr	r2, [pc, #64]	@ (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d10c      	bne.n	8005a52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	40012c00 	.word	0x40012c00
 8005a74:	40014000 	.word	0x40014000

08005a78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e060      	b.n	8005b56 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	041b      	lsls	r3, r3, #16
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a14      	ldr	r2, [pc, #80]	@ (8005b64 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d115      	bne.n	8005b44 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b22:	051b      	lsls	r3, r3, #20
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	40012c00 	.word	0x40012c00

08005b68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e040      	b.n	8005bfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d106      	bne.n	8005b90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7fc fb62 	bl	8002254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2224      	movs	r2, #36	@ 0x24
 8005b94:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0201 	bic.w	r2, r2, #1
 8005ba4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fade 	bl	8006170 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f8af 	bl	8005d18 <UART_SetConfig>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e01b      	b.n	8005bfc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689a      	ldr	r2, [r3, #8]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005be2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0201 	orr.w	r2, r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fb5d 	bl	80062b4 <UART_CheckIdleState>
 8005bfa:	4603      	mov	r3, r0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08a      	sub	sp, #40	@ 0x28
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	603b      	str	r3, [r7, #0]
 8005c10:	4613      	mov	r3, r2
 8005c12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	d177      	bne.n	8005d0c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d002      	beq.n	8005c28 <HAL_UART_Transmit+0x24>
 8005c22:	88fb      	ldrh	r3, [r7, #6]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e070      	b.n	8005d0e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2221      	movs	r2, #33	@ 0x21
 8005c38:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c3a:	f7fc fbf5 	bl	8002428 <HAL_GetTick>
 8005c3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	88fa      	ldrh	r2, [r7, #6]
 8005c44:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	88fa      	ldrh	r2, [r7, #6]
 8005c4c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c58:	d108      	bne.n	8005c6c <HAL_UART_Transmit+0x68>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d104      	bne.n	8005c6c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c62:	2300      	movs	r3, #0
 8005c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	61bb      	str	r3, [r7, #24]
 8005c6a:	e003      	b.n	8005c74 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c74:	e02f      	b.n	8005cd6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2180      	movs	r1, #128	@ 0x80
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 fbbf 	bl	8006404 <UART_WaitOnFlagUntilTimeout>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d004      	beq.n	8005c96 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e03b      	b.n	8005d0e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10b      	bne.n	8005cb4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	881a      	ldrh	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ca8:	b292      	uxth	r2, r2
 8005caa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	3302      	adds	r3, #2
 8005cb0:	61bb      	str	r3, [r7, #24]
 8005cb2:	e007      	b.n	8005cc4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	781a      	ldrb	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1c9      	bne.n	8005c76 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2140      	movs	r1, #64	@ 0x40
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 fb89 	bl	8006404 <UART_WaitOnFlagUntilTimeout>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d004      	beq.n	8005d02 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e005      	b.n	8005d0e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2220      	movs	r2, #32
 8005d06:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e000      	b.n	8005d0e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005d0c:	2302      	movs	r3, #2
  }
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3720      	adds	r7, #32
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
	...

08005d18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d1c:	b08a      	sub	sp, #40	@ 0x28
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	431a      	orrs	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	4bb4      	ldr	r3, [pc, #720]	@ (8006018 <UART_SetConfig+0x300>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	6812      	ldr	r2, [r2, #0]
 8005d4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d50:	430b      	orrs	r3, r1
 8005d52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	68da      	ldr	r2, [r3, #12]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4aa9      	ldr	r2, [pc, #676]	@ (800601c <UART_SetConfig+0x304>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d004      	beq.n	8005d84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d80:	4313      	orrs	r3, r2
 8005d82:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d94:	430a      	orrs	r2, r1
 8005d96:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4aa0      	ldr	r2, [pc, #640]	@ (8006020 <UART_SetConfig+0x308>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d126      	bne.n	8005df0 <UART_SetConfig+0xd8>
 8005da2:	4ba0      	ldr	r3, [pc, #640]	@ (8006024 <UART_SetConfig+0x30c>)
 8005da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da8:	f003 0303 	and.w	r3, r3, #3
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d81b      	bhi.n	8005de8 <UART_SetConfig+0xd0>
 8005db0:	a201      	add	r2, pc, #4	@ (adr r2, 8005db8 <UART_SetConfig+0xa0>)
 8005db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db6:	bf00      	nop
 8005db8:	08005dc9 	.word	0x08005dc9
 8005dbc:	08005dd9 	.word	0x08005dd9
 8005dc0:	08005dd1 	.word	0x08005dd1
 8005dc4:	08005de1 	.word	0x08005de1
 8005dc8:	2301      	movs	r3, #1
 8005dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dce:	e080      	b.n	8005ed2 <UART_SetConfig+0x1ba>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dd6:	e07c      	b.n	8005ed2 <UART_SetConfig+0x1ba>
 8005dd8:	2304      	movs	r3, #4
 8005dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dde:	e078      	b.n	8005ed2 <UART_SetConfig+0x1ba>
 8005de0:	2308      	movs	r3, #8
 8005de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005de6:	e074      	b.n	8005ed2 <UART_SetConfig+0x1ba>
 8005de8:	2310      	movs	r3, #16
 8005dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dee:	e070      	b.n	8005ed2 <UART_SetConfig+0x1ba>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a8c      	ldr	r2, [pc, #560]	@ (8006028 <UART_SetConfig+0x310>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d138      	bne.n	8005e6c <UART_SetConfig+0x154>
 8005dfa:	4b8a      	ldr	r3, [pc, #552]	@ (8006024 <UART_SetConfig+0x30c>)
 8005dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e00:	f003 030c 	and.w	r3, r3, #12
 8005e04:	2b0c      	cmp	r3, #12
 8005e06:	d82d      	bhi.n	8005e64 <UART_SetConfig+0x14c>
 8005e08:	a201      	add	r2, pc, #4	@ (adr r2, 8005e10 <UART_SetConfig+0xf8>)
 8005e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0e:	bf00      	nop
 8005e10:	08005e45 	.word	0x08005e45
 8005e14:	08005e65 	.word	0x08005e65
 8005e18:	08005e65 	.word	0x08005e65
 8005e1c:	08005e65 	.word	0x08005e65
 8005e20:	08005e55 	.word	0x08005e55
 8005e24:	08005e65 	.word	0x08005e65
 8005e28:	08005e65 	.word	0x08005e65
 8005e2c:	08005e65 	.word	0x08005e65
 8005e30:	08005e4d 	.word	0x08005e4d
 8005e34:	08005e65 	.word	0x08005e65
 8005e38:	08005e65 	.word	0x08005e65
 8005e3c:	08005e65 	.word	0x08005e65
 8005e40:	08005e5d 	.word	0x08005e5d
 8005e44:	2300      	movs	r3, #0
 8005e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e4a:	e042      	b.n	8005ed2 <UART_SetConfig+0x1ba>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e52:	e03e      	b.n	8005ed2 <UART_SetConfig+0x1ba>
 8005e54:	2304      	movs	r3, #4
 8005e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e5a:	e03a      	b.n	8005ed2 <UART_SetConfig+0x1ba>
 8005e5c:	2308      	movs	r3, #8
 8005e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e62:	e036      	b.n	8005ed2 <UART_SetConfig+0x1ba>
 8005e64:	2310      	movs	r3, #16
 8005e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e6a:	e032      	b.n	8005ed2 <UART_SetConfig+0x1ba>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a6a      	ldr	r2, [pc, #424]	@ (800601c <UART_SetConfig+0x304>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d12a      	bne.n	8005ecc <UART_SetConfig+0x1b4>
 8005e76:	4b6b      	ldr	r3, [pc, #428]	@ (8006024 <UART_SetConfig+0x30c>)
 8005e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e84:	d01a      	beq.n	8005ebc <UART_SetConfig+0x1a4>
 8005e86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e8a:	d81b      	bhi.n	8005ec4 <UART_SetConfig+0x1ac>
 8005e8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e90:	d00c      	beq.n	8005eac <UART_SetConfig+0x194>
 8005e92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e96:	d815      	bhi.n	8005ec4 <UART_SetConfig+0x1ac>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <UART_SetConfig+0x18c>
 8005e9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ea0:	d008      	beq.n	8005eb4 <UART_SetConfig+0x19c>
 8005ea2:	e00f      	b.n	8005ec4 <UART_SetConfig+0x1ac>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eaa:	e012      	b.n	8005ed2 <UART_SetConfig+0x1ba>
 8005eac:	2302      	movs	r3, #2
 8005eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eb2:	e00e      	b.n	8005ed2 <UART_SetConfig+0x1ba>
 8005eb4:	2304      	movs	r3, #4
 8005eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eba:	e00a      	b.n	8005ed2 <UART_SetConfig+0x1ba>
 8005ebc:	2308      	movs	r3, #8
 8005ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ec2:	e006      	b.n	8005ed2 <UART_SetConfig+0x1ba>
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eca:	e002      	b.n	8005ed2 <UART_SetConfig+0x1ba>
 8005ecc:	2310      	movs	r3, #16
 8005ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a51      	ldr	r2, [pc, #324]	@ (800601c <UART_SetConfig+0x304>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d17a      	bne.n	8005fd2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005edc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d824      	bhi.n	8005f2e <UART_SetConfig+0x216>
 8005ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8005eec <UART_SetConfig+0x1d4>)
 8005ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eea:	bf00      	nop
 8005eec:	08005f11 	.word	0x08005f11
 8005ef0:	08005f2f 	.word	0x08005f2f
 8005ef4:	08005f19 	.word	0x08005f19
 8005ef8:	08005f2f 	.word	0x08005f2f
 8005efc:	08005f1f 	.word	0x08005f1f
 8005f00:	08005f2f 	.word	0x08005f2f
 8005f04:	08005f2f 	.word	0x08005f2f
 8005f08:	08005f2f 	.word	0x08005f2f
 8005f0c:	08005f27 	.word	0x08005f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f10:	f7fd fc62 	bl	80037d8 <HAL_RCC_GetPCLK1Freq>
 8005f14:	61f8      	str	r0, [r7, #28]
        break;
 8005f16:	e010      	b.n	8005f3a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f18:	4b44      	ldr	r3, [pc, #272]	@ (800602c <UART_SetConfig+0x314>)
 8005f1a:	61fb      	str	r3, [r7, #28]
        break;
 8005f1c:	e00d      	b.n	8005f3a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f1e:	f7fd fbc3 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8005f22:	61f8      	str	r0, [r7, #28]
        break;
 8005f24:	e009      	b.n	8005f3a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f2a:	61fb      	str	r3, [r7, #28]
        break;
 8005f2c:	e005      	b.n	8005f3a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 8107 	beq.w	8006150 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	4613      	mov	r3, r2
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	4413      	add	r3, r2
 8005f4c:	69fa      	ldr	r2, [r7, #28]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d305      	bcc.n	8005f5e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f58:	69fa      	ldr	r2, [r7, #28]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d903      	bls.n	8005f66 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f64:	e0f4      	b.n	8006150 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	461c      	mov	r4, r3
 8005f6c:	4615      	mov	r5, r2
 8005f6e:	f04f 0200 	mov.w	r2, #0
 8005f72:	f04f 0300 	mov.w	r3, #0
 8005f76:	022b      	lsls	r3, r5, #8
 8005f78:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f7c:	0222      	lsls	r2, r4, #8
 8005f7e:	68f9      	ldr	r1, [r7, #12]
 8005f80:	6849      	ldr	r1, [r1, #4]
 8005f82:	0849      	lsrs	r1, r1, #1
 8005f84:	2000      	movs	r0, #0
 8005f86:	4688      	mov	r8, r1
 8005f88:	4681      	mov	r9, r0
 8005f8a:	eb12 0a08 	adds.w	sl, r2, r8
 8005f8e:	eb43 0b09 	adc.w	fp, r3, r9
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	603b      	str	r3, [r7, #0]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fa0:	4650      	mov	r0, sl
 8005fa2:	4659      	mov	r1, fp
 8005fa4:	f7fa fe00 	bl	8000ba8 <__aeabi_uldivmod>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4613      	mov	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fb6:	d308      	bcc.n	8005fca <UART_SetConfig+0x2b2>
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fbe:	d204      	bcs.n	8005fca <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	60da      	str	r2, [r3, #12]
 8005fc8:	e0c2      	b.n	8006150 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005fd0:	e0be      	b.n	8006150 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fda:	d16a      	bne.n	80060b2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005fdc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d834      	bhi.n	800604e <UART_SetConfig+0x336>
 8005fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8005fec <UART_SetConfig+0x2d4>)
 8005fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fea:	bf00      	nop
 8005fec:	08006011 	.word	0x08006011
 8005ff0:	08006031 	.word	0x08006031
 8005ff4:	08006039 	.word	0x08006039
 8005ff8:	0800604f 	.word	0x0800604f
 8005ffc:	0800603f 	.word	0x0800603f
 8006000:	0800604f 	.word	0x0800604f
 8006004:	0800604f 	.word	0x0800604f
 8006008:	0800604f 	.word	0x0800604f
 800600c:	08006047 	.word	0x08006047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006010:	f7fd fbe2 	bl	80037d8 <HAL_RCC_GetPCLK1Freq>
 8006014:	61f8      	str	r0, [r7, #28]
        break;
 8006016:	e020      	b.n	800605a <UART_SetConfig+0x342>
 8006018:	efff69f3 	.word	0xefff69f3
 800601c:	40008000 	.word	0x40008000
 8006020:	40013800 	.word	0x40013800
 8006024:	40021000 	.word	0x40021000
 8006028:	40004400 	.word	0x40004400
 800602c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006030:	f7fd fbe8 	bl	8003804 <HAL_RCC_GetPCLK2Freq>
 8006034:	61f8      	str	r0, [r7, #28]
        break;
 8006036:	e010      	b.n	800605a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006038:	4b4c      	ldr	r3, [pc, #304]	@ (800616c <UART_SetConfig+0x454>)
 800603a:	61fb      	str	r3, [r7, #28]
        break;
 800603c:	e00d      	b.n	800605a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800603e:	f7fd fb33 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8006042:	61f8      	str	r0, [r7, #28]
        break;
 8006044:	e009      	b.n	800605a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006046:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800604a:	61fb      	str	r3, [r7, #28]
        break;
 800604c:	e005      	b.n	800605a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006058:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d077      	beq.n	8006150 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	005a      	lsls	r2, r3, #1
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	085b      	lsrs	r3, r3, #1
 800606a:	441a      	add	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	fbb2 f3f3 	udiv	r3, r2, r3
 8006074:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	2b0f      	cmp	r3, #15
 800607a:	d916      	bls.n	80060aa <UART_SetConfig+0x392>
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006082:	d212      	bcs.n	80060aa <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	b29b      	uxth	r3, r3
 8006088:	f023 030f 	bic.w	r3, r3, #15
 800608c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	085b      	lsrs	r3, r3, #1
 8006092:	b29b      	uxth	r3, r3
 8006094:	f003 0307 	and.w	r3, r3, #7
 8006098:	b29a      	uxth	r2, r3
 800609a:	8afb      	ldrh	r3, [r7, #22]
 800609c:	4313      	orrs	r3, r2
 800609e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	8afa      	ldrh	r2, [r7, #22]
 80060a6:	60da      	str	r2, [r3, #12]
 80060a8:	e052      	b.n	8006150 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80060b0:	e04e      	b.n	8006150 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80060b6:	2b08      	cmp	r3, #8
 80060b8:	d827      	bhi.n	800610a <UART_SetConfig+0x3f2>
 80060ba:	a201      	add	r2, pc, #4	@ (adr r2, 80060c0 <UART_SetConfig+0x3a8>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	080060e5 	.word	0x080060e5
 80060c4:	080060ed 	.word	0x080060ed
 80060c8:	080060f5 	.word	0x080060f5
 80060cc:	0800610b 	.word	0x0800610b
 80060d0:	080060fb 	.word	0x080060fb
 80060d4:	0800610b 	.word	0x0800610b
 80060d8:	0800610b 	.word	0x0800610b
 80060dc:	0800610b 	.word	0x0800610b
 80060e0:	08006103 	.word	0x08006103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060e4:	f7fd fb78 	bl	80037d8 <HAL_RCC_GetPCLK1Freq>
 80060e8:	61f8      	str	r0, [r7, #28]
        break;
 80060ea:	e014      	b.n	8006116 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060ec:	f7fd fb8a 	bl	8003804 <HAL_RCC_GetPCLK2Freq>
 80060f0:	61f8      	str	r0, [r7, #28]
        break;
 80060f2:	e010      	b.n	8006116 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060f4:	4b1d      	ldr	r3, [pc, #116]	@ (800616c <UART_SetConfig+0x454>)
 80060f6:	61fb      	str	r3, [r7, #28]
        break;
 80060f8:	e00d      	b.n	8006116 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060fa:	f7fd fad5 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 80060fe:	61f8      	str	r0, [r7, #28]
        break;
 8006100:	e009      	b.n	8006116 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006106:	61fb      	str	r3, [r7, #28]
        break;
 8006108:	e005      	b.n	8006116 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006114:	bf00      	nop
    }

    if (pclk != 0U)
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d019      	beq.n	8006150 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	085a      	lsrs	r2, r3, #1
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	441a      	add	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	fbb2 f3f3 	udiv	r3, r2, r3
 800612e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	2b0f      	cmp	r3, #15
 8006134:	d909      	bls.n	800614a <UART_SetConfig+0x432>
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800613c:	d205      	bcs.n	800614a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	b29a      	uxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	60da      	str	r2, [r3, #12]
 8006148:	e002      	b.n	8006150 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800615c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006160:	4618      	mov	r0, r3
 8006162:	3728      	adds	r7, #40	@ 0x28
 8006164:	46bd      	mov	sp, r7
 8006166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800616a:	bf00      	nop
 800616c:	00f42400 	.word	0x00f42400

08006170 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617c:	f003 0308 	and.w	r3, r3, #8
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00a      	beq.n	800619a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00a      	beq.n	80061bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00a      	beq.n	80061de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e2:	f003 0304 	and.w	r3, r3, #4
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00a      	beq.n	8006200 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006204:	f003 0310 	and.w	r3, r3, #16
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00a      	beq.n	8006222 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006226:	f003 0320 	and.w	r3, r3, #32
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00a      	beq.n	8006244 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800624c:	2b00      	cmp	r3, #0
 800624e:	d01a      	beq.n	8006286 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800626e:	d10a      	bne.n	8006286 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	430a      	orrs	r2, r1
 80062a6:	605a      	str	r2, [r3, #4]
  }
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b098      	sub	sp, #96	@ 0x60
 80062b8:	af02      	add	r7, sp, #8
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062c4:	f7fc f8b0 	bl	8002428 <HAL_GetTick>
 80062c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0308 	and.w	r3, r3, #8
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d12e      	bne.n	8006336 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062e0:	2200      	movs	r2, #0
 80062e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f88c 	bl	8006404 <UART_WaitOnFlagUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d021      	beq.n	8006336 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006302:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006306:	653b      	str	r3, [r7, #80]	@ 0x50
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	461a      	mov	r2, r3
 800630e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006310:	647b      	str	r3, [r7, #68]	@ 0x44
 8006312:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006316:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006318:	e841 2300 	strex	r3, r2, [r1]
 800631c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800631e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e6      	bne.n	80062f2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2220      	movs	r2, #32
 8006328:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e062      	b.n	80063fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0304 	and.w	r3, r3, #4
 8006340:	2b04      	cmp	r3, #4
 8006342:	d149      	bne.n	80063d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006344:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800634c:	2200      	movs	r2, #0
 800634e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f856 	bl	8006404 <UART_WaitOnFlagUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d03c      	beq.n	80063d8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006366:	e853 3f00 	ldrex	r3, [r3]
 800636a:	623b      	str	r3, [r7, #32]
   return(result);
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006372:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800637c:	633b      	str	r3, [r7, #48]	@ 0x30
 800637e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006380:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006384:	e841 2300 	strex	r3, r2, [r1]
 8006388:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800638a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e6      	bne.n	800635e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3308      	adds	r3, #8
 8006396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	e853 3f00 	ldrex	r3, [r3]
 800639e:	60fb      	str	r3, [r7, #12]
   return(result);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 0301 	bic.w	r3, r3, #1
 80063a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3308      	adds	r3, #8
 80063ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063b0:	61fa      	str	r2, [r7, #28]
 80063b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	69b9      	ldr	r1, [r7, #24]
 80063b6:	69fa      	ldr	r2, [r7, #28]
 80063b8:	e841 2300 	strex	r3, r2, [r1]
 80063bc:	617b      	str	r3, [r7, #20]
   return(result);
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1e5      	bne.n	8006390 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e011      	b.n	80063fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2220      	movs	r2, #32
 80063dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2220      	movs	r2, #32
 80063e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3758      	adds	r7, #88	@ 0x58
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	603b      	str	r3, [r7, #0]
 8006410:	4613      	mov	r3, r2
 8006412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006414:	e04f      	b.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641c:	d04b      	beq.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800641e:	f7fc f803 	bl	8002428 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	429a      	cmp	r2, r3
 800642c:	d302      	bcc.n	8006434 <UART_WaitOnFlagUntilTimeout+0x30>
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e04e      	b.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0304 	and.w	r3, r3, #4
 8006442:	2b00      	cmp	r3, #0
 8006444:	d037      	beq.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b80      	cmp	r3, #128	@ 0x80
 800644a:	d034      	beq.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2b40      	cmp	r3, #64	@ 0x40
 8006450:	d031      	beq.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	f003 0308 	and.w	r3, r3, #8
 800645c:	2b08      	cmp	r3, #8
 800645e:	d110      	bne.n	8006482 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2208      	movs	r2, #8
 8006466:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f838 	bl	80064de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2208      	movs	r2, #8
 8006472:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e029      	b.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800648c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006490:	d111      	bne.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800649a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 f81e 	bl	80064de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2220      	movs	r2, #32
 80064a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e00f      	b.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69da      	ldr	r2, [r3, #28]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	4013      	ands	r3, r2
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	bf0c      	ite	eq
 80064c6:	2301      	moveq	r3, #1
 80064c8:	2300      	movne	r3, #0
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	79fb      	ldrb	r3, [r7, #7]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d0a0      	beq.n	8006416 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064de:	b480      	push	{r7}
 80064e0:	b095      	sub	sp, #84	@ 0x54
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ee:	e853 3f00 	ldrex	r3, [r3]
 80064f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80064f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	461a      	mov	r2, r3
 8006502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006504:	643b      	str	r3, [r7, #64]	@ 0x40
 8006506:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006508:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800650a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800650c:	e841 2300 	strex	r3, r2, [r1]
 8006510:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1e6      	bne.n	80064e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3308      	adds	r3, #8
 800651e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	e853 3f00 	ldrex	r3, [r3]
 8006526:	61fb      	str	r3, [r7, #28]
   return(result);
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	f023 0301 	bic.w	r3, r3, #1
 800652e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3308      	adds	r3, #8
 8006536:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006538:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800653a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800653e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006540:	e841 2300 	strex	r3, r2, [r1]
 8006544:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1e5      	bne.n	8006518 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006550:	2b01      	cmp	r3, #1
 8006552:	d118      	bne.n	8006586 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	60bb      	str	r3, [r7, #8]
   return(result);
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f023 0310 	bic.w	r3, r3, #16
 8006568:	647b      	str	r3, [r7, #68]	@ 0x44
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	461a      	mov	r2, r3
 8006570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006572:	61bb      	str	r3, [r7, #24]
 8006574:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006576:	6979      	ldr	r1, [r7, #20]
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	e841 2300 	strex	r3, r2, [r1]
 800657e:	613b      	str	r3, [r7, #16]
   return(result);
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1e6      	bne.n	8006554 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2220      	movs	r2, #32
 800658a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800659a:	bf00      	nop
 800659c:	3754      	adds	r7, #84	@ 0x54
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <__cvt>:
 80065a6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065aa:	ec57 6b10 	vmov	r6, r7, d0
 80065ae:	2f00      	cmp	r7, #0
 80065b0:	460c      	mov	r4, r1
 80065b2:	4619      	mov	r1, r3
 80065b4:	463b      	mov	r3, r7
 80065b6:	bfbb      	ittet	lt
 80065b8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80065bc:	461f      	movlt	r7, r3
 80065be:	2300      	movge	r3, #0
 80065c0:	232d      	movlt	r3, #45	@ 0x2d
 80065c2:	700b      	strb	r3, [r1, #0]
 80065c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065c6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80065ca:	4691      	mov	r9, r2
 80065cc:	f023 0820 	bic.w	r8, r3, #32
 80065d0:	bfbc      	itt	lt
 80065d2:	4632      	movlt	r2, r6
 80065d4:	4616      	movlt	r6, r2
 80065d6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80065da:	d005      	beq.n	80065e8 <__cvt+0x42>
 80065dc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80065e0:	d100      	bne.n	80065e4 <__cvt+0x3e>
 80065e2:	3401      	adds	r4, #1
 80065e4:	2102      	movs	r1, #2
 80065e6:	e000      	b.n	80065ea <__cvt+0x44>
 80065e8:	2103      	movs	r1, #3
 80065ea:	ab03      	add	r3, sp, #12
 80065ec:	9301      	str	r3, [sp, #4]
 80065ee:	ab02      	add	r3, sp, #8
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	ec47 6b10 	vmov	d0, r6, r7
 80065f6:	4653      	mov	r3, sl
 80065f8:	4622      	mov	r2, r4
 80065fa:	f000 fe4d 	bl	8007298 <_dtoa_r>
 80065fe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006602:	4605      	mov	r5, r0
 8006604:	d119      	bne.n	800663a <__cvt+0x94>
 8006606:	f019 0f01 	tst.w	r9, #1
 800660a:	d00e      	beq.n	800662a <__cvt+0x84>
 800660c:	eb00 0904 	add.w	r9, r0, r4
 8006610:	2200      	movs	r2, #0
 8006612:	2300      	movs	r3, #0
 8006614:	4630      	mov	r0, r6
 8006616:	4639      	mov	r1, r7
 8006618:	f7fa fa56 	bl	8000ac8 <__aeabi_dcmpeq>
 800661c:	b108      	cbz	r0, 8006622 <__cvt+0x7c>
 800661e:	f8cd 900c 	str.w	r9, [sp, #12]
 8006622:	2230      	movs	r2, #48	@ 0x30
 8006624:	9b03      	ldr	r3, [sp, #12]
 8006626:	454b      	cmp	r3, r9
 8006628:	d31e      	bcc.n	8006668 <__cvt+0xc2>
 800662a:	9b03      	ldr	r3, [sp, #12]
 800662c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800662e:	1b5b      	subs	r3, r3, r5
 8006630:	4628      	mov	r0, r5
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	b004      	add	sp, #16
 8006636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800663e:	eb00 0904 	add.w	r9, r0, r4
 8006642:	d1e5      	bne.n	8006610 <__cvt+0x6a>
 8006644:	7803      	ldrb	r3, [r0, #0]
 8006646:	2b30      	cmp	r3, #48	@ 0x30
 8006648:	d10a      	bne.n	8006660 <__cvt+0xba>
 800664a:	2200      	movs	r2, #0
 800664c:	2300      	movs	r3, #0
 800664e:	4630      	mov	r0, r6
 8006650:	4639      	mov	r1, r7
 8006652:	f7fa fa39 	bl	8000ac8 <__aeabi_dcmpeq>
 8006656:	b918      	cbnz	r0, 8006660 <__cvt+0xba>
 8006658:	f1c4 0401 	rsb	r4, r4, #1
 800665c:	f8ca 4000 	str.w	r4, [sl]
 8006660:	f8da 3000 	ldr.w	r3, [sl]
 8006664:	4499      	add	r9, r3
 8006666:	e7d3      	b.n	8006610 <__cvt+0x6a>
 8006668:	1c59      	adds	r1, r3, #1
 800666a:	9103      	str	r1, [sp, #12]
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	e7d9      	b.n	8006624 <__cvt+0x7e>

08006670 <__exponent>:
 8006670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006672:	2900      	cmp	r1, #0
 8006674:	bfba      	itte	lt
 8006676:	4249      	neglt	r1, r1
 8006678:	232d      	movlt	r3, #45	@ 0x2d
 800667a:	232b      	movge	r3, #43	@ 0x2b
 800667c:	2909      	cmp	r1, #9
 800667e:	7002      	strb	r2, [r0, #0]
 8006680:	7043      	strb	r3, [r0, #1]
 8006682:	dd29      	ble.n	80066d8 <__exponent+0x68>
 8006684:	f10d 0307 	add.w	r3, sp, #7
 8006688:	461d      	mov	r5, r3
 800668a:	270a      	movs	r7, #10
 800668c:	461a      	mov	r2, r3
 800668e:	fbb1 f6f7 	udiv	r6, r1, r7
 8006692:	fb07 1416 	mls	r4, r7, r6, r1
 8006696:	3430      	adds	r4, #48	@ 0x30
 8006698:	f802 4c01 	strb.w	r4, [r2, #-1]
 800669c:	460c      	mov	r4, r1
 800669e:	2c63      	cmp	r4, #99	@ 0x63
 80066a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80066a4:	4631      	mov	r1, r6
 80066a6:	dcf1      	bgt.n	800668c <__exponent+0x1c>
 80066a8:	3130      	adds	r1, #48	@ 0x30
 80066aa:	1e94      	subs	r4, r2, #2
 80066ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 80066b0:	1c41      	adds	r1, r0, #1
 80066b2:	4623      	mov	r3, r4
 80066b4:	42ab      	cmp	r3, r5
 80066b6:	d30a      	bcc.n	80066ce <__exponent+0x5e>
 80066b8:	f10d 0309 	add.w	r3, sp, #9
 80066bc:	1a9b      	subs	r3, r3, r2
 80066be:	42ac      	cmp	r4, r5
 80066c0:	bf88      	it	hi
 80066c2:	2300      	movhi	r3, #0
 80066c4:	3302      	adds	r3, #2
 80066c6:	4403      	add	r3, r0
 80066c8:	1a18      	subs	r0, r3, r0
 80066ca:	b003      	add	sp, #12
 80066cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 80066d2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80066d6:	e7ed      	b.n	80066b4 <__exponent+0x44>
 80066d8:	2330      	movs	r3, #48	@ 0x30
 80066da:	3130      	adds	r1, #48	@ 0x30
 80066dc:	7083      	strb	r3, [r0, #2]
 80066de:	70c1      	strb	r1, [r0, #3]
 80066e0:	1d03      	adds	r3, r0, #4
 80066e2:	e7f1      	b.n	80066c8 <__exponent+0x58>

080066e4 <_printf_float>:
 80066e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e8:	b08d      	sub	sp, #52	@ 0x34
 80066ea:	460c      	mov	r4, r1
 80066ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80066f0:	4616      	mov	r6, r2
 80066f2:	461f      	mov	r7, r3
 80066f4:	4605      	mov	r5, r0
 80066f6:	f000 fccd 	bl	8007094 <_localeconv_r>
 80066fa:	6803      	ldr	r3, [r0, #0]
 80066fc:	9304      	str	r3, [sp, #16]
 80066fe:	4618      	mov	r0, r3
 8006700:	f7f9 fdb6 	bl	8000270 <strlen>
 8006704:	2300      	movs	r3, #0
 8006706:	930a      	str	r3, [sp, #40]	@ 0x28
 8006708:	f8d8 3000 	ldr.w	r3, [r8]
 800670c:	9005      	str	r0, [sp, #20]
 800670e:	3307      	adds	r3, #7
 8006710:	f023 0307 	bic.w	r3, r3, #7
 8006714:	f103 0208 	add.w	r2, r3, #8
 8006718:	f894 a018 	ldrb.w	sl, [r4, #24]
 800671c:	f8d4 b000 	ldr.w	fp, [r4]
 8006720:	f8c8 2000 	str.w	r2, [r8]
 8006724:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006728:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800672c:	9307      	str	r3, [sp, #28]
 800672e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006732:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006736:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800673a:	4b9c      	ldr	r3, [pc, #624]	@ (80069ac <_printf_float+0x2c8>)
 800673c:	f04f 32ff 	mov.w	r2, #4294967295
 8006740:	f7fa f9f4 	bl	8000b2c <__aeabi_dcmpun>
 8006744:	bb70      	cbnz	r0, 80067a4 <_printf_float+0xc0>
 8006746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800674a:	4b98      	ldr	r3, [pc, #608]	@ (80069ac <_printf_float+0x2c8>)
 800674c:	f04f 32ff 	mov.w	r2, #4294967295
 8006750:	f7fa f9ce 	bl	8000af0 <__aeabi_dcmple>
 8006754:	bb30      	cbnz	r0, 80067a4 <_printf_float+0xc0>
 8006756:	2200      	movs	r2, #0
 8006758:	2300      	movs	r3, #0
 800675a:	4640      	mov	r0, r8
 800675c:	4649      	mov	r1, r9
 800675e:	f7fa f9bd 	bl	8000adc <__aeabi_dcmplt>
 8006762:	b110      	cbz	r0, 800676a <_printf_float+0x86>
 8006764:	232d      	movs	r3, #45	@ 0x2d
 8006766:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800676a:	4a91      	ldr	r2, [pc, #580]	@ (80069b0 <_printf_float+0x2cc>)
 800676c:	4b91      	ldr	r3, [pc, #580]	@ (80069b4 <_printf_float+0x2d0>)
 800676e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006772:	bf94      	ite	ls
 8006774:	4690      	movls	r8, r2
 8006776:	4698      	movhi	r8, r3
 8006778:	2303      	movs	r3, #3
 800677a:	6123      	str	r3, [r4, #16]
 800677c:	f02b 0304 	bic.w	r3, fp, #4
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	f04f 0900 	mov.w	r9, #0
 8006786:	9700      	str	r7, [sp, #0]
 8006788:	4633      	mov	r3, r6
 800678a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800678c:	4621      	mov	r1, r4
 800678e:	4628      	mov	r0, r5
 8006790:	f000 f9d2 	bl	8006b38 <_printf_common>
 8006794:	3001      	adds	r0, #1
 8006796:	f040 808d 	bne.w	80068b4 <_printf_float+0x1d0>
 800679a:	f04f 30ff 	mov.w	r0, #4294967295
 800679e:	b00d      	add	sp, #52	@ 0x34
 80067a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a4:	4642      	mov	r2, r8
 80067a6:	464b      	mov	r3, r9
 80067a8:	4640      	mov	r0, r8
 80067aa:	4649      	mov	r1, r9
 80067ac:	f7fa f9be 	bl	8000b2c <__aeabi_dcmpun>
 80067b0:	b140      	cbz	r0, 80067c4 <_printf_float+0xe0>
 80067b2:	464b      	mov	r3, r9
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	bfbc      	itt	lt
 80067b8:	232d      	movlt	r3, #45	@ 0x2d
 80067ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80067be:	4a7e      	ldr	r2, [pc, #504]	@ (80069b8 <_printf_float+0x2d4>)
 80067c0:	4b7e      	ldr	r3, [pc, #504]	@ (80069bc <_printf_float+0x2d8>)
 80067c2:	e7d4      	b.n	800676e <_printf_float+0x8a>
 80067c4:	6863      	ldr	r3, [r4, #4]
 80067c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80067ca:	9206      	str	r2, [sp, #24]
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	d13b      	bne.n	8006848 <_printf_float+0x164>
 80067d0:	2306      	movs	r3, #6
 80067d2:	6063      	str	r3, [r4, #4]
 80067d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80067d8:	2300      	movs	r3, #0
 80067da:	6022      	str	r2, [r4, #0]
 80067dc:	9303      	str	r3, [sp, #12]
 80067de:	ab0a      	add	r3, sp, #40	@ 0x28
 80067e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80067e4:	ab09      	add	r3, sp, #36	@ 0x24
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	6861      	ldr	r1, [r4, #4]
 80067ea:	ec49 8b10 	vmov	d0, r8, r9
 80067ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80067f2:	4628      	mov	r0, r5
 80067f4:	f7ff fed7 	bl	80065a6 <__cvt>
 80067f8:	9b06      	ldr	r3, [sp, #24]
 80067fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80067fc:	2b47      	cmp	r3, #71	@ 0x47
 80067fe:	4680      	mov	r8, r0
 8006800:	d129      	bne.n	8006856 <_printf_float+0x172>
 8006802:	1cc8      	adds	r0, r1, #3
 8006804:	db02      	blt.n	800680c <_printf_float+0x128>
 8006806:	6863      	ldr	r3, [r4, #4]
 8006808:	4299      	cmp	r1, r3
 800680a:	dd41      	ble.n	8006890 <_printf_float+0x1ac>
 800680c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006810:	fa5f fa8a 	uxtb.w	sl, sl
 8006814:	3901      	subs	r1, #1
 8006816:	4652      	mov	r2, sl
 8006818:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800681c:	9109      	str	r1, [sp, #36]	@ 0x24
 800681e:	f7ff ff27 	bl	8006670 <__exponent>
 8006822:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006824:	1813      	adds	r3, r2, r0
 8006826:	2a01      	cmp	r2, #1
 8006828:	4681      	mov	r9, r0
 800682a:	6123      	str	r3, [r4, #16]
 800682c:	dc02      	bgt.n	8006834 <_printf_float+0x150>
 800682e:	6822      	ldr	r2, [r4, #0]
 8006830:	07d2      	lsls	r2, r2, #31
 8006832:	d501      	bpl.n	8006838 <_printf_float+0x154>
 8006834:	3301      	adds	r3, #1
 8006836:	6123      	str	r3, [r4, #16]
 8006838:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800683c:	2b00      	cmp	r3, #0
 800683e:	d0a2      	beq.n	8006786 <_printf_float+0xa2>
 8006840:	232d      	movs	r3, #45	@ 0x2d
 8006842:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006846:	e79e      	b.n	8006786 <_printf_float+0xa2>
 8006848:	9a06      	ldr	r2, [sp, #24]
 800684a:	2a47      	cmp	r2, #71	@ 0x47
 800684c:	d1c2      	bne.n	80067d4 <_printf_float+0xf0>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1c0      	bne.n	80067d4 <_printf_float+0xf0>
 8006852:	2301      	movs	r3, #1
 8006854:	e7bd      	b.n	80067d2 <_printf_float+0xee>
 8006856:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800685a:	d9db      	bls.n	8006814 <_printf_float+0x130>
 800685c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006860:	d118      	bne.n	8006894 <_printf_float+0x1b0>
 8006862:	2900      	cmp	r1, #0
 8006864:	6863      	ldr	r3, [r4, #4]
 8006866:	dd0b      	ble.n	8006880 <_printf_float+0x19c>
 8006868:	6121      	str	r1, [r4, #16]
 800686a:	b913      	cbnz	r3, 8006872 <_printf_float+0x18e>
 800686c:	6822      	ldr	r2, [r4, #0]
 800686e:	07d0      	lsls	r0, r2, #31
 8006870:	d502      	bpl.n	8006878 <_printf_float+0x194>
 8006872:	3301      	adds	r3, #1
 8006874:	440b      	add	r3, r1
 8006876:	6123      	str	r3, [r4, #16]
 8006878:	65a1      	str	r1, [r4, #88]	@ 0x58
 800687a:	f04f 0900 	mov.w	r9, #0
 800687e:	e7db      	b.n	8006838 <_printf_float+0x154>
 8006880:	b913      	cbnz	r3, 8006888 <_printf_float+0x1a4>
 8006882:	6822      	ldr	r2, [r4, #0]
 8006884:	07d2      	lsls	r2, r2, #31
 8006886:	d501      	bpl.n	800688c <_printf_float+0x1a8>
 8006888:	3302      	adds	r3, #2
 800688a:	e7f4      	b.n	8006876 <_printf_float+0x192>
 800688c:	2301      	movs	r3, #1
 800688e:	e7f2      	b.n	8006876 <_printf_float+0x192>
 8006890:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006896:	4299      	cmp	r1, r3
 8006898:	db05      	blt.n	80068a6 <_printf_float+0x1c2>
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	6121      	str	r1, [r4, #16]
 800689e:	07d8      	lsls	r0, r3, #31
 80068a0:	d5ea      	bpl.n	8006878 <_printf_float+0x194>
 80068a2:	1c4b      	adds	r3, r1, #1
 80068a4:	e7e7      	b.n	8006876 <_printf_float+0x192>
 80068a6:	2900      	cmp	r1, #0
 80068a8:	bfd4      	ite	le
 80068aa:	f1c1 0202 	rsble	r2, r1, #2
 80068ae:	2201      	movgt	r2, #1
 80068b0:	4413      	add	r3, r2
 80068b2:	e7e0      	b.n	8006876 <_printf_float+0x192>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	055a      	lsls	r2, r3, #21
 80068b8:	d407      	bmi.n	80068ca <_printf_float+0x1e6>
 80068ba:	6923      	ldr	r3, [r4, #16]
 80068bc:	4642      	mov	r2, r8
 80068be:	4631      	mov	r1, r6
 80068c0:	4628      	mov	r0, r5
 80068c2:	47b8      	blx	r7
 80068c4:	3001      	adds	r0, #1
 80068c6:	d12b      	bne.n	8006920 <_printf_float+0x23c>
 80068c8:	e767      	b.n	800679a <_printf_float+0xb6>
 80068ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068ce:	f240 80dd 	bls.w	8006a8c <_printf_float+0x3a8>
 80068d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80068d6:	2200      	movs	r2, #0
 80068d8:	2300      	movs	r3, #0
 80068da:	f7fa f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 80068de:	2800      	cmp	r0, #0
 80068e0:	d033      	beq.n	800694a <_printf_float+0x266>
 80068e2:	4a37      	ldr	r2, [pc, #220]	@ (80069c0 <_printf_float+0x2dc>)
 80068e4:	2301      	movs	r3, #1
 80068e6:	4631      	mov	r1, r6
 80068e8:	4628      	mov	r0, r5
 80068ea:	47b8      	blx	r7
 80068ec:	3001      	adds	r0, #1
 80068ee:	f43f af54 	beq.w	800679a <_printf_float+0xb6>
 80068f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80068f6:	4543      	cmp	r3, r8
 80068f8:	db02      	blt.n	8006900 <_printf_float+0x21c>
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	07d8      	lsls	r0, r3, #31
 80068fe:	d50f      	bpl.n	8006920 <_printf_float+0x23c>
 8006900:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006904:	4631      	mov	r1, r6
 8006906:	4628      	mov	r0, r5
 8006908:	47b8      	blx	r7
 800690a:	3001      	adds	r0, #1
 800690c:	f43f af45 	beq.w	800679a <_printf_float+0xb6>
 8006910:	f04f 0900 	mov.w	r9, #0
 8006914:	f108 38ff 	add.w	r8, r8, #4294967295
 8006918:	f104 0a1a 	add.w	sl, r4, #26
 800691c:	45c8      	cmp	r8, r9
 800691e:	dc09      	bgt.n	8006934 <_printf_float+0x250>
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	079b      	lsls	r3, r3, #30
 8006924:	f100 8103 	bmi.w	8006b2e <_printf_float+0x44a>
 8006928:	68e0      	ldr	r0, [r4, #12]
 800692a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800692c:	4298      	cmp	r0, r3
 800692e:	bfb8      	it	lt
 8006930:	4618      	movlt	r0, r3
 8006932:	e734      	b.n	800679e <_printf_float+0xba>
 8006934:	2301      	movs	r3, #1
 8006936:	4652      	mov	r2, sl
 8006938:	4631      	mov	r1, r6
 800693a:	4628      	mov	r0, r5
 800693c:	47b8      	blx	r7
 800693e:	3001      	adds	r0, #1
 8006940:	f43f af2b 	beq.w	800679a <_printf_float+0xb6>
 8006944:	f109 0901 	add.w	r9, r9, #1
 8006948:	e7e8      	b.n	800691c <_printf_float+0x238>
 800694a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800694c:	2b00      	cmp	r3, #0
 800694e:	dc39      	bgt.n	80069c4 <_printf_float+0x2e0>
 8006950:	4a1b      	ldr	r2, [pc, #108]	@ (80069c0 <_printf_float+0x2dc>)
 8006952:	2301      	movs	r3, #1
 8006954:	4631      	mov	r1, r6
 8006956:	4628      	mov	r0, r5
 8006958:	47b8      	blx	r7
 800695a:	3001      	adds	r0, #1
 800695c:	f43f af1d 	beq.w	800679a <_printf_float+0xb6>
 8006960:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006964:	ea59 0303 	orrs.w	r3, r9, r3
 8006968:	d102      	bne.n	8006970 <_printf_float+0x28c>
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	07d9      	lsls	r1, r3, #31
 800696e:	d5d7      	bpl.n	8006920 <_printf_float+0x23c>
 8006970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006974:	4631      	mov	r1, r6
 8006976:	4628      	mov	r0, r5
 8006978:	47b8      	blx	r7
 800697a:	3001      	adds	r0, #1
 800697c:	f43f af0d 	beq.w	800679a <_printf_float+0xb6>
 8006980:	f04f 0a00 	mov.w	sl, #0
 8006984:	f104 0b1a 	add.w	fp, r4, #26
 8006988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800698a:	425b      	negs	r3, r3
 800698c:	4553      	cmp	r3, sl
 800698e:	dc01      	bgt.n	8006994 <_printf_float+0x2b0>
 8006990:	464b      	mov	r3, r9
 8006992:	e793      	b.n	80068bc <_printf_float+0x1d8>
 8006994:	2301      	movs	r3, #1
 8006996:	465a      	mov	r2, fp
 8006998:	4631      	mov	r1, r6
 800699a:	4628      	mov	r0, r5
 800699c:	47b8      	blx	r7
 800699e:	3001      	adds	r0, #1
 80069a0:	f43f aefb 	beq.w	800679a <_printf_float+0xb6>
 80069a4:	f10a 0a01 	add.w	sl, sl, #1
 80069a8:	e7ee      	b.n	8006988 <_printf_float+0x2a4>
 80069aa:	bf00      	nop
 80069ac:	7fefffff 	.word	0x7fefffff
 80069b0:	0800931c 	.word	0x0800931c
 80069b4:	08009320 	.word	0x08009320
 80069b8:	08009324 	.word	0x08009324
 80069bc:	08009328 	.word	0x08009328
 80069c0:	0800932c 	.word	0x0800932c
 80069c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80069ca:	4553      	cmp	r3, sl
 80069cc:	bfa8      	it	ge
 80069ce:	4653      	movge	r3, sl
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	4699      	mov	r9, r3
 80069d4:	dc36      	bgt.n	8006a44 <_printf_float+0x360>
 80069d6:	f04f 0b00 	mov.w	fp, #0
 80069da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069de:	f104 021a 	add.w	r2, r4, #26
 80069e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069e4:	9306      	str	r3, [sp, #24]
 80069e6:	eba3 0309 	sub.w	r3, r3, r9
 80069ea:	455b      	cmp	r3, fp
 80069ec:	dc31      	bgt.n	8006a52 <_printf_float+0x36e>
 80069ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f0:	459a      	cmp	sl, r3
 80069f2:	dc3a      	bgt.n	8006a6a <_printf_float+0x386>
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	07da      	lsls	r2, r3, #31
 80069f8:	d437      	bmi.n	8006a6a <_printf_float+0x386>
 80069fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069fc:	ebaa 0903 	sub.w	r9, sl, r3
 8006a00:	9b06      	ldr	r3, [sp, #24]
 8006a02:	ebaa 0303 	sub.w	r3, sl, r3
 8006a06:	4599      	cmp	r9, r3
 8006a08:	bfa8      	it	ge
 8006a0a:	4699      	movge	r9, r3
 8006a0c:	f1b9 0f00 	cmp.w	r9, #0
 8006a10:	dc33      	bgt.n	8006a7a <_printf_float+0x396>
 8006a12:	f04f 0800 	mov.w	r8, #0
 8006a16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a1a:	f104 0b1a 	add.w	fp, r4, #26
 8006a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a20:	ebaa 0303 	sub.w	r3, sl, r3
 8006a24:	eba3 0309 	sub.w	r3, r3, r9
 8006a28:	4543      	cmp	r3, r8
 8006a2a:	f77f af79 	ble.w	8006920 <_printf_float+0x23c>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	465a      	mov	r2, fp
 8006a32:	4631      	mov	r1, r6
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b8      	blx	r7
 8006a38:	3001      	adds	r0, #1
 8006a3a:	f43f aeae 	beq.w	800679a <_printf_float+0xb6>
 8006a3e:	f108 0801 	add.w	r8, r8, #1
 8006a42:	e7ec      	b.n	8006a1e <_printf_float+0x33a>
 8006a44:	4642      	mov	r2, r8
 8006a46:	4631      	mov	r1, r6
 8006a48:	4628      	mov	r0, r5
 8006a4a:	47b8      	blx	r7
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d1c2      	bne.n	80069d6 <_printf_float+0x2f2>
 8006a50:	e6a3      	b.n	800679a <_printf_float+0xb6>
 8006a52:	2301      	movs	r3, #1
 8006a54:	4631      	mov	r1, r6
 8006a56:	4628      	mov	r0, r5
 8006a58:	9206      	str	r2, [sp, #24]
 8006a5a:	47b8      	blx	r7
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	f43f ae9c 	beq.w	800679a <_printf_float+0xb6>
 8006a62:	9a06      	ldr	r2, [sp, #24]
 8006a64:	f10b 0b01 	add.w	fp, fp, #1
 8006a68:	e7bb      	b.n	80069e2 <_printf_float+0x2fe>
 8006a6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a6e:	4631      	mov	r1, r6
 8006a70:	4628      	mov	r0, r5
 8006a72:	47b8      	blx	r7
 8006a74:	3001      	adds	r0, #1
 8006a76:	d1c0      	bne.n	80069fa <_printf_float+0x316>
 8006a78:	e68f      	b.n	800679a <_printf_float+0xb6>
 8006a7a:	9a06      	ldr	r2, [sp, #24]
 8006a7c:	464b      	mov	r3, r9
 8006a7e:	4442      	add	r2, r8
 8006a80:	4631      	mov	r1, r6
 8006a82:	4628      	mov	r0, r5
 8006a84:	47b8      	blx	r7
 8006a86:	3001      	adds	r0, #1
 8006a88:	d1c3      	bne.n	8006a12 <_printf_float+0x32e>
 8006a8a:	e686      	b.n	800679a <_printf_float+0xb6>
 8006a8c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a90:	f1ba 0f01 	cmp.w	sl, #1
 8006a94:	dc01      	bgt.n	8006a9a <_printf_float+0x3b6>
 8006a96:	07db      	lsls	r3, r3, #31
 8006a98:	d536      	bpl.n	8006b08 <_printf_float+0x424>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	4642      	mov	r2, r8
 8006a9e:	4631      	mov	r1, r6
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	47b8      	blx	r7
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	f43f ae78 	beq.w	800679a <_printf_float+0xb6>
 8006aaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aae:	4631      	mov	r1, r6
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	47b8      	blx	r7
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	f43f ae70 	beq.w	800679a <_printf_float+0xb6>
 8006aba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ac6:	f7f9 ffff 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aca:	b9c0      	cbnz	r0, 8006afe <_printf_float+0x41a>
 8006acc:	4653      	mov	r3, sl
 8006ace:	f108 0201 	add.w	r2, r8, #1
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	47b8      	blx	r7
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d10c      	bne.n	8006af6 <_printf_float+0x412>
 8006adc:	e65d      	b.n	800679a <_printf_float+0xb6>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	465a      	mov	r2, fp
 8006ae2:	4631      	mov	r1, r6
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	47b8      	blx	r7
 8006ae8:	3001      	adds	r0, #1
 8006aea:	f43f ae56 	beq.w	800679a <_printf_float+0xb6>
 8006aee:	f108 0801 	add.w	r8, r8, #1
 8006af2:	45d0      	cmp	r8, sl
 8006af4:	dbf3      	blt.n	8006ade <_printf_float+0x3fa>
 8006af6:	464b      	mov	r3, r9
 8006af8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006afc:	e6df      	b.n	80068be <_printf_float+0x1da>
 8006afe:	f04f 0800 	mov.w	r8, #0
 8006b02:	f104 0b1a 	add.w	fp, r4, #26
 8006b06:	e7f4      	b.n	8006af2 <_printf_float+0x40e>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	4642      	mov	r2, r8
 8006b0c:	e7e1      	b.n	8006ad2 <_printf_float+0x3ee>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	464a      	mov	r2, r9
 8006b12:	4631      	mov	r1, r6
 8006b14:	4628      	mov	r0, r5
 8006b16:	47b8      	blx	r7
 8006b18:	3001      	adds	r0, #1
 8006b1a:	f43f ae3e 	beq.w	800679a <_printf_float+0xb6>
 8006b1e:	f108 0801 	add.w	r8, r8, #1
 8006b22:	68e3      	ldr	r3, [r4, #12]
 8006b24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b26:	1a5b      	subs	r3, r3, r1
 8006b28:	4543      	cmp	r3, r8
 8006b2a:	dcf0      	bgt.n	8006b0e <_printf_float+0x42a>
 8006b2c:	e6fc      	b.n	8006928 <_printf_float+0x244>
 8006b2e:	f04f 0800 	mov.w	r8, #0
 8006b32:	f104 0919 	add.w	r9, r4, #25
 8006b36:	e7f4      	b.n	8006b22 <_printf_float+0x43e>

08006b38 <_printf_common>:
 8006b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b3c:	4616      	mov	r6, r2
 8006b3e:	4698      	mov	r8, r3
 8006b40:	688a      	ldr	r2, [r1, #8]
 8006b42:	690b      	ldr	r3, [r1, #16]
 8006b44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	bfb8      	it	lt
 8006b4c:	4613      	movlt	r3, r2
 8006b4e:	6033      	str	r3, [r6, #0]
 8006b50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b54:	4607      	mov	r7, r0
 8006b56:	460c      	mov	r4, r1
 8006b58:	b10a      	cbz	r2, 8006b5e <_printf_common+0x26>
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	6033      	str	r3, [r6, #0]
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	0699      	lsls	r1, r3, #26
 8006b62:	bf42      	ittt	mi
 8006b64:	6833      	ldrmi	r3, [r6, #0]
 8006b66:	3302      	addmi	r3, #2
 8006b68:	6033      	strmi	r3, [r6, #0]
 8006b6a:	6825      	ldr	r5, [r4, #0]
 8006b6c:	f015 0506 	ands.w	r5, r5, #6
 8006b70:	d106      	bne.n	8006b80 <_printf_common+0x48>
 8006b72:	f104 0a19 	add.w	sl, r4, #25
 8006b76:	68e3      	ldr	r3, [r4, #12]
 8006b78:	6832      	ldr	r2, [r6, #0]
 8006b7a:	1a9b      	subs	r3, r3, r2
 8006b7c:	42ab      	cmp	r3, r5
 8006b7e:	dc26      	bgt.n	8006bce <_printf_common+0x96>
 8006b80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b84:	6822      	ldr	r2, [r4, #0]
 8006b86:	3b00      	subs	r3, #0
 8006b88:	bf18      	it	ne
 8006b8a:	2301      	movne	r3, #1
 8006b8c:	0692      	lsls	r2, r2, #26
 8006b8e:	d42b      	bmi.n	8006be8 <_printf_common+0xb0>
 8006b90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b94:	4641      	mov	r1, r8
 8006b96:	4638      	mov	r0, r7
 8006b98:	47c8      	blx	r9
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	d01e      	beq.n	8006bdc <_printf_common+0xa4>
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	6922      	ldr	r2, [r4, #16]
 8006ba2:	f003 0306 	and.w	r3, r3, #6
 8006ba6:	2b04      	cmp	r3, #4
 8006ba8:	bf02      	ittt	eq
 8006baa:	68e5      	ldreq	r5, [r4, #12]
 8006bac:	6833      	ldreq	r3, [r6, #0]
 8006bae:	1aed      	subeq	r5, r5, r3
 8006bb0:	68a3      	ldr	r3, [r4, #8]
 8006bb2:	bf0c      	ite	eq
 8006bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bb8:	2500      	movne	r5, #0
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	bfc4      	itt	gt
 8006bbe:	1a9b      	subgt	r3, r3, r2
 8006bc0:	18ed      	addgt	r5, r5, r3
 8006bc2:	2600      	movs	r6, #0
 8006bc4:	341a      	adds	r4, #26
 8006bc6:	42b5      	cmp	r5, r6
 8006bc8:	d11a      	bne.n	8006c00 <_printf_common+0xc8>
 8006bca:	2000      	movs	r0, #0
 8006bcc:	e008      	b.n	8006be0 <_printf_common+0xa8>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	4652      	mov	r2, sl
 8006bd2:	4641      	mov	r1, r8
 8006bd4:	4638      	mov	r0, r7
 8006bd6:	47c8      	blx	r9
 8006bd8:	3001      	adds	r0, #1
 8006bda:	d103      	bne.n	8006be4 <_printf_common+0xac>
 8006bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be4:	3501      	adds	r5, #1
 8006be6:	e7c6      	b.n	8006b76 <_printf_common+0x3e>
 8006be8:	18e1      	adds	r1, r4, r3
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	2030      	movs	r0, #48	@ 0x30
 8006bee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006bf2:	4422      	add	r2, r4
 8006bf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006bf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bfc:	3302      	adds	r3, #2
 8006bfe:	e7c7      	b.n	8006b90 <_printf_common+0x58>
 8006c00:	2301      	movs	r3, #1
 8006c02:	4622      	mov	r2, r4
 8006c04:	4641      	mov	r1, r8
 8006c06:	4638      	mov	r0, r7
 8006c08:	47c8      	blx	r9
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	d0e6      	beq.n	8006bdc <_printf_common+0xa4>
 8006c0e:	3601      	adds	r6, #1
 8006c10:	e7d9      	b.n	8006bc6 <_printf_common+0x8e>
	...

08006c14 <_printf_i>:
 8006c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c18:	7e0f      	ldrb	r7, [r1, #24]
 8006c1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c1c:	2f78      	cmp	r7, #120	@ 0x78
 8006c1e:	4691      	mov	r9, r2
 8006c20:	4680      	mov	r8, r0
 8006c22:	460c      	mov	r4, r1
 8006c24:	469a      	mov	sl, r3
 8006c26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c2a:	d807      	bhi.n	8006c3c <_printf_i+0x28>
 8006c2c:	2f62      	cmp	r7, #98	@ 0x62
 8006c2e:	d80a      	bhi.n	8006c46 <_printf_i+0x32>
 8006c30:	2f00      	cmp	r7, #0
 8006c32:	f000 80d2 	beq.w	8006dda <_printf_i+0x1c6>
 8006c36:	2f58      	cmp	r7, #88	@ 0x58
 8006c38:	f000 80b9 	beq.w	8006dae <_printf_i+0x19a>
 8006c3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c44:	e03a      	b.n	8006cbc <_printf_i+0xa8>
 8006c46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c4a:	2b15      	cmp	r3, #21
 8006c4c:	d8f6      	bhi.n	8006c3c <_printf_i+0x28>
 8006c4e:	a101      	add	r1, pc, #4	@ (adr r1, 8006c54 <_printf_i+0x40>)
 8006c50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c54:	08006cad 	.word	0x08006cad
 8006c58:	08006cc1 	.word	0x08006cc1
 8006c5c:	08006c3d 	.word	0x08006c3d
 8006c60:	08006c3d 	.word	0x08006c3d
 8006c64:	08006c3d 	.word	0x08006c3d
 8006c68:	08006c3d 	.word	0x08006c3d
 8006c6c:	08006cc1 	.word	0x08006cc1
 8006c70:	08006c3d 	.word	0x08006c3d
 8006c74:	08006c3d 	.word	0x08006c3d
 8006c78:	08006c3d 	.word	0x08006c3d
 8006c7c:	08006c3d 	.word	0x08006c3d
 8006c80:	08006dc1 	.word	0x08006dc1
 8006c84:	08006ceb 	.word	0x08006ceb
 8006c88:	08006d7b 	.word	0x08006d7b
 8006c8c:	08006c3d 	.word	0x08006c3d
 8006c90:	08006c3d 	.word	0x08006c3d
 8006c94:	08006de3 	.word	0x08006de3
 8006c98:	08006c3d 	.word	0x08006c3d
 8006c9c:	08006ceb 	.word	0x08006ceb
 8006ca0:	08006c3d 	.word	0x08006c3d
 8006ca4:	08006c3d 	.word	0x08006c3d
 8006ca8:	08006d83 	.word	0x08006d83
 8006cac:	6833      	ldr	r3, [r6, #0]
 8006cae:	1d1a      	adds	r2, r3, #4
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6032      	str	r2, [r6, #0]
 8006cb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e09d      	b.n	8006dfc <_printf_i+0x1e8>
 8006cc0:	6833      	ldr	r3, [r6, #0]
 8006cc2:	6820      	ldr	r0, [r4, #0]
 8006cc4:	1d19      	adds	r1, r3, #4
 8006cc6:	6031      	str	r1, [r6, #0]
 8006cc8:	0606      	lsls	r6, r0, #24
 8006cca:	d501      	bpl.n	8006cd0 <_printf_i+0xbc>
 8006ccc:	681d      	ldr	r5, [r3, #0]
 8006cce:	e003      	b.n	8006cd8 <_printf_i+0xc4>
 8006cd0:	0645      	lsls	r5, r0, #25
 8006cd2:	d5fb      	bpl.n	8006ccc <_printf_i+0xb8>
 8006cd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006cd8:	2d00      	cmp	r5, #0
 8006cda:	da03      	bge.n	8006ce4 <_printf_i+0xd0>
 8006cdc:	232d      	movs	r3, #45	@ 0x2d
 8006cde:	426d      	negs	r5, r5
 8006ce0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ce4:	4859      	ldr	r0, [pc, #356]	@ (8006e4c <_printf_i+0x238>)
 8006ce6:	230a      	movs	r3, #10
 8006ce8:	e011      	b.n	8006d0e <_printf_i+0xfa>
 8006cea:	6821      	ldr	r1, [r4, #0]
 8006cec:	6833      	ldr	r3, [r6, #0]
 8006cee:	0608      	lsls	r0, r1, #24
 8006cf0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006cf4:	d402      	bmi.n	8006cfc <_printf_i+0xe8>
 8006cf6:	0649      	lsls	r1, r1, #25
 8006cf8:	bf48      	it	mi
 8006cfa:	b2ad      	uxthmi	r5, r5
 8006cfc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cfe:	4853      	ldr	r0, [pc, #332]	@ (8006e4c <_printf_i+0x238>)
 8006d00:	6033      	str	r3, [r6, #0]
 8006d02:	bf14      	ite	ne
 8006d04:	230a      	movne	r3, #10
 8006d06:	2308      	moveq	r3, #8
 8006d08:	2100      	movs	r1, #0
 8006d0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d0e:	6866      	ldr	r6, [r4, #4]
 8006d10:	60a6      	str	r6, [r4, #8]
 8006d12:	2e00      	cmp	r6, #0
 8006d14:	bfa2      	ittt	ge
 8006d16:	6821      	ldrge	r1, [r4, #0]
 8006d18:	f021 0104 	bicge.w	r1, r1, #4
 8006d1c:	6021      	strge	r1, [r4, #0]
 8006d1e:	b90d      	cbnz	r5, 8006d24 <_printf_i+0x110>
 8006d20:	2e00      	cmp	r6, #0
 8006d22:	d04b      	beq.n	8006dbc <_printf_i+0x1a8>
 8006d24:	4616      	mov	r6, r2
 8006d26:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d2a:	fb03 5711 	mls	r7, r3, r1, r5
 8006d2e:	5dc7      	ldrb	r7, [r0, r7]
 8006d30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d34:	462f      	mov	r7, r5
 8006d36:	42bb      	cmp	r3, r7
 8006d38:	460d      	mov	r5, r1
 8006d3a:	d9f4      	bls.n	8006d26 <_printf_i+0x112>
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	d10b      	bne.n	8006d58 <_printf_i+0x144>
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	07df      	lsls	r7, r3, #31
 8006d44:	d508      	bpl.n	8006d58 <_printf_i+0x144>
 8006d46:	6923      	ldr	r3, [r4, #16]
 8006d48:	6861      	ldr	r1, [r4, #4]
 8006d4a:	4299      	cmp	r1, r3
 8006d4c:	bfde      	ittt	le
 8006d4e:	2330      	movle	r3, #48	@ 0x30
 8006d50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d58:	1b92      	subs	r2, r2, r6
 8006d5a:	6122      	str	r2, [r4, #16]
 8006d5c:	f8cd a000 	str.w	sl, [sp]
 8006d60:	464b      	mov	r3, r9
 8006d62:	aa03      	add	r2, sp, #12
 8006d64:	4621      	mov	r1, r4
 8006d66:	4640      	mov	r0, r8
 8006d68:	f7ff fee6 	bl	8006b38 <_printf_common>
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	d14a      	bne.n	8006e06 <_printf_i+0x1f2>
 8006d70:	f04f 30ff 	mov.w	r0, #4294967295
 8006d74:	b004      	add	sp, #16
 8006d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	f043 0320 	orr.w	r3, r3, #32
 8006d80:	6023      	str	r3, [r4, #0]
 8006d82:	4833      	ldr	r0, [pc, #204]	@ (8006e50 <_printf_i+0x23c>)
 8006d84:	2778      	movs	r7, #120	@ 0x78
 8006d86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	6831      	ldr	r1, [r6, #0]
 8006d8e:	061f      	lsls	r7, r3, #24
 8006d90:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d94:	d402      	bmi.n	8006d9c <_printf_i+0x188>
 8006d96:	065f      	lsls	r7, r3, #25
 8006d98:	bf48      	it	mi
 8006d9a:	b2ad      	uxthmi	r5, r5
 8006d9c:	6031      	str	r1, [r6, #0]
 8006d9e:	07d9      	lsls	r1, r3, #31
 8006da0:	bf44      	itt	mi
 8006da2:	f043 0320 	orrmi.w	r3, r3, #32
 8006da6:	6023      	strmi	r3, [r4, #0]
 8006da8:	b11d      	cbz	r5, 8006db2 <_printf_i+0x19e>
 8006daa:	2310      	movs	r3, #16
 8006dac:	e7ac      	b.n	8006d08 <_printf_i+0xf4>
 8006dae:	4827      	ldr	r0, [pc, #156]	@ (8006e4c <_printf_i+0x238>)
 8006db0:	e7e9      	b.n	8006d86 <_printf_i+0x172>
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	f023 0320 	bic.w	r3, r3, #32
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	e7f6      	b.n	8006daa <_printf_i+0x196>
 8006dbc:	4616      	mov	r6, r2
 8006dbe:	e7bd      	b.n	8006d3c <_printf_i+0x128>
 8006dc0:	6833      	ldr	r3, [r6, #0]
 8006dc2:	6825      	ldr	r5, [r4, #0]
 8006dc4:	6961      	ldr	r1, [r4, #20]
 8006dc6:	1d18      	adds	r0, r3, #4
 8006dc8:	6030      	str	r0, [r6, #0]
 8006dca:	062e      	lsls	r6, r5, #24
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	d501      	bpl.n	8006dd4 <_printf_i+0x1c0>
 8006dd0:	6019      	str	r1, [r3, #0]
 8006dd2:	e002      	b.n	8006dda <_printf_i+0x1c6>
 8006dd4:	0668      	lsls	r0, r5, #25
 8006dd6:	d5fb      	bpl.n	8006dd0 <_printf_i+0x1bc>
 8006dd8:	8019      	strh	r1, [r3, #0]
 8006dda:	2300      	movs	r3, #0
 8006ddc:	6123      	str	r3, [r4, #16]
 8006dde:	4616      	mov	r6, r2
 8006de0:	e7bc      	b.n	8006d5c <_printf_i+0x148>
 8006de2:	6833      	ldr	r3, [r6, #0]
 8006de4:	1d1a      	adds	r2, r3, #4
 8006de6:	6032      	str	r2, [r6, #0]
 8006de8:	681e      	ldr	r6, [r3, #0]
 8006dea:	6862      	ldr	r2, [r4, #4]
 8006dec:	2100      	movs	r1, #0
 8006dee:	4630      	mov	r0, r6
 8006df0:	f7f9 f9ee 	bl	80001d0 <memchr>
 8006df4:	b108      	cbz	r0, 8006dfa <_printf_i+0x1e6>
 8006df6:	1b80      	subs	r0, r0, r6
 8006df8:	6060      	str	r0, [r4, #4]
 8006dfa:	6863      	ldr	r3, [r4, #4]
 8006dfc:	6123      	str	r3, [r4, #16]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e04:	e7aa      	b.n	8006d5c <_printf_i+0x148>
 8006e06:	6923      	ldr	r3, [r4, #16]
 8006e08:	4632      	mov	r2, r6
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	4640      	mov	r0, r8
 8006e0e:	47d0      	blx	sl
 8006e10:	3001      	adds	r0, #1
 8006e12:	d0ad      	beq.n	8006d70 <_printf_i+0x15c>
 8006e14:	6823      	ldr	r3, [r4, #0]
 8006e16:	079b      	lsls	r3, r3, #30
 8006e18:	d413      	bmi.n	8006e42 <_printf_i+0x22e>
 8006e1a:	68e0      	ldr	r0, [r4, #12]
 8006e1c:	9b03      	ldr	r3, [sp, #12]
 8006e1e:	4298      	cmp	r0, r3
 8006e20:	bfb8      	it	lt
 8006e22:	4618      	movlt	r0, r3
 8006e24:	e7a6      	b.n	8006d74 <_printf_i+0x160>
 8006e26:	2301      	movs	r3, #1
 8006e28:	4632      	mov	r2, r6
 8006e2a:	4649      	mov	r1, r9
 8006e2c:	4640      	mov	r0, r8
 8006e2e:	47d0      	blx	sl
 8006e30:	3001      	adds	r0, #1
 8006e32:	d09d      	beq.n	8006d70 <_printf_i+0x15c>
 8006e34:	3501      	adds	r5, #1
 8006e36:	68e3      	ldr	r3, [r4, #12]
 8006e38:	9903      	ldr	r1, [sp, #12]
 8006e3a:	1a5b      	subs	r3, r3, r1
 8006e3c:	42ab      	cmp	r3, r5
 8006e3e:	dcf2      	bgt.n	8006e26 <_printf_i+0x212>
 8006e40:	e7eb      	b.n	8006e1a <_printf_i+0x206>
 8006e42:	2500      	movs	r5, #0
 8006e44:	f104 0619 	add.w	r6, r4, #25
 8006e48:	e7f5      	b.n	8006e36 <_printf_i+0x222>
 8006e4a:	bf00      	nop
 8006e4c:	0800932e 	.word	0x0800932e
 8006e50:	0800933f 	.word	0x0800933f

08006e54 <std>:
 8006e54:	2300      	movs	r3, #0
 8006e56:	b510      	push	{r4, lr}
 8006e58:	4604      	mov	r4, r0
 8006e5a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e62:	6083      	str	r3, [r0, #8]
 8006e64:	8181      	strh	r1, [r0, #12]
 8006e66:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e68:	81c2      	strh	r2, [r0, #14]
 8006e6a:	6183      	str	r3, [r0, #24]
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	2208      	movs	r2, #8
 8006e70:	305c      	adds	r0, #92	@ 0x5c
 8006e72:	f000 f906 	bl	8007082 <memset>
 8006e76:	4b0d      	ldr	r3, [pc, #52]	@ (8006eac <std+0x58>)
 8006e78:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb0 <std+0x5c>)
 8006e7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb4 <std+0x60>)
 8006e80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e82:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb8 <std+0x64>)
 8006e84:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e86:	4b0d      	ldr	r3, [pc, #52]	@ (8006ebc <std+0x68>)
 8006e88:	6224      	str	r4, [r4, #32]
 8006e8a:	429c      	cmp	r4, r3
 8006e8c:	d006      	beq.n	8006e9c <std+0x48>
 8006e8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e92:	4294      	cmp	r4, r2
 8006e94:	d002      	beq.n	8006e9c <std+0x48>
 8006e96:	33d0      	adds	r3, #208	@ 0xd0
 8006e98:	429c      	cmp	r4, r3
 8006e9a:	d105      	bne.n	8006ea8 <std+0x54>
 8006e9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea4:	f000 b96a 	b.w	800717c <__retarget_lock_init_recursive>
 8006ea8:	bd10      	pop	{r4, pc}
 8006eaa:	bf00      	nop
 8006eac:	08006ffd 	.word	0x08006ffd
 8006eb0:	0800701f 	.word	0x0800701f
 8006eb4:	08007057 	.word	0x08007057
 8006eb8:	0800707b 	.word	0x0800707b
 8006ebc:	200003a4 	.word	0x200003a4

08006ec0 <stdio_exit_handler>:
 8006ec0:	4a02      	ldr	r2, [pc, #8]	@ (8006ecc <stdio_exit_handler+0xc>)
 8006ec2:	4903      	ldr	r1, [pc, #12]	@ (8006ed0 <stdio_exit_handler+0x10>)
 8006ec4:	4803      	ldr	r0, [pc, #12]	@ (8006ed4 <stdio_exit_handler+0x14>)
 8006ec6:	f000 b869 	b.w	8006f9c <_fwalk_sglue>
 8006eca:	bf00      	nop
 8006ecc:	2000000c 	.word	0x2000000c
 8006ed0:	08008ab1 	.word	0x08008ab1
 8006ed4:	2000001c 	.word	0x2000001c

08006ed8 <cleanup_stdio>:
 8006ed8:	6841      	ldr	r1, [r0, #4]
 8006eda:	4b0c      	ldr	r3, [pc, #48]	@ (8006f0c <cleanup_stdio+0x34>)
 8006edc:	4299      	cmp	r1, r3
 8006ede:	b510      	push	{r4, lr}
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	d001      	beq.n	8006ee8 <cleanup_stdio+0x10>
 8006ee4:	f001 fde4 	bl	8008ab0 <_fflush_r>
 8006ee8:	68a1      	ldr	r1, [r4, #8]
 8006eea:	4b09      	ldr	r3, [pc, #36]	@ (8006f10 <cleanup_stdio+0x38>)
 8006eec:	4299      	cmp	r1, r3
 8006eee:	d002      	beq.n	8006ef6 <cleanup_stdio+0x1e>
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f001 fddd 	bl	8008ab0 <_fflush_r>
 8006ef6:	68e1      	ldr	r1, [r4, #12]
 8006ef8:	4b06      	ldr	r3, [pc, #24]	@ (8006f14 <cleanup_stdio+0x3c>)
 8006efa:	4299      	cmp	r1, r3
 8006efc:	d004      	beq.n	8006f08 <cleanup_stdio+0x30>
 8006efe:	4620      	mov	r0, r4
 8006f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f04:	f001 bdd4 	b.w	8008ab0 <_fflush_r>
 8006f08:	bd10      	pop	{r4, pc}
 8006f0a:	bf00      	nop
 8006f0c:	200003a4 	.word	0x200003a4
 8006f10:	2000040c 	.word	0x2000040c
 8006f14:	20000474 	.word	0x20000474

08006f18 <global_stdio_init.part.0>:
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f48 <global_stdio_init.part.0+0x30>)
 8006f1c:	4c0b      	ldr	r4, [pc, #44]	@ (8006f4c <global_stdio_init.part.0+0x34>)
 8006f1e:	4a0c      	ldr	r2, [pc, #48]	@ (8006f50 <global_stdio_init.part.0+0x38>)
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	4620      	mov	r0, r4
 8006f24:	2200      	movs	r2, #0
 8006f26:	2104      	movs	r1, #4
 8006f28:	f7ff ff94 	bl	8006e54 <std>
 8006f2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f30:	2201      	movs	r2, #1
 8006f32:	2109      	movs	r1, #9
 8006f34:	f7ff ff8e 	bl	8006e54 <std>
 8006f38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f42:	2112      	movs	r1, #18
 8006f44:	f7ff bf86 	b.w	8006e54 <std>
 8006f48:	200004dc 	.word	0x200004dc
 8006f4c:	200003a4 	.word	0x200003a4
 8006f50:	08006ec1 	.word	0x08006ec1

08006f54 <__sfp_lock_acquire>:
 8006f54:	4801      	ldr	r0, [pc, #4]	@ (8006f5c <__sfp_lock_acquire+0x8>)
 8006f56:	f000 b912 	b.w	800717e <__retarget_lock_acquire_recursive>
 8006f5a:	bf00      	nop
 8006f5c:	200004e5 	.word	0x200004e5

08006f60 <__sfp_lock_release>:
 8006f60:	4801      	ldr	r0, [pc, #4]	@ (8006f68 <__sfp_lock_release+0x8>)
 8006f62:	f000 b90d 	b.w	8007180 <__retarget_lock_release_recursive>
 8006f66:	bf00      	nop
 8006f68:	200004e5 	.word	0x200004e5

08006f6c <__sinit>:
 8006f6c:	b510      	push	{r4, lr}
 8006f6e:	4604      	mov	r4, r0
 8006f70:	f7ff fff0 	bl	8006f54 <__sfp_lock_acquire>
 8006f74:	6a23      	ldr	r3, [r4, #32]
 8006f76:	b11b      	cbz	r3, 8006f80 <__sinit+0x14>
 8006f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f7c:	f7ff bff0 	b.w	8006f60 <__sfp_lock_release>
 8006f80:	4b04      	ldr	r3, [pc, #16]	@ (8006f94 <__sinit+0x28>)
 8006f82:	6223      	str	r3, [r4, #32]
 8006f84:	4b04      	ldr	r3, [pc, #16]	@ (8006f98 <__sinit+0x2c>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1f5      	bne.n	8006f78 <__sinit+0xc>
 8006f8c:	f7ff ffc4 	bl	8006f18 <global_stdio_init.part.0>
 8006f90:	e7f2      	b.n	8006f78 <__sinit+0xc>
 8006f92:	bf00      	nop
 8006f94:	08006ed9 	.word	0x08006ed9
 8006f98:	200004dc 	.word	0x200004dc

08006f9c <_fwalk_sglue>:
 8006f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	4688      	mov	r8, r1
 8006fa4:	4614      	mov	r4, r2
 8006fa6:	2600      	movs	r6, #0
 8006fa8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fac:	f1b9 0901 	subs.w	r9, r9, #1
 8006fb0:	d505      	bpl.n	8006fbe <_fwalk_sglue+0x22>
 8006fb2:	6824      	ldr	r4, [r4, #0]
 8006fb4:	2c00      	cmp	r4, #0
 8006fb6:	d1f7      	bne.n	8006fa8 <_fwalk_sglue+0xc>
 8006fb8:	4630      	mov	r0, r6
 8006fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fbe:	89ab      	ldrh	r3, [r5, #12]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d907      	bls.n	8006fd4 <_fwalk_sglue+0x38>
 8006fc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	d003      	beq.n	8006fd4 <_fwalk_sglue+0x38>
 8006fcc:	4629      	mov	r1, r5
 8006fce:	4638      	mov	r0, r7
 8006fd0:	47c0      	blx	r8
 8006fd2:	4306      	orrs	r6, r0
 8006fd4:	3568      	adds	r5, #104	@ 0x68
 8006fd6:	e7e9      	b.n	8006fac <_fwalk_sglue+0x10>

08006fd8 <iprintf>:
 8006fd8:	b40f      	push	{r0, r1, r2, r3}
 8006fda:	b507      	push	{r0, r1, r2, lr}
 8006fdc:	4906      	ldr	r1, [pc, #24]	@ (8006ff8 <iprintf+0x20>)
 8006fde:	ab04      	add	r3, sp, #16
 8006fe0:	6808      	ldr	r0, [r1, #0]
 8006fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fe6:	6881      	ldr	r1, [r0, #8]
 8006fe8:	9301      	str	r3, [sp, #4]
 8006fea:	f001 fbc5 	bl	8008778 <_vfiprintf_r>
 8006fee:	b003      	add	sp, #12
 8006ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ff4:	b004      	add	sp, #16
 8006ff6:	4770      	bx	lr
 8006ff8:	20000018 	.word	0x20000018

08006ffc <__sread>:
 8006ffc:	b510      	push	{r4, lr}
 8006ffe:	460c      	mov	r4, r1
 8007000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007004:	f000 f86c 	bl	80070e0 <_read_r>
 8007008:	2800      	cmp	r0, #0
 800700a:	bfab      	itete	ge
 800700c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800700e:	89a3      	ldrhlt	r3, [r4, #12]
 8007010:	181b      	addge	r3, r3, r0
 8007012:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007016:	bfac      	ite	ge
 8007018:	6563      	strge	r3, [r4, #84]	@ 0x54
 800701a:	81a3      	strhlt	r3, [r4, #12]
 800701c:	bd10      	pop	{r4, pc}

0800701e <__swrite>:
 800701e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007022:	461f      	mov	r7, r3
 8007024:	898b      	ldrh	r3, [r1, #12]
 8007026:	05db      	lsls	r3, r3, #23
 8007028:	4605      	mov	r5, r0
 800702a:	460c      	mov	r4, r1
 800702c:	4616      	mov	r6, r2
 800702e:	d505      	bpl.n	800703c <__swrite+0x1e>
 8007030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007034:	2302      	movs	r3, #2
 8007036:	2200      	movs	r2, #0
 8007038:	f000 f840 	bl	80070bc <_lseek_r>
 800703c:	89a3      	ldrh	r3, [r4, #12]
 800703e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007042:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007046:	81a3      	strh	r3, [r4, #12]
 8007048:	4632      	mov	r2, r6
 800704a:	463b      	mov	r3, r7
 800704c:	4628      	mov	r0, r5
 800704e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007052:	f000 b857 	b.w	8007104 <_write_r>

08007056 <__sseek>:
 8007056:	b510      	push	{r4, lr}
 8007058:	460c      	mov	r4, r1
 800705a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800705e:	f000 f82d 	bl	80070bc <_lseek_r>
 8007062:	1c43      	adds	r3, r0, #1
 8007064:	89a3      	ldrh	r3, [r4, #12]
 8007066:	bf15      	itete	ne
 8007068:	6560      	strne	r0, [r4, #84]	@ 0x54
 800706a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800706e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007072:	81a3      	strheq	r3, [r4, #12]
 8007074:	bf18      	it	ne
 8007076:	81a3      	strhne	r3, [r4, #12]
 8007078:	bd10      	pop	{r4, pc}

0800707a <__sclose>:
 800707a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800707e:	f000 b80d 	b.w	800709c <_close_r>

08007082 <memset>:
 8007082:	4402      	add	r2, r0
 8007084:	4603      	mov	r3, r0
 8007086:	4293      	cmp	r3, r2
 8007088:	d100      	bne.n	800708c <memset+0xa>
 800708a:	4770      	bx	lr
 800708c:	f803 1b01 	strb.w	r1, [r3], #1
 8007090:	e7f9      	b.n	8007086 <memset+0x4>
	...

08007094 <_localeconv_r>:
 8007094:	4800      	ldr	r0, [pc, #0]	@ (8007098 <_localeconv_r+0x4>)
 8007096:	4770      	bx	lr
 8007098:	20000158 	.word	0x20000158

0800709c <_close_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4d06      	ldr	r5, [pc, #24]	@ (80070b8 <_close_r+0x1c>)
 80070a0:	2300      	movs	r3, #0
 80070a2:	4604      	mov	r4, r0
 80070a4:	4608      	mov	r0, r1
 80070a6:	602b      	str	r3, [r5, #0]
 80070a8:	f7fa fe6d 	bl	8001d86 <_close>
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	d102      	bne.n	80070b6 <_close_r+0x1a>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	b103      	cbz	r3, 80070b6 <_close_r+0x1a>
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	bd38      	pop	{r3, r4, r5, pc}
 80070b8:	200004e0 	.word	0x200004e0

080070bc <_lseek_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	4d07      	ldr	r5, [pc, #28]	@ (80070dc <_lseek_r+0x20>)
 80070c0:	4604      	mov	r4, r0
 80070c2:	4608      	mov	r0, r1
 80070c4:	4611      	mov	r1, r2
 80070c6:	2200      	movs	r2, #0
 80070c8:	602a      	str	r2, [r5, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	f7fa fe82 	bl	8001dd4 <_lseek>
 80070d0:	1c43      	adds	r3, r0, #1
 80070d2:	d102      	bne.n	80070da <_lseek_r+0x1e>
 80070d4:	682b      	ldr	r3, [r5, #0]
 80070d6:	b103      	cbz	r3, 80070da <_lseek_r+0x1e>
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	bd38      	pop	{r3, r4, r5, pc}
 80070dc:	200004e0 	.word	0x200004e0

080070e0 <_read_r>:
 80070e0:	b538      	push	{r3, r4, r5, lr}
 80070e2:	4d07      	ldr	r5, [pc, #28]	@ (8007100 <_read_r+0x20>)
 80070e4:	4604      	mov	r4, r0
 80070e6:	4608      	mov	r0, r1
 80070e8:	4611      	mov	r1, r2
 80070ea:	2200      	movs	r2, #0
 80070ec:	602a      	str	r2, [r5, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	f7fa fe2c 	bl	8001d4c <_read>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	d102      	bne.n	80070fe <_read_r+0x1e>
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	b103      	cbz	r3, 80070fe <_read_r+0x1e>
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	bd38      	pop	{r3, r4, r5, pc}
 8007100:	200004e0 	.word	0x200004e0

08007104 <_write_r>:
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	4d07      	ldr	r5, [pc, #28]	@ (8007124 <_write_r+0x20>)
 8007108:	4604      	mov	r4, r0
 800710a:	4608      	mov	r0, r1
 800710c:	4611      	mov	r1, r2
 800710e:	2200      	movs	r2, #0
 8007110:	602a      	str	r2, [r5, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	f7f9 ffe0 	bl	80010d8 <_write>
 8007118:	1c43      	adds	r3, r0, #1
 800711a:	d102      	bne.n	8007122 <_write_r+0x1e>
 800711c:	682b      	ldr	r3, [r5, #0]
 800711e:	b103      	cbz	r3, 8007122 <_write_r+0x1e>
 8007120:	6023      	str	r3, [r4, #0]
 8007122:	bd38      	pop	{r3, r4, r5, pc}
 8007124:	200004e0 	.word	0x200004e0

08007128 <__errno>:
 8007128:	4b01      	ldr	r3, [pc, #4]	@ (8007130 <__errno+0x8>)
 800712a:	6818      	ldr	r0, [r3, #0]
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	20000018 	.word	0x20000018

08007134 <__libc_init_array>:
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	4d0d      	ldr	r5, [pc, #52]	@ (800716c <__libc_init_array+0x38>)
 8007138:	4c0d      	ldr	r4, [pc, #52]	@ (8007170 <__libc_init_array+0x3c>)
 800713a:	1b64      	subs	r4, r4, r5
 800713c:	10a4      	asrs	r4, r4, #2
 800713e:	2600      	movs	r6, #0
 8007140:	42a6      	cmp	r6, r4
 8007142:	d109      	bne.n	8007158 <__libc_init_array+0x24>
 8007144:	4d0b      	ldr	r5, [pc, #44]	@ (8007174 <__libc_init_array+0x40>)
 8007146:	4c0c      	ldr	r4, [pc, #48]	@ (8007178 <__libc_init_array+0x44>)
 8007148:	f001 fec0 	bl	8008ecc <_init>
 800714c:	1b64      	subs	r4, r4, r5
 800714e:	10a4      	asrs	r4, r4, #2
 8007150:	2600      	movs	r6, #0
 8007152:	42a6      	cmp	r6, r4
 8007154:	d105      	bne.n	8007162 <__libc_init_array+0x2e>
 8007156:	bd70      	pop	{r4, r5, r6, pc}
 8007158:	f855 3b04 	ldr.w	r3, [r5], #4
 800715c:	4798      	blx	r3
 800715e:	3601      	adds	r6, #1
 8007160:	e7ee      	b.n	8007140 <__libc_init_array+0xc>
 8007162:	f855 3b04 	ldr.w	r3, [r5], #4
 8007166:	4798      	blx	r3
 8007168:	3601      	adds	r6, #1
 800716a:	e7f2      	b.n	8007152 <__libc_init_array+0x1e>
 800716c:	08009698 	.word	0x08009698
 8007170:	08009698 	.word	0x08009698
 8007174:	08009698 	.word	0x08009698
 8007178:	0800969c 	.word	0x0800969c

0800717c <__retarget_lock_init_recursive>:
 800717c:	4770      	bx	lr

0800717e <__retarget_lock_acquire_recursive>:
 800717e:	4770      	bx	lr

08007180 <__retarget_lock_release_recursive>:
 8007180:	4770      	bx	lr

08007182 <quorem>:
 8007182:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007186:	6903      	ldr	r3, [r0, #16]
 8007188:	690c      	ldr	r4, [r1, #16]
 800718a:	42a3      	cmp	r3, r4
 800718c:	4607      	mov	r7, r0
 800718e:	db7e      	blt.n	800728e <quorem+0x10c>
 8007190:	3c01      	subs	r4, #1
 8007192:	f101 0814 	add.w	r8, r1, #20
 8007196:	00a3      	lsls	r3, r4, #2
 8007198:	f100 0514 	add.w	r5, r0, #20
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071a2:	9301      	str	r3, [sp, #4]
 80071a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071ac:	3301      	adds	r3, #1
 80071ae:	429a      	cmp	r2, r3
 80071b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80071b8:	d32e      	bcc.n	8007218 <quorem+0x96>
 80071ba:	f04f 0a00 	mov.w	sl, #0
 80071be:	46c4      	mov	ip, r8
 80071c0:	46ae      	mov	lr, r5
 80071c2:	46d3      	mov	fp, sl
 80071c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071c8:	b298      	uxth	r0, r3
 80071ca:	fb06 a000 	mla	r0, r6, r0, sl
 80071ce:	0c02      	lsrs	r2, r0, #16
 80071d0:	0c1b      	lsrs	r3, r3, #16
 80071d2:	fb06 2303 	mla	r3, r6, r3, r2
 80071d6:	f8de 2000 	ldr.w	r2, [lr]
 80071da:	b280      	uxth	r0, r0
 80071dc:	b292      	uxth	r2, r2
 80071de:	1a12      	subs	r2, r2, r0
 80071e0:	445a      	add	r2, fp
 80071e2:	f8de 0000 	ldr.w	r0, [lr]
 80071e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80071f0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80071f4:	b292      	uxth	r2, r2
 80071f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80071fa:	45e1      	cmp	r9, ip
 80071fc:	f84e 2b04 	str.w	r2, [lr], #4
 8007200:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007204:	d2de      	bcs.n	80071c4 <quorem+0x42>
 8007206:	9b00      	ldr	r3, [sp, #0]
 8007208:	58eb      	ldr	r3, [r5, r3]
 800720a:	b92b      	cbnz	r3, 8007218 <quorem+0x96>
 800720c:	9b01      	ldr	r3, [sp, #4]
 800720e:	3b04      	subs	r3, #4
 8007210:	429d      	cmp	r5, r3
 8007212:	461a      	mov	r2, r3
 8007214:	d32f      	bcc.n	8007276 <quorem+0xf4>
 8007216:	613c      	str	r4, [r7, #16]
 8007218:	4638      	mov	r0, r7
 800721a:	f001 f97b 	bl	8008514 <__mcmp>
 800721e:	2800      	cmp	r0, #0
 8007220:	db25      	blt.n	800726e <quorem+0xec>
 8007222:	4629      	mov	r1, r5
 8007224:	2000      	movs	r0, #0
 8007226:	f858 2b04 	ldr.w	r2, [r8], #4
 800722a:	f8d1 c000 	ldr.w	ip, [r1]
 800722e:	fa1f fe82 	uxth.w	lr, r2
 8007232:	fa1f f38c 	uxth.w	r3, ip
 8007236:	eba3 030e 	sub.w	r3, r3, lr
 800723a:	4403      	add	r3, r0
 800723c:	0c12      	lsrs	r2, r2, #16
 800723e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007242:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007246:	b29b      	uxth	r3, r3
 8007248:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800724c:	45c1      	cmp	r9, r8
 800724e:	f841 3b04 	str.w	r3, [r1], #4
 8007252:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007256:	d2e6      	bcs.n	8007226 <quorem+0xa4>
 8007258:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800725c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007260:	b922      	cbnz	r2, 800726c <quorem+0xea>
 8007262:	3b04      	subs	r3, #4
 8007264:	429d      	cmp	r5, r3
 8007266:	461a      	mov	r2, r3
 8007268:	d30b      	bcc.n	8007282 <quorem+0x100>
 800726a:	613c      	str	r4, [r7, #16]
 800726c:	3601      	adds	r6, #1
 800726e:	4630      	mov	r0, r6
 8007270:	b003      	add	sp, #12
 8007272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007276:	6812      	ldr	r2, [r2, #0]
 8007278:	3b04      	subs	r3, #4
 800727a:	2a00      	cmp	r2, #0
 800727c:	d1cb      	bne.n	8007216 <quorem+0x94>
 800727e:	3c01      	subs	r4, #1
 8007280:	e7c6      	b.n	8007210 <quorem+0x8e>
 8007282:	6812      	ldr	r2, [r2, #0]
 8007284:	3b04      	subs	r3, #4
 8007286:	2a00      	cmp	r2, #0
 8007288:	d1ef      	bne.n	800726a <quorem+0xe8>
 800728a:	3c01      	subs	r4, #1
 800728c:	e7ea      	b.n	8007264 <quorem+0xe2>
 800728e:	2000      	movs	r0, #0
 8007290:	e7ee      	b.n	8007270 <quorem+0xee>
 8007292:	0000      	movs	r0, r0
 8007294:	0000      	movs	r0, r0
	...

08007298 <_dtoa_r>:
 8007298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800729c:	69c7      	ldr	r7, [r0, #28]
 800729e:	b099      	sub	sp, #100	@ 0x64
 80072a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80072a4:	ec55 4b10 	vmov	r4, r5, d0
 80072a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80072aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80072ac:	4683      	mov	fp, r0
 80072ae:	920e      	str	r2, [sp, #56]	@ 0x38
 80072b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072b2:	b97f      	cbnz	r7, 80072d4 <_dtoa_r+0x3c>
 80072b4:	2010      	movs	r0, #16
 80072b6:	f000 fdfd 	bl	8007eb4 <malloc>
 80072ba:	4602      	mov	r2, r0
 80072bc:	f8cb 001c 	str.w	r0, [fp, #28]
 80072c0:	b920      	cbnz	r0, 80072cc <_dtoa_r+0x34>
 80072c2:	4ba7      	ldr	r3, [pc, #668]	@ (8007560 <_dtoa_r+0x2c8>)
 80072c4:	21ef      	movs	r1, #239	@ 0xef
 80072c6:	48a7      	ldr	r0, [pc, #668]	@ (8007564 <_dtoa_r+0x2cc>)
 80072c8:	f001 fccc 	bl	8008c64 <__assert_func>
 80072cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80072d0:	6007      	str	r7, [r0, #0]
 80072d2:	60c7      	str	r7, [r0, #12]
 80072d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072d8:	6819      	ldr	r1, [r3, #0]
 80072da:	b159      	cbz	r1, 80072f4 <_dtoa_r+0x5c>
 80072dc:	685a      	ldr	r2, [r3, #4]
 80072de:	604a      	str	r2, [r1, #4]
 80072e0:	2301      	movs	r3, #1
 80072e2:	4093      	lsls	r3, r2
 80072e4:	608b      	str	r3, [r1, #8]
 80072e6:	4658      	mov	r0, fp
 80072e8:	f000 feda 	bl	80080a0 <_Bfree>
 80072ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072f0:	2200      	movs	r2, #0
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	1e2b      	subs	r3, r5, #0
 80072f6:	bfb9      	ittee	lt
 80072f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80072fc:	9303      	strlt	r3, [sp, #12]
 80072fe:	2300      	movge	r3, #0
 8007300:	6033      	strge	r3, [r6, #0]
 8007302:	9f03      	ldr	r7, [sp, #12]
 8007304:	4b98      	ldr	r3, [pc, #608]	@ (8007568 <_dtoa_r+0x2d0>)
 8007306:	bfbc      	itt	lt
 8007308:	2201      	movlt	r2, #1
 800730a:	6032      	strlt	r2, [r6, #0]
 800730c:	43bb      	bics	r3, r7
 800730e:	d112      	bne.n	8007336 <_dtoa_r+0x9e>
 8007310:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007312:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007316:	6013      	str	r3, [r2, #0]
 8007318:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800731c:	4323      	orrs	r3, r4
 800731e:	f000 854d 	beq.w	8007dbc <_dtoa_r+0xb24>
 8007322:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007324:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800757c <_dtoa_r+0x2e4>
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 854f 	beq.w	8007dcc <_dtoa_r+0xb34>
 800732e:	f10a 0303 	add.w	r3, sl, #3
 8007332:	f000 bd49 	b.w	8007dc8 <_dtoa_r+0xb30>
 8007336:	ed9d 7b02 	vldr	d7, [sp, #8]
 800733a:	2200      	movs	r2, #0
 800733c:	ec51 0b17 	vmov	r0, r1, d7
 8007340:	2300      	movs	r3, #0
 8007342:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007346:	f7f9 fbbf 	bl	8000ac8 <__aeabi_dcmpeq>
 800734a:	4680      	mov	r8, r0
 800734c:	b158      	cbz	r0, 8007366 <_dtoa_r+0xce>
 800734e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007350:	2301      	movs	r3, #1
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007356:	b113      	cbz	r3, 800735e <_dtoa_r+0xc6>
 8007358:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800735a:	4b84      	ldr	r3, [pc, #528]	@ (800756c <_dtoa_r+0x2d4>)
 800735c:	6013      	str	r3, [r2, #0]
 800735e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007580 <_dtoa_r+0x2e8>
 8007362:	f000 bd33 	b.w	8007dcc <_dtoa_r+0xb34>
 8007366:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800736a:	aa16      	add	r2, sp, #88	@ 0x58
 800736c:	a917      	add	r1, sp, #92	@ 0x5c
 800736e:	4658      	mov	r0, fp
 8007370:	f001 f980 	bl	8008674 <__d2b>
 8007374:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007378:	4681      	mov	r9, r0
 800737a:	2e00      	cmp	r6, #0
 800737c:	d077      	beq.n	800746e <_dtoa_r+0x1d6>
 800737e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007380:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800738c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007390:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007394:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007398:	4619      	mov	r1, r3
 800739a:	2200      	movs	r2, #0
 800739c:	4b74      	ldr	r3, [pc, #464]	@ (8007570 <_dtoa_r+0x2d8>)
 800739e:	f7f8 ff73 	bl	8000288 <__aeabi_dsub>
 80073a2:	a369      	add	r3, pc, #420	@ (adr r3, 8007548 <_dtoa_r+0x2b0>)
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	f7f9 f926 	bl	80005f8 <__aeabi_dmul>
 80073ac:	a368      	add	r3, pc, #416	@ (adr r3, 8007550 <_dtoa_r+0x2b8>)
 80073ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b2:	f7f8 ff6b 	bl	800028c <__adddf3>
 80073b6:	4604      	mov	r4, r0
 80073b8:	4630      	mov	r0, r6
 80073ba:	460d      	mov	r5, r1
 80073bc:	f7f9 f8b2 	bl	8000524 <__aeabi_i2d>
 80073c0:	a365      	add	r3, pc, #404	@ (adr r3, 8007558 <_dtoa_r+0x2c0>)
 80073c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c6:	f7f9 f917 	bl	80005f8 <__aeabi_dmul>
 80073ca:	4602      	mov	r2, r0
 80073cc:	460b      	mov	r3, r1
 80073ce:	4620      	mov	r0, r4
 80073d0:	4629      	mov	r1, r5
 80073d2:	f7f8 ff5b 	bl	800028c <__adddf3>
 80073d6:	4604      	mov	r4, r0
 80073d8:	460d      	mov	r5, r1
 80073da:	f7f9 fbbd 	bl	8000b58 <__aeabi_d2iz>
 80073de:	2200      	movs	r2, #0
 80073e0:	4607      	mov	r7, r0
 80073e2:	2300      	movs	r3, #0
 80073e4:	4620      	mov	r0, r4
 80073e6:	4629      	mov	r1, r5
 80073e8:	f7f9 fb78 	bl	8000adc <__aeabi_dcmplt>
 80073ec:	b140      	cbz	r0, 8007400 <_dtoa_r+0x168>
 80073ee:	4638      	mov	r0, r7
 80073f0:	f7f9 f898 	bl	8000524 <__aeabi_i2d>
 80073f4:	4622      	mov	r2, r4
 80073f6:	462b      	mov	r3, r5
 80073f8:	f7f9 fb66 	bl	8000ac8 <__aeabi_dcmpeq>
 80073fc:	b900      	cbnz	r0, 8007400 <_dtoa_r+0x168>
 80073fe:	3f01      	subs	r7, #1
 8007400:	2f16      	cmp	r7, #22
 8007402:	d851      	bhi.n	80074a8 <_dtoa_r+0x210>
 8007404:	4b5b      	ldr	r3, [pc, #364]	@ (8007574 <_dtoa_r+0x2dc>)
 8007406:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007412:	f7f9 fb63 	bl	8000adc <__aeabi_dcmplt>
 8007416:	2800      	cmp	r0, #0
 8007418:	d048      	beq.n	80074ac <_dtoa_r+0x214>
 800741a:	3f01      	subs	r7, #1
 800741c:	2300      	movs	r3, #0
 800741e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007420:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007422:	1b9b      	subs	r3, r3, r6
 8007424:	1e5a      	subs	r2, r3, #1
 8007426:	bf44      	itt	mi
 8007428:	f1c3 0801 	rsbmi	r8, r3, #1
 800742c:	2300      	movmi	r3, #0
 800742e:	9208      	str	r2, [sp, #32]
 8007430:	bf54      	ite	pl
 8007432:	f04f 0800 	movpl.w	r8, #0
 8007436:	9308      	strmi	r3, [sp, #32]
 8007438:	2f00      	cmp	r7, #0
 800743a:	db39      	blt.n	80074b0 <_dtoa_r+0x218>
 800743c:	9b08      	ldr	r3, [sp, #32]
 800743e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007440:	443b      	add	r3, r7
 8007442:	9308      	str	r3, [sp, #32]
 8007444:	2300      	movs	r3, #0
 8007446:	930a      	str	r3, [sp, #40]	@ 0x28
 8007448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800744a:	2b09      	cmp	r3, #9
 800744c:	d864      	bhi.n	8007518 <_dtoa_r+0x280>
 800744e:	2b05      	cmp	r3, #5
 8007450:	bfc4      	itt	gt
 8007452:	3b04      	subgt	r3, #4
 8007454:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007458:	f1a3 0302 	sub.w	r3, r3, #2
 800745c:	bfcc      	ite	gt
 800745e:	2400      	movgt	r4, #0
 8007460:	2401      	movle	r4, #1
 8007462:	2b03      	cmp	r3, #3
 8007464:	d863      	bhi.n	800752e <_dtoa_r+0x296>
 8007466:	e8df f003 	tbb	[pc, r3]
 800746a:	372a      	.short	0x372a
 800746c:	5535      	.short	0x5535
 800746e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007472:	441e      	add	r6, r3
 8007474:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007478:	2b20      	cmp	r3, #32
 800747a:	bfc1      	itttt	gt
 800747c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007480:	409f      	lslgt	r7, r3
 8007482:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007486:	fa24 f303 	lsrgt.w	r3, r4, r3
 800748a:	bfd6      	itet	le
 800748c:	f1c3 0320 	rsble	r3, r3, #32
 8007490:	ea47 0003 	orrgt.w	r0, r7, r3
 8007494:	fa04 f003 	lslle.w	r0, r4, r3
 8007498:	f7f9 f834 	bl	8000504 <__aeabi_ui2d>
 800749c:	2201      	movs	r2, #1
 800749e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80074a2:	3e01      	subs	r6, #1
 80074a4:	9214      	str	r2, [sp, #80]	@ 0x50
 80074a6:	e777      	b.n	8007398 <_dtoa_r+0x100>
 80074a8:	2301      	movs	r3, #1
 80074aa:	e7b8      	b.n	800741e <_dtoa_r+0x186>
 80074ac:	9012      	str	r0, [sp, #72]	@ 0x48
 80074ae:	e7b7      	b.n	8007420 <_dtoa_r+0x188>
 80074b0:	427b      	negs	r3, r7
 80074b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80074b4:	2300      	movs	r3, #0
 80074b6:	eba8 0807 	sub.w	r8, r8, r7
 80074ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074bc:	e7c4      	b.n	8007448 <_dtoa_r+0x1b0>
 80074be:	2300      	movs	r3, #0
 80074c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	dc35      	bgt.n	8007534 <_dtoa_r+0x29c>
 80074c8:	2301      	movs	r3, #1
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	9307      	str	r3, [sp, #28]
 80074ce:	461a      	mov	r2, r3
 80074d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80074d2:	e00b      	b.n	80074ec <_dtoa_r+0x254>
 80074d4:	2301      	movs	r3, #1
 80074d6:	e7f3      	b.n	80074c0 <_dtoa_r+0x228>
 80074d8:	2300      	movs	r3, #0
 80074da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074de:	18fb      	adds	r3, r7, r3
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	3301      	adds	r3, #1
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	9307      	str	r3, [sp, #28]
 80074e8:	bfb8      	it	lt
 80074ea:	2301      	movlt	r3, #1
 80074ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 80074f0:	2100      	movs	r1, #0
 80074f2:	2204      	movs	r2, #4
 80074f4:	f102 0514 	add.w	r5, r2, #20
 80074f8:	429d      	cmp	r5, r3
 80074fa:	d91f      	bls.n	800753c <_dtoa_r+0x2a4>
 80074fc:	6041      	str	r1, [r0, #4]
 80074fe:	4658      	mov	r0, fp
 8007500:	f000 fd8e 	bl	8008020 <_Balloc>
 8007504:	4682      	mov	sl, r0
 8007506:	2800      	cmp	r0, #0
 8007508:	d13c      	bne.n	8007584 <_dtoa_r+0x2ec>
 800750a:	4b1b      	ldr	r3, [pc, #108]	@ (8007578 <_dtoa_r+0x2e0>)
 800750c:	4602      	mov	r2, r0
 800750e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007512:	e6d8      	b.n	80072c6 <_dtoa_r+0x2e>
 8007514:	2301      	movs	r3, #1
 8007516:	e7e0      	b.n	80074da <_dtoa_r+0x242>
 8007518:	2401      	movs	r4, #1
 800751a:	2300      	movs	r3, #0
 800751c:	9309      	str	r3, [sp, #36]	@ 0x24
 800751e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007520:	f04f 33ff 	mov.w	r3, #4294967295
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	9307      	str	r3, [sp, #28]
 8007528:	2200      	movs	r2, #0
 800752a:	2312      	movs	r3, #18
 800752c:	e7d0      	b.n	80074d0 <_dtoa_r+0x238>
 800752e:	2301      	movs	r3, #1
 8007530:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007532:	e7f5      	b.n	8007520 <_dtoa_r+0x288>
 8007534:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	9307      	str	r3, [sp, #28]
 800753a:	e7d7      	b.n	80074ec <_dtoa_r+0x254>
 800753c:	3101      	adds	r1, #1
 800753e:	0052      	lsls	r2, r2, #1
 8007540:	e7d8      	b.n	80074f4 <_dtoa_r+0x25c>
 8007542:	bf00      	nop
 8007544:	f3af 8000 	nop.w
 8007548:	636f4361 	.word	0x636f4361
 800754c:	3fd287a7 	.word	0x3fd287a7
 8007550:	8b60c8b3 	.word	0x8b60c8b3
 8007554:	3fc68a28 	.word	0x3fc68a28
 8007558:	509f79fb 	.word	0x509f79fb
 800755c:	3fd34413 	.word	0x3fd34413
 8007560:	0800935d 	.word	0x0800935d
 8007564:	08009374 	.word	0x08009374
 8007568:	7ff00000 	.word	0x7ff00000
 800756c:	0800932d 	.word	0x0800932d
 8007570:	3ff80000 	.word	0x3ff80000
 8007574:	08009470 	.word	0x08009470
 8007578:	080093cc 	.word	0x080093cc
 800757c:	08009359 	.word	0x08009359
 8007580:	0800932c 	.word	0x0800932c
 8007584:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007588:	6018      	str	r0, [r3, #0]
 800758a:	9b07      	ldr	r3, [sp, #28]
 800758c:	2b0e      	cmp	r3, #14
 800758e:	f200 80a4 	bhi.w	80076da <_dtoa_r+0x442>
 8007592:	2c00      	cmp	r4, #0
 8007594:	f000 80a1 	beq.w	80076da <_dtoa_r+0x442>
 8007598:	2f00      	cmp	r7, #0
 800759a:	dd33      	ble.n	8007604 <_dtoa_r+0x36c>
 800759c:	4bad      	ldr	r3, [pc, #692]	@ (8007854 <_dtoa_r+0x5bc>)
 800759e:	f007 020f 	and.w	r2, r7, #15
 80075a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075a6:	ed93 7b00 	vldr	d7, [r3]
 80075aa:	05f8      	lsls	r0, r7, #23
 80075ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 80075b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80075b4:	d516      	bpl.n	80075e4 <_dtoa_r+0x34c>
 80075b6:	4ba8      	ldr	r3, [pc, #672]	@ (8007858 <_dtoa_r+0x5c0>)
 80075b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075c0:	f7f9 f944 	bl	800084c <__aeabi_ddiv>
 80075c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075c8:	f004 040f 	and.w	r4, r4, #15
 80075cc:	2603      	movs	r6, #3
 80075ce:	4da2      	ldr	r5, [pc, #648]	@ (8007858 <_dtoa_r+0x5c0>)
 80075d0:	b954      	cbnz	r4, 80075e8 <_dtoa_r+0x350>
 80075d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075da:	f7f9 f937 	bl	800084c <__aeabi_ddiv>
 80075de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075e2:	e028      	b.n	8007636 <_dtoa_r+0x39e>
 80075e4:	2602      	movs	r6, #2
 80075e6:	e7f2      	b.n	80075ce <_dtoa_r+0x336>
 80075e8:	07e1      	lsls	r1, r4, #31
 80075ea:	d508      	bpl.n	80075fe <_dtoa_r+0x366>
 80075ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075f4:	f7f9 f800 	bl	80005f8 <__aeabi_dmul>
 80075f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075fc:	3601      	adds	r6, #1
 80075fe:	1064      	asrs	r4, r4, #1
 8007600:	3508      	adds	r5, #8
 8007602:	e7e5      	b.n	80075d0 <_dtoa_r+0x338>
 8007604:	f000 80d2 	beq.w	80077ac <_dtoa_r+0x514>
 8007608:	427c      	negs	r4, r7
 800760a:	4b92      	ldr	r3, [pc, #584]	@ (8007854 <_dtoa_r+0x5bc>)
 800760c:	4d92      	ldr	r5, [pc, #584]	@ (8007858 <_dtoa_r+0x5c0>)
 800760e:	f004 020f 	and.w	r2, r4, #15
 8007612:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800761e:	f7f8 ffeb 	bl	80005f8 <__aeabi_dmul>
 8007622:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007626:	1124      	asrs	r4, r4, #4
 8007628:	2300      	movs	r3, #0
 800762a:	2602      	movs	r6, #2
 800762c:	2c00      	cmp	r4, #0
 800762e:	f040 80b2 	bne.w	8007796 <_dtoa_r+0x4fe>
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1d3      	bne.n	80075de <_dtoa_r+0x346>
 8007636:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007638:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	f000 80b7 	beq.w	80077b0 <_dtoa_r+0x518>
 8007642:	4b86      	ldr	r3, [pc, #536]	@ (800785c <_dtoa_r+0x5c4>)
 8007644:	2200      	movs	r2, #0
 8007646:	4620      	mov	r0, r4
 8007648:	4629      	mov	r1, r5
 800764a:	f7f9 fa47 	bl	8000adc <__aeabi_dcmplt>
 800764e:	2800      	cmp	r0, #0
 8007650:	f000 80ae 	beq.w	80077b0 <_dtoa_r+0x518>
 8007654:	9b07      	ldr	r3, [sp, #28]
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 80aa 	beq.w	80077b0 <_dtoa_r+0x518>
 800765c:	9b00      	ldr	r3, [sp, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	dd37      	ble.n	80076d2 <_dtoa_r+0x43a>
 8007662:	1e7b      	subs	r3, r7, #1
 8007664:	9304      	str	r3, [sp, #16]
 8007666:	4620      	mov	r0, r4
 8007668:	4b7d      	ldr	r3, [pc, #500]	@ (8007860 <_dtoa_r+0x5c8>)
 800766a:	2200      	movs	r2, #0
 800766c:	4629      	mov	r1, r5
 800766e:	f7f8 ffc3 	bl	80005f8 <__aeabi_dmul>
 8007672:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007676:	9c00      	ldr	r4, [sp, #0]
 8007678:	3601      	adds	r6, #1
 800767a:	4630      	mov	r0, r6
 800767c:	f7f8 ff52 	bl	8000524 <__aeabi_i2d>
 8007680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007684:	f7f8 ffb8 	bl	80005f8 <__aeabi_dmul>
 8007688:	4b76      	ldr	r3, [pc, #472]	@ (8007864 <_dtoa_r+0x5cc>)
 800768a:	2200      	movs	r2, #0
 800768c:	f7f8 fdfe 	bl	800028c <__adddf3>
 8007690:	4605      	mov	r5, r0
 8007692:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007696:	2c00      	cmp	r4, #0
 8007698:	f040 808d 	bne.w	80077b6 <_dtoa_r+0x51e>
 800769c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076a0:	4b71      	ldr	r3, [pc, #452]	@ (8007868 <_dtoa_r+0x5d0>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	f7f8 fdf0 	bl	8000288 <__aeabi_dsub>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076b0:	462a      	mov	r2, r5
 80076b2:	4633      	mov	r3, r6
 80076b4:	f7f9 fa30 	bl	8000b18 <__aeabi_dcmpgt>
 80076b8:	2800      	cmp	r0, #0
 80076ba:	f040 828b 	bne.w	8007bd4 <_dtoa_r+0x93c>
 80076be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076c2:	462a      	mov	r2, r5
 80076c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80076c8:	f7f9 fa08 	bl	8000adc <__aeabi_dcmplt>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	f040 8128 	bne.w	8007922 <_dtoa_r+0x68a>
 80076d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80076d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80076da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f2c0 815a 	blt.w	8007996 <_dtoa_r+0x6fe>
 80076e2:	2f0e      	cmp	r7, #14
 80076e4:	f300 8157 	bgt.w	8007996 <_dtoa_r+0x6fe>
 80076e8:	4b5a      	ldr	r3, [pc, #360]	@ (8007854 <_dtoa_r+0x5bc>)
 80076ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076ee:	ed93 7b00 	vldr	d7, [r3]
 80076f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	ed8d 7b00 	vstr	d7, [sp]
 80076fa:	da03      	bge.n	8007704 <_dtoa_r+0x46c>
 80076fc:	9b07      	ldr	r3, [sp, #28]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f340 8101 	ble.w	8007906 <_dtoa_r+0x66e>
 8007704:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007708:	4656      	mov	r6, sl
 800770a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800770e:	4620      	mov	r0, r4
 8007710:	4629      	mov	r1, r5
 8007712:	f7f9 f89b 	bl	800084c <__aeabi_ddiv>
 8007716:	f7f9 fa1f 	bl	8000b58 <__aeabi_d2iz>
 800771a:	4680      	mov	r8, r0
 800771c:	f7f8 ff02 	bl	8000524 <__aeabi_i2d>
 8007720:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007724:	f7f8 ff68 	bl	80005f8 <__aeabi_dmul>
 8007728:	4602      	mov	r2, r0
 800772a:	460b      	mov	r3, r1
 800772c:	4620      	mov	r0, r4
 800772e:	4629      	mov	r1, r5
 8007730:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007734:	f7f8 fda8 	bl	8000288 <__aeabi_dsub>
 8007738:	f806 4b01 	strb.w	r4, [r6], #1
 800773c:	9d07      	ldr	r5, [sp, #28]
 800773e:	eba6 040a 	sub.w	r4, r6, sl
 8007742:	42a5      	cmp	r5, r4
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	f040 8117 	bne.w	800797a <_dtoa_r+0x6e2>
 800774c:	f7f8 fd9e 	bl	800028c <__adddf3>
 8007750:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007754:	4604      	mov	r4, r0
 8007756:	460d      	mov	r5, r1
 8007758:	f7f9 f9de 	bl	8000b18 <__aeabi_dcmpgt>
 800775c:	2800      	cmp	r0, #0
 800775e:	f040 80f9 	bne.w	8007954 <_dtoa_r+0x6bc>
 8007762:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007766:	4620      	mov	r0, r4
 8007768:	4629      	mov	r1, r5
 800776a:	f7f9 f9ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800776e:	b118      	cbz	r0, 8007778 <_dtoa_r+0x4e0>
 8007770:	f018 0f01 	tst.w	r8, #1
 8007774:	f040 80ee 	bne.w	8007954 <_dtoa_r+0x6bc>
 8007778:	4649      	mov	r1, r9
 800777a:	4658      	mov	r0, fp
 800777c:	f000 fc90 	bl	80080a0 <_Bfree>
 8007780:	2300      	movs	r3, #0
 8007782:	7033      	strb	r3, [r6, #0]
 8007784:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007786:	3701      	adds	r7, #1
 8007788:	601f      	str	r7, [r3, #0]
 800778a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 831d 	beq.w	8007dcc <_dtoa_r+0xb34>
 8007792:	601e      	str	r6, [r3, #0]
 8007794:	e31a      	b.n	8007dcc <_dtoa_r+0xb34>
 8007796:	07e2      	lsls	r2, r4, #31
 8007798:	d505      	bpl.n	80077a6 <_dtoa_r+0x50e>
 800779a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800779e:	f7f8 ff2b 	bl	80005f8 <__aeabi_dmul>
 80077a2:	3601      	adds	r6, #1
 80077a4:	2301      	movs	r3, #1
 80077a6:	1064      	asrs	r4, r4, #1
 80077a8:	3508      	adds	r5, #8
 80077aa:	e73f      	b.n	800762c <_dtoa_r+0x394>
 80077ac:	2602      	movs	r6, #2
 80077ae:	e742      	b.n	8007636 <_dtoa_r+0x39e>
 80077b0:	9c07      	ldr	r4, [sp, #28]
 80077b2:	9704      	str	r7, [sp, #16]
 80077b4:	e761      	b.n	800767a <_dtoa_r+0x3e2>
 80077b6:	4b27      	ldr	r3, [pc, #156]	@ (8007854 <_dtoa_r+0x5bc>)
 80077b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077c2:	4454      	add	r4, sl
 80077c4:	2900      	cmp	r1, #0
 80077c6:	d053      	beq.n	8007870 <_dtoa_r+0x5d8>
 80077c8:	4928      	ldr	r1, [pc, #160]	@ (800786c <_dtoa_r+0x5d4>)
 80077ca:	2000      	movs	r0, #0
 80077cc:	f7f9 f83e 	bl	800084c <__aeabi_ddiv>
 80077d0:	4633      	mov	r3, r6
 80077d2:	462a      	mov	r2, r5
 80077d4:	f7f8 fd58 	bl	8000288 <__aeabi_dsub>
 80077d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077dc:	4656      	mov	r6, sl
 80077de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077e2:	f7f9 f9b9 	bl	8000b58 <__aeabi_d2iz>
 80077e6:	4605      	mov	r5, r0
 80077e8:	f7f8 fe9c 	bl	8000524 <__aeabi_i2d>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077f4:	f7f8 fd48 	bl	8000288 <__aeabi_dsub>
 80077f8:	3530      	adds	r5, #48	@ 0x30
 80077fa:	4602      	mov	r2, r0
 80077fc:	460b      	mov	r3, r1
 80077fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007802:	f806 5b01 	strb.w	r5, [r6], #1
 8007806:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800780a:	f7f9 f967 	bl	8000adc <__aeabi_dcmplt>
 800780e:	2800      	cmp	r0, #0
 8007810:	d171      	bne.n	80078f6 <_dtoa_r+0x65e>
 8007812:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007816:	4911      	ldr	r1, [pc, #68]	@ (800785c <_dtoa_r+0x5c4>)
 8007818:	2000      	movs	r0, #0
 800781a:	f7f8 fd35 	bl	8000288 <__aeabi_dsub>
 800781e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007822:	f7f9 f95b 	bl	8000adc <__aeabi_dcmplt>
 8007826:	2800      	cmp	r0, #0
 8007828:	f040 8095 	bne.w	8007956 <_dtoa_r+0x6be>
 800782c:	42a6      	cmp	r6, r4
 800782e:	f43f af50 	beq.w	80076d2 <_dtoa_r+0x43a>
 8007832:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007836:	4b0a      	ldr	r3, [pc, #40]	@ (8007860 <_dtoa_r+0x5c8>)
 8007838:	2200      	movs	r2, #0
 800783a:	f7f8 fedd 	bl	80005f8 <__aeabi_dmul>
 800783e:	4b08      	ldr	r3, [pc, #32]	@ (8007860 <_dtoa_r+0x5c8>)
 8007840:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007844:	2200      	movs	r2, #0
 8007846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800784a:	f7f8 fed5 	bl	80005f8 <__aeabi_dmul>
 800784e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007852:	e7c4      	b.n	80077de <_dtoa_r+0x546>
 8007854:	08009470 	.word	0x08009470
 8007858:	08009448 	.word	0x08009448
 800785c:	3ff00000 	.word	0x3ff00000
 8007860:	40240000 	.word	0x40240000
 8007864:	401c0000 	.word	0x401c0000
 8007868:	40140000 	.word	0x40140000
 800786c:	3fe00000 	.word	0x3fe00000
 8007870:	4631      	mov	r1, r6
 8007872:	4628      	mov	r0, r5
 8007874:	f7f8 fec0 	bl	80005f8 <__aeabi_dmul>
 8007878:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800787c:	9415      	str	r4, [sp, #84]	@ 0x54
 800787e:	4656      	mov	r6, sl
 8007880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007884:	f7f9 f968 	bl	8000b58 <__aeabi_d2iz>
 8007888:	4605      	mov	r5, r0
 800788a:	f7f8 fe4b 	bl	8000524 <__aeabi_i2d>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007896:	f7f8 fcf7 	bl	8000288 <__aeabi_dsub>
 800789a:	3530      	adds	r5, #48	@ 0x30
 800789c:	f806 5b01 	strb.w	r5, [r6], #1
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	42a6      	cmp	r6, r4
 80078a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078aa:	f04f 0200 	mov.w	r2, #0
 80078ae:	d124      	bne.n	80078fa <_dtoa_r+0x662>
 80078b0:	4bac      	ldr	r3, [pc, #688]	@ (8007b64 <_dtoa_r+0x8cc>)
 80078b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80078b6:	f7f8 fce9 	bl	800028c <__adddf3>
 80078ba:	4602      	mov	r2, r0
 80078bc:	460b      	mov	r3, r1
 80078be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078c2:	f7f9 f929 	bl	8000b18 <__aeabi_dcmpgt>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d145      	bne.n	8007956 <_dtoa_r+0x6be>
 80078ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80078ce:	49a5      	ldr	r1, [pc, #660]	@ (8007b64 <_dtoa_r+0x8cc>)
 80078d0:	2000      	movs	r0, #0
 80078d2:	f7f8 fcd9 	bl	8000288 <__aeabi_dsub>
 80078d6:	4602      	mov	r2, r0
 80078d8:	460b      	mov	r3, r1
 80078da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078de:	f7f9 f8fd 	bl	8000adc <__aeabi_dcmplt>
 80078e2:	2800      	cmp	r0, #0
 80078e4:	f43f aef5 	beq.w	80076d2 <_dtoa_r+0x43a>
 80078e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80078ea:	1e73      	subs	r3, r6, #1
 80078ec:	9315      	str	r3, [sp, #84]	@ 0x54
 80078ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80078f2:	2b30      	cmp	r3, #48	@ 0x30
 80078f4:	d0f8      	beq.n	80078e8 <_dtoa_r+0x650>
 80078f6:	9f04      	ldr	r7, [sp, #16]
 80078f8:	e73e      	b.n	8007778 <_dtoa_r+0x4e0>
 80078fa:	4b9b      	ldr	r3, [pc, #620]	@ (8007b68 <_dtoa_r+0x8d0>)
 80078fc:	f7f8 fe7c 	bl	80005f8 <__aeabi_dmul>
 8007900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007904:	e7bc      	b.n	8007880 <_dtoa_r+0x5e8>
 8007906:	d10c      	bne.n	8007922 <_dtoa_r+0x68a>
 8007908:	4b98      	ldr	r3, [pc, #608]	@ (8007b6c <_dtoa_r+0x8d4>)
 800790a:	2200      	movs	r2, #0
 800790c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007910:	f7f8 fe72 	bl	80005f8 <__aeabi_dmul>
 8007914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007918:	f7f9 f8f4 	bl	8000b04 <__aeabi_dcmpge>
 800791c:	2800      	cmp	r0, #0
 800791e:	f000 8157 	beq.w	8007bd0 <_dtoa_r+0x938>
 8007922:	2400      	movs	r4, #0
 8007924:	4625      	mov	r5, r4
 8007926:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007928:	43db      	mvns	r3, r3
 800792a:	9304      	str	r3, [sp, #16]
 800792c:	4656      	mov	r6, sl
 800792e:	2700      	movs	r7, #0
 8007930:	4621      	mov	r1, r4
 8007932:	4658      	mov	r0, fp
 8007934:	f000 fbb4 	bl	80080a0 <_Bfree>
 8007938:	2d00      	cmp	r5, #0
 800793a:	d0dc      	beq.n	80078f6 <_dtoa_r+0x65e>
 800793c:	b12f      	cbz	r7, 800794a <_dtoa_r+0x6b2>
 800793e:	42af      	cmp	r7, r5
 8007940:	d003      	beq.n	800794a <_dtoa_r+0x6b2>
 8007942:	4639      	mov	r1, r7
 8007944:	4658      	mov	r0, fp
 8007946:	f000 fbab 	bl	80080a0 <_Bfree>
 800794a:	4629      	mov	r1, r5
 800794c:	4658      	mov	r0, fp
 800794e:	f000 fba7 	bl	80080a0 <_Bfree>
 8007952:	e7d0      	b.n	80078f6 <_dtoa_r+0x65e>
 8007954:	9704      	str	r7, [sp, #16]
 8007956:	4633      	mov	r3, r6
 8007958:	461e      	mov	r6, r3
 800795a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800795e:	2a39      	cmp	r2, #57	@ 0x39
 8007960:	d107      	bne.n	8007972 <_dtoa_r+0x6da>
 8007962:	459a      	cmp	sl, r3
 8007964:	d1f8      	bne.n	8007958 <_dtoa_r+0x6c0>
 8007966:	9a04      	ldr	r2, [sp, #16]
 8007968:	3201      	adds	r2, #1
 800796a:	9204      	str	r2, [sp, #16]
 800796c:	2230      	movs	r2, #48	@ 0x30
 800796e:	f88a 2000 	strb.w	r2, [sl]
 8007972:	781a      	ldrb	r2, [r3, #0]
 8007974:	3201      	adds	r2, #1
 8007976:	701a      	strb	r2, [r3, #0]
 8007978:	e7bd      	b.n	80078f6 <_dtoa_r+0x65e>
 800797a:	4b7b      	ldr	r3, [pc, #492]	@ (8007b68 <_dtoa_r+0x8d0>)
 800797c:	2200      	movs	r2, #0
 800797e:	f7f8 fe3b 	bl	80005f8 <__aeabi_dmul>
 8007982:	2200      	movs	r2, #0
 8007984:	2300      	movs	r3, #0
 8007986:	4604      	mov	r4, r0
 8007988:	460d      	mov	r5, r1
 800798a:	f7f9 f89d 	bl	8000ac8 <__aeabi_dcmpeq>
 800798e:	2800      	cmp	r0, #0
 8007990:	f43f aebb 	beq.w	800770a <_dtoa_r+0x472>
 8007994:	e6f0      	b.n	8007778 <_dtoa_r+0x4e0>
 8007996:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007998:	2a00      	cmp	r2, #0
 800799a:	f000 80db 	beq.w	8007b54 <_dtoa_r+0x8bc>
 800799e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079a0:	2a01      	cmp	r2, #1
 80079a2:	f300 80bf 	bgt.w	8007b24 <_dtoa_r+0x88c>
 80079a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80079a8:	2a00      	cmp	r2, #0
 80079aa:	f000 80b7 	beq.w	8007b1c <_dtoa_r+0x884>
 80079ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80079b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80079b4:	4646      	mov	r6, r8
 80079b6:	9a08      	ldr	r2, [sp, #32]
 80079b8:	2101      	movs	r1, #1
 80079ba:	441a      	add	r2, r3
 80079bc:	4658      	mov	r0, fp
 80079be:	4498      	add	r8, r3
 80079c0:	9208      	str	r2, [sp, #32]
 80079c2:	f000 fc21 	bl	8008208 <__i2b>
 80079c6:	4605      	mov	r5, r0
 80079c8:	b15e      	cbz	r6, 80079e2 <_dtoa_r+0x74a>
 80079ca:	9b08      	ldr	r3, [sp, #32]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	dd08      	ble.n	80079e2 <_dtoa_r+0x74a>
 80079d0:	42b3      	cmp	r3, r6
 80079d2:	9a08      	ldr	r2, [sp, #32]
 80079d4:	bfa8      	it	ge
 80079d6:	4633      	movge	r3, r6
 80079d8:	eba8 0803 	sub.w	r8, r8, r3
 80079dc:	1af6      	subs	r6, r6, r3
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	9308      	str	r3, [sp, #32]
 80079e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079e4:	b1f3      	cbz	r3, 8007a24 <_dtoa_r+0x78c>
 80079e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 80b7 	beq.w	8007b5c <_dtoa_r+0x8c4>
 80079ee:	b18c      	cbz	r4, 8007a14 <_dtoa_r+0x77c>
 80079f0:	4629      	mov	r1, r5
 80079f2:	4622      	mov	r2, r4
 80079f4:	4658      	mov	r0, fp
 80079f6:	f000 fcc7 	bl	8008388 <__pow5mult>
 80079fa:	464a      	mov	r2, r9
 80079fc:	4601      	mov	r1, r0
 80079fe:	4605      	mov	r5, r0
 8007a00:	4658      	mov	r0, fp
 8007a02:	f000 fc17 	bl	8008234 <__multiply>
 8007a06:	4649      	mov	r1, r9
 8007a08:	9004      	str	r0, [sp, #16]
 8007a0a:	4658      	mov	r0, fp
 8007a0c:	f000 fb48 	bl	80080a0 <_Bfree>
 8007a10:	9b04      	ldr	r3, [sp, #16]
 8007a12:	4699      	mov	r9, r3
 8007a14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a16:	1b1a      	subs	r2, r3, r4
 8007a18:	d004      	beq.n	8007a24 <_dtoa_r+0x78c>
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	4658      	mov	r0, fp
 8007a1e:	f000 fcb3 	bl	8008388 <__pow5mult>
 8007a22:	4681      	mov	r9, r0
 8007a24:	2101      	movs	r1, #1
 8007a26:	4658      	mov	r0, fp
 8007a28:	f000 fbee 	bl	8008208 <__i2b>
 8007a2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a2e:	4604      	mov	r4, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 81cf 	beq.w	8007dd4 <_dtoa_r+0xb3c>
 8007a36:	461a      	mov	r2, r3
 8007a38:	4601      	mov	r1, r0
 8007a3a:	4658      	mov	r0, fp
 8007a3c:	f000 fca4 	bl	8008388 <__pow5mult>
 8007a40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	4604      	mov	r4, r0
 8007a46:	f300 8095 	bgt.w	8007b74 <_dtoa_r+0x8dc>
 8007a4a:	9b02      	ldr	r3, [sp, #8]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f040 8087 	bne.w	8007b60 <_dtoa_r+0x8c8>
 8007a52:	9b03      	ldr	r3, [sp, #12]
 8007a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f040 8089 	bne.w	8007b70 <_dtoa_r+0x8d8>
 8007a5e:	9b03      	ldr	r3, [sp, #12]
 8007a60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a64:	0d1b      	lsrs	r3, r3, #20
 8007a66:	051b      	lsls	r3, r3, #20
 8007a68:	b12b      	cbz	r3, 8007a76 <_dtoa_r+0x7de>
 8007a6a:	9b08      	ldr	r3, [sp, #32]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	9308      	str	r3, [sp, #32]
 8007a70:	f108 0801 	add.w	r8, r8, #1
 8007a74:	2301      	movs	r3, #1
 8007a76:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 81b0 	beq.w	8007de0 <_dtoa_r+0xb48>
 8007a80:	6923      	ldr	r3, [r4, #16]
 8007a82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a86:	6918      	ldr	r0, [r3, #16]
 8007a88:	f000 fb72 	bl	8008170 <__hi0bits>
 8007a8c:	f1c0 0020 	rsb	r0, r0, #32
 8007a90:	9b08      	ldr	r3, [sp, #32]
 8007a92:	4418      	add	r0, r3
 8007a94:	f010 001f 	ands.w	r0, r0, #31
 8007a98:	d077      	beq.n	8007b8a <_dtoa_r+0x8f2>
 8007a9a:	f1c0 0320 	rsb	r3, r0, #32
 8007a9e:	2b04      	cmp	r3, #4
 8007aa0:	dd6b      	ble.n	8007b7a <_dtoa_r+0x8e2>
 8007aa2:	9b08      	ldr	r3, [sp, #32]
 8007aa4:	f1c0 001c 	rsb	r0, r0, #28
 8007aa8:	4403      	add	r3, r0
 8007aaa:	4480      	add	r8, r0
 8007aac:	4406      	add	r6, r0
 8007aae:	9308      	str	r3, [sp, #32]
 8007ab0:	f1b8 0f00 	cmp.w	r8, #0
 8007ab4:	dd05      	ble.n	8007ac2 <_dtoa_r+0x82a>
 8007ab6:	4649      	mov	r1, r9
 8007ab8:	4642      	mov	r2, r8
 8007aba:	4658      	mov	r0, fp
 8007abc:	f000 fcbe 	bl	800843c <__lshift>
 8007ac0:	4681      	mov	r9, r0
 8007ac2:	9b08      	ldr	r3, [sp, #32]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	dd05      	ble.n	8007ad4 <_dtoa_r+0x83c>
 8007ac8:	4621      	mov	r1, r4
 8007aca:	461a      	mov	r2, r3
 8007acc:	4658      	mov	r0, fp
 8007ace:	f000 fcb5 	bl	800843c <__lshift>
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d059      	beq.n	8007b8e <_dtoa_r+0x8f6>
 8007ada:	4621      	mov	r1, r4
 8007adc:	4648      	mov	r0, r9
 8007ade:	f000 fd19 	bl	8008514 <__mcmp>
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	da53      	bge.n	8007b8e <_dtoa_r+0x8f6>
 8007ae6:	1e7b      	subs	r3, r7, #1
 8007ae8:	9304      	str	r3, [sp, #16]
 8007aea:	4649      	mov	r1, r9
 8007aec:	2300      	movs	r3, #0
 8007aee:	220a      	movs	r2, #10
 8007af0:	4658      	mov	r0, fp
 8007af2:	f000 faf7 	bl	80080e4 <__multadd>
 8007af6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007af8:	4681      	mov	r9, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 8172 	beq.w	8007de4 <_dtoa_r+0xb4c>
 8007b00:	2300      	movs	r3, #0
 8007b02:	4629      	mov	r1, r5
 8007b04:	220a      	movs	r2, #10
 8007b06:	4658      	mov	r0, fp
 8007b08:	f000 faec 	bl	80080e4 <__multadd>
 8007b0c:	9b00      	ldr	r3, [sp, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	4605      	mov	r5, r0
 8007b12:	dc67      	bgt.n	8007be4 <_dtoa_r+0x94c>
 8007b14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	dc41      	bgt.n	8007b9e <_dtoa_r+0x906>
 8007b1a:	e063      	b.n	8007be4 <_dtoa_r+0x94c>
 8007b1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007b1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b22:	e746      	b.n	80079b2 <_dtoa_r+0x71a>
 8007b24:	9b07      	ldr	r3, [sp, #28]
 8007b26:	1e5c      	subs	r4, r3, #1
 8007b28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b2a:	42a3      	cmp	r3, r4
 8007b2c:	bfbf      	itttt	lt
 8007b2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007b30:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007b32:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007b34:	1ae3      	sublt	r3, r4, r3
 8007b36:	bfb4      	ite	lt
 8007b38:	18d2      	addlt	r2, r2, r3
 8007b3a:	1b1c      	subge	r4, r3, r4
 8007b3c:	9b07      	ldr	r3, [sp, #28]
 8007b3e:	bfbc      	itt	lt
 8007b40:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007b42:	2400      	movlt	r4, #0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	bfb5      	itete	lt
 8007b48:	eba8 0603 	sublt.w	r6, r8, r3
 8007b4c:	9b07      	ldrge	r3, [sp, #28]
 8007b4e:	2300      	movlt	r3, #0
 8007b50:	4646      	movge	r6, r8
 8007b52:	e730      	b.n	80079b6 <_dtoa_r+0x71e>
 8007b54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b56:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b58:	4646      	mov	r6, r8
 8007b5a:	e735      	b.n	80079c8 <_dtoa_r+0x730>
 8007b5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b5e:	e75c      	b.n	8007a1a <_dtoa_r+0x782>
 8007b60:	2300      	movs	r3, #0
 8007b62:	e788      	b.n	8007a76 <_dtoa_r+0x7de>
 8007b64:	3fe00000 	.word	0x3fe00000
 8007b68:	40240000 	.word	0x40240000
 8007b6c:	40140000 	.word	0x40140000
 8007b70:	9b02      	ldr	r3, [sp, #8]
 8007b72:	e780      	b.n	8007a76 <_dtoa_r+0x7de>
 8007b74:	2300      	movs	r3, #0
 8007b76:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b78:	e782      	b.n	8007a80 <_dtoa_r+0x7e8>
 8007b7a:	d099      	beq.n	8007ab0 <_dtoa_r+0x818>
 8007b7c:	9a08      	ldr	r2, [sp, #32]
 8007b7e:	331c      	adds	r3, #28
 8007b80:	441a      	add	r2, r3
 8007b82:	4498      	add	r8, r3
 8007b84:	441e      	add	r6, r3
 8007b86:	9208      	str	r2, [sp, #32]
 8007b88:	e792      	b.n	8007ab0 <_dtoa_r+0x818>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	e7f6      	b.n	8007b7c <_dtoa_r+0x8e4>
 8007b8e:	9b07      	ldr	r3, [sp, #28]
 8007b90:	9704      	str	r7, [sp, #16]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	dc20      	bgt.n	8007bd8 <_dtoa_r+0x940>
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	dd1e      	ble.n	8007bdc <_dtoa_r+0x944>
 8007b9e:	9b00      	ldr	r3, [sp, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f47f aec0 	bne.w	8007926 <_dtoa_r+0x68e>
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	2205      	movs	r2, #5
 8007baa:	4658      	mov	r0, fp
 8007bac:	f000 fa9a 	bl	80080e4 <__multadd>
 8007bb0:	4601      	mov	r1, r0
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	4648      	mov	r0, r9
 8007bb6:	f000 fcad 	bl	8008514 <__mcmp>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	f77f aeb3 	ble.w	8007926 <_dtoa_r+0x68e>
 8007bc0:	4656      	mov	r6, sl
 8007bc2:	2331      	movs	r3, #49	@ 0x31
 8007bc4:	f806 3b01 	strb.w	r3, [r6], #1
 8007bc8:	9b04      	ldr	r3, [sp, #16]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	9304      	str	r3, [sp, #16]
 8007bce:	e6ae      	b.n	800792e <_dtoa_r+0x696>
 8007bd0:	9c07      	ldr	r4, [sp, #28]
 8007bd2:	9704      	str	r7, [sp, #16]
 8007bd4:	4625      	mov	r5, r4
 8007bd6:	e7f3      	b.n	8007bc0 <_dtoa_r+0x928>
 8007bd8:	9b07      	ldr	r3, [sp, #28]
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 8104 	beq.w	8007dec <_dtoa_r+0xb54>
 8007be4:	2e00      	cmp	r6, #0
 8007be6:	dd05      	ble.n	8007bf4 <_dtoa_r+0x95c>
 8007be8:	4629      	mov	r1, r5
 8007bea:	4632      	mov	r2, r6
 8007bec:	4658      	mov	r0, fp
 8007bee:	f000 fc25 	bl	800843c <__lshift>
 8007bf2:	4605      	mov	r5, r0
 8007bf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d05a      	beq.n	8007cb0 <_dtoa_r+0xa18>
 8007bfa:	6869      	ldr	r1, [r5, #4]
 8007bfc:	4658      	mov	r0, fp
 8007bfe:	f000 fa0f 	bl	8008020 <_Balloc>
 8007c02:	4606      	mov	r6, r0
 8007c04:	b928      	cbnz	r0, 8007c12 <_dtoa_r+0x97a>
 8007c06:	4b84      	ldr	r3, [pc, #528]	@ (8007e18 <_dtoa_r+0xb80>)
 8007c08:	4602      	mov	r2, r0
 8007c0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c0e:	f7ff bb5a 	b.w	80072c6 <_dtoa_r+0x2e>
 8007c12:	692a      	ldr	r2, [r5, #16]
 8007c14:	3202      	adds	r2, #2
 8007c16:	0092      	lsls	r2, r2, #2
 8007c18:	f105 010c 	add.w	r1, r5, #12
 8007c1c:	300c      	adds	r0, #12
 8007c1e:	f001 f813 	bl	8008c48 <memcpy>
 8007c22:	2201      	movs	r2, #1
 8007c24:	4631      	mov	r1, r6
 8007c26:	4658      	mov	r0, fp
 8007c28:	f000 fc08 	bl	800843c <__lshift>
 8007c2c:	f10a 0301 	add.w	r3, sl, #1
 8007c30:	9307      	str	r3, [sp, #28]
 8007c32:	9b00      	ldr	r3, [sp, #0]
 8007c34:	4453      	add	r3, sl
 8007c36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c38:	9b02      	ldr	r3, [sp, #8]
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	462f      	mov	r7, r5
 8007c40:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c42:	4605      	mov	r5, r0
 8007c44:	9b07      	ldr	r3, [sp, #28]
 8007c46:	4621      	mov	r1, r4
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	4648      	mov	r0, r9
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	f7ff fa98 	bl	8007182 <quorem>
 8007c52:	4639      	mov	r1, r7
 8007c54:	9002      	str	r0, [sp, #8]
 8007c56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c5a:	4648      	mov	r0, r9
 8007c5c:	f000 fc5a 	bl	8008514 <__mcmp>
 8007c60:	462a      	mov	r2, r5
 8007c62:	9008      	str	r0, [sp, #32]
 8007c64:	4621      	mov	r1, r4
 8007c66:	4658      	mov	r0, fp
 8007c68:	f000 fc70 	bl	800854c <__mdiff>
 8007c6c:	68c2      	ldr	r2, [r0, #12]
 8007c6e:	4606      	mov	r6, r0
 8007c70:	bb02      	cbnz	r2, 8007cb4 <_dtoa_r+0xa1c>
 8007c72:	4601      	mov	r1, r0
 8007c74:	4648      	mov	r0, r9
 8007c76:	f000 fc4d 	bl	8008514 <__mcmp>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	4631      	mov	r1, r6
 8007c7e:	4658      	mov	r0, fp
 8007c80:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c82:	f000 fa0d 	bl	80080a0 <_Bfree>
 8007c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c8a:	9e07      	ldr	r6, [sp, #28]
 8007c8c:	ea43 0102 	orr.w	r1, r3, r2
 8007c90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c92:	4319      	orrs	r1, r3
 8007c94:	d110      	bne.n	8007cb8 <_dtoa_r+0xa20>
 8007c96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c9a:	d029      	beq.n	8007cf0 <_dtoa_r+0xa58>
 8007c9c:	9b08      	ldr	r3, [sp, #32]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	dd02      	ble.n	8007ca8 <_dtoa_r+0xa10>
 8007ca2:	9b02      	ldr	r3, [sp, #8]
 8007ca4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007ca8:	9b00      	ldr	r3, [sp, #0]
 8007caa:	f883 8000 	strb.w	r8, [r3]
 8007cae:	e63f      	b.n	8007930 <_dtoa_r+0x698>
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	e7bb      	b.n	8007c2c <_dtoa_r+0x994>
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	e7e1      	b.n	8007c7c <_dtoa_r+0x9e4>
 8007cb8:	9b08      	ldr	r3, [sp, #32]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	db04      	blt.n	8007cc8 <_dtoa_r+0xa30>
 8007cbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007cc0:	430b      	orrs	r3, r1
 8007cc2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cc4:	430b      	orrs	r3, r1
 8007cc6:	d120      	bne.n	8007d0a <_dtoa_r+0xa72>
 8007cc8:	2a00      	cmp	r2, #0
 8007cca:	dded      	ble.n	8007ca8 <_dtoa_r+0xa10>
 8007ccc:	4649      	mov	r1, r9
 8007cce:	2201      	movs	r2, #1
 8007cd0:	4658      	mov	r0, fp
 8007cd2:	f000 fbb3 	bl	800843c <__lshift>
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	4681      	mov	r9, r0
 8007cda:	f000 fc1b 	bl	8008514 <__mcmp>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	dc03      	bgt.n	8007cea <_dtoa_r+0xa52>
 8007ce2:	d1e1      	bne.n	8007ca8 <_dtoa_r+0xa10>
 8007ce4:	f018 0f01 	tst.w	r8, #1
 8007ce8:	d0de      	beq.n	8007ca8 <_dtoa_r+0xa10>
 8007cea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007cee:	d1d8      	bne.n	8007ca2 <_dtoa_r+0xa0a>
 8007cf0:	9a00      	ldr	r2, [sp, #0]
 8007cf2:	2339      	movs	r3, #57	@ 0x39
 8007cf4:	7013      	strb	r3, [r2, #0]
 8007cf6:	4633      	mov	r3, r6
 8007cf8:	461e      	mov	r6, r3
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007d00:	2a39      	cmp	r2, #57	@ 0x39
 8007d02:	d052      	beq.n	8007daa <_dtoa_r+0xb12>
 8007d04:	3201      	adds	r2, #1
 8007d06:	701a      	strb	r2, [r3, #0]
 8007d08:	e612      	b.n	8007930 <_dtoa_r+0x698>
 8007d0a:	2a00      	cmp	r2, #0
 8007d0c:	dd07      	ble.n	8007d1e <_dtoa_r+0xa86>
 8007d0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d12:	d0ed      	beq.n	8007cf0 <_dtoa_r+0xa58>
 8007d14:	9a00      	ldr	r2, [sp, #0]
 8007d16:	f108 0301 	add.w	r3, r8, #1
 8007d1a:	7013      	strb	r3, [r2, #0]
 8007d1c:	e608      	b.n	8007930 <_dtoa_r+0x698>
 8007d1e:	9b07      	ldr	r3, [sp, #28]
 8007d20:	9a07      	ldr	r2, [sp, #28]
 8007d22:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007d26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d028      	beq.n	8007d7e <_dtoa_r+0xae6>
 8007d2c:	4649      	mov	r1, r9
 8007d2e:	2300      	movs	r3, #0
 8007d30:	220a      	movs	r2, #10
 8007d32:	4658      	mov	r0, fp
 8007d34:	f000 f9d6 	bl	80080e4 <__multadd>
 8007d38:	42af      	cmp	r7, r5
 8007d3a:	4681      	mov	r9, r0
 8007d3c:	f04f 0300 	mov.w	r3, #0
 8007d40:	f04f 020a 	mov.w	r2, #10
 8007d44:	4639      	mov	r1, r7
 8007d46:	4658      	mov	r0, fp
 8007d48:	d107      	bne.n	8007d5a <_dtoa_r+0xac2>
 8007d4a:	f000 f9cb 	bl	80080e4 <__multadd>
 8007d4e:	4607      	mov	r7, r0
 8007d50:	4605      	mov	r5, r0
 8007d52:	9b07      	ldr	r3, [sp, #28]
 8007d54:	3301      	adds	r3, #1
 8007d56:	9307      	str	r3, [sp, #28]
 8007d58:	e774      	b.n	8007c44 <_dtoa_r+0x9ac>
 8007d5a:	f000 f9c3 	bl	80080e4 <__multadd>
 8007d5e:	4629      	mov	r1, r5
 8007d60:	4607      	mov	r7, r0
 8007d62:	2300      	movs	r3, #0
 8007d64:	220a      	movs	r2, #10
 8007d66:	4658      	mov	r0, fp
 8007d68:	f000 f9bc 	bl	80080e4 <__multadd>
 8007d6c:	4605      	mov	r5, r0
 8007d6e:	e7f0      	b.n	8007d52 <_dtoa_r+0xaba>
 8007d70:	9b00      	ldr	r3, [sp, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	bfcc      	ite	gt
 8007d76:	461e      	movgt	r6, r3
 8007d78:	2601      	movle	r6, #1
 8007d7a:	4456      	add	r6, sl
 8007d7c:	2700      	movs	r7, #0
 8007d7e:	4649      	mov	r1, r9
 8007d80:	2201      	movs	r2, #1
 8007d82:	4658      	mov	r0, fp
 8007d84:	f000 fb5a 	bl	800843c <__lshift>
 8007d88:	4621      	mov	r1, r4
 8007d8a:	4681      	mov	r9, r0
 8007d8c:	f000 fbc2 	bl	8008514 <__mcmp>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	dcb0      	bgt.n	8007cf6 <_dtoa_r+0xa5e>
 8007d94:	d102      	bne.n	8007d9c <_dtoa_r+0xb04>
 8007d96:	f018 0f01 	tst.w	r8, #1
 8007d9a:	d1ac      	bne.n	8007cf6 <_dtoa_r+0xa5e>
 8007d9c:	4633      	mov	r3, r6
 8007d9e:	461e      	mov	r6, r3
 8007da0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007da4:	2a30      	cmp	r2, #48	@ 0x30
 8007da6:	d0fa      	beq.n	8007d9e <_dtoa_r+0xb06>
 8007da8:	e5c2      	b.n	8007930 <_dtoa_r+0x698>
 8007daa:	459a      	cmp	sl, r3
 8007dac:	d1a4      	bne.n	8007cf8 <_dtoa_r+0xa60>
 8007dae:	9b04      	ldr	r3, [sp, #16]
 8007db0:	3301      	adds	r3, #1
 8007db2:	9304      	str	r3, [sp, #16]
 8007db4:	2331      	movs	r3, #49	@ 0x31
 8007db6:	f88a 3000 	strb.w	r3, [sl]
 8007dba:	e5b9      	b.n	8007930 <_dtoa_r+0x698>
 8007dbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007dbe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007e1c <_dtoa_r+0xb84>
 8007dc2:	b11b      	cbz	r3, 8007dcc <_dtoa_r+0xb34>
 8007dc4:	f10a 0308 	add.w	r3, sl, #8
 8007dc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007dca:	6013      	str	r3, [r2, #0]
 8007dcc:	4650      	mov	r0, sl
 8007dce:	b019      	add	sp, #100	@ 0x64
 8007dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	f77f ae37 	ble.w	8007a4a <_dtoa_r+0x7b2>
 8007ddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dde:	930a      	str	r3, [sp, #40]	@ 0x28
 8007de0:	2001      	movs	r0, #1
 8007de2:	e655      	b.n	8007a90 <_dtoa_r+0x7f8>
 8007de4:	9b00      	ldr	r3, [sp, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f77f aed6 	ble.w	8007b98 <_dtoa_r+0x900>
 8007dec:	4656      	mov	r6, sl
 8007dee:	4621      	mov	r1, r4
 8007df0:	4648      	mov	r0, r9
 8007df2:	f7ff f9c6 	bl	8007182 <quorem>
 8007df6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007dfa:	f806 8b01 	strb.w	r8, [r6], #1
 8007dfe:	9b00      	ldr	r3, [sp, #0]
 8007e00:	eba6 020a 	sub.w	r2, r6, sl
 8007e04:	4293      	cmp	r3, r2
 8007e06:	ddb3      	ble.n	8007d70 <_dtoa_r+0xad8>
 8007e08:	4649      	mov	r1, r9
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	220a      	movs	r2, #10
 8007e0e:	4658      	mov	r0, fp
 8007e10:	f000 f968 	bl	80080e4 <__multadd>
 8007e14:	4681      	mov	r9, r0
 8007e16:	e7ea      	b.n	8007dee <_dtoa_r+0xb56>
 8007e18:	080093cc 	.word	0x080093cc
 8007e1c:	08009350 	.word	0x08009350

08007e20 <_free_r>:
 8007e20:	b538      	push	{r3, r4, r5, lr}
 8007e22:	4605      	mov	r5, r0
 8007e24:	2900      	cmp	r1, #0
 8007e26:	d041      	beq.n	8007eac <_free_r+0x8c>
 8007e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e2c:	1f0c      	subs	r4, r1, #4
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	bfb8      	it	lt
 8007e32:	18e4      	addlt	r4, r4, r3
 8007e34:	f000 f8e8 	bl	8008008 <__malloc_lock>
 8007e38:	4a1d      	ldr	r2, [pc, #116]	@ (8007eb0 <_free_r+0x90>)
 8007e3a:	6813      	ldr	r3, [r2, #0]
 8007e3c:	b933      	cbnz	r3, 8007e4c <_free_r+0x2c>
 8007e3e:	6063      	str	r3, [r4, #4]
 8007e40:	6014      	str	r4, [r2, #0]
 8007e42:	4628      	mov	r0, r5
 8007e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e48:	f000 b8e4 	b.w	8008014 <__malloc_unlock>
 8007e4c:	42a3      	cmp	r3, r4
 8007e4e:	d908      	bls.n	8007e62 <_free_r+0x42>
 8007e50:	6820      	ldr	r0, [r4, #0]
 8007e52:	1821      	adds	r1, r4, r0
 8007e54:	428b      	cmp	r3, r1
 8007e56:	bf01      	itttt	eq
 8007e58:	6819      	ldreq	r1, [r3, #0]
 8007e5a:	685b      	ldreq	r3, [r3, #4]
 8007e5c:	1809      	addeq	r1, r1, r0
 8007e5e:	6021      	streq	r1, [r4, #0]
 8007e60:	e7ed      	b.n	8007e3e <_free_r+0x1e>
 8007e62:	461a      	mov	r2, r3
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	b10b      	cbz	r3, 8007e6c <_free_r+0x4c>
 8007e68:	42a3      	cmp	r3, r4
 8007e6a:	d9fa      	bls.n	8007e62 <_free_r+0x42>
 8007e6c:	6811      	ldr	r1, [r2, #0]
 8007e6e:	1850      	adds	r0, r2, r1
 8007e70:	42a0      	cmp	r0, r4
 8007e72:	d10b      	bne.n	8007e8c <_free_r+0x6c>
 8007e74:	6820      	ldr	r0, [r4, #0]
 8007e76:	4401      	add	r1, r0
 8007e78:	1850      	adds	r0, r2, r1
 8007e7a:	4283      	cmp	r3, r0
 8007e7c:	6011      	str	r1, [r2, #0]
 8007e7e:	d1e0      	bne.n	8007e42 <_free_r+0x22>
 8007e80:	6818      	ldr	r0, [r3, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	6053      	str	r3, [r2, #4]
 8007e86:	4408      	add	r0, r1
 8007e88:	6010      	str	r0, [r2, #0]
 8007e8a:	e7da      	b.n	8007e42 <_free_r+0x22>
 8007e8c:	d902      	bls.n	8007e94 <_free_r+0x74>
 8007e8e:	230c      	movs	r3, #12
 8007e90:	602b      	str	r3, [r5, #0]
 8007e92:	e7d6      	b.n	8007e42 <_free_r+0x22>
 8007e94:	6820      	ldr	r0, [r4, #0]
 8007e96:	1821      	adds	r1, r4, r0
 8007e98:	428b      	cmp	r3, r1
 8007e9a:	bf04      	itt	eq
 8007e9c:	6819      	ldreq	r1, [r3, #0]
 8007e9e:	685b      	ldreq	r3, [r3, #4]
 8007ea0:	6063      	str	r3, [r4, #4]
 8007ea2:	bf04      	itt	eq
 8007ea4:	1809      	addeq	r1, r1, r0
 8007ea6:	6021      	streq	r1, [r4, #0]
 8007ea8:	6054      	str	r4, [r2, #4]
 8007eaa:	e7ca      	b.n	8007e42 <_free_r+0x22>
 8007eac:	bd38      	pop	{r3, r4, r5, pc}
 8007eae:	bf00      	nop
 8007eb0:	200004ec 	.word	0x200004ec

08007eb4 <malloc>:
 8007eb4:	4b02      	ldr	r3, [pc, #8]	@ (8007ec0 <malloc+0xc>)
 8007eb6:	4601      	mov	r1, r0
 8007eb8:	6818      	ldr	r0, [r3, #0]
 8007eba:	f000 b825 	b.w	8007f08 <_malloc_r>
 8007ebe:	bf00      	nop
 8007ec0:	20000018 	.word	0x20000018

08007ec4 <sbrk_aligned>:
 8007ec4:	b570      	push	{r4, r5, r6, lr}
 8007ec6:	4e0f      	ldr	r6, [pc, #60]	@ (8007f04 <sbrk_aligned+0x40>)
 8007ec8:	460c      	mov	r4, r1
 8007eca:	6831      	ldr	r1, [r6, #0]
 8007ecc:	4605      	mov	r5, r0
 8007ece:	b911      	cbnz	r1, 8007ed6 <sbrk_aligned+0x12>
 8007ed0:	f000 feaa 	bl	8008c28 <_sbrk_r>
 8007ed4:	6030      	str	r0, [r6, #0]
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	4628      	mov	r0, r5
 8007eda:	f000 fea5 	bl	8008c28 <_sbrk_r>
 8007ede:	1c43      	adds	r3, r0, #1
 8007ee0:	d103      	bne.n	8007eea <sbrk_aligned+0x26>
 8007ee2:	f04f 34ff 	mov.w	r4, #4294967295
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	bd70      	pop	{r4, r5, r6, pc}
 8007eea:	1cc4      	adds	r4, r0, #3
 8007eec:	f024 0403 	bic.w	r4, r4, #3
 8007ef0:	42a0      	cmp	r0, r4
 8007ef2:	d0f8      	beq.n	8007ee6 <sbrk_aligned+0x22>
 8007ef4:	1a21      	subs	r1, r4, r0
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	f000 fe96 	bl	8008c28 <_sbrk_r>
 8007efc:	3001      	adds	r0, #1
 8007efe:	d1f2      	bne.n	8007ee6 <sbrk_aligned+0x22>
 8007f00:	e7ef      	b.n	8007ee2 <sbrk_aligned+0x1e>
 8007f02:	bf00      	nop
 8007f04:	200004e8 	.word	0x200004e8

08007f08 <_malloc_r>:
 8007f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f0c:	1ccd      	adds	r5, r1, #3
 8007f0e:	f025 0503 	bic.w	r5, r5, #3
 8007f12:	3508      	adds	r5, #8
 8007f14:	2d0c      	cmp	r5, #12
 8007f16:	bf38      	it	cc
 8007f18:	250c      	movcc	r5, #12
 8007f1a:	2d00      	cmp	r5, #0
 8007f1c:	4606      	mov	r6, r0
 8007f1e:	db01      	blt.n	8007f24 <_malloc_r+0x1c>
 8007f20:	42a9      	cmp	r1, r5
 8007f22:	d904      	bls.n	8007f2e <_malloc_r+0x26>
 8007f24:	230c      	movs	r3, #12
 8007f26:	6033      	str	r3, [r6, #0]
 8007f28:	2000      	movs	r0, #0
 8007f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008004 <_malloc_r+0xfc>
 8007f32:	f000 f869 	bl	8008008 <__malloc_lock>
 8007f36:	f8d8 3000 	ldr.w	r3, [r8]
 8007f3a:	461c      	mov	r4, r3
 8007f3c:	bb44      	cbnz	r4, 8007f90 <_malloc_r+0x88>
 8007f3e:	4629      	mov	r1, r5
 8007f40:	4630      	mov	r0, r6
 8007f42:	f7ff ffbf 	bl	8007ec4 <sbrk_aligned>
 8007f46:	1c43      	adds	r3, r0, #1
 8007f48:	4604      	mov	r4, r0
 8007f4a:	d158      	bne.n	8007ffe <_malloc_r+0xf6>
 8007f4c:	f8d8 4000 	ldr.w	r4, [r8]
 8007f50:	4627      	mov	r7, r4
 8007f52:	2f00      	cmp	r7, #0
 8007f54:	d143      	bne.n	8007fde <_malloc_r+0xd6>
 8007f56:	2c00      	cmp	r4, #0
 8007f58:	d04b      	beq.n	8007ff2 <_malloc_r+0xea>
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	4639      	mov	r1, r7
 8007f5e:	4630      	mov	r0, r6
 8007f60:	eb04 0903 	add.w	r9, r4, r3
 8007f64:	f000 fe60 	bl	8008c28 <_sbrk_r>
 8007f68:	4581      	cmp	r9, r0
 8007f6a:	d142      	bne.n	8007ff2 <_malloc_r+0xea>
 8007f6c:	6821      	ldr	r1, [r4, #0]
 8007f6e:	1a6d      	subs	r5, r5, r1
 8007f70:	4629      	mov	r1, r5
 8007f72:	4630      	mov	r0, r6
 8007f74:	f7ff ffa6 	bl	8007ec4 <sbrk_aligned>
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d03a      	beq.n	8007ff2 <_malloc_r+0xea>
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	442b      	add	r3, r5
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	f8d8 3000 	ldr.w	r3, [r8]
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	bb62      	cbnz	r2, 8007fe4 <_malloc_r+0xdc>
 8007f8a:	f8c8 7000 	str.w	r7, [r8]
 8007f8e:	e00f      	b.n	8007fb0 <_malloc_r+0xa8>
 8007f90:	6822      	ldr	r2, [r4, #0]
 8007f92:	1b52      	subs	r2, r2, r5
 8007f94:	d420      	bmi.n	8007fd8 <_malloc_r+0xd0>
 8007f96:	2a0b      	cmp	r2, #11
 8007f98:	d917      	bls.n	8007fca <_malloc_r+0xc2>
 8007f9a:	1961      	adds	r1, r4, r5
 8007f9c:	42a3      	cmp	r3, r4
 8007f9e:	6025      	str	r5, [r4, #0]
 8007fa0:	bf18      	it	ne
 8007fa2:	6059      	strne	r1, [r3, #4]
 8007fa4:	6863      	ldr	r3, [r4, #4]
 8007fa6:	bf08      	it	eq
 8007fa8:	f8c8 1000 	streq.w	r1, [r8]
 8007fac:	5162      	str	r2, [r4, r5]
 8007fae:	604b      	str	r3, [r1, #4]
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f000 f82f 	bl	8008014 <__malloc_unlock>
 8007fb6:	f104 000b 	add.w	r0, r4, #11
 8007fba:	1d23      	adds	r3, r4, #4
 8007fbc:	f020 0007 	bic.w	r0, r0, #7
 8007fc0:	1ac2      	subs	r2, r0, r3
 8007fc2:	bf1c      	itt	ne
 8007fc4:	1a1b      	subne	r3, r3, r0
 8007fc6:	50a3      	strne	r3, [r4, r2]
 8007fc8:	e7af      	b.n	8007f2a <_malloc_r+0x22>
 8007fca:	6862      	ldr	r2, [r4, #4]
 8007fcc:	42a3      	cmp	r3, r4
 8007fce:	bf0c      	ite	eq
 8007fd0:	f8c8 2000 	streq.w	r2, [r8]
 8007fd4:	605a      	strne	r2, [r3, #4]
 8007fd6:	e7eb      	b.n	8007fb0 <_malloc_r+0xa8>
 8007fd8:	4623      	mov	r3, r4
 8007fda:	6864      	ldr	r4, [r4, #4]
 8007fdc:	e7ae      	b.n	8007f3c <_malloc_r+0x34>
 8007fde:	463c      	mov	r4, r7
 8007fe0:	687f      	ldr	r7, [r7, #4]
 8007fe2:	e7b6      	b.n	8007f52 <_malloc_r+0x4a>
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	42a3      	cmp	r3, r4
 8007fea:	d1fb      	bne.n	8007fe4 <_malloc_r+0xdc>
 8007fec:	2300      	movs	r3, #0
 8007fee:	6053      	str	r3, [r2, #4]
 8007ff0:	e7de      	b.n	8007fb0 <_malloc_r+0xa8>
 8007ff2:	230c      	movs	r3, #12
 8007ff4:	6033      	str	r3, [r6, #0]
 8007ff6:	4630      	mov	r0, r6
 8007ff8:	f000 f80c 	bl	8008014 <__malloc_unlock>
 8007ffc:	e794      	b.n	8007f28 <_malloc_r+0x20>
 8007ffe:	6005      	str	r5, [r0, #0]
 8008000:	e7d6      	b.n	8007fb0 <_malloc_r+0xa8>
 8008002:	bf00      	nop
 8008004:	200004ec 	.word	0x200004ec

08008008 <__malloc_lock>:
 8008008:	4801      	ldr	r0, [pc, #4]	@ (8008010 <__malloc_lock+0x8>)
 800800a:	f7ff b8b8 	b.w	800717e <__retarget_lock_acquire_recursive>
 800800e:	bf00      	nop
 8008010:	200004e4 	.word	0x200004e4

08008014 <__malloc_unlock>:
 8008014:	4801      	ldr	r0, [pc, #4]	@ (800801c <__malloc_unlock+0x8>)
 8008016:	f7ff b8b3 	b.w	8007180 <__retarget_lock_release_recursive>
 800801a:	bf00      	nop
 800801c:	200004e4 	.word	0x200004e4

08008020 <_Balloc>:
 8008020:	b570      	push	{r4, r5, r6, lr}
 8008022:	69c6      	ldr	r6, [r0, #28]
 8008024:	4604      	mov	r4, r0
 8008026:	460d      	mov	r5, r1
 8008028:	b976      	cbnz	r6, 8008048 <_Balloc+0x28>
 800802a:	2010      	movs	r0, #16
 800802c:	f7ff ff42 	bl	8007eb4 <malloc>
 8008030:	4602      	mov	r2, r0
 8008032:	61e0      	str	r0, [r4, #28]
 8008034:	b920      	cbnz	r0, 8008040 <_Balloc+0x20>
 8008036:	4b18      	ldr	r3, [pc, #96]	@ (8008098 <_Balloc+0x78>)
 8008038:	4818      	ldr	r0, [pc, #96]	@ (800809c <_Balloc+0x7c>)
 800803a:	216b      	movs	r1, #107	@ 0x6b
 800803c:	f000 fe12 	bl	8008c64 <__assert_func>
 8008040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008044:	6006      	str	r6, [r0, #0]
 8008046:	60c6      	str	r6, [r0, #12]
 8008048:	69e6      	ldr	r6, [r4, #28]
 800804a:	68f3      	ldr	r3, [r6, #12]
 800804c:	b183      	cbz	r3, 8008070 <_Balloc+0x50>
 800804e:	69e3      	ldr	r3, [r4, #28]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008056:	b9b8      	cbnz	r0, 8008088 <_Balloc+0x68>
 8008058:	2101      	movs	r1, #1
 800805a:	fa01 f605 	lsl.w	r6, r1, r5
 800805e:	1d72      	adds	r2, r6, #5
 8008060:	0092      	lsls	r2, r2, #2
 8008062:	4620      	mov	r0, r4
 8008064:	f000 fe1c 	bl	8008ca0 <_calloc_r>
 8008068:	b160      	cbz	r0, 8008084 <_Balloc+0x64>
 800806a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800806e:	e00e      	b.n	800808e <_Balloc+0x6e>
 8008070:	2221      	movs	r2, #33	@ 0x21
 8008072:	2104      	movs	r1, #4
 8008074:	4620      	mov	r0, r4
 8008076:	f000 fe13 	bl	8008ca0 <_calloc_r>
 800807a:	69e3      	ldr	r3, [r4, #28]
 800807c:	60f0      	str	r0, [r6, #12]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e4      	bne.n	800804e <_Balloc+0x2e>
 8008084:	2000      	movs	r0, #0
 8008086:	bd70      	pop	{r4, r5, r6, pc}
 8008088:	6802      	ldr	r2, [r0, #0]
 800808a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800808e:	2300      	movs	r3, #0
 8008090:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008094:	e7f7      	b.n	8008086 <_Balloc+0x66>
 8008096:	bf00      	nop
 8008098:	0800935d 	.word	0x0800935d
 800809c:	080093dd 	.word	0x080093dd

080080a0 <_Bfree>:
 80080a0:	b570      	push	{r4, r5, r6, lr}
 80080a2:	69c6      	ldr	r6, [r0, #28]
 80080a4:	4605      	mov	r5, r0
 80080a6:	460c      	mov	r4, r1
 80080a8:	b976      	cbnz	r6, 80080c8 <_Bfree+0x28>
 80080aa:	2010      	movs	r0, #16
 80080ac:	f7ff ff02 	bl	8007eb4 <malloc>
 80080b0:	4602      	mov	r2, r0
 80080b2:	61e8      	str	r0, [r5, #28]
 80080b4:	b920      	cbnz	r0, 80080c0 <_Bfree+0x20>
 80080b6:	4b09      	ldr	r3, [pc, #36]	@ (80080dc <_Bfree+0x3c>)
 80080b8:	4809      	ldr	r0, [pc, #36]	@ (80080e0 <_Bfree+0x40>)
 80080ba:	218f      	movs	r1, #143	@ 0x8f
 80080bc:	f000 fdd2 	bl	8008c64 <__assert_func>
 80080c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080c4:	6006      	str	r6, [r0, #0]
 80080c6:	60c6      	str	r6, [r0, #12]
 80080c8:	b13c      	cbz	r4, 80080da <_Bfree+0x3a>
 80080ca:	69eb      	ldr	r3, [r5, #28]
 80080cc:	6862      	ldr	r2, [r4, #4]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080d4:	6021      	str	r1, [r4, #0]
 80080d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080da:	bd70      	pop	{r4, r5, r6, pc}
 80080dc:	0800935d 	.word	0x0800935d
 80080e0:	080093dd 	.word	0x080093dd

080080e4 <__multadd>:
 80080e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080e8:	690d      	ldr	r5, [r1, #16]
 80080ea:	4607      	mov	r7, r0
 80080ec:	460c      	mov	r4, r1
 80080ee:	461e      	mov	r6, r3
 80080f0:	f101 0c14 	add.w	ip, r1, #20
 80080f4:	2000      	movs	r0, #0
 80080f6:	f8dc 3000 	ldr.w	r3, [ip]
 80080fa:	b299      	uxth	r1, r3
 80080fc:	fb02 6101 	mla	r1, r2, r1, r6
 8008100:	0c1e      	lsrs	r6, r3, #16
 8008102:	0c0b      	lsrs	r3, r1, #16
 8008104:	fb02 3306 	mla	r3, r2, r6, r3
 8008108:	b289      	uxth	r1, r1
 800810a:	3001      	adds	r0, #1
 800810c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008110:	4285      	cmp	r5, r0
 8008112:	f84c 1b04 	str.w	r1, [ip], #4
 8008116:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800811a:	dcec      	bgt.n	80080f6 <__multadd+0x12>
 800811c:	b30e      	cbz	r6, 8008162 <__multadd+0x7e>
 800811e:	68a3      	ldr	r3, [r4, #8]
 8008120:	42ab      	cmp	r3, r5
 8008122:	dc19      	bgt.n	8008158 <__multadd+0x74>
 8008124:	6861      	ldr	r1, [r4, #4]
 8008126:	4638      	mov	r0, r7
 8008128:	3101      	adds	r1, #1
 800812a:	f7ff ff79 	bl	8008020 <_Balloc>
 800812e:	4680      	mov	r8, r0
 8008130:	b928      	cbnz	r0, 800813e <__multadd+0x5a>
 8008132:	4602      	mov	r2, r0
 8008134:	4b0c      	ldr	r3, [pc, #48]	@ (8008168 <__multadd+0x84>)
 8008136:	480d      	ldr	r0, [pc, #52]	@ (800816c <__multadd+0x88>)
 8008138:	21ba      	movs	r1, #186	@ 0xba
 800813a:	f000 fd93 	bl	8008c64 <__assert_func>
 800813e:	6922      	ldr	r2, [r4, #16]
 8008140:	3202      	adds	r2, #2
 8008142:	f104 010c 	add.w	r1, r4, #12
 8008146:	0092      	lsls	r2, r2, #2
 8008148:	300c      	adds	r0, #12
 800814a:	f000 fd7d 	bl	8008c48 <memcpy>
 800814e:	4621      	mov	r1, r4
 8008150:	4638      	mov	r0, r7
 8008152:	f7ff ffa5 	bl	80080a0 <_Bfree>
 8008156:	4644      	mov	r4, r8
 8008158:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800815c:	3501      	adds	r5, #1
 800815e:	615e      	str	r6, [r3, #20]
 8008160:	6125      	str	r5, [r4, #16]
 8008162:	4620      	mov	r0, r4
 8008164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008168:	080093cc 	.word	0x080093cc
 800816c:	080093dd 	.word	0x080093dd

08008170 <__hi0bits>:
 8008170:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008174:	4603      	mov	r3, r0
 8008176:	bf36      	itet	cc
 8008178:	0403      	lslcc	r3, r0, #16
 800817a:	2000      	movcs	r0, #0
 800817c:	2010      	movcc	r0, #16
 800817e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008182:	bf3c      	itt	cc
 8008184:	021b      	lslcc	r3, r3, #8
 8008186:	3008      	addcc	r0, #8
 8008188:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800818c:	bf3c      	itt	cc
 800818e:	011b      	lslcc	r3, r3, #4
 8008190:	3004      	addcc	r0, #4
 8008192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008196:	bf3c      	itt	cc
 8008198:	009b      	lslcc	r3, r3, #2
 800819a:	3002      	addcc	r0, #2
 800819c:	2b00      	cmp	r3, #0
 800819e:	db05      	blt.n	80081ac <__hi0bits+0x3c>
 80081a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80081a4:	f100 0001 	add.w	r0, r0, #1
 80081a8:	bf08      	it	eq
 80081aa:	2020      	moveq	r0, #32
 80081ac:	4770      	bx	lr

080081ae <__lo0bits>:
 80081ae:	6803      	ldr	r3, [r0, #0]
 80081b0:	4602      	mov	r2, r0
 80081b2:	f013 0007 	ands.w	r0, r3, #7
 80081b6:	d00b      	beq.n	80081d0 <__lo0bits+0x22>
 80081b8:	07d9      	lsls	r1, r3, #31
 80081ba:	d421      	bmi.n	8008200 <__lo0bits+0x52>
 80081bc:	0798      	lsls	r0, r3, #30
 80081be:	bf49      	itett	mi
 80081c0:	085b      	lsrmi	r3, r3, #1
 80081c2:	089b      	lsrpl	r3, r3, #2
 80081c4:	2001      	movmi	r0, #1
 80081c6:	6013      	strmi	r3, [r2, #0]
 80081c8:	bf5c      	itt	pl
 80081ca:	6013      	strpl	r3, [r2, #0]
 80081cc:	2002      	movpl	r0, #2
 80081ce:	4770      	bx	lr
 80081d0:	b299      	uxth	r1, r3
 80081d2:	b909      	cbnz	r1, 80081d8 <__lo0bits+0x2a>
 80081d4:	0c1b      	lsrs	r3, r3, #16
 80081d6:	2010      	movs	r0, #16
 80081d8:	b2d9      	uxtb	r1, r3
 80081da:	b909      	cbnz	r1, 80081e0 <__lo0bits+0x32>
 80081dc:	3008      	adds	r0, #8
 80081de:	0a1b      	lsrs	r3, r3, #8
 80081e0:	0719      	lsls	r1, r3, #28
 80081e2:	bf04      	itt	eq
 80081e4:	091b      	lsreq	r3, r3, #4
 80081e6:	3004      	addeq	r0, #4
 80081e8:	0799      	lsls	r1, r3, #30
 80081ea:	bf04      	itt	eq
 80081ec:	089b      	lsreq	r3, r3, #2
 80081ee:	3002      	addeq	r0, #2
 80081f0:	07d9      	lsls	r1, r3, #31
 80081f2:	d403      	bmi.n	80081fc <__lo0bits+0x4e>
 80081f4:	085b      	lsrs	r3, r3, #1
 80081f6:	f100 0001 	add.w	r0, r0, #1
 80081fa:	d003      	beq.n	8008204 <__lo0bits+0x56>
 80081fc:	6013      	str	r3, [r2, #0]
 80081fe:	4770      	bx	lr
 8008200:	2000      	movs	r0, #0
 8008202:	4770      	bx	lr
 8008204:	2020      	movs	r0, #32
 8008206:	4770      	bx	lr

08008208 <__i2b>:
 8008208:	b510      	push	{r4, lr}
 800820a:	460c      	mov	r4, r1
 800820c:	2101      	movs	r1, #1
 800820e:	f7ff ff07 	bl	8008020 <_Balloc>
 8008212:	4602      	mov	r2, r0
 8008214:	b928      	cbnz	r0, 8008222 <__i2b+0x1a>
 8008216:	4b05      	ldr	r3, [pc, #20]	@ (800822c <__i2b+0x24>)
 8008218:	4805      	ldr	r0, [pc, #20]	@ (8008230 <__i2b+0x28>)
 800821a:	f240 1145 	movw	r1, #325	@ 0x145
 800821e:	f000 fd21 	bl	8008c64 <__assert_func>
 8008222:	2301      	movs	r3, #1
 8008224:	6144      	str	r4, [r0, #20]
 8008226:	6103      	str	r3, [r0, #16]
 8008228:	bd10      	pop	{r4, pc}
 800822a:	bf00      	nop
 800822c:	080093cc 	.word	0x080093cc
 8008230:	080093dd 	.word	0x080093dd

08008234 <__multiply>:
 8008234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008238:	4614      	mov	r4, r2
 800823a:	690a      	ldr	r2, [r1, #16]
 800823c:	6923      	ldr	r3, [r4, #16]
 800823e:	429a      	cmp	r2, r3
 8008240:	bfa8      	it	ge
 8008242:	4623      	movge	r3, r4
 8008244:	460f      	mov	r7, r1
 8008246:	bfa4      	itt	ge
 8008248:	460c      	movge	r4, r1
 800824a:	461f      	movge	r7, r3
 800824c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008250:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008254:	68a3      	ldr	r3, [r4, #8]
 8008256:	6861      	ldr	r1, [r4, #4]
 8008258:	eb0a 0609 	add.w	r6, sl, r9
 800825c:	42b3      	cmp	r3, r6
 800825e:	b085      	sub	sp, #20
 8008260:	bfb8      	it	lt
 8008262:	3101      	addlt	r1, #1
 8008264:	f7ff fedc 	bl	8008020 <_Balloc>
 8008268:	b930      	cbnz	r0, 8008278 <__multiply+0x44>
 800826a:	4602      	mov	r2, r0
 800826c:	4b44      	ldr	r3, [pc, #272]	@ (8008380 <__multiply+0x14c>)
 800826e:	4845      	ldr	r0, [pc, #276]	@ (8008384 <__multiply+0x150>)
 8008270:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008274:	f000 fcf6 	bl	8008c64 <__assert_func>
 8008278:	f100 0514 	add.w	r5, r0, #20
 800827c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008280:	462b      	mov	r3, r5
 8008282:	2200      	movs	r2, #0
 8008284:	4543      	cmp	r3, r8
 8008286:	d321      	bcc.n	80082cc <__multiply+0x98>
 8008288:	f107 0114 	add.w	r1, r7, #20
 800828c:	f104 0214 	add.w	r2, r4, #20
 8008290:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008294:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008298:	9302      	str	r3, [sp, #8]
 800829a:	1b13      	subs	r3, r2, r4
 800829c:	3b15      	subs	r3, #21
 800829e:	f023 0303 	bic.w	r3, r3, #3
 80082a2:	3304      	adds	r3, #4
 80082a4:	f104 0715 	add.w	r7, r4, #21
 80082a8:	42ba      	cmp	r2, r7
 80082aa:	bf38      	it	cc
 80082ac:	2304      	movcc	r3, #4
 80082ae:	9301      	str	r3, [sp, #4]
 80082b0:	9b02      	ldr	r3, [sp, #8]
 80082b2:	9103      	str	r1, [sp, #12]
 80082b4:	428b      	cmp	r3, r1
 80082b6:	d80c      	bhi.n	80082d2 <__multiply+0x9e>
 80082b8:	2e00      	cmp	r6, #0
 80082ba:	dd03      	ble.n	80082c4 <__multiply+0x90>
 80082bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d05b      	beq.n	800837c <__multiply+0x148>
 80082c4:	6106      	str	r6, [r0, #16]
 80082c6:	b005      	add	sp, #20
 80082c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082cc:	f843 2b04 	str.w	r2, [r3], #4
 80082d0:	e7d8      	b.n	8008284 <__multiply+0x50>
 80082d2:	f8b1 a000 	ldrh.w	sl, [r1]
 80082d6:	f1ba 0f00 	cmp.w	sl, #0
 80082da:	d024      	beq.n	8008326 <__multiply+0xf2>
 80082dc:	f104 0e14 	add.w	lr, r4, #20
 80082e0:	46a9      	mov	r9, r5
 80082e2:	f04f 0c00 	mov.w	ip, #0
 80082e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80082ea:	f8d9 3000 	ldr.w	r3, [r9]
 80082ee:	fa1f fb87 	uxth.w	fp, r7
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	fb0a 330b 	mla	r3, sl, fp, r3
 80082f8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80082fc:	f8d9 7000 	ldr.w	r7, [r9]
 8008300:	4463      	add	r3, ip
 8008302:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008306:	fb0a c70b 	mla	r7, sl, fp, ip
 800830a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800830e:	b29b      	uxth	r3, r3
 8008310:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008314:	4572      	cmp	r2, lr
 8008316:	f849 3b04 	str.w	r3, [r9], #4
 800831a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800831e:	d8e2      	bhi.n	80082e6 <__multiply+0xb2>
 8008320:	9b01      	ldr	r3, [sp, #4]
 8008322:	f845 c003 	str.w	ip, [r5, r3]
 8008326:	9b03      	ldr	r3, [sp, #12]
 8008328:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800832c:	3104      	adds	r1, #4
 800832e:	f1b9 0f00 	cmp.w	r9, #0
 8008332:	d021      	beq.n	8008378 <__multiply+0x144>
 8008334:	682b      	ldr	r3, [r5, #0]
 8008336:	f104 0c14 	add.w	ip, r4, #20
 800833a:	46ae      	mov	lr, r5
 800833c:	f04f 0a00 	mov.w	sl, #0
 8008340:	f8bc b000 	ldrh.w	fp, [ip]
 8008344:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008348:	fb09 770b 	mla	r7, r9, fp, r7
 800834c:	4457      	add	r7, sl
 800834e:	b29b      	uxth	r3, r3
 8008350:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008354:	f84e 3b04 	str.w	r3, [lr], #4
 8008358:	f85c 3b04 	ldr.w	r3, [ip], #4
 800835c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008360:	f8be 3000 	ldrh.w	r3, [lr]
 8008364:	fb09 330a 	mla	r3, r9, sl, r3
 8008368:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800836c:	4562      	cmp	r2, ip
 800836e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008372:	d8e5      	bhi.n	8008340 <__multiply+0x10c>
 8008374:	9f01      	ldr	r7, [sp, #4]
 8008376:	51eb      	str	r3, [r5, r7]
 8008378:	3504      	adds	r5, #4
 800837a:	e799      	b.n	80082b0 <__multiply+0x7c>
 800837c:	3e01      	subs	r6, #1
 800837e:	e79b      	b.n	80082b8 <__multiply+0x84>
 8008380:	080093cc 	.word	0x080093cc
 8008384:	080093dd 	.word	0x080093dd

08008388 <__pow5mult>:
 8008388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800838c:	4615      	mov	r5, r2
 800838e:	f012 0203 	ands.w	r2, r2, #3
 8008392:	4607      	mov	r7, r0
 8008394:	460e      	mov	r6, r1
 8008396:	d007      	beq.n	80083a8 <__pow5mult+0x20>
 8008398:	4c25      	ldr	r4, [pc, #148]	@ (8008430 <__pow5mult+0xa8>)
 800839a:	3a01      	subs	r2, #1
 800839c:	2300      	movs	r3, #0
 800839e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083a2:	f7ff fe9f 	bl	80080e4 <__multadd>
 80083a6:	4606      	mov	r6, r0
 80083a8:	10ad      	asrs	r5, r5, #2
 80083aa:	d03d      	beq.n	8008428 <__pow5mult+0xa0>
 80083ac:	69fc      	ldr	r4, [r7, #28]
 80083ae:	b97c      	cbnz	r4, 80083d0 <__pow5mult+0x48>
 80083b0:	2010      	movs	r0, #16
 80083b2:	f7ff fd7f 	bl	8007eb4 <malloc>
 80083b6:	4602      	mov	r2, r0
 80083b8:	61f8      	str	r0, [r7, #28]
 80083ba:	b928      	cbnz	r0, 80083c8 <__pow5mult+0x40>
 80083bc:	4b1d      	ldr	r3, [pc, #116]	@ (8008434 <__pow5mult+0xac>)
 80083be:	481e      	ldr	r0, [pc, #120]	@ (8008438 <__pow5mult+0xb0>)
 80083c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80083c4:	f000 fc4e 	bl	8008c64 <__assert_func>
 80083c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083cc:	6004      	str	r4, [r0, #0]
 80083ce:	60c4      	str	r4, [r0, #12]
 80083d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80083d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083d8:	b94c      	cbnz	r4, 80083ee <__pow5mult+0x66>
 80083da:	f240 2171 	movw	r1, #625	@ 0x271
 80083de:	4638      	mov	r0, r7
 80083e0:	f7ff ff12 	bl	8008208 <__i2b>
 80083e4:	2300      	movs	r3, #0
 80083e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80083ea:	4604      	mov	r4, r0
 80083ec:	6003      	str	r3, [r0, #0]
 80083ee:	f04f 0900 	mov.w	r9, #0
 80083f2:	07eb      	lsls	r3, r5, #31
 80083f4:	d50a      	bpl.n	800840c <__pow5mult+0x84>
 80083f6:	4631      	mov	r1, r6
 80083f8:	4622      	mov	r2, r4
 80083fa:	4638      	mov	r0, r7
 80083fc:	f7ff ff1a 	bl	8008234 <__multiply>
 8008400:	4631      	mov	r1, r6
 8008402:	4680      	mov	r8, r0
 8008404:	4638      	mov	r0, r7
 8008406:	f7ff fe4b 	bl	80080a0 <_Bfree>
 800840a:	4646      	mov	r6, r8
 800840c:	106d      	asrs	r5, r5, #1
 800840e:	d00b      	beq.n	8008428 <__pow5mult+0xa0>
 8008410:	6820      	ldr	r0, [r4, #0]
 8008412:	b938      	cbnz	r0, 8008424 <__pow5mult+0x9c>
 8008414:	4622      	mov	r2, r4
 8008416:	4621      	mov	r1, r4
 8008418:	4638      	mov	r0, r7
 800841a:	f7ff ff0b 	bl	8008234 <__multiply>
 800841e:	6020      	str	r0, [r4, #0]
 8008420:	f8c0 9000 	str.w	r9, [r0]
 8008424:	4604      	mov	r4, r0
 8008426:	e7e4      	b.n	80083f2 <__pow5mult+0x6a>
 8008428:	4630      	mov	r0, r6
 800842a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800842e:	bf00      	nop
 8008430:	08009438 	.word	0x08009438
 8008434:	0800935d 	.word	0x0800935d
 8008438:	080093dd 	.word	0x080093dd

0800843c <__lshift>:
 800843c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008440:	460c      	mov	r4, r1
 8008442:	6849      	ldr	r1, [r1, #4]
 8008444:	6923      	ldr	r3, [r4, #16]
 8008446:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800844a:	68a3      	ldr	r3, [r4, #8]
 800844c:	4607      	mov	r7, r0
 800844e:	4691      	mov	r9, r2
 8008450:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008454:	f108 0601 	add.w	r6, r8, #1
 8008458:	42b3      	cmp	r3, r6
 800845a:	db0b      	blt.n	8008474 <__lshift+0x38>
 800845c:	4638      	mov	r0, r7
 800845e:	f7ff fddf 	bl	8008020 <_Balloc>
 8008462:	4605      	mov	r5, r0
 8008464:	b948      	cbnz	r0, 800847a <__lshift+0x3e>
 8008466:	4602      	mov	r2, r0
 8008468:	4b28      	ldr	r3, [pc, #160]	@ (800850c <__lshift+0xd0>)
 800846a:	4829      	ldr	r0, [pc, #164]	@ (8008510 <__lshift+0xd4>)
 800846c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008470:	f000 fbf8 	bl	8008c64 <__assert_func>
 8008474:	3101      	adds	r1, #1
 8008476:	005b      	lsls	r3, r3, #1
 8008478:	e7ee      	b.n	8008458 <__lshift+0x1c>
 800847a:	2300      	movs	r3, #0
 800847c:	f100 0114 	add.w	r1, r0, #20
 8008480:	f100 0210 	add.w	r2, r0, #16
 8008484:	4618      	mov	r0, r3
 8008486:	4553      	cmp	r3, sl
 8008488:	db33      	blt.n	80084f2 <__lshift+0xb6>
 800848a:	6920      	ldr	r0, [r4, #16]
 800848c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008490:	f104 0314 	add.w	r3, r4, #20
 8008494:	f019 091f 	ands.w	r9, r9, #31
 8008498:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800849c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084a0:	d02b      	beq.n	80084fa <__lshift+0xbe>
 80084a2:	f1c9 0e20 	rsb	lr, r9, #32
 80084a6:	468a      	mov	sl, r1
 80084a8:	2200      	movs	r2, #0
 80084aa:	6818      	ldr	r0, [r3, #0]
 80084ac:	fa00 f009 	lsl.w	r0, r0, r9
 80084b0:	4310      	orrs	r0, r2
 80084b2:	f84a 0b04 	str.w	r0, [sl], #4
 80084b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ba:	459c      	cmp	ip, r3
 80084bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80084c0:	d8f3      	bhi.n	80084aa <__lshift+0x6e>
 80084c2:	ebac 0304 	sub.w	r3, ip, r4
 80084c6:	3b15      	subs	r3, #21
 80084c8:	f023 0303 	bic.w	r3, r3, #3
 80084cc:	3304      	adds	r3, #4
 80084ce:	f104 0015 	add.w	r0, r4, #21
 80084d2:	4584      	cmp	ip, r0
 80084d4:	bf38      	it	cc
 80084d6:	2304      	movcc	r3, #4
 80084d8:	50ca      	str	r2, [r1, r3]
 80084da:	b10a      	cbz	r2, 80084e0 <__lshift+0xa4>
 80084dc:	f108 0602 	add.w	r6, r8, #2
 80084e0:	3e01      	subs	r6, #1
 80084e2:	4638      	mov	r0, r7
 80084e4:	612e      	str	r6, [r5, #16]
 80084e6:	4621      	mov	r1, r4
 80084e8:	f7ff fdda 	bl	80080a0 <_Bfree>
 80084ec:	4628      	mov	r0, r5
 80084ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80084f6:	3301      	adds	r3, #1
 80084f8:	e7c5      	b.n	8008486 <__lshift+0x4a>
 80084fa:	3904      	subs	r1, #4
 80084fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008500:	f841 2f04 	str.w	r2, [r1, #4]!
 8008504:	459c      	cmp	ip, r3
 8008506:	d8f9      	bhi.n	80084fc <__lshift+0xc0>
 8008508:	e7ea      	b.n	80084e0 <__lshift+0xa4>
 800850a:	bf00      	nop
 800850c:	080093cc 	.word	0x080093cc
 8008510:	080093dd 	.word	0x080093dd

08008514 <__mcmp>:
 8008514:	690a      	ldr	r2, [r1, #16]
 8008516:	4603      	mov	r3, r0
 8008518:	6900      	ldr	r0, [r0, #16]
 800851a:	1a80      	subs	r0, r0, r2
 800851c:	b530      	push	{r4, r5, lr}
 800851e:	d10e      	bne.n	800853e <__mcmp+0x2a>
 8008520:	3314      	adds	r3, #20
 8008522:	3114      	adds	r1, #20
 8008524:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008528:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800852c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008530:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008534:	4295      	cmp	r5, r2
 8008536:	d003      	beq.n	8008540 <__mcmp+0x2c>
 8008538:	d205      	bcs.n	8008546 <__mcmp+0x32>
 800853a:	f04f 30ff 	mov.w	r0, #4294967295
 800853e:	bd30      	pop	{r4, r5, pc}
 8008540:	42a3      	cmp	r3, r4
 8008542:	d3f3      	bcc.n	800852c <__mcmp+0x18>
 8008544:	e7fb      	b.n	800853e <__mcmp+0x2a>
 8008546:	2001      	movs	r0, #1
 8008548:	e7f9      	b.n	800853e <__mcmp+0x2a>
	...

0800854c <__mdiff>:
 800854c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008550:	4689      	mov	r9, r1
 8008552:	4606      	mov	r6, r0
 8008554:	4611      	mov	r1, r2
 8008556:	4648      	mov	r0, r9
 8008558:	4614      	mov	r4, r2
 800855a:	f7ff ffdb 	bl	8008514 <__mcmp>
 800855e:	1e05      	subs	r5, r0, #0
 8008560:	d112      	bne.n	8008588 <__mdiff+0x3c>
 8008562:	4629      	mov	r1, r5
 8008564:	4630      	mov	r0, r6
 8008566:	f7ff fd5b 	bl	8008020 <_Balloc>
 800856a:	4602      	mov	r2, r0
 800856c:	b928      	cbnz	r0, 800857a <__mdiff+0x2e>
 800856e:	4b3f      	ldr	r3, [pc, #252]	@ (800866c <__mdiff+0x120>)
 8008570:	f240 2137 	movw	r1, #567	@ 0x237
 8008574:	483e      	ldr	r0, [pc, #248]	@ (8008670 <__mdiff+0x124>)
 8008576:	f000 fb75 	bl	8008c64 <__assert_func>
 800857a:	2301      	movs	r3, #1
 800857c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008580:	4610      	mov	r0, r2
 8008582:	b003      	add	sp, #12
 8008584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008588:	bfbc      	itt	lt
 800858a:	464b      	movlt	r3, r9
 800858c:	46a1      	movlt	r9, r4
 800858e:	4630      	mov	r0, r6
 8008590:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008594:	bfba      	itte	lt
 8008596:	461c      	movlt	r4, r3
 8008598:	2501      	movlt	r5, #1
 800859a:	2500      	movge	r5, #0
 800859c:	f7ff fd40 	bl	8008020 <_Balloc>
 80085a0:	4602      	mov	r2, r0
 80085a2:	b918      	cbnz	r0, 80085ac <__mdiff+0x60>
 80085a4:	4b31      	ldr	r3, [pc, #196]	@ (800866c <__mdiff+0x120>)
 80085a6:	f240 2145 	movw	r1, #581	@ 0x245
 80085aa:	e7e3      	b.n	8008574 <__mdiff+0x28>
 80085ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80085b0:	6926      	ldr	r6, [r4, #16]
 80085b2:	60c5      	str	r5, [r0, #12]
 80085b4:	f109 0310 	add.w	r3, r9, #16
 80085b8:	f109 0514 	add.w	r5, r9, #20
 80085bc:	f104 0e14 	add.w	lr, r4, #20
 80085c0:	f100 0b14 	add.w	fp, r0, #20
 80085c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80085c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80085cc:	9301      	str	r3, [sp, #4]
 80085ce:	46d9      	mov	r9, fp
 80085d0:	f04f 0c00 	mov.w	ip, #0
 80085d4:	9b01      	ldr	r3, [sp, #4]
 80085d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80085da:	f853 af04 	ldr.w	sl, [r3, #4]!
 80085de:	9301      	str	r3, [sp, #4]
 80085e0:	fa1f f38a 	uxth.w	r3, sl
 80085e4:	4619      	mov	r1, r3
 80085e6:	b283      	uxth	r3, r0
 80085e8:	1acb      	subs	r3, r1, r3
 80085ea:	0c00      	lsrs	r0, r0, #16
 80085ec:	4463      	add	r3, ip
 80085ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80085f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80085fc:	4576      	cmp	r6, lr
 80085fe:	f849 3b04 	str.w	r3, [r9], #4
 8008602:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008606:	d8e5      	bhi.n	80085d4 <__mdiff+0x88>
 8008608:	1b33      	subs	r3, r6, r4
 800860a:	3b15      	subs	r3, #21
 800860c:	f023 0303 	bic.w	r3, r3, #3
 8008610:	3415      	adds	r4, #21
 8008612:	3304      	adds	r3, #4
 8008614:	42a6      	cmp	r6, r4
 8008616:	bf38      	it	cc
 8008618:	2304      	movcc	r3, #4
 800861a:	441d      	add	r5, r3
 800861c:	445b      	add	r3, fp
 800861e:	461e      	mov	r6, r3
 8008620:	462c      	mov	r4, r5
 8008622:	4544      	cmp	r4, r8
 8008624:	d30e      	bcc.n	8008644 <__mdiff+0xf8>
 8008626:	f108 0103 	add.w	r1, r8, #3
 800862a:	1b49      	subs	r1, r1, r5
 800862c:	f021 0103 	bic.w	r1, r1, #3
 8008630:	3d03      	subs	r5, #3
 8008632:	45a8      	cmp	r8, r5
 8008634:	bf38      	it	cc
 8008636:	2100      	movcc	r1, #0
 8008638:	440b      	add	r3, r1
 800863a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800863e:	b191      	cbz	r1, 8008666 <__mdiff+0x11a>
 8008640:	6117      	str	r7, [r2, #16]
 8008642:	e79d      	b.n	8008580 <__mdiff+0x34>
 8008644:	f854 1b04 	ldr.w	r1, [r4], #4
 8008648:	46e6      	mov	lr, ip
 800864a:	0c08      	lsrs	r0, r1, #16
 800864c:	fa1c fc81 	uxtah	ip, ip, r1
 8008650:	4471      	add	r1, lr
 8008652:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008656:	b289      	uxth	r1, r1
 8008658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800865c:	f846 1b04 	str.w	r1, [r6], #4
 8008660:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008664:	e7dd      	b.n	8008622 <__mdiff+0xd6>
 8008666:	3f01      	subs	r7, #1
 8008668:	e7e7      	b.n	800863a <__mdiff+0xee>
 800866a:	bf00      	nop
 800866c:	080093cc 	.word	0x080093cc
 8008670:	080093dd 	.word	0x080093dd

08008674 <__d2b>:
 8008674:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008678:	460f      	mov	r7, r1
 800867a:	2101      	movs	r1, #1
 800867c:	ec59 8b10 	vmov	r8, r9, d0
 8008680:	4616      	mov	r6, r2
 8008682:	f7ff fccd 	bl	8008020 <_Balloc>
 8008686:	4604      	mov	r4, r0
 8008688:	b930      	cbnz	r0, 8008698 <__d2b+0x24>
 800868a:	4602      	mov	r2, r0
 800868c:	4b23      	ldr	r3, [pc, #140]	@ (800871c <__d2b+0xa8>)
 800868e:	4824      	ldr	r0, [pc, #144]	@ (8008720 <__d2b+0xac>)
 8008690:	f240 310f 	movw	r1, #783	@ 0x30f
 8008694:	f000 fae6 	bl	8008c64 <__assert_func>
 8008698:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800869c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086a0:	b10d      	cbz	r5, 80086a6 <__d2b+0x32>
 80086a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086a6:	9301      	str	r3, [sp, #4]
 80086a8:	f1b8 0300 	subs.w	r3, r8, #0
 80086ac:	d023      	beq.n	80086f6 <__d2b+0x82>
 80086ae:	4668      	mov	r0, sp
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	f7ff fd7c 	bl	80081ae <__lo0bits>
 80086b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086ba:	b1d0      	cbz	r0, 80086f2 <__d2b+0x7e>
 80086bc:	f1c0 0320 	rsb	r3, r0, #32
 80086c0:	fa02 f303 	lsl.w	r3, r2, r3
 80086c4:	430b      	orrs	r3, r1
 80086c6:	40c2      	lsrs	r2, r0
 80086c8:	6163      	str	r3, [r4, #20]
 80086ca:	9201      	str	r2, [sp, #4]
 80086cc:	9b01      	ldr	r3, [sp, #4]
 80086ce:	61a3      	str	r3, [r4, #24]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	bf0c      	ite	eq
 80086d4:	2201      	moveq	r2, #1
 80086d6:	2202      	movne	r2, #2
 80086d8:	6122      	str	r2, [r4, #16]
 80086da:	b1a5      	cbz	r5, 8008706 <__d2b+0x92>
 80086dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80086e0:	4405      	add	r5, r0
 80086e2:	603d      	str	r5, [r7, #0]
 80086e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80086e8:	6030      	str	r0, [r6, #0]
 80086ea:	4620      	mov	r0, r4
 80086ec:	b003      	add	sp, #12
 80086ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086f2:	6161      	str	r1, [r4, #20]
 80086f4:	e7ea      	b.n	80086cc <__d2b+0x58>
 80086f6:	a801      	add	r0, sp, #4
 80086f8:	f7ff fd59 	bl	80081ae <__lo0bits>
 80086fc:	9b01      	ldr	r3, [sp, #4]
 80086fe:	6163      	str	r3, [r4, #20]
 8008700:	3020      	adds	r0, #32
 8008702:	2201      	movs	r2, #1
 8008704:	e7e8      	b.n	80086d8 <__d2b+0x64>
 8008706:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800870a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800870e:	6038      	str	r0, [r7, #0]
 8008710:	6918      	ldr	r0, [r3, #16]
 8008712:	f7ff fd2d 	bl	8008170 <__hi0bits>
 8008716:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800871a:	e7e5      	b.n	80086e8 <__d2b+0x74>
 800871c:	080093cc 	.word	0x080093cc
 8008720:	080093dd 	.word	0x080093dd

08008724 <__sfputc_r>:
 8008724:	6893      	ldr	r3, [r2, #8]
 8008726:	3b01      	subs	r3, #1
 8008728:	2b00      	cmp	r3, #0
 800872a:	b410      	push	{r4}
 800872c:	6093      	str	r3, [r2, #8]
 800872e:	da08      	bge.n	8008742 <__sfputc_r+0x1e>
 8008730:	6994      	ldr	r4, [r2, #24]
 8008732:	42a3      	cmp	r3, r4
 8008734:	db01      	blt.n	800873a <__sfputc_r+0x16>
 8008736:	290a      	cmp	r1, #10
 8008738:	d103      	bne.n	8008742 <__sfputc_r+0x1e>
 800873a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800873e:	f000 b9df 	b.w	8008b00 <__swbuf_r>
 8008742:	6813      	ldr	r3, [r2, #0]
 8008744:	1c58      	adds	r0, r3, #1
 8008746:	6010      	str	r0, [r2, #0]
 8008748:	7019      	strb	r1, [r3, #0]
 800874a:	4608      	mov	r0, r1
 800874c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008750:	4770      	bx	lr

08008752 <__sfputs_r>:
 8008752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008754:	4606      	mov	r6, r0
 8008756:	460f      	mov	r7, r1
 8008758:	4614      	mov	r4, r2
 800875a:	18d5      	adds	r5, r2, r3
 800875c:	42ac      	cmp	r4, r5
 800875e:	d101      	bne.n	8008764 <__sfputs_r+0x12>
 8008760:	2000      	movs	r0, #0
 8008762:	e007      	b.n	8008774 <__sfputs_r+0x22>
 8008764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008768:	463a      	mov	r2, r7
 800876a:	4630      	mov	r0, r6
 800876c:	f7ff ffda 	bl	8008724 <__sfputc_r>
 8008770:	1c43      	adds	r3, r0, #1
 8008772:	d1f3      	bne.n	800875c <__sfputs_r+0xa>
 8008774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008778 <_vfiprintf_r>:
 8008778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877c:	460d      	mov	r5, r1
 800877e:	b09d      	sub	sp, #116	@ 0x74
 8008780:	4614      	mov	r4, r2
 8008782:	4698      	mov	r8, r3
 8008784:	4606      	mov	r6, r0
 8008786:	b118      	cbz	r0, 8008790 <_vfiprintf_r+0x18>
 8008788:	6a03      	ldr	r3, [r0, #32]
 800878a:	b90b      	cbnz	r3, 8008790 <_vfiprintf_r+0x18>
 800878c:	f7fe fbee 	bl	8006f6c <__sinit>
 8008790:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008792:	07d9      	lsls	r1, r3, #31
 8008794:	d405      	bmi.n	80087a2 <_vfiprintf_r+0x2a>
 8008796:	89ab      	ldrh	r3, [r5, #12]
 8008798:	059a      	lsls	r2, r3, #22
 800879a:	d402      	bmi.n	80087a2 <_vfiprintf_r+0x2a>
 800879c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800879e:	f7fe fcee 	bl	800717e <__retarget_lock_acquire_recursive>
 80087a2:	89ab      	ldrh	r3, [r5, #12]
 80087a4:	071b      	lsls	r3, r3, #28
 80087a6:	d501      	bpl.n	80087ac <_vfiprintf_r+0x34>
 80087a8:	692b      	ldr	r3, [r5, #16]
 80087aa:	b99b      	cbnz	r3, 80087d4 <_vfiprintf_r+0x5c>
 80087ac:	4629      	mov	r1, r5
 80087ae:	4630      	mov	r0, r6
 80087b0:	f000 f9e4 	bl	8008b7c <__swsetup_r>
 80087b4:	b170      	cbz	r0, 80087d4 <_vfiprintf_r+0x5c>
 80087b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087b8:	07dc      	lsls	r4, r3, #31
 80087ba:	d504      	bpl.n	80087c6 <_vfiprintf_r+0x4e>
 80087bc:	f04f 30ff 	mov.w	r0, #4294967295
 80087c0:	b01d      	add	sp, #116	@ 0x74
 80087c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c6:	89ab      	ldrh	r3, [r5, #12]
 80087c8:	0598      	lsls	r0, r3, #22
 80087ca:	d4f7      	bmi.n	80087bc <_vfiprintf_r+0x44>
 80087cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087ce:	f7fe fcd7 	bl	8007180 <__retarget_lock_release_recursive>
 80087d2:	e7f3      	b.n	80087bc <_vfiprintf_r+0x44>
 80087d4:	2300      	movs	r3, #0
 80087d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80087d8:	2320      	movs	r3, #32
 80087da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087de:	f8cd 800c 	str.w	r8, [sp, #12]
 80087e2:	2330      	movs	r3, #48	@ 0x30
 80087e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008994 <_vfiprintf_r+0x21c>
 80087e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087ec:	f04f 0901 	mov.w	r9, #1
 80087f0:	4623      	mov	r3, r4
 80087f2:	469a      	mov	sl, r3
 80087f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087f8:	b10a      	cbz	r2, 80087fe <_vfiprintf_r+0x86>
 80087fa:	2a25      	cmp	r2, #37	@ 0x25
 80087fc:	d1f9      	bne.n	80087f2 <_vfiprintf_r+0x7a>
 80087fe:	ebba 0b04 	subs.w	fp, sl, r4
 8008802:	d00b      	beq.n	800881c <_vfiprintf_r+0xa4>
 8008804:	465b      	mov	r3, fp
 8008806:	4622      	mov	r2, r4
 8008808:	4629      	mov	r1, r5
 800880a:	4630      	mov	r0, r6
 800880c:	f7ff ffa1 	bl	8008752 <__sfputs_r>
 8008810:	3001      	adds	r0, #1
 8008812:	f000 80a7 	beq.w	8008964 <_vfiprintf_r+0x1ec>
 8008816:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008818:	445a      	add	r2, fp
 800881a:	9209      	str	r2, [sp, #36]	@ 0x24
 800881c:	f89a 3000 	ldrb.w	r3, [sl]
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 809f 	beq.w	8008964 <_vfiprintf_r+0x1ec>
 8008826:	2300      	movs	r3, #0
 8008828:	f04f 32ff 	mov.w	r2, #4294967295
 800882c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008830:	f10a 0a01 	add.w	sl, sl, #1
 8008834:	9304      	str	r3, [sp, #16]
 8008836:	9307      	str	r3, [sp, #28]
 8008838:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800883c:	931a      	str	r3, [sp, #104]	@ 0x68
 800883e:	4654      	mov	r4, sl
 8008840:	2205      	movs	r2, #5
 8008842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008846:	4853      	ldr	r0, [pc, #332]	@ (8008994 <_vfiprintf_r+0x21c>)
 8008848:	f7f7 fcc2 	bl	80001d0 <memchr>
 800884c:	9a04      	ldr	r2, [sp, #16]
 800884e:	b9d8      	cbnz	r0, 8008888 <_vfiprintf_r+0x110>
 8008850:	06d1      	lsls	r1, r2, #27
 8008852:	bf44      	itt	mi
 8008854:	2320      	movmi	r3, #32
 8008856:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800885a:	0713      	lsls	r3, r2, #28
 800885c:	bf44      	itt	mi
 800885e:	232b      	movmi	r3, #43	@ 0x2b
 8008860:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008864:	f89a 3000 	ldrb.w	r3, [sl]
 8008868:	2b2a      	cmp	r3, #42	@ 0x2a
 800886a:	d015      	beq.n	8008898 <_vfiprintf_r+0x120>
 800886c:	9a07      	ldr	r2, [sp, #28]
 800886e:	4654      	mov	r4, sl
 8008870:	2000      	movs	r0, #0
 8008872:	f04f 0c0a 	mov.w	ip, #10
 8008876:	4621      	mov	r1, r4
 8008878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800887c:	3b30      	subs	r3, #48	@ 0x30
 800887e:	2b09      	cmp	r3, #9
 8008880:	d94b      	bls.n	800891a <_vfiprintf_r+0x1a2>
 8008882:	b1b0      	cbz	r0, 80088b2 <_vfiprintf_r+0x13a>
 8008884:	9207      	str	r2, [sp, #28]
 8008886:	e014      	b.n	80088b2 <_vfiprintf_r+0x13a>
 8008888:	eba0 0308 	sub.w	r3, r0, r8
 800888c:	fa09 f303 	lsl.w	r3, r9, r3
 8008890:	4313      	orrs	r3, r2
 8008892:	9304      	str	r3, [sp, #16]
 8008894:	46a2      	mov	sl, r4
 8008896:	e7d2      	b.n	800883e <_vfiprintf_r+0xc6>
 8008898:	9b03      	ldr	r3, [sp, #12]
 800889a:	1d19      	adds	r1, r3, #4
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	9103      	str	r1, [sp, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	bfbb      	ittet	lt
 80088a4:	425b      	neglt	r3, r3
 80088a6:	f042 0202 	orrlt.w	r2, r2, #2
 80088aa:	9307      	strge	r3, [sp, #28]
 80088ac:	9307      	strlt	r3, [sp, #28]
 80088ae:	bfb8      	it	lt
 80088b0:	9204      	strlt	r2, [sp, #16]
 80088b2:	7823      	ldrb	r3, [r4, #0]
 80088b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80088b6:	d10a      	bne.n	80088ce <_vfiprintf_r+0x156>
 80088b8:	7863      	ldrb	r3, [r4, #1]
 80088ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80088bc:	d132      	bne.n	8008924 <_vfiprintf_r+0x1ac>
 80088be:	9b03      	ldr	r3, [sp, #12]
 80088c0:	1d1a      	adds	r2, r3, #4
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	9203      	str	r2, [sp, #12]
 80088c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088ca:	3402      	adds	r4, #2
 80088cc:	9305      	str	r3, [sp, #20]
 80088ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80089a4 <_vfiprintf_r+0x22c>
 80088d2:	7821      	ldrb	r1, [r4, #0]
 80088d4:	2203      	movs	r2, #3
 80088d6:	4650      	mov	r0, sl
 80088d8:	f7f7 fc7a 	bl	80001d0 <memchr>
 80088dc:	b138      	cbz	r0, 80088ee <_vfiprintf_r+0x176>
 80088de:	9b04      	ldr	r3, [sp, #16]
 80088e0:	eba0 000a 	sub.w	r0, r0, sl
 80088e4:	2240      	movs	r2, #64	@ 0x40
 80088e6:	4082      	lsls	r2, r0
 80088e8:	4313      	orrs	r3, r2
 80088ea:	3401      	adds	r4, #1
 80088ec:	9304      	str	r3, [sp, #16]
 80088ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f2:	4829      	ldr	r0, [pc, #164]	@ (8008998 <_vfiprintf_r+0x220>)
 80088f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088f8:	2206      	movs	r2, #6
 80088fa:	f7f7 fc69 	bl	80001d0 <memchr>
 80088fe:	2800      	cmp	r0, #0
 8008900:	d03f      	beq.n	8008982 <_vfiprintf_r+0x20a>
 8008902:	4b26      	ldr	r3, [pc, #152]	@ (800899c <_vfiprintf_r+0x224>)
 8008904:	bb1b      	cbnz	r3, 800894e <_vfiprintf_r+0x1d6>
 8008906:	9b03      	ldr	r3, [sp, #12]
 8008908:	3307      	adds	r3, #7
 800890a:	f023 0307 	bic.w	r3, r3, #7
 800890e:	3308      	adds	r3, #8
 8008910:	9303      	str	r3, [sp, #12]
 8008912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008914:	443b      	add	r3, r7
 8008916:	9309      	str	r3, [sp, #36]	@ 0x24
 8008918:	e76a      	b.n	80087f0 <_vfiprintf_r+0x78>
 800891a:	fb0c 3202 	mla	r2, ip, r2, r3
 800891e:	460c      	mov	r4, r1
 8008920:	2001      	movs	r0, #1
 8008922:	e7a8      	b.n	8008876 <_vfiprintf_r+0xfe>
 8008924:	2300      	movs	r3, #0
 8008926:	3401      	adds	r4, #1
 8008928:	9305      	str	r3, [sp, #20]
 800892a:	4619      	mov	r1, r3
 800892c:	f04f 0c0a 	mov.w	ip, #10
 8008930:	4620      	mov	r0, r4
 8008932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008936:	3a30      	subs	r2, #48	@ 0x30
 8008938:	2a09      	cmp	r2, #9
 800893a:	d903      	bls.n	8008944 <_vfiprintf_r+0x1cc>
 800893c:	2b00      	cmp	r3, #0
 800893e:	d0c6      	beq.n	80088ce <_vfiprintf_r+0x156>
 8008940:	9105      	str	r1, [sp, #20]
 8008942:	e7c4      	b.n	80088ce <_vfiprintf_r+0x156>
 8008944:	fb0c 2101 	mla	r1, ip, r1, r2
 8008948:	4604      	mov	r4, r0
 800894a:	2301      	movs	r3, #1
 800894c:	e7f0      	b.n	8008930 <_vfiprintf_r+0x1b8>
 800894e:	ab03      	add	r3, sp, #12
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	462a      	mov	r2, r5
 8008954:	4b12      	ldr	r3, [pc, #72]	@ (80089a0 <_vfiprintf_r+0x228>)
 8008956:	a904      	add	r1, sp, #16
 8008958:	4630      	mov	r0, r6
 800895a:	f7fd fec3 	bl	80066e4 <_printf_float>
 800895e:	4607      	mov	r7, r0
 8008960:	1c78      	adds	r0, r7, #1
 8008962:	d1d6      	bne.n	8008912 <_vfiprintf_r+0x19a>
 8008964:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008966:	07d9      	lsls	r1, r3, #31
 8008968:	d405      	bmi.n	8008976 <_vfiprintf_r+0x1fe>
 800896a:	89ab      	ldrh	r3, [r5, #12]
 800896c:	059a      	lsls	r2, r3, #22
 800896e:	d402      	bmi.n	8008976 <_vfiprintf_r+0x1fe>
 8008970:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008972:	f7fe fc05 	bl	8007180 <__retarget_lock_release_recursive>
 8008976:	89ab      	ldrh	r3, [r5, #12]
 8008978:	065b      	lsls	r3, r3, #25
 800897a:	f53f af1f 	bmi.w	80087bc <_vfiprintf_r+0x44>
 800897e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008980:	e71e      	b.n	80087c0 <_vfiprintf_r+0x48>
 8008982:	ab03      	add	r3, sp, #12
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	462a      	mov	r2, r5
 8008988:	4b05      	ldr	r3, [pc, #20]	@ (80089a0 <_vfiprintf_r+0x228>)
 800898a:	a904      	add	r1, sp, #16
 800898c:	4630      	mov	r0, r6
 800898e:	f7fe f941 	bl	8006c14 <_printf_i>
 8008992:	e7e4      	b.n	800895e <_vfiprintf_r+0x1e6>
 8008994:	08009538 	.word	0x08009538
 8008998:	08009542 	.word	0x08009542
 800899c:	080066e5 	.word	0x080066e5
 80089a0:	08008753 	.word	0x08008753
 80089a4:	0800953e 	.word	0x0800953e

080089a8 <__sflush_r>:
 80089a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089b0:	0716      	lsls	r6, r2, #28
 80089b2:	4605      	mov	r5, r0
 80089b4:	460c      	mov	r4, r1
 80089b6:	d454      	bmi.n	8008a62 <__sflush_r+0xba>
 80089b8:	684b      	ldr	r3, [r1, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	dc02      	bgt.n	80089c4 <__sflush_r+0x1c>
 80089be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	dd48      	ble.n	8008a56 <__sflush_r+0xae>
 80089c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089c6:	2e00      	cmp	r6, #0
 80089c8:	d045      	beq.n	8008a56 <__sflush_r+0xae>
 80089ca:	2300      	movs	r3, #0
 80089cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80089d0:	682f      	ldr	r7, [r5, #0]
 80089d2:	6a21      	ldr	r1, [r4, #32]
 80089d4:	602b      	str	r3, [r5, #0]
 80089d6:	d030      	beq.n	8008a3a <__sflush_r+0x92>
 80089d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80089da:	89a3      	ldrh	r3, [r4, #12]
 80089dc:	0759      	lsls	r1, r3, #29
 80089de:	d505      	bpl.n	80089ec <__sflush_r+0x44>
 80089e0:	6863      	ldr	r3, [r4, #4]
 80089e2:	1ad2      	subs	r2, r2, r3
 80089e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80089e6:	b10b      	cbz	r3, 80089ec <__sflush_r+0x44>
 80089e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80089ea:	1ad2      	subs	r2, r2, r3
 80089ec:	2300      	movs	r3, #0
 80089ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089f0:	6a21      	ldr	r1, [r4, #32]
 80089f2:	4628      	mov	r0, r5
 80089f4:	47b0      	blx	r6
 80089f6:	1c43      	adds	r3, r0, #1
 80089f8:	89a3      	ldrh	r3, [r4, #12]
 80089fa:	d106      	bne.n	8008a0a <__sflush_r+0x62>
 80089fc:	6829      	ldr	r1, [r5, #0]
 80089fe:	291d      	cmp	r1, #29
 8008a00:	d82b      	bhi.n	8008a5a <__sflush_r+0xb2>
 8008a02:	4a2a      	ldr	r2, [pc, #168]	@ (8008aac <__sflush_r+0x104>)
 8008a04:	410a      	asrs	r2, r1
 8008a06:	07d6      	lsls	r6, r2, #31
 8008a08:	d427      	bmi.n	8008a5a <__sflush_r+0xb2>
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	6062      	str	r2, [r4, #4]
 8008a0e:	04d9      	lsls	r1, r3, #19
 8008a10:	6922      	ldr	r2, [r4, #16]
 8008a12:	6022      	str	r2, [r4, #0]
 8008a14:	d504      	bpl.n	8008a20 <__sflush_r+0x78>
 8008a16:	1c42      	adds	r2, r0, #1
 8008a18:	d101      	bne.n	8008a1e <__sflush_r+0x76>
 8008a1a:	682b      	ldr	r3, [r5, #0]
 8008a1c:	b903      	cbnz	r3, 8008a20 <__sflush_r+0x78>
 8008a1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a22:	602f      	str	r7, [r5, #0]
 8008a24:	b1b9      	cbz	r1, 8008a56 <__sflush_r+0xae>
 8008a26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a2a:	4299      	cmp	r1, r3
 8008a2c:	d002      	beq.n	8008a34 <__sflush_r+0x8c>
 8008a2e:	4628      	mov	r0, r5
 8008a30:	f7ff f9f6 	bl	8007e20 <_free_r>
 8008a34:	2300      	movs	r3, #0
 8008a36:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a38:	e00d      	b.n	8008a56 <__sflush_r+0xae>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	47b0      	blx	r6
 8008a40:	4602      	mov	r2, r0
 8008a42:	1c50      	adds	r0, r2, #1
 8008a44:	d1c9      	bne.n	80089da <__sflush_r+0x32>
 8008a46:	682b      	ldr	r3, [r5, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d0c6      	beq.n	80089da <__sflush_r+0x32>
 8008a4c:	2b1d      	cmp	r3, #29
 8008a4e:	d001      	beq.n	8008a54 <__sflush_r+0xac>
 8008a50:	2b16      	cmp	r3, #22
 8008a52:	d11e      	bne.n	8008a92 <__sflush_r+0xea>
 8008a54:	602f      	str	r7, [r5, #0]
 8008a56:	2000      	movs	r0, #0
 8008a58:	e022      	b.n	8008aa0 <__sflush_r+0xf8>
 8008a5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a5e:	b21b      	sxth	r3, r3
 8008a60:	e01b      	b.n	8008a9a <__sflush_r+0xf2>
 8008a62:	690f      	ldr	r7, [r1, #16]
 8008a64:	2f00      	cmp	r7, #0
 8008a66:	d0f6      	beq.n	8008a56 <__sflush_r+0xae>
 8008a68:	0793      	lsls	r3, r2, #30
 8008a6a:	680e      	ldr	r6, [r1, #0]
 8008a6c:	bf08      	it	eq
 8008a6e:	694b      	ldreq	r3, [r1, #20]
 8008a70:	600f      	str	r7, [r1, #0]
 8008a72:	bf18      	it	ne
 8008a74:	2300      	movne	r3, #0
 8008a76:	eba6 0807 	sub.w	r8, r6, r7
 8008a7a:	608b      	str	r3, [r1, #8]
 8008a7c:	f1b8 0f00 	cmp.w	r8, #0
 8008a80:	dde9      	ble.n	8008a56 <__sflush_r+0xae>
 8008a82:	6a21      	ldr	r1, [r4, #32]
 8008a84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008a86:	4643      	mov	r3, r8
 8008a88:	463a      	mov	r2, r7
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	47b0      	blx	r6
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	dc08      	bgt.n	8008aa4 <__sflush_r+0xfc>
 8008a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a9a:	81a3      	strh	r3, [r4, #12]
 8008a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aa4:	4407      	add	r7, r0
 8008aa6:	eba8 0800 	sub.w	r8, r8, r0
 8008aaa:	e7e7      	b.n	8008a7c <__sflush_r+0xd4>
 8008aac:	dfbffffe 	.word	0xdfbffffe

08008ab0 <_fflush_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	690b      	ldr	r3, [r1, #16]
 8008ab4:	4605      	mov	r5, r0
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	b913      	cbnz	r3, 8008ac0 <_fflush_r+0x10>
 8008aba:	2500      	movs	r5, #0
 8008abc:	4628      	mov	r0, r5
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	b118      	cbz	r0, 8008aca <_fflush_r+0x1a>
 8008ac2:	6a03      	ldr	r3, [r0, #32]
 8008ac4:	b90b      	cbnz	r3, 8008aca <_fflush_r+0x1a>
 8008ac6:	f7fe fa51 	bl	8006f6c <__sinit>
 8008aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d0f3      	beq.n	8008aba <_fflush_r+0xa>
 8008ad2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ad4:	07d0      	lsls	r0, r2, #31
 8008ad6:	d404      	bmi.n	8008ae2 <_fflush_r+0x32>
 8008ad8:	0599      	lsls	r1, r3, #22
 8008ada:	d402      	bmi.n	8008ae2 <_fflush_r+0x32>
 8008adc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ade:	f7fe fb4e 	bl	800717e <__retarget_lock_acquire_recursive>
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	f7ff ff5f 	bl	80089a8 <__sflush_r>
 8008aea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008aec:	07da      	lsls	r2, r3, #31
 8008aee:	4605      	mov	r5, r0
 8008af0:	d4e4      	bmi.n	8008abc <_fflush_r+0xc>
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	059b      	lsls	r3, r3, #22
 8008af6:	d4e1      	bmi.n	8008abc <_fflush_r+0xc>
 8008af8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008afa:	f7fe fb41 	bl	8007180 <__retarget_lock_release_recursive>
 8008afe:	e7dd      	b.n	8008abc <_fflush_r+0xc>

08008b00 <__swbuf_r>:
 8008b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b02:	460e      	mov	r6, r1
 8008b04:	4614      	mov	r4, r2
 8008b06:	4605      	mov	r5, r0
 8008b08:	b118      	cbz	r0, 8008b12 <__swbuf_r+0x12>
 8008b0a:	6a03      	ldr	r3, [r0, #32]
 8008b0c:	b90b      	cbnz	r3, 8008b12 <__swbuf_r+0x12>
 8008b0e:	f7fe fa2d 	bl	8006f6c <__sinit>
 8008b12:	69a3      	ldr	r3, [r4, #24]
 8008b14:	60a3      	str	r3, [r4, #8]
 8008b16:	89a3      	ldrh	r3, [r4, #12]
 8008b18:	071a      	lsls	r2, r3, #28
 8008b1a:	d501      	bpl.n	8008b20 <__swbuf_r+0x20>
 8008b1c:	6923      	ldr	r3, [r4, #16]
 8008b1e:	b943      	cbnz	r3, 8008b32 <__swbuf_r+0x32>
 8008b20:	4621      	mov	r1, r4
 8008b22:	4628      	mov	r0, r5
 8008b24:	f000 f82a 	bl	8008b7c <__swsetup_r>
 8008b28:	b118      	cbz	r0, 8008b32 <__swbuf_r+0x32>
 8008b2a:	f04f 37ff 	mov.w	r7, #4294967295
 8008b2e:	4638      	mov	r0, r7
 8008b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b32:	6823      	ldr	r3, [r4, #0]
 8008b34:	6922      	ldr	r2, [r4, #16]
 8008b36:	1a98      	subs	r0, r3, r2
 8008b38:	6963      	ldr	r3, [r4, #20]
 8008b3a:	b2f6      	uxtb	r6, r6
 8008b3c:	4283      	cmp	r3, r0
 8008b3e:	4637      	mov	r7, r6
 8008b40:	dc05      	bgt.n	8008b4e <__swbuf_r+0x4e>
 8008b42:	4621      	mov	r1, r4
 8008b44:	4628      	mov	r0, r5
 8008b46:	f7ff ffb3 	bl	8008ab0 <_fflush_r>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d1ed      	bne.n	8008b2a <__swbuf_r+0x2a>
 8008b4e:	68a3      	ldr	r3, [r4, #8]
 8008b50:	3b01      	subs	r3, #1
 8008b52:	60a3      	str	r3, [r4, #8]
 8008b54:	6823      	ldr	r3, [r4, #0]
 8008b56:	1c5a      	adds	r2, r3, #1
 8008b58:	6022      	str	r2, [r4, #0]
 8008b5a:	701e      	strb	r6, [r3, #0]
 8008b5c:	6962      	ldr	r2, [r4, #20]
 8008b5e:	1c43      	adds	r3, r0, #1
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d004      	beq.n	8008b6e <__swbuf_r+0x6e>
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	07db      	lsls	r3, r3, #31
 8008b68:	d5e1      	bpl.n	8008b2e <__swbuf_r+0x2e>
 8008b6a:	2e0a      	cmp	r6, #10
 8008b6c:	d1df      	bne.n	8008b2e <__swbuf_r+0x2e>
 8008b6e:	4621      	mov	r1, r4
 8008b70:	4628      	mov	r0, r5
 8008b72:	f7ff ff9d 	bl	8008ab0 <_fflush_r>
 8008b76:	2800      	cmp	r0, #0
 8008b78:	d0d9      	beq.n	8008b2e <__swbuf_r+0x2e>
 8008b7a:	e7d6      	b.n	8008b2a <__swbuf_r+0x2a>

08008b7c <__swsetup_r>:
 8008b7c:	b538      	push	{r3, r4, r5, lr}
 8008b7e:	4b29      	ldr	r3, [pc, #164]	@ (8008c24 <__swsetup_r+0xa8>)
 8008b80:	4605      	mov	r5, r0
 8008b82:	6818      	ldr	r0, [r3, #0]
 8008b84:	460c      	mov	r4, r1
 8008b86:	b118      	cbz	r0, 8008b90 <__swsetup_r+0x14>
 8008b88:	6a03      	ldr	r3, [r0, #32]
 8008b8a:	b90b      	cbnz	r3, 8008b90 <__swsetup_r+0x14>
 8008b8c:	f7fe f9ee 	bl	8006f6c <__sinit>
 8008b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b94:	0719      	lsls	r1, r3, #28
 8008b96:	d422      	bmi.n	8008bde <__swsetup_r+0x62>
 8008b98:	06da      	lsls	r2, r3, #27
 8008b9a:	d407      	bmi.n	8008bac <__swsetup_r+0x30>
 8008b9c:	2209      	movs	r2, #9
 8008b9e:	602a      	str	r2, [r5, #0]
 8008ba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ba4:	81a3      	strh	r3, [r4, #12]
 8008ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8008baa:	e033      	b.n	8008c14 <__swsetup_r+0x98>
 8008bac:	0758      	lsls	r0, r3, #29
 8008bae:	d512      	bpl.n	8008bd6 <__swsetup_r+0x5a>
 8008bb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008bb2:	b141      	cbz	r1, 8008bc6 <__swsetup_r+0x4a>
 8008bb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008bb8:	4299      	cmp	r1, r3
 8008bba:	d002      	beq.n	8008bc2 <__swsetup_r+0x46>
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	f7ff f92f 	bl	8007e20 <_free_r>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008bc6:	89a3      	ldrh	r3, [r4, #12]
 8008bc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008bcc:	81a3      	strh	r3, [r4, #12]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	6063      	str	r3, [r4, #4]
 8008bd2:	6923      	ldr	r3, [r4, #16]
 8008bd4:	6023      	str	r3, [r4, #0]
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	f043 0308 	orr.w	r3, r3, #8
 8008bdc:	81a3      	strh	r3, [r4, #12]
 8008bde:	6923      	ldr	r3, [r4, #16]
 8008be0:	b94b      	cbnz	r3, 8008bf6 <__swsetup_r+0x7a>
 8008be2:	89a3      	ldrh	r3, [r4, #12]
 8008be4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bec:	d003      	beq.n	8008bf6 <__swsetup_r+0x7a>
 8008bee:	4621      	mov	r1, r4
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	f000 f8c1 	bl	8008d78 <__smakebuf_r>
 8008bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bfa:	f013 0201 	ands.w	r2, r3, #1
 8008bfe:	d00a      	beq.n	8008c16 <__swsetup_r+0x9a>
 8008c00:	2200      	movs	r2, #0
 8008c02:	60a2      	str	r2, [r4, #8]
 8008c04:	6962      	ldr	r2, [r4, #20]
 8008c06:	4252      	negs	r2, r2
 8008c08:	61a2      	str	r2, [r4, #24]
 8008c0a:	6922      	ldr	r2, [r4, #16]
 8008c0c:	b942      	cbnz	r2, 8008c20 <__swsetup_r+0xa4>
 8008c0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008c12:	d1c5      	bne.n	8008ba0 <__swsetup_r+0x24>
 8008c14:	bd38      	pop	{r3, r4, r5, pc}
 8008c16:	0799      	lsls	r1, r3, #30
 8008c18:	bf58      	it	pl
 8008c1a:	6962      	ldrpl	r2, [r4, #20]
 8008c1c:	60a2      	str	r2, [r4, #8]
 8008c1e:	e7f4      	b.n	8008c0a <__swsetup_r+0x8e>
 8008c20:	2000      	movs	r0, #0
 8008c22:	e7f7      	b.n	8008c14 <__swsetup_r+0x98>
 8008c24:	20000018 	.word	0x20000018

08008c28 <_sbrk_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4d06      	ldr	r5, [pc, #24]	@ (8008c44 <_sbrk_r+0x1c>)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4604      	mov	r4, r0
 8008c30:	4608      	mov	r0, r1
 8008c32:	602b      	str	r3, [r5, #0]
 8008c34:	f7f9 f8dc 	bl	8001df0 <_sbrk>
 8008c38:	1c43      	adds	r3, r0, #1
 8008c3a:	d102      	bne.n	8008c42 <_sbrk_r+0x1a>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	b103      	cbz	r3, 8008c42 <_sbrk_r+0x1a>
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	bd38      	pop	{r3, r4, r5, pc}
 8008c44:	200004e0 	.word	0x200004e0

08008c48 <memcpy>:
 8008c48:	440a      	add	r2, r1
 8008c4a:	4291      	cmp	r1, r2
 8008c4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c50:	d100      	bne.n	8008c54 <memcpy+0xc>
 8008c52:	4770      	bx	lr
 8008c54:	b510      	push	{r4, lr}
 8008c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c5e:	4291      	cmp	r1, r2
 8008c60:	d1f9      	bne.n	8008c56 <memcpy+0xe>
 8008c62:	bd10      	pop	{r4, pc}

08008c64 <__assert_func>:
 8008c64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c66:	4614      	mov	r4, r2
 8008c68:	461a      	mov	r2, r3
 8008c6a:	4b09      	ldr	r3, [pc, #36]	@ (8008c90 <__assert_func+0x2c>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4605      	mov	r5, r0
 8008c70:	68d8      	ldr	r0, [r3, #12]
 8008c72:	b954      	cbnz	r4, 8008c8a <__assert_func+0x26>
 8008c74:	4b07      	ldr	r3, [pc, #28]	@ (8008c94 <__assert_func+0x30>)
 8008c76:	461c      	mov	r4, r3
 8008c78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c7c:	9100      	str	r1, [sp, #0]
 8008c7e:	462b      	mov	r3, r5
 8008c80:	4905      	ldr	r1, [pc, #20]	@ (8008c98 <__assert_func+0x34>)
 8008c82:	f000 f841 	bl	8008d08 <fiprintf>
 8008c86:	f000 f8d5 	bl	8008e34 <abort>
 8008c8a:	4b04      	ldr	r3, [pc, #16]	@ (8008c9c <__assert_func+0x38>)
 8008c8c:	e7f4      	b.n	8008c78 <__assert_func+0x14>
 8008c8e:	bf00      	nop
 8008c90:	20000018 	.word	0x20000018
 8008c94:	0800958e 	.word	0x0800958e
 8008c98:	08009560 	.word	0x08009560
 8008c9c:	08009553 	.word	0x08009553

08008ca0 <_calloc_r>:
 8008ca0:	b570      	push	{r4, r5, r6, lr}
 8008ca2:	fba1 5402 	umull	r5, r4, r1, r2
 8008ca6:	b93c      	cbnz	r4, 8008cb8 <_calloc_r+0x18>
 8008ca8:	4629      	mov	r1, r5
 8008caa:	f7ff f92d 	bl	8007f08 <_malloc_r>
 8008cae:	4606      	mov	r6, r0
 8008cb0:	b928      	cbnz	r0, 8008cbe <_calloc_r+0x1e>
 8008cb2:	2600      	movs	r6, #0
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	bd70      	pop	{r4, r5, r6, pc}
 8008cb8:	220c      	movs	r2, #12
 8008cba:	6002      	str	r2, [r0, #0]
 8008cbc:	e7f9      	b.n	8008cb2 <_calloc_r+0x12>
 8008cbe:	462a      	mov	r2, r5
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	f7fe f9de 	bl	8007082 <memset>
 8008cc6:	e7f5      	b.n	8008cb4 <_calloc_r+0x14>

08008cc8 <__ascii_mbtowc>:
 8008cc8:	b082      	sub	sp, #8
 8008cca:	b901      	cbnz	r1, 8008cce <__ascii_mbtowc+0x6>
 8008ccc:	a901      	add	r1, sp, #4
 8008cce:	b142      	cbz	r2, 8008ce2 <__ascii_mbtowc+0x1a>
 8008cd0:	b14b      	cbz	r3, 8008ce6 <__ascii_mbtowc+0x1e>
 8008cd2:	7813      	ldrb	r3, [r2, #0]
 8008cd4:	600b      	str	r3, [r1, #0]
 8008cd6:	7812      	ldrb	r2, [r2, #0]
 8008cd8:	1e10      	subs	r0, r2, #0
 8008cda:	bf18      	it	ne
 8008cdc:	2001      	movne	r0, #1
 8008cde:	b002      	add	sp, #8
 8008ce0:	4770      	bx	lr
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	e7fb      	b.n	8008cde <__ascii_mbtowc+0x16>
 8008ce6:	f06f 0001 	mvn.w	r0, #1
 8008cea:	e7f8      	b.n	8008cde <__ascii_mbtowc+0x16>

08008cec <__ascii_wctomb>:
 8008cec:	4603      	mov	r3, r0
 8008cee:	4608      	mov	r0, r1
 8008cf0:	b141      	cbz	r1, 8008d04 <__ascii_wctomb+0x18>
 8008cf2:	2aff      	cmp	r2, #255	@ 0xff
 8008cf4:	d904      	bls.n	8008d00 <__ascii_wctomb+0x14>
 8008cf6:	228a      	movs	r2, #138	@ 0x8a
 8008cf8:	601a      	str	r2, [r3, #0]
 8008cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfe:	4770      	bx	lr
 8008d00:	700a      	strb	r2, [r1, #0]
 8008d02:	2001      	movs	r0, #1
 8008d04:	4770      	bx	lr
	...

08008d08 <fiprintf>:
 8008d08:	b40e      	push	{r1, r2, r3}
 8008d0a:	b503      	push	{r0, r1, lr}
 8008d0c:	4601      	mov	r1, r0
 8008d0e:	ab03      	add	r3, sp, #12
 8008d10:	4805      	ldr	r0, [pc, #20]	@ (8008d28 <fiprintf+0x20>)
 8008d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d16:	6800      	ldr	r0, [r0, #0]
 8008d18:	9301      	str	r3, [sp, #4]
 8008d1a:	f7ff fd2d 	bl	8008778 <_vfiprintf_r>
 8008d1e:	b002      	add	sp, #8
 8008d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d24:	b003      	add	sp, #12
 8008d26:	4770      	bx	lr
 8008d28:	20000018 	.word	0x20000018

08008d2c <__swhatbuf_r>:
 8008d2c:	b570      	push	{r4, r5, r6, lr}
 8008d2e:	460c      	mov	r4, r1
 8008d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d34:	2900      	cmp	r1, #0
 8008d36:	b096      	sub	sp, #88	@ 0x58
 8008d38:	4615      	mov	r5, r2
 8008d3a:	461e      	mov	r6, r3
 8008d3c:	da0d      	bge.n	8008d5a <__swhatbuf_r+0x2e>
 8008d3e:	89a3      	ldrh	r3, [r4, #12]
 8008d40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008d44:	f04f 0100 	mov.w	r1, #0
 8008d48:	bf14      	ite	ne
 8008d4a:	2340      	movne	r3, #64	@ 0x40
 8008d4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008d50:	2000      	movs	r0, #0
 8008d52:	6031      	str	r1, [r6, #0]
 8008d54:	602b      	str	r3, [r5, #0]
 8008d56:	b016      	add	sp, #88	@ 0x58
 8008d58:	bd70      	pop	{r4, r5, r6, pc}
 8008d5a:	466a      	mov	r2, sp
 8008d5c:	f000 f848 	bl	8008df0 <_fstat_r>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	dbec      	blt.n	8008d3e <__swhatbuf_r+0x12>
 8008d64:	9901      	ldr	r1, [sp, #4]
 8008d66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d6e:	4259      	negs	r1, r3
 8008d70:	4159      	adcs	r1, r3
 8008d72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d76:	e7eb      	b.n	8008d50 <__swhatbuf_r+0x24>

08008d78 <__smakebuf_r>:
 8008d78:	898b      	ldrh	r3, [r1, #12]
 8008d7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d7c:	079d      	lsls	r5, r3, #30
 8008d7e:	4606      	mov	r6, r0
 8008d80:	460c      	mov	r4, r1
 8008d82:	d507      	bpl.n	8008d94 <__smakebuf_r+0x1c>
 8008d84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	6123      	str	r3, [r4, #16]
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	6163      	str	r3, [r4, #20]
 8008d90:	b003      	add	sp, #12
 8008d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d94:	ab01      	add	r3, sp, #4
 8008d96:	466a      	mov	r2, sp
 8008d98:	f7ff ffc8 	bl	8008d2c <__swhatbuf_r>
 8008d9c:	9f00      	ldr	r7, [sp, #0]
 8008d9e:	4605      	mov	r5, r0
 8008da0:	4639      	mov	r1, r7
 8008da2:	4630      	mov	r0, r6
 8008da4:	f7ff f8b0 	bl	8007f08 <_malloc_r>
 8008da8:	b948      	cbnz	r0, 8008dbe <__smakebuf_r+0x46>
 8008daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dae:	059a      	lsls	r2, r3, #22
 8008db0:	d4ee      	bmi.n	8008d90 <__smakebuf_r+0x18>
 8008db2:	f023 0303 	bic.w	r3, r3, #3
 8008db6:	f043 0302 	orr.w	r3, r3, #2
 8008dba:	81a3      	strh	r3, [r4, #12]
 8008dbc:	e7e2      	b.n	8008d84 <__smakebuf_r+0xc>
 8008dbe:	89a3      	ldrh	r3, [r4, #12]
 8008dc0:	6020      	str	r0, [r4, #0]
 8008dc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dc6:	81a3      	strh	r3, [r4, #12]
 8008dc8:	9b01      	ldr	r3, [sp, #4]
 8008dca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008dce:	b15b      	cbz	r3, 8008de8 <__smakebuf_r+0x70>
 8008dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	f000 f81d 	bl	8008e14 <_isatty_r>
 8008dda:	b128      	cbz	r0, 8008de8 <__smakebuf_r+0x70>
 8008ddc:	89a3      	ldrh	r3, [r4, #12]
 8008dde:	f023 0303 	bic.w	r3, r3, #3
 8008de2:	f043 0301 	orr.w	r3, r3, #1
 8008de6:	81a3      	strh	r3, [r4, #12]
 8008de8:	89a3      	ldrh	r3, [r4, #12]
 8008dea:	431d      	orrs	r5, r3
 8008dec:	81a5      	strh	r5, [r4, #12]
 8008dee:	e7cf      	b.n	8008d90 <__smakebuf_r+0x18>

08008df0 <_fstat_r>:
 8008df0:	b538      	push	{r3, r4, r5, lr}
 8008df2:	4d07      	ldr	r5, [pc, #28]	@ (8008e10 <_fstat_r+0x20>)
 8008df4:	2300      	movs	r3, #0
 8008df6:	4604      	mov	r4, r0
 8008df8:	4608      	mov	r0, r1
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	602b      	str	r3, [r5, #0]
 8008dfe:	f7f8 ffce 	bl	8001d9e <_fstat>
 8008e02:	1c43      	adds	r3, r0, #1
 8008e04:	d102      	bne.n	8008e0c <_fstat_r+0x1c>
 8008e06:	682b      	ldr	r3, [r5, #0]
 8008e08:	b103      	cbz	r3, 8008e0c <_fstat_r+0x1c>
 8008e0a:	6023      	str	r3, [r4, #0]
 8008e0c:	bd38      	pop	{r3, r4, r5, pc}
 8008e0e:	bf00      	nop
 8008e10:	200004e0 	.word	0x200004e0

08008e14 <_isatty_r>:
 8008e14:	b538      	push	{r3, r4, r5, lr}
 8008e16:	4d06      	ldr	r5, [pc, #24]	@ (8008e30 <_isatty_r+0x1c>)
 8008e18:	2300      	movs	r3, #0
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	4608      	mov	r0, r1
 8008e1e:	602b      	str	r3, [r5, #0]
 8008e20:	f7f8 ffcd 	bl	8001dbe <_isatty>
 8008e24:	1c43      	adds	r3, r0, #1
 8008e26:	d102      	bne.n	8008e2e <_isatty_r+0x1a>
 8008e28:	682b      	ldr	r3, [r5, #0]
 8008e2a:	b103      	cbz	r3, 8008e2e <_isatty_r+0x1a>
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	bd38      	pop	{r3, r4, r5, pc}
 8008e30:	200004e0 	.word	0x200004e0

08008e34 <abort>:
 8008e34:	b508      	push	{r3, lr}
 8008e36:	2006      	movs	r0, #6
 8008e38:	f000 f82c 	bl	8008e94 <raise>
 8008e3c:	2001      	movs	r0, #1
 8008e3e:	f7f8 ff7a 	bl	8001d36 <_exit>

08008e42 <_raise_r>:
 8008e42:	291f      	cmp	r1, #31
 8008e44:	b538      	push	{r3, r4, r5, lr}
 8008e46:	4605      	mov	r5, r0
 8008e48:	460c      	mov	r4, r1
 8008e4a:	d904      	bls.n	8008e56 <_raise_r+0x14>
 8008e4c:	2316      	movs	r3, #22
 8008e4e:	6003      	str	r3, [r0, #0]
 8008e50:	f04f 30ff 	mov.w	r0, #4294967295
 8008e54:	bd38      	pop	{r3, r4, r5, pc}
 8008e56:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008e58:	b112      	cbz	r2, 8008e60 <_raise_r+0x1e>
 8008e5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e5e:	b94b      	cbnz	r3, 8008e74 <_raise_r+0x32>
 8008e60:	4628      	mov	r0, r5
 8008e62:	f000 f831 	bl	8008ec8 <_getpid_r>
 8008e66:	4622      	mov	r2, r4
 8008e68:	4601      	mov	r1, r0
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e70:	f000 b818 	b.w	8008ea4 <_kill_r>
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d00a      	beq.n	8008e8e <_raise_r+0x4c>
 8008e78:	1c59      	adds	r1, r3, #1
 8008e7a:	d103      	bne.n	8008e84 <_raise_r+0x42>
 8008e7c:	2316      	movs	r3, #22
 8008e7e:	6003      	str	r3, [r0, #0]
 8008e80:	2001      	movs	r0, #1
 8008e82:	e7e7      	b.n	8008e54 <_raise_r+0x12>
 8008e84:	2100      	movs	r1, #0
 8008e86:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	4798      	blx	r3
 8008e8e:	2000      	movs	r0, #0
 8008e90:	e7e0      	b.n	8008e54 <_raise_r+0x12>
	...

08008e94 <raise>:
 8008e94:	4b02      	ldr	r3, [pc, #8]	@ (8008ea0 <raise+0xc>)
 8008e96:	4601      	mov	r1, r0
 8008e98:	6818      	ldr	r0, [r3, #0]
 8008e9a:	f7ff bfd2 	b.w	8008e42 <_raise_r>
 8008e9e:	bf00      	nop
 8008ea0:	20000018 	.word	0x20000018

08008ea4 <_kill_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	4d07      	ldr	r5, [pc, #28]	@ (8008ec4 <_kill_r+0x20>)
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	4604      	mov	r4, r0
 8008eac:	4608      	mov	r0, r1
 8008eae:	4611      	mov	r1, r2
 8008eb0:	602b      	str	r3, [r5, #0]
 8008eb2:	f7f8 ff30 	bl	8001d16 <_kill>
 8008eb6:	1c43      	adds	r3, r0, #1
 8008eb8:	d102      	bne.n	8008ec0 <_kill_r+0x1c>
 8008eba:	682b      	ldr	r3, [r5, #0]
 8008ebc:	b103      	cbz	r3, 8008ec0 <_kill_r+0x1c>
 8008ebe:	6023      	str	r3, [r4, #0]
 8008ec0:	bd38      	pop	{r3, r4, r5, pc}
 8008ec2:	bf00      	nop
 8008ec4:	200004e0 	.word	0x200004e0

08008ec8 <_getpid_r>:
 8008ec8:	f7f8 bf1d 	b.w	8001d06 <_getpid>

08008ecc <_init>:
 8008ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ece:	bf00      	nop
 8008ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ed2:	bc08      	pop	{r3}
 8008ed4:	469e      	mov	lr, r3
 8008ed6:	4770      	bx	lr

08008ed8 <_fini>:
 8008ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eda:	bf00      	nop
 8008edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ede:	bc08      	pop	{r3}
 8008ee0:	469e      	mov	lr, r3
 8008ee2:	4770      	bx	lr
