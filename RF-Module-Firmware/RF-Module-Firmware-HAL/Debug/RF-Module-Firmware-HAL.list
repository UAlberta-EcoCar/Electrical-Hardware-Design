
RF-Module-Firmware-HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b030  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800b1c0  0800b1c0  0001b1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b500  0800b500  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b500  0800b500  0001b500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b508  0800b508  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b508  0800b508  0001b508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b50c  0800b50c  0001b50c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce0  20000070  0800b580  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d50  0800b580  00021d50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021af3  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c87  00000000  00000000  00041bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c58  00000000  00000000  00046860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015e8  00000000  00000000  000484b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025774  00000000  00000000  00049aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021937  00000000  00000000  0006f214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db5e6  00000000  00000000  00090b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007ff0  00000000  00000000  0016c134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  00174124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b1a8 	.word	0x0800b1a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800b1a8 	.word	0x0800b1a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000570:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <MX_CAN1_Init+0x68>)
 8000572:	4a19      	ldr	r2, [pc, #100]	; (80005d8 <MX_CAN1_Init+0x6c>)
 8000574:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000576:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <MX_CAN1_Init+0x68>)
 8000578:	2210      	movs	r2, #16
 800057a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <MX_CAN1_Init+0x68>)
 800057e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000582:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <MX_CAN1_Init+0x68>)
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800058a:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <MX_CAN1_Init+0x68>)
 800058c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000590:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <MX_CAN1_Init+0x68>)
 8000594:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000598:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_CAN1_Init+0x68>)
 800059c:	2200      	movs	r2, #0
 800059e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <MX_CAN1_Init+0x68>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <MX_CAN1_Init+0x68>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_CAN1_Init+0x68>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <MX_CAN1_Init+0x68>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <MX_CAN1_Init+0x68>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_CAN1_Init+0x68>)
 80005c0:	f001 f8fa 	bl	80017b8 <HAL_CAN_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80005ca:	f000 fbb3 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000a8 	.word	0x200000a8
 80005d8:	40006400 	.word	0x40006400

080005dc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a24      	ldr	r2, [pc, #144]	; (800068c <HAL_CAN_MspInit+0xb0>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d141      	bne.n	8000682 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005fe:	4b24      	ldr	r3, [pc, #144]	; (8000690 <HAL_CAN_MspInit+0xb4>)
 8000600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000602:	4a23      	ldr	r2, [pc, #140]	; (8000690 <HAL_CAN_MspInit+0xb4>)
 8000604:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000608:	6593      	str	r3, [r2, #88]	; 0x58
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <HAL_CAN_MspInit+0xb4>)
 800060c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800060e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <HAL_CAN_MspInit+0xb4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	4a1d      	ldr	r2, [pc, #116]	; (8000690 <HAL_CAN_MspInit+0xb4>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000622:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <HAL_CAN_MspInit+0xb4>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800062e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000634:	2302      	movs	r3, #2
 8000636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063c:	2303      	movs	r3, #3
 800063e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000640:	2309      	movs	r3, #9
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4619      	mov	r1, r3
 800064a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064e:	f001 ffb7 	bl	80025c0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2105      	movs	r1, #5
 8000656:	2013      	movs	r0, #19
 8000658:	f001 ff88 	bl	800256c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800065c:	2013      	movs	r0, #19
 800065e:	f001 ffa1 	bl	80025a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2105      	movs	r1, #5
 8000666:	2014      	movs	r0, #20
 8000668:	f001 ff80 	bl	800256c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800066c:	2014      	movs	r0, #20
 800066e:	f001 ff99 	bl	80025a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2105      	movs	r1, #5
 8000676:	2015      	movs	r0, #21
 8000678:	f001 ff78 	bl	800256c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800067c:	2015      	movs	r0, #21
 800067e:	f001 ff91 	bl	80025a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000682:	bf00      	nop
 8000684:	3728      	adds	r7, #40	; 0x28
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40006400 	.word	0x40006400
 8000690:	40021000 	.word	0x40021000

08000694 <CAN_Initialize>:
  }
}

/* USER CODE BEGIN 1 */

void CAN_Initialize() {
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0
	MX_CAN1_Init();
 800069a:	f7ff ff67 	bl	800056c <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	CAN_FilterTypeDef sf;
	sf.FilterIdHigh = 0x200 << 5;
 800069e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006a2:	603b      	str	r3, [r7, #0]
	sf.FilterMaskIdHigh = 0x700 << 5;
 80006a4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80006a8:	60bb      	str	r3, [r7, #8]
	sf.FilterIdLow = 0x0000;
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
	sf.FilterMaskIdLow = 0x0000;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
	sf.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
	sf.FilterBank = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
	sf.FilterMode = CAN_FILTERMODE_IDMASK;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
	sf.FilterScale = CAN_FILTERSCALE_32BIT;
 80006be:	2301      	movs	r3, #1
 80006c0:	61fb      	str	r3, [r7, #28]
	sf.FilterActivation = CAN_FILTER_ENABLE;
 80006c2:	2301      	movs	r3, #1
 80006c4:	623b      	str	r3, [r7, #32]

	if (HAL_CAN_ConfigFilter(&hcan1, &sf) != HAL_OK) {
 80006c6:	463b      	mov	r3, r7
 80006c8:	4619      	mov	r1, r3
 80006ca:	481b      	ldr	r0, [pc, #108]	; (8000738 <CAN_Initialize+0xa4>)
 80006cc:	f001 f96f 	bl	80019ae <HAL_CAN_ConfigFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <CAN_Initialize+0x46>
		/* Filter configuration Error */
		Error_Handler();
 80006d6:	f000 fb2d 	bl	8000d34 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80006da:	4817      	ldr	r0, [pc, #92]	; (8000738 <CAN_Initialize+0xa4>)
 80006dc:	f001 fa31 	bl	8001b42 <HAL_CAN_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <CAN_Initialize+0x56>
		Error_Handler();
 80006e6:	f000 fb25 	bl	8000d34 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 80006ea:	2102      	movs	r1, #2
 80006ec:	4812      	ldr	r0, [pc, #72]	; (8000738 <CAN_Initialize+0xa4>)
 80006ee:	f001 fc4e 	bl	8001f8e <HAL_CAN_ActivateNotification>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <CAN_Initialize+0x68>
			!= HAL_OK) {
		Error_Handler();
 80006f8:	f000 fb1c 	bl	8000d34 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY)
 80006fc:	2101      	movs	r1, #1
 80006fe:	480e      	ldr	r0, [pc, #56]	; (8000738 <CAN_Initialize+0xa4>)
 8000700:	f001 fc45 	bl	8001f8e <HAL_CAN_ActivateNotification>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <CAN_Initialize+0x7a>
			!= HAL_OK) {
		Error_Handler();
 800070a:	f000 fb13 	bl	8000d34 <Error_Handler>
//	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR))
//	!= HAL_OK) {
//		Error_Handler();
//	}

	TxHeader.StdId = 0x201;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <CAN_Initialize+0xa8>)
 8000710:	f240 2201 	movw	r2, #513	; 0x201
 8000714:	601a      	str	r2, [r3, #0]
	//	TxHeader.ExtId = 0x01;
	TxHeader.RTR = CAN_RTR_DATA;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <CAN_Initialize+0xa8>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <CAN_Initialize+0xa8>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <CAN_Initialize+0xa8>)
 8000724:	2208      	movs	r2, #8
 8000726:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <CAN_Initialize+0xa8>)
 800072a:	2200      	movs	r2, #0
 800072c:	751a      	strb	r2, [r3, #20]
}
 800072e:	bf00      	nop
 8000730:	3728      	adds	r7, #40	; 0x28
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000a8 	.word	0x200000a8
 800073c:	2000008c 	.word	0x2000008c

08000740 <CAN_Transmit>:

int CAN_Transmit(void *data, int size) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &TxMailbox) != HAL_OK) {
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <CAN_Transmit+0x2c>)
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	4908      	ldr	r1, [pc, #32]	; (8000770 <CAN_Transmit+0x30>)
 8000750:	4808      	ldr	r0, [pc, #32]	; (8000774 <CAN_Transmit+0x34>)
 8000752:	f001 fa3a 	bl	8001bca <HAL_CAN_AddTxMessage>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <CAN_Transmit+0x20>
		Error_Handler();
 800075c:	f000 faea 	bl	8000d34 <Error_Handler>
	}

	return 1;
 8000760:	2301      	movs	r3, #1
}
 8000762:	4618      	mov	r0, r3
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200000a4 	.word	0x200000a4
 8000770:	2000008c 	.word	0x2000008c
 8000774:	200000a8 	.word	0x200000a8

08000778 <configureTimerForRunTimeStats>:
void configureTimerForRunTimeStats(void);
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
	return 0;
 800078a:	2300      	movs	r3, #0
}
 800078c:	4618      	mov	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	CAN_Initialize();
 800079c:	f7ff ff7a 	bl	8000694 <CAN_Initialize>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CAN_Transmission_Complete */
  CAN_Transmission_CompleteHandle = osSemaphoreNew(1, 0, &CAN_Transmission_Complete_attributes);
 80007a0:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <MX_FREERTOS_Init+0x7c>)
 80007a2:	2100      	movs	r1, #0
 80007a4:	2001      	movs	r0, #1
 80007a6:	f006 f95c 	bl	8006a62 <osSemaphoreNew>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4a1a      	ldr	r2, [pc, #104]	; (8000818 <MX_FREERTOS_Init+0x80>)
 80007ae:	6013      	str	r3, [r2, #0]

  /* creation of CAN_Recieve_Complete */
  CAN_Recieve_CompleteHandle = osSemaphoreNew(1, 0, &CAN_Recieve_Complete_attributes);
 80007b0:	4a1a      	ldr	r2, [pc, #104]	; (800081c <MX_FREERTOS_Init+0x84>)
 80007b2:	2100      	movs	r1, #0
 80007b4:	2001      	movs	r0, #1
 80007b6:	f006 f954 	bl	8006a62 <osSemaphoreNew>
 80007ba:	4603      	mov	r3, r0
 80007bc:	4a18      	ldr	r2, [pc, #96]	; (8000820 <MX_FREERTOS_Init+0x88>)
 80007be:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CAN_Transmission_Queue */
  CAN_Transmission_QueueHandle = osMessageQueueNew (1, 8, &CAN_Transmission_Queue_attributes);
 80007c0:	4a18      	ldr	r2, [pc, #96]	; (8000824 <MX_FREERTOS_Init+0x8c>)
 80007c2:	2108      	movs	r1, #8
 80007c4:	2001      	movs	r0, #1
 80007c6:	f006 fa6b 	bl	8006ca0 <osMessageQueueNew>
 80007ca:	4603      	mov	r3, r0
 80007cc:	4a16      	ldr	r2, [pc, #88]	; (8000828 <MX_FREERTOS_Init+0x90>)
 80007ce:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MainThread */
  MainThreadHandle = osThreadNew(Start_MainT, NULL, &MainThread_attributes);
 80007d0:	4a16      	ldr	r2, [pc, #88]	; (800082c <MX_FREERTOS_Init+0x94>)
 80007d2:	2100      	movs	r1, #0
 80007d4:	4816      	ldr	r0, [pc, #88]	; (8000830 <MX_FREERTOS_Init+0x98>)
 80007d6:	f006 f897 	bl	8006908 <osThreadNew>
 80007da:	4603      	mov	r3, r0
 80007dc:	4a15      	ldr	r2, [pc, #84]	; (8000834 <MX_FREERTOS_Init+0x9c>)
 80007de:	6013      	str	r3, [r2, #0]

  /* creation of CAN_TX_Thread */
  CAN_TX_ThreadHandle = osThreadNew(StartCAN_TX_Thread, NULL, &CAN_TX_Thread_attributes);
 80007e0:	4a15      	ldr	r2, [pc, #84]	; (8000838 <MX_FREERTOS_Init+0xa0>)
 80007e2:	2100      	movs	r1, #0
 80007e4:	4815      	ldr	r0, [pc, #84]	; (800083c <MX_FREERTOS_Init+0xa4>)
 80007e6:	f006 f88f 	bl	8006908 <osThreadNew>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4a14      	ldr	r2, [pc, #80]	; (8000840 <MX_FREERTOS_Init+0xa8>)
 80007ee:	6013      	str	r3, [r2, #0]

  /* creation of CAN_RX_Thread */
  CAN_RX_ThreadHandle = osThreadNew(StartCAN_RX_Thread, NULL, &CAN_RX_Thread_attributes);
 80007f0:	4a14      	ldr	r2, [pc, #80]	; (8000844 <MX_FREERTOS_Init+0xac>)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4814      	ldr	r0, [pc, #80]	; (8000848 <MX_FREERTOS_Init+0xb0>)
 80007f6:	f006 f887 	bl	8006908 <osThreadNew>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4a13      	ldr	r2, [pc, #76]	; (800084c <MX_FREERTOS_Init+0xb4>)
 80007fe:	6013      	str	r3, [r2, #0]

  /* creation of RF_RXTX */
  RF_RXTXHandle = osThreadNew(StartRF_RXTX, NULL, &RF_RXTX_attributes);
 8000800:	4a13      	ldr	r2, [pc, #76]	; (8000850 <MX_FREERTOS_Init+0xb8>)
 8000802:	2100      	movs	r1, #0
 8000804:	4813      	ldr	r0, [pc, #76]	; (8000854 <MX_FREERTOS_Init+0xbc>)
 8000806:	f006 f87f 	bl	8006908 <osThreadNew>
 800080a:	4603      	mov	r3, r0
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_FREERTOS_Init+0xc0>)
 800080e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	0800b414 	.word	0x0800b414
 8000818:	20000110 	.word	0x20000110
 800081c:	0800b424 	.word	0x0800b424
 8000820:	20000114 	.word	0x20000114
 8000824:	0800b3fc 	.word	0x0800b3fc
 8000828:	2000010c 	.word	0x2000010c
 800082c:	0800b36c 	.word	0x0800b36c
 8000830:	0800085d 	.word	0x0800085d
 8000834:	200000fc 	.word	0x200000fc
 8000838:	0800b390 	.word	0x0800b390
 800083c:	0800089d 	.word	0x0800089d
 8000840:	20000100 	.word	0x20000100
 8000844:	0800b3b4 	.word	0x0800b3b4
 8000848:	08000935 	.word	0x08000935
 800084c:	20000104 	.word	0x20000104
 8000850:	0800b3d8 	.word	0x0800b3d8
 8000854:	08000995 	.word	0x08000995
 8000858:	20000108 	.word	0x20000108

0800085c <Start_MainT>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_MainT */
void Start_MainT(void *argument)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_MainT */

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000864:	2108      	movs	r1, #8
 8000866:	480b      	ldr	r0, [pc, #44]	; (8000894 <Start_MainT+0x38>)
 8000868:	f004 fa60 	bl	8004d2c <HAL_TIM_PWM_Start>

	float count = 0.12f;
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <Start_MainT+0x3c>)
 800086e:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for (;;) {
		//printf("Test %f \r\n", count++);

		osDelay(500);
 8000870:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000874:	f006 f8da 	bl	8006a2c <osDelay>
		htim1.Instance->CCR3 = 5;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <Start_MainT+0x38>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2205      	movs	r2, #5
 800087e:	63da      	str	r2, [r3, #60]	; 0x3c
		osDelay(500);
 8000880:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000884:	f006 f8d2 	bl	8006a2c <osDelay>
		htim1.Instance->CCR3 = 0;
 8000888:	4b02      	ldr	r3, [pc, #8]	; (8000894 <Start_MainT+0x38>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2200      	movs	r2, #0
 800088e:	63da      	str	r2, [r3, #60]	; 0x3c
		osDelay(500);
 8000890:	e7ee      	b.n	8000870 <Start_MainT+0x14>
 8000892:	bf00      	nop
 8000894:	200001cc 	.word	0x200001cc
 8000898:	3df5c28f 	.word	0x3df5c28f

0800089c <StartCAN_TX_Thread>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCAN_TX_Thread */
void StartCAN_TX_Thread(void *argument)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCAN_TX_Thread */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80008a4:	2104      	movs	r1, #4
 80008a6:	481f      	ldr	r0, [pc, #124]	; (8000924 <StartCAN_TX_Thread+0x88>)
 80008a8:	f004 fa40 	bl	8004d2c <HAL_TIM_PWM_Start>
	/* Infinite loop */
	TxData[0] = 0xA;
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <StartCAN_TX_Thread+0x8c>)
 80008ae:	220a      	movs	r2, #10
 80008b0:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0xA;
 80008b2:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <StartCAN_TX_Thread+0x8c>)
 80008b4:	220a      	movs	r2, #10
 80008b6:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0xA;
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <StartCAN_TX_Thread+0x8c>)
 80008ba:	220a      	movs	r2, #10
 80008bc:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0xA;
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <StartCAN_TX_Thread+0x8c>)
 80008c0:	220a      	movs	r2, #10
 80008c2:	70da      	strb	r2, [r3, #3]
	TxData[4] = 0xA;
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <StartCAN_TX_Thread+0x8c>)
 80008c6:	220a      	movs	r2, #10
 80008c8:	711a      	strb	r2, [r3, #4]
	TxData[5] = 0xA;
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <StartCAN_TX_Thread+0x8c>)
 80008cc:	220a      	movs	r2, #10
 80008ce:	715a      	strb	r2, [r3, #5]
	TxData[6] = 0xA;
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <StartCAN_TX_Thread+0x8c>)
 80008d2:	220a      	movs	r2, #10
 80008d4:	719a      	strb	r2, [r3, #6]
	TxData[7] = 0xA;
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <StartCAN_TX_Thread+0x8c>)
 80008d8:	220a      	movs	r2, #10
 80008da:	71da      	strb	r2, [r3, #7]
	int a = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
	for (;;) {
		if (can_spam) {
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <StartCAN_TX_Thread+0x90>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d019      	beq.n	800091c <StartCAN_TX_Thread+0x80>
			//printf("Waiting to transmit CAN Packet.\r\n");
			osMessageQueueGet(CAN_Transmission_QueueHandle, &TxData, NULL,
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <StartCAN_TX_Thread+0x94>)
 80008ea:	6818      	ldr	r0, [r3, #0]
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	2200      	movs	r2, #0
 80008f2:	490d      	ldr	r1, [pc, #52]	; (8000928 <StartCAN_TX_Thread+0x8c>)
 80008f4:	f006 faa8 	bl	8006e48 <osMessageQueueGet>
			osWaitForever);
			//printf("Transmitting CAN Packet.\r\n");
			CAN_Transmit(TxData, sizeof(TxData));
 80008f8:	2108      	movs	r1, #8
 80008fa:	480b      	ldr	r0, [pc, #44]	; (8000928 <StartCAN_TX_Thread+0x8c>)
 80008fc:	f7ff ff20 	bl	8000740 <CAN_Transmit>
			htim1.Instance->CCR2 = 5;
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <StartCAN_TX_Thread+0x88>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2205      	movs	r2, #5
 8000906:	639a      	str	r2, [r3, #56]	; 0x38
//				printf("Transmission Complete of CAN Packet\r\n");
//			} else {
//				printf("Error Transmission");
//			}

			osDelay(100);
 8000908:	2064      	movs	r0, #100	; 0x64
 800090a:	f006 f88f 	bl	8006a2c <osDelay>
			htim1.Instance->CCR2 = 0;
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <StartCAN_TX_Thread+0x88>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2200      	movs	r2, #0
 8000914:	639a      	str	r2, [r3, #56]	; 0x38
			osDelay(100);
 8000916:	2064      	movs	r0, #100	; 0x64
 8000918:	f006 f888 	bl	8006a2c <osDelay>
		}
		osDelay(100);
 800091c:	2064      	movs	r0, #100	; 0x64
 800091e:	f006 f885 	bl	8006a2c <osDelay>
		if (can_spam) {
 8000922:	e7dd      	b.n	80008e0 <StartCAN_TX_Thread+0x44>
 8000924:	200001cc 	.word	0x200001cc
 8000928:	200000ec 	.word	0x200000ec
 800092c:	20000000 	.word	0x20000000
 8000930:	2000010c 	.word	0x2000010c

08000934 <StartCAN_RX_Thread>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCAN_RX_Thread */
void StartCAN_RX_Thread(void *argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCAN_RX_Thread */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800093c:	2104      	movs	r1, #4
 800093e:	4811      	ldr	r0, [pc, #68]	; (8000984 <StartCAN_RX_Thread+0x50>)
 8000940:	f004 f9f4 	bl	8004d2c <HAL_TIM_PWM_Start>
	uint32_t count = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		//printf("Waiting for CAN Packet.\r\n");
		osSemaphoreAcquire(CAN_Recieve_CompleteHandle, osWaitForever);
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <StartCAN_RX_Thread+0x54>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f04f 31ff 	mov.w	r1, #4294967295
 8000950:	4618      	mov	r0, r3
 8000952:	f006 f90f 	bl	8006b74 <osSemaphoreAcquire>
		htim2.Instance->CCR2 = 5;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <StartCAN_RX_Thread+0x50>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2205      	movs	r2, #5
 800095c:	639a      	str	r2, [r3, #56]	; 0x38
		osDelay(100);
 800095e:	2064      	movs	r0, #100	; 0x64
 8000960:	f006 f864 	bl	8006a2c <osDelay>
//		int i;
//		for (i = 0; i < 8; i++) {
//			printf("%d ", RxData[i]);
//		}
		//printf("Received CAN Packet. Sending to Queue\r\n");
		osMessageQueuePut(CAN_Transmission_QueueHandle, &RxData, NULL,
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <StartCAN_RX_Thread+0x58>)
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	f04f 33ff 	mov.w	r3, #4294967295
 800096c:	2200      	movs	r2, #0
 800096e:	4908      	ldr	r1, [pc, #32]	; (8000990 <StartCAN_RX_Thread+0x5c>)
 8000970:	f006 fa0a 	bl	8006d88 <osMessageQueuePut>
		osWaitForever);
		htim2.Instance->CCR2 = 0;
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <StartCAN_RX_Thread+0x50>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2200      	movs	r2, #0
 800097a:	639a      	str	r2, [r3, #56]	; 0x38
		osDelay(100);
 800097c:	2064      	movs	r0, #100	; 0x64
 800097e:	f006 f855 	bl	8006a2c <osDelay>
		osSemaphoreAcquire(CAN_Recieve_CompleteHandle, osWaitForever);
 8000982:	e7e1      	b.n	8000948 <StartCAN_RX_Thread+0x14>
 8000984:	20000218 	.word	0x20000218
 8000988:	20000114 	.word	0x20000114
 800098c:	2000010c 	.word	0x2000010c
 8000990:	200000f4 	.word	0x200000f4

08000994 <StartRF_RXTX>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRF_RXTX */
void StartRF_RXTX(void *argument)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b0b0      	sub	sp, #192	; 0xc0
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRF_RXTX */

	// Create the handle for the RFM95 module.
	rfm95_handle_t rfm95_handle = { .spi_handle = &hspi1, .nss_port =
 800099c:	f107 0308 	add.w	r3, r7, #8
 80009a0:	22b8      	movs	r2, #184	; 0xb8
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f009 fd86 	bl	800a4b6 <memset>
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <StartRF_RXTX+0x50>)
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	2310      	movs	r3, #16
 80009b6:	823b      	strh	r3, [r7, #16]
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <StartRF_RXTX+0x54>)
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	2320      	movs	r3, #32
 80009be:	833b      	strh	r3, [r7, #24]
			0x00 }, .network_session_key = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			.receive_mode = RFM95_RECEIVE_MODE_NONE };

	// Initialise RFM95 module.
	if (!rfm95_init(&rfm95_handle)) {
 80009c0:	f107 0308 	add.w	r3, r7, #8
 80009c4:	4618      	mov	r0, r3
 80009c6:	f009 fbed 	bl	800a1a4 <rfm95_init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	f083 0301 	eor.w	r3, r3, #1
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d002      	beq.n	80009dc <StartRF_RXTX+0x48>
		printf("RFM95 init failed\n\r");
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <StartRF_RXTX+0x58>)
 80009d8:	f009 fd18 	bl	800a40c <iprintf>
//		printf("RFM95 send success\n\r");
//	}

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80009dc:	2001      	movs	r0, #1
 80009de:	f006 f825 	bl	8006a2c <osDelay>
 80009e2:	e7fb      	b.n	80009dc <StartRF_RXTX+0x48>
 80009e4:	20000118 	.word	0x20000118
 80009e8:	48000400 	.word	0x48000400
 80009ec:	0800b240 	.word	0x0800b240

080009f0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  /* USER CODE END StartRF_RXTX */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80009fc:	2100      	movs	r1, #0
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f001 f9b3 	bl	8001d6a <HAL_CAN_GetRxMessage>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000a0a:	f000 f993 	bl	8000d34 <Error_Handler>
	}
	osSemaphoreRelease(CAN_Recieve_CompleteHandle);
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f006 f900 	bl	8006c18 <osSemaphoreRelease>
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200000f4 	.word	0x200000f4
 8000a24:	200000d0 	.word	0x200000d0
 8000a28:	20000114 	.word	0x20000114

08000a2c <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(CAN_Transmission_CompleteHandle);
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f006 f8ed 	bl	8006c18 <osSemaphoreRelease>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000110 	.word	0x20000110

08000a4c <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(CAN_Transmission_CompleteHandle);
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f006 f8dd 	bl	8006c18 <osSemaphoreRelease>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000110 	.word	0x20000110

08000a6c <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(CAN_Transmission_CompleteHandle);
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f006 f8cd 	bl	8006c18 <osSemaphoreRelease>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000110 	.word	0x20000110

08000a8c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	4b50      	ldr	r3, [pc, #320]	; (8000be4 <MX_GPIO_Init+0x158>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	4a4f      	ldr	r2, [pc, #316]	; (8000be4 <MX_GPIO_Init+0x158>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aae:	4b4d      	ldr	r3, [pc, #308]	; (8000be4 <MX_GPIO_Init+0x158>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b4a      	ldr	r3, [pc, #296]	; (8000be4 <MX_GPIO_Init+0x158>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4a49      	ldr	r2, [pc, #292]	; (8000be4 <MX_GPIO_Init+0x158>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4b47      	ldr	r3, [pc, #284]	; (8000be4 <MX_GPIO_Init+0x158>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	4b44      	ldr	r3, [pc, #272]	; (8000be4 <MX_GPIO_Init+0x158>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a43      	ldr	r2, [pc, #268]	; (8000be4 <MX_GPIO_Init+0x158>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b41      	ldr	r3, [pc, #260]	; (8000be4 <MX_GPIO_Init+0x158>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af0:	483d      	ldr	r0, [pc, #244]	; (8000be8 <MX_GPIO_Init+0x15c>)
 8000af2:	f001 fecf 	bl	8002894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_SPI_NSS_GPIO_Port, GPIO_SPI_NSS_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2110      	movs	r1, #16
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afe:	f001 fec9 	bl	8002894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_NRST_GPIO_Port, RF_NRST_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2120      	movs	r1, #32
 8000b06:	4839      	ldr	r0, [pc, #228]	; (8000bec <MX_GPIO_Init+0x160>)
 8000b08:	f001 fec4 	bl	8002894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO5_Pin;
 8000b0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO5_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	4619      	mov	r1, r3
 8000b22:	4831      	ldr	r0, [pc, #196]	; (8000be8 <MX_GPIO_Init+0x15c>)
 8000b24:	f001 fd4c 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8000b28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4829      	ldr	r0, [pc, #164]	; (8000be8 <MX_GPIO_Init+0x15c>)
 8000b42:	f001 fd3d 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_SPI_NSS_Pin;
 8000b46:	2310      	movs	r3, #16
 8000b48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b60:	f001 fd2e 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin|DIO2_Pin|DIO3_Pin;
 8000b64:	23c3      	movs	r3, #195	; 0xc3
 8000b66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b68:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	4619      	mov	r1, r3
 8000b78:	481c      	ldr	r0, [pc, #112]	; (8000bec <MX_GPIO_Init+0x160>)
 8000b7a:	f001 fd21 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9e:	f001 fd0f 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO4_Pin;
 8000ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ba6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO4_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbc:	f001 fd00 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_NRST_Pin;
 8000bc0:	2320      	movs	r3, #32
 8000bc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_NRST_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_GPIO_Init+0x160>)
 8000bd8:	f001 fcf2 	bl	80025c0 <HAL_GPIO_Init>

}
 8000bdc:	bf00      	nop
 8000bde:	3720      	adds	r7, #32
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40021000 	.word	0x40021000
 8000be8:	48000800 	.word	0x48000800
 8000bec:	48000400 	.word	0x48000400

08000bf0 <_write>:
int _write(int file, char *ptr, int len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	f04f 33ff 	mov.w	r3, #4294967295
 8000c04:	68b9      	ldr	r1, [r7, #8]
 8000c06:	4804      	ldr	r0, [pc, #16]	; (8000c18 <_write+0x28>)
 8000c08:	f005 f980 	bl	8005f0c <HAL_UART_Transmit>
	return len;
 8000c0c:	687b      	ldr	r3, [r7, #4]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000264 	.word	0x20000264

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c20:	f000 fd6d 	bl	80016fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c24:	f000 f81b 	bl	8000c5e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c28:	f7ff ff30 	bl	8000a8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c2c:	f000 fcb6 	bl	800159c <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000c30:	f7ff fc9c 	bl	800056c <MX_CAN1_Init>
  MX_TIM1_Init();
 8000c34:	f000 faf8 	bl	8001228 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c38:	f000 fbae 	bl	8001398 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000c3c:	f000 f8be 	bl	8000dbc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c40:	f005 fe18 	bl	8006874 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000c44:	f7ff fda8 	bl	8000798 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c48:	f005 fe38 	bl	80068bc <osKernelStart>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_Delay(500);
 8000c4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c50:	f000 fd8e 	bl	8001770 <HAL_Delay>
		//HAL_GPIO_WritePin(GPIOA, LED_D1_Pin, GPIO_PIN_SET);

		//CAN_Transmit(TxData, sizeof(TxData));
		//CAN_Write_Hello();
		HAL_Delay(500);
 8000c54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c58:	f000 fd8a 	bl	8001770 <HAL_Delay>
		HAL_Delay(500);
 8000c5c:	e7f6      	b.n	8000c4c <main+0x30>

08000c5e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b096      	sub	sp, #88	; 0x58
 8000c62:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2244      	movs	r2, #68	; 0x44
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f009 fc22 	bl	800a4b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c72:	463b      	mov	r3, r7
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c80:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c84:	f001 fe2c 	bl	80028e0 <HAL_PWREx_ControlVoltageScaling>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c8e:	f000 f851 	bl	8000d34 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c92:	2301      	movs	r3, #1
 8000c94:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c96:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c9a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000ca8:	2314      	movs	r3, #20
 8000caa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cac:	2307      	movs	r3, #7
 8000cae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 fe65 	bl	800298c <HAL_RCC_OscConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cc8:	f000 f834 	bl	8000d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ccc:	230f      	movs	r3, #15
 8000cce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	2104      	movs	r1, #4
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f002 fa65 	bl	80031b4 <HAL_RCC_ClockConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cf0:	f000 f820 	bl	8000d34 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_16);
 8000cf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f002 fb59 	bl	80033b4 <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000d02:	f002 fc81 	bl	8003608 <HAL_RCC_EnableCSS>
}
 8000d06:	bf00      	nop
 8000d08:	3758      	adds	r7, #88	; 0x58
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d101      	bne.n	8000d26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d22:	f000 fd05 	bl	8001730 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40001000 	.word	0x40001000

08000d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b087      	sub	sp, #28
 8000d38:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3a:	b672      	cpsid	i
}
 8000d3c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	e002      	b.n	8000d4a <Error_Handler+0x16>
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	3301      	adds	r3, #1
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	4a1a      	ldr	r2, [pc, #104]	; (8000db8 <Error_Handler+0x84>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	ddf8      	ble.n	8000d44 <Error_Handler+0x10>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D1_PWM_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	e002      	b.n	8000d5e <Error_Handler+0x2a>
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	4a15      	ldr	r2, [pc, #84]	; (8000db8 <Error_Handler+0x84>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	ddf8      	ble.n	8000d58 <Error_Handler+0x24>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D2_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	e002      	b.n	8000d72 <Error_Handler+0x3e>
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <Error_Handler+0x84>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	ddf8      	ble.n	8000d6c <Error_Handler+0x38>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D3_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	e002      	b.n	8000d86 <Error_Handler+0x52>
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	3301      	adds	r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <Error_Handler+0x84>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	ddf8      	ble.n	8000d80 <Error_Handler+0x4c>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D1_Pin, GPIO_PIN_RESET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	e002      	b.n	8000d9a <Error_Handler+0x66>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3301      	adds	r3, #1
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <Error_Handler+0x84>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	ddf8      	ble.n	8000d94 <Error_Handler+0x60>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D2_Pin, GPIO_PIN_RESET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	e002      	b.n	8000dae <Error_Handler+0x7a>
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	3301      	adds	r3, #1
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	4a01      	ldr	r2, [pc, #4]	; (8000db8 <Error_Handler+0x84>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	ddf8      	ble.n	8000da8 <Error_Handler+0x74>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8000db6:	e7c2      	b.n	8000d3e <Error_Handler+0xa>
 8000db8:	0003d08f 	.word	0x0003d08f

08000dbc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <MX_SPI1_Init+0x74>)
 8000dc2:	4a1c      	ldr	r2, [pc, #112]	; (8000e34 <MX_SPI1_Init+0x78>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <MX_SPI1_Init+0x74>)
 8000dc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <MX_SPI1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <MX_SPI1_Init+0x74>)
 8000dd6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <MX_SPI1_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <MX_SPI1_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_SPI1_Init+0x74>)
 8000dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_SPI1_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_SPI1_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_SPI1_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_SPI1_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_SPI1_Init+0x74>)
 8000e0a:	2207      	movs	r2, #7
 8000e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_SPI1_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_SPI1_Init+0x74>)
 8000e16:	2208      	movs	r2, #8
 8000e18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_SPI1_Init+0x74>)
 8000e1c:	f002 ff68 	bl	8003cf0 <HAL_SPI_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e26:	f7ff ff85 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000118 	.word	0x20000118
 8000e34:	40013000 	.word	0x40013000

08000e38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a17      	ldr	r2, [pc, #92]	; (8000eb4 <HAL_SPI_MspInit+0x7c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d128      	bne.n	8000eac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e5a:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <HAL_SPI_MspInit+0x80>)
 8000e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e5e:	4a16      	ldr	r2, [pc, #88]	; (8000eb8 <HAL_SPI_MspInit+0x80>)
 8000e60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e64:	6613      	str	r3, [r2, #96]	; 0x60
 8000e66:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <HAL_SPI_MspInit+0x80>)
 8000e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_SPI_MspInit+0x80>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	4a10      	ldr	r2, [pc, #64]	; (8000eb8 <HAL_SPI_MspInit+0x80>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_SPI_MspInit+0x80>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e8a:	23e0      	movs	r3, #224	; 0xe0
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e9a:	2305      	movs	r3, #5
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea8:	f001 fb8a 	bl	80025c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000eac:	bf00      	nop
 8000eae:	3728      	adds	r7, #40	; 0x28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40013000 	.word	0x40013000
 8000eb8:	40021000 	.word	0x40021000

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec6:	4a10      	ldr	r2, [pc, #64]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_MspInit+0x4c>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	210f      	movs	r1, #15
 8000ef6:	f06f 0001 	mvn.w	r0, #1
 8000efa:	f001 fb37 	bl	800256c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	; 0x38
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f1a:	4b34      	ldr	r3, [pc, #208]	; (8000fec <HAL_InitTick+0xe0>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1e:	4a33      	ldr	r2, [pc, #204]	; (8000fec <HAL_InitTick+0xe0>)
 8000f20:	f043 0310 	orr.w	r3, r3, #16
 8000f24:	6593      	str	r3, [r2, #88]	; 0x58
 8000f26:	4b31      	ldr	r3, [pc, #196]	; (8000fec <HAL_InitTick+0xe0>)
 8000f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f32:	f107 0210 	add.w	r2, r7, #16
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f002 fb31 	bl	80035a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f42:	6a3b      	ldr	r3, [r7, #32]
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d103      	bne.n	8000f54 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f4c:	f002 fafe 	bl	800354c <HAL_RCC_GetPCLK1Freq>
 8000f50:	6378      	str	r0, [r7, #52]	; 0x34
 8000f52:	e004      	b.n	8000f5e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f54:	f002 fafa 	bl	800354c <HAL_RCC_GetPCLK1Freq>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f60:	4a23      	ldr	r2, [pc, #140]	; (8000ff0 <HAL_InitTick+0xe4>)
 8000f62:	fba2 2303 	umull	r2, r3, r2, r3
 8000f66:	0c9b      	lsrs	r3, r3, #18
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f6c:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <HAL_InitTick+0xe8>)
 8000f6e:	4a22      	ldr	r2, [pc, #136]	; (8000ff8 <HAL_InitTick+0xec>)
 8000f70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <HAL_InitTick+0xe8>)
 8000f74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f78:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f7a:	4a1e      	ldr	r2, [pc, #120]	; (8000ff4 <HAL_InitTick+0xe8>)
 8000f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f80:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <HAL_InitTick+0xe8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f86:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <HAL_InitTick+0xe8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <HAL_InitTick+0xe8>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f92:	4818      	ldr	r0, [pc, #96]	; (8000ff4 <HAL_InitTick+0xe8>)
 8000f94:	f003 fdbc 	bl	8004b10 <HAL_TIM_Base_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d11b      	bne.n	8000fde <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000fa6:	4813      	ldr	r0, [pc, #76]	; (8000ff4 <HAL_InitTick+0xe8>)
 8000fa8:	f003 fe0a 	bl	8004bc0 <HAL_TIM_Base_Start_IT>
 8000fac:	4603      	mov	r3, r0
 8000fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000fb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d111      	bne.n	8000fde <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fba:	2036      	movs	r0, #54	; 0x36
 8000fbc:	f001 faf2 	bl	80025a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b0f      	cmp	r3, #15
 8000fc4:	d808      	bhi.n	8000fd8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	2036      	movs	r0, #54	; 0x36
 8000fcc:	f001 face 	bl	800256c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <HAL_InitTick+0xf0>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	e002      	b.n	8000fde <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3738      	adds	r7, #56	; 0x38
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	431bde83 	.word	0x431bde83
 8000ff4:	2000017c 	.word	0x2000017c
 8000ff8:	40001000 	.word	0x40001000
 8000ffc:	20000008 	.word	0x20000008

08001000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001004:	f002 fb10 	bl	8003628 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001008:	e7fe      	b.n	8001008 <NMI_Handler+0x8>
	...

0800100c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	e002      	b.n	800101e <HardFault_Handler+0x12>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3301      	adds	r3, #1
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HardFault_Handler+0x30>)
 8001022:	4293      	cmp	r3, r2
 8001024:	ddf8      	ble.n	8001018 <HardFault_Handler+0xc>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D1_Pin, GPIO_PIN_SET);
		//HAL_GPIO_WritePin(GPIOA, LED_D2_Pin, GPIO_PIN_RESET);
		//HAL_GPIO_WritePin(GPIOA, LED_D3_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001026:	2300      	movs	r3, #0
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	e002      	b.n	8001032 <HardFault_Handler+0x26>
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	4a01      	ldr	r2, [pc, #4]	; (800103c <HardFault_Handler+0x30>)
 8001036:	4293      	cmp	r3, r2
 8001038:	ddf8      	ble.n	800102c <HardFault_Handler+0x20>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 800103a:	e7ea      	b.n	8001012 <HardFault_Handler+0x6>
 800103c:	0003d08f 	.word	0x0003d08f

08001040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <MemManage_Handler+0x4>

08001046 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <BusFault_Handler+0x4>

0800104c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <UsageFault_Handler+0x4>

08001052 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <CAN1_TX_IRQHandler+0x10>)
 8001066:	f000 ffb8 	bl	8001fda <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200000a8 	.word	0x200000a8

08001074 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <CAN1_RX0_IRQHandler+0x10>)
 800107a:	f000 ffae 	bl	8001fda <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200000a8 	.word	0x200000a8

08001088 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <CAN1_RX1_IRQHandler+0x10>)
 800108e:	f000 ffa4 	bl	8001fda <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200000a8 	.word	0x200000a8

0800109c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <TIM6_DAC_IRQHandler+0x10>)
 80010a2:	f003 ff21 	bl	8004ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2000017c 	.word	0x2000017c

080010b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return 1;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_kill>:

int _kill(int pid, int sig)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010ca:	f009 fa43 	bl	800a554 <__errno>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2216      	movs	r2, #22
 80010d2:	601a      	str	r2, [r3, #0]
  return -1;
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <_exit>:

void _exit (int status)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ffe7 	bl	80010c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010f2:	e7fe      	b.n	80010f2 <_exit+0x12>

080010f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	e00a      	b.n	800111c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001106:	f3af 8000 	nop.w
 800110a:	4601      	mov	r1, r0
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	60ba      	str	r2, [r7, #8]
 8001112:	b2ca      	uxtb	r2, r1
 8001114:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	429a      	cmp	r2, r3
 8001122:	dbf0      	blt.n	8001106 <_read+0x12>
  }

  return len;
 8001124:	687b      	ldr	r3, [r7, #4]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <_close>:
  }
  return len;
}

int _close(int file)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001156:	605a      	str	r2, [r3, #4]
  return 0;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <_isatty>:

int _isatty(int file)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800116e:	2301      	movs	r3, #1
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a0:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <_sbrk+0x5c>)
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <_sbrk+0x60>)
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <_sbrk+0x64>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	; (8001200 <_sbrk+0x68>)
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d207      	bcs.n	80011d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c8:	f009 f9c4 	bl	800a554 <__errno>
 80011cc:	4603      	mov	r3, r0
 80011ce:	220c      	movs	r2, #12
 80011d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	e009      	b.n	80011ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <_sbrk+0x64>)
 80011e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20010000 	.word	0x20010000
 80011f8:	00000400 	.word	0x00000400
 80011fc:	200001c8 	.word	0x200001c8
 8001200:	20001d50 	.word	0x20001d50

08001204 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <SystemInit+0x20>)
 800120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <SystemInit+0x20>)
 8001210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b09a      	sub	sp, #104	; 0x68
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001248:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
 8001258:	615a      	str	r2, [r3, #20]
 800125a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	222c      	movs	r2, #44	; 0x2c
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f009 f927 	bl	800a4b6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001268:	4b49      	ldr	r3, [pc, #292]	; (8001390 <MX_TIM1_Init+0x168>)
 800126a:	4a4a      	ldr	r2, [pc, #296]	; (8001394 <MX_TIM1_Init+0x16c>)
 800126c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 800126e:	4b48      	ldr	r3, [pc, #288]	; (8001390 <MX_TIM1_Init+0x168>)
 8001270:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001274:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001276:	4b46      	ldr	r3, [pc, #280]	; (8001390 <MX_TIM1_Init+0x168>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800127c:	4b44      	ldr	r3, [pc, #272]	; (8001390 <MX_TIM1_Init+0x168>)
 800127e:	2263      	movs	r2, #99	; 0x63
 8001280:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001282:	4b43      	ldr	r3, [pc, #268]	; (8001390 <MX_TIM1_Init+0x168>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001288:	4b41      	ldr	r3, [pc, #260]	; (8001390 <MX_TIM1_Init+0x168>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800128e:	4b40      	ldr	r3, [pc, #256]	; (8001390 <MX_TIM1_Init+0x168>)
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001294:	483e      	ldr	r0, [pc, #248]	; (8001390 <MX_TIM1_Init+0x168>)
 8001296:	f003 fc3b 	bl	8004b10 <HAL_TIM_Base_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012a0:	f7ff fd48 	bl	8000d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012ae:	4619      	mov	r1, r3
 80012b0:	4837      	ldr	r0, [pc, #220]	; (8001390 <MX_TIM1_Init+0x168>)
 80012b2:	f004 f84d 	bl	8005350 <HAL_TIM_ConfigClockSource>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80012bc:	f7ff fd3a 	bl	8000d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012c0:	4833      	ldr	r0, [pc, #204]	; (8001390 <MX_TIM1_Init+0x168>)
 80012c2:	f003 fcd1 	bl	8004c68 <HAL_TIM_PWM_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012cc:	f7ff fd32 	bl	8000d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012e0:	4619      	mov	r1, r3
 80012e2:	482b      	ldr	r0, [pc, #172]	; (8001390 <MX_TIM1_Init+0x168>)
 80012e4:	f004 fcc8 	bl	8005c78 <HAL_TIMEx_MasterConfigSynchronization>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80012ee:	f7ff fd21 	bl	8000d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f2:	2360      	movs	r3, #96	; 0x60
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fa:	2300      	movs	r3, #0
 80012fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012fe:	2300      	movs	r3, #0
 8001300:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800130e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001312:	2204      	movs	r2, #4
 8001314:	4619      	mov	r1, r3
 8001316:	481e      	ldr	r0, [pc, #120]	; (8001390 <MX_TIM1_Init+0x168>)
 8001318:	f003 ff06 	bl	8005128 <HAL_TIM_PWM_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001322:	f7ff fd07 	bl	8000d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001326:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800132a:	2208      	movs	r2, #8
 800132c:	4619      	mov	r1, r3
 800132e:	4818      	ldr	r0, [pc, #96]	; (8001390 <MX_TIM1_Init+0x168>)
 8001330:	f003 fefa 	bl	8005128 <HAL_TIM_PWM_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800133a:	f7ff fcfb 	bl	8000d34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001356:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001360:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4619      	mov	r1, r3
 8001372:	4807      	ldr	r0, [pc, #28]	; (8001390 <MX_TIM1_Init+0x168>)
 8001374:	f004 fce6 	bl	8005d44 <HAL_TIMEx_ConfigBreakDeadTime>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800137e:	f7ff fcd9 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001382:	4803      	ldr	r0, [pc, #12]	; (8001390 <MX_TIM1_Init+0x168>)
 8001384:	f000 f8b0 	bl	80014e8 <HAL_TIM_MspPostInit>

}
 8001388:	bf00      	nop
 800138a:	3768      	adds	r7, #104	; 0x68
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200001cc 	.word	0x200001cc
 8001394:	40012c00 	.word	0x40012c00

08001398 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08e      	sub	sp, #56	; 0x38
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b8:	463b      	mov	r3, r7
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]
 80013c6:	615a      	str	r2, [r3, #20]
 80013c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ca:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <MX_TIM2_Init+0xe8>)
 80013cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 80013d2:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <MX_TIM2_Init+0xe8>)
 80013d4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80013d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <MX_TIM2_Init+0xe8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <MX_TIM2_Init+0xe8>)
 80013e2:	2263      	movs	r2, #99	; 0x63
 80013e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <MX_TIM2_Init+0xe8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <MX_TIM2_Init+0xe8>)
 80013ee:	2280      	movs	r2, #128	; 0x80
 80013f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013f2:	4823      	ldr	r0, [pc, #140]	; (8001480 <MX_TIM2_Init+0xe8>)
 80013f4:	f003 fb8c 	bl	8004b10 <HAL_TIM_Base_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80013fe:	f7ff fc99 	bl	8000d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140c:	4619      	mov	r1, r3
 800140e:	481c      	ldr	r0, [pc, #112]	; (8001480 <MX_TIM2_Init+0xe8>)
 8001410:	f003 ff9e 	bl	8005350 <HAL_TIM_ConfigClockSource>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800141a:	f7ff fc8b 	bl	8000d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800141e:	4818      	ldr	r0, [pc, #96]	; (8001480 <MX_TIM2_Init+0xe8>)
 8001420:	f003 fc22 	bl	8004c68 <HAL_TIM_PWM_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800142a:	f7ff fc83 	bl	8000d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	4619      	mov	r1, r3
 800143c:	4810      	ldr	r0, [pc, #64]	; (8001480 <MX_TIM2_Init+0xe8>)
 800143e:	f004 fc1b 	bl	8005c78 <HAL_TIMEx_MasterConfigSynchronization>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001448:	f7ff fc74 	bl	8000d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800144c:	2360      	movs	r3, #96	; 0x60
 800144e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	2204      	movs	r2, #4
 8001460:	4619      	mov	r1, r3
 8001462:	4807      	ldr	r0, [pc, #28]	; (8001480 <MX_TIM2_Init+0xe8>)
 8001464:	f003 fe60 	bl	8005128 <HAL_TIM_PWM_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800146e:	f7ff fc61 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001472:	4803      	ldr	r0, [pc, #12]	; (8001480 <MX_TIM2_Init+0xe8>)
 8001474:	f000 f838 	bl	80014e8 <HAL_TIM_MspPostInit>

}
 8001478:	bf00      	nop
 800147a:	3738      	adds	r7, #56	; 0x38
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000218 	.word	0x20000218

08001484 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a13      	ldr	r2, [pc, #76]	; (80014e0 <HAL_TIM_Base_MspInit+0x5c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d10c      	bne.n	80014b0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <HAL_TIM_Base_MspInit+0x60>)
 8001498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149a:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <HAL_TIM_Base_MspInit+0x60>)
 800149c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014a0:	6613      	str	r3, [r2, #96]	; 0x60
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <HAL_TIM_Base_MspInit+0x60>)
 80014a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014ae:	e010      	b.n	80014d2 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b8:	d10b      	bne.n	80014d2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_TIM_Base_MspInit+0x60>)
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <HAL_TIM_Base_MspInit+0x60>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6593      	str	r3, [r2, #88]	; 0x58
 80014c6:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <HAL_TIM_Base_MspInit+0x60>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40012c00 	.word	0x40012c00
 80014e4:	40021000 	.word	0x40021000

080014e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a23      	ldr	r2, [pc, #140]	; (8001594 <HAL_TIM_MspPostInit+0xac>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d11e      	bne.n	8001548 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	4b23      	ldr	r3, [pc, #140]	; (8001598 <HAL_TIM_MspPostInit+0xb0>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	4a22      	ldr	r2, [pc, #136]	; (8001598 <HAL_TIM_MspPostInit+0xb0>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <HAL_TIM_MspPostInit+0xb0>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LED_D2_PWM_Pin|LED_D1_PWM_Pin;
 8001522:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001534:	2301      	movs	r3, #1
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001542:	f001 f83d 	bl	80025c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001546:	e021      	b.n	800158c <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001550:	d11c      	bne.n	800158c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <HAL_TIM_MspPostInit+0xb0>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	4a10      	ldr	r2, [pc, #64]	; (8001598 <HAL_TIM_MspPostInit+0xb0>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <HAL_TIM_MspPostInit+0xb0>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_D3_PWM_Pin;
 800156a:	2302      	movs	r3, #2
 800156c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800157a:	2301      	movs	r3, #1
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001588:	f001 f81a 	bl	80025c0 <HAL_GPIO_Init>
}
 800158c:	bf00      	nop
 800158e:	3728      	adds	r7, #40	; 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40012c00 	.word	0x40012c00
 8001598:	40021000 	.word	0x40021000

0800159c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <MX_USART2_UART_Init+0x58>)
 80015a2:	4a15      	ldr	r2, [pc, #84]	; (80015f8 <MX_USART2_UART_Init+0x5c>)
 80015a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <MX_USART2_UART_Init+0x58>)
 80015a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_USART2_UART_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_USART2_UART_Init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_USART2_UART_Init+0x58>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_USART2_UART_Init+0x58>)
 80015c2:	220c      	movs	r2, #12
 80015c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <MX_USART2_UART_Init+0x58>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_USART2_UART_Init+0x58>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <MX_USART2_UART_Init+0x58>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_USART2_UART_Init+0x58>)
 80015da:	2200      	movs	r2, #0
 80015dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_USART2_UART_Init+0x58>)
 80015e0:	f004 fc46 	bl	8005e70 <HAL_UART_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015ea:	f7ff fba3 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000264 	.word	0x20000264
 80015f8:	40004400 	.word	0x40004400

080015fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b09e      	sub	sp, #120	; 0x78
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	2254      	movs	r2, #84	; 0x54
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f008 ff4a 	bl	800a4b6 <memset>
  if(uartHandle->Instance==USART2)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a1f      	ldr	r2, [pc, #124]	; (80016a4 <HAL_UART_MspInit+0xa8>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d136      	bne.n	800169a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800162c:	2302      	movs	r3, #2
 800162e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001630:	2300      	movs	r3, #0
 8001632:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	4618      	mov	r0, r3
 800163a:	f002 f871 	bl	8003720 <HAL_RCCEx_PeriphCLKConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001644:	f7ff fb76 	bl	8000d34 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HAL_UART_MspInit+0xac>)
 800164a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164c:	4a16      	ldr	r2, [pc, #88]	; (80016a8 <HAL_UART_MspInit+0xac>)
 800164e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001652:	6593      	str	r3, [r2, #88]	; 0x58
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_UART_MspInit+0xac>)
 8001656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_UART_MspInit+0xac>)
 8001662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001664:	4a10      	ldr	r2, [pc, #64]	; (80016a8 <HAL_UART_MspInit+0xac>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_UART_MspInit+0xac>)
 800166e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001678:	230c      	movs	r3, #12
 800167a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001688:	2307      	movs	r3, #7
 800168a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001690:	4619      	mov	r1, r3
 8001692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001696:	f000 ff93 	bl	80025c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800169a:	bf00      	nop
 800169c:	3778      	adds	r7, #120	; 0x78
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40004400 	.word	0x40004400
 80016a8:	40021000 	.word	0x40021000

080016ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016b0:	f7ff fda8 	bl	8001204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b4:	480c      	ldr	r0, [pc, #48]	; (80016e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80016b6:	490d      	ldr	r1, [pc, #52]	; (80016ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <LoopForever+0xe>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016cc:	4c0a      	ldr	r4, [pc, #40]	; (80016f8 <LoopForever+0x16>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016da:	f008 ff41 	bl	800a560 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016de:	f7ff fa9d 	bl	8000c1c <main>

080016e2 <LoopForever>:

LoopForever:
    b LoopForever
 80016e2:	e7fe      	b.n	80016e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016f0:	0800b510 	.word	0x0800b510
  ldr r2, =_sbss
 80016f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016f8:	20001d50 	.word	0x20001d50

080016fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC1_IRQHandler>

080016fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 ff24 	bl	8002556 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800170e:	200f      	movs	r0, #15
 8001710:	f7ff fbfc 	bl	8000f0c <HAL_InitTick>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	71fb      	strb	r3, [r7, #7]
 800171e:	e001      	b.n	8001724 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001720:	f7ff fbcc 	bl	8000ebc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001724:	79fb      	ldrb	r3, [r7, #7]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_IncTick+0x20>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x24>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <HAL_IncTick+0x24>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	2000000c 	.word	0x2000000c
 8001754:	200002e8 	.word	0x200002e8

08001758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_GetTick+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	200002e8 	.word	0x200002e8

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff ffee 	bl	8001758 <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d005      	beq.n	8001796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_Delay+0x44>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001796:	bf00      	nop
 8001798:	f7ff ffde 	bl	8001758 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8f7      	bhi.n	8001798 <HAL_Delay+0x28>
  {
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000000c 	.word	0x2000000c

080017b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0ed      	b.n	80019a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d102      	bne.n	80017dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7fe ff00 	bl	80005dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0201 	orr.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017ec:	f7ff ffb4 	bl	8001758 <HAL_GetTick>
 80017f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017f2:	e012      	b.n	800181a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017f4:	f7ff ffb0 	bl	8001758 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b0a      	cmp	r3, #10
 8001800:	d90b      	bls.n	800181a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2205      	movs	r2, #5
 8001812:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e0c5      	b.n	80019a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0e5      	beq.n	80017f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0202 	bic.w	r2, r2, #2
 8001836:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001838:	f7ff ff8e 	bl	8001758 <HAL_GetTick>
 800183c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800183e:	e012      	b.n	8001866 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001840:	f7ff ff8a 	bl	8001758 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b0a      	cmp	r3, #10
 800184c:	d90b      	bls.n	8001866 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2205      	movs	r2, #5
 800185e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e09f      	b.n	80019a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1e5      	bne.n	8001840 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	7e1b      	ldrb	r3, [r3, #24]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d108      	bne.n	800188e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	e007      	b.n	800189e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800189c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7e5b      	ldrb	r3, [r3, #25]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d108      	bne.n	80018b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	e007      	b.n	80018c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7e9b      	ldrb	r3, [r3, #26]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d108      	bne.n	80018e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0220 	orr.w	r2, r2, #32
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	e007      	b.n	80018f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0220 	bic.w	r2, r2, #32
 80018f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7edb      	ldrb	r3, [r3, #27]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d108      	bne.n	800190c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0210 	bic.w	r2, r2, #16
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	e007      	b.n	800191c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 0210 	orr.w	r2, r2, #16
 800191a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7f1b      	ldrb	r3, [r3, #28]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d108      	bne.n	8001936 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0208 	orr.w	r2, r2, #8
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	e007      	b.n	8001946 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 0208 	bic.w	r2, r2, #8
 8001944:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	7f5b      	ldrb	r3, [r3, #29]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d108      	bne.n	8001960 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0204 	orr.w	r2, r2, #4
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	e007      	b.n	8001970 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0204 	bic.w	r2, r2, #4
 800196e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	ea42 0103 	orr.w	r1, r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	1e5a      	subs	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b087      	sub	sp, #28
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80019c6:	7cfb      	ldrb	r3, [r7, #19]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d003      	beq.n	80019d4 <HAL_CAN_ConfigFilter+0x26>
 80019cc:	7cfb      	ldrb	r3, [r7, #19]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	f040 80aa 	bne.w	8001b28 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019da:	f043 0201 	orr.w	r2, r3, #1
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	2201      	movs	r2, #1
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d123      	bne.n	8001a56 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	401a      	ands	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a30:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3248      	adds	r2, #72	; 0x48
 8001a36:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a4a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a4c:	6979      	ldr	r1, [r7, #20]
 8001a4e:	3348      	adds	r3, #72	; 0x48
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	440b      	add	r3, r1
 8001a54:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d122      	bne.n	8001aa4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a7e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	3248      	adds	r2, #72	; 0x48
 8001a84:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a98:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a9a:	6979      	ldr	r1, [r7, #20]
 8001a9c:	3348      	adds	r3, #72	; 0x48
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	440b      	add	r3, r1
 8001aa2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d109      	bne.n	8001ac0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001abe:	e007      	b.n	8001ad0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001aea:	e007      	b.n	8001afc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	431a      	orrs	r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d107      	bne.n	8001b14 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b1a:	f023 0201 	bic.w	r2, r3, #1
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	e006      	b.n	8001b36 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
  }
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	371c      	adds	r7, #28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d12e      	bne.n	8001bb4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0201 	bic.w	r2, r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b6e:	f7ff fdf3 	bl	8001758 <HAL_GetTick>
 8001b72:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b74:	e012      	b.n	8001b9c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b76:	f7ff fdef 	bl	8001758 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b0a      	cmp	r3, #10
 8001b82:	d90b      	bls.n	8001b9c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2205      	movs	r2, #5
 8001b94:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e012      	b.n	8001bc2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1e5      	bne.n	8001b76 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e006      	b.n	8001bc2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
  }
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b089      	sub	sp, #36	; 0x24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bde:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001be8:	7ffb      	ldrb	r3, [r7, #31]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d003      	beq.n	8001bf6 <HAL_CAN_AddTxMessage+0x2c>
 8001bee:	7ffb      	ldrb	r3, [r7, #31]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	f040 80ad 	bne.w	8001d50 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10a      	bne.n	8001c16 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d105      	bne.n	8001c16 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 8095 	beq.w	8001d40 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	0e1b      	lsrs	r3, r3, #24
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c20:	2201      	movs	r2, #1
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	409a      	lsls	r2, r3
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10d      	bne.n	8001c4e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c3c:	68f9      	ldr	r1, [r7, #12]
 8001c3e:	6809      	ldr	r1, [r1, #0]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	3318      	adds	r3, #24
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	440b      	add	r3, r1
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	e00f      	b.n	8001c6e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c58:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c5e:	68f9      	ldr	r1, [r7, #12]
 8001c60:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001c62:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	3318      	adds	r3, #24
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	440b      	add	r3, r1
 8001c6c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6819      	ldr	r1, [r3, #0]
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	691a      	ldr	r2, [r3, #16]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	3318      	adds	r3, #24
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	440b      	add	r3, r1
 8001c7e:	3304      	adds	r3, #4
 8001c80:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	7d1b      	ldrb	r3, [r3, #20]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d111      	bne.n	8001cae <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3318      	adds	r3, #24
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	4413      	add	r3, r2
 8001c96:	3304      	adds	r3, #4
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	6811      	ldr	r1, [r2, #0]
 8001c9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3318      	adds	r3, #24
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	440b      	add	r3, r1
 8001caa:	3304      	adds	r3, #4
 8001cac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3307      	adds	r3, #7
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	061a      	lsls	r2, r3, #24
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3306      	adds	r3, #6
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	041b      	lsls	r3, r3, #16
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3305      	adds	r3, #5
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	3204      	adds	r2, #4
 8001cce:	7812      	ldrb	r2, [r2, #0]
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	6811      	ldr	r1, [r2, #0]
 8001cd6:	ea43 0200 	orr.w	r2, r3, r0
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	440b      	add	r3, r1
 8001ce0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001ce4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3303      	adds	r3, #3
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	061a      	lsls	r2, r3, #24
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	041b      	lsls	r3, r3, #16
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	021b      	lsls	r3, r3, #8
 8001d00:	4313      	orrs	r3, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	7812      	ldrb	r2, [r2, #0]
 8001d06:	4610      	mov	r0, r2
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	6811      	ldr	r1, [r2, #0]
 8001d0c:	ea43 0200 	orr.w	r2, r3, r0
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	440b      	add	r3, r1
 8001d16:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001d1a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3318      	adds	r3, #24
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	4413      	add	r3, r2
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	6811      	ldr	r1, [r2, #0]
 8001d2e:	f043 0201 	orr.w	r2, r3, #1
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3318      	adds	r3, #24
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	440b      	add	r3, r1
 8001d3a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e00e      	b.n	8001d5e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e006      	b.n	8001d5e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
  }
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3724      	adds	r7, #36	; 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b087      	sub	sp, #28
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d7e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d80:	7dfb      	ldrb	r3, [r7, #23]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d003      	beq.n	8001d8e <HAL_CAN_GetRxMessage+0x24>
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	f040 80f3 	bne.w	8001f74 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10e      	bne.n	8001db2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d116      	bne.n	8001dd0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e0e7      	b.n	8001f82 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d107      	bne.n	8001dd0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0d8      	b.n	8001f82 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	331b      	adds	r3, #27
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	4413      	add	r3, r2
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0204 	and.w	r2, r3, #4
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10c      	bne.n	8001e08 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	331b      	adds	r3, #27
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	4413      	add	r3, r2
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	0d5b      	lsrs	r3, r3, #21
 8001dfe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	e00b      	b.n	8001e20 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	331b      	adds	r3, #27
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	4413      	add	r3, r2
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	08db      	lsrs	r3, r3, #3
 8001e18:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	331b      	adds	r3, #27
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	4413      	add	r3, r2
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0202 	and.w	r2, r3, #2
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	331b      	adds	r3, #27
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	4413      	add	r3, r2
 8001e42:	3304      	adds	r3, #4
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 020f 	and.w	r2, r3, #15
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	331b      	adds	r3, #27
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	4413      	add	r3, r2
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	331b      	adds	r3, #27
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	4413      	add	r3, r2
 8001e72:	3304      	adds	r3, #4
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	0c1b      	lsrs	r3, r3, #16
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	0a1a      	lsrs	r2, r3, #8
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	0c1a      	lsrs	r2, r3, #16
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	0e1a      	lsrs	r2, r3, #24
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	3303      	adds	r3, #3
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	4413      	add	r3, r2
 8001eec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	0a1a      	lsrs	r2, r3, #8
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	3305      	adds	r3, #5
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0c1a      	lsrs	r2, r3, #16
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	3306      	adds	r3, #6
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	0e1a      	lsrs	r2, r3, #24
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	3307      	adds	r3, #7
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d108      	bne.n	8001f60 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0220 	orr.w	r2, r2, #32
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	e007      	b.n	8001f70 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0220 	orr.w	r2, r2, #32
 8001f6e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	e006      	b.n	8001f82 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
  }
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	371c      	adds	r7, #28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b085      	sub	sp, #20
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f9e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d002      	beq.n	8001fac <HAL_CAN_ActivateNotification+0x1e>
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d109      	bne.n	8001fc0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6959      	ldr	r1, [r3, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	e006      	b.n	8001fce <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
  }
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b08a      	sub	sp, #40	; 0x28
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d07c      	beq.n	800211a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d023      	beq.n	8002072 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2201      	movs	r2, #1
 8002030:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7fe fcf5 	bl	8000a2c <HAL_CAN_TxMailbox0CompleteCallback>
 8002042:	e016      	b.n	8002072 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b00      	cmp	r3, #0
 800204c:	d004      	beq.n	8002058 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
 8002056:	e00c      	b.n	8002072 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d004      	beq.n	800206c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
 800206a:	e002      	b.n	8002072 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f96b 	bl	8002348 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d024      	beq.n	80020c6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002084:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7fe fcdb 	bl	8000a4c <HAL_CAN_TxMailbox1CompleteCallback>
 8002096:	e016      	b.n	80020c6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d004      	beq.n	80020ac <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
 80020aa:	e00c      	b.n	80020c6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d004      	beq.n	80020c0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
 80020be:	e002      	b.n	80020c6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f94b 	bl	800235c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d024      	beq.n	800211a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7fe fcc1 	bl	8000a6c <HAL_CAN_TxMailbox2CompleteCallback>
 80020ea:	e016      	b.n	800211a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d004      	beq.n	8002100 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
 80020fe:	e00c      	b.n	800211a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d004      	beq.n	8002114 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
 8002112:	e002      	b.n	800211a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f92b 	bl	8002370 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00c      	beq.n	800213e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	2b00      	cmp	r3, #0
 800212c:	d007      	beq.n	800213e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002134:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2210      	movs	r2, #16
 800213c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00b      	beq.n	8002160 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2208      	movs	r2, #8
 8002158:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f912 	bl	8002384 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d009      	beq.n	800217e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7fe fc39 	bl	80009f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00c      	beq.n	80021a2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	2b00      	cmp	r3, #0
 8002190:	d007      	beq.n	80021a2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002198:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2210      	movs	r2, #16
 80021a0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00b      	beq.n	80021c4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d006      	beq.n	80021c4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2208      	movs	r2, #8
 80021bc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f8f4 	bl	80023ac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f8db 	bl	8002398 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00b      	beq.n	8002204 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d006      	beq.n	8002204 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2210      	movs	r2, #16
 80021fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f8de 	bl	80023c0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00b      	beq.n	8002226 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d006      	beq.n	8002226 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2208      	movs	r2, #8
 800221e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f8d7 	bl	80023d4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d07b      	beq.n	8002328 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	2b00      	cmp	r3, #0
 8002238:	d072      	beq.n	8002320 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	f043 0302 	orr.w	r3, r3, #2
 8002270:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	f043 0304 	orr.w	r3, r3, #4
 800228c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002294:	2b00      	cmp	r3, #0
 8002296:	d043      	beq.n	8002320 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d03e      	beq.n	8002320 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022a8:	2b60      	cmp	r3, #96	; 0x60
 80022aa:	d02b      	beq.n	8002304 <HAL_CAN_IRQHandler+0x32a>
 80022ac:	2b60      	cmp	r3, #96	; 0x60
 80022ae:	d82e      	bhi.n	800230e <HAL_CAN_IRQHandler+0x334>
 80022b0:	2b50      	cmp	r3, #80	; 0x50
 80022b2:	d022      	beq.n	80022fa <HAL_CAN_IRQHandler+0x320>
 80022b4:	2b50      	cmp	r3, #80	; 0x50
 80022b6:	d82a      	bhi.n	800230e <HAL_CAN_IRQHandler+0x334>
 80022b8:	2b40      	cmp	r3, #64	; 0x40
 80022ba:	d019      	beq.n	80022f0 <HAL_CAN_IRQHandler+0x316>
 80022bc:	2b40      	cmp	r3, #64	; 0x40
 80022be:	d826      	bhi.n	800230e <HAL_CAN_IRQHandler+0x334>
 80022c0:	2b30      	cmp	r3, #48	; 0x30
 80022c2:	d010      	beq.n	80022e6 <HAL_CAN_IRQHandler+0x30c>
 80022c4:	2b30      	cmp	r3, #48	; 0x30
 80022c6:	d822      	bhi.n	800230e <HAL_CAN_IRQHandler+0x334>
 80022c8:	2b10      	cmp	r3, #16
 80022ca:	d002      	beq.n	80022d2 <HAL_CAN_IRQHandler+0x2f8>
 80022cc:	2b20      	cmp	r3, #32
 80022ce:	d005      	beq.n	80022dc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80022d0:	e01d      	b.n	800230e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	f043 0308 	orr.w	r3, r3, #8
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022da:	e019      	b.n	8002310 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	f043 0310 	orr.w	r3, r3, #16
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022e4:	e014      	b.n	8002310 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	f043 0320 	orr.w	r3, r3, #32
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022ee:	e00f      	b.n	8002310 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022f8:	e00a      	b.n	8002310 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002302:	e005      	b.n	8002310 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800230c:	e000      	b.n	8002310 <HAL_CAN_IRQHandler+0x336>
            break;
 800230e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699a      	ldr	r2, [r3, #24]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800231e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2204      	movs	r2, #4
 8002326:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f854 	bl	80023e8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002340:	bf00      	nop
 8002342:	3728      	adds	r7, #40	; 0x28
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <__NVIC_SetPriorityGrouping+0x44>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002418:	4013      	ands	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242e:	4a04      	ldr	r2, [pc, #16]	; (8002440 <__NVIC_SetPriorityGrouping+0x44>)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	60d3      	str	r3, [r2, #12]
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <__NVIC_GetPriorityGrouping+0x18>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	f003 0307 	and.w	r3, r3, #7
}
 8002452:	4618      	mov	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	2b00      	cmp	r3, #0
 8002470:	db0b      	blt.n	800248a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	f003 021f 	and.w	r2, r3, #31
 8002478:	4907      	ldr	r1, [pc, #28]	; (8002498 <__NVIC_EnableIRQ+0x38>)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	2001      	movs	r0, #1
 8002482:	fa00 f202 	lsl.w	r2, r0, r2
 8002486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000e100 	.word	0xe000e100

0800249c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	db0a      	blt.n	80024c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	490c      	ldr	r1, [pc, #48]	; (80024e8 <__NVIC_SetPriority+0x4c>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	0112      	lsls	r2, r2, #4
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	440b      	add	r3, r1
 80024c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c4:	e00a      	b.n	80024dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4908      	ldr	r1, [pc, #32]	; (80024ec <__NVIC_SetPriority+0x50>)
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	3b04      	subs	r3, #4
 80024d4:	0112      	lsls	r2, r2, #4
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	440b      	add	r3, r1
 80024da:	761a      	strb	r2, [r3, #24]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000e100 	.word	0xe000e100
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	; 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f1c3 0307 	rsb	r3, r3, #7
 800250a:	2b04      	cmp	r3, #4
 800250c:	bf28      	it	cs
 800250e:	2304      	movcs	r3, #4
 8002510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3304      	adds	r3, #4
 8002516:	2b06      	cmp	r3, #6
 8002518:	d902      	bls.n	8002520 <NVIC_EncodePriority+0x30>
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3b03      	subs	r3, #3
 800251e:	e000      	b.n	8002522 <NVIC_EncodePriority+0x32>
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	f04f 32ff 	mov.w	r2, #4294967295
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	401a      	ands	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002538:	f04f 31ff 	mov.w	r1, #4294967295
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa01 f303 	lsl.w	r3, r1, r3
 8002542:	43d9      	mvns	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	4313      	orrs	r3, r2
         );
}
 800254a:	4618      	mov	r0, r3
 800254c:	3724      	adds	r7, #36	; 0x24
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff ff4c 	bl	80023fc <__NVIC_SetPriorityGrouping>
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800257e:	f7ff ff61 	bl	8002444 <__NVIC_GetPriorityGrouping>
 8002582:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	6978      	ldr	r0, [r7, #20]
 800258a:	f7ff ffb1 	bl	80024f0 <NVIC_EncodePriority>
 800258e:	4602      	mov	r2, r0
 8002590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff ff80 	bl	800249c <__NVIC_SetPriority>
}
 800259c:	bf00      	nop
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ff54 	bl	8002460 <__NVIC_EnableIRQ>
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ce:	e148      	b.n	8002862 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2101      	movs	r1, #1
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	fa01 f303 	lsl.w	r3, r1, r3
 80025dc:	4013      	ands	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 813a 	beq.w	800285c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d005      	beq.n	8002600 <HAL_GPIO_Init+0x40>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d130      	bne.n	8002662 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2203      	movs	r2, #3
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002636:	2201      	movs	r2, #1
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4013      	ands	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f003 0201 	and.w	r2, r3, #1
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b03      	cmp	r3, #3
 800266c:	d017      	beq.n	800269e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	2203      	movs	r2, #3
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d123      	bne.n	80026f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	08da      	lsrs	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3208      	adds	r2, #8
 80026b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	220f      	movs	r2, #15
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	08da      	lsrs	r2, r3, #3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3208      	adds	r2, #8
 80026ec:	6939      	ldr	r1, [r7, #16]
 80026ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	2203      	movs	r2, #3
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 0203 	and.w	r2, r3, #3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 8094 	beq.w	800285c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002734:	4b52      	ldr	r3, [pc, #328]	; (8002880 <HAL_GPIO_Init+0x2c0>)
 8002736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002738:	4a51      	ldr	r2, [pc, #324]	; (8002880 <HAL_GPIO_Init+0x2c0>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6613      	str	r3, [r2, #96]	; 0x60
 8002740:	4b4f      	ldr	r3, [pc, #316]	; (8002880 <HAL_GPIO_Init+0x2c0>)
 8002742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800274c:	4a4d      	ldr	r2, [pc, #308]	; (8002884 <HAL_GPIO_Init+0x2c4>)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	3302      	adds	r3, #2
 8002754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	220f      	movs	r2, #15
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4013      	ands	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002776:	d00d      	beq.n	8002794 <HAL_GPIO_Init+0x1d4>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a43      	ldr	r2, [pc, #268]	; (8002888 <HAL_GPIO_Init+0x2c8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d007      	beq.n	8002790 <HAL_GPIO_Init+0x1d0>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a42      	ldr	r2, [pc, #264]	; (800288c <HAL_GPIO_Init+0x2cc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d101      	bne.n	800278c <HAL_GPIO_Init+0x1cc>
 8002788:	2302      	movs	r3, #2
 800278a:	e004      	b.n	8002796 <HAL_GPIO_Init+0x1d6>
 800278c:	2307      	movs	r3, #7
 800278e:	e002      	b.n	8002796 <HAL_GPIO_Init+0x1d6>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <HAL_GPIO_Init+0x1d6>
 8002794:	2300      	movs	r3, #0
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	f002 0203 	and.w	r2, r2, #3
 800279c:	0092      	lsls	r2, r2, #2
 800279e:	4093      	lsls	r3, r2
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027a6:	4937      	ldr	r1, [pc, #220]	; (8002884 <HAL_GPIO_Init+0x2c4>)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	089b      	lsrs	r3, r3, #2
 80027ac:	3302      	adds	r3, #2
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027b4:	4b36      	ldr	r3, [pc, #216]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	43db      	mvns	r3, r3
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4013      	ands	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027d8:	4a2d      	ldr	r2, [pc, #180]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027de:	4b2c      	ldr	r3, [pc, #176]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4013      	ands	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002802:	4a23      	ldr	r2, [pc, #140]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002808:	4b21      	ldr	r3, [pc, #132]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	43db      	mvns	r3, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4013      	ands	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800282c:	4a18      	ldr	r2, [pc, #96]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002832:	4b17      	ldr	r3, [pc, #92]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	43db      	mvns	r3, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4013      	ands	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002856:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	3301      	adds	r3, #1
 8002860:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	fa22 f303 	lsr.w	r3, r2, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	f47f aeaf 	bne.w	80025d0 <HAL_GPIO_Init+0x10>
  }
}
 8002872:	bf00      	nop
 8002874:	bf00      	nop
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	40021000 	.word	0x40021000
 8002884:	40010000 	.word	0x40010000
 8002888:	48000400 	.word	0x48000400
 800288c:	48000800 	.word	0x48000800
 8002890:	40010400 	.word	0x40010400

08002894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	807b      	strh	r3, [r7, #2]
 80028a0:	4613      	mov	r3, r2
 80028a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a4:	787b      	ldrb	r3, [r7, #1]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028aa:	887a      	ldrh	r2, [r7, #2]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028b0:	e002      	b.n	80028b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028b2:	887a      	ldrh	r2, [r7, #2]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028c8:	4b04      	ldr	r3, [pc, #16]	; (80028dc <HAL_PWREx_GetVoltageRange+0x18>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40007000 	.word	0x40007000

080028e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ee:	d130      	bne.n	8002952 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028f0:	4b23      	ldr	r3, [pc, #140]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028fc:	d038      	beq.n	8002970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002906:	4a1e      	ldr	r2, [pc, #120]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002908:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800290c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800290e:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2232      	movs	r2, #50	; 0x32
 8002914:	fb02 f303 	mul.w	r3, r2, r3
 8002918:	4a1b      	ldr	r2, [pc, #108]	; (8002988 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	0c9b      	lsrs	r3, r3, #18
 8002920:	3301      	adds	r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002924:	e002      	b.n	800292c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	3b01      	subs	r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800292c:	4b14      	ldr	r3, [pc, #80]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002938:	d102      	bne.n	8002940 <HAL_PWREx_ControlVoltageScaling+0x60>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f2      	bne.n	8002926 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294c:	d110      	bne.n	8002970 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e00f      	b.n	8002972 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002952:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800295a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800295e:	d007      	beq.n	8002970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002960:	4b07      	ldr	r3, [pc, #28]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002968:	4a05      	ldr	r2, [pc, #20]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800296e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40007000 	.word	0x40007000
 8002984:	20000004 	.word	0x20000004
 8002988:	431bde83 	.word	0x431bde83

0800298c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d102      	bne.n	80029a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	f000 bc02 	b.w	80031a4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029a0:	4b96      	ldr	r3, [pc, #600]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 030c 	and.w	r3, r3, #12
 80029a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029aa:	4b94      	ldr	r3, [pc, #592]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80e4 	beq.w	8002b8a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d007      	beq.n	80029d8 <HAL_RCC_OscConfig+0x4c>
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	f040 808b 	bne.w	8002ae6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	f040 8087 	bne.w	8002ae6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029d8:	4b88      	ldr	r3, [pc, #544]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_RCC_OscConfig+0x64>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e3d9      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1a      	ldr	r2, [r3, #32]
 80029f4:	4b81      	ldr	r3, [pc, #516]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d004      	beq.n	8002a0a <HAL_RCC_OscConfig+0x7e>
 8002a00:	4b7e      	ldr	r3, [pc, #504]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a08:	e005      	b.n	8002a16 <HAL_RCC_OscConfig+0x8a>
 8002a0a:	4b7c      	ldr	r3, [pc, #496]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d223      	bcs.n	8002a62 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fe1e 	bl	8003660 <RCC_SetFlashLatencyFromMSIRange>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e3ba      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a2e:	4b73      	ldr	r3, [pc, #460]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a72      	ldr	r2, [pc, #456]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a34:	f043 0308 	orr.w	r3, r3, #8
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	4b70      	ldr	r3, [pc, #448]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	496d      	ldr	r1, [pc, #436]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a4c:	4b6b      	ldr	r3, [pc, #428]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	021b      	lsls	r3, r3, #8
 8002a5a:	4968      	ldr	r1, [pc, #416]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
 8002a60:	e025      	b.n	8002aae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a62:	4b66      	ldr	r3, [pc, #408]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a65      	ldr	r2, [pc, #404]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a68:	f043 0308 	orr.w	r3, r3, #8
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	4b63      	ldr	r3, [pc, #396]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	4960      	ldr	r1, [pc, #384]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a80:	4b5e      	ldr	r3, [pc, #376]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	495b      	ldr	r1, [pc, #364]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fdde 	bl	8003660 <RCC_SetFlashLatencyFromMSIRange>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e37a      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aae:	f000 fcb5 	bl	800341c <HAL_RCC_GetSysClockFreq>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	4b51      	ldr	r3, [pc, #324]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	4950      	ldr	r1, [pc, #320]	; (8002c00 <HAL_RCC_OscConfig+0x274>)
 8002ac0:	5ccb      	ldrb	r3, [r1, r3]
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aca:	4a4e      	ldr	r2, [pc, #312]	; (8002c04 <HAL_RCC_OscConfig+0x278>)
 8002acc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ace:	4b4e      	ldr	r3, [pc, #312]	; (8002c08 <HAL_RCC_OscConfig+0x27c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe fa1a 	bl	8000f0c <HAL_InitTick>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d052      	beq.n	8002b88 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	e35e      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d032      	beq.n	8002b54 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002aee:	4b43      	ldr	r3, [pc, #268]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a42      	ldr	r2, [pc, #264]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002afa:	f7fe fe2d 	bl	8001758 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b02:	f7fe fe29 	bl	8001758 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e347      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b14:	4b39      	ldr	r3, [pc, #228]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b20:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a35      	ldr	r2, [pc, #212]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002b26:	f043 0308 	orr.w	r3, r3, #8
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	4b33      	ldr	r3, [pc, #204]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	4930      	ldr	r1, [pc, #192]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b3e:	4b2f      	ldr	r3, [pc, #188]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	492b      	ldr	r1, [pc, #172]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	604b      	str	r3, [r1, #4]
 8002b52:	e01a      	b.n	8002b8a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b54:	4b29      	ldr	r3, [pc, #164]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a28      	ldr	r2, [pc, #160]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b60:	f7fe fdfa 	bl	8001758 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b68:	f7fe fdf6 	bl	8001758 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e314      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b7a:	4b20      	ldr	r3, [pc, #128]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x1dc>
 8002b86:	e000      	b.n	8002b8a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d073      	beq.n	8002c7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x21c>
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	2b0c      	cmp	r3, #12
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d10b      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d063      	beq.n	8002c7c <HAL_RCC_OscConfig+0x2f0>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d15f      	bne.n	8002c7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e2f1      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc8:	d106      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x24c>
 8002bca:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a0b      	ldr	r2, [pc, #44]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e025      	b.n	8002c24 <HAL_RCC_OscConfig+0x298>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be0:	d114      	bne.n	8002c0c <HAL_RCC_OscConfig+0x280>
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a05      	ldr	r2, [pc, #20]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b03      	ldr	r3, [pc, #12]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a02      	ldr	r2, [pc, #8]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e013      	b.n	8002c24 <HAL_RCC_OscConfig+0x298>
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	0800b434 	.word	0x0800b434
 8002c04:	20000004 	.word	0x20000004
 8002c08:	20000008 	.word	0x20000008
 8002c0c:	4ba0      	ldr	r3, [pc, #640]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a9f      	ldr	r2, [pc, #636]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	4b9d      	ldr	r3, [pc, #628]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a9c      	ldr	r2, [pc, #624]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d013      	beq.n	8002c54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fd94 	bl	8001758 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c34:	f7fe fd90 	bl	8001758 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e2ae      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c46:	4b92      	ldr	r3, [pc, #584]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x2a8>
 8002c52:	e014      	b.n	8002c7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7fe fd80 	bl	8001758 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fe fd7c 	bl	8001758 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e29a      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c6e:	4b88      	ldr	r3, [pc, #544]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x2d0>
 8002c7a:	e000      	b.n	8002c7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d060      	beq.n	8002d4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_OscConfig+0x310>
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	2b0c      	cmp	r3, #12
 8002c94:	d119      	bne.n	8002cca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d116      	bne.n	8002cca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c9c:	4b7c      	ldr	r3, [pc, #496]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x328>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e277      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb4:	4b76      	ldr	r3, [pc, #472]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	061b      	lsls	r3, r3, #24
 8002cc2:	4973      	ldr	r1, [pc, #460]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cc8:	e040      	b.n	8002d4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d023      	beq.n	8002d1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd2:	4b6f      	ldr	r3, [pc, #444]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a6e      	ldr	r2, [pc, #440]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7fe fd3b 	bl	8001758 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce6:	f7fe fd37 	bl	8001758 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e255      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf8:	4b65      	ldr	r3, [pc, #404]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d04:	4b62      	ldr	r3, [pc, #392]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	495f      	ldr	r1, [pc, #380]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]
 8002d18:	e018      	b.n	8002d4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1a:	4b5d      	ldr	r3, [pc, #372]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a5c      	ldr	r2, [pc, #368]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7fe fd17 	bl	8001758 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7fe fd13 	bl	8001758 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e231      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d40:	4b53      	ldr	r3, [pc, #332]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f0      	bne.n	8002d2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d03c      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d01c      	beq.n	8002d9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d60:	4b4b      	ldr	r3, [pc, #300]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d66:	4a4a      	ldr	r2, [pc, #296]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d70:	f7fe fcf2 	bl	8001758 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d78:	f7fe fcee 	bl	8001758 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e20c      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d8a:	4b41      	ldr	r3, [pc, #260]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0ef      	beq.n	8002d78 <HAL_RCC_OscConfig+0x3ec>
 8002d98:	e01b      	b.n	8002dd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d9a:	4b3d      	ldr	r3, [pc, #244]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da0:	4a3b      	ldr	r2, [pc, #236]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002da2:	f023 0301 	bic.w	r3, r3, #1
 8002da6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002daa:	f7fe fcd5 	bl	8001758 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db2:	f7fe fcd1 	bl	8001758 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e1ef      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dc4:	4b32      	ldr	r3, [pc, #200]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1ef      	bne.n	8002db2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 80a6 	beq.w	8002f2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de0:	2300      	movs	r3, #0
 8002de2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002de4:	4b2a      	ldr	r3, [pc, #168]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10d      	bne.n	8002e0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df0:	4b27      	ldr	r3, [pc, #156]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	4a26      	ldr	r2, [pc, #152]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	6593      	str	r3, [r2, #88]	; 0x58
 8002dfc:	4b24      	ldr	r3, [pc, #144]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e0c:	4b21      	ldr	r3, [pc, #132]	; (8002e94 <HAL_RCC_OscConfig+0x508>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d118      	bne.n	8002e4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e18:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <HAL_RCC_OscConfig+0x508>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a1d      	ldr	r2, [pc, #116]	; (8002e94 <HAL_RCC_OscConfig+0x508>)
 8002e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e24:	f7fe fc98 	bl	8001758 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2c:	f7fe fc94 	bl	8001758 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e1b2      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <HAL_RCC_OscConfig+0x508>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d108      	bne.n	8002e64 <HAL_RCC_OscConfig+0x4d8>
 8002e52:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e58:	4a0d      	ldr	r2, [pc, #52]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e62:	e029      	b.n	8002eb8 <HAL_RCC_OscConfig+0x52c>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	d115      	bne.n	8002e98 <HAL_RCC_OscConfig+0x50c>
 8002e6c:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	4a07      	ldr	r2, [pc, #28]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002e74:	f043 0304 	orr.w	r3, r3, #4
 8002e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e82:	4a03      	ldr	r2, [pc, #12]	; (8002e90 <HAL_RCC_OscConfig+0x504>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e8c:	e014      	b.n	8002eb8 <HAL_RCC_OscConfig+0x52c>
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40007000 	.word	0x40007000
 8002e98:	4b9a      	ldr	r3, [pc, #616]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9e:	4a99      	ldr	r2, [pc, #612]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 8002ea0:	f023 0301 	bic.w	r3, r3, #1
 8002ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ea8:	4b96      	ldr	r3, [pc, #600]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eae:	4a95      	ldr	r2, [pc, #596]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 8002eb0:	f023 0304 	bic.w	r3, r3, #4
 8002eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d016      	beq.n	8002eee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec0:	f7fe fc4a 	bl	8001758 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec8:	f7fe fc46 	bl	8001758 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e162      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ede:	4b89      	ldr	r3, [pc, #548]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0ed      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x53c>
 8002eec:	e015      	b.n	8002f1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eee:	f7fe fc33 	bl	8001758 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ef4:	e00a      	b.n	8002f0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef6:	f7fe fc2f 	bl	8001758 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e14b      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f0c:	4b7d      	ldr	r3, [pc, #500]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1ed      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f1a:	7ffb      	ldrb	r3, [r7, #31]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d105      	bne.n	8002f2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f20:	4b78      	ldr	r3, [pc, #480]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 8002f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f24:	4a77      	ldr	r2, [pc, #476]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 8002f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d03c      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01c      	beq.n	8002f7a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f40:	4b70      	ldr	r3, [pc, #448]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 8002f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f46:	4a6f      	ldr	r2, [pc, #444]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7fe fc02 	bl	8001758 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f58:	f7fe fbfe 	bl	8001758 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e11c      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f6a:	4b66      	ldr	r3, [pc, #408]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 8002f6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0ef      	beq.n	8002f58 <HAL_RCC_OscConfig+0x5cc>
 8002f78:	e01b      	b.n	8002fb2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f7a:	4b62      	ldr	r3, [pc, #392]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 8002f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f80:	4a60      	ldr	r2, [pc, #384]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 8002f82:	f023 0301 	bic.w	r3, r3, #1
 8002f86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8a:	f7fe fbe5 	bl	8001758 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f92:	f7fe fbe1 	bl	8001758 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e0ff      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fa4:	4b57      	ldr	r3, [pc, #348]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 8002fa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1ef      	bne.n	8002f92 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 80f3 	beq.w	80031a2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	f040 80c9 	bne.w	8003158 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fc6:	4b4f      	ldr	r3, [pc, #316]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f003 0203 	and.w	r2, r3, #3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d12c      	bne.n	8003034 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d123      	bne.n	8003034 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d11b      	bne.n	8003034 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003006:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d113      	bne.n	8003034 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	085b      	lsrs	r3, r3, #1
 8003018:	3b01      	subs	r3, #1
 800301a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d109      	bne.n	8003034 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	085b      	lsrs	r3, r3, #1
 800302c:	3b01      	subs	r3, #1
 800302e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d06b      	beq.n	800310c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b0c      	cmp	r3, #12
 8003038:	d062      	beq.n	8003100 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800303a:	4b32      	ldr	r3, [pc, #200]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e0ac      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800304a:	4b2e      	ldr	r3, [pc, #184]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a2d      	ldr	r2, [pc, #180]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 8003050:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003054:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003056:	f7fe fb7f 	bl	8001758 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305e:	f7fe fb7b 	bl	8001758 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e099      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003070:	4b24      	ldr	r3, [pc, #144]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800307c:	4b21      	ldr	r3, [pc, #132]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	4b21      	ldr	r3, [pc, #132]	; (8003108 <HAL_RCC_OscConfig+0x77c>)
 8003082:	4013      	ands	r3, r2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800308c:	3a01      	subs	r2, #1
 800308e:	0112      	lsls	r2, r2, #4
 8003090:	4311      	orrs	r1, r2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003096:	0212      	lsls	r2, r2, #8
 8003098:	4311      	orrs	r1, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800309e:	0852      	lsrs	r2, r2, #1
 80030a0:	3a01      	subs	r2, #1
 80030a2:	0552      	lsls	r2, r2, #21
 80030a4:	4311      	orrs	r1, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030aa:	0852      	lsrs	r2, r2, #1
 80030ac:	3a01      	subs	r2, #1
 80030ae:	0652      	lsls	r2, r2, #25
 80030b0:	4311      	orrs	r1, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030b6:	06d2      	lsls	r2, r2, #27
 80030b8:	430a      	orrs	r2, r1
 80030ba:	4912      	ldr	r1, [pc, #72]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030c0:	4b10      	ldr	r3, [pc, #64]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0f      	ldr	r2, [pc, #60]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 80030c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030cc:	4b0d      	ldr	r3, [pc, #52]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4a0c      	ldr	r2, [pc, #48]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 80030d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030d8:	f7fe fb3e 	bl	8001758 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e0:	f7fe fb3a 	bl	8001758 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e058      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f2:	4b04      	ldr	r3, [pc, #16]	; (8003104 <HAL_RCC_OscConfig+0x778>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030fe:	e050      	b.n	80031a2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e04f      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
 8003104:	40021000 	.word	0x40021000
 8003108:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800310c:	4b27      	ldr	r3, [pc, #156]	; (80031ac <HAL_RCC_OscConfig+0x820>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d144      	bne.n	80031a2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003118:	4b24      	ldr	r3, [pc, #144]	; (80031ac <HAL_RCC_OscConfig+0x820>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a23      	ldr	r2, [pc, #140]	; (80031ac <HAL_RCC_OscConfig+0x820>)
 800311e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003122:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003124:	4b21      	ldr	r3, [pc, #132]	; (80031ac <HAL_RCC_OscConfig+0x820>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4a20      	ldr	r2, [pc, #128]	; (80031ac <HAL_RCC_OscConfig+0x820>)
 800312a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800312e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003130:	f7fe fb12 	bl	8001758 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003138:	f7fe fb0e 	bl	8001758 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e02c      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314a:	4b18      	ldr	r3, [pc, #96]	; (80031ac <HAL_RCC_OscConfig+0x820>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x7ac>
 8003156:	e024      	b.n	80031a2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	2b0c      	cmp	r3, #12
 800315c:	d01f      	beq.n	800319e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315e:	4b13      	ldr	r3, [pc, #76]	; (80031ac <HAL_RCC_OscConfig+0x820>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a12      	ldr	r2, [pc, #72]	; (80031ac <HAL_RCC_OscConfig+0x820>)
 8003164:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7fe faf5 	bl	8001758 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003172:	f7fe faf1 	bl	8001758 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e00f      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003184:	4b09      	ldr	r3, [pc, #36]	; (80031ac <HAL_RCC_OscConfig+0x820>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f0      	bne.n	8003172 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_RCC_OscConfig+0x820>)
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	4905      	ldr	r1, [pc, #20]	; (80031ac <HAL_RCC_OscConfig+0x820>)
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_RCC_OscConfig+0x824>)
 8003198:	4013      	ands	r3, r2
 800319a:	60cb      	str	r3, [r1, #12]
 800319c:	e001      	b.n	80031a2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3720      	adds	r7, #32
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40021000 	.word	0x40021000
 80031b0:	feeefffc 	.word	0xfeeefffc

080031b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0e7      	b.n	8003398 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031c8:	4b75      	ldr	r3, [pc, #468]	; (80033a0 <HAL_RCC_ClockConfig+0x1ec>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d910      	bls.n	80031f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d6:	4b72      	ldr	r3, [pc, #456]	; (80033a0 <HAL_RCC_ClockConfig+0x1ec>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 0207 	bic.w	r2, r3, #7
 80031de:	4970      	ldr	r1, [pc, #448]	; (80033a0 <HAL_RCC_ClockConfig+0x1ec>)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e6:	4b6e      	ldr	r3, [pc, #440]	; (80033a0 <HAL_RCC_ClockConfig+0x1ec>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0cf      	b.n	8003398 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d010      	beq.n	8003226 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	4b66      	ldr	r3, [pc, #408]	; (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003210:	429a      	cmp	r2, r3
 8003212:	d908      	bls.n	8003226 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003214:	4b63      	ldr	r3, [pc, #396]	; (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	4960      	ldr	r1, [pc, #384]	; (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d04c      	beq.n	80032cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b03      	cmp	r3, #3
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800323a:	4b5a      	ldr	r3, [pc, #360]	; (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d121      	bne.n	800328a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e0a6      	b.n	8003398 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003252:	4b54      	ldr	r3, [pc, #336]	; (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d115      	bne.n	800328a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e09a      	b.n	8003398 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800326a:	4b4e      	ldr	r3, [pc, #312]	; (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e08e      	b.n	8003398 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327a:	4b4a      	ldr	r3, [pc, #296]	; (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e086      	b.n	8003398 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800328a:	4b46      	ldr	r3, [pc, #280]	; (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f023 0203 	bic.w	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4943      	ldr	r1, [pc, #268]	; (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003298:	4313      	orrs	r3, r2
 800329a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800329c:	f7fe fa5c 	bl	8001758 <HAL_GetTick>
 80032a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a4:	f7fe fa58 	bl	8001758 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e06e      	b.n	8003398 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	4b3a      	ldr	r3, [pc, #232]	; (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 020c 	and.w	r2, r3, #12
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d1eb      	bne.n	80032a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d010      	beq.n	80032fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d208      	bcs.n	80032fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e8:	4b2e      	ldr	r3, [pc, #184]	; (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	492b      	ldr	r1, [pc, #172]	; (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032fa:	4b29      	ldr	r3, [pc, #164]	; (80033a0 <HAL_RCC_ClockConfig+0x1ec>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d210      	bcs.n	800332a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003308:	4b25      	ldr	r3, [pc, #148]	; (80033a0 <HAL_RCC_ClockConfig+0x1ec>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f023 0207 	bic.w	r2, r3, #7
 8003310:	4923      	ldr	r1, [pc, #140]	; (80033a0 <HAL_RCC_ClockConfig+0x1ec>)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	4313      	orrs	r3, r2
 8003316:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003318:	4b21      	ldr	r3, [pc, #132]	; (80033a0 <HAL_RCC_ClockConfig+0x1ec>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d001      	beq.n	800332a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e036      	b.n	8003398 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b00      	cmp	r3, #0
 8003334:	d008      	beq.n	8003348 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003336:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	4918      	ldr	r1, [pc, #96]	; (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003344:	4313      	orrs	r3, r2
 8003346:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d009      	beq.n	8003368 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003354:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4910      	ldr	r1, [pc, #64]	; (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003364:	4313      	orrs	r3, r2
 8003366:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003368:	f000 f858 	bl	800341c <HAL_RCC_GetSysClockFreq>
 800336c:	4602      	mov	r2, r0
 800336e:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	091b      	lsrs	r3, r3, #4
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	490b      	ldr	r1, [pc, #44]	; (80033a8 <HAL_RCC_ClockConfig+0x1f4>)
 800337a:	5ccb      	ldrb	r3, [r1, r3]
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	fa22 f303 	lsr.w	r3, r2, r3
 8003384:	4a09      	ldr	r2, [pc, #36]	; (80033ac <HAL_RCC_ClockConfig+0x1f8>)
 8003386:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003388:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <HAL_RCC_ClockConfig+0x1fc>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f7fd fdbd 	bl	8000f0c <HAL_InitTick>
 8003392:	4603      	mov	r3, r0
 8003394:	72fb      	strb	r3, [r7, #11]

  return status;
 8003396:	7afb      	ldrb	r3, [r7, #11]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40022000 	.word	0x40022000
 80033a4:	40021000 	.word	0x40021000
 80033a8:	0800b434 	.word	0x0800b434
 80033ac:	20000004 	.word	0x20000004
 80033b0:	20000008 	.word	0x20000008

080033b4 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08a      	sub	sp, #40	; 0x28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 80033c0:	4b15      	ldr	r3, [pc, #84]	; (8003418 <HAL_RCC_MCOConfig+0x64>)
 80033c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c4:	4a14      	ldr	r2, [pc, #80]	; (8003418 <HAL_RCC_MCOConfig+0x64>)
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033cc:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_RCC_MCOConfig+0x64>)
 80033ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 80033d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033de:	2302      	movs	r3, #2
 80033e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033e2:	2302      	movs	r3, #2
 80033e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80033ea:	2300      	movs	r3, #0
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80033ee:	f107 0314 	add.w	r3, r7, #20
 80033f2:	4619      	mov	r1, r3
 80033f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033f8:	f7ff f8e2 	bl	80025c0 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <HAL_RCC_MCOConfig+0x64>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	430b      	orrs	r3, r1
 800340a:	4903      	ldr	r1, [pc, #12]	; (8003418 <HAL_RCC_MCOConfig+0x64>)
 800340c:	4313      	orrs	r3, r2
 800340e:	608b      	str	r3, [r1, #8]
}
 8003410:	bf00      	nop
 8003412:	3728      	adds	r7, #40	; 0x28
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40021000 	.word	0x40021000

0800341c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800341c:	b480      	push	{r7}
 800341e:	b089      	sub	sp, #36	; 0x24
 8003420:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
 8003426:	2300      	movs	r3, #0
 8003428:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800342a:	4b3e      	ldr	r3, [pc, #248]	; (8003524 <HAL_RCC_GetSysClockFreq+0x108>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003434:	4b3b      	ldr	r3, [pc, #236]	; (8003524 <HAL_RCC_GetSysClockFreq+0x108>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0x34>
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	2b0c      	cmp	r3, #12
 8003448:	d121      	bne.n	800348e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d11e      	bne.n	800348e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003450:	4b34      	ldr	r3, [pc, #208]	; (8003524 <HAL_RCC_GetSysClockFreq+0x108>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d107      	bne.n	800346c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800345c:	4b31      	ldr	r3, [pc, #196]	; (8003524 <HAL_RCC_GetSysClockFreq+0x108>)
 800345e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003462:	0a1b      	lsrs	r3, r3, #8
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	e005      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800346c:	4b2d      	ldr	r3, [pc, #180]	; (8003524 <HAL_RCC_GetSysClockFreq+0x108>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003478:	4a2b      	ldr	r2, [pc, #172]	; (8003528 <HAL_RCC_GetSysClockFreq+0x10c>)
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003480:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10d      	bne.n	80034a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800348c:	e00a      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b04      	cmp	r3, #4
 8003492:	d102      	bne.n	800349a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003494:	4b25      	ldr	r3, [pc, #148]	; (800352c <HAL_RCC_GetSysClockFreq+0x110>)
 8003496:	61bb      	str	r3, [r7, #24]
 8003498:	e004      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	2b08      	cmp	r3, #8
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034a0:	4b23      	ldr	r3, [pc, #140]	; (8003530 <HAL_RCC_GetSysClockFreq+0x114>)
 80034a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	2b0c      	cmp	r3, #12
 80034a8:	d134      	bne.n	8003514 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034aa:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d003      	beq.n	80034c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d003      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0xac>
 80034c0:	e005      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034c2:	4b1a      	ldr	r3, [pc, #104]	; (800352c <HAL_RCC_GetSysClockFreq+0x110>)
 80034c4:	617b      	str	r3, [r7, #20]
      break;
 80034c6:	e005      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034c8:	4b19      	ldr	r3, [pc, #100]	; (8003530 <HAL_RCC_GetSysClockFreq+0x114>)
 80034ca:	617b      	str	r3, [r7, #20]
      break;
 80034cc:	e002      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	617b      	str	r3, [r7, #20]
      break;
 80034d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034d4:	4b13      	ldr	r3, [pc, #76]	; (8003524 <HAL_RCC_GetSysClockFreq+0x108>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	3301      	adds	r3, #1
 80034e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034e2:	4b10      	ldr	r3, [pc, #64]	; (8003524 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	0a1b      	lsrs	r3, r3, #8
 80034e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	fb03 f202 	mul.w	r2, r3, r2
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034fa:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <HAL_RCC_GetSysClockFreq+0x108>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	0e5b      	lsrs	r3, r3, #25
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	3301      	adds	r3, #1
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003512:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003514:	69bb      	ldr	r3, [r7, #24]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3724      	adds	r7, #36	; 0x24
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40021000 	.word	0x40021000
 8003528:	0800b44c 	.word	0x0800b44c
 800352c:	00f42400 	.word	0x00f42400
 8003530:	007a1200 	.word	0x007a1200

08003534 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003538:	4b03      	ldr	r3, [pc, #12]	; (8003548 <HAL_RCC_GetHCLKFreq+0x14>)
 800353a:	681b      	ldr	r3, [r3, #0]
}
 800353c:	4618      	mov	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	20000004 	.word	0x20000004

0800354c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003550:	f7ff fff0 	bl	8003534 <HAL_RCC_GetHCLKFreq>
 8003554:	4602      	mov	r2, r0
 8003556:	4b06      	ldr	r3, [pc, #24]	; (8003570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	0a1b      	lsrs	r3, r3, #8
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	4904      	ldr	r1, [pc, #16]	; (8003574 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003562:	5ccb      	ldrb	r3, [r1, r3]
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800356c:	4618      	mov	r0, r3
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021000 	.word	0x40021000
 8003574:	0800b444 	.word	0x0800b444

08003578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800357c:	f7ff ffda 	bl	8003534 <HAL_RCC_GetHCLKFreq>
 8003580:	4602      	mov	r2, r0
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	0adb      	lsrs	r3, r3, #11
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	4904      	ldr	r1, [pc, #16]	; (80035a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800358e:	5ccb      	ldrb	r3, [r1, r3]
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003598:	4618      	mov	r0, r3
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40021000 	.word	0x40021000
 80035a0:	0800b444 	.word	0x0800b444

080035a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	220f      	movs	r2, #15
 80035b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80035b4:	4b12      	ldr	r3, [pc, #72]	; (8003600 <HAL_RCC_GetClockConfig+0x5c>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 0203 	and.w	r2, r3, #3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80035c0:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <HAL_RCC_GetClockConfig+0x5c>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <HAL_RCC_GetClockConfig+0x5c>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80035d8:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_RCC_GetClockConfig+0x5c>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	08db      	lsrs	r3, r3, #3
 80035de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80035e6:	4b07      	ldr	r3, [pc, #28]	; (8003604 <HAL_RCC_GetClockConfig+0x60>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0207 	and.w	r2, r3, #7
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	601a      	str	r2, [r3, #0]
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000
 8003604:	40022000 	.word	0x40022000

08003608 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_RCC_EnableCSS+0x1c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a04      	ldr	r2, [pc, #16]	; (8003624 <HAL_RCC_EnableCSS+0x1c>)
 8003612:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003616:	6013      	str	r3, [r2, #0]
}
 8003618:	bf00      	nop
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40021000 	.word	0x40021000

08003628 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800362c:	4b07      	ldr	r3, [pc, #28]	; (800364c <HAL_RCC_NMI_IRQHandler+0x24>)
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003638:	d105      	bne.n	8003646 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800363a:	f000 f809 	bl	8003650 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800363e:	4b03      	ldr	r3, [pc, #12]	; (800364c <HAL_RCC_NMI_IRQHandler+0x24>)
 8003640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003644:	621a      	str	r2, [r3, #32]
  }
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000

08003650 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003668:	2300      	movs	r3, #0
 800366a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800366c:	4b2a      	ldr	r3, [pc, #168]	; (8003718 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800366e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003678:	f7ff f924 	bl	80028c4 <HAL_PWREx_GetVoltageRange>
 800367c:	6178      	str	r0, [r7, #20]
 800367e:	e014      	b.n	80036aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003680:	4b25      	ldr	r3, [pc, #148]	; (8003718 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003684:	4a24      	ldr	r2, [pc, #144]	; (8003718 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368a:	6593      	str	r3, [r2, #88]	; 0x58
 800368c:	4b22      	ldr	r3, [pc, #136]	; (8003718 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800368e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003698:	f7ff f914 	bl	80028c4 <HAL_PWREx_GetVoltageRange>
 800369c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800369e:	4b1e      	ldr	r3, [pc, #120]	; (8003718 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a2:	4a1d      	ldr	r2, [pc, #116]	; (8003718 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b0:	d10b      	bne.n	80036ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b80      	cmp	r3, #128	; 0x80
 80036b6:	d919      	bls.n	80036ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2ba0      	cmp	r3, #160	; 0xa0
 80036bc:	d902      	bls.n	80036c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036be:	2302      	movs	r3, #2
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	e013      	b.n	80036ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036c4:	2301      	movs	r3, #1
 80036c6:	613b      	str	r3, [r7, #16]
 80036c8:	e010      	b.n	80036ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b80      	cmp	r3, #128	; 0x80
 80036ce:	d902      	bls.n	80036d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80036d0:	2303      	movs	r3, #3
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	e00a      	b.n	80036ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b80      	cmp	r3, #128	; 0x80
 80036da:	d102      	bne.n	80036e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036dc:	2302      	movs	r3, #2
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	e004      	b.n	80036ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b70      	cmp	r3, #112	; 0x70
 80036e6:	d101      	bne.n	80036ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036e8:	2301      	movs	r3, #1
 80036ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f023 0207 	bic.w	r2, r3, #7
 80036f4:	4909      	ldr	r1, [pc, #36]	; (800371c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036fc:	4b07      	ldr	r3, [pc, #28]	; (800371c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	429a      	cmp	r2, r3
 8003708:	d001      	beq.n	800370e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40021000 	.word	0x40021000
 800371c:	40022000 	.word	0x40022000

08003720 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003728:	2300      	movs	r3, #0
 800372a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800372c:	2300      	movs	r3, #0
 800372e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003738:	2b00      	cmp	r3, #0
 800373a:	d031      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003740:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003744:	d01a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003746:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800374a:	d814      	bhi.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800374c:	2b00      	cmp	r3, #0
 800374e:	d009      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003750:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003754:	d10f      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003756:	4b5d      	ldr	r3, [pc, #372]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	4a5c      	ldr	r2, [pc, #368]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800375c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003760:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003762:	e00c      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3304      	adds	r3, #4
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f000 f9ce 	bl	8003b0c <RCCEx_PLLSAI1_Config>
 8003770:	4603      	mov	r3, r0
 8003772:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003774:	e003      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	74fb      	strb	r3, [r7, #19]
      break;
 800377a:	e000      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800377c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800377e:	7cfb      	ldrb	r3, [r7, #19]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10b      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003784:	4b51      	ldr	r3, [pc, #324]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003792:	494e      	ldr	r1, [pc, #312]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800379a:	e001      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 809e 	beq.w	80038ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ae:	2300      	movs	r3, #0
 80037b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037b2:	4b46      	ldr	r3, [pc, #280]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80037c2:	2300      	movs	r3, #0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00d      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c8:	4b40      	ldr	r3, [pc, #256]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037cc:	4a3f      	ldr	r2, [pc, #252]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d2:	6593      	str	r3, [r2, #88]	; 0x58
 80037d4:	4b3d      	ldr	r3, [pc, #244]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e0:	2301      	movs	r3, #1
 80037e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037e4:	4b3a      	ldr	r3, [pc, #232]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a39      	ldr	r2, [pc, #228]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80037ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037f0:	f7fd ffb2 	bl	8001758 <HAL_GetTick>
 80037f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037f6:	e009      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f8:	f7fd ffae 	bl	8001758 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d902      	bls.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	74fb      	strb	r3, [r7, #19]
        break;
 800380a:	e005      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800380c:	4b30      	ldr	r3, [pc, #192]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0ef      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003818:	7cfb      	ldrb	r3, [r7, #19]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d15a      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800381e:	4b2b      	ldr	r3, [pc, #172]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003828:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d01e      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	429a      	cmp	r2, r3
 8003838:	d019      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800383a:	4b24      	ldr	r3, [pc, #144]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003844:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003846:	4b21      	ldr	r3, [pc, #132]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384c:	4a1f      	ldr	r2, [pc, #124]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800384e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003856:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385c:	4a1b      	ldr	r2, [pc, #108]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800385e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003866:	4a19      	ldr	r2, [pc, #100]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d016      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7fd ff6e 	bl	8001758 <HAL_GetTick>
 800387c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800387e:	e00b      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003880:	f7fd ff6a 	bl	8001758 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f241 3288 	movw	r2, #5000	; 0x1388
 800388e:	4293      	cmp	r3, r2
 8003890:	d902      	bls.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	74fb      	strb	r3, [r7, #19]
            break;
 8003896:	e006      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0ec      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80038a6:	7cfb      	ldrb	r3, [r7, #19]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10b      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ac:	4b07      	ldr	r3, [pc, #28]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ba:	4904      	ldr	r1, [pc, #16]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038c2:	e009      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038c4:	7cfb      	ldrb	r3, [r7, #19]
 80038c6:	74bb      	strb	r3, [r7, #18]
 80038c8:	e006      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80038ca:	bf00      	nop
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d4:	7cfb      	ldrb	r3, [r7, #19]
 80038d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038d8:	7c7b      	ldrb	r3, [r7, #17]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d105      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038de:	4b8a      	ldr	r3, [pc, #552]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	4a89      	ldr	r2, [pc, #548]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038f6:	4b84      	ldr	r3, [pc, #528]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fc:	f023 0203 	bic.w	r2, r3, #3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	4980      	ldr	r1, [pc, #512]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003918:	4b7b      	ldr	r3, [pc, #492]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391e:	f023 020c 	bic.w	r2, r3, #12
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	4978      	ldr	r1, [pc, #480]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800393a:	4b73      	ldr	r3, [pc, #460]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003940:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003948:	496f      	ldr	r1, [pc, #444]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800395c:	4b6a      	ldr	r3, [pc, #424]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003962:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396a:	4967      	ldr	r1, [pc, #412]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800397e:	4b62      	ldr	r3, [pc, #392]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003984:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	495e      	ldr	r1, [pc, #376]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039a0:	4b59      	ldr	r3, [pc, #356]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	4956      	ldr	r1, [pc, #344]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039c2:	4b51      	ldr	r3, [pc, #324]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	494d      	ldr	r1, [pc, #308]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d028      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039e4:	4b48      	ldr	r3, [pc, #288]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	4945      	ldr	r1, [pc, #276]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a02:	d106      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a04:	4b40      	ldr	r3, [pc, #256]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4a3f      	ldr	r2, [pc, #252]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a0e:	60d3      	str	r3, [r2, #12]
 8003a10:	e011      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a1a:	d10c      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	2101      	movs	r1, #1
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 f872 	bl	8003b0c <RCCEx_PLLSAI1_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a2c:	7cfb      	ldrb	r3, [r7, #19]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003a32:	7cfb      	ldrb	r3, [r7, #19]
 8003a34:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d028      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a42:	4b31      	ldr	r3, [pc, #196]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a50:	492d      	ldr	r1, [pc, #180]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a60:	d106      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a62:	4b29      	ldr	r3, [pc, #164]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	4a28      	ldr	r2, [pc, #160]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a6c:	60d3      	str	r3, [r2, #12]
 8003a6e:	e011      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a78:	d10c      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	2101      	movs	r1, #1
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 f843 	bl	8003b0c <RCCEx_PLLSAI1_Config>
 8003a86:	4603      	mov	r3, r0
 8003a88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a8a:	7cfb      	ldrb	r3, [r7, #19]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003a90:	7cfb      	ldrb	r3, [r7, #19]
 8003a92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d01c      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aa0:	4b19      	ldr	r3, [pc, #100]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aae:	4916      	ldr	r1, [pc, #88]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003abe:	d10c      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	2102      	movs	r1, #2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 f820 	bl	8003b0c <RCCEx_PLLSAI1_Config>
 8003acc:	4603      	mov	r3, r0
 8003ace:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ad0:	7cfb      	ldrb	r3, [r7, #19]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003ad6:	7cfb      	ldrb	r3, [r7, #19]
 8003ad8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ae6:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aec:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af4:	4904      	ldr	r1, [pc, #16]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003afc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40021000 	.word	0x40021000

08003b0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b1a:	4b74      	ldr	r3, [pc, #464]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d018      	beq.n	8003b58 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b26:	4b71      	ldr	r3, [pc, #452]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f003 0203 	and.w	r2, r3, #3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d10d      	bne.n	8003b52 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
       ||
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b3e:	4b6b      	ldr	r3, [pc, #428]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	091b      	lsrs	r3, r3, #4
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
       ||
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d047      	beq.n	8003be2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
 8003b56:	e044      	b.n	8003be2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d018      	beq.n	8003b92 <RCCEx_PLLSAI1_Config+0x86>
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d825      	bhi.n	8003bb0 <RCCEx_PLLSAI1_Config+0xa4>
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d002      	beq.n	8003b6e <RCCEx_PLLSAI1_Config+0x62>
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d009      	beq.n	8003b80 <RCCEx_PLLSAI1_Config+0x74>
 8003b6c:	e020      	b.n	8003bb0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b6e:	4b5f      	ldr	r3, [pc, #380]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d11d      	bne.n	8003bb6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b7e:	e01a      	b.n	8003bb6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b80:	4b5a      	ldr	r3, [pc, #360]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d116      	bne.n	8003bba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b90:	e013      	b.n	8003bba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b92:	4b56      	ldr	r3, [pc, #344]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10f      	bne.n	8003bbe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b9e:	4b53      	ldr	r3, [pc, #332]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bae:	e006      	b.n	8003bbe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb4:	e004      	b.n	8003bc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e002      	b.n	8003bc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e000      	b.n	8003bc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10d      	bne.n	8003be2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bc6:	4b49      	ldr	r3, [pc, #292]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6819      	ldr	r1, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	430b      	orrs	r3, r1
 8003bdc:	4943      	ldr	r1, [pc, #268]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d17c      	bne.n	8003ce2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003be8:	4b40      	ldr	r3, [pc, #256]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a3f      	ldr	r2, [pc, #252]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf4:	f7fd fdb0 	bl	8001758 <HAL_GetTick>
 8003bf8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bfa:	e009      	b.n	8003c10 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bfc:	f7fd fdac 	bl	8001758 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d902      	bls.n	8003c10 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	73fb      	strb	r3, [r7, #15]
        break;
 8003c0e:	e005      	b.n	8003c1c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c10:	4b36      	ldr	r3, [pc, #216]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1ef      	bne.n	8003bfc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d15f      	bne.n	8003ce2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d110      	bne.n	8003c4a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c28:	4b30      	ldr	r3, [pc, #192]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003c30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6892      	ldr	r2, [r2, #8]
 8003c38:	0211      	lsls	r1, r2, #8
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	68d2      	ldr	r2, [r2, #12]
 8003c3e:	06d2      	lsls	r2, r2, #27
 8003c40:	430a      	orrs	r2, r1
 8003c42:	492a      	ldr	r1, [pc, #168]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	610b      	str	r3, [r1, #16]
 8003c48:	e027      	b.n	8003c9a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d112      	bne.n	8003c76 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c50:	4b26      	ldr	r3, [pc, #152]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6892      	ldr	r2, [r2, #8]
 8003c60:	0211      	lsls	r1, r2, #8
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6912      	ldr	r2, [r2, #16]
 8003c66:	0852      	lsrs	r2, r2, #1
 8003c68:	3a01      	subs	r2, #1
 8003c6a:	0552      	lsls	r2, r2, #21
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	491f      	ldr	r1, [pc, #124]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	610b      	str	r3, [r1, #16]
 8003c74:	e011      	b.n	8003c9a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c76:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c7e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6892      	ldr	r2, [r2, #8]
 8003c86:	0211      	lsls	r1, r2, #8
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6952      	ldr	r2, [r2, #20]
 8003c8c:	0852      	lsrs	r2, r2, #1
 8003c8e:	3a01      	subs	r2, #1
 8003c90:	0652      	lsls	r2, r2, #25
 8003c92:	430a      	orrs	r2, r1
 8003c94:	4915      	ldr	r1, [pc, #84]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c9a:	4b14      	ldr	r3, [pc, #80]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a13      	ldr	r2, [pc, #76]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ca4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca6:	f7fd fd57 	bl	8001758 <HAL_GetTick>
 8003caa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cac:	e009      	b.n	8003cc2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cae:	f7fd fd53 	bl	8001758 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d902      	bls.n	8003cc2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	73fb      	strb	r3, [r7, #15]
          break;
 8003cc0:	e005      	b.n	8003cce <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cc2:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0ef      	beq.n	8003cae <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d106      	bne.n	8003ce2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cd4:	4b05      	ldr	r3, [pc, #20]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	4903      	ldr	r1, [pc, #12]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40021000 	.word	0x40021000

08003cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e095      	b.n	8003e2e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d108      	bne.n	8003d1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d12:	d009      	beq.n	8003d28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	61da      	str	r2, [r3, #28]
 8003d1a:	e005      	b.n	8003d28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd f878 	bl	8000e38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d68:	d902      	bls.n	8003d70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	e002      	b.n	8003d76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d7e:	d007      	beq.n	8003d90 <HAL_SPI_Init+0xa0>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d88:	d002      	beq.n	8003d90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd2:	ea42 0103 	orr.w	r1, r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dda:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	0c1b      	lsrs	r3, r3, #16
 8003dec:	f003 0204 	and.w	r2, r3, #4
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e0c:	ea42 0103 	orr.w	r1, r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b088      	sub	sp, #32
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	603b      	str	r3, [r7, #0]
 8003e42:	4613      	mov	r3, r2
 8003e44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_SPI_Transmit+0x22>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e158      	b.n	800410a <HAL_SPI_Transmit+0x2d4>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e60:	f7fd fc7a 	bl	8001758 <HAL_GetTick>
 8003e64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d002      	beq.n	8003e7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e76:	2302      	movs	r3, #2
 8003e78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e7a:	e13d      	b.n	80040f8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <HAL_SPI_Transmit+0x52>
 8003e82:	88fb      	ldrh	r3, [r7, #6]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d102      	bne.n	8003e8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e8c:	e134      	b.n	80040f8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2203      	movs	r2, #3
 8003e92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	88fa      	ldrh	r2, [r7, #6]
 8003ea6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	88fa      	ldrh	r2, [r7, #6]
 8003eac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed8:	d10f      	bne.n	8003efa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ee8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ef8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f04:	2b40      	cmp	r3, #64	; 0x40
 8003f06:	d007      	beq.n	8003f18 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f20:	d94b      	bls.n	8003fba <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_SPI_Transmit+0xfa>
 8003f2a:	8afb      	ldrh	r3, [r7, #22]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d13e      	bne.n	8003fae <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	881a      	ldrh	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f40:	1c9a      	adds	r2, r3, #2
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f54:	e02b      	b.n	8003fae <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d112      	bne.n	8003f8a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f68:	881a      	ldrh	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f74:	1c9a      	adds	r2, r3, #2
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f88:	e011      	b.n	8003fae <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f8a:	f7fd fbe5 	bl	8001758 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d803      	bhi.n	8003fa2 <HAL_SPI_Transmit+0x16c>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa0:	d102      	bne.n	8003fa8 <HAL_SPI_Transmit+0x172>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d102      	bne.n	8003fae <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fac:	e0a4      	b.n	80040f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1ce      	bne.n	8003f56 <HAL_SPI_Transmit+0x120>
 8003fb8:	e07c      	b.n	80040b4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_SPI_Transmit+0x192>
 8003fc2:	8afb      	ldrh	r3, [r7, #22]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d170      	bne.n	80040aa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d912      	bls.n	8003ff8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	881a      	ldrh	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	1c9a      	adds	r2, r3, #2
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b02      	subs	r3, #2
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ff6:	e058      	b.n	80040aa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	330c      	adds	r3, #12
 8004002:	7812      	ldrb	r2, [r2, #0]
 8004004:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800401e:	e044      	b.n	80040aa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b02      	cmp	r3, #2
 800402c:	d12b      	bne.n	8004086 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	d912      	bls.n	800405e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403c:	881a      	ldrh	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	1c9a      	adds	r2, r3, #2
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004052:	b29b      	uxth	r3, r3
 8004054:	3b02      	subs	r3, #2
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800405c:	e025      	b.n	80040aa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	330c      	adds	r3, #12
 8004068:	7812      	ldrb	r2, [r2, #0]
 800406a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004084:	e011      	b.n	80040aa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004086:	f7fd fb67 	bl	8001758 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d803      	bhi.n	800409e <HAL_SPI_Transmit+0x268>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409c:	d102      	bne.n	80040a4 <HAL_SPI_Transmit+0x26e>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d102      	bne.n	80040aa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040a8:	e026      	b.n	80040f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1b5      	bne.n	8004020 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	6839      	ldr	r1, [r7, #0]
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 fce3 	bl	8004a84 <SPI_EndRxTxTransaction>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2220      	movs	r2, #32
 80040c8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10a      	bne.n	80040e8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040d2:	2300      	movs	r3, #0
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	77fb      	strb	r3, [r7, #31]
 80040f4:	e000      	b.n	80040f8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80040f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004108:	7ffb      	ldrb	r3, [r7, #31]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3720      	adds	r7, #32
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b088      	sub	sp, #32
 8004116:	af02      	add	r7, sp, #8
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	603b      	str	r3, [r7, #0]
 800411e:	4613      	mov	r3, r2
 8004120:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800412e:	d112      	bne.n	8004156 <HAL_SPI_Receive+0x44>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10e      	bne.n	8004156 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2204      	movs	r2, #4
 800413c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004140:	88fa      	ldrh	r2, [r7, #6]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	4613      	mov	r3, r2
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f910 	bl	8004372 <HAL_SPI_TransmitReceive>
 8004152:	4603      	mov	r3, r0
 8004154:	e109      	b.n	800436a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_SPI_Receive+0x52>
 8004160:	2302      	movs	r3, #2
 8004162:	e102      	b.n	800436a <HAL_SPI_Receive+0x258>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800416c:	f7fd faf4 	bl	8001758 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b01      	cmp	r3, #1
 800417c:	d002      	beq.n	8004184 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800417e:	2302      	movs	r3, #2
 8004180:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004182:	e0e9      	b.n	8004358 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <HAL_SPI_Receive+0x7e>
 800418a:	88fb      	ldrh	r3, [r7, #6]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d102      	bne.n	8004196 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004194:	e0e0      	b.n	8004358 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2204      	movs	r2, #4
 800419a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	88fa      	ldrh	r2, [r7, #6]
 80041ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	88fa      	ldrh	r2, [r7, #6]
 80041b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041e0:	d908      	bls.n	80041f4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041f0:	605a      	str	r2, [r3, #4]
 80041f2:	e007      	b.n	8004204 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004202:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800420c:	d10f      	bne.n	800422e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800421c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800422c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004238:	2b40      	cmp	r3, #64	; 0x40
 800423a:	d007      	beq.n	800424c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800424a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004254:	d867      	bhi.n	8004326 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004256:	e030      	b.n	80042ba <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b01      	cmp	r3, #1
 8004264:	d117      	bne.n	8004296 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f103 020c 	add.w	r2, r3, #12
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	7812      	ldrb	r2, [r2, #0]
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004288:	b29b      	uxth	r3, r3
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004294:	e011      	b.n	80042ba <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004296:	f7fd fa5f 	bl	8001758 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d803      	bhi.n	80042ae <HAL_SPI_Receive+0x19c>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ac:	d102      	bne.n	80042b4 <HAL_SPI_Receive+0x1a2>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d102      	bne.n	80042ba <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80042b8:	e04e      	b.n	8004358 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1c8      	bne.n	8004258 <HAL_SPI_Receive+0x146>
 80042c6:	e034      	b.n	8004332 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d115      	bne.n	8004302 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	b292      	uxth	r2, r2
 80042e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	1c9a      	adds	r2, r3, #2
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004300:	e011      	b.n	8004326 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004302:	f7fd fa29 	bl	8001758 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d803      	bhi.n	800431a <HAL_SPI_Receive+0x208>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004318:	d102      	bne.n	8004320 <HAL_SPI_Receive+0x20e>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d102      	bne.n	8004326 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004324:	e018      	b.n	8004358 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1ca      	bne.n	80042c8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	6839      	ldr	r1, [r7, #0]
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 fb4c 	bl	80049d4 <SPI_EndRxTransaction>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2220      	movs	r2, #32
 8004346:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	75fb      	strb	r3, [r7, #23]
 8004354:	e000      	b.n	8004358 <HAL_SPI_Receive+0x246>
  }

error :
 8004356:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004368:	7dfb      	ldrb	r3, [r7, #23]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b08a      	sub	sp, #40	; 0x28
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	607a      	str	r2, [r7, #4]
 800437e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004380:	2301      	movs	r3, #1
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_SPI_TransmitReceive+0x26>
 8004394:	2302      	movs	r3, #2
 8004396:	e1fb      	b.n	8004790 <HAL_SPI_TransmitReceive+0x41e>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043a0:	f7fd f9da 	bl	8001758 <HAL_GetTick>
 80043a4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043ac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80043b4:	887b      	ldrh	r3, [r7, #2]
 80043b6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80043b8:	887b      	ldrh	r3, [r7, #2]
 80043ba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043bc:	7efb      	ldrb	r3, [r7, #27]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d00e      	beq.n	80043e0 <HAL_SPI_TransmitReceive+0x6e>
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043c8:	d106      	bne.n	80043d8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d102      	bne.n	80043d8 <HAL_SPI_TransmitReceive+0x66>
 80043d2:	7efb      	ldrb	r3, [r7, #27]
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d003      	beq.n	80043e0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80043d8:	2302      	movs	r3, #2
 80043da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80043de:	e1cd      	b.n	800477c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d005      	beq.n	80043f2 <HAL_SPI_TransmitReceive+0x80>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <HAL_SPI_TransmitReceive+0x80>
 80043ec:	887b      	ldrh	r3, [r7, #2]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d103      	bne.n	80043fa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80043f8:	e1c0      	b.n	800477c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b04      	cmp	r3, #4
 8004404:	d003      	beq.n	800440e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2205      	movs	r2, #5
 800440a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	887a      	ldrh	r2, [r7, #2]
 800441e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	887a      	ldrh	r2, [r7, #2]
 8004426:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	887a      	ldrh	r2, [r7, #2]
 8004434:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	887a      	ldrh	r2, [r7, #2]
 800443a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004450:	d802      	bhi.n	8004458 <HAL_SPI_TransmitReceive+0xe6>
 8004452:	8a3b      	ldrh	r3, [r7, #16]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d908      	bls.n	800446a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004466:	605a      	str	r2, [r3, #4]
 8004468:	e007      	b.n	800447a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004478:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004484:	2b40      	cmp	r3, #64	; 0x40
 8004486:	d007      	beq.n	8004498 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004496:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044a0:	d97c      	bls.n	800459c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_SPI_TransmitReceive+0x13e>
 80044aa:	8a7b      	ldrh	r3, [r7, #18]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d169      	bne.n	8004584 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b4:	881a      	ldrh	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c0:	1c9a      	adds	r2, r3, #2
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044d4:	e056      	b.n	8004584 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d11b      	bne.n	800451c <HAL_SPI_TransmitReceive+0x1aa>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d016      	beq.n	800451c <HAL_SPI_TransmitReceive+0x1aa>
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d113      	bne.n	800451c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	881a      	ldrh	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004504:	1c9a      	adds	r2, r3, #2
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b01      	cmp	r3, #1
 8004528:	d11c      	bne.n	8004564 <HAL_SPI_TransmitReceive+0x1f2>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d016      	beq.n	8004564 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	b292      	uxth	r2, r2
 8004542:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	1c9a      	adds	r2, r3, #2
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004560:	2301      	movs	r3, #1
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004564:	f7fd f8f8 	bl	8001758 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004570:	429a      	cmp	r2, r3
 8004572:	d807      	bhi.n	8004584 <HAL_SPI_TransmitReceive+0x212>
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457a:	d003      	beq.n	8004584 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004582:	e0fb      	b.n	800477c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1a3      	bne.n	80044d6 <HAL_SPI_TransmitReceive+0x164>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d19d      	bne.n	80044d6 <HAL_SPI_TransmitReceive+0x164>
 800459a:	e0df      	b.n	800475c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_SPI_TransmitReceive+0x23a>
 80045a4:	8a7b      	ldrh	r3, [r7, #18]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	f040 80cb 	bne.w	8004742 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d912      	bls.n	80045dc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	881a      	ldrh	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c6:	1c9a      	adds	r2, r3, #2
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b02      	subs	r3, #2
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045da:	e0b2      	b.n	8004742 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	7812      	ldrb	r2, [r2, #0]
 80045e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004602:	e09e      	b.n	8004742 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b02      	cmp	r3, #2
 8004610:	d134      	bne.n	800467c <HAL_SPI_TransmitReceive+0x30a>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004616:	b29b      	uxth	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d02f      	beq.n	800467c <HAL_SPI_TransmitReceive+0x30a>
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	2b01      	cmp	r3, #1
 8004620:	d12c      	bne.n	800467c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b01      	cmp	r3, #1
 800462a:	d912      	bls.n	8004652 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	881a      	ldrh	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	1c9a      	adds	r2, r3, #2
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b02      	subs	r3, #2
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004650:	e012      	b.n	8004678 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	330c      	adds	r3, #12
 800465c:	7812      	ldrb	r2, [r2, #0]
 800465e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b01      	cmp	r3, #1
 8004688:	d148      	bne.n	800471c <HAL_SPI_TransmitReceive+0x3aa>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d042      	beq.n	800471c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d923      	bls.n	80046ea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	b292      	uxth	r2, r2
 80046ae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	1c9a      	adds	r2, r3, #2
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3b02      	subs	r3, #2
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d81f      	bhi.n	8004718 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046e6:	605a      	str	r2, [r3, #4]
 80046e8:	e016      	b.n	8004718 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f103 020c 	add.w	r2, r3, #12
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	7812      	ldrb	r2, [r2, #0]
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004718:	2301      	movs	r3, #1
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800471c:	f7fd f81c 	bl	8001758 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004728:	429a      	cmp	r2, r3
 800472a:	d803      	bhi.n	8004734 <HAL_SPI_TransmitReceive+0x3c2>
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004732:	d102      	bne.n	800473a <HAL_SPI_TransmitReceive+0x3c8>
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004740:	e01c      	b.n	800477c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004746:	b29b      	uxth	r3, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	f47f af5b 	bne.w	8004604 <HAL_SPI_TransmitReceive+0x292>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	f47f af54 	bne.w	8004604 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800475c:	69fa      	ldr	r2, [r7, #28]
 800475e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f98f 	bl	8004a84 <SPI_EndRxTxTransaction>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d006      	beq.n	800477a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2220      	movs	r2, #32
 8004776:	661a      	str	r2, [r3, #96]	; 0x60
 8004778:	e000      	b.n	800477c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800477a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800478c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004790:	4618      	mov	r0, r3
 8004792:	3728      	adds	r7, #40	; 0x28
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	4613      	mov	r3, r2
 80047a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047a8:	f7fc ffd6 	bl	8001758 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b0:	1a9b      	subs	r3, r3, r2
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	4413      	add	r3, r2
 80047b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047b8:	f7fc ffce 	bl	8001758 <HAL_GetTick>
 80047bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047be:	4b39      	ldr	r3, [pc, #228]	; (80048a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	015b      	lsls	r3, r3, #5
 80047c4:	0d1b      	lsrs	r3, r3, #20
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	fb02 f303 	mul.w	r3, r2, r3
 80047cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ce:	e054      	b.n	800487a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d6:	d050      	beq.n	800487a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047d8:	f7fc ffbe 	bl	8001758 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d902      	bls.n	80047ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d13d      	bne.n	800486a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004806:	d111      	bne.n	800482c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004810:	d004      	beq.n	800481c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481a:	d107      	bne.n	800482c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800482a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004834:	d10f      	bne.n	8004856 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004854:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e017      	b.n	800489a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	3b01      	subs	r3, #1
 8004878:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4013      	ands	r3, r2
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	429a      	cmp	r2, r3
 8004888:	bf0c      	ite	eq
 800488a:	2301      	moveq	r3, #1
 800488c:	2300      	movne	r3, #0
 800488e:	b2db      	uxtb	r3, r3
 8004890:	461a      	mov	r2, r3
 8004892:	79fb      	ldrb	r3, [r7, #7]
 8004894:	429a      	cmp	r2, r3
 8004896:	d19b      	bne.n	80047d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3720      	adds	r7, #32
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000004 	.word	0x20000004

080048a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08a      	sub	sp, #40	; 0x28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80048ba:	f7fc ff4d 	bl	8001758 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	4413      	add	r3, r2
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80048ca:	f7fc ff45 	bl	8001758 <HAL_GetTick>
 80048ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	330c      	adds	r3, #12
 80048d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80048d8:	4b3d      	ldr	r3, [pc, #244]	; (80049d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	00da      	lsls	r2, r3, #3
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	0d1b      	lsrs	r3, r3, #20
 80048e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80048f0:	e060      	b.n	80049b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80048f8:	d107      	bne.n	800490a <SPI_WaitFifoStateUntilTimeout+0x62>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d104      	bne.n	800490a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004908:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004910:	d050      	beq.n	80049b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004912:	f7fc ff21 	bl	8001758 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491e:	429a      	cmp	r2, r3
 8004920:	d902      	bls.n	8004928 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	2b00      	cmp	r3, #0
 8004926:	d13d      	bne.n	80049a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004936:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004940:	d111      	bne.n	8004966 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494a:	d004      	beq.n	8004956 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004954:	d107      	bne.n	8004966 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004964:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800496e:	d10f      	bne.n	8004990 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800498e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e010      	b.n	80049c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	4013      	ands	r3, r2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d196      	bne.n	80048f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3728      	adds	r7, #40	; 0x28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20000004 	.word	0x20000004

080049d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af02      	add	r7, sp, #8
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049e8:	d111      	bne.n	8004a0e <SPI_EndRxTransaction+0x3a>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f2:	d004      	beq.n	80049fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049fc:	d107      	bne.n	8004a0e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a0c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2200      	movs	r2, #0
 8004a16:	2180      	movs	r1, #128	; 0x80
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f7ff febd 	bl	8004798 <SPI_WaitFlagStateUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d007      	beq.n	8004a34 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a28:	f043 0220 	orr.w	r2, r3, #32
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e023      	b.n	8004a7c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a3c:	d11d      	bne.n	8004a7a <SPI_EndRxTransaction+0xa6>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a46:	d004      	beq.n	8004a52 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a50:	d113      	bne.n	8004a7a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f7ff ff22 	bl	80048a8 <SPI_WaitFifoStateUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a6e:	f043 0220 	orr.w	r2, r3, #32
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e000      	b.n	8004a7c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f7ff ff03 	bl	80048a8 <SPI_WaitFifoStateUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d007      	beq.n	8004ab8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aac:	f043 0220 	orr.w	r2, r3, #32
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e027      	b.n	8004b08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2180      	movs	r1, #128	; 0x80
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f7ff fe68 	bl	8004798 <SPI_WaitFlagStateUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad2:	f043 0220 	orr.w	r2, r3, #32
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e014      	b.n	8004b08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f7ff fedc 	bl	80048a8 <SPI_WaitFifoStateUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d007      	beq.n	8004b06 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004afa:	f043 0220 	orr.w	r2, r3, #32
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e000      	b.n	8004b08 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e049      	b.n	8004bb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fc fca4 	bl	8001484 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4610      	mov	r0, r2
 8004b50:	f000 fcf0 	bl	8005534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d001      	beq.n	8004bd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e03b      	b.n	8004c50 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0201 	orr.w	r2, r2, #1
 8004bee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a19      	ldr	r2, [pc, #100]	; (8004c5c <HAL_TIM_Base_Start_IT+0x9c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d009      	beq.n	8004c0e <HAL_TIM_Base_Start_IT+0x4e>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c02:	d004      	beq.n	8004c0e <HAL_TIM_Base_Start_IT+0x4e>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a15      	ldr	r2, [pc, #84]	; (8004c60 <HAL_TIM_Base_Start_IT+0xa0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d115      	bne.n	8004c3a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	4b13      	ldr	r3, [pc, #76]	; (8004c64 <HAL_TIM_Base_Start_IT+0xa4>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b06      	cmp	r3, #6
 8004c1e:	d015      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0x8c>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c26:	d011      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0201 	orr.w	r2, r2, #1
 8004c36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c38:	e008      	b.n	8004c4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0201 	orr.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	e000      	b.n	8004c4e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	40012c00 	.word	0x40012c00
 8004c60:	40014000 	.word	0x40014000
 8004c64:	00010007 	.word	0x00010007

08004c68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e049      	b.n	8004d0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f841 	bl	8004d16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	f000 fc44 	bl	8005534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
	...

08004d2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d109      	bne.n	8004d50 <HAL_TIM_PWM_Start+0x24>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	bf14      	ite	ne
 8004d48:	2301      	movne	r3, #1
 8004d4a:	2300      	moveq	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	e03c      	b.n	8004dca <HAL_TIM_PWM_Start+0x9e>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d109      	bne.n	8004d6a <HAL_TIM_PWM_Start+0x3e>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	bf14      	ite	ne
 8004d62:	2301      	movne	r3, #1
 8004d64:	2300      	moveq	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	e02f      	b.n	8004dca <HAL_TIM_PWM_Start+0x9e>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d109      	bne.n	8004d84 <HAL_TIM_PWM_Start+0x58>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	bf14      	ite	ne
 8004d7c:	2301      	movne	r3, #1
 8004d7e:	2300      	moveq	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	e022      	b.n	8004dca <HAL_TIM_PWM_Start+0x9e>
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	2b0c      	cmp	r3, #12
 8004d88:	d109      	bne.n	8004d9e <HAL_TIM_PWM_Start+0x72>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	bf14      	ite	ne
 8004d96:	2301      	movne	r3, #1
 8004d98:	2300      	moveq	r3, #0
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	e015      	b.n	8004dca <HAL_TIM_PWM_Start+0x9e>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b10      	cmp	r3, #16
 8004da2:	d109      	bne.n	8004db8 <HAL_TIM_PWM_Start+0x8c>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	bf14      	ite	ne
 8004db0:	2301      	movne	r3, #1
 8004db2:	2300      	moveq	r3, #0
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	e008      	b.n	8004dca <HAL_TIM_PWM_Start+0x9e>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	bf14      	ite	ne
 8004dc4:	2301      	movne	r3, #1
 8004dc6:	2300      	moveq	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e07e      	b.n	8004ed0 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d104      	bne.n	8004de2 <HAL_TIM_PWM_Start+0xb6>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004de0:	e023      	b.n	8004e2a <HAL_TIM_PWM_Start+0xfe>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d104      	bne.n	8004df2 <HAL_TIM_PWM_Start+0xc6>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004df0:	e01b      	b.n	8004e2a <HAL_TIM_PWM_Start+0xfe>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d104      	bne.n	8004e02 <HAL_TIM_PWM_Start+0xd6>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e00:	e013      	b.n	8004e2a <HAL_TIM_PWM_Start+0xfe>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b0c      	cmp	r3, #12
 8004e06:	d104      	bne.n	8004e12 <HAL_TIM_PWM_Start+0xe6>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e10:	e00b      	b.n	8004e2a <HAL_TIM_PWM_Start+0xfe>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b10      	cmp	r3, #16
 8004e16:	d104      	bne.n	8004e22 <HAL_TIM_PWM_Start+0xf6>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e20:	e003      	b.n	8004e2a <HAL_TIM_PWM_Start+0xfe>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2202      	movs	r2, #2
 8004e26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	6839      	ldr	r1, [r7, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fefa 	bl	8005c2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a26      	ldr	r2, [pc, #152]	; (8004ed8 <HAL_TIM_PWM_Start+0x1ac>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d009      	beq.n	8004e56 <HAL_TIM_PWM_Start+0x12a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a25      	ldr	r2, [pc, #148]	; (8004edc <HAL_TIM_PWM_Start+0x1b0>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d004      	beq.n	8004e56 <HAL_TIM_PWM_Start+0x12a>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a23      	ldr	r2, [pc, #140]	; (8004ee0 <HAL_TIM_PWM_Start+0x1b4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d101      	bne.n	8004e5a <HAL_TIM_PWM_Start+0x12e>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <HAL_TIM_PWM_Start+0x130>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d007      	beq.n	8004e70 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a18      	ldr	r2, [pc, #96]	; (8004ed8 <HAL_TIM_PWM_Start+0x1ac>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d009      	beq.n	8004e8e <HAL_TIM_PWM_Start+0x162>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e82:	d004      	beq.n	8004e8e <HAL_TIM_PWM_Start+0x162>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a14      	ldr	r2, [pc, #80]	; (8004edc <HAL_TIM_PWM_Start+0x1b0>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d115      	bne.n	8004eba <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <HAL_TIM_PWM_Start+0x1b8>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b06      	cmp	r3, #6
 8004e9e:	d015      	beq.n	8004ecc <HAL_TIM_PWM_Start+0x1a0>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea6:	d011      	beq.n	8004ecc <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb8:	e008      	b.n	8004ecc <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0201 	orr.w	r2, r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	e000      	b.n	8004ece <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ecc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	40012c00 	.word	0x40012c00
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	40014400 	.word	0x40014400
 8004ee4:	00010007 	.word	0x00010007

08004ee8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d122      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d11b      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0202 	mvn.w	r2, #2
 8004f14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fae3 	bl	80054f6 <HAL_TIM_IC_CaptureCallback>
 8004f30:	e005      	b.n	8004f3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 fad5 	bl	80054e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fae6 	bl	800550a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d122      	bne.n	8004f98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d11b      	bne.n	8004f98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0204 	mvn.w	r2, #4
 8004f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fab9 	bl	80054f6 <HAL_TIM_IC_CaptureCallback>
 8004f84:	e005      	b.n	8004f92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 faab 	bl	80054e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 fabc 	bl	800550a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b08      	cmp	r3, #8
 8004fa4:	d122      	bne.n	8004fec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0308 	and.w	r3, r3, #8
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d11b      	bne.n	8004fec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f06f 0208 	mvn.w	r2, #8
 8004fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2204      	movs	r2, #4
 8004fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fa8f 	bl	80054f6 <HAL_TIM_IC_CaptureCallback>
 8004fd8:	e005      	b.n	8004fe6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fa81 	bl	80054e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fa92 	bl	800550a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0310 	and.w	r3, r3, #16
 8004ff6:	2b10      	cmp	r3, #16
 8004ff8:	d122      	bne.n	8005040 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	2b10      	cmp	r3, #16
 8005006:	d11b      	bne.n	8005040 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0210 	mvn.w	r2, #16
 8005010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2208      	movs	r2, #8
 8005016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fa65 	bl	80054f6 <HAL_TIM_IC_CaptureCallback>
 800502c:	e005      	b.n	800503a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fa57 	bl	80054e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fa68 	bl	800550a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b01      	cmp	r3, #1
 800504c:	d10e      	bne.n	800506c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b01      	cmp	r3, #1
 800505a:	d107      	bne.n	800506c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0201 	mvn.w	r2, #1
 8005064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fb fe52 	bl	8000d10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005076:	2b80      	cmp	r3, #128	; 0x80
 8005078:	d10e      	bne.n	8005098 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005084:	2b80      	cmp	r3, #128	; 0x80
 8005086:	d107      	bne.n	8005098 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fed8 	bl	8005e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a6:	d10e      	bne.n	80050c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b2:	2b80      	cmp	r3, #128	; 0x80
 80050b4:	d107      	bne.n	80050c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fecb 	bl	8005e5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b40      	cmp	r3, #64	; 0x40
 80050d2:	d10e      	bne.n	80050f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050de:	2b40      	cmp	r3, #64	; 0x40
 80050e0:	d107      	bne.n	80050f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fa16 	bl	800551e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f003 0320 	and.w	r3, r3, #32
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d10e      	bne.n	800511e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b20      	cmp	r3, #32
 800510c:	d107      	bne.n	800511e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f06f 0220 	mvn.w	r2, #32
 8005116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fe8b 	bl	8005e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800511e:	bf00      	nop
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
	...

08005128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005142:	2302      	movs	r3, #2
 8005144:	e0ff      	b.n	8005346 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b14      	cmp	r3, #20
 8005152:	f200 80f0 	bhi.w	8005336 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005156:	a201      	add	r2, pc, #4	; (adr r2, 800515c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515c:	080051b1 	.word	0x080051b1
 8005160:	08005337 	.word	0x08005337
 8005164:	08005337 	.word	0x08005337
 8005168:	08005337 	.word	0x08005337
 800516c:	080051f1 	.word	0x080051f1
 8005170:	08005337 	.word	0x08005337
 8005174:	08005337 	.word	0x08005337
 8005178:	08005337 	.word	0x08005337
 800517c:	08005233 	.word	0x08005233
 8005180:	08005337 	.word	0x08005337
 8005184:	08005337 	.word	0x08005337
 8005188:	08005337 	.word	0x08005337
 800518c:	08005273 	.word	0x08005273
 8005190:	08005337 	.word	0x08005337
 8005194:	08005337 	.word	0x08005337
 8005198:	08005337 	.word	0x08005337
 800519c:	080052b5 	.word	0x080052b5
 80051a0:	08005337 	.word	0x08005337
 80051a4:	08005337 	.word	0x08005337
 80051a8:	08005337 	.word	0x08005337
 80051ac:	080052f5 	.word	0x080052f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68b9      	ldr	r1, [r7, #8]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fa20 	bl	80055fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699a      	ldr	r2, [r3, #24]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0208 	orr.w	r2, r2, #8
 80051ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699a      	ldr	r2, [r3, #24]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0204 	bic.w	r2, r2, #4
 80051da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6999      	ldr	r1, [r3, #24]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	619a      	str	r2, [r3, #24]
      break;
 80051ee:	e0a5      	b.n	800533c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fa7c 	bl	80056f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699a      	ldr	r2, [r3, #24]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800520a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800521a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6999      	ldr	r1, [r3, #24]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	021a      	lsls	r2, r3, #8
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	619a      	str	r2, [r3, #24]
      break;
 8005230:	e084      	b.n	800533c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fad5 	bl	80057e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0208 	orr.w	r2, r2, #8
 800524c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69da      	ldr	r2, [r3, #28]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0204 	bic.w	r2, r2, #4
 800525c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69d9      	ldr	r1, [r3, #28]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	61da      	str	r2, [r3, #28]
      break;
 8005270:	e064      	b.n	800533c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fb2d 	bl	80058d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69da      	ldr	r2, [r3, #28]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800528c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69da      	ldr	r2, [r3, #28]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800529c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69d9      	ldr	r1, [r3, #28]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	021a      	lsls	r2, r3, #8
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	61da      	str	r2, [r3, #28]
      break;
 80052b2:	e043      	b.n	800533c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fb6a 	bl	8005994 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0208 	orr.w	r2, r2, #8
 80052ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0204 	bic.w	r2, r2, #4
 80052de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052f2:	e023      	b.n	800533c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fba2 	bl	8005a44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800530e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800531e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	021a      	lsls	r2, r3, #8
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005334:	e002      	b.n	800533c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	75fb      	strb	r3, [r7, #23]
      break;
 800533a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005344:	7dfb      	ldrb	r3, [r7, #23]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop

08005350 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_TIM_ConfigClockSource+0x1c>
 8005368:	2302      	movs	r3, #2
 800536a:	e0b6      	b.n	80054da <HAL_TIM_ConfigClockSource+0x18a>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800538a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800538e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005396:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a8:	d03e      	beq.n	8005428 <HAL_TIM_ConfigClockSource+0xd8>
 80053aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ae:	f200 8087 	bhi.w	80054c0 <HAL_TIM_ConfigClockSource+0x170>
 80053b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b6:	f000 8086 	beq.w	80054c6 <HAL_TIM_ConfigClockSource+0x176>
 80053ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053be:	d87f      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x170>
 80053c0:	2b70      	cmp	r3, #112	; 0x70
 80053c2:	d01a      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0xaa>
 80053c4:	2b70      	cmp	r3, #112	; 0x70
 80053c6:	d87b      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x170>
 80053c8:	2b60      	cmp	r3, #96	; 0x60
 80053ca:	d050      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x11e>
 80053cc:	2b60      	cmp	r3, #96	; 0x60
 80053ce:	d877      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x170>
 80053d0:	2b50      	cmp	r3, #80	; 0x50
 80053d2:	d03c      	beq.n	800544e <HAL_TIM_ConfigClockSource+0xfe>
 80053d4:	2b50      	cmp	r3, #80	; 0x50
 80053d6:	d873      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x170>
 80053d8:	2b40      	cmp	r3, #64	; 0x40
 80053da:	d058      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x13e>
 80053dc:	2b40      	cmp	r3, #64	; 0x40
 80053de:	d86f      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x170>
 80053e0:	2b30      	cmp	r3, #48	; 0x30
 80053e2:	d064      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x15e>
 80053e4:	2b30      	cmp	r3, #48	; 0x30
 80053e6:	d86b      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x170>
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	d060      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x15e>
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d867      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x170>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d05c      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x15e>
 80053f4:	2b10      	cmp	r3, #16
 80053f6:	d05a      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x15e>
 80053f8:	e062      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800540a:	f000 fbef 	bl	8005bec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800541c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	609a      	str	r2, [r3, #8]
      break;
 8005426:	e04f      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005438:	f000 fbd8 	bl	8005bec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800544a:	609a      	str	r2, [r3, #8]
      break;
 800544c:	e03c      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800545a:	461a      	mov	r2, r3
 800545c:	f000 fb4c 	bl	8005af8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2150      	movs	r1, #80	; 0x50
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fba5 	bl	8005bb6 <TIM_ITRx_SetConfig>
      break;
 800546c:	e02c      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800547a:	461a      	mov	r2, r3
 800547c:	f000 fb6b 	bl	8005b56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2160      	movs	r1, #96	; 0x60
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fb95 	bl	8005bb6 <TIM_ITRx_SetConfig>
      break;
 800548c:	e01c      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800549a:	461a      	mov	r2, r3
 800549c:	f000 fb2c 	bl	8005af8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2140      	movs	r1, #64	; 0x40
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fb85 	bl	8005bb6 <TIM_ITRx_SetConfig>
      break;
 80054ac:	e00c      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4619      	mov	r1, r3
 80054b8:	4610      	mov	r0, r2
 80054ba:	f000 fb7c 	bl	8005bb6 <TIM_ITRx_SetConfig>
      break;
 80054be:	e003      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	73fb      	strb	r3, [r7, #15]
      break;
 80054c4:	e000      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80054c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
	...

08005534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a2a      	ldr	r2, [pc, #168]	; (80055f0 <TIM_Base_SetConfig+0xbc>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d003      	beq.n	8005554 <TIM_Base_SetConfig+0x20>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005552:	d108      	bne.n	8005566 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a21      	ldr	r2, [pc, #132]	; (80055f0 <TIM_Base_SetConfig+0xbc>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00b      	beq.n	8005586 <TIM_Base_SetConfig+0x52>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005574:	d007      	beq.n	8005586 <TIM_Base_SetConfig+0x52>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a1e      	ldr	r2, [pc, #120]	; (80055f4 <TIM_Base_SetConfig+0xc0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d003      	beq.n	8005586 <TIM_Base_SetConfig+0x52>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a1d      	ldr	r2, [pc, #116]	; (80055f8 <TIM_Base_SetConfig+0xc4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d108      	bne.n	8005598 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800558c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a0c      	ldr	r2, [pc, #48]	; (80055f0 <TIM_Base_SetConfig+0xbc>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d007      	beq.n	80055d4 <TIM_Base_SetConfig+0xa0>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a0b      	ldr	r2, [pc, #44]	; (80055f4 <TIM_Base_SetConfig+0xc0>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d003      	beq.n	80055d4 <TIM_Base_SetConfig+0xa0>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a0a      	ldr	r2, [pc, #40]	; (80055f8 <TIM_Base_SetConfig+0xc4>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d103      	bne.n	80055dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	691a      	ldr	r2, [r3, #16]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	615a      	str	r2, [r3, #20]
}
 80055e2:	bf00      	nop
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40012c00 	.word	0x40012c00
 80055f4:	40014000 	.word	0x40014000
 80055f8:	40014400 	.word	0x40014400

080055fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	f023 0201 	bic.w	r2, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800562a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0303 	bic.w	r3, r3, #3
 8005636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f023 0302 	bic.w	r3, r3, #2
 8005648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4313      	orrs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a24      	ldr	r2, [pc, #144]	; (80056e8 <TIM_OC1_SetConfig+0xec>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d007      	beq.n	800566c <TIM_OC1_SetConfig+0x70>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a23      	ldr	r2, [pc, #140]	; (80056ec <TIM_OC1_SetConfig+0xf0>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d003      	beq.n	800566c <TIM_OC1_SetConfig+0x70>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a22      	ldr	r2, [pc, #136]	; (80056f0 <TIM_OC1_SetConfig+0xf4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d10c      	bne.n	8005686 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f023 0308 	bic.w	r3, r3, #8
 8005672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f023 0304 	bic.w	r3, r3, #4
 8005684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a17      	ldr	r2, [pc, #92]	; (80056e8 <TIM_OC1_SetConfig+0xec>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d007      	beq.n	800569e <TIM_OC1_SetConfig+0xa2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a16      	ldr	r2, [pc, #88]	; (80056ec <TIM_OC1_SetConfig+0xf0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d003      	beq.n	800569e <TIM_OC1_SetConfig+0xa2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a15      	ldr	r2, [pc, #84]	; (80056f0 <TIM_OC1_SetConfig+0xf4>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d111      	bne.n	80056c2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4313      	orrs	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	621a      	str	r2, [r3, #32]
}
 80056dc:	bf00      	nop
 80056de:	371c      	adds	r7, #28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	40012c00 	.word	0x40012c00
 80056ec:	40014000 	.word	0x40014000
 80056f0:	40014400 	.word	0x40014400

080056f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f023 0210 	bic.w	r2, r3, #16
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800572e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	021b      	lsls	r3, r3, #8
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	4313      	orrs	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f023 0320 	bic.w	r3, r3, #32
 8005742:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	011b      	lsls	r3, r3, #4
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	4313      	orrs	r3, r2
 800574e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a22      	ldr	r2, [pc, #136]	; (80057dc <TIM_OC2_SetConfig+0xe8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d10d      	bne.n	8005774 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800575e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4313      	orrs	r3, r2
 800576a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005772:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a19      	ldr	r2, [pc, #100]	; (80057dc <TIM_OC2_SetConfig+0xe8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d007      	beq.n	800578c <TIM_OC2_SetConfig+0x98>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a18      	ldr	r2, [pc, #96]	; (80057e0 <TIM_OC2_SetConfig+0xec>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d003      	beq.n	800578c <TIM_OC2_SetConfig+0x98>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a17      	ldr	r2, [pc, #92]	; (80057e4 <TIM_OC2_SetConfig+0xf0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d113      	bne.n	80057b4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005792:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800579a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	621a      	str	r2, [r3, #32]
}
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	40012c00 	.word	0x40012c00
 80057e0:	40014000 	.word	0x40014000
 80057e4:	40014400 	.word	0x40014400

080057e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	021b      	lsls	r3, r3, #8
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	4313      	orrs	r3, r2
 8005840:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a21      	ldr	r2, [pc, #132]	; (80058cc <TIM_OC3_SetConfig+0xe4>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d10d      	bne.n	8005866 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005850:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005864:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a18      	ldr	r2, [pc, #96]	; (80058cc <TIM_OC3_SetConfig+0xe4>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d007      	beq.n	800587e <TIM_OC3_SetConfig+0x96>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a17      	ldr	r2, [pc, #92]	; (80058d0 <TIM_OC3_SetConfig+0xe8>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d003      	beq.n	800587e <TIM_OC3_SetConfig+0x96>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a16      	ldr	r2, [pc, #88]	; (80058d4 <TIM_OC3_SetConfig+0xec>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d113      	bne.n	80058a6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800588c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	621a      	str	r2, [r3, #32]
}
 80058c0:	bf00      	nop
 80058c2:	371c      	adds	r7, #28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	40012c00 	.word	0x40012c00
 80058d0:	40014000 	.word	0x40014000
 80058d4:	40014400 	.word	0x40014400

080058d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800590a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	021b      	lsls	r3, r3, #8
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4313      	orrs	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005926:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	031b      	lsls	r3, r3, #12
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	4313      	orrs	r3, r2
 8005932:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a14      	ldr	r2, [pc, #80]	; (8005988 <TIM_OC4_SetConfig+0xb0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d007      	beq.n	800594c <TIM_OC4_SetConfig+0x74>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a13      	ldr	r2, [pc, #76]	; (800598c <TIM_OC4_SetConfig+0xb4>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d003      	beq.n	800594c <TIM_OC4_SetConfig+0x74>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a12      	ldr	r2, [pc, #72]	; (8005990 <TIM_OC4_SetConfig+0xb8>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d109      	bne.n	8005960 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005952:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	019b      	lsls	r3, r3, #6
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40012c00 	.word	0x40012c00
 800598c:	40014000 	.word	0x40014000
 8005990:	40014400 	.word	0x40014400

08005994 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80059d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	041b      	lsls	r3, r3, #16
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a13      	ldr	r2, [pc, #76]	; (8005a38 <TIM_OC5_SetConfig+0xa4>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d007      	beq.n	80059fe <TIM_OC5_SetConfig+0x6a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a12      	ldr	r2, [pc, #72]	; (8005a3c <TIM_OC5_SetConfig+0xa8>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d003      	beq.n	80059fe <TIM_OC5_SetConfig+0x6a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a11      	ldr	r2, [pc, #68]	; (8005a40 <TIM_OC5_SetConfig+0xac>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d109      	bne.n	8005a12 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	021b      	lsls	r3, r3, #8
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	621a      	str	r2, [r3, #32]
}
 8005a2c:	bf00      	nop
 8005a2e:	371c      	adds	r7, #28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	40012c00 	.word	0x40012c00
 8005a3c:	40014000 	.word	0x40014000
 8005a40:	40014400 	.word	0x40014400

08005a44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	021b      	lsls	r3, r3, #8
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	051b      	lsls	r3, r3, #20
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a14      	ldr	r2, [pc, #80]	; (8005aec <TIM_OC6_SetConfig+0xa8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d007      	beq.n	8005ab0 <TIM_OC6_SetConfig+0x6c>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a13      	ldr	r2, [pc, #76]	; (8005af0 <TIM_OC6_SetConfig+0xac>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d003      	beq.n	8005ab0 <TIM_OC6_SetConfig+0x6c>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a12      	ldr	r2, [pc, #72]	; (8005af4 <TIM_OC6_SetConfig+0xb0>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d109      	bne.n	8005ac4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	029b      	lsls	r3, r3, #10
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	621a      	str	r2, [r3, #32]
}
 8005ade:	bf00      	nop
 8005ae0:	371c      	adds	r7, #28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	40012c00 	.word	0x40012c00
 8005af0:	40014000 	.word	0x40014000
 8005af4:	40014400 	.word	0x40014400

08005af8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	f023 0201 	bic.w	r2, r3, #1
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	011b      	lsls	r3, r3, #4
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f023 030a 	bic.w	r3, r3, #10
 8005b34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	621a      	str	r2, [r3, #32]
}
 8005b4a:	bf00      	nop
 8005b4c:	371c      	adds	r7, #28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b087      	sub	sp, #28
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	60f8      	str	r0, [r7, #12]
 8005b5e:	60b9      	str	r1, [r7, #8]
 8005b60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	f023 0210 	bic.w	r2, r3, #16
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	031b      	lsls	r3, r3, #12
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	621a      	str	r2, [r3, #32]
}
 8005baa:	bf00      	nop
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b085      	sub	sp, #20
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	f043 0307 	orr.w	r3, r3, #7
 8005bd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	609a      	str	r2, [r3, #8]
}
 8005be0:	bf00      	nop
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	021a      	lsls	r2, r3, #8
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	609a      	str	r2, [r3, #8]
}
 8005c20:	bf00      	nop
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f003 031f 	and.w	r3, r3, #31
 8005c3e:	2201      	movs	r2, #1
 8005c40:	fa02 f303 	lsl.w	r3, r2, r3
 8005c44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a1a      	ldr	r2, [r3, #32]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	43db      	mvns	r3, r3
 8005c4e:	401a      	ands	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a1a      	ldr	r2, [r3, #32]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f003 031f 	and.w	r3, r3, #31
 8005c5e:	6879      	ldr	r1, [r7, #4]
 8005c60:	fa01 f303 	lsl.w	r3, r1, r3
 8005c64:	431a      	orrs	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	621a      	str	r2, [r3, #32]
}
 8005c6a:	bf00      	nop
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
	...

08005c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e04f      	b.n	8005d30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a21      	ldr	r2, [pc, #132]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d108      	bne.n	8005ccc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cc0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a14      	ldr	r2, [pc, #80]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d009      	beq.n	8005d04 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf8:	d004      	beq.n	8005d04 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a10      	ldr	r2, [pc, #64]	; (8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d10c      	bne.n	8005d1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	40012c00 	.word	0x40012c00
 8005d40:	40014000 	.word	0x40014000

08005d44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e060      	b.n	8005e22 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	041b      	lsls	r3, r3, #16
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a14      	ldr	r2, [pc, #80]	; (8005e30 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d115      	bne.n	8005e10 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	051b      	lsls	r3, r3, #20
 8005df0:	4313      	orrs	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	40012c00 	.word	0x40012c00

08005e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e040      	b.n	8005f04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d106      	bne.n	8005e98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7fb fbb2 	bl	80015fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2224      	movs	r2, #36	; 0x24
 8005e9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0201 	bic.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f8c0 	bl	8006034 <UART_SetConfig>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d101      	bne.n	8005ebe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e022      	b.n	8005f04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fae0 	bl	800648c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005eea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0201 	orr.w	r2, r2, #1
 8005efa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fb67 	bl	80065d0 <UART_CheckIdleState>
 8005f02:	4603      	mov	r3, r0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b08a      	sub	sp, #40	; 0x28
 8005f10:	af02      	add	r7, sp, #8
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	f040 8082 	bne.w	800602a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d002      	beq.n	8005f32 <HAL_UART_Transmit+0x26>
 8005f2c:	88fb      	ldrh	r3, [r7, #6]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e07a      	b.n	800602c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_UART_Transmit+0x38>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e073      	b.n	800602c <HAL_UART_Transmit+0x120>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2221      	movs	r2, #33	; 0x21
 8005f58:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f5a:	f7fb fbfd 	bl	8001758 <HAL_GetTick>
 8005f5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	88fa      	ldrh	r2, [r7, #6]
 8005f64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	88fa      	ldrh	r2, [r7, #6]
 8005f6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f78:	d108      	bne.n	8005f8c <HAL_UART_Transmit+0x80>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d104      	bne.n	8005f8c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005f82:	2300      	movs	r3, #0
 8005f84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	e003      	b.n	8005f94 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005f9c:	e02d      	b.n	8005ffa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2180      	movs	r1, #128	; 0x80
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 fb5a 	bl	8006662 <UART_WaitOnFlagUntilTimeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e039      	b.n	800602c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10b      	bne.n	8005fd6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	881a      	ldrh	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fca:	b292      	uxth	r2, r2
 8005fcc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	3302      	adds	r3, #2
 8005fd2:	61bb      	str	r3, [r7, #24]
 8005fd4:	e008      	b.n	8005fe8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	781a      	ldrb	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	b292      	uxth	r2, r2
 8005fe0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1cb      	bne.n	8005f9e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2200      	movs	r2, #0
 800600e:	2140      	movs	r1, #64	; 0x40
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 fb26 	bl	8006662 <UART_WaitOnFlagUntilTimeout>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e005      	b.n	800602c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	e000      	b.n	800602c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800602a:	2302      	movs	r3, #2
  }
}
 800602c:	4618      	mov	r0, r3
 800602e:	3720      	adds	r7, #32
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006038:	b08a      	sub	sp, #40	; 0x28
 800603a:	af00      	add	r7, sp, #0
 800603c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	431a      	orrs	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	431a      	orrs	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	4313      	orrs	r3, r2
 800605a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	4bb4      	ldr	r3, [pc, #720]	; (8006334 <UART_SetConfig+0x300>)
 8006064:	4013      	ands	r3, r2
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	6812      	ldr	r2, [r2, #0]
 800606a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800606c:	430b      	orrs	r3, r1
 800606e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4aa9      	ldr	r2, [pc, #676]	; (8006338 <UART_SetConfig+0x304>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d004      	beq.n	80060a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800609c:	4313      	orrs	r3, r2
 800609e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b0:	430a      	orrs	r2, r1
 80060b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4aa0      	ldr	r2, [pc, #640]	; (800633c <UART_SetConfig+0x308>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d126      	bne.n	800610c <UART_SetConfig+0xd8>
 80060be:	4ba0      	ldr	r3, [pc, #640]	; (8006340 <UART_SetConfig+0x30c>)
 80060c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c4:	f003 0303 	and.w	r3, r3, #3
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d81b      	bhi.n	8006104 <UART_SetConfig+0xd0>
 80060cc:	a201      	add	r2, pc, #4	; (adr r2, 80060d4 <UART_SetConfig+0xa0>)
 80060ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d2:	bf00      	nop
 80060d4:	080060e5 	.word	0x080060e5
 80060d8:	080060f5 	.word	0x080060f5
 80060dc:	080060ed 	.word	0x080060ed
 80060e0:	080060fd 	.word	0x080060fd
 80060e4:	2301      	movs	r3, #1
 80060e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ea:	e080      	b.n	80061ee <UART_SetConfig+0x1ba>
 80060ec:	2302      	movs	r3, #2
 80060ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060f2:	e07c      	b.n	80061ee <UART_SetConfig+0x1ba>
 80060f4:	2304      	movs	r3, #4
 80060f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060fa:	e078      	b.n	80061ee <UART_SetConfig+0x1ba>
 80060fc:	2308      	movs	r3, #8
 80060fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006102:	e074      	b.n	80061ee <UART_SetConfig+0x1ba>
 8006104:	2310      	movs	r3, #16
 8006106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800610a:	e070      	b.n	80061ee <UART_SetConfig+0x1ba>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a8c      	ldr	r2, [pc, #560]	; (8006344 <UART_SetConfig+0x310>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d138      	bne.n	8006188 <UART_SetConfig+0x154>
 8006116:	4b8a      	ldr	r3, [pc, #552]	; (8006340 <UART_SetConfig+0x30c>)
 8006118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611c:	f003 030c 	and.w	r3, r3, #12
 8006120:	2b0c      	cmp	r3, #12
 8006122:	d82d      	bhi.n	8006180 <UART_SetConfig+0x14c>
 8006124:	a201      	add	r2, pc, #4	; (adr r2, 800612c <UART_SetConfig+0xf8>)
 8006126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612a:	bf00      	nop
 800612c:	08006161 	.word	0x08006161
 8006130:	08006181 	.word	0x08006181
 8006134:	08006181 	.word	0x08006181
 8006138:	08006181 	.word	0x08006181
 800613c:	08006171 	.word	0x08006171
 8006140:	08006181 	.word	0x08006181
 8006144:	08006181 	.word	0x08006181
 8006148:	08006181 	.word	0x08006181
 800614c:	08006169 	.word	0x08006169
 8006150:	08006181 	.word	0x08006181
 8006154:	08006181 	.word	0x08006181
 8006158:	08006181 	.word	0x08006181
 800615c:	08006179 	.word	0x08006179
 8006160:	2300      	movs	r3, #0
 8006162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006166:	e042      	b.n	80061ee <UART_SetConfig+0x1ba>
 8006168:	2302      	movs	r3, #2
 800616a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800616e:	e03e      	b.n	80061ee <UART_SetConfig+0x1ba>
 8006170:	2304      	movs	r3, #4
 8006172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006176:	e03a      	b.n	80061ee <UART_SetConfig+0x1ba>
 8006178:	2308      	movs	r3, #8
 800617a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800617e:	e036      	b.n	80061ee <UART_SetConfig+0x1ba>
 8006180:	2310      	movs	r3, #16
 8006182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006186:	e032      	b.n	80061ee <UART_SetConfig+0x1ba>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a6a      	ldr	r2, [pc, #424]	; (8006338 <UART_SetConfig+0x304>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d12a      	bne.n	80061e8 <UART_SetConfig+0x1b4>
 8006192:	4b6b      	ldr	r3, [pc, #428]	; (8006340 <UART_SetConfig+0x30c>)
 8006194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006198:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800619c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061a0:	d01a      	beq.n	80061d8 <UART_SetConfig+0x1a4>
 80061a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061a6:	d81b      	bhi.n	80061e0 <UART_SetConfig+0x1ac>
 80061a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ac:	d00c      	beq.n	80061c8 <UART_SetConfig+0x194>
 80061ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061b2:	d815      	bhi.n	80061e0 <UART_SetConfig+0x1ac>
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <UART_SetConfig+0x18c>
 80061b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061bc:	d008      	beq.n	80061d0 <UART_SetConfig+0x19c>
 80061be:	e00f      	b.n	80061e0 <UART_SetConfig+0x1ac>
 80061c0:	2300      	movs	r3, #0
 80061c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061c6:	e012      	b.n	80061ee <UART_SetConfig+0x1ba>
 80061c8:	2302      	movs	r3, #2
 80061ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ce:	e00e      	b.n	80061ee <UART_SetConfig+0x1ba>
 80061d0:	2304      	movs	r3, #4
 80061d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061d6:	e00a      	b.n	80061ee <UART_SetConfig+0x1ba>
 80061d8:	2308      	movs	r3, #8
 80061da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061de:	e006      	b.n	80061ee <UART_SetConfig+0x1ba>
 80061e0:	2310      	movs	r3, #16
 80061e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061e6:	e002      	b.n	80061ee <UART_SetConfig+0x1ba>
 80061e8:	2310      	movs	r3, #16
 80061ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a51      	ldr	r2, [pc, #324]	; (8006338 <UART_SetConfig+0x304>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d17a      	bne.n	80062ee <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d824      	bhi.n	800624a <UART_SetConfig+0x216>
 8006200:	a201      	add	r2, pc, #4	; (adr r2, 8006208 <UART_SetConfig+0x1d4>)
 8006202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006206:	bf00      	nop
 8006208:	0800622d 	.word	0x0800622d
 800620c:	0800624b 	.word	0x0800624b
 8006210:	08006235 	.word	0x08006235
 8006214:	0800624b 	.word	0x0800624b
 8006218:	0800623b 	.word	0x0800623b
 800621c:	0800624b 	.word	0x0800624b
 8006220:	0800624b 	.word	0x0800624b
 8006224:	0800624b 	.word	0x0800624b
 8006228:	08006243 	.word	0x08006243
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800622c:	f7fd f98e 	bl	800354c <HAL_RCC_GetPCLK1Freq>
 8006230:	61f8      	str	r0, [r7, #28]
        break;
 8006232:	e010      	b.n	8006256 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006234:	4b44      	ldr	r3, [pc, #272]	; (8006348 <UART_SetConfig+0x314>)
 8006236:	61fb      	str	r3, [r7, #28]
        break;
 8006238:	e00d      	b.n	8006256 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800623a:	f7fd f8ef 	bl	800341c <HAL_RCC_GetSysClockFreq>
 800623e:	61f8      	str	r0, [r7, #28]
        break;
 8006240:	e009      	b.n	8006256 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006246:	61fb      	str	r3, [r7, #28]
        break;
 8006248:	e005      	b.n	8006256 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800624a:	2300      	movs	r3, #0
 800624c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006254:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 8107 	beq.w	800646c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	4613      	mov	r3, r2
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	4413      	add	r3, r2
 8006268:	69fa      	ldr	r2, [r7, #28]
 800626a:	429a      	cmp	r2, r3
 800626c:	d305      	bcc.n	800627a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006274:	69fa      	ldr	r2, [r7, #28]
 8006276:	429a      	cmp	r2, r3
 8006278:	d903      	bls.n	8006282 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006280:	e0f4      	b.n	800646c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	2200      	movs	r2, #0
 8006286:	461c      	mov	r4, r3
 8006288:	4615      	mov	r5, r2
 800628a:	f04f 0200 	mov.w	r2, #0
 800628e:	f04f 0300 	mov.w	r3, #0
 8006292:	022b      	lsls	r3, r5, #8
 8006294:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006298:	0222      	lsls	r2, r4, #8
 800629a:	68f9      	ldr	r1, [r7, #12]
 800629c:	6849      	ldr	r1, [r1, #4]
 800629e:	0849      	lsrs	r1, r1, #1
 80062a0:	2000      	movs	r0, #0
 80062a2:	4688      	mov	r8, r1
 80062a4:	4681      	mov	r9, r0
 80062a6:	eb12 0a08 	adds.w	sl, r2, r8
 80062aa:	eb43 0b09 	adc.w	fp, r3, r9
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	603b      	str	r3, [r7, #0]
 80062b6:	607a      	str	r2, [r7, #4]
 80062b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062bc:	4650      	mov	r0, sl
 80062be:	4659      	mov	r1, fp
 80062c0:	f7f9 ffd6 	bl	8000270 <__aeabi_uldivmod>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4613      	mov	r3, r2
 80062ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062d2:	d308      	bcc.n	80062e6 <UART_SetConfig+0x2b2>
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062da:	d204      	bcs.n	80062e6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	60da      	str	r2, [r3, #12]
 80062e4:	e0c2      	b.n	800646c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80062ec:	e0be      	b.n	800646c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f6:	d16a      	bne.n	80063ce <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80062f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d834      	bhi.n	800636a <UART_SetConfig+0x336>
 8006300:	a201      	add	r2, pc, #4	; (adr r2, 8006308 <UART_SetConfig+0x2d4>)
 8006302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006306:	bf00      	nop
 8006308:	0800632d 	.word	0x0800632d
 800630c:	0800634d 	.word	0x0800634d
 8006310:	08006355 	.word	0x08006355
 8006314:	0800636b 	.word	0x0800636b
 8006318:	0800635b 	.word	0x0800635b
 800631c:	0800636b 	.word	0x0800636b
 8006320:	0800636b 	.word	0x0800636b
 8006324:	0800636b 	.word	0x0800636b
 8006328:	08006363 	.word	0x08006363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800632c:	f7fd f90e 	bl	800354c <HAL_RCC_GetPCLK1Freq>
 8006330:	61f8      	str	r0, [r7, #28]
        break;
 8006332:	e020      	b.n	8006376 <UART_SetConfig+0x342>
 8006334:	efff69f3 	.word	0xefff69f3
 8006338:	40008000 	.word	0x40008000
 800633c:	40013800 	.word	0x40013800
 8006340:	40021000 	.word	0x40021000
 8006344:	40004400 	.word	0x40004400
 8006348:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800634c:	f7fd f914 	bl	8003578 <HAL_RCC_GetPCLK2Freq>
 8006350:	61f8      	str	r0, [r7, #28]
        break;
 8006352:	e010      	b.n	8006376 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006354:	4b4c      	ldr	r3, [pc, #304]	; (8006488 <UART_SetConfig+0x454>)
 8006356:	61fb      	str	r3, [r7, #28]
        break;
 8006358:	e00d      	b.n	8006376 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800635a:	f7fd f85f 	bl	800341c <HAL_RCC_GetSysClockFreq>
 800635e:	61f8      	str	r0, [r7, #28]
        break;
 8006360:	e009      	b.n	8006376 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006366:	61fb      	str	r3, [r7, #28]
        break;
 8006368:	e005      	b.n	8006376 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800636a:	2300      	movs	r3, #0
 800636c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006374:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d077      	beq.n	800646c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	005a      	lsls	r2, r3, #1
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	085b      	lsrs	r3, r3, #1
 8006386:	441a      	add	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006390:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	2b0f      	cmp	r3, #15
 8006396:	d916      	bls.n	80063c6 <UART_SetConfig+0x392>
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800639e:	d212      	bcs.n	80063c6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	f023 030f 	bic.w	r3, r3, #15
 80063a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	085b      	lsrs	r3, r3, #1
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	f003 0307 	and.w	r3, r3, #7
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	8afb      	ldrh	r3, [r7, #22]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	8afa      	ldrh	r2, [r7, #22]
 80063c2:	60da      	str	r2, [r3, #12]
 80063c4:	e052      	b.n	800646c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063cc:	e04e      	b.n	800646c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063d2:	2b08      	cmp	r3, #8
 80063d4:	d827      	bhi.n	8006426 <UART_SetConfig+0x3f2>
 80063d6:	a201      	add	r2, pc, #4	; (adr r2, 80063dc <UART_SetConfig+0x3a8>)
 80063d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063dc:	08006401 	.word	0x08006401
 80063e0:	08006409 	.word	0x08006409
 80063e4:	08006411 	.word	0x08006411
 80063e8:	08006427 	.word	0x08006427
 80063ec:	08006417 	.word	0x08006417
 80063f0:	08006427 	.word	0x08006427
 80063f4:	08006427 	.word	0x08006427
 80063f8:	08006427 	.word	0x08006427
 80063fc:	0800641f 	.word	0x0800641f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006400:	f7fd f8a4 	bl	800354c <HAL_RCC_GetPCLK1Freq>
 8006404:	61f8      	str	r0, [r7, #28]
        break;
 8006406:	e014      	b.n	8006432 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006408:	f7fd f8b6 	bl	8003578 <HAL_RCC_GetPCLK2Freq>
 800640c:	61f8      	str	r0, [r7, #28]
        break;
 800640e:	e010      	b.n	8006432 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006410:	4b1d      	ldr	r3, [pc, #116]	; (8006488 <UART_SetConfig+0x454>)
 8006412:	61fb      	str	r3, [r7, #28]
        break;
 8006414:	e00d      	b.n	8006432 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006416:	f7fd f801 	bl	800341c <HAL_RCC_GetSysClockFreq>
 800641a:	61f8      	str	r0, [r7, #28]
        break;
 800641c:	e009      	b.n	8006432 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800641e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006422:	61fb      	str	r3, [r7, #28]
        break;
 8006424:	e005      	b.n	8006432 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006426:	2300      	movs	r3, #0
 8006428:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006430:	bf00      	nop
    }

    if (pclk != 0U)
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d019      	beq.n	800646c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	085a      	lsrs	r2, r3, #1
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	441a      	add	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	fbb2 f3f3 	udiv	r3, r2, r3
 800644a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	2b0f      	cmp	r3, #15
 8006450:	d909      	bls.n	8006466 <UART_SetConfig+0x432>
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006458:	d205      	bcs.n	8006466 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	b29a      	uxth	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60da      	str	r2, [r3, #12]
 8006464:	e002      	b.n	800646c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006478:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800647c:	4618      	mov	r0, r3
 800647e:	3728      	adds	r7, #40	; 0x28
 8006480:	46bd      	mov	sp, r7
 8006482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006486:	bf00      	nop
 8006488:	00f42400 	.word	0x00f42400

0800648c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00a      	beq.n	80064b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00a      	beq.n	80064d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00a      	beq.n	80064fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	430a      	orrs	r2, r1
 800651a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006520:	f003 0310 	and.w	r3, r3, #16
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00a      	beq.n	800653e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	f003 0320 	and.w	r3, r3, #32
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006568:	2b00      	cmp	r3, #0
 800656a:	d01a      	beq.n	80065a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800658a:	d10a      	bne.n	80065a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	605a      	str	r2, [r3, #4]
  }
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065e0:	f7fb f8ba 	bl	8001758 <HAL_GetTick>
 80065e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d10e      	bne.n	8006612 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f82d 	bl	8006662 <UART_WaitOnFlagUntilTimeout>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e023      	b.n	800665a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b04      	cmp	r3, #4
 800661e:	d10e      	bne.n	800663e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006620:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f817 	bl	8006662 <UART_WaitOnFlagUntilTimeout>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e00d      	b.n	800665a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2220      	movs	r2, #32
 8006642:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2220      	movs	r2, #32
 8006648:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b09c      	sub	sp, #112	; 0x70
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	603b      	str	r3, [r7, #0]
 800666e:	4613      	mov	r3, r2
 8006670:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006672:	e0a5      	b.n	80067c0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667a:	f000 80a1 	beq.w	80067c0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800667e:	f7fb f86b 	bl	8001758 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800668a:	429a      	cmp	r2, r3
 800668c:	d302      	bcc.n	8006694 <UART_WaitOnFlagUntilTimeout+0x32>
 800668e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006690:	2b00      	cmp	r3, #0
 8006692:	d13e      	bne.n	8006712 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80066a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066a8:	667b      	str	r3, [r7, #100]	; 0x64
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80066b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80066c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e6      	bne.n	8006694 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3308      	adds	r3, #8
 80066cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d8:	f023 0301 	bic.w	r3, r3, #1
 80066dc:	663b      	str	r3, [r7, #96]	; 0x60
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3308      	adds	r3, #8
 80066e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80066e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80066e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e5      	bne.n	80066c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2220      	movs	r2, #32
 80066fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2220      	movs	r2, #32
 8006704:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e067      	b.n	80067e2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b00      	cmp	r3, #0
 800671e:	d04f      	beq.n	80067c0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800672a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800672e:	d147      	bne.n	80067c0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006738:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	e853 3f00 	ldrex	r3, [r3]
 8006746:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800674e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006758:	637b      	str	r3, [r7, #52]	; 0x34
 800675a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800675e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006760:	e841 2300 	strex	r3, r2, [r1]
 8006764:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e6      	bne.n	800673a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3308      	adds	r3, #8
 8006772:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	e853 3f00 	ldrex	r3, [r3]
 800677a:	613b      	str	r3, [r7, #16]
   return(result);
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f023 0301 	bic.w	r3, r3, #1
 8006782:	66bb      	str	r3, [r7, #104]	; 0x68
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3308      	adds	r3, #8
 800678a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800678c:	623a      	str	r2, [r7, #32]
 800678e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006790:	69f9      	ldr	r1, [r7, #28]
 8006792:	6a3a      	ldr	r2, [r7, #32]
 8006794:	e841 2300 	strex	r3, r2, [r1]
 8006798:	61bb      	str	r3, [r7, #24]
   return(result);
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e5      	bne.n	800676c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2220      	movs	r2, #32
 80067a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2220      	movs	r2, #32
 80067aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e010      	b.n	80067e2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	69da      	ldr	r2, [r3, #28]
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	4013      	ands	r3, r2
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	bf0c      	ite	eq
 80067d0:	2301      	moveq	r3, #1
 80067d2:	2300      	movne	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	429a      	cmp	r2, r3
 80067dc:	f43f af4a 	beq.w	8006674 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3770      	adds	r7, #112	; 0x70
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <__NVIC_SetPriority>:
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	4603      	mov	r3, r0
 80067f4:	6039      	str	r1, [r7, #0]
 80067f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	db0a      	blt.n	8006816 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	b2da      	uxtb	r2, r3
 8006804:	490c      	ldr	r1, [pc, #48]	; (8006838 <__NVIC_SetPriority+0x4c>)
 8006806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800680a:	0112      	lsls	r2, r2, #4
 800680c:	b2d2      	uxtb	r2, r2
 800680e:	440b      	add	r3, r1
 8006810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006814:	e00a      	b.n	800682c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	b2da      	uxtb	r2, r3
 800681a:	4908      	ldr	r1, [pc, #32]	; (800683c <__NVIC_SetPriority+0x50>)
 800681c:	79fb      	ldrb	r3, [r7, #7]
 800681e:	f003 030f 	and.w	r3, r3, #15
 8006822:	3b04      	subs	r3, #4
 8006824:	0112      	lsls	r2, r2, #4
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	440b      	add	r3, r1
 800682a:	761a      	strb	r2, [r3, #24]
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	e000e100 	.word	0xe000e100
 800683c:	e000ed00 	.word	0xe000ed00

08006840 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006840:	b580      	push	{r7, lr}
 8006842:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006844:	4b05      	ldr	r3, [pc, #20]	; (800685c <SysTick_Handler+0x1c>)
 8006846:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006848:	f002 fa8e 	bl	8008d68 <xTaskGetSchedulerState>
 800684c:	4603      	mov	r3, r0
 800684e:	2b01      	cmp	r3, #1
 8006850:	d001      	beq.n	8006856 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006852:	f003 f971 	bl	8009b38 <xPortSysTickHandler>
  }
}
 8006856:	bf00      	nop
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	e000e010 	.word	0xe000e010

08006860 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006860:	b580      	push	{r7, lr}
 8006862:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006864:	2100      	movs	r1, #0
 8006866:	f06f 0004 	mvn.w	r0, #4
 800686a:	f7ff ffbf 	bl	80067ec <__NVIC_SetPriority>
#endif
}
 800686e:	bf00      	nop
 8006870:	bd80      	pop	{r7, pc}
	...

08006874 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800687a:	f3ef 8305 	mrs	r3, IPSR
 800687e:	603b      	str	r3, [r7, #0]
  return(result);
 8006880:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006886:	f06f 0305 	mvn.w	r3, #5
 800688a:	607b      	str	r3, [r7, #4]
 800688c:	e00c      	b.n	80068a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800688e:	4b0a      	ldr	r3, [pc, #40]	; (80068b8 <osKernelInitialize+0x44>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d105      	bne.n	80068a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006896:	4b08      	ldr	r3, [pc, #32]	; (80068b8 <osKernelInitialize+0x44>)
 8006898:	2201      	movs	r2, #1
 800689a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800689c:	2300      	movs	r3, #0
 800689e:	607b      	str	r3, [r7, #4]
 80068a0:	e002      	b.n	80068a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80068a2:	f04f 33ff 	mov.w	r3, #4294967295
 80068a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068a8:	687b      	ldr	r3, [r7, #4]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	200002ec 	.word	0x200002ec

080068bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068c2:	f3ef 8305 	mrs	r3, IPSR
 80068c6:	603b      	str	r3, [r7, #0]
  return(result);
 80068c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80068ce:	f06f 0305 	mvn.w	r3, #5
 80068d2:	607b      	str	r3, [r7, #4]
 80068d4:	e010      	b.n	80068f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80068d6:	4b0b      	ldr	r3, [pc, #44]	; (8006904 <osKernelStart+0x48>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d109      	bne.n	80068f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80068de:	f7ff ffbf 	bl	8006860 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80068e2:	4b08      	ldr	r3, [pc, #32]	; (8006904 <osKernelStart+0x48>)
 80068e4:	2202      	movs	r2, #2
 80068e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80068e8:	f001 fdda 	bl	80084a0 <vTaskStartScheduler>
      stat = osOK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	607b      	str	r3, [r7, #4]
 80068f0:	e002      	b.n	80068f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80068f2:	f04f 33ff 	mov.w	r3, #4294967295
 80068f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068f8:	687b      	ldr	r3, [r7, #4]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	200002ec 	.word	0x200002ec

08006908 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006908:	b580      	push	{r7, lr}
 800690a:	b08e      	sub	sp, #56	; 0x38
 800690c:	af04      	add	r7, sp, #16
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006914:	2300      	movs	r3, #0
 8006916:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006918:	f3ef 8305 	mrs	r3, IPSR
 800691c:	617b      	str	r3, [r7, #20]
  return(result);
 800691e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006920:	2b00      	cmp	r3, #0
 8006922:	d17e      	bne.n	8006a22 <osThreadNew+0x11a>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d07b      	beq.n	8006a22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800692a:	2380      	movs	r3, #128	; 0x80
 800692c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800692e:	2318      	movs	r3, #24
 8006930:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006932:	2300      	movs	r3, #0
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006936:	f04f 33ff 	mov.w	r3, #4294967295
 800693a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d045      	beq.n	80069ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d002      	beq.n	8006950 <osThreadNew+0x48>
        name = attr->name;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d008      	beq.n	8006976 <osThreadNew+0x6e>
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	2b38      	cmp	r3, #56	; 0x38
 8006968:	d805      	bhi.n	8006976 <osThreadNew+0x6e>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <osThreadNew+0x72>
        return (NULL);
 8006976:	2300      	movs	r3, #0
 8006978:	e054      	b.n	8006a24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	089b      	lsrs	r3, r3, #2
 8006988:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00e      	beq.n	80069b0 <osThreadNew+0xa8>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	2b5f      	cmp	r3, #95	; 0x5f
 8006998:	d90a      	bls.n	80069b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d006      	beq.n	80069b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d002      	beq.n	80069b0 <osThreadNew+0xa8>
        mem = 1;
 80069aa:	2301      	movs	r3, #1
 80069ac:	61bb      	str	r3, [r7, #24]
 80069ae:	e010      	b.n	80069d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10c      	bne.n	80069d2 <osThreadNew+0xca>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d108      	bne.n	80069d2 <osThreadNew+0xca>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d104      	bne.n	80069d2 <osThreadNew+0xca>
          mem = 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	61bb      	str	r3, [r7, #24]
 80069cc:	e001      	b.n	80069d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d110      	bne.n	80069fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80069e0:	9202      	str	r2, [sp, #8]
 80069e2:	9301      	str	r3, [sp, #4]
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	6a3a      	ldr	r2, [r7, #32]
 80069ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f001 fb7e 	bl	80080f0 <xTaskCreateStatic>
 80069f4:	4603      	mov	r3, r0
 80069f6:	613b      	str	r3, [r7, #16]
 80069f8:	e013      	b.n	8006a22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d110      	bne.n	8006a22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	f107 0310 	add.w	r3, r7, #16
 8006a08:	9301      	str	r3, [sp, #4]
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f001 fbc9 	bl	80081aa <xTaskCreate>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d001      	beq.n	8006a22 <osThreadNew+0x11a>
            hTask = NULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006a22:	693b      	ldr	r3, [r7, #16]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3728      	adds	r7, #40	; 0x28
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a34:	f3ef 8305 	mrs	r3, IPSR
 8006a38:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d003      	beq.n	8006a48 <osDelay+0x1c>
    stat = osErrorISR;
 8006a40:	f06f 0305 	mvn.w	r3, #5
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	e007      	b.n	8006a58 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f001 fcf0 	bl	8008438 <vTaskDelay>
    }
  }

  return (stat);
 8006a58:	68fb      	ldr	r3, [r7, #12]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b08a      	sub	sp, #40	; 0x28
 8006a66:	af02      	add	r7, sp, #8
 8006a68:	60f8      	str	r0, [r7, #12]
 8006a6a:	60b9      	str	r1, [r7, #8]
 8006a6c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a72:	f3ef 8305 	mrs	r3, IPSR
 8006a76:	613b      	str	r3, [r7, #16]
  return(result);
 8006a78:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d175      	bne.n	8006b6a <osSemaphoreNew+0x108>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d072      	beq.n	8006b6a <osSemaphoreNew+0x108>
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d86e      	bhi.n	8006b6a <osSemaphoreNew+0x108>
    mem = -1;
 8006a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a90:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d015      	beq.n	8006ac4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d006      	beq.n	8006aae <osSemaphoreNew+0x4c>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	2b4f      	cmp	r3, #79	; 0x4f
 8006aa6:	d902      	bls.n	8006aae <osSemaphoreNew+0x4c>
        mem = 1;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	61bb      	str	r3, [r7, #24]
 8006aac:	e00c      	b.n	8006ac8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d108      	bne.n	8006ac8 <osSemaphoreNew+0x66>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d104      	bne.n	8006ac8 <osSemaphoreNew+0x66>
          mem = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	61bb      	str	r3, [r7, #24]
 8006ac2:	e001      	b.n	8006ac8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ace:	d04c      	beq.n	8006b6a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d128      	bne.n	8006b28 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d10a      	bne.n	8006af2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	2203      	movs	r2, #3
 8006ae2:	9200      	str	r2, [sp, #0]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	2001      	movs	r0, #1
 8006aea:	f000 fb5b 	bl	80071a4 <xQueueGenericCreateStatic>
 8006aee:	61f8      	str	r0, [r7, #28]
 8006af0:	e005      	b.n	8006afe <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006af2:	2203      	movs	r2, #3
 8006af4:	2100      	movs	r1, #0
 8006af6:	2001      	movs	r0, #1
 8006af8:	f000 fbcc 	bl	8007294 <xQueueGenericCreate>
 8006afc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d022      	beq.n	8006b4a <osSemaphoreNew+0xe8>
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d01f      	beq.n	8006b4a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2100      	movs	r1, #0
 8006b10:	69f8      	ldr	r0, [r7, #28]
 8006b12:	f000 fc87 	bl	8007424 <xQueueGenericSend>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d016      	beq.n	8006b4a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006b1c:	69f8      	ldr	r0, [r7, #28]
 8006b1e:	f001 f913 	bl	8007d48 <vQueueDelete>
            hSemaphore = NULL;
 8006b22:	2300      	movs	r3, #0
 8006b24:	61fb      	str	r3, [r7, #28]
 8006b26:	e010      	b.n	8006b4a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d108      	bne.n	8006b40 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	461a      	mov	r2, r3
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 fc09 	bl	800734e <xQueueCreateCountingSemaphoreStatic>
 8006b3c:	61f8      	str	r0, [r7, #28]
 8006b3e:	e004      	b.n	8006b4a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006b40:	68b9      	ldr	r1, [r7, #8]
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 fc3a 	bl	80073bc <xQueueCreateCountingSemaphore>
 8006b48:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00c      	beq.n	8006b6a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <osSemaphoreNew+0xfc>
          name = attr->name;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	e001      	b.n	8006b62 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006b62:	6979      	ldr	r1, [r7, #20]
 8006b64:	69f8      	ldr	r0, [r7, #28]
 8006b66:	f001 fa3b 	bl	8007fe0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006b6a:	69fb      	ldr	r3, [r7, #28]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3720      	adds	r7, #32
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d103      	bne.n	8006b94 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006b8c:	f06f 0303 	mvn.w	r3, #3
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	e039      	b.n	8006c08 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b94:	f3ef 8305 	mrs	r3, IPSR
 8006b98:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d022      	beq.n	8006be6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d003      	beq.n	8006bae <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006ba6:	f06f 0303 	mvn.w	r3, #3
 8006baa:	617b      	str	r3, [r7, #20]
 8006bac:	e02c      	b.n	8006c08 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006bb2:	f107 0308 	add.w	r3, r7, #8
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	2100      	movs	r1, #0
 8006bba:	6938      	ldr	r0, [r7, #16]
 8006bbc:	f001 f844 	bl	8007c48 <xQueueReceiveFromISR>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d003      	beq.n	8006bce <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006bc6:	f06f 0302 	mvn.w	r3, #2
 8006bca:	617b      	str	r3, [r7, #20]
 8006bcc:	e01c      	b.n	8006c08 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d019      	beq.n	8006c08 <osSemaphoreAcquire+0x94>
 8006bd4:	4b0f      	ldr	r3, [pc, #60]	; (8006c14 <osSemaphoreAcquire+0xa0>)
 8006bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	e010      	b.n	8006c08 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	6938      	ldr	r0, [r7, #16]
 8006bea:	f000 ff21 	bl	8007a30 <xQueueSemaphoreTake>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d009      	beq.n	8006c08 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006bfa:	f06f 0301 	mvn.w	r3, #1
 8006bfe:	617b      	str	r3, [r7, #20]
 8006c00:	e002      	b.n	8006c08 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006c02:	f06f 0302 	mvn.w	r3, #2
 8006c06:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006c08:	697b      	ldr	r3, [r7, #20]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3718      	adds	r7, #24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	e000ed04 	.word	0xe000ed04

08006c18 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d103      	bne.n	8006c36 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006c2e:	f06f 0303 	mvn.w	r3, #3
 8006c32:	617b      	str	r3, [r7, #20]
 8006c34:	e02c      	b.n	8006c90 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c36:	f3ef 8305 	mrs	r3, IPSR
 8006c3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d01a      	beq.n	8006c78 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006c42:	2300      	movs	r3, #0
 8006c44:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c46:	f107 0308 	add.w	r3, r7, #8
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6938      	ldr	r0, [r7, #16]
 8006c4e:	f000 fd82 	bl	8007756 <xQueueGiveFromISR>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d003      	beq.n	8006c60 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006c58:	f06f 0302 	mvn.w	r3, #2
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	e017      	b.n	8006c90 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d014      	beq.n	8006c90 <osSemaphoreRelease+0x78>
 8006c66:	4b0d      	ldr	r3, [pc, #52]	; (8006c9c <osSemaphoreRelease+0x84>)
 8006c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c6c:	601a      	str	r2, [r3, #0]
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	e00b      	b.n	8006c90 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006c78:	2300      	movs	r3, #0
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	6938      	ldr	r0, [r7, #16]
 8006c80:	f000 fbd0 	bl	8007424 <xQueueGenericSend>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d002      	beq.n	8006c90 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006c8a:	f06f 0302 	mvn.w	r3, #2
 8006c8e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006c90:	697b      	ldr	r3, [r7, #20]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	e000ed04 	.word	0xe000ed04

08006ca0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b08a      	sub	sp, #40	; 0x28
 8006ca4:	af02      	add	r7, sp, #8
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006cac:	2300      	movs	r3, #0
 8006cae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cb0:	f3ef 8305 	mrs	r3, IPSR
 8006cb4:	613b      	str	r3, [r7, #16]
  return(result);
 8006cb6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d15f      	bne.n	8006d7c <osMessageQueueNew+0xdc>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d05c      	beq.n	8006d7c <osMessageQueueNew+0xdc>
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d059      	beq.n	8006d7c <osMessageQueueNew+0xdc>
    mem = -1;
 8006cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ccc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d029      	beq.n	8006d28 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d012      	beq.n	8006d02 <osMessageQueueNew+0x62>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	2b4f      	cmp	r3, #79	; 0x4f
 8006ce2:	d90e      	bls.n	8006d02 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	695a      	ldr	r2, [r3, #20]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	68b9      	ldr	r1, [r7, #8]
 8006cf4:	fb01 f303 	mul.w	r3, r1, r3
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d302      	bcc.n	8006d02 <osMessageQueueNew+0x62>
        mem = 1;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	61bb      	str	r3, [r7, #24]
 8006d00:	e014      	b.n	8006d2c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d110      	bne.n	8006d2c <osMessageQueueNew+0x8c>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10c      	bne.n	8006d2c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d108      	bne.n	8006d2c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d104      	bne.n	8006d2c <osMessageQueueNew+0x8c>
          mem = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	61bb      	str	r3, [r7, #24]
 8006d26:	e001      	b.n	8006d2c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d10b      	bne.n	8006d4a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691a      	ldr	r2, [r3, #16]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	9100      	str	r1, [sp, #0]
 8006d3e:	68b9      	ldr	r1, [r7, #8]
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 fa2f 	bl	80071a4 <xQueueGenericCreateStatic>
 8006d46:	61f8      	str	r0, [r7, #28]
 8006d48:	e008      	b.n	8006d5c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d105      	bne.n	8006d5c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006d50:	2200      	movs	r2, #0
 8006d52:	68b9      	ldr	r1, [r7, #8]
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f000 fa9d 	bl	8007294 <xQueueGenericCreate>
 8006d5a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00c      	beq.n	8006d7c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	617b      	str	r3, [r7, #20]
 8006d6e:	e001      	b.n	8006d74 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006d70:	2300      	movs	r3, #0
 8006d72:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006d74:	6979      	ldr	r1, [r7, #20]
 8006d76:	69f8      	ldr	r0, [r7, #28]
 8006d78:	f001 f932 	bl	8007fe0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006d7c:	69fb      	ldr	r3, [r7, #28]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3720      	adds	r7, #32
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	603b      	str	r3, [r7, #0]
 8006d94:	4613      	mov	r3, r2
 8006d96:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006da0:	f3ef 8305 	mrs	r3, IPSR
 8006da4:	617b      	str	r3, [r7, #20]
  return(result);
 8006da6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d028      	beq.n	8006dfe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d005      	beq.n	8006dbe <osMessageQueuePut+0x36>
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <osMessageQueuePut+0x36>
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006dbe:	f06f 0303 	mvn.w	r3, #3
 8006dc2:	61fb      	str	r3, [r7, #28]
 8006dc4:	e038      	b.n	8006e38 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006dca:	f107 0210 	add.w	r2, r7, #16
 8006dce:	2300      	movs	r3, #0
 8006dd0:	68b9      	ldr	r1, [r7, #8]
 8006dd2:	69b8      	ldr	r0, [r7, #24]
 8006dd4:	f000 fc24 	bl	8007620 <xQueueGenericSendFromISR>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d003      	beq.n	8006de6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006dde:	f06f 0302 	mvn.w	r3, #2
 8006de2:	61fb      	str	r3, [r7, #28]
 8006de4:	e028      	b.n	8006e38 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d025      	beq.n	8006e38 <osMessageQueuePut+0xb0>
 8006dec:	4b15      	ldr	r3, [pc, #84]	; (8006e44 <osMessageQueuePut+0xbc>)
 8006dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	e01c      	b.n	8006e38 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <osMessageQueuePut+0x82>
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d103      	bne.n	8006e12 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006e0a:	f06f 0303 	mvn.w	r3, #3
 8006e0e:	61fb      	str	r3, [r7, #28]
 8006e10:	e012      	b.n	8006e38 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006e12:	2300      	movs	r3, #0
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	68b9      	ldr	r1, [r7, #8]
 8006e18:	69b8      	ldr	r0, [r7, #24]
 8006e1a:	f000 fb03 	bl	8007424 <xQueueGenericSend>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d009      	beq.n	8006e38 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006e2a:	f06f 0301 	mvn.w	r3, #1
 8006e2e:	61fb      	str	r3, [r7, #28]
 8006e30:	e002      	b.n	8006e38 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006e32:	f06f 0302 	mvn.w	r3, #2
 8006e36:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006e38:	69fb      	ldr	r3, [r7, #28]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3720      	adds	r7, #32
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	e000ed04 	.word	0xe000ed04

08006e48 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e5e:	f3ef 8305 	mrs	r3, IPSR
 8006e62:	617b      	str	r3, [r7, #20]
  return(result);
 8006e64:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d028      	beq.n	8006ebc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d005      	beq.n	8006e7c <osMessageQueueGet+0x34>
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d002      	beq.n	8006e7c <osMessageQueueGet+0x34>
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006e7c:	f06f 0303 	mvn.w	r3, #3
 8006e80:	61fb      	str	r3, [r7, #28]
 8006e82:	e037      	b.n	8006ef4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006e84:	2300      	movs	r3, #0
 8006e86:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006e88:	f107 0310 	add.w	r3, r7, #16
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	68b9      	ldr	r1, [r7, #8]
 8006e90:	69b8      	ldr	r0, [r7, #24]
 8006e92:	f000 fed9 	bl	8007c48 <xQueueReceiveFromISR>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d003      	beq.n	8006ea4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006e9c:	f06f 0302 	mvn.w	r3, #2
 8006ea0:	61fb      	str	r3, [r7, #28]
 8006ea2:	e027      	b.n	8006ef4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d024      	beq.n	8006ef4 <osMessageQueueGet+0xac>
 8006eaa:	4b15      	ldr	r3, [pc, #84]	; (8006f00 <osMessageQueueGet+0xb8>)
 8006eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eb0:	601a      	str	r2, [r3, #0]
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	e01b      	b.n	8006ef4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <osMessageQueueGet+0x80>
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d103      	bne.n	8006ed0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006ec8:	f06f 0303 	mvn.w	r3, #3
 8006ecc:	61fb      	str	r3, [r7, #28]
 8006ece:	e011      	b.n	8006ef4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	68b9      	ldr	r1, [r7, #8]
 8006ed4:	69b8      	ldr	r0, [r7, #24]
 8006ed6:	f000 fccb 	bl	8007870 <xQueueReceive>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d009      	beq.n	8006ef4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006ee6:	f06f 0301 	mvn.w	r3, #1
 8006eea:	61fb      	str	r3, [r7, #28]
 8006eec:	e002      	b.n	8006ef4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006eee:	f06f 0302 	mvn.w	r3, #2
 8006ef2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006ef4:	69fb      	ldr	r3, [r7, #28]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3720      	adds	r7, #32
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	e000ed04 	.word	0xe000ed04

08006f04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4a07      	ldr	r2, [pc, #28]	; (8006f30 <vApplicationGetIdleTaskMemory+0x2c>)
 8006f14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	4a06      	ldr	r2, [pc, #24]	; (8006f34 <vApplicationGetIdleTaskMemory+0x30>)
 8006f1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2280      	movs	r2, #128	; 0x80
 8006f20:	601a      	str	r2, [r3, #0]
}
 8006f22:	bf00      	nop
 8006f24:	3714      	adds	r7, #20
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	200002f0 	.word	0x200002f0
 8006f34:	20000350 	.word	0x20000350

08006f38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4a07      	ldr	r2, [pc, #28]	; (8006f64 <vApplicationGetTimerTaskMemory+0x2c>)
 8006f48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	4a06      	ldr	r2, [pc, #24]	; (8006f68 <vApplicationGetTimerTaskMemory+0x30>)
 8006f4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f56:	601a      	str	r2, [r3, #0]
}
 8006f58:	bf00      	nop
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	20000550 	.word	0x20000550
 8006f68:	200005b0 	.word	0x200005b0

08006f6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f103 0208 	add.w	r2, r3, #8
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f04f 32ff 	mov.w	r2, #4294967295
 8006f84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f103 0208 	add.w	r2, r3, #8
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f103 0208 	add.w	r2, r3, #8
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006fba:	bf00      	nop
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b085      	sub	sp, #20
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	1c5a      	adds	r2, r3, #1
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	601a      	str	r2, [r3, #0]
}
 8007002:	bf00      	nop
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800700e:	b480      	push	{r7}
 8007010:	b085      	sub	sp, #20
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007024:	d103      	bne.n	800702e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	60fb      	str	r3, [r7, #12]
 800702c:	e00c      	b.n	8007048 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	3308      	adds	r3, #8
 8007032:	60fb      	str	r3, [r7, #12]
 8007034:	e002      	b.n	800703c <vListInsert+0x2e>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	60fb      	str	r3, [r7, #12]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	429a      	cmp	r2, r3
 8007046:	d2f6      	bcs.n	8007036 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	683a      	ldr	r2, [r7, #0]
 8007056:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	1c5a      	adds	r2, r3, #1
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	601a      	str	r2, [r3, #0]
}
 8007074:	bf00      	nop
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	6892      	ldr	r2, [r2, #8]
 8007096:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	6852      	ldr	r2, [r2, #4]
 80070a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d103      	bne.n	80070b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	1e5a      	subs	r2, r3, #1
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10a      	bne.n	80070fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80070fa:	bf00      	nop
 80070fc:	e7fe      	b.n	80070fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80070fe:	f002 fc89 	bl	8009a14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800710a:	68f9      	ldr	r1, [r7, #12]
 800710c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800710e:	fb01 f303 	mul.w	r3, r1, r3
 8007112:	441a      	add	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712e:	3b01      	subs	r3, #1
 8007130:	68f9      	ldr	r1, [r7, #12]
 8007132:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007134:	fb01 f303 	mul.w	r3, r1, r3
 8007138:	441a      	add	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	22ff      	movs	r2, #255	; 0xff
 8007142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	22ff      	movs	r2, #255	; 0xff
 800714a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d114      	bne.n	800717e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d01a      	beq.n	8007192 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	3310      	adds	r3, #16
 8007160:	4618      	mov	r0, r3
 8007162:	f001 fc43 	bl	80089ec <xTaskRemoveFromEventList>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d012      	beq.n	8007192 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800716c:	4b0c      	ldr	r3, [pc, #48]	; (80071a0 <xQueueGenericReset+0xcc>)
 800716e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	e009      	b.n	8007192 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3310      	adds	r3, #16
 8007182:	4618      	mov	r0, r3
 8007184:	f7ff fef2 	bl	8006f6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	3324      	adds	r3, #36	; 0x24
 800718c:	4618      	mov	r0, r3
 800718e:	f7ff feed 	bl	8006f6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007192:	f002 fc6f 	bl	8009a74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007196:	2301      	movs	r3, #1
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	e000ed04 	.word	0xe000ed04

080071a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08e      	sub	sp, #56	; 0x38
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10a      	bne.n	80071ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80071b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80071ca:	bf00      	nop
 80071cc:	e7fe      	b.n	80071cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10a      	bne.n	80071ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071e6:	bf00      	nop
 80071e8:	e7fe      	b.n	80071e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <xQueueGenericCreateStatic+0x52>
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <xQueueGenericCreateStatic+0x56>
 80071f6:	2301      	movs	r3, #1
 80071f8:	e000      	b.n	80071fc <xQueueGenericCreateStatic+0x58>
 80071fa:	2300      	movs	r3, #0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10a      	bne.n	8007216 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	623b      	str	r3, [r7, #32]
}
 8007212:	bf00      	nop
 8007214:	e7fe      	b.n	8007214 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d102      	bne.n	8007222 <xQueueGenericCreateStatic+0x7e>
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <xQueueGenericCreateStatic+0x82>
 8007222:	2301      	movs	r3, #1
 8007224:	e000      	b.n	8007228 <xQueueGenericCreateStatic+0x84>
 8007226:	2300      	movs	r3, #0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10a      	bne.n	8007242 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	61fb      	str	r3, [r7, #28]
}
 800723e:	bf00      	nop
 8007240:	e7fe      	b.n	8007240 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007242:	2350      	movs	r3, #80	; 0x50
 8007244:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2b50      	cmp	r3, #80	; 0x50
 800724a:	d00a      	beq.n	8007262 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	61bb      	str	r3, [r7, #24]
}
 800725e:	bf00      	nop
 8007260:	e7fe      	b.n	8007260 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007262:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00d      	beq.n	800728a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007276:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800727a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	4613      	mov	r3, r2
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	68b9      	ldr	r1, [r7, #8]
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 f83f 	bl	8007308 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800728c:	4618      	mov	r0, r3
 800728e:	3730      	adds	r7, #48	; 0x30
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007294:	b580      	push	{r7, lr}
 8007296:	b08a      	sub	sp, #40	; 0x28
 8007298:	af02      	add	r7, sp, #8
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	4613      	mov	r3, r2
 80072a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10a      	bne.n	80072be <xQueueGenericCreate+0x2a>
	__asm volatile
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	613b      	str	r3, [r7, #16]
}
 80072ba:	bf00      	nop
 80072bc:	e7fe      	b.n	80072bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	fb02 f303 	mul.w	r3, r2, r3
 80072c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	3350      	adds	r3, #80	; 0x50
 80072cc:	4618      	mov	r0, r3
 80072ce:	f002 fcc3 	bl	8009c58 <pvPortMalloc>
 80072d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d011      	beq.n	80072fe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	3350      	adds	r3, #80	; 0x50
 80072e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072ec:	79fa      	ldrb	r2, [r7, #7]
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	4613      	mov	r3, r2
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	68b9      	ldr	r1, [r7, #8]
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 f805 	bl	8007308 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072fe:	69bb      	ldr	r3, [r7, #24]
	}
 8007300:	4618      	mov	r0, r3
 8007302:	3720      	adds	r7, #32
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
 8007314:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d103      	bne.n	8007324 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	e002      	b.n	800732a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007336:	2101      	movs	r1, #1
 8007338:	69b8      	ldr	r0, [r7, #24]
 800733a:	f7ff fecb 	bl	80070d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	78fa      	ldrb	r2, [r7, #3]
 8007342:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007346:	bf00      	nop
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800734e:	b580      	push	{r7, lr}
 8007350:	b08a      	sub	sp, #40	; 0x28
 8007352:	af02      	add	r7, sp, #8
 8007354:	60f8      	str	r0, [r7, #12]
 8007356:	60b9      	str	r1, [r7, #8]
 8007358:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10a      	bne.n	8007376 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	61bb      	str	r3, [r7, #24]
}
 8007372:	bf00      	nop
 8007374:	e7fe      	b.n	8007374 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	429a      	cmp	r2, r3
 800737c:	d90a      	bls.n	8007394 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	617b      	str	r3, [r7, #20]
}
 8007390:	bf00      	nop
 8007392:	e7fe      	b.n	8007392 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007394:	2302      	movs	r3, #2
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	2100      	movs	r1, #0
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f7ff ff00 	bl	80071a4 <xQueueGenericCreateStatic>
 80073a4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80073b2:	69fb      	ldr	r3, [r7, #28]
	}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3720      	adds	r7, #32
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10a      	bne.n	80073e2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	613b      	str	r3, [r7, #16]
}
 80073de:	bf00      	nop
 80073e0:	e7fe      	b.n	80073e0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d90a      	bls.n	8007400 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80073ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ee:	f383 8811 	msr	BASEPRI, r3
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	60fb      	str	r3, [r7, #12]
}
 80073fc:	bf00      	nop
 80073fe:	e7fe      	b.n	80073fe <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007400:	2202      	movs	r2, #2
 8007402:	2100      	movs	r1, #0
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7ff ff45 	bl	8007294 <xQueueGenericCreate>
 800740a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007418:	697b      	ldr	r3, [r7, #20]
	}
 800741a:	4618      	mov	r0, r3
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b08e      	sub	sp, #56	; 0x38
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
 8007430:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007432:	2300      	movs	r3, #0
 8007434:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10a      	bne.n	8007456 <xQueueGenericSend+0x32>
	__asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007452:	bf00      	nop
 8007454:	e7fe      	b.n	8007454 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d103      	bne.n	8007464 <xQueueGenericSend+0x40>
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007460:	2b00      	cmp	r3, #0
 8007462:	d101      	bne.n	8007468 <xQueueGenericSend+0x44>
 8007464:	2301      	movs	r3, #1
 8007466:	e000      	b.n	800746a <xQueueGenericSend+0x46>
 8007468:	2300      	movs	r3, #0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10a      	bne.n	8007484 <xQueueGenericSend+0x60>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007480:	bf00      	nop
 8007482:	e7fe      	b.n	8007482 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2b02      	cmp	r3, #2
 8007488:	d103      	bne.n	8007492 <xQueueGenericSend+0x6e>
 800748a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800748e:	2b01      	cmp	r3, #1
 8007490:	d101      	bne.n	8007496 <xQueueGenericSend+0x72>
 8007492:	2301      	movs	r3, #1
 8007494:	e000      	b.n	8007498 <xQueueGenericSend+0x74>
 8007496:	2300      	movs	r3, #0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10a      	bne.n	80074b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	623b      	str	r3, [r7, #32]
}
 80074ae:	bf00      	nop
 80074b0:	e7fe      	b.n	80074b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074b2:	f001 fc59 	bl	8008d68 <xTaskGetSchedulerState>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d102      	bne.n	80074c2 <xQueueGenericSend+0x9e>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <xQueueGenericSend+0xa2>
 80074c2:	2301      	movs	r3, #1
 80074c4:	e000      	b.n	80074c8 <xQueueGenericSend+0xa4>
 80074c6:	2300      	movs	r3, #0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10a      	bne.n	80074e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80074cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d0:	f383 8811 	msr	BASEPRI, r3
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	61fb      	str	r3, [r7, #28]
}
 80074de:	bf00      	nop
 80074e0:	e7fe      	b.n	80074e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074e2:	f002 fa97 	bl	8009a14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d302      	bcc.n	80074f8 <xQueueGenericSend+0xd4>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d129      	bne.n	800754c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074f8:	683a      	ldr	r2, [r7, #0]
 80074fa:	68b9      	ldr	r1, [r7, #8]
 80074fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074fe:	f000 fc5e 	bl	8007dbe <prvCopyDataToQueue>
 8007502:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007508:	2b00      	cmp	r3, #0
 800750a:	d010      	beq.n	800752e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750e:	3324      	adds	r3, #36	; 0x24
 8007510:	4618      	mov	r0, r3
 8007512:	f001 fa6b 	bl	80089ec <xTaskRemoveFromEventList>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d013      	beq.n	8007544 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800751c:	4b3f      	ldr	r3, [pc, #252]	; (800761c <xQueueGenericSend+0x1f8>)
 800751e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	e00a      	b.n	8007544 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800752e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007530:	2b00      	cmp	r3, #0
 8007532:	d007      	beq.n	8007544 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007534:	4b39      	ldr	r3, [pc, #228]	; (800761c <xQueueGenericSend+0x1f8>)
 8007536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007544:	f002 fa96 	bl	8009a74 <vPortExitCritical>
				return pdPASS;
 8007548:	2301      	movs	r3, #1
 800754a:	e063      	b.n	8007614 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d103      	bne.n	800755a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007552:	f002 fa8f 	bl	8009a74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007556:	2300      	movs	r3, #0
 8007558:	e05c      	b.n	8007614 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800755a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755c:	2b00      	cmp	r3, #0
 800755e:	d106      	bne.n	800756e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007560:	f107 0314 	add.w	r3, r7, #20
 8007564:	4618      	mov	r0, r3
 8007566:	f001 faa5 	bl	8008ab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800756a:	2301      	movs	r3, #1
 800756c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800756e:	f002 fa81 	bl	8009a74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007572:	f000 fffd 	bl	8008570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007576:	f002 fa4d 	bl	8009a14 <vPortEnterCritical>
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007580:	b25b      	sxtb	r3, r3
 8007582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007586:	d103      	bne.n	8007590 <xQueueGenericSend+0x16c>
 8007588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758a:	2200      	movs	r2, #0
 800758c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007596:	b25b      	sxtb	r3, r3
 8007598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759c:	d103      	bne.n	80075a6 <xQueueGenericSend+0x182>
 800759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075a6:	f002 fa65 	bl	8009a74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075aa:	1d3a      	adds	r2, r7, #4
 80075ac:	f107 0314 	add.w	r3, r7, #20
 80075b0:	4611      	mov	r1, r2
 80075b2:	4618      	mov	r0, r3
 80075b4:	f001 fa94 	bl	8008ae0 <xTaskCheckForTimeOut>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d124      	bne.n	8007608 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075c0:	f000 fcf5 	bl	8007fae <prvIsQueueFull>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d018      	beq.n	80075fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075cc:	3310      	adds	r3, #16
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	4611      	mov	r1, r2
 80075d2:	4618      	mov	r0, r3
 80075d4:	f001 f9ba 	bl	800894c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80075d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075da:	f000 fc80 	bl	8007ede <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80075de:	f000 ffd5 	bl	800858c <xTaskResumeAll>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f47f af7c 	bne.w	80074e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80075ea:	4b0c      	ldr	r3, [pc, #48]	; (800761c <xQueueGenericSend+0x1f8>)
 80075ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	e772      	b.n	80074e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80075fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075fe:	f000 fc6e 	bl	8007ede <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007602:	f000 ffc3 	bl	800858c <xTaskResumeAll>
 8007606:	e76c      	b.n	80074e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800760a:	f000 fc68 	bl	8007ede <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800760e:	f000 ffbd 	bl	800858c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007612:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007614:	4618      	mov	r0, r3
 8007616:	3738      	adds	r7, #56	; 0x38
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	e000ed04 	.word	0xe000ed04

08007620 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b090      	sub	sp, #64	; 0x40
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
 800762c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10a      	bne.n	800764e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800764a:	bf00      	nop
 800764c:	e7fe      	b.n	800764c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d103      	bne.n	800765c <xQueueGenericSendFromISR+0x3c>
 8007654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <xQueueGenericSendFromISR+0x40>
 800765c:	2301      	movs	r3, #1
 800765e:	e000      	b.n	8007662 <xQueueGenericSendFromISR+0x42>
 8007660:	2300      	movs	r3, #0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10a      	bne.n	800767c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007678:	bf00      	nop
 800767a:	e7fe      	b.n	800767a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	2b02      	cmp	r3, #2
 8007680:	d103      	bne.n	800768a <xQueueGenericSendFromISR+0x6a>
 8007682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007686:	2b01      	cmp	r3, #1
 8007688:	d101      	bne.n	800768e <xQueueGenericSendFromISR+0x6e>
 800768a:	2301      	movs	r3, #1
 800768c:	e000      	b.n	8007690 <xQueueGenericSendFromISR+0x70>
 800768e:	2300      	movs	r3, #0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10a      	bne.n	80076aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	623b      	str	r3, [r7, #32]
}
 80076a6:	bf00      	nop
 80076a8:	e7fe      	b.n	80076a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076aa:	f002 fa95 	bl	8009bd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076ae:	f3ef 8211 	mrs	r2, BASEPRI
 80076b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	61fa      	str	r2, [r7, #28]
 80076c4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d302      	bcc.n	80076dc <xQueueGenericSendFromISR+0xbc>
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d12f      	bne.n	800773c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	68b9      	ldr	r1, [r7, #8]
 80076f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076f2:	f000 fb64 	bl	8007dbe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80076f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80076fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fe:	d112      	bne.n	8007726 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007704:	2b00      	cmp	r3, #0
 8007706:	d016      	beq.n	8007736 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770a:	3324      	adds	r3, #36	; 0x24
 800770c:	4618      	mov	r0, r3
 800770e:	f001 f96d 	bl	80089ec <xTaskRemoveFromEventList>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00e      	beq.n	8007736 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00b      	beq.n	8007736 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	e007      	b.n	8007736 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007726:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800772a:	3301      	adds	r3, #1
 800772c:	b2db      	uxtb	r3, r3
 800772e:	b25a      	sxtb	r2, r3
 8007730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007736:	2301      	movs	r3, #1
 8007738:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800773a:	e001      	b.n	8007740 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800773c:	2300      	movs	r3, #0
 800773e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007742:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800774a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800774c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800774e:	4618      	mov	r0, r3
 8007750:	3740      	adds	r7, #64	; 0x40
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b08e      	sub	sp, #56	; 0x38
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10a      	bne.n	8007780 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	623b      	str	r3, [r7, #32]
}
 800777c:	bf00      	nop
 800777e:	e7fe      	b.n	800777e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00a      	beq.n	800779e <xQueueGiveFromISR+0x48>
	__asm volatile
 8007788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778c:	f383 8811 	msr	BASEPRI, r3
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	61fb      	str	r3, [r7, #28]
}
 800779a:	bf00      	nop
 800779c:	e7fe      	b.n	800779c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d103      	bne.n	80077ae <xQueueGiveFromISR+0x58>
 80077a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <xQueueGiveFromISR+0x5c>
 80077ae:	2301      	movs	r3, #1
 80077b0:	e000      	b.n	80077b4 <xQueueGiveFromISR+0x5e>
 80077b2:	2300      	movs	r3, #0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10a      	bne.n	80077ce <xQueueGiveFromISR+0x78>
	__asm volatile
 80077b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	61bb      	str	r3, [r7, #24]
}
 80077ca:	bf00      	nop
 80077cc:	e7fe      	b.n	80077cc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077ce:	f002 fa03 	bl	8009bd8 <vPortValidateInterruptPriority>
	__asm volatile
 80077d2:	f3ef 8211 	mrs	r2, BASEPRI
 80077d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	617a      	str	r2, [r7, #20]
 80077e8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80077ea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80077f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d22b      	bcs.n	8007856 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80077fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780a:	1c5a      	adds	r2, r3, #1
 800780c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007810:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007818:	d112      	bne.n	8007840 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800781a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781e:	2b00      	cmp	r3, #0
 8007820:	d016      	beq.n	8007850 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007824:	3324      	adds	r3, #36	; 0x24
 8007826:	4618      	mov	r0, r3
 8007828:	f001 f8e0 	bl	80089ec <xTaskRemoveFromEventList>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00e      	beq.n	8007850 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00b      	beq.n	8007850 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2201      	movs	r2, #1
 800783c:	601a      	str	r2, [r3, #0]
 800783e:	e007      	b.n	8007850 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007844:	3301      	adds	r3, #1
 8007846:	b2db      	uxtb	r3, r3
 8007848:	b25a      	sxtb	r2, r3
 800784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007850:	2301      	movs	r3, #1
 8007852:	637b      	str	r3, [r7, #52]	; 0x34
 8007854:	e001      	b.n	800785a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007856:	2300      	movs	r3, #0
 8007858:	637b      	str	r3, [r7, #52]	; 0x34
 800785a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f383 8811 	msr	BASEPRI, r3
}
 8007864:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007868:	4618      	mov	r0, r3
 800786a:	3738      	adds	r7, #56	; 0x38
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b08c      	sub	sp, #48	; 0x30
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800787c:	2300      	movs	r3, #0
 800787e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10a      	bne.n	80078a0 <xQueueReceive+0x30>
	__asm volatile
 800788a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788e:	f383 8811 	msr	BASEPRI, r3
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	f3bf 8f4f 	dsb	sy
 800789a:	623b      	str	r3, [r7, #32]
}
 800789c:	bf00      	nop
 800789e:	e7fe      	b.n	800789e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d103      	bne.n	80078ae <xQueueReceive+0x3e>
 80078a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <xQueueReceive+0x42>
 80078ae:	2301      	movs	r3, #1
 80078b0:	e000      	b.n	80078b4 <xQueueReceive+0x44>
 80078b2:	2300      	movs	r3, #0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10a      	bne.n	80078ce <xQueueReceive+0x5e>
	__asm volatile
 80078b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	61fb      	str	r3, [r7, #28]
}
 80078ca:	bf00      	nop
 80078cc:	e7fe      	b.n	80078cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078ce:	f001 fa4b 	bl	8008d68 <xTaskGetSchedulerState>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d102      	bne.n	80078de <xQueueReceive+0x6e>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <xQueueReceive+0x72>
 80078de:	2301      	movs	r3, #1
 80078e0:	e000      	b.n	80078e4 <xQueueReceive+0x74>
 80078e2:	2300      	movs	r3, #0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10a      	bne.n	80078fe <xQueueReceive+0x8e>
	__asm volatile
 80078e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	61bb      	str	r3, [r7, #24]
}
 80078fa:	bf00      	nop
 80078fc:	e7fe      	b.n	80078fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078fe:	f002 f889 	bl	8009a14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007906:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	2b00      	cmp	r3, #0
 800790c:	d01f      	beq.n	800794e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800790e:	68b9      	ldr	r1, [r7, #8]
 8007910:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007912:	f000 fabe 	bl	8007e92 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	1e5a      	subs	r2, r3, #1
 800791a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00f      	beq.n	8007946 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007928:	3310      	adds	r3, #16
 800792a:	4618      	mov	r0, r3
 800792c:	f001 f85e 	bl	80089ec <xTaskRemoveFromEventList>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d007      	beq.n	8007946 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007936:	4b3d      	ldr	r3, [pc, #244]	; (8007a2c <xQueueReceive+0x1bc>)
 8007938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007946:	f002 f895 	bl	8009a74 <vPortExitCritical>
				return pdPASS;
 800794a:	2301      	movs	r3, #1
 800794c:	e069      	b.n	8007a22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d103      	bne.n	800795c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007954:	f002 f88e 	bl	8009a74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007958:	2300      	movs	r3, #0
 800795a:	e062      	b.n	8007a22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800795c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795e:	2b00      	cmp	r3, #0
 8007960:	d106      	bne.n	8007970 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007962:	f107 0310 	add.w	r3, r7, #16
 8007966:	4618      	mov	r0, r3
 8007968:	f001 f8a4 	bl	8008ab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800796c:	2301      	movs	r3, #1
 800796e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007970:	f002 f880 	bl	8009a74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007974:	f000 fdfc 	bl	8008570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007978:	f002 f84c 	bl	8009a14 <vPortEnterCritical>
 800797c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007982:	b25b      	sxtb	r3, r3
 8007984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007988:	d103      	bne.n	8007992 <xQueueReceive+0x122>
 800798a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798c:	2200      	movs	r2, #0
 800798e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007994:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007998:	b25b      	sxtb	r3, r3
 800799a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799e:	d103      	bne.n	80079a8 <xQueueReceive+0x138>
 80079a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079a8:	f002 f864 	bl	8009a74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079ac:	1d3a      	adds	r2, r7, #4
 80079ae:	f107 0310 	add.w	r3, r7, #16
 80079b2:	4611      	mov	r1, r2
 80079b4:	4618      	mov	r0, r3
 80079b6:	f001 f893 	bl	8008ae0 <xTaskCheckForTimeOut>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d123      	bne.n	8007a08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079c2:	f000 fade 	bl	8007f82 <prvIsQueueEmpty>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d017      	beq.n	80079fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ce:	3324      	adds	r3, #36	; 0x24
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	4611      	mov	r1, r2
 80079d4:	4618      	mov	r0, r3
 80079d6:	f000 ffb9 	bl	800894c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80079da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079dc:	f000 fa7f 	bl	8007ede <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80079e0:	f000 fdd4 	bl	800858c <xTaskResumeAll>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d189      	bne.n	80078fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80079ea:	4b10      	ldr	r3, [pc, #64]	; (8007a2c <xQueueReceive+0x1bc>)
 80079ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079f0:	601a      	str	r2, [r3, #0]
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	e780      	b.n	80078fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80079fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079fe:	f000 fa6e 	bl	8007ede <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a02:	f000 fdc3 	bl	800858c <xTaskResumeAll>
 8007a06:	e77a      	b.n	80078fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a0a:	f000 fa68 	bl	8007ede <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a0e:	f000 fdbd 	bl	800858c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a14:	f000 fab5 	bl	8007f82 <prvIsQueueEmpty>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f43f af6f 	beq.w	80078fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3730      	adds	r7, #48	; 0x30
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	e000ed04 	.word	0xe000ed04

08007a30 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08e      	sub	sp, #56	; 0x38
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007a42:	2300      	movs	r3, #0
 8007a44:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10a      	bne.n	8007a62 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	623b      	str	r3, [r7, #32]
}
 8007a5e:	bf00      	nop
 8007a60:	e7fe      	b.n	8007a60 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00a      	beq.n	8007a80 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	61fb      	str	r3, [r7, #28]
}
 8007a7c:	bf00      	nop
 8007a7e:	e7fe      	b.n	8007a7e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a80:	f001 f972 	bl	8008d68 <xTaskGetSchedulerState>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d102      	bne.n	8007a90 <xQueueSemaphoreTake+0x60>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <xQueueSemaphoreTake+0x64>
 8007a90:	2301      	movs	r3, #1
 8007a92:	e000      	b.n	8007a96 <xQueueSemaphoreTake+0x66>
 8007a94:	2300      	movs	r3, #0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10a      	bne.n	8007ab0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	61bb      	str	r3, [r7, #24]
}
 8007aac:	bf00      	nop
 8007aae:	e7fe      	b.n	8007aae <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ab0:	f001 ffb0 	bl	8009a14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d024      	beq.n	8007b0a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac2:	1e5a      	subs	r2, r3, #1
 8007ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d104      	bne.n	8007ada <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007ad0:	f001 fac0 	bl	8009054 <pvTaskIncrementMutexHeldCount>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00f      	beq.n	8007b02 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae4:	3310      	adds	r3, #16
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 ff80 	bl	80089ec <xTaskRemoveFromEventList>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d007      	beq.n	8007b02 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007af2:	4b54      	ldr	r3, [pc, #336]	; (8007c44 <xQueueSemaphoreTake+0x214>)
 8007af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007af8:	601a      	str	r2, [r3, #0]
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b02:	f001 ffb7 	bl	8009a74 <vPortExitCritical>
				return pdPASS;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e097      	b.n	8007c3a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d111      	bne.n	8007b34 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00a      	beq.n	8007b2c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	617b      	str	r3, [r7, #20]
}
 8007b28:	bf00      	nop
 8007b2a:	e7fe      	b.n	8007b2a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007b2c:	f001 ffa2 	bl	8009a74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b30:	2300      	movs	r3, #0
 8007b32:	e082      	b.n	8007c3a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d106      	bne.n	8007b48 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b3a:	f107 030c 	add.w	r3, r7, #12
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 ffb8 	bl	8008ab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b44:	2301      	movs	r3, #1
 8007b46:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b48:	f001 ff94 	bl	8009a74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b4c:	f000 fd10 	bl	8008570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b50:	f001 ff60 	bl	8009a14 <vPortEnterCritical>
 8007b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b5a:	b25b      	sxtb	r3, r3
 8007b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b60:	d103      	bne.n	8007b6a <xQueueSemaphoreTake+0x13a>
 8007b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b70:	b25b      	sxtb	r3, r3
 8007b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b76:	d103      	bne.n	8007b80 <xQueueSemaphoreTake+0x150>
 8007b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b80:	f001 ff78 	bl	8009a74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b84:	463a      	mov	r2, r7
 8007b86:	f107 030c 	add.w	r3, r7, #12
 8007b8a:	4611      	mov	r1, r2
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 ffa7 	bl	8008ae0 <xTaskCheckForTimeOut>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d132      	bne.n	8007bfe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b9a:	f000 f9f2 	bl	8007f82 <prvIsQueueEmpty>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d026      	beq.n	8007bf2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d109      	bne.n	8007bc0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007bac:	f001 ff32 	bl	8009a14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f001 f8f5 	bl	8008da4 <xTaskPriorityInherit>
 8007bba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007bbc:	f001 ff5a 	bl	8009a74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc2:	3324      	adds	r3, #36	; 0x24
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	4611      	mov	r1, r2
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 febf 	bl	800894c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007bce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bd0:	f000 f985 	bl	8007ede <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007bd4:	f000 fcda 	bl	800858c <xTaskResumeAll>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f47f af68 	bne.w	8007ab0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007be0:	4b18      	ldr	r3, [pc, #96]	; (8007c44 <xQueueSemaphoreTake+0x214>)
 8007be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	e75e      	b.n	8007ab0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007bf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bf4:	f000 f973 	bl	8007ede <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bf8:	f000 fcc8 	bl	800858c <xTaskResumeAll>
 8007bfc:	e758      	b.n	8007ab0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007bfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c00:	f000 f96d 	bl	8007ede <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c04:	f000 fcc2 	bl	800858c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c0a:	f000 f9ba 	bl	8007f82 <prvIsQueueEmpty>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f43f af4d 	beq.w	8007ab0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00d      	beq.n	8007c38 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007c1c:	f001 fefa 	bl	8009a14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007c20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c22:	f000 f8b4 	bl	8007d8e <prvGetDisinheritPriorityAfterTimeout>
 8007c26:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f001 f98e 	bl	8008f50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007c34:	f001 ff1e 	bl	8009a74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3738      	adds	r7, #56	; 0x38
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	e000ed04 	.word	0xe000ed04

08007c48 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b08e      	sub	sp, #56	; 0x38
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10a      	bne.n	8007c74 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	623b      	str	r3, [r7, #32]
}
 8007c70:	bf00      	nop
 8007c72:	e7fe      	b.n	8007c72 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d103      	bne.n	8007c82 <xQueueReceiveFromISR+0x3a>
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <xQueueReceiveFromISR+0x3e>
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <xQueueReceiveFromISR+0x40>
 8007c86:	2300      	movs	r3, #0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10a      	bne.n	8007ca2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	61fb      	str	r3, [r7, #28]
}
 8007c9e:	bf00      	nop
 8007ca0:	e7fe      	b.n	8007ca0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ca2:	f001 ff99 	bl	8009bd8 <vPortValidateInterruptPriority>
	__asm volatile
 8007ca6:	f3ef 8211 	mrs	r2, BASEPRI
 8007caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	61ba      	str	r2, [r7, #24]
 8007cbc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007cbe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d02f      	beq.n	8007d2e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007cd8:	68b9      	ldr	r1, [r7, #8]
 8007cda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cdc:	f000 f8d9 	bl	8007e92 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce2:	1e5a      	subs	r2, r3, #1
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007ce8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf0:	d112      	bne.n	8007d18 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d016      	beq.n	8007d28 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	3310      	adds	r3, #16
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 fe74 	bl	80089ec <xTaskRemoveFromEventList>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00e      	beq.n	8007d28 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00b      	beq.n	8007d28 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	e007      	b.n	8007d28 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	b25a      	sxtb	r2, r3
 8007d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d2c:	e001      	b.n	8007d32 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	637b      	str	r3, [r7, #52]	; 0x34
 8007d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d34:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	f383 8811 	msr	BASEPRI, r3
}
 8007d3c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3738      	adds	r7, #56	; 0x38
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10a      	bne.n	8007d70 <vQueueDelete+0x28>
	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	60bb      	str	r3, [r7, #8]
}
 8007d6c:	bf00      	nop
 8007d6e:	e7fe      	b.n	8007d6e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 f95f 	bl	8008034 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d102      	bne.n	8007d86 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f002 f835 	bl	8009df0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007d86:	bf00      	nop
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007d8e:	b480      	push	{r7}
 8007d90:	b085      	sub	sp, #20
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d006      	beq.n	8007dac <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007da8:	60fb      	str	r3, [r7, #12]
 8007daa:	e001      	b.n	8007db0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007dac:	2300      	movs	r3, #0
 8007dae:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007db0:	68fb      	ldr	r3, [r7, #12]
	}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b086      	sub	sp, #24
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	60f8      	str	r0, [r7, #12]
 8007dc6:	60b9      	str	r1, [r7, #8]
 8007dc8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10d      	bne.n	8007df8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d14d      	bne.n	8007e80 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f001 f843 	bl	8008e74 <xTaskPriorityDisinherit>
 8007dee:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	609a      	str	r2, [r3, #8]
 8007df6:	e043      	b.n	8007e80 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d119      	bne.n	8007e32 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6858      	ldr	r0, [r3, #4]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e06:	461a      	mov	r2, r3
 8007e08:	68b9      	ldr	r1, [r7, #8]
 8007e0a:	f002 fbd0 	bl	800a5ae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	685a      	ldr	r2, [r3, #4]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e16:	441a      	add	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d32b      	bcc.n	8007e80 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	605a      	str	r2, [r3, #4]
 8007e30:	e026      	b.n	8007e80 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	68d8      	ldr	r0, [r3, #12]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	68b9      	ldr	r1, [r7, #8]
 8007e3e:	f002 fbb6 	bl	800a5ae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	68da      	ldr	r2, [r3, #12]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4a:	425b      	negs	r3, r3
 8007e4c:	441a      	add	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	68da      	ldr	r2, [r3, #12]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d207      	bcs.n	8007e6e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	689a      	ldr	r2, [r3, #8]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e66:	425b      	negs	r3, r3
 8007e68:	441a      	add	r2, r3
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d105      	bne.n	8007e80 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d002      	beq.n	8007e80 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	1c5a      	adds	r2, r3, #1
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007e88:	697b      	ldr	r3, [r7, #20]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3718      	adds	r7, #24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b082      	sub	sp, #8
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d018      	beq.n	8007ed6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68da      	ldr	r2, [r3, #12]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eac:	441a      	add	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68da      	ldr	r2, [r3, #12]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d303      	bcc.n	8007ec6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68d9      	ldr	r1, [r3, #12]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ece:	461a      	mov	r2, r3
 8007ed0:	6838      	ldr	r0, [r7, #0]
 8007ed2:	f002 fb6c 	bl	800a5ae <memcpy>
	}
}
 8007ed6:	bf00      	nop
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ee6:	f001 fd95 	bl	8009a14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ef0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ef2:	e011      	b.n	8007f18 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d012      	beq.n	8007f22 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	3324      	adds	r3, #36	; 0x24
 8007f00:	4618      	mov	r0, r3
 8007f02:	f000 fd73 	bl	80089ec <xTaskRemoveFromEventList>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f0c:	f000 fe4a 	bl	8008ba4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
 8007f12:	3b01      	subs	r3, #1
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	dce9      	bgt.n	8007ef4 <prvUnlockQueue+0x16>
 8007f20:	e000      	b.n	8007f24 <prvUnlockQueue+0x46>
					break;
 8007f22:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	22ff      	movs	r2, #255	; 0xff
 8007f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007f2c:	f001 fda2 	bl	8009a74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f30:	f001 fd70 	bl	8009a14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f3a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f3c:	e011      	b.n	8007f62 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d012      	beq.n	8007f6c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	3310      	adds	r3, #16
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 fd4e 	bl	80089ec <xTaskRemoveFromEventList>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f56:	f000 fe25 	bl	8008ba4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f5a:	7bbb      	ldrb	r3, [r7, #14]
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	dce9      	bgt.n	8007f3e <prvUnlockQueue+0x60>
 8007f6a:	e000      	b.n	8007f6e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f6c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	22ff      	movs	r2, #255	; 0xff
 8007f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007f76:	f001 fd7d 	bl	8009a74 <vPortExitCritical>
}
 8007f7a:	bf00      	nop
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b084      	sub	sp, #16
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f8a:	f001 fd43 	bl	8009a14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d102      	bne.n	8007f9c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f96:	2301      	movs	r3, #1
 8007f98:	60fb      	str	r3, [r7, #12]
 8007f9a:	e001      	b.n	8007fa0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fa0:	f001 fd68 	bl	8009a74 <vPortExitCritical>

	return xReturn;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b084      	sub	sp, #16
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fb6:	f001 fd2d 	bl	8009a14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d102      	bne.n	8007fcc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	60fb      	str	r3, [r7, #12]
 8007fca:	e001      	b.n	8007fd0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fd0:	f001 fd50 	bl	8009a74 <vPortExitCritical>

	return xReturn;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
	...

08007fe0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fea:	2300      	movs	r3, #0
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	e014      	b.n	800801a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ff0:	4a0f      	ldr	r2, [pc, #60]	; (8008030 <vQueueAddToRegistry+0x50>)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10b      	bne.n	8008014 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ffc:	490c      	ldr	r1, [pc, #48]	; (8008030 <vQueueAddToRegistry+0x50>)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	683a      	ldr	r2, [r7, #0]
 8008002:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008006:	4a0a      	ldr	r2, [pc, #40]	; (8008030 <vQueueAddToRegistry+0x50>)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	00db      	lsls	r3, r3, #3
 800800c:	4413      	add	r3, r2
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008012:	e006      	b.n	8008022 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	3301      	adds	r3, #1
 8008018:	60fb      	str	r3, [r7, #12]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2b07      	cmp	r3, #7
 800801e:	d9e7      	bls.n	8007ff0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008020:	bf00      	nop
 8008022:	bf00      	nop
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	200009b0 	.word	0x200009b0

08008034 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800803c:	2300      	movs	r3, #0
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	e016      	b.n	8008070 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008042:	4a10      	ldr	r2, [pc, #64]	; (8008084 <vQueueUnregisterQueue+0x50>)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	00db      	lsls	r3, r3, #3
 8008048:	4413      	add	r3, r2
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	429a      	cmp	r2, r3
 8008050:	d10b      	bne.n	800806a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008052:	4a0c      	ldr	r2, [pc, #48]	; (8008084 <vQueueUnregisterQueue+0x50>)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2100      	movs	r1, #0
 8008058:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800805c:	4a09      	ldr	r2, [pc, #36]	; (8008084 <vQueueUnregisterQueue+0x50>)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	00db      	lsls	r3, r3, #3
 8008062:	4413      	add	r3, r2
 8008064:	2200      	movs	r2, #0
 8008066:	605a      	str	r2, [r3, #4]
				break;
 8008068:	e006      	b.n	8008078 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3301      	adds	r3, #1
 800806e:	60fb      	str	r3, [r7, #12]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2b07      	cmp	r3, #7
 8008074:	d9e5      	bls.n	8008042 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008076:	bf00      	nop
 8008078:	bf00      	nop
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr
 8008084:	200009b0 	.word	0x200009b0

08008088 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008098:	f001 fcbc 	bl	8009a14 <vPortEnterCritical>
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080a2:	b25b      	sxtb	r3, r3
 80080a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a8:	d103      	bne.n	80080b2 <vQueueWaitForMessageRestricted+0x2a>
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080b8:	b25b      	sxtb	r3, r3
 80080ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080be:	d103      	bne.n	80080c8 <vQueueWaitForMessageRestricted+0x40>
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080c8:	f001 fcd4 	bl	8009a74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d106      	bne.n	80080e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	3324      	adds	r3, #36	; 0x24
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	68b9      	ldr	r1, [r7, #8]
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 fc59 	bl	8008994 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80080e2:	6978      	ldr	r0, [r7, #20]
 80080e4:	f7ff fefb 	bl	8007ede <prvUnlockQueue>
	}
 80080e8:	bf00      	nop
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b08e      	sub	sp, #56	; 0x38
 80080f4:	af04      	add	r7, sp, #16
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
 80080fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10a      	bne.n	800811a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	623b      	str	r3, [r7, #32]
}
 8008116:	bf00      	nop
 8008118:	e7fe      	b.n	8008118 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800811a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10a      	bne.n	8008136 <xTaskCreateStatic+0x46>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	61fb      	str	r3, [r7, #28]
}
 8008132:	bf00      	nop
 8008134:	e7fe      	b.n	8008134 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008136:	2360      	movs	r3, #96	; 0x60
 8008138:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	2b60      	cmp	r3, #96	; 0x60
 800813e:	d00a      	beq.n	8008156 <xTaskCreateStatic+0x66>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	61bb      	str	r3, [r7, #24]
}
 8008152:	bf00      	nop
 8008154:	e7fe      	b.n	8008154 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008156:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815a:	2b00      	cmp	r3, #0
 800815c:	d01e      	beq.n	800819c <xTaskCreateStatic+0xac>
 800815e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008160:	2b00      	cmp	r3, #0
 8008162:	d01b      	beq.n	800819c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008166:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800816c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008170:	2202      	movs	r2, #2
 8008172:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008176:	2300      	movs	r3, #0
 8008178:	9303      	str	r3, [sp, #12]
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	9302      	str	r3, [sp, #8]
 800817e:	f107 0314 	add.w	r3, r7, #20
 8008182:	9301      	str	r3, [sp, #4]
 8008184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	68b9      	ldr	r1, [r7, #8]
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f000 f850 	bl	8008234 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008196:	f000 f8df 	bl	8008358 <prvAddNewTaskToReadyList>
 800819a:	e001      	b.n	80081a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800819c:	2300      	movs	r3, #0
 800819e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80081a0:	697b      	ldr	r3, [r7, #20]
	}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3728      	adds	r7, #40	; 0x28
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b08c      	sub	sp, #48	; 0x30
 80081ae:	af04      	add	r7, sp, #16
 80081b0:	60f8      	str	r0, [r7, #12]
 80081b2:	60b9      	str	r1, [r7, #8]
 80081b4:	603b      	str	r3, [r7, #0]
 80081b6:	4613      	mov	r3, r2
 80081b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80081ba:	88fb      	ldrh	r3, [r7, #6]
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4618      	mov	r0, r3
 80081c0:	f001 fd4a 	bl	8009c58 <pvPortMalloc>
 80081c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00e      	beq.n	80081ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80081cc:	2060      	movs	r0, #96	; 0x60
 80081ce:	f001 fd43 	bl	8009c58 <pvPortMalloc>
 80081d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	631a      	str	r2, [r3, #48]	; 0x30
 80081e0:	e005      	b.n	80081ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80081e2:	6978      	ldr	r0, [r7, #20]
 80081e4:	f001 fe04 	bl	8009df0 <vPortFree>
 80081e8:	e001      	b.n	80081ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081ea:	2300      	movs	r3, #0
 80081ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d017      	beq.n	8008224 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081fc:	88fa      	ldrh	r2, [r7, #6]
 80081fe:	2300      	movs	r3, #0
 8008200:	9303      	str	r3, [sp, #12]
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	9302      	str	r3, [sp, #8]
 8008206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008208:	9301      	str	r3, [sp, #4]
 800820a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	68b9      	ldr	r1, [r7, #8]
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f000 f80e 	bl	8008234 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008218:	69f8      	ldr	r0, [r7, #28]
 800821a:	f000 f89d 	bl	8008358 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800821e:	2301      	movs	r3, #1
 8008220:	61bb      	str	r3, [r7, #24]
 8008222:	e002      	b.n	800822a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008224:	f04f 33ff 	mov.w	r3, #4294967295
 8008228:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800822a:	69bb      	ldr	r3, [r7, #24]
	}
 800822c:	4618      	mov	r0, r3
 800822e:	3720      	adds	r7, #32
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b088      	sub	sp, #32
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
 8008240:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008244:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	461a      	mov	r2, r3
 800824c:	21a5      	movs	r1, #165	; 0xa5
 800824e:	f002 f932 	bl	800a4b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800825c:	3b01      	subs	r3, #1
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	f023 0307 	bic.w	r3, r3, #7
 800826a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	f003 0307 	and.w	r3, r3, #7
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00a      	beq.n	800828c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827a:	f383 8811 	msr	BASEPRI, r3
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	617b      	str	r3, [r7, #20]
}
 8008288:	bf00      	nop
 800828a:	e7fe      	b.n	800828a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d01f      	beq.n	80082d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008292:	2300      	movs	r3, #0
 8008294:	61fb      	str	r3, [r7, #28]
 8008296:	e012      	b.n	80082be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	4413      	add	r3, r2
 800829e:	7819      	ldrb	r1, [r3, #0]
 80082a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	4413      	add	r3, r2
 80082a6:	3334      	adds	r3, #52	; 0x34
 80082a8:	460a      	mov	r2, r1
 80082aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	4413      	add	r3, r2
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d006      	beq.n	80082c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	3301      	adds	r3, #1
 80082bc:	61fb      	str	r3, [r7, #28]
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	2b0f      	cmp	r3, #15
 80082c2:	d9e9      	bls.n	8008298 <prvInitialiseNewTask+0x64>
 80082c4:	e000      	b.n	80082c8 <prvInitialiseNewTask+0x94>
			{
				break;
 80082c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80082c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ca:	2200      	movs	r2, #0
 80082cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082d0:	e003      	b.n	80082da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80082d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80082da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082dc:	2b37      	cmp	r3, #55	; 0x37
 80082de:	d901      	bls.n	80082e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80082e0:	2337      	movs	r3, #55	; 0x37
 80082e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80082e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80082ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80082f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f2:	2200      	movs	r2, #0
 80082f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f8:	3304      	adds	r3, #4
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7fe fe56 	bl	8006fac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008302:	3318      	adds	r3, #24
 8008304:	4618      	mov	r0, r3
 8008306:	f7fe fe51 	bl	8006fac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800830e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008312:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800831a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800831e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8008320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008322:	2200      	movs	r2, #0
 8008324:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008328:	2200      	movs	r2, #0
 800832a:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800832c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832e:	2200      	movs	r2, #0
 8008330:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	68f9      	ldr	r1, [r7, #12]
 8008338:	69b8      	ldr	r0, [r7, #24]
 800833a:	f001 fa41 	bl	80097c0 <pxPortInitialiseStack>
 800833e:	4602      	mov	r2, r0
 8008340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008342:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008346:	2b00      	cmp	r3, #0
 8008348:	d002      	beq.n	8008350 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800834a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800834e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008350:	bf00      	nop
 8008352:	3720      	adds	r7, #32
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008360:	f001 fb58 	bl	8009a14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008364:	4b2d      	ldr	r3, [pc, #180]	; (800841c <prvAddNewTaskToReadyList+0xc4>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3301      	adds	r3, #1
 800836a:	4a2c      	ldr	r2, [pc, #176]	; (800841c <prvAddNewTaskToReadyList+0xc4>)
 800836c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800836e:	4b2c      	ldr	r3, [pc, #176]	; (8008420 <prvAddNewTaskToReadyList+0xc8>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d109      	bne.n	800838a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008376:	4a2a      	ldr	r2, [pc, #168]	; (8008420 <prvAddNewTaskToReadyList+0xc8>)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800837c:	4b27      	ldr	r3, [pc, #156]	; (800841c <prvAddNewTaskToReadyList+0xc4>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d110      	bne.n	80083a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008384:	f000 fc32 	bl	8008bec <prvInitialiseTaskLists>
 8008388:	e00d      	b.n	80083a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800838a:	4b26      	ldr	r3, [pc, #152]	; (8008424 <prvAddNewTaskToReadyList+0xcc>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d109      	bne.n	80083a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008392:	4b23      	ldr	r3, [pc, #140]	; (8008420 <prvAddNewTaskToReadyList+0xc8>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839c:	429a      	cmp	r2, r3
 800839e:	d802      	bhi.n	80083a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80083a0:	4a1f      	ldr	r2, [pc, #124]	; (8008420 <prvAddNewTaskToReadyList+0xc8>)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80083a6:	4b20      	ldr	r3, [pc, #128]	; (8008428 <prvAddNewTaskToReadyList+0xd0>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3301      	adds	r3, #1
 80083ac:	4a1e      	ldr	r2, [pc, #120]	; (8008428 <prvAddNewTaskToReadyList+0xd0>)
 80083ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80083b0:	4b1d      	ldr	r3, [pc, #116]	; (8008428 <prvAddNewTaskToReadyList+0xd0>)
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083bc:	4b1b      	ldr	r3, [pc, #108]	; (800842c <prvAddNewTaskToReadyList+0xd4>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d903      	bls.n	80083cc <prvAddNewTaskToReadyList+0x74>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c8:	4a18      	ldr	r2, [pc, #96]	; (800842c <prvAddNewTaskToReadyList+0xd4>)
 80083ca:	6013      	str	r3, [r2, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d0:	4613      	mov	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4a15      	ldr	r2, [pc, #84]	; (8008430 <prvAddNewTaskToReadyList+0xd8>)
 80083da:	441a      	add	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3304      	adds	r3, #4
 80083e0:	4619      	mov	r1, r3
 80083e2:	4610      	mov	r0, r2
 80083e4:	f7fe fdef 	bl	8006fc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80083e8:	f001 fb44 	bl	8009a74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80083ec:	4b0d      	ldr	r3, [pc, #52]	; (8008424 <prvAddNewTaskToReadyList+0xcc>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00e      	beq.n	8008412 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80083f4:	4b0a      	ldr	r3, [pc, #40]	; (8008420 <prvAddNewTaskToReadyList+0xc8>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fe:	429a      	cmp	r2, r3
 8008400:	d207      	bcs.n	8008412 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008402:	4b0c      	ldr	r3, [pc, #48]	; (8008434 <prvAddNewTaskToReadyList+0xdc>)
 8008404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008408:	601a      	str	r2, [r3, #0]
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008412:	bf00      	nop
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	20000ec4 	.word	0x20000ec4
 8008420:	200009f0 	.word	0x200009f0
 8008424:	20000ed0 	.word	0x20000ed0
 8008428:	20000ee0 	.word	0x20000ee0
 800842c:	20000ecc 	.word	0x20000ecc
 8008430:	200009f4 	.word	0x200009f4
 8008434:	e000ed04 	.word	0xe000ed04

08008438 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008440:	2300      	movs	r3, #0
 8008442:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d017      	beq.n	800847a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800844a:	4b13      	ldr	r3, [pc, #76]	; (8008498 <vTaskDelay+0x60>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00a      	beq.n	8008468 <vTaskDelay+0x30>
	__asm volatile
 8008452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	60bb      	str	r3, [r7, #8]
}
 8008464:	bf00      	nop
 8008466:	e7fe      	b.n	8008466 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008468:	f000 f882 	bl	8008570 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800846c:	2100      	movs	r1, #0
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fe04 	bl	800907c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008474:	f000 f88a 	bl	800858c <xTaskResumeAll>
 8008478:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d107      	bne.n	8008490 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008480:	4b06      	ldr	r3, [pc, #24]	; (800849c <vTaskDelay+0x64>)
 8008482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008486:	601a      	str	r2, [r3, #0]
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008490:	bf00      	nop
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	20000eec 	.word	0x20000eec
 800849c:	e000ed04 	.word	0xe000ed04

080084a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b08a      	sub	sp, #40	; 0x28
 80084a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80084a6:	2300      	movs	r3, #0
 80084a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80084aa:	2300      	movs	r3, #0
 80084ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80084ae:	463a      	mov	r2, r7
 80084b0:	1d39      	adds	r1, r7, #4
 80084b2:	f107 0308 	add.w	r3, r7, #8
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fe fd24 	bl	8006f04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	9202      	str	r2, [sp, #8]
 80084c4:	9301      	str	r3, [sp, #4]
 80084c6:	2300      	movs	r3, #0
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	2300      	movs	r3, #0
 80084cc:	460a      	mov	r2, r1
 80084ce:	4922      	ldr	r1, [pc, #136]	; (8008558 <vTaskStartScheduler+0xb8>)
 80084d0:	4822      	ldr	r0, [pc, #136]	; (800855c <vTaskStartScheduler+0xbc>)
 80084d2:	f7ff fe0d 	bl	80080f0 <xTaskCreateStatic>
 80084d6:	4603      	mov	r3, r0
 80084d8:	4a21      	ldr	r2, [pc, #132]	; (8008560 <vTaskStartScheduler+0xc0>)
 80084da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084dc:	4b20      	ldr	r3, [pc, #128]	; (8008560 <vTaskStartScheduler+0xc0>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d002      	beq.n	80084ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80084e4:	2301      	movs	r3, #1
 80084e6:	617b      	str	r3, [r7, #20]
 80084e8:	e001      	b.n	80084ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80084ea:	2300      	movs	r3, #0
 80084ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d102      	bne.n	80084fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80084f4:	f000 fe16 	bl	8009124 <xTimerCreateTimerTask>
 80084f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d118      	bne.n	8008532 <vTaskStartScheduler+0x92>
	__asm volatile
 8008500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	613b      	str	r3, [r7, #16]
}
 8008512:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008514:	4b13      	ldr	r3, [pc, #76]	; (8008564 <vTaskStartScheduler+0xc4>)
 8008516:	f04f 32ff 	mov.w	r2, #4294967295
 800851a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800851c:	4b12      	ldr	r3, [pc, #72]	; (8008568 <vTaskStartScheduler+0xc8>)
 800851e:	2201      	movs	r2, #1
 8008520:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008522:	4b12      	ldr	r3, [pc, #72]	; (800856c <vTaskStartScheduler+0xcc>)
 8008524:	2200      	movs	r2, #0
 8008526:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8008528:	f7f8 f926 	bl	8000778 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800852c:	f001 f9d0 	bl	80098d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008530:	e00e      	b.n	8008550 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008538:	d10a      	bne.n	8008550 <vTaskStartScheduler+0xb0>
	__asm volatile
 800853a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853e:	f383 8811 	msr	BASEPRI, r3
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	f3bf 8f4f 	dsb	sy
 800854a:	60fb      	str	r3, [r7, #12]
}
 800854c:	bf00      	nop
 800854e:	e7fe      	b.n	800854e <vTaskStartScheduler+0xae>
}
 8008550:	bf00      	nop
 8008552:	3718      	adds	r7, #24
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	0800b254 	.word	0x0800b254
 800855c:	08008bbd 	.word	0x08008bbd
 8008560:	20000ee8 	.word	0x20000ee8
 8008564:	20000ee4 	.word	0x20000ee4
 8008568:	20000ed0 	.word	0x20000ed0
 800856c:	20000ec8 	.word	0x20000ec8

08008570 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008570:	b480      	push	{r7}
 8008572:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008574:	4b04      	ldr	r3, [pc, #16]	; (8008588 <vTaskSuspendAll+0x18>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3301      	adds	r3, #1
 800857a:	4a03      	ldr	r2, [pc, #12]	; (8008588 <vTaskSuspendAll+0x18>)
 800857c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800857e:	bf00      	nop
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	20000eec 	.word	0x20000eec

0800858c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008592:	2300      	movs	r3, #0
 8008594:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008596:	2300      	movs	r3, #0
 8008598:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800859a:	4b42      	ldr	r3, [pc, #264]	; (80086a4 <xTaskResumeAll+0x118>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10a      	bne.n	80085b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a6:	f383 8811 	msr	BASEPRI, r3
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	603b      	str	r3, [r7, #0]
}
 80085b4:	bf00      	nop
 80085b6:	e7fe      	b.n	80085b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80085b8:	f001 fa2c 	bl	8009a14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80085bc:	4b39      	ldr	r3, [pc, #228]	; (80086a4 <xTaskResumeAll+0x118>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	3b01      	subs	r3, #1
 80085c2:	4a38      	ldr	r2, [pc, #224]	; (80086a4 <xTaskResumeAll+0x118>)
 80085c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085c6:	4b37      	ldr	r3, [pc, #220]	; (80086a4 <xTaskResumeAll+0x118>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d162      	bne.n	8008694 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085ce:	4b36      	ldr	r3, [pc, #216]	; (80086a8 <xTaskResumeAll+0x11c>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d05e      	beq.n	8008694 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085d6:	e02f      	b.n	8008638 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085d8:	4b34      	ldr	r3, [pc, #208]	; (80086ac <xTaskResumeAll+0x120>)
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	3318      	adds	r3, #24
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fe fd4b 	bl	8007080 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	3304      	adds	r3, #4
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fe fd46 	bl	8007080 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f8:	4b2d      	ldr	r3, [pc, #180]	; (80086b0 <xTaskResumeAll+0x124>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d903      	bls.n	8008608 <xTaskResumeAll+0x7c>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	4a2a      	ldr	r2, [pc, #168]	; (80086b0 <xTaskResumeAll+0x124>)
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800860c:	4613      	mov	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4a27      	ldr	r2, [pc, #156]	; (80086b4 <xTaskResumeAll+0x128>)
 8008616:	441a      	add	r2, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	3304      	adds	r3, #4
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f7fe fcd1 	bl	8006fc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008628:	4b23      	ldr	r3, [pc, #140]	; (80086b8 <xTaskResumeAll+0x12c>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862e:	429a      	cmp	r2, r3
 8008630:	d302      	bcc.n	8008638 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008632:	4b22      	ldr	r3, [pc, #136]	; (80086bc <xTaskResumeAll+0x130>)
 8008634:	2201      	movs	r2, #1
 8008636:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008638:	4b1c      	ldr	r3, [pc, #112]	; (80086ac <xTaskResumeAll+0x120>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1cb      	bne.n	80085d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008646:	f000 fb6f 	bl	8008d28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800864a:	4b1d      	ldr	r3, [pc, #116]	; (80086c0 <xTaskResumeAll+0x134>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d010      	beq.n	8008678 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008656:	f000 f847 	bl	80086e8 <xTaskIncrementTick>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008660:	4b16      	ldr	r3, [pc, #88]	; (80086bc <xTaskResumeAll+0x130>)
 8008662:	2201      	movs	r2, #1
 8008664:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	3b01      	subs	r3, #1
 800866a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1f1      	bne.n	8008656 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008672:	4b13      	ldr	r3, [pc, #76]	; (80086c0 <xTaskResumeAll+0x134>)
 8008674:	2200      	movs	r2, #0
 8008676:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008678:	4b10      	ldr	r3, [pc, #64]	; (80086bc <xTaskResumeAll+0x130>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d009      	beq.n	8008694 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008680:	2301      	movs	r3, #1
 8008682:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008684:	4b0f      	ldr	r3, [pc, #60]	; (80086c4 <xTaskResumeAll+0x138>)
 8008686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800868a:	601a      	str	r2, [r3, #0]
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008694:	f001 f9ee 	bl	8009a74 <vPortExitCritical>

	return xAlreadyYielded;
 8008698:	68bb      	ldr	r3, [r7, #8]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	20000eec 	.word	0x20000eec
 80086a8:	20000ec4 	.word	0x20000ec4
 80086ac:	20000e84 	.word	0x20000e84
 80086b0:	20000ecc 	.word	0x20000ecc
 80086b4:	200009f4 	.word	0x200009f4
 80086b8:	200009f0 	.word	0x200009f0
 80086bc:	20000ed8 	.word	0x20000ed8
 80086c0:	20000ed4 	.word	0x20000ed4
 80086c4:	e000ed04 	.word	0xe000ed04

080086c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086ce:	4b05      	ldr	r3, [pc, #20]	; (80086e4 <xTaskGetTickCount+0x1c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80086d4:	687b      	ldr	r3, [r7, #4]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	20000ec8 	.word	0x20000ec8

080086e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b086      	sub	sp, #24
 80086ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80086ee:	2300      	movs	r3, #0
 80086f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086f2:	4b4f      	ldr	r3, [pc, #316]	; (8008830 <xTaskIncrementTick+0x148>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f040 808f 	bne.w	800881a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086fc:	4b4d      	ldr	r3, [pc, #308]	; (8008834 <xTaskIncrementTick+0x14c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	3301      	adds	r3, #1
 8008702:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008704:	4a4b      	ldr	r2, [pc, #300]	; (8008834 <xTaskIncrementTick+0x14c>)
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d120      	bne.n	8008752 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008710:	4b49      	ldr	r3, [pc, #292]	; (8008838 <xTaskIncrementTick+0x150>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00a      	beq.n	8008730 <xTaskIncrementTick+0x48>
	__asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871e:	f383 8811 	msr	BASEPRI, r3
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	603b      	str	r3, [r7, #0]
}
 800872c:	bf00      	nop
 800872e:	e7fe      	b.n	800872e <xTaskIncrementTick+0x46>
 8008730:	4b41      	ldr	r3, [pc, #260]	; (8008838 <xTaskIncrementTick+0x150>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	60fb      	str	r3, [r7, #12]
 8008736:	4b41      	ldr	r3, [pc, #260]	; (800883c <xTaskIncrementTick+0x154>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a3f      	ldr	r2, [pc, #252]	; (8008838 <xTaskIncrementTick+0x150>)
 800873c:	6013      	str	r3, [r2, #0]
 800873e:	4a3f      	ldr	r2, [pc, #252]	; (800883c <xTaskIncrementTick+0x154>)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6013      	str	r3, [r2, #0]
 8008744:	4b3e      	ldr	r3, [pc, #248]	; (8008840 <xTaskIncrementTick+0x158>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3301      	adds	r3, #1
 800874a:	4a3d      	ldr	r2, [pc, #244]	; (8008840 <xTaskIncrementTick+0x158>)
 800874c:	6013      	str	r3, [r2, #0]
 800874e:	f000 faeb 	bl	8008d28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008752:	4b3c      	ldr	r3, [pc, #240]	; (8008844 <xTaskIncrementTick+0x15c>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	693a      	ldr	r2, [r7, #16]
 8008758:	429a      	cmp	r2, r3
 800875a:	d349      	bcc.n	80087f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800875c:	4b36      	ldr	r3, [pc, #216]	; (8008838 <xTaskIncrementTick+0x150>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d104      	bne.n	8008770 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008766:	4b37      	ldr	r3, [pc, #220]	; (8008844 <xTaskIncrementTick+0x15c>)
 8008768:	f04f 32ff 	mov.w	r2, #4294967295
 800876c:	601a      	str	r2, [r3, #0]
					break;
 800876e:	e03f      	b.n	80087f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008770:	4b31      	ldr	r3, [pc, #196]	; (8008838 <xTaskIncrementTick+0x150>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008780:	693a      	ldr	r2, [r7, #16]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	429a      	cmp	r2, r3
 8008786:	d203      	bcs.n	8008790 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008788:	4a2e      	ldr	r2, [pc, #184]	; (8008844 <xTaskIncrementTick+0x15c>)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800878e:	e02f      	b.n	80087f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	3304      	adds	r3, #4
 8008794:	4618      	mov	r0, r3
 8008796:	f7fe fc73 	bl	8007080 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d004      	beq.n	80087ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	3318      	adds	r3, #24
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7fe fc6a 	bl	8007080 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b0:	4b25      	ldr	r3, [pc, #148]	; (8008848 <xTaskIncrementTick+0x160>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d903      	bls.n	80087c0 <xTaskIncrementTick+0xd8>
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087bc:	4a22      	ldr	r2, [pc, #136]	; (8008848 <xTaskIncrementTick+0x160>)
 80087be:	6013      	str	r3, [r2, #0]
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c4:	4613      	mov	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4a1f      	ldr	r2, [pc, #124]	; (800884c <xTaskIncrementTick+0x164>)
 80087ce:	441a      	add	r2, r3
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	3304      	adds	r3, #4
 80087d4:	4619      	mov	r1, r3
 80087d6:	4610      	mov	r0, r2
 80087d8:	f7fe fbf5 	bl	8006fc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e0:	4b1b      	ldr	r3, [pc, #108]	; (8008850 <xTaskIncrementTick+0x168>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d3b8      	bcc.n	800875c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80087ea:	2301      	movs	r3, #1
 80087ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087ee:	e7b5      	b.n	800875c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087f0:	4b17      	ldr	r3, [pc, #92]	; (8008850 <xTaskIncrementTick+0x168>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f6:	4915      	ldr	r1, [pc, #84]	; (800884c <xTaskIncrementTick+0x164>)
 80087f8:	4613      	mov	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	440b      	add	r3, r1
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d901      	bls.n	800880c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008808:	2301      	movs	r3, #1
 800880a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800880c:	4b11      	ldr	r3, [pc, #68]	; (8008854 <xTaskIncrementTick+0x16c>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d007      	beq.n	8008824 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008814:	2301      	movs	r3, #1
 8008816:	617b      	str	r3, [r7, #20]
 8008818:	e004      	b.n	8008824 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800881a:	4b0f      	ldr	r3, [pc, #60]	; (8008858 <xTaskIncrementTick+0x170>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	3301      	adds	r3, #1
 8008820:	4a0d      	ldr	r2, [pc, #52]	; (8008858 <xTaskIncrementTick+0x170>)
 8008822:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008824:	697b      	ldr	r3, [r7, #20]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	20000eec 	.word	0x20000eec
 8008834:	20000ec8 	.word	0x20000ec8
 8008838:	20000e7c 	.word	0x20000e7c
 800883c:	20000e80 	.word	0x20000e80
 8008840:	20000edc 	.word	0x20000edc
 8008844:	20000ee4 	.word	0x20000ee4
 8008848:	20000ecc 	.word	0x20000ecc
 800884c:	200009f4 	.word	0x200009f4
 8008850:	200009f0 	.word	0x200009f0
 8008854:	20000ed8 	.word	0x20000ed8
 8008858:	20000ed4 	.word	0x20000ed4

0800885c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008862:	4b33      	ldr	r3, [pc, #204]	; (8008930 <vTaskSwitchContext+0xd4>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800886a:	4b32      	ldr	r3, [pc, #200]	; (8008934 <vTaskSwitchContext+0xd8>)
 800886c:	2201      	movs	r2, #1
 800886e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008870:	e05a      	b.n	8008928 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 8008872:	4b30      	ldr	r3, [pc, #192]	; (8008934 <vTaskSwitchContext+0xd8>)
 8008874:	2200      	movs	r2, #0
 8008876:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8008878:	f7f7 ff85 	bl	8000786 <getRunTimeCounterValue>
 800887c:	4603      	mov	r3, r0
 800887e:	4a2e      	ldr	r2, [pc, #184]	; (8008938 <vTaskSwitchContext+0xdc>)
 8008880:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8008882:	4b2d      	ldr	r3, [pc, #180]	; (8008938 <vTaskSwitchContext+0xdc>)
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	4b2d      	ldr	r3, [pc, #180]	; (800893c <vTaskSwitchContext+0xe0>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	429a      	cmp	r2, r3
 800888c:	d909      	bls.n	80088a2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800888e:	4b2c      	ldr	r3, [pc, #176]	; (8008940 <vTaskSwitchContext+0xe4>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008894:	4a28      	ldr	r2, [pc, #160]	; (8008938 <vTaskSwitchContext+0xdc>)
 8008896:	6810      	ldr	r0, [r2, #0]
 8008898:	4a28      	ldr	r2, [pc, #160]	; (800893c <vTaskSwitchContext+0xe0>)
 800889a:	6812      	ldr	r2, [r2, #0]
 800889c:	1a82      	subs	r2, r0, r2
 800889e:	440a      	add	r2, r1
 80088a0:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80088a2:	4b25      	ldr	r3, [pc, #148]	; (8008938 <vTaskSwitchContext+0xdc>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a25      	ldr	r2, [pc, #148]	; (800893c <vTaskSwitchContext+0xe0>)
 80088a8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088aa:	4b26      	ldr	r3, [pc, #152]	; (8008944 <vTaskSwitchContext+0xe8>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	60fb      	str	r3, [r7, #12]
 80088b0:	e010      	b.n	80088d4 <vTaskSwitchContext+0x78>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10a      	bne.n	80088ce <vTaskSwitchContext+0x72>
	__asm volatile
 80088b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088bc:	f383 8811 	msr	BASEPRI, r3
 80088c0:	f3bf 8f6f 	isb	sy
 80088c4:	f3bf 8f4f 	dsb	sy
 80088c8:	607b      	str	r3, [r7, #4]
}
 80088ca:	bf00      	nop
 80088cc:	e7fe      	b.n	80088cc <vTaskSwitchContext+0x70>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	60fb      	str	r3, [r7, #12]
 80088d4:	491c      	ldr	r1, [pc, #112]	; (8008948 <vTaskSwitchContext+0xec>)
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	4613      	mov	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4413      	add	r3, r2
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	440b      	add	r3, r1
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d0e4      	beq.n	80088b2 <vTaskSwitchContext+0x56>
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	4613      	mov	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4a15      	ldr	r2, [pc, #84]	; (8008948 <vTaskSwitchContext+0xec>)
 80088f4:	4413      	add	r3, r2
 80088f6:	60bb      	str	r3, [r7, #8]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	685a      	ldr	r2, [r3, #4]
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	605a      	str	r2, [r3, #4]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	3308      	adds	r3, #8
 800890a:	429a      	cmp	r2, r3
 800890c:	d104      	bne.n	8008918 <vTaskSwitchContext+0xbc>
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	605a      	str	r2, [r3, #4]
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	4a08      	ldr	r2, [pc, #32]	; (8008940 <vTaskSwitchContext+0xe4>)
 8008920:	6013      	str	r3, [r2, #0]
 8008922:	4a08      	ldr	r2, [pc, #32]	; (8008944 <vTaskSwitchContext+0xe8>)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6013      	str	r3, [r2, #0]
}
 8008928:	bf00      	nop
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	20000eec 	.word	0x20000eec
 8008934:	20000ed8 	.word	0x20000ed8
 8008938:	20000ef4 	.word	0x20000ef4
 800893c:	20000ef0 	.word	0x20000ef0
 8008940:	200009f0 	.word	0x200009f0
 8008944:	20000ecc 	.word	0x20000ecc
 8008948:	200009f4 	.word	0x200009f4

0800894c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10a      	bne.n	8008972 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800895c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	60fb      	str	r3, [r7, #12]
}
 800896e:	bf00      	nop
 8008970:	e7fe      	b.n	8008970 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008972:	4b07      	ldr	r3, [pc, #28]	; (8008990 <vTaskPlaceOnEventList+0x44>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3318      	adds	r3, #24
 8008978:	4619      	mov	r1, r3
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f7fe fb47 	bl	800700e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008980:	2101      	movs	r1, #1
 8008982:	6838      	ldr	r0, [r7, #0]
 8008984:	f000 fb7a 	bl	800907c <prvAddCurrentTaskToDelayedList>
}
 8008988:	bf00      	nop
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	200009f0 	.word	0x200009f0

08008994 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d10a      	bne.n	80089bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80089a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	617b      	str	r3, [r7, #20]
}
 80089b8:	bf00      	nop
 80089ba:	e7fe      	b.n	80089ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089bc:	4b0a      	ldr	r3, [pc, #40]	; (80089e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3318      	adds	r3, #24
 80089c2:	4619      	mov	r1, r3
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f7fe fafe 	bl	8006fc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80089d0:	f04f 33ff 	mov.w	r3, #4294967295
 80089d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80089d6:	6879      	ldr	r1, [r7, #4]
 80089d8:	68b8      	ldr	r0, [r7, #8]
 80089da:	f000 fb4f 	bl	800907c <prvAddCurrentTaskToDelayedList>
	}
 80089de:	bf00      	nop
 80089e0:	3718      	adds	r7, #24
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	200009f0 	.word	0x200009f0

080089ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10a      	bne.n	8008a18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a06:	f383 8811 	msr	BASEPRI, r3
 8008a0a:	f3bf 8f6f 	isb	sy
 8008a0e:	f3bf 8f4f 	dsb	sy
 8008a12:	60fb      	str	r3, [r7, #12]
}
 8008a14:	bf00      	nop
 8008a16:	e7fe      	b.n	8008a16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	3318      	adds	r3, #24
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7fe fb2f 	bl	8007080 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a22:	4b1e      	ldr	r3, [pc, #120]	; (8008a9c <xTaskRemoveFromEventList+0xb0>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d11d      	bne.n	8008a66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	3304      	adds	r3, #4
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fe fb26 	bl	8007080 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a38:	4b19      	ldr	r3, [pc, #100]	; (8008aa0 <xTaskRemoveFromEventList+0xb4>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d903      	bls.n	8008a48 <xTaskRemoveFromEventList+0x5c>
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a44:	4a16      	ldr	r2, [pc, #88]	; (8008aa0 <xTaskRemoveFromEventList+0xb4>)
 8008a46:	6013      	str	r3, [r2, #0]
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4413      	add	r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4a13      	ldr	r2, [pc, #76]	; (8008aa4 <xTaskRemoveFromEventList+0xb8>)
 8008a56:	441a      	add	r2, r3
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	3304      	adds	r3, #4
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	4610      	mov	r0, r2
 8008a60:	f7fe fab1 	bl	8006fc6 <vListInsertEnd>
 8008a64:	e005      	b.n	8008a72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	3318      	adds	r3, #24
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	480e      	ldr	r0, [pc, #56]	; (8008aa8 <xTaskRemoveFromEventList+0xbc>)
 8008a6e:	f7fe faaa 	bl	8006fc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a76:	4b0d      	ldr	r3, [pc, #52]	; (8008aac <xTaskRemoveFromEventList+0xc0>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d905      	bls.n	8008a8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a80:	2301      	movs	r3, #1
 8008a82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a84:	4b0a      	ldr	r3, [pc, #40]	; (8008ab0 <xTaskRemoveFromEventList+0xc4>)
 8008a86:	2201      	movs	r2, #1
 8008a88:	601a      	str	r2, [r3, #0]
 8008a8a:	e001      	b.n	8008a90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a90:	697b      	ldr	r3, [r7, #20]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3718      	adds	r7, #24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20000eec 	.word	0x20000eec
 8008aa0:	20000ecc 	.word	0x20000ecc
 8008aa4:	200009f4 	.word	0x200009f4
 8008aa8:	20000e84 	.word	0x20000e84
 8008aac:	200009f0 	.word	0x200009f0
 8008ab0:	20000ed8 	.word	0x20000ed8

08008ab4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008abc:	4b06      	ldr	r3, [pc, #24]	; (8008ad8 <vTaskInternalSetTimeOutState+0x24>)
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ac4:	4b05      	ldr	r3, [pc, #20]	; (8008adc <vTaskInternalSetTimeOutState+0x28>)
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	605a      	str	r2, [r3, #4]
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr
 8008ad8:	20000edc 	.word	0x20000edc
 8008adc:	20000ec8 	.word	0x20000ec8

08008ae0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b088      	sub	sp, #32
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10a      	bne.n	8008b06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	613b      	str	r3, [r7, #16]
}
 8008b02:	bf00      	nop
 8008b04:	e7fe      	b.n	8008b04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10a      	bne.n	8008b22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b10:	f383 8811 	msr	BASEPRI, r3
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	60fb      	str	r3, [r7, #12]
}
 8008b1e:	bf00      	nop
 8008b20:	e7fe      	b.n	8008b20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008b22:	f000 ff77 	bl	8009a14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b26:	4b1d      	ldr	r3, [pc, #116]	; (8008b9c <xTaskCheckForTimeOut+0xbc>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b3e:	d102      	bne.n	8008b46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b40:	2300      	movs	r3, #0
 8008b42:	61fb      	str	r3, [r7, #28]
 8008b44:	e023      	b.n	8008b8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	4b15      	ldr	r3, [pc, #84]	; (8008ba0 <xTaskCheckForTimeOut+0xc0>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d007      	beq.n	8008b62 <xTaskCheckForTimeOut+0x82>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d302      	bcc.n	8008b62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	61fb      	str	r3, [r7, #28]
 8008b60:	e015      	b.n	8008b8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d20b      	bcs.n	8008b84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	1ad2      	subs	r2, r2, r3
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7ff ff9b 	bl	8008ab4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	61fb      	str	r3, [r7, #28]
 8008b82:	e004      	b.n	8008b8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	2200      	movs	r2, #0
 8008b88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b8e:	f000 ff71 	bl	8009a74 <vPortExitCritical>

	return xReturn;
 8008b92:	69fb      	ldr	r3, [r7, #28]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3720      	adds	r7, #32
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	20000ec8 	.word	0x20000ec8
 8008ba0:	20000edc 	.word	0x20000edc

08008ba4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ba8:	4b03      	ldr	r3, [pc, #12]	; (8008bb8 <vTaskMissedYield+0x14>)
 8008baa:	2201      	movs	r2, #1
 8008bac:	601a      	str	r2, [r3, #0]
}
 8008bae:	bf00      	nop
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	20000ed8 	.word	0x20000ed8

08008bbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008bc4:	f000 f852 	bl	8008c6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008bc8:	4b06      	ldr	r3, [pc, #24]	; (8008be4 <prvIdleTask+0x28>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d9f9      	bls.n	8008bc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bd0:	4b05      	ldr	r3, [pc, #20]	; (8008be8 <prvIdleTask+0x2c>)
 8008bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008be0:	e7f0      	b.n	8008bc4 <prvIdleTask+0x8>
 8008be2:	bf00      	nop
 8008be4:	200009f4 	.word	0x200009f4
 8008be8:	e000ed04 	.word	0xe000ed04

08008bec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	607b      	str	r3, [r7, #4]
 8008bf6:	e00c      	b.n	8008c12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4a12      	ldr	r2, [pc, #72]	; (8008c4c <prvInitialiseTaskLists+0x60>)
 8008c04:	4413      	add	r3, r2
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fe f9b0 	bl	8006f6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	607b      	str	r3, [r7, #4]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2b37      	cmp	r3, #55	; 0x37
 8008c16:	d9ef      	bls.n	8008bf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c18:	480d      	ldr	r0, [pc, #52]	; (8008c50 <prvInitialiseTaskLists+0x64>)
 8008c1a:	f7fe f9a7 	bl	8006f6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c1e:	480d      	ldr	r0, [pc, #52]	; (8008c54 <prvInitialiseTaskLists+0x68>)
 8008c20:	f7fe f9a4 	bl	8006f6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c24:	480c      	ldr	r0, [pc, #48]	; (8008c58 <prvInitialiseTaskLists+0x6c>)
 8008c26:	f7fe f9a1 	bl	8006f6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c2a:	480c      	ldr	r0, [pc, #48]	; (8008c5c <prvInitialiseTaskLists+0x70>)
 8008c2c:	f7fe f99e 	bl	8006f6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c30:	480b      	ldr	r0, [pc, #44]	; (8008c60 <prvInitialiseTaskLists+0x74>)
 8008c32:	f7fe f99b 	bl	8006f6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c36:	4b0b      	ldr	r3, [pc, #44]	; (8008c64 <prvInitialiseTaskLists+0x78>)
 8008c38:	4a05      	ldr	r2, [pc, #20]	; (8008c50 <prvInitialiseTaskLists+0x64>)
 8008c3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c3c:	4b0a      	ldr	r3, [pc, #40]	; (8008c68 <prvInitialiseTaskLists+0x7c>)
 8008c3e:	4a05      	ldr	r2, [pc, #20]	; (8008c54 <prvInitialiseTaskLists+0x68>)
 8008c40:	601a      	str	r2, [r3, #0]
}
 8008c42:	bf00      	nop
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	200009f4 	.word	0x200009f4
 8008c50:	20000e54 	.word	0x20000e54
 8008c54:	20000e68 	.word	0x20000e68
 8008c58:	20000e84 	.word	0x20000e84
 8008c5c:	20000e98 	.word	0x20000e98
 8008c60:	20000eb0 	.word	0x20000eb0
 8008c64:	20000e7c 	.word	0x20000e7c
 8008c68:	20000e80 	.word	0x20000e80

08008c6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c72:	e019      	b.n	8008ca8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c74:	f000 fece 	bl	8009a14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c78:	4b10      	ldr	r3, [pc, #64]	; (8008cbc <prvCheckTasksWaitingTermination+0x50>)
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3304      	adds	r3, #4
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fe f9fb 	bl	8007080 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c8a:	4b0d      	ldr	r3, [pc, #52]	; (8008cc0 <prvCheckTasksWaitingTermination+0x54>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	4a0b      	ldr	r2, [pc, #44]	; (8008cc0 <prvCheckTasksWaitingTermination+0x54>)
 8008c92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c94:	4b0b      	ldr	r3, [pc, #44]	; (8008cc4 <prvCheckTasksWaitingTermination+0x58>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	4a0a      	ldr	r2, [pc, #40]	; (8008cc4 <prvCheckTasksWaitingTermination+0x58>)
 8008c9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c9e:	f000 fee9 	bl	8009a74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f810 	bl	8008cc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ca8:	4b06      	ldr	r3, [pc, #24]	; (8008cc4 <prvCheckTasksWaitingTermination+0x58>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1e1      	bne.n	8008c74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008cb0:	bf00      	nop
 8008cb2:	bf00      	nop
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	20000e98 	.word	0x20000e98
 8008cc0:	20000ec4 	.word	0x20000ec4
 8008cc4:	20000eac 	.word	0x20000eac

08008cc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d108      	bne.n	8008cec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f001 f886 	bl	8009df0 <vPortFree>
				vPortFree( pxTCB );
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f001 f883 	bl	8009df0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008cea:	e018      	b.n	8008d1e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d103      	bne.n	8008cfe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f001 f87a 	bl	8009df0 <vPortFree>
	}
 8008cfc:	e00f      	b.n	8008d1e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d00a      	beq.n	8008d1e <prvDeleteTCB+0x56>
	__asm volatile
 8008d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0c:	f383 8811 	msr	BASEPRI, r3
 8008d10:	f3bf 8f6f 	isb	sy
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	60fb      	str	r3, [r7, #12]
}
 8008d1a:	bf00      	nop
 8008d1c:	e7fe      	b.n	8008d1c <prvDeleteTCB+0x54>
	}
 8008d1e:	bf00      	nop
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
	...

08008d28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d2e:	4b0c      	ldr	r3, [pc, #48]	; (8008d60 <prvResetNextTaskUnblockTime+0x38>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d104      	bne.n	8008d42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d38:	4b0a      	ldr	r3, [pc, #40]	; (8008d64 <prvResetNextTaskUnblockTime+0x3c>)
 8008d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d40:	e008      	b.n	8008d54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d42:	4b07      	ldr	r3, [pc, #28]	; (8008d60 <prvResetNextTaskUnblockTime+0x38>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	4a04      	ldr	r2, [pc, #16]	; (8008d64 <prvResetNextTaskUnblockTime+0x3c>)
 8008d52:	6013      	str	r3, [r2, #0]
}
 8008d54:	bf00      	nop
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	20000e7c 	.word	0x20000e7c
 8008d64:	20000ee4 	.word	0x20000ee4

08008d68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d6e:	4b0b      	ldr	r3, [pc, #44]	; (8008d9c <xTaskGetSchedulerState+0x34>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d102      	bne.n	8008d7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d76:	2301      	movs	r3, #1
 8008d78:	607b      	str	r3, [r7, #4]
 8008d7a:	e008      	b.n	8008d8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d7c:	4b08      	ldr	r3, [pc, #32]	; (8008da0 <xTaskGetSchedulerState+0x38>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d102      	bne.n	8008d8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d84:	2302      	movs	r3, #2
 8008d86:	607b      	str	r3, [r7, #4]
 8008d88:	e001      	b.n	8008d8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d8e:	687b      	ldr	r3, [r7, #4]
	}
 8008d90:	4618      	mov	r0, r3
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	20000ed0 	.word	0x20000ed0
 8008da0:	20000eec 	.word	0x20000eec

08008da4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008db0:	2300      	movs	r3, #0
 8008db2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d051      	beq.n	8008e5e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dbe:	4b2a      	ldr	r3, [pc, #168]	; (8008e68 <xTaskPriorityInherit+0xc4>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d241      	bcs.n	8008e4c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	db06      	blt.n	8008dde <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dd0:	4b25      	ldr	r3, [pc, #148]	; (8008e68 <xTaskPriorityInherit+0xc4>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	6959      	ldr	r1, [r3, #20]
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de6:	4613      	mov	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	4413      	add	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4a1f      	ldr	r2, [pc, #124]	; (8008e6c <xTaskPriorityInherit+0xc8>)
 8008df0:	4413      	add	r3, r2
 8008df2:	4299      	cmp	r1, r3
 8008df4:	d122      	bne.n	8008e3c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	3304      	adds	r3, #4
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fe f940 	bl	8007080 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e00:	4b19      	ldr	r3, [pc, #100]	; (8008e68 <xTaskPriorityInherit+0xc4>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e0e:	4b18      	ldr	r3, [pc, #96]	; (8008e70 <xTaskPriorityInherit+0xcc>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d903      	bls.n	8008e1e <xTaskPriorityInherit+0x7a>
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1a:	4a15      	ldr	r2, [pc, #84]	; (8008e70 <xTaskPriorityInherit+0xcc>)
 8008e1c:	6013      	str	r3, [r2, #0]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e22:	4613      	mov	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4a10      	ldr	r2, [pc, #64]	; (8008e6c <xTaskPriorityInherit+0xc8>)
 8008e2c:	441a      	add	r2, r3
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	3304      	adds	r3, #4
 8008e32:	4619      	mov	r1, r3
 8008e34:	4610      	mov	r0, r2
 8008e36:	f7fe f8c6 	bl	8006fc6 <vListInsertEnd>
 8008e3a:	e004      	b.n	8008e46 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e3c:	4b0a      	ldr	r3, [pc, #40]	; (8008e68 <xTaskPriorityInherit+0xc4>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008e46:	2301      	movs	r3, #1
 8008e48:	60fb      	str	r3, [r7, #12]
 8008e4a:	e008      	b.n	8008e5e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e50:	4b05      	ldr	r3, [pc, #20]	; (8008e68 <xTaskPriorityInherit+0xc4>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d201      	bcs.n	8008e5e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
	}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	200009f0 	.word	0x200009f0
 8008e6c:	200009f4 	.word	0x200009f4
 8008e70:	20000ecc 	.word	0x20000ecc

08008e74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008e80:	2300      	movs	r3, #0
 8008e82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d056      	beq.n	8008f38 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008e8a:	4b2e      	ldr	r3, [pc, #184]	; (8008f44 <xTaskPriorityDisinherit+0xd0>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d00a      	beq.n	8008eaa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e98:	f383 8811 	msr	BASEPRI, r3
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	60fb      	str	r3, [r7, #12]
}
 8008ea6:	bf00      	nop
 8008ea8:	e7fe      	b.n	8008ea8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10a      	bne.n	8008ec8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	60bb      	str	r3, [r7, #8]
}
 8008ec4:	bf00      	nop
 8008ec6:	e7fe      	b.n	8008ec6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ecc:	1e5a      	subs	r2, r3, #1
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d02c      	beq.n	8008f38 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d128      	bne.n	8008f38 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	3304      	adds	r3, #4
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fe f8c8 	bl	8007080 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f08:	4b0f      	ldr	r3, [pc, #60]	; (8008f48 <xTaskPriorityDisinherit+0xd4>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d903      	bls.n	8008f18 <xTaskPriorityDisinherit+0xa4>
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f14:	4a0c      	ldr	r2, [pc, #48]	; (8008f48 <xTaskPriorityDisinherit+0xd4>)
 8008f16:	6013      	str	r3, [r2, #0]
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	4413      	add	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4a09      	ldr	r2, [pc, #36]	; (8008f4c <xTaskPriorityDisinherit+0xd8>)
 8008f26:	441a      	add	r2, r3
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	3304      	adds	r3, #4
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4610      	mov	r0, r2
 8008f30:	f7fe f849 	bl	8006fc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f34:	2301      	movs	r3, #1
 8008f36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f38:	697b      	ldr	r3, [r7, #20]
	}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3718      	adds	r7, #24
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	200009f0 	.word	0x200009f0
 8008f48:	20000ecc 	.word	0x20000ecc
 8008f4c:	200009f4 	.word	0x200009f4

08008f50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b088      	sub	sp, #32
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d06a      	beq.n	800903e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d10a      	bne.n	8008f86 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	60fb      	str	r3, [r7, #12]
}
 8008f82:	bf00      	nop
 8008f84:	e7fe      	b.n	8008f84 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d902      	bls.n	8008f96 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	61fb      	str	r3, [r7, #28]
 8008f94:	e002      	b.n	8008f9c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f9a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa0:	69fa      	ldr	r2, [r7, #28]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d04b      	beq.n	800903e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d146      	bne.n	800903e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008fb0:	4b25      	ldr	r3, [pc, #148]	; (8009048 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d10a      	bne.n	8008fd0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbe:	f383 8811 	msr	BASEPRI, r3
 8008fc2:	f3bf 8f6f 	isb	sy
 8008fc6:	f3bf 8f4f 	dsb	sy
 8008fca:	60bb      	str	r3, [r7, #8]
}
 8008fcc:	bf00      	nop
 8008fce:	e7fe      	b.n	8008fce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	69fa      	ldr	r2, [r7, #28]
 8008fda:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	db04      	blt.n	8008fee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	6959      	ldr	r1, [r3, #20]
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4a13      	ldr	r2, [pc, #76]	; (800904c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008ffe:	4413      	add	r3, r2
 8009000:	4299      	cmp	r1, r3
 8009002:	d11c      	bne.n	800903e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	3304      	adds	r3, #4
 8009008:	4618      	mov	r0, r3
 800900a:	f7fe f839 	bl	8007080 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009012:	4b0f      	ldr	r3, [pc, #60]	; (8009050 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	429a      	cmp	r2, r3
 8009018:	d903      	bls.n	8009022 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901e:	4a0c      	ldr	r2, [pc, #48]	; (8009050 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009020:	6013      	str	r3, [r2, #0]
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009026:	4613      	mov	r3, r2
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	4413      	add	r3, r2
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	4a07      	ldr	r2, [pc, #28]	; (800904c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009030:	441a      	add	r2, r3
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	3304      	adds	r3, #4
 8009036:	4619      	mov	r1, r3
 8009038:	4610      	mov	r0, r2
 800903a:	f7fd ffc4 	bl	8006fc6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800903e:	bf00      	nop
 8009040:	3720      	adds	r7, #32
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	200009f0 	.word	0x200009f0
 800904c:	200009f4 	.word	0x200009f4
 8009050:	20000ecc 	.word	0x20000ecc

08009054 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009054:	b480      	push	{r7}
 8009056:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009058:	4b07      	ldr	r3, [pc, #28]	; (8009078 <pvTaskIncrementMutexHeldCount+0x24>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d004      	beq.n	800906a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009060:	4b05      	ldr	r3, [pc, #20]	; (8009078 <pvTaskIncrementMutexHeldCount+0x24>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009066:	3201      	adds	r2, #1
 8009068:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800906a:	4b03      	ldr	r3, [pc, #12]	; (8009078 <pvTaskIncrementMutexHeldCount+0x24>)
 800906c:	681b      	ldr	r3, [r3, #0]
	}
 800906e:	4618      	mov	r0, r3
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	200009f0 	.word	0x200009f0

0800907c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009086:	4b21      	ldr	r3, [pc, #132]	; (800910c <prvAddCurrentTaskToDelayedList+0x90>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800908c:	4b20      	ldr	r3, [pc, #128]	; (8009110 <prvAddCurrentTaskToDelayedList+0x94>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	3304      	adds	r3, #4
 8009092:	4618      	mov	r0, r3
 8009094:	f7fd fff4 	bl	8007080 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909e:	d10a      	bne.n	80090b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d007      	beq.n	80090b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090a6:	4b1a      	ldr	r3, [pc, #104]	; (8009110 <prvAddCurrentTaskToDelayedList+0x94>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	3304      	adds	r3, #4
 80090ac:	4619      	mov	r1, r3
 80090ae:	4819      	ldr	r0, [pc, #100]	; (8009114 <prvAddCurrentTaskToDelayedList+0x98>)
 80090b0:	f7fd ff89 	bl	8006fc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090b4:	e026      	b.n	8009104 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4413      	add	r3, r2
 80090bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090be:	4b14      	ldr	r3, [pc, #80]	; (8009110 <prvAddCurrentTaskToDelayedList+0x94>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d209      	bcs.n	80090e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090ce:	4b12      	ldr	r3, [pc, #72]	; (8009118 <prvAddCurrentTaskToDelayedList+0x9c>)
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	4b0f      	ldr	r3, [pc, #60]	; (8009110 <prvAddCurrentTaskToDelayedList+0x94>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	3304      	adds	r3, #4
 80090d8:	4619      	mov	r1, r3
 80090da:	4610      	mov	r0, r2
 80090dc:	f7fd ff97 	bl	800700e <vListInsert>
}
 80090e0:	e010      	b.n	8009104 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090e2:	4b0e      	ldr	r3, [pc, #56]	; (800911c <prvAddCurrentTaskToDelayedList+0xa0>)
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	4b0a      	ldr	r3, [pc, #40]	; (8009110 <prvAddCurrentTaskToDelayedList+0x94>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	3304      	adds	r3, #4
 80090ec:	4619      	mov	r1, r3
 80090ee:	4610      	mov	r0, r2
 80090f0:	f7fd ff8d 	bl	800700e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80090f4:	4b0a      	ldr	r3, [pc, #40]	; (8009120 <prvAddCurrentTaskToDelayedList+0xa4>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d202      	bcs.n	8009104 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80090fe:	4a08      	ldr	r2, [pc, #32]	; (8009120 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	6013      	str	r3, [r2, #0]
}
 8009104:	bf00      	nop
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	20000ec8 	.word	0x20000ec8
 8009110:	200009f0 	.word	0x200009f0
 8009114:	20000eb0 	.word	0x20000eb0
 8009118:	20000e80 	.word	0x20000e80
 800911c:	20000e7c 	.word	0x20000e7c
 8009120:	20000ee4 	.word	0x20000ee4

08009124 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b08a      	sub	sp, #40	; 0x28
 8009128:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800912a:	2300      	movs	r3, #0
 800912c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800912e:	f000 fb07 	bl	8009740 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009132:	4b1c      	ldr	r3, [pc, #112]	; (80091a4 <xTimerCreateTimerTask+0x80>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d021      	beq.n	800917e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800913a:	2300      	movs	r3, #0
 800913c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800913e:	2300      	movs	r3, #0
 8009140:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009142:	1d3a      	adds	r2, r7, #4
 8009144:	f107 0108 	add.w	r1, r7, #8
 8009148:	f107 030c 	add.w	r3, r7, #12
 800914c:	4618      	mov	r0, r3
 800914e:	f7fd fef3 	bl	8006f38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009152:	6879      	ldr	r1, [r7, #4]
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	9202      	str	r2, [sp, #8]
 800915a:	9301      	str	r3, [sp, #4]
 800915c:	2302      	movs	r3, #2
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	2300      	movs	r3, #0
 8009162:	460a      	mov	r2, r1
 8009164:	4910      	ldr	r1, [pc, #64]	; (80091a8 <xTimerCreateTimerTask+0x84>)
 8009166:	4811      	ldr	r0, [pc, #68]	; (80091ac <xTimerCreateTimerTask+0x88>)
 8009168:	f7fe ffc2 	bl	80080f0 <xTaskCreateStatic>
 800916c:	4603      	mov	r3, r0
 800916e:	4a10      	ldr	r2, [pc, #64]	; (80091b0 <xTimerCreateTimerTask+0x8c>)
 8009170:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009172:	4b0f      	ldr	r3, [pc, #60]	; (80091b0 <xTimerCreateTimerTask+0x8c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800917a:	2301      	movs	r3, #1
 800917c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10a      	bne.n	800919a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	613b      	str	r3, [r7, #16]
}
 8009196:	bf00      	nop
 8009198:	e7fe      	b.n	8009198 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800919a:	697b      	ldr	r3, [r7, #20]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3718      	adds	r7, #24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	20000f28 	.word	0x20000f28
 80091a8:	0800b284 	.word	0x0800b284
 80091ac:	080092e9 	.word	0x080092e9
 80091b0:	20000f2c 	.word	0x20000f2c

080091b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b08a      	sub	sp, #40	; 0x28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]
 80091c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80091c2:	2300      	movs	r3, #0
 80091c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10a      	bne.n	80091e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80091cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	623b      	str	r3, [r7, #32]
}
 80091de:	bf00      	nop
 80091e0:	e7fe      	b.n	80091e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80091e2:	4b1a      	ldr	r3, [pc, #104]	; (800924c <xTimerGenericCommand+0x98>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d02a      	beq.n	8009240 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	2b05      	cmp	r3, #5
 80091fa:	dc18      	bgt.n	800922e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80091fc:	f7ff fdb4 	bl	8008d68 <xTaskGetSchedulerState>
 8009200:	4603      	mov	r3, r0
 8009202:	2b02      	cmp	r3, #2
 8009204:	d109      	bne.n	800921a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009206:	4b11      	ldr	r3, [pc, #68]	; (800924c <xTimerGenericCommand+0x98>)
 8009208:	6818      	ldr	r0, [r3, #0]
 800920a:	f107 0110 	add.w	r1, r7, #16
 800920e:	2300      	movs	r3, #0
 8009210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009212:	f7fe f907 	bl	8007424 <xQueueGenericSend>
 8009216:	6278      	str	r0, [r7, #36]	; 0x24
 8009218:	e012      	b.n	8009240 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800921a:	4b0c      	ldr	r3, [pc, #48]	; (800924c <xTimerGenericCommand+0x98>)
 800921c:	6818      	ldr	r0, [r3, #0]
 800921e:	f107 0110 	add.w	r1, r7, #16
 8009222:	2300      	movs	r3, #0
 8009224:	2200      	movs	r2, #0
 8009226:	f7fe f8fd 	bl	8007424 <xQueueGenericSend>
 800922a:	6278      	str	r0, [r7, #36]	; 0x24
 800922c:	e008      	b.n	8009240 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800922e:	4b07      	ldr	r3, [pc, #28]	; (800924c <xTimerGenericCommand+0x98>)
 8009230:	6818      	ldr	r0, [r3, #0]
 8009232:	f107 0110 	add.w	r1, r7, #16
 8009236:	2300      	movs	r3, #0
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	f7fe f9f1 	bl	8007620 <xQueueGenericSendFromISR>
 800923e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009242:	4618      	mov	r0, r3
 8009244:	3728      	adds	r7, #40	; 0x28
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	20000f28 	.word	0x20000f28

08009250 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af02      	add	r7, sp, #8
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800925a:	4b22      	ldr	r3, [pc, #136]	; (80092e4 <prvProcessExpiredTimer+0x94>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	3304      	adds	r3, #4
 8009268:	4618      	mov	r0, r3
 800926a:	f7fd ff09 	bl	8007080 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009274:	f003 0304 	and.w	r3, r3, #4
 8009278:	2b00      	cmp	r3, #0
 800927a:	d022      	beq.n	80092c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	699a      	ldr	r2, [r3, #24]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	18d1      	adds	r1, r2, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	6978      	ldr	r0, [r7, #20]
 800928a:	f000 f8d1 	bl	8009430 <prvInsertTimerInActiveList>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d01f      	beq.n	80092d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009294:	2300      	movs	r3, #0
 8009296:	9300      	str	r3, [sp, #0]
 8009298:	2300      	movs	r3, #0
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	2100      	movs	r1, #0
 800929e:	6978      	ldr	r0, [r7, #20]
 80092a0:	f7ff ff88 	bl	80091b4 <xTimerGenericCommand>
 80092a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d113      	bne.n	80092d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80092ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b0:	f383 8811 	msr	BASEPRI, r3
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	60fb      	str	r3, [r7, #12]
}
 80092be:	bf00      	nop
 80092c0:	e7fe      	b.n	80092c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092c8:	f023 0301 	bic.w	r3, r3, #1
 80092cc:	b2da      	uxtb	r2, r3
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	6a1b      	ldr	r3, [r3, #32]
 80092d8:	6978      	ldr	r0, [r7, #20]
 80092da:	4798      	blx	r3
}
 80092dc:	bf00      	nop
 80092de:	3718      	adds	r7, #24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	20000f20 	.word	0x20000f20

080092e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092f0:	f107 0308 	add.w	r3, r7, #8
 80092f4:	4618      	mov	r0, r3
 80092f6:	f000 f857 	bl	80093a8 <prvGetNextExpireTime>
 80092fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	4619      	mov	r1, r3
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 f803 	bl	800930c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009306:	f000 f8d5 	bl	80094b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800930a:	e7f1      	b.n	80092f0 <prvTimerTask+0x8>

0800930c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009316:	f7ff f92b 	bl	8008570 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800931a:	f107 0308 	add.w	r3, r7, #8
 800931e:	4618      	mov	r0, r3
 8009320:	f000 f866 	bl	80093f0 <prvSampleTimeNow>
 8009324:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d130      	bne.n	800938e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10a      	bne.n	8009348 <prvProcessTimerOrBlockTask+0x3c>
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	429a      	cmp	r2, r3
 8009338:	d806      	bhi.n	8009348 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800933a:	f7ff f927 	bl	800858c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800933e:	68f9      	ldr	r1, [r7, #12]
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7ff ff85 	bl	8009250 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009346:	e024      	b.n	8009392 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d008      	beq.n	8009360 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800934e:	4b13      	ldr	r3, [pc, #76]	; (800939c <prvProcessTimerOrBlockTask+0x90>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d101      	bne.n	800935c <prvProcessTimerOrBlockTask+0x50>
 8009358:	2301      	movs	r3, #1
 800935a:	e000      	b.n	800935e <prvProcessTimerOrBlockTask+0x52>
 800935c:	2300      	movs	r3, #0
 800935e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009360:	4b0f      	ldr	r3, [pc, #60]	; (80093a0 <prvProcessTimerOrBlockTask+0x94>)
 8009362:	6818      	ldr	r0, [r3, #0]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	4619      	mov	r1, r3
 800936e:	f7fe fe8b 	bl	8008088 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009372:	f7ff f90b 	bl	800858c <xTaskResumeAll>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10a      	bne.n	8009392 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800937c:	4b09      	ldr	r3, [pc, #36]	; (80093a4 <prvProcessTimerOrBlockTask+0x98>)
 800937e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009382:	601a      	str	r2, [r3, #0]
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	f3bf 8f6f 	isb	sy
}
 800938c:	e001      	b.n	8009392 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800938e:	f7ff f8fd 	bl	800858c <xTaskResumeAll>
}
 8009392:	bf00      	nop
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	20000f24 	.word	0x20000f24
 80093a0:	20000f28 	.word	0x20000f28
 80093a4:	e000ed04 	.word	0xe000ed04

080093a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80093b0:	4b0e      	ldr	r3, [pc, #56]	; (80093ec <prvGetNextExpireTime+0x44>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d101      	bne.n	80093be <prvGetNextExpireTime+0x16>
 80093ba:	2201      	movs	r2, #1
 80093bc:	e000      	b.n	80093c0 <prvGetNextExpireTime+0x18>
 80093be:	2200      	movs	r2, #0
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d105      	bne.n	80093d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093cc:	4b07      	ldr	r3, [pc, #28]	; (80093ec <prvGetNextExpireTime+0x44>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	60fb      	str	r3, [r7, #12]
 80093d6:	e001      	b.n	80093dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80093d8:	2300      	movs	r3, #0
 80093da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80093dc:	68fb      	ldr	r3, [r7, #12]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3714      	adds	r7, #20
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	20000f20 	.word	0x20000f20

080093f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80093f8:	f7ff f966 	bl	80086c8 <xTaskGetTickCount>
 80093fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80093fe:	4b0b      	ldr	r3, [pc, #44]	; (800942c <prvSampleTimeNow+0x3c>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	429a      	cmp	r2, r3
 8009406:	d205      	bcs.n	8009414 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009408:	f000 f936 	bl	8009678 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	601a      	str	r2, [r3, #0]
 8009412:	e002      	b.n	800941a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800941a:	4a04      	ldr	r2, [pc, #16]	; (800942c <prvSampleTimeNow+0x3c>)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009420:	68fb      	ldr	r3, [r7, #12]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	20000f30 	.word	0x20000f30

08009430 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]
 800943c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800943e:	2300      	movs	r3, #0
 8009440:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	429a      	cmp	r2, r3
 8009454:	d812      	bhi.n	800947c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	1ad2      	subs	r2, r2, r3
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	429a      	cmp	r2, r3
 8009462:	d302      	bcc.n	800946a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009464:	2301      	movs	r3, #1
 8009466:	617b      	str	r3, [r7, #20]
 8009468:	e01b      	b.n	80094a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800946a:	4b10      	ldr	r3, [pc, #64]	; (80094ac <prvInsertTimerInActiveList+0x7c>)
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	3304      	adds	r3, #4
 8009472:	4619      	mov	r1, r3
 8009474:	4610      	mov	r0, r2
 8009476:	f7fd fdca 	bl	800700e <vListInsert>
 800947a:	e012      	b.n	80094a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	429a      	cmp	r2, r3
 8009482:	d206      	bcs.n	8009492 <prvInsertTimerInActiveList+0x62>
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	429a      	cmp	r2, r3
 800948a:	d302      	bcc.n	8009492 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800948c:	2301      	movs	r3, #1
 800948e:	617b      	str	r3, [r7, #20]
 8009490:	e007      	b.n	80094a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009492:	4b07      	ldr	r3, [pc, #28]	; (80094b0 <prvInsertTimerInActiveList+0x80>)
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	3304      	adds	r3, #4
 800949a:	4619      	mov	r1, r3
 800949c:	4610      	mov	r0, r2
 800949e:	f7fd fdb6 	bl	800700e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80094a2:	697b      	ldr	r3, [r7, #20]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3718      	adds	r7, #24
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	20000f24 	.word	0x20000f24
 80094b0:	20000f20 	.word	0x20000f20

080094b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b08e      	sub	sp, #56	; 0x38
 80094b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094ba:	e0ca      	b.n	8009652 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	da18      	bge.n	80094f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80094c2:	1d3b      	adds	r3, r7, #4
 80094c4:	3304      	adds	r3, #4
 80094c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80094c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10a      	bne.n	80094e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80094ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d2:	f383 8811 	msr	BASEPRI, r3
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	61fb      	str	r3, [r7, #28]
}
 80094e0:	bf00      	nop
 80094e2:	e7fe      	b.n	80094e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80094e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094ea:	6850      	ldr	r0, [r2, #4]
 80094ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094ee:	6892      	ldr	r2, [r2, #8]
 80094f0:	4611      	mov	r1, r2
 80094f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f2c0 80ab 	blt.w	8009652 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009502:	695b      	ldr	r3, [r3, #20]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d004      	beq.n	8009512 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950a:	3304      	adds	r3, #4
 800950c:	4618      	mov	r0, r3
 800950e:	f7fd fdb7 	bl	8007080 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009512:	463b      	mov	r3, r7
 8009514:	4618      	mov	r0, r3
 8009516:	f7ff ff6b 	bl	80093f0 <prvSampleTimeNow>
 800951a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b09      	cmp	r3, #9
 8009520:	f200 8096 	bhi.w	8009650 <prvProcessReceivedCommands+0x19c>
 8009524:	a201      	add	r2, pc, #4	; (adr r2, 800952c <prvProcessReceivedCommands+0x78>)
 8009526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952a:	bf00      	nop
 800952c:	08009555 	.word	0x08009555
 8009530:	08009555 	.word	0x08009555
 8009534:	08009555 	.word	0x08009555
 8009538:	080095c9 	.word	0x080095c9
 800953c:	080095dd 	.word	0x080095dd
 8009540:	08009627 	.word	0x08009627
 8009544:	08009555 	.word	0x08009555
 8009548:	08009555 	.word	0x08009555
 800954c:	080095c9 	.word	0x080095c9
 8009550:	080095dd 	.word	0x080095dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800955a:	f043 0301 	orr.w	r3, r3, #1
 800955e:	b2da      	uxtb	r2, r3
 8009560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	18d1      	adds	r1, r2, r3
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009574:	f7ff ff5c 	bl	8009430 <prvInsertTimerInActiveList>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d069      	beq.n	8009652 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800957e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009580:	6a1b      	ldr	r3, [r3, #32]
 8009582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009584:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800958c:	f003 0304 	and.w	r3, r3, #4
 8009590:	2b00      	cmp	r3, #0
 8009592:	d05e      	beq.n	8009652 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	441a      	add	r2, r3
 800959c:	2300      	movs	r3, #0
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	2300      	movs	r3, #0
 80095a2:	2100      	movs	r1, #0
 80095a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095a6:	f7ff fe05 	bl	80091b4 <xTimerGenericCommand>
 80095aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80095ac:	6a3b      	ldr	r3, [r7, #32]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d14f      	bne.n	8009652 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80095b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b6:	f383 8811 	msr	BASEPRI, r3
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	61bb      	str	r3, [r7, #24]
}
 80095c4:	bf00      	nop
 80095c6:	e7fe      	b.n	80095c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095ce:	f023 0301 	bic.w	r3, r3, #1
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80095da:	e03a      	b.n	8009652 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095e2:	f043 0301 	orr.w	r3, r3, #1
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80095f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10a      	bne.n	8009612 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	617b      	str	r3, [r7, #20]
}
 800960e:	bf00      	nop
 8009610:	e7fe      	b.n	8009610 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009614:	699a      	ldr	r2, [r3, #24]
 8009616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009618:	18d1      	adds	r1, r2, r3
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800961e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009620:	f7ff ff06 	bl	8009430 <prvInsertTimerInActiveList>
					break;
 8009624:	e015      	b.n	8009652 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800962c:	f003 0302 	and.w	r3, r3, #2
 8009630:	2b00      	cmp	r3, #0
 8009632:	d103      	bne.n	800963c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009636:	f000 fbdb 	bl	8009df0 <vPortFree>
 800963a:	e00a      	b.n	8009652 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800963c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009642:	f023 0301 	bic.w	r3, r3, #1
 8009646:	b2da      	uxtb	r2, r3
 8009648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800964e:	e000      	b.n	8009652 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009650:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009652:	4b08      	ldr	r3, [pc, #32]	; (8009674 <prvProcessReceivedCommands+0x1c0>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	1d39      	adds	r1, r7, #4
 8009658:	2200      	movs	r2, #0
 800965a:	4618      	mov	r0, r3
 800965c:	f7fe f908 	bl	8007870 <xQueueReceive>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	f47f af2a 	bne.w	80094bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009668:	bf00      	nop
 800966a:	bf00      	nop
 800966c:	3730      	adds	r7, #48	; 0x30
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	20000f28 	.word	0x20000f28

08009678 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b088      	sub	sp, #32
 800967c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800967e:	e048      	b.n	8009712 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009680:	4b2d      	ldr	r3, [pc, #180]	; (8009738 <prvSwitchTimerLists+0xc0>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800968a:	4b2b      	ldr	r3, [pc, #172]	; (8009738 <prvSwitchTimerLists+0xc0>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	3304      	adds	r3, #4
 8009698:	4618      	mov	r0, r3
 800969a:	f7fd fcf1 	bl	8007080 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096ac:	f003 0304 	and.w	r3, r3, #4
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d02e      	beq.n	8009712 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	693a      	ldr	r2, [r7, #16]
 80096ba:	4413      	add	r3, r2
 80096bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d90e      	bls.n	80096e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096d2:	4b19      	ldr	r3, [pc, #100]	; (8009738 <prvSwitchTimerLists+0xc0>)
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	3304      	adds	r3, #4
 80096da:	4619      	mov	r1, r3
 80096dc:	4610      	mov	r0, r2
 80096de:	f7fd fc96 	bl	800700e <vListInsert>
 80096e2:	e016      	b.n	8009712 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096e4:	2300      	movs	r3, #0
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	2300      	movs	r3, #0
 80096ea:	693a      	ldr	r2, [r7, #16]
 80096ec:	2100      	movs	r1, #0
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f7ff fd60 	bl	80091b4 <xTimerGenericCommand>
 80096f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10a      	bne.n	8009712 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80096fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009700:	f383 8811 	msr	BASEPRI, r3
 8009704:	f3bf 8f6f 	isb	sy
 8009708:	f3bf 8f4f 	dsb	sy
 800970c:	603b      	str	r3, [r7, #0]
}
 800970e:	bf00      	nop
 8009710:	e7fe      	b.n	8009710 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009712:	4b09      	ldr	r3, [pc, #36]	; (8009738 <prvSwitchTimerLists+0xc0>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1b1      	bne.n	8009680 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800971c:	4b06      	ldr	r3, [pc, #24]	; (8009738 <prvSwitchTimerLists+0xc0>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009722:	4b06      	ldr	r3, [pc, #24]	; (800973c <prvSwitchTimerLists+0xc4>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a04      	ldr	r2, [pc, #16]	; (8009738 <prvSwitchTimerLists+0xc0>)
 8009728:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800972a:	4a04      	ldr	r2, [pc, #16]	; (800973c <prvSwitchTimerLists+0xc4>)
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	6013      	str	r3, [r2, #0]
}
 8009730:	bf00      	nop
 8009732:	3718      	adds	r7, #24
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	20000f20 	.word	0x20000f20
 800973c:	20000f24 	.word	0x20000f24

08009740 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009746:	f000 f965 	bl	8009a14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800974a:	4b15      	ldr	r3, [pc, #84]	; (80097a0 <prvCheckForValidListAndQueue+0x60>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d120      	bne.n	8009794 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009752:	4814      	ldr	r0, [pc, #80]	; (80097a4 <prvCheckForValidListAndQueue+0x64>)
 8009754:	f7fd fc0a 	bl	8006f6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009758:	4813      	ldr	r0, [pc, #76]	; (80097a8 <prvCheckForValidListAndQueue+0x68>)
 800975a:	f7fd fc07 	bl	8006f6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800975e:	4b13      	ldr	r3, [pc, #76]	; (80097ac <prvCheckForValidListAndQueue+0x6c>)
 8009760:	4a10      	ldr	r2, [pc, #64]	; (80097a4 <prvCheckForValidListAndQueue+0x64>)
 8009762:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009764:	4b12      	ldr	r3, [pc, #72]	; (80097b0 <prvCheckForValidListAndQueue+0x70>)
 8009766:	4a10      	ldr	r2, [pc, #64]	; (80097a8 <prvCheckForValidListAndQueue+0x68>)
 8009768:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800976a:	2300      	movs	r3, #0
 800976c:	9300      	str	r3, [sp, #0]
 800976e:	4b11      	ldr	r3, [pc, #68]	; (80097b4 <prvCheckForValidListAndQueue+0x74>)
 8009770:	4a11      	ldr	r2, [pc, #68]	; (80097b8 <prvCheckForValidListAndQueue+0x78>)
 8009772:	2110      	movs	r1, #16
 8009774:	200a      	movs	r0, #10
 8009776:	f7fd fd15 	bl	80071a4 <xQueueGenericCreateStatic>
 800977a:	4603      	mov	r3, r0
 800977c:	4a08      	ldr	r2, [pc, #32]	; (80097a0 <prvCheckForValidListAndQueue+0x60>)
 800977e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009780:	4b07      	ldr	r3, [pc, #28]	; (80097a0 <prvCheckForValidListAndQueue+0x60>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d005      	beq.n	8009794 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009788:	4b05      	ldr	r3, [pc, #20]	; (80097a0 <prvCheckForValidListAndQueue+0x60>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	490b      	ldr	r1, [pc, #44]	; (80097bc <prvCheckForValidListAndQueue+0x7c>)
 800978e:	4618      	mov	r0, r3
 8009790:	f7fe fc26 	bl	8007fe0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009794:	f000 f96e 	bl	8009a74 <vPortExitCritical>
}
 8009798:	bf00      	nop
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	20000f28 	.word	0x20000f28
 80097a4:	20000ef8 	.word	0x20000ef8
 80097a8:	20000f0c 	.word	0x20000f0c
 80097ac:	20000f20 	.word	0x20000f20
 80097b0:	20000f24 	.word	0x20000f24
 80097b4:	20000fd4 	.word	0x20000fd4
 80097b8:	20000f34 	.word	0x20000f34
 80097bc:	0800b28c 	.word	0x0800b28c

080097c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	3b04      	subs	r3, #4
 80097d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80097d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	3b04      	subs	r3, #4
 80097de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	f023 0201 	bic.w	r2, r3, #1
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	3b04      	subs	r3, #4
 80097ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097f0:	4a0c      	ldr	r2, [pc, #48]	; (8009824 <pxPortInitialiseStack+0x64>)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3b14      	subs	r3, #20
 80097fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3b04      	subs	r3, #4
 8009806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f06f 0202 	mvn.w	r2, #2
 800980e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	3b20      	subs	r3, #32
 8009814:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009816:	68fb      	ldr	r3, [r7, #12]
}
 8009818:	4618      	mov	r0, r3
 800981a:	3714      	adds	r7, #20
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	08009829 	.word	0x08009829

08009828 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800982e:	2300      	movs	r3, #0
 8009830:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009832:	4b12      	ldr	r3, [pc, #72]	; (800987c <prvTaskExitError+0x54>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983a:	d00a      	beq.n	8009852 <prvTaskExitError+0x2a>
	__asm volatile
 800983c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009840:	f383 8811 	msr	BASEPRI, r3
 8009844:	f3bf 8f6f 	isb	sy
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	60fb      	str	r3, [r7, #12]
}
 800984e:	bf00      	nop
 8009850:	e7fe      	b.n	8009850 <prvTaskExitError+0x28>
	__asm volatile
 8009852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009856:	f383 8811 	msr	BASEPRI, r3
 800985a:	f3bf 8f6f 	isb	sy
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	60bb      	str	r3, [r7, #8]
}
 8009864:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009866:	bf00      	nop
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d0fc      	beq.n	8009868 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800986e:	bf00      	nop
 8009870:	bf00      	nop
 8009872:	3714      	adds	r7, #20
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr
 800987c:	20000010 	.word	0x20000010

08009880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009880:	4b07      	ldr	r3, [pc, #28]	; (80098a0 <pxCurrentTCBConst2>)
 8009882:	6819      	ldr	r1, [r3, #0]
 8009884:	6808      	ldr	r0, [r1, #0]
 8009886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988a:	f380 8809 	msr	PSP, r0
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f04f 0000 	mov.w	r0, #0
 8009896:	f380 8811 	msr	BASEPRI, r0
 800989a:	4770      	bx	lr
 800989c:	f3af 8000 	nop.w

080098a0 <pxCurrentTCBConst2>:
 80098a0:	200009f0 	.word	0x200009f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80098a4:	bf00      	nop
 80098a6:	bf00      	nop

080098a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80098a8:	4808      	ldr	r0, [pc, #32]	; (80098cc <prvPortStartFirstTask+0x24>)
 80098aa:	6800      	ldr	r0, [r0, #0]
 80098ac:	6800      	ldr	r0, [r0, #0]
 80098ae:	f380 8808 	msr	MSP, r0
 80098b2:	f04f 0000 	mov.w	r0, #0
 80098b6:	f380 8814 	msr	CONTROL, r0
 80098ba:	b662      	cpsie	i
 80098bc:	b661      	cpsie	f
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	f3bf 8f6f 	isb	sy
 80098c6:	df00      	svc	0
 80098c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80098ca:	bf00      	nop
 80098cc:	e000ed08 	.word	0xe000ed08

080098d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b086      	sub	sp, #24
 80098d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80098d6:	4b46      	ldr	r3, [pc, #280]	; (80099f0 <xPortStartScheduler+0x120>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a46      	ldr	r2, [pc, #280]	; (80099f4 <xPortStartScheduler+0x124>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d10a      	bne.n	80098f6 <xPortStartScheduler+0x26>
	__asm volatile
 80098e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e4:	f383 8811 	msr	BASEPRI, r3
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	613b      	str	r3, [r7, #16]
}
 80098f2:	bf00      	nop
 80098f4:	e7fe      	b.n	80098f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098f6:	4b3e      	ldr	r3, [pc, #248]	; (80099f0 <xPortStartScheduler+0x120>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a3f      	ldr	r2, [pc, #252]	; (80099f8 <xPortStartScheduler+0x128>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d10a      	bne.n	8009916 <xPortStartScheduler+0x46>
	__asm volatile
 8009900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	60fb      	str	r3, [r7, #12]
}
 8009912:	bf00      	nop
 8009914:	e7fe      	b.n	8009914 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009916:	4b39      	ldr	r3, [pc, #228]	; (80099fc <xPortStartScheduler+0x12c>)
 8009918:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	b2db      	uxtb	r3, r3
 8009920:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	22ff      	movs	r2, #255	; 0xff
 8009926:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	b2db      	uxtb	r3, r3
 800992e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009930:	78fb      	ldrb	r3, [r7, #3]
 8009932:	b2db      	uxtb	r3, r3
 8009934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009938:	b2da      	uxtb	r2, r3
 800993a:	4b31      	ldr	r3, [pc, #196]	; (8009a00 <xPortStartScheduler+0x130>)
 800993c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800993e:	4b31      	ldr	r3, [pc, #196]	; (8009a04 <xPortStartScheduler+0x134>)
 8009940:	2207      	movs	r2, #7
 8009942:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009944:	e009      	b.n	800995a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009946:	4b2f      	ldr	r3, [pc, #188]	; (8009a04 <xPortStartScheduler+0x134>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	3b01      	subs	r3, #1
 800994c:	4a2d      	ldr	r2, [pc, #180]	; (8009a04 <xPortStartScheduler+0x134>)
 800994e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009950:	78fb      	ldrb	r3, [r7, #3]
 8009952:	b2db      	uxtb	r3, r3
 8009954:	005b      	lsls	r3, r3, #1
 8009956:	b2db      	uxtb	r3, r3
 8009958:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800995a:	78fb      	ldrb	r3, [r7, #3]
 800995c:	b2db      	uxtb	r3, r3
 800995e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009962:	2b80      	cmp	r3, #128	; 0x80
 8009964:	d0ef      	beq.n	8009946 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009966:	4b27      	ldr	r3, [pc, #156]	; (8009a04 <xPortStartScheduler+0x134>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f1c3 0307 	rsb	r3, r3, #7
 800996e:	2b04      	cmp	r3, #4
 8009970:	d00a      	beq.n	8009988 <xPortStartScheduler+0xb8>
	__asm volatile
 8009972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009976:	f383 8811 	msr	BASEPRI, r3
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	60bb      	str	r3, [r7, #8]
}
 8009984:	bf00      	nop
 8009986:	e7fe      	b.n	8009986 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009988:	4b1e      	ldr	r3, [pc, #120]	; (8009a04 <xPortStartScheduler+0x134>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	021b      	lsls	r3, r3, #8
 800998e:	4a1d      	ldr	r2, [pc, #116]	; (8009a04 <xPortStartScheduler+0x134>)
 8009990:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009992:	4b1c      	ldr	r3, [pc, #112]	; (8009a04 <xPortStartScheduler+0x134>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800999a:	4a1a      	ldr	r2, [pc, #104]	; (8009a04 <xPortStartScheduler+0x134>)
 800999c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	b2da      	uxtb	r2, r3
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80099a6:	4b18      	ldr	r3, [pc, #96]	; (8009a08 <xPortStartScheduler+0x138>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a17      	ldr	r2, [pc, #92]	; (8009a08 <xPortStartScheduler+0x138>)
 80099ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80099b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80099b2:	4b15      	ldr	r3, [pc, #84]	; (8009a08 <xPortStartScheduler+0x138>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a14      	ldr	r2, [pc, #80]	; (8009a08 <xPortStartScheduler+0x138>)
 80099b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80099bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80099be:	f000 f8dd 	bl	8009b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80099c2:	4b12      	ldr	r3, [pc, #72]	; (8009a0c <xPortStartScheduler+0x13c>)
 80099c4:	2200      	movs	r2, #0
 80099c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80099c8:	f000 f8fc 	bl	8009bc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80099cc:	4b10      	ldr	r3, [pc, #64]	; (8009a10 <xPortStartScheduler+0x140>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a0f      	ldr	r2, [pc, #60]	; (8009a10 <xPortStartScheduler+0x140>)
 80099d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80099d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099d8:	f7ff ff66 	bl	80098a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099dc:	f7fe ff3e 	bl	800885c <vTaskSwitchContext>
	prvTaskExitError();
 80099e0:	f7ff ff22 	bl	8009828 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	e000ed00 	.word	0xe000ed00
 80099f4:	410fc271 	.word	0x410fc271
 80099f8:	410fc270 	.word	0x410fc270
 80099fc:	e000e400 	.word	0xe000e400
 8009a00:	20001024 	.word	0x20001024
 8009a04:	20001028 	.word	0x20001028
 8009a08:	e000ed20 	.word	0xe000ed20
 8009a0c:	20000010 	.word	0x20000010
 8009a10:	e000ef34 	.word	0xe000ef34

08009a14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
	__asm volatile
 8009a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1e:	f383 8811 	msr	BASEPRI, r3
 8009a22:	f3bf 8f6f 	isb	sy
 8009a26:	f3bf 8f4f 	dsb	sy
 8009a2a:	607b      	str	r3, [r7, #4]
}
 8009a2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a2e:	4b0f      	ldr	r3, [pc, #60]	; (8009a6c <vPortEnterCritical+0x58>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	3301      	adds	r3, #1
 8009a34:	4a0d      	ldr	r2, [pc, #52]	; (8009a6c <vPortEnterCritical+0x58>)
 8009a36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a38:	4b0c      	ldr	r3, [pc, #48]	; (8009a6c <vPortEnterCritical+0x58>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d10f      	bne.n	8009a60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a40:	4b0b      	ldr	r3, [pc, #44]	; (8009a70 <vPortEnterCritical+0x5c>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00a      	beq.n	8009a60 <vPortEnterCritical+0x4c>
	__asm volatile
 8009a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4e:	f383 8811 	msr	BASEPRI, r3
 8009a52:	f3bf 8f6f 	isb	sy
 8009a56:	f3bf 8f4f 	dsb	sy
 8009a5a:	603b      	str	r3, [r7, #0]
}
 8009a5c:	bf00      	nop
 8009a5e:	e7fe      	b.n	8009a5e <vPortEnterCritical+0x4a>
	}
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr
 8009a6c:	20000010 	.word	0x20000010
 8009a70:	e000ed04 	.word	0xe000ed04

08009a74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a7a:	4b12      	ldr	r3, [pc, #72]	; (8009ac4 <vPortExitCritical+0x50>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10a      	bne.n	8009a98 <vPortExitCritical+0x24>
	__asm volatile
 8009a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	607b      	str	r3, [r7, #4]
}
 8009a94:	bf00      	nop
 8009a96:	e7fe      	b.n	8009a96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a98:	4b0a      	ldr	r3, [pc, #40]	; (8009ac4 <vPortExitCritical+0x50>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	4a09      	ldr	r2, [pc, #36]	; (8009ac4 <vPortExitCritical+0x50>)
 8009aa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009aa2:	4b08      	ldr	r3, [pc, #32]	; (8009ac4 <vPortExitCritical+0x50>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d105      	bne.n	8009ab6 <vPortExitCritical+0x42>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	f383 8811 	msr	BASEPRI, r3
}
 8009ab4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ab6:	bf00      	nop
 8009ab8:	370c      	adds	r7, #12
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	20000010 	.word	0x20000010
	...

08009ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ad0:	f3ef 8009 	mrs	r0, PSP
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	4b15      	ldr	r3, [pc, #84]	; (8009b30 <pxCurrentTCBConst>)
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	f01e 0f10 	tst.w	lr, #16
 8009ae0:	bf08      	it	eq
 8009ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aea:	6010      	str	r0, [r2, #0]
 8009aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009af0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009af4:	f380 8811 	msr	BASEPRI, r0
 8009af8:	f3bf 8f4f 	dsb	sy
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	f7fe feac 	bl	800885c <vTaskSwitchContext>
 8009b04:	f04f 0000 	mov.w	r0, #0
 8009b08:	f380 8811 	msr	BASEPRI, r0
 8009b0c:	bc09      	pop	{r0, r3}
 8009b0e:	6819      	ldr	r1, [r3, #0]
 8009b10:	6808      	ldr	r0, [r1, #0]
 8009b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b16:	f01e 0f10 	tst.w	lr, #16
 8009b1a:	bf08      	it	eq
 8009b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b20:	f380 8809 	msr	PSP, r0
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	f3af 8000 	nop.w

08009b30 <pxCurrentTCBConst>:
 8009b30:	200009f0 	.word	0x200009f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b34:	bf00      	nop
 8009b36:	bf00      	nop

08009b38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b42:	f383 8811 	msr	BASEPRI, r3
 8009b46:	f3bf 8f6f 	isb	sy
 8009b4a:	f3bf 8f4f 	dsb	sy
 8009b4e:	607b      	str	r3, [r7, #4]
}
 8009b50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b52:	f7fe fdc9 	bl	80086e8 <xTaskIncrementTick>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d003      	beq.n	8009b64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b5c:	4b06      	ldr	r3, [pc, #24]	; (8009b78 <xPortSysTickHandler+0x40>)
 8009b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	2300      	movs	r3, #0
 8009b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	f383 8811 	msr	BASEPRI, r3
}
 8009b6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b70:	bf00      	nop
 8009b72:	3708      	adds	r7, #8
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	e000ed04 	.word	0xe000ed04

08009b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b80:	4b0b      	ldr	r3, [pc, #44]	; (8009bb0 <vPortSetupTimerInterrupt+0x34>)
 8009b82:	2200      	movs	r2, #0
 8009b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b86:	4b0b      	ldr	r3, [pc, #44]	; (8009bb4 <vPortSetupTimerInterrupt+0x38>)
 8009b88:	2200      	movs	r2, #0
 8009b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b8c:	4b0a      	ldr	r3, [pc, #40]	; (8009bb8 <vPortSetupTimerInterrupt+0x3c>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a0a      	ldr	r2, [pc, #40]	; (8009bbc <vPortSetupTimerInterrupt+0x40>)
 8009b92:	fba2 2303 	umull	r2, r3, r2, r3
 8009b96:	099b      	lsrs	r3, r3, #6
 8009b98:	4a09      	ldr	r2, [pc, #36]	; (8009bc0 <vPortSetupTimerInterrupt+0x44>)
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b9e:	4b04      	ldr	r3, [pc, #16]	; (8009bb0 <vPortSetupTimerInterrupt+0x34>)
 8009ba0:	2207      	movs	r2, #7
 8009ba2:	601a      	str	r2, [r3, #0]
}
 8009ba4:	bf00      	nop
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	e000e010 	.word	0xe000e010
 8009bb4:	e000e018 	.word	0xe000e018
 8009bb8:	20000004 	.word	0x20000004
 8009bbc:	10624dd3 	.word	0x10624dd3
 8009bc0:	e000e014 	.word	0xe000e014

08009bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009bd4 <vPortEnableVFP+0x10>
 8009bc8:	6801      	ldr	r1, [r0, #0]
 8009bca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009bce:	6001      	str	r1, [r0, #0]
 8009bd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009bd2:	bf00      	nop
 8009bd4:	e000ed88 	.word	0xe000ed88

08009bd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009bde:	f3ef 8305 	mrs	r3, IPSR
 8009be2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2b0f      	cmp	r3, #15
 8009be8:	d914      	bls.n	8009c14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009bea:	4a17      	ldr	r2, [pc, #92]	; (8009c48 <vPortValidateInterruptPriority+0x70>)
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	4413      	add	r3, r2
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009bf4:	4b15      	ldr	r3, [pc, #84]	; (8009c4c <vPortValidateInterruptPriority+0x74>)
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	7afa      	ldrb	r2, [r7, #11]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d20a      	bcs.n	8009c14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	607b      	str	r3, [r7, #4]
}
 8009c10:	bf00      	nop
 8009c12:	e7fe      	b.n	8009c12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c14:	4b0e      	ldr	r3, [pc, #56]	; (8009c50 <vPortValidateInterruptPriority+0x78>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c1c:	4b0d      	ldr	r3, [pc, #52]	; (8009c54 <vPortValidateInterruptPriority+0x7c>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d90a      	bls.n	8009c3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	603b      	str	r3, [r7, #0]
}
 8009c36:	bf00      	nop
 8009c38:	e7fe      	b.n	8009c38 <vPortValidateInterruptPriority+0x60>
	}
 8009c3a:	bf00      	nop
 8009c3c:	3714      	adds	r7, #20
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	e000e3f0 	.word	0xe000e3f0
 8009c4c:	20001024 	.word	0x20001024
 8009c50:	e000ed0c 	.word	0xe000ed0c
 8009c54:	20001028 	.word	0x20001028

08009c58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b08a      	sub	sp, #40	; 0x28
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c60:	2300      	movs	r3, #0
 8009c62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c64:	f7fe fc84 	bl	8008570 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c68:	4b5b      	ldr	r3, [pc, #364]	; (8009dd8 <pvPortMalloc+0x180>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d101      	bne.n	8009c74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c70:	f000 f920 	bl	8009eb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c74:	4b59      	ldr	r3, [pc, #356]	; (8009ddc <pvPortMalloc+0x184>)
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f040 8093 	bne.w	8009da8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d01d      	beq.n	8009cc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009c88:	2208      	movs	r2, #8
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f003 0307 	and.w	r3, r3, #7
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d014      	beq.n	8009cc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f023 0307 	bic.w	r3, r3, #7
 8009ca0:	3308      	adds	r3, #8
 8009ca2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f003 0307 	and.w	r3, r3, #7
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00a      	beq.n	8009cc4 <pvPortMalloc+0x6c>
	__asm volatile
 8009cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb2:	f383 8811 	msr	BASEPRI, r3
 8009cb6:	f3bf 8f6f 	isb	sy
 8009cba:	f3bf 8f4f 	dsb	sy
 8009cbe:	617b      	str	r3, [r7, #20]
}
 8009cc0:	bf00      	nop
 8009cc2:	e7fe      	b.n	8009cc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d06e      	beq.n	8009da8 <pvPortMalloc+0x150>
 8009cca:	4b45      	ldr	r3, [pc, #276]	; (8009de0 <pvPortMalloc+0x188>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d869      	bhi.n	8009da8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009cd4:	4b43      	ldr	r3, [pc, #268]	; (8009de4 <pvPortMalloc+0x18c>)
 8009cd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009cd8:	4b42      	ldr	r3, [pc, #264]	; (8009de4 <pvPortMalloc+0x18c>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cde:	e004      	b.n	8009cea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d903      	bls.n	8009cfc <pvPortMalloc+0xa4>
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1f1      	bne.n	8009ce0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009cfc:	4b36      	ldr	r3, [pc, #216]	; (8009dd8 <pvPortMalloc+0x180>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d050      	beq.n	8009da8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d06:	6a3b      	ldr	r3, [r7, #32]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2208      	movs	r2, #8
 8009d0c:	4413      	add	r3, r2
 8009d0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	6a3b      	ldr	r3, [r7, #32]
 8009d16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1a:	685a      	ldr	r2, [r3, #4]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	1ad2      	subs	r2, r2, r3
 8009d20:	2308      	movs	r3, #8
 8009d22:	005b      	lsls	r3, r3, #1
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d91f      	bls.n	8009d68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	f003 0307 	and.w	r3, r3, #7
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00a      	beq.n	8009d50 <pvPortMalloc+0xf8>
	__asm volatile
 8009d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3e:	f383 8811 	msr	BASEPRI, r3
 8009d42:	f3bf 8f6f 	isb	sy
 8009d46:	f3bf 8f4f 	dsb	sy
 8009d4a:	613b      	str	r3, [r7, #16]
}
 8009d4c:	bf00      	nop
 8009d4e:	e7fe      	b.n	8009d4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	685a      	ldr	r2, [r3, #4]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	1ad2      	subs	r2, r2, r3
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d62:	69b8      	ldr	r0, [r7, #24]
 8009d64:	f000 f908 	bl	8009f78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d68:	4b1d      	ldr	r3, [pc, #116]	; (8009de0 <pvPortMalloc+0x188>)
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	4a1b      	ldr	r2, [pc, #108]	; (8009de0 <pvPortMalloc+0x188>)
 8009d74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d76:	4b1a      	ldr	r3, [pc, #104]	; (8009de0 <pvPortMalloc+0x188>)
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	4b1b      	ldr	r3, [pc, #108]	; (8009de8 <pvPortMalloc+0x190>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d203      	bcs.n	8009d8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d82:	4b17      	ldr	r3, [pc, #92]	; (8009de0 <pvPortMalloc+0x188>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a18      	ldr	r2, [pc, #96]	; (8009de8 <pvPortMalloc+0x190>)
 8009d88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	685a      	ldr	r2, [r3, #4]
 8009d8e:	4b13      	ldr	r3, [pc, #76]	; (8009ddc <pvPortMalloc+0x184>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	431a      	orrs	r2, r3
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d9e:	4b13      	ldr	r3, [pc, #76]	; (8009dec <pvPortMalloc+0x194>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	3301      	adds	r3, #1
 8009da4:	4a11      	ldr	r2, [pc, #68]	; (8009dec <pvPortMalloc+0x194>)
 8009da6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009da8:	f7fe fbf0 	bl	800858c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	f003 0307 	and.w	r3, r3, #7
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00a      	beq.n	8009dcc <pvPortMalloc+0x174>
	__asm volatile
 8009db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dba:	f383 8811 	msr	BASEPRI, r3
 8009dbe:	f3bf 8f6f 	isb	sy
 8009dc2:	f3bf 8f4f 	dsb	sy
 8009dc6:	60fb      	str	r3, [r7, #12]
}
 8009dc8:	bf00      	nop
 8009dca:	e7fe      	b.n	8009dca <pvPortMalloc+0x172>
	return pvReturn;
 8009dcc:	69fb      	ldr	r3, [r7, #28]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3728      	adds	r7, #40	; 0x28
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	20001bec 	.word	0x20001bec
 8009ddc:	20001c00 	.word	0x20001c00
 8009de0:	20001bf0 	.word	0x20001bf0
 8009de4:	20001be4 	.word	0x20001be4
 8009de8:	20001bf4 	.word	0x20001bf4
 8009dec:	20001bf8 	.word	0x20001bf8

08009df0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b086      	sub	sp, #24
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d04d      	beq.n	8009e9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e02:	2308      	movs	r3, #8
 8009e04:	425b      	negs	r3, r3
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	4413      	add	r3, r2
 8009e0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	685a      	ldr	r2, [r3, #4]
 8009e14:	4b24      	ldr	r3, [pc, #144]	; (8009ea8 <vPortFree+0xb8>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4013      	ands	r3, r2
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d10a      	bne.n	8009e34 <vPortFree+0x44>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	60fb      	str	r3, [r7, #12]
}
 8009e30:	bf00      	nop
 8009e32:	e7fe      	b.n	8009e32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00a      	beq.n	8009e52 <vPortFree+0x62>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	60bb      	str	r3, [r7, #8]
}
 8009e4e:	bf00      	nop
 8009e50:	e7fe      	b.n	8009e50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	4b14      	ldr	r3, [pc, #80]	; (8009ea8 <vPortFree+0xb8>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d01e      	beq.n	8009e9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d11a      	bne.n	8009e9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	685a      	ldr	r2, [r3, #4]
 8009e6c:	4b0e      	ldr	r3, [pc, #56]	; (8009ea8 <vPortFree+0xb8>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	43db      	mvns	r3, r3
 8009e72:	401a      	ands	r2, r3
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e78:	f7fe fb7a 	bl	8008570 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	685a      	ldr	r2, [r3, #4]
 8009e80:	4b0a      	ldr	r3, [pc, #40]	; (8009eac <vPortFree+0xbc>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4413      	add	r3, r2
 8009e86:	4a09      	ldr	r2, [pc, #36]	; (8009eac <vPortFree+0xbc>)
 8009e88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e8a:	6938      	ldr	r0, [r7, #16]
 8009e8c:	f000 f874 	bl	8009f78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e90:	4b07      	ldr	r3, [pc, #28]	; (8009eb0 <vPortFree+0xc0>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3301      	adds	r3, #1
 8009e96:	4a06      	ldr	r2, [pc, #24]	; (8009eb0 <vPortFree+0xc0>)
 8009e98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e9a:	f7fe fb77 	bl	800858c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e9e:	bf00      	nop
 8009ea0:	3718      	adds	r7, #24
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	20001c00 	.word	0x20001c00
 8009eac:	20001bf0 	.word	0x20001bf0
 8009eb0:	20001bfc 	.word	0x20001bfc

08009eb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009eba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009ebe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ec0:	4b27      	ldr	r3, [pc, #156]	; (8009f60 <prvHeapInit+0xac>)
 8009ec2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f003 0307 	and.w	r3, r3, #7
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00c      	beq.n	8009ee8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	3307      	adds	r3, #7
 8009ed2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f023 0307 	bic.w	r3, r3, #7
 8009eda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	4a1f      	ldr	r2, [pc, #124]	; (8009f60 <prvHeapInit+0xac>)
 8009ee4:	4413      	add	r3, r2
 8009ee6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009eec:	4a1d      	ldr	r2, [pc, #116]	; (8009f64 <prvHeapInit+0xb0>)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ef2:	4b1c      	ldr	r3, [pc, #112]	; (8009f64 <prvHeapInit+0xb0>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	4413      	add	r3, r2
 8009efe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f00:	2208      	movs	r2, #8
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	1a9b      	subs	r3, r3, r2
 8009f06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f023 0307 	bic.w	r3, r3, #7
 8009f0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	4a15      	ldr	r2, [pc, #84]	; (8009f68 <prvHeapInit+0xb4>)
 8009f14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f16:	4b14      	ldr	r3, [pc, #80]	; (8009f68 <prvHeapInit+0xb4>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f1e:	4b12      	ldr	r3, [pc, #72]	; (8009f68 <prvHeapInit+0xb4>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2200      	movs	r2, #0
 8009f24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	1ad2      	subs	r2, r2, r3
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f34:	4b0c      	ldr	r3, [pc, #48]	; (8009f68 <prvHeapInit+0xb4>)
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	4a0a      	ldr	r2, [pc, #40]	; (8009f6c <prvHeapInit+0xb8>)
 8009f42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	4a09      	ldr	r2, [pc, #36]	; (8009f70 <prvHeapInit+0xbc>)
 8009f4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f4c:	4b09      	ldr	r3, [pc, #36]	; (8009f74 <prvHeapInit+0xc0>)
 8009f4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f52:	601a      	str	r2, [r3, #0]
}
 8009f54:	bf00      	nop
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr
 8009f60:	2000102c 	.word	0x2000102c
 8009f64:	20001be4 	.word	0x20001be4
 8009f68:	20001bec 	.word	0x20001bec
 8009f6c:	20001bf4 	.word	0x20001bf4
 8009f70:	20001bf0 	.word	0x20001bf0
 8009f74:	20001c00 	.word	0x20001c00

08009f78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f80:	4b28      	ldr	r3, [pc, #160]	; (800a024 <prvInsertBlockIntoFreeList+0xac>)
 8009f82:	60fb      	str	r3, [r7, #12]
 8009f84:	e002      	b.n	8009f8c <prvInsertBlockIntoFreeList+0x14>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	60fb      	str	r3, [r7, #12]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d8f7      	bhi.n	8009f86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d108      	bne.n	8009fba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	441a      	add	r2, r3
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	441a      	add	r2, r3
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d118      	bne.n	800a000 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	4b15      	ldr	r3, [pc, #84]	; (800a028 <prvInsertBlockIntoFreeList+0xb0>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d00d      	beq.n	8009ff6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	685a      	ldr	r2, [r3, #4]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	441a      	add	r2, r3
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	601a      	str	r2, [r3, #0]
 8009ff4:	e008      	b.n	800a008 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ff6:	4b0c      	ldr	r3, [pc, #48]	; (800a028 <prvInsertBlockIntoFreeList+0xb0>)
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	601a      	str	r2, [r3, #0]
 8009ffe:	e003      	b.n	800a008 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d002      	beq.n	800a016 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a016:	bf00      	nop
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	20001be4 	.word	0x20001be4
 800a028:	20001bec 	.word	0x20001bec

0800a02c <read_register>:

#define RFM95_REGISTER_INVERT_IQ_1_RX                    		0x67
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19

static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	607a      	str	r2, [r7, #4]
 800a036:	603b      	str	r3, [r7, #0]
 800a038:	460b      	mov	r3, r1
 800a03a:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6858      	ldr	r0, [r3, #4]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	891b      	ldrh	r3, [r3, #8]
 800a044:	2200      	movs	r2, #0
 800a046:	4619      	mov	r1, r3
 800a048:	f7f8 fc24 	bl	8002894 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 800a04c:	7afb      	ldrb	r3, [r7, #11]
 800a04e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a052:	b2db      	uxtb	r3, r3
 800a054:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6818      	ldr	r0, [r3, #0]
 800a05a:	f107 0117 	add.w	r1, r7, #23
 800a05e:	230a      	movs	r3, #10
 800a060:	2201      	movs	r2, #1
 800a062:	f7f9 fee8 	bl	8003e36 <HAL_SPI_Transmit>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d001      	beq.n	800a070 <read_register+0x44>
		return false;
 800a06c:	2300      	movs	r3, #0
 800a06e:	e015      	b.n	800a09c <read_register+0x70>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6818      	ldr	r0, [r3, #0]
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	b29a      	uxth	r2, r3
 800a078:	230a      	movs	r3, #10
 800a07a:	6879      	ldr	r1, [r7, #4]
 800a07c:	f7fa f849 	bl	8004112 <HAL_SPI_Receive>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d001      	beq.n	800a08a <read_register+0x5e>
		return false;
 800a086:	2300      	movs	r3, #0
 800a088:	e008      	b.n	800a09c <read_register+0x70>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6858      	ldr	r0, [r3, #4]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	891b      	ldrh	r3, [r3, #8]
 800a092:	2201      	movs	r2, #1
 800a094:	4619      	mov	r1, r3
 800a096:	f7f8 fbfd 	bl	8002894 <HAL_GPIO_WritePin>

	return true;
 800a09a:	2301      	movs	r3, #1
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3718      	adds	r7, #24
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <config_set_channel>:

	return true;
}

static void config_set_channel(rfm95_handle_t *handle, uint8_t channel_index, uint32_t frequency)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	607a      	str	r2, [r7, #4]
 800a0b0:	72fb      	strb	r3, [r7, #11]
	assert(channel_index < 16);
 800a0b2:	7afb      	ldrb	r3, [r7, #11]
 800a0b4:	2b0f      	cmp	r3, #15
 800a0b6:	d905      	bls.n	800a0c4 <config_set_channel+0x20>
 800a0b8:	4b0f      	ldr	r3, [pc, #60]	; (800a0f8 <config_set_channel+0x54>)
 800a0ba:	4a10      	ldr	r2, [pc, #64]	; (800a0fc <config_set_channel+0x58>)
 800a0bc:	216d      	movs	r1, #109	; 0x6d
 800a0be:	4810      	ldr	r0, [pc, #64]	; (800a100 <config_set_channel+0x5c>)
 800a0c0:	f000 f8b2 	bl	800a228 <__assert_func>
	handle->config.channels[channel_index].frequency = frequency;
 800a0c4:	7afa      	ldrb	r2, [r7, #11]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	321a      	adds	r2, #26
 800a0ca:	6879      	ldr	r1, [r7, #4]
 800a0cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	handle->config.channel_mask |= (1 << channel_index);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800a0d6:	b21a      	sxth	r2, r3
 800a0d8:	7afb      	ldrb	r3, [r7, #11]
 800a0da:	2101      	movs	r1, #1
 800a0dc:	fa01 f303 	lsl.w	r3, r1, r3
 800a0e0:	b21b      	sxth	r3, r3
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	b21b      	sxth	r3, r3
 800a0e6:	b29a      	uxth	r2, r3
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 800a0ee:	bf00      	nop
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	0800b294 	.word	0x0800b294
 800a0fc:	0800b47c 	.word	0x0800b47c
 800a100:	0800b2a8 	.word	0x0800b2a8

0800a104 <config_load_default>:

static void config_load_default(rfm95_handle_t *handle)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
	handle->config.magic = RFM95_EEPROM_CONFIG_MAGIC;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f64a 3267 	movw	r2, #43879	; 0xab67
 800a112:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	handle->config.tx_frame_count = 0;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	handle->config.rx_frame_count = 0;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	handle->config.rx1_delay = 1;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	handle->config.channel_mask = 0;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	config_set_channel(handle, 0, 868100000);
 800a136:	4a09      	ldr	r2, [pc, #36]	; (800a15c <config_load_default+0x58>)
 800a138:	2100      	movs	r1, #0
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7ff ffb2 	bl	800a0a4 <config_set_channel>
	config_set_channel(handle, 1, 868300000);
 800a140:	4a07      	ldr	r2, [pc, #28]	; (800a160 <config_load_default+0x5c>)
 800a142:	2101      	movs	r1, #1
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f7ff ffad 	bl	800a0a4 <config_set_channel>
	config_set_channel(handle, 2, 868500000);
 800a14a:	4a06      	ldr	r2, [pc, #24]	; (800a164 <config_load_default+0x60>)
 800a14c:	2102      	movs	r1, #2
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f7ff ffa8 	bl	800a0a4 <config_set_channel>
}
 800a154:	bf00      	nop
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	33be27a0 	.word	0x33be27a0
 800a160:	33c134e0 	.word	0x33c134e0
 800a164:	33c44220 	.word	0x33c44220

0800a168 <reset>:

static void reset(rfm95_handle_t *handle)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	68d8      	ldr	r0, [r3, #12]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	8a1b      	ldrh	r3, [r3, #16]
 800a178:	2200      	movs	r2, #0
 800a17a:	4619      	mov	r1, r3
 800a17c:	f7f8 fb8a 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 800a180:	2001      	movs	r0, #1
 800a182:	f7f7 faf5 	bl	8001770 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	68d8      	ldr	r0, [r3, #12]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	8a1b      	ldrh	r3, [r3, #16]
 800a18e:	2201      	movs	r2, #1
 800a190:	4619      	mov	r1, r3
 800a192:	f7f8 fb7f 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800a196:	2005      	movs	r0, #5
 800a198:	f7f7 faea 	bl	8001770 <HAL_Delay>
}
 800a19c:	bf00      	nop
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <rfm95_init>:

	return true;
}

bool rfm95_init(rfm95_handle_t *handle)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
//	assert(handle->get_precision_tick != NULL);
//	assert(handle->random_int != NULL);
//	assert(handle->precision_sleep_until != NULL);
//	assert(handle->precision_tick_frequency > 10000);

	reset(handle);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f7ff ffdb 	bl	800a168 <reset>

	// If there is reload function or the reload was unsuccessful or the magic does not match restore default.
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d012      	beq.n	800a1e0 <rfm95_init+0x3c>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	3260      	adds	r2, #96	; 0x60
 800a1c2:	4610      	mov	r0, r2
 800a1c4:	4798      	blx	r3
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	f083 0301 	eor.w	r3, r3, #1
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d106      	bne.n	800a1e0 <rfm95_init+0x3c>
	    handle->config.magic != RFM95_EEPROM_CONFIG_MAGIC) {
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 800a1d8:	f64a 3267 	movw	r2, #43879	; 0xab67
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d002      	beq.n	800a1e6 <rfm95_init+0x42>
		config_load_default(handle);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7ff ff8f 	bl	800a104 <config_load_default>
	}

	// Check for correct version.
	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 800a1e6:	f107 020f 	add.w	r2, r7, #15
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	2142      	movs	r1, #66	; 0x42
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f7ff ff1c 	bl	800a02c <read_register>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	f083 0301 	eor.w	r3, r3, #1
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d001      	beq.n	800a204 <rfm95_init+0x60>
 800a200:	2300      	movs	r3, #0
 800a202:	e00a      	b.n	800a21a <rfm95_init+0x76>
	if (version != RFM9x_VER) return false;
 800a204:	7bfb      	ldrb	r3, [r7, #15]
 800a206:	2b12      	cmp	r3, #18
 800a208:	d001      	beq.n	800a20e <rfm95_init+0x6a>
 800a20a:	2300      	movs	r3, #0
 800a20c:	e005      	b.n	800a21a <rfm95_init+0x76>
	printf("RFM Version: %d", version);
 800a20e:	7bfb      	ldrb	r3, [r7, #15]
 800a210:	4619      	mov	r1, r3
 800a212:	4804      	ldr	r0, [pc, #16]	; (800a224 <rfm95_init+0x80>)
 800a214:	f000 f8fa 	bl	800a40c <iprintf>
//	if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64)) return false;
//
//	// Let module sleep after initialisation.
//	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;

	return true;
 800a218:	2301      	movs	r3, #1
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	0800b31c 	.word	0x0800b31c

0800a228 <__assert_func>:
 800a228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a22a:	4614      	mov	r4, r2
 800a22c:	461a      	mov	r2, r3
 800a22e:	4b09      	ldr	r3, [pc, #36]	; (800a254 <__assert_func+0x2c>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4605      	mov	r5, r0
 800a234:	68d8      	ldr	r0, [r3, #12]
 800a236:	b14c      	cbz	r4, 800a24c <__assert_func+0x24>
 800a238:	4b07      	ldr	r3, [pc, #28]	; (800a258 <__assert_func+0x30>)
 800a23a:	9100      	str	r1, [sp, #0]
 800a23c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a240:	4906      	ldr	r1, [pc, #24]	; (800a25c <__assert_func+0x34>)
 800a242:	462b      	mov	r3, r5
 800a244:	f000 f8b2 	bl	800a3ac <fiprintf>
 800a248:	f000 f9bf 	bl	800a5ca <abort>
 800a24c:	4b04      	ldr	r3, [pc, #16]	; (800a260 <__assert_func+0x38>)
 800a24e:	461c      	mov	r4, r3
 800a250:	e7f3      	b.n	800a23a <__assert_func+0x12>
 800a252:	bf00      	nop
 800a254:	2000006c 	.word	0x2000006c
 800a258:	0800b48f 	.word	0x0800b48f
 800a25c:	0800b49c 	.word	0x0800b49c
 800a260:	0800b4ca 	.word	0x0800b4ca

0800a264 <std>:
 800a264:	2300      	movs	r3, #0
 800a266:	b510      	push	{r4, lr}
 800a268:	4604      	mov	r4, r0
 800a26a:	e9c0 3300 	strd	r3, r3, [r0]
 800a26e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a272:	6083      	str	r3, [r0, #8]
 800a274:	8181      	strh	r1, [r0, #12]
 800a276:	6643      	str	r3, [r0, #100]	; 0x64
 800a278:	81c2      	strh	r2, [r0, #14]
 800a27a:	6183      	str	r3, [r0, #24]
 800a27c:	4619      	mov	r1, r3
 800a27e:	2208      	movs	r2, #8
 800a280:	305c      	adds	r0, #92	; 0x5c
 800a282:	f000 f918 	bl	800a4b6 <memset>
 800a286:	4b0d      	ldr	r3, [pc, #52]	; (800a2bc <std+0x58>)
 800a288:	6263      	str	r3, [r4, #36]	; 0x24
 800a28a:	4b0d      	ldr	r3, [pc, #52]	; (800a2c0 <std+0x5c>)
 800a28c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a28e:	4b0d      	ldr	r3, [pc, #52]	; (800a2c4 <std+0x60>)
 800a290:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a292:	4b0d      	ldr	r3, [pc, #52]	; (800a2c8 <std+0x64>)
 800a294:	6323      	str	r3, [r4, #48]	; 0x30
 800a296:	4b0d      	ldr	r3, [pc, #52]	; (800a2cc <std+0x68>)
 800a298:	6224      	str	r4, [r4, #32]
 800a29a:	429c      	cmp	r4, r3
 800a29c:	d006      	beq.n	800a2ac <std+0x48>
 800a29e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a2a2:	4294      	cmp	r4, r2
 800a2a4:	d002      	beq.n	800a2ac <std+0x48>
 800a2a6:	33d0      	adds	r3, #208	; 0xd0
 800a2a8:	429c      	cmp	r4, r3
 800a2aa:	d105      	bne.n	800a2b8 <std+0x54>
 800a2ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2b4:	f000 b978 	b.w	800a5a8 <__retarget_lock_init_recursive>
 800a2b8:	bd10      	pop	{r4, pc}
 800a2ba:	bf00      	nop
 800a2bc:	0800a431 	.word	0x0800a431
 800a2c0:	0800a453 	.word	0x0800a453
 800a2c4:	0800a48b 	.word	0x0800a48b
 800a2c8:	0800a4af 	.word	0x0800a4af
 800a2cc:	20001c04 	.word	0x20001c04

0800a2d0 <stdio_exit_handler>:
 800a2d0:	4a02      	ldr	r2, [pc, #8]	; (800a2dc <stdio_exit_handler+0xc>)
 800a2d2:	4903      	ldr	r1, [pc, #12]	; (800a2e0 <stdio_exit_handler+0x10>)
 800a2d4:	4803      	ldr	r0, [pc, #12]	; (800a2e4 <stdio_exit_handler+0x14>)
 800a2d6:	f000 b87b 	b.w	800a3d0 <_fwalk_sglue>
 800a2da:	bf00      	nop
 800a2dc:	20000014 	.word	0x20000014
 800a2e0:	0800ae7d 	.word	0x0800ae7d
 800a2e4:	20000020 	.word	0x20000020

0800a2e8 <cleanup_stdio>:
 800a2e8:	6841      	ldr	r1, [r0, #4]
 800a2ea:	4b0c      	ldr	r3, [pc, #48]	; (800a31c <cleanup_stdio+0x34>)
 800a2ec:	4299      	cmp	r1, r3
 800a2ee:	b510      	push	{r4, lr}
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	d001      	beq.n	800a2f8 <cleanup_stdio+0x10>
 800a2f4:	f000 fdc2 	bl	800ae7c <_fflush_r>
 800a2f8:	68a1      	ldr	r1, [r4, #8]
 800a2fa:	4b09      	ldr	r3, [pc, #36]	; (800a320 <cleanup_stdio+0x38>)
 800a2fc:	4299      	cmp	r1, r3
 800a2fe:	d002      	beq.n	800a306 <cleanup_stdio+0x1e>
 800a300:	4620      	mov	r0, r4
 800a302:	f000 fdbb 	bl	800ae7c <_fflush_r>
 800a306:	68e1      	ldr	r1, [r4, #12]
 800a308:	4b06      	ldr	r3, [pc, #24]	; (800a324 <cleanup_stdio+0x3c>)
 800a30a:	4299      	cmp	r1, r3
 800a30c:	d004      	beq.n	800a318 <cleanup_stdio+0x30>
 800a30e:	4620      	mov	r0, r4
 800a310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a314:	f000 bdb2 	b.w	800ae7c <_fflush_r>
 800a318:	bd10      	pop	{r4, pc}
 800a31a:	bf00      	nop
 800a31c:	20001c04 	.word	0x20001c04
 800a320:	20001c6c 	.word	0x20001c6c
 800a324:	20001cd4 	.word	0x20001cd4

0800a328 <global_stdio_init.part.0>:
 800a328:	b510      	push	{r4, lr}
 800a32a:	4b0b      	ldr	r3, [pc, #44]	; (800a358 <global_stdio_init.part.0+0x30>)
 800a32c:	4c0b      	ldr	r4, [pc, #44]	; (800a35c <global_stdio_init.part.0+0x34>)
 800a32e:	4a0c      	ldr	r2, [pc, #48]	; (800a360 <global_stdio_init.part.0+0x38>)
 800a330:	601a      	str	r2, [r3, #0]
 800a332:	4620      	mov	r0, r4
 800a334:	2200      	movs	r2, #0
 800a336:	2104      	movs	r1, #4
 800a338:	f7ff ff94 	bl	800a264 <std>
 800a33c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a340:	2201      	movs	r2, #1
 800a342:	2109      	movs	r1, #9
 800a344:	f7ff ff8e 	bl	800a264 <std>
 800a348:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a34c:	2202      	movs	r2, #2
 800a34e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a352:	2112      	movs	r1, #18
 800a354:	f7ff bf86 	b.w	800a264 <std>
 800a358:	20001d3c 	.word	0x20001d3c
 800a35c:	20001c04 	.word	0x20001c04
 800a360:	0800a2d1 	.word	0x0800a2d1

0800a364 <__sfp_lock_acquire>:
 800a364:	4801      	ldr	r0, [pc, #4]	; (800a36c <__sfp_lock_acquire+0x8>)
 800a366:	f000 b920 	b.w	800a5aa <__retarget_lock_acquire_recursive>
 800a36a:	bf00      	nop
 800a36c:	20001d45 	.word	0x20001d45

0800a370 <__sfp_lock_release>:
 800a370:	4801      	ldr	r0, [pc, #4]	; (800a378 <__sfp_lock_release+0x8>)
 800a372:	f000 b91b 	b.w	800a5ac <__retarget_lock_release_recursive>
 800a376:	bf00      	nop
 800a378:	20001d45 	.word	0x20001d45

0800a37c <__sinit>:
 800a37c:	b510      	push	{r4, lr}
 800a37e:	4604      	mov	r4, r0
 800a380:	f7ff fff0 	bl	800a364 <__sfp_lock_acquire>
 800a384:	6a23      	ldr	r3, [r4, #32]
 800a386:	b11b      	cbz	r3, 800a390 <__sinit+0x14>
 800a388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a38c:	f7ff bff0 	b.w	800a370 <__sfp_lock_release>
 800a390:	4b04      	ldr	r3, [pc, #16]	; (800a3a4 <__sinit+0x28>)
 800a392:	6223      	str	r3, [r4, #32]
 800a394:	4b04      	ldr	r3, [pc, #16]	; (800a3a8 <__sinit+0x2c>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d1f5      	bne.n	800a388 <__sinit+0xc>
 800a39c:	f7ff ffc4 	bl	800a328 <global_stdio_init.part.0>
 800a3a0:	e7f2      	b.n	800a388 <__sinit+0xc>
 800a3a2:	bf00      	nop
 800a3a4:	0800a2e9 	.word	0x0800a2e9
 800a3a8:	20001d3c 	.word	0x20001d3c

0800a3ac <fiprintf>:
 800a3ac:	b40e      	push	{r1, r2, r3}
 800a3ae:	b503      	push	{r0, r1, lr}
 800a3b0:	4601      	mov	r1, r0
 800a3b2:	ab03      	add	r3, sp, #12
 800a3b4:	4805      	ldr	r0, [pc, #20]	; (800a3cc <fiprintf+0x20>)
 800a3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3ba:	6800      	ldr	r0, [r0, #0]
 800a3bc:	9301      	str	r3, [sp, #4]
 800a3be:	f000 fa2d 	bl	800a81c <_vfiprintf_r>
 800a3c2:	b002      	add	sp, #8
 800a3c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3c8:	b003      	add	sp, #12
 800a3ca:	4770      	bx	lr
 800a3cc:	2000006c 	.word	0x2000006c

0800a3d0 <_fwalk_sglue>:
 800a3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3d4:	4607      	mov	r7, r0
 800a3d6:	4688      	mov	r8, r1
 800a3d8:	4614      	mov	r4, r2
 800a3da:	2600      	movs	r6, #0
 800a3dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3e0:	f1b9 0901 	subs.w	r9, r9, #1
 800a3e4:	d505      	bpl.n	800a3f2 <_fwalk_sglue+0x22>
 800a3e6:	6824      	ldr	r4, [r4, #0]
 800a3e8:	2c00      	cmp	r4, #0
 800a3ea:	d1f7      	bne.n	800a3dc <_fwalk_sglue+0xc>
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3f2:	89ab      	ldrh	r3, [r5, #12]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d907      	bls.n	800a408 <_fwalk_sglue+0x38>
 800a3f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	d003      	beq.n	800a408 <_fwalk_sglue+0x38>
 800a400:	4629      	mov	r1, r5
 800a402:	4638      	mov	r0, r7
 800a404:	47c0      	blx	r8
 800a406:	4306      	orrs	r6, r0
 800a408:	3568      	adds	r5, #104	; 0x68
 800a40a:	e7e9      	b.n	800a3e0 <_fwalk_sglue+0x10>

0800a40c <iprintf>:
 800a40c:	b40f      	push	{r0, r1, r2, r3}
 800a40e:	b507      	push	{r0, r1, r2, lr}
 800a410:	4906      	ldr	r1, [pc, #24]	; (800a42c <iprintf+0x20>)
 800a412:	ab04      	add	r3, sp, #16
 800a414:	6808      	ldr	r0, [r1, #0]
 800a416:	f853 2b04 	ldr.w	r2, [r3], #4
 800a41a:	6881      	ldr	r1, [r0, #8]
 800a41c:	9301      	str	r3, [sp, #4]
 800a41e:	f000 f9fd 	bl	800a81c <_vfiprintf_r>
 800a422:	b003      	add	sp, #12
 800a424:	f85d eb04 	ldr.w	lr, [sp], #4
 800a428:	b004      	add	sp, #16
 800a42a:	4770      	bx	lr
 800a42c:	2000006c 	.word	0x2000006c

0800a430 <__sread>:
 800a430:	b510      	push	{r4, lr}
 800a432:	460c      	mov	r4, r1
 800a434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a438:	f000 f868 	bl	800a50c <_read_r>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	bfab      	itete	ge
 800a440:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a442:	89a3      	ldrhlt	r3, [r4, #12]
 800a444:	181b      	addge	r3, r3, r0
 800a446:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a44a:	bfac      	ite	ge
 800a44c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a44e:	81a3      	strhlt	r3, [r4, #12]
 800a450:	bd10      	pop	{r4, pc}

0800a452 <__swrite>:
 800a452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a456:	461f      	mov	r7, r3
 800a458:	898b      	ldrh	r3, [r1, #12]
 800a45a:	05db      	lsls	r3, r3, #23
 800a45c:	4605      	mov	r5, r0
 800a45e:	460c      	mov	r4, r1
 800a460:	4616      	mov	r6, r2
 800a462:	d505      	bpl.n	800a470 <__swrite+0x1e>
 800a464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a468:	2302      	movs	r3, #2
 800a46a:	2200      	movs	r2, #0
 800a46c:	f000 f83c 	bl	800a4e8 <_lseek_r>
 800a470:	89a3      	ldrh	r3, [r4, #12]
 800a472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a47a:	81a3      	strh	r3, [r4, #12]
 800a47c:	4632      	mov	r2, r6
 800a47e:	463b      	mov	r3, r7
 800a480:	4628      	mov	r0, r5
 800a482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a486:	f000 b853 	b.w	800a530 <_write_r>

0800a48a <__sseek>:
 800a48a:	b510      	push	{r4, lr}
 800a48c:	460c      	mov	r4, r1
 800a48e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a492:	f000 f829 	bl	800a4e8 <_lseek_r>
 800a496:	1c43      	adds	r3, r0, #1
 800a498:	89a3      	ldrh	r3, [r4, #12]
 800a49a:	bf15      	itete	ne
 800a49c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a49e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a4a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a4a6:	81a3      	strheq	r3, [r4, #12]
 800a4a8:	bf18      	it	ne
 800a4aa:	81a3      	strhne	r3, [r4, #12]
 800a4ac:	bd10      	pop	{r4, pc}

0800a4ae <__sclose>:
 800a4ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4b2:	f000 b809 	b.w	800a4c8 <_close_r>

0800a4b6 <memset>:
 800a4b6:	4402      	add	r2, r0
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d100      	bne.n	800a4c0 <memset+0xa>
 800a4be:	4770      	bx	lr
 800a4c0:	f803 1b01 	strb.w	r1, [r3], #1
 800a4c4:	e7f9      	b.n	800a4ba <memset+0x4>
	...

0800a4c8 <_close_r>:
 800a4c8:	b538      	push	{r3, r4, r5, lr}
 800a4ca:	4d06      	ldr	r5, [pc, #24]	; (800a4e4 <_close_r+0x1c>)
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	4608      	mov	r0, r1
 800a4d2:	602b      	str	r3, [r5, #0]
 800a4d4:	f7f6 fe2b 	bl	800112e <_close>
 800a4d8:	1c43      	adds	r3, r0, #1
 800a4da:	d102      	bne.n	800a4e2 <_close_r+0x1a>
 800a4dc:	682b      	ldr	r3, [r5, #0]
 800a4de:	b103      	cbz	r3, 800a4e2 <_close_r+0x1a>
 800a4e0:	6023      	str	r3, [r4, #0]
 800a4e2:	bd38      	pop	{r3, r4, r5, pc}
 800a4e4:	20001d40 	.word	0x20001d40

0800a4e8 <_lseek_r>:
 800a4e8:	b538      	push	{r3, r4, r5, lr}
 800a4ea:	4d07      	ldr	r5, [pc, #28]	; (800a508 <_lseek_r+0x20>)
 800a4ec:	4604      	mov	r4, r0
 800a4ee:	4608      	mov	r0, r1
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	602a      	str	r2, [r5, #0]
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	f7f6 fe40 	bl	800117c <_lseek>
 800a4fc:	1c43      	adds	r3, r0, #1
 800a4fe:	d102      	bne.n	800a506 <_lseek_r+0x1e>
 800a500:	682b      	ldr	r3, [r5, #0]
 800a502:	b103      	cbz	r3, 800a506 <_lseek_r+0x1e>
 800a504:	6023      	str	r3, [r4, #0]
 800a506:	bd38      	pop	{r3, r4, r5, pc}
 800a508:	20001d40 	.word	0x20001d40

0800a50c <_read_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	4d07      	ldr	r5, [pc, #28]	; (800a52c <_read_r+0x20>)
 800a510:	4604      	mov	r4, r0
 800a512:	4608      	mov	r0, r1
 800a514:	4611      	mov	r1, r2
 800a516:	2200      	movs	r2, #0
 800a518:	602a      	str	r2, [r5, #0]
 800a51a:	461a      	mov	r2, r3
 800a51c:	f7f6 fdea 	bl	80010f4 <_read>
 800a520:	1c43      	adds	r3, r0, #1
 800a522:	d102      	bne.n	800a52a <_read_r+0x1e>
 800a524:	682b      	ldr	r3, [r5, #0]
 800a526:	b103      	cbz	r3, 800a52a <_read_r+0x1e>
 800a528:	6023      	str	r3, [r4, #0]
 800a52a:	bd38      	pop	{r3, r4, r5, pc}
 800a52c:	20001d40 	.word	0x20001d40

0800a530 <_write_r>:
 800a530:	b538      	push	{r3, r4, r5, lr}
 800a532:	4d07      	ldr	r5, [pc, #28]	; (800a550 <_write_r+0x20>)
 800a534:	4604      	mov	r4, r0
 800a536:	4608      	mov	r0, r1
 800a538:	4611      	mov	r1, r2
 800a53a:	2200      	movs	r2, #0
 800a53c:	602a      	str	r2, [r5, #0]
 800a53e:	461a      	mov	r2, r3
 800a540:	f7f6 fb56 	bl	8000bf0 <_write>
 800a544:	1c43      	adds	r3, r0, #1
 800a546:	d102      	bne.n	800a54e <_write_r+0x1e>
 800a548:	682b      	ldr	r3, [r5, #0]
 800a54a:	b103      	cbz	r3, 800a54e <_write_r+0x1e>
 800a54c:	6023      	str	r3, [r4, #0]
 800a54e:	bd38      	pop	{r3, r4, r5, pc}
 800a550:	20001d40 	.word	0x20001d40

0800a554 <__errno>:
 800a554:	4b01      	ldr	r3, [pc, #4]	; (800a55c <__errno+0x8>)
 800a556:	6818      	ldr	r0, [r3, #0]
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	2000006c 	.word	0x2000006c

0800a560 <__libc_init_array>:
 800a560:	b570      	push	{r4, r5, r6, lr}
 800a562:	4d0d      	ldr	r5, [pc, #52]	; (800a598 <__libc_init_array+0x38>)
 800a564:	4c0d      	ldr	r4, [pc, #52]	; (800a59c <__libc_init_array+0x3c>)
 800a566:	1b64      	subs	r4, r4, r5
 800a568:	10a4      	asrs	r4, r4, #2
 800a56a:	2600      	movs	r6, #0
 800a56c:	42a6      	cmp	r6, r4
 800a56e:	d109      	bne.n	800a584 <__libc_init_array+0x24>
 800a570:	4d0b      	ldr	r5, [pc, #44]	; (800a5a0 <__libc_init_array+0x40>)
 800a572:	4c0c      	ldr	r4, [pc, #48]	; (800a5a4 <__libc_init_array+0x44>)
 800a574:	f000 fe18 	bl	800b1a8 <_init>
 800a578:	1b64      	subs	r4, r4, r5
 800a57a:	10a4      	asrs	r4, r4, #2
 800a57c:	2600      	movs	r6, #0
 800a57e:	42a6      	cmp	r6, r4
 800a580:	d105      	bne.n	800a58e <__libc_init_array+0x2e>
 800a582:	bd70      	pop	{r4, r5, r6, pc}
 800a584:	f855 3b04 	ldr.w	r3, [r5], #4
 800a588:	4798      	blx	r3
 800a58a:	3601      	adds	r6, #1
 800a58c:	e7ee      	b.n	800a56c <__libc_init_array+0xc>
 800a58e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a592:	4798      	blx	r3
 800a594:	3601      	adds	r6, #1
 800a596:	e7f2      	b.n	800a57e <__libc_init_array+0x1e>
 800a598:	0800b508 	.word	0x0800b508
 800a59c:	0800b508 	.word	0x0800b508
 800a5a0:	0800b508 	.word	0x0800b508
 800a5a4:	0800b50c 	.word	0x0800b50c

0800a5a8 <__retarget_lock_init_recursive>:
 800a5a8:	4770      	bx	lr

0800a5aa <__retarget_lock_acquire_recursive>:
 800a5aa:	4770      	bx	lr

0800a5ac <__retarget_lock_release_recursive>:
 800a5ac:	4770      	bx	lr

0800a5ae <memcpy>:
 800a5ae:	440a      	add	r2, r1
 800a5b0:	4291      	cmp	r1, r2
 800a5b2:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5b6:	d100      	bne.n	800a5ba <memcpy+0xc>
 800a5b8:	4770      	bx	lr
 800a5ba:	b510      	push	{r4, lr}
 800a5bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5c4:	4291      	cmp	r1, r2
 800a5c6:	d1f9      	bne.n	800a5bc <memcpy+0xe>
 800a5c8:	bd10      	pop	{r4, pc}

0800a5ca <abort>:
 800a5ca:	b508      	push	{r3, lr}
 800a5cc:	2006      	movs	r0, #6
 800a5ce:	f000 fd3b 	bl	800b048 <raise>
 800a5d2:	2001      	movs	r0, #1
 800a5d4:	f7f6 fd84 	bl	80010e0 <_exit>

0800a5d8 <_free_r>:
 800a5d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5da:	2900      	cmp	r1, #0
 800a5dc:	d044      	beq.n	800a668 <_free_r+0x90>
 800a5de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5e2:	9001      	str	r0, [sp, #4]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f1a1 0404 	sub.w	r4, r1, #4
 800a5ea:	bfb8      	it	lt
 800a5ec:	18e4      	addlt	r4, r4, r3
 800a5ee:	f000 f8df 	bl	800a7b0 <__malloc_lock>
 800a5f2:	4a1e      	ldr	r2, [pc, #120]	; (800a66c <_free_r+0x94>)
 800a5f4:	9801      	ldr	r0, [sp, #4]
 800a5f6:	6813      	ldr	r3, [r2, #0]
 800a5f8:	b933      	cbnz	r3, 800a608 <_free_r+0x30>
 800a5fa:	6063      	str	r3, [r4, #4]
 800a5fc:	6014      	str	r4, [r2, #0]
 800a5fe:	b003      	add	sp, #12
 800a600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a604:	f000 b8da 	b.w	800a7bc <__malloc_unlock>
 800a608:	42a3      	cmp	r3, r4
 800a60a:	d908      	bls.n	800a61e <_free_r+0x46>
 800a60c:	6825      	ldr	r5, [r4, #0]
 800a60e:	1961      	adds	r1, r4, r5
 800a610:	428b      	cmp	r3, r1
 800a612:	bf01      	itttt	eq
 800a614:	6819      	ldreq	r1, [r3, #0]
 800a616:	685b      	ldreq	r3, [r3, #4]
 800a618:	1949      	addeq	r1, r1, r5
 800a61a:	6021      	streq	r1, [r4, #0]
 800a61c:	e7ed      	b.n	800a5fa <_free_r+0x22>
 800a61e:	461a      	mov	r2, r3
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	b10b      	cbz	r3, 800a628 <_free_r+0x50>
 800a624:	42a3      	cmp	r3, r4
 800a626:	d9fa      	bls.n	800a61e <_free_r+0x46>
 800a628:	6811      	ldr	r1, [r2, #0]
 800a62a:	1855      	adds	r5, r2, r1
 800a62c:	42a5      	cmp	r5, r4
 800a62e:	d10b      	bne.n	800a648 <_free_r+0x70>
 800a630:	6824      	ldr	r4, [r4, #0]
 800a632:	4421      	add	r1, r4
 800a634:	1854      	adds	r4, r2, r1
 800a636:	42a3      	cmp	r3, r4
 800a638:	6011      	str	r1, [r2, #0]
 800a63a:	d1e0      	bne.n	800a5fe <_free_r+0x26>
 800a63c:	681c      	ldr	r4, [r3, #0]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	6053      	str	r3, [r2, #4]
 800a642:	440c      	add	r4, r1
 800a644:	6014      	str	r4, [r2, #0]
 800a646:	e7da      	b.n	800a5fe <_free_r+0x26>
 800a648:	d902      	bls.n	800a650 <_free_r+0x78>
 800a64a:	230c      	movs	r3, #12
 800a64c:	6003      	str	r3, [r0, #0]
 800a64e:	e7d6      	b.n	800a5fe <_free_r+0x26>
 800a650:	6825      	ldr	r5, [r4, #0]
 800a652:	1961      	adds	r1, r4, r5
 800a654:	428b      	cmp	r3, r1
 800a656:	bf04      	itt	eq
 800a658:	6819      	ldreq	r1, [r3, #0]
 800a65a:	685b      	ldreq	r3, [r3, #4]
 800a65c:	6063      	str	r3, [r4, #4]
 800a65e:	bf04      	itt	eq
 800a660:	1949      	addeq	r1, r1, r5
 800a662:	6021      	streq	r1, [r4, #0]
 800a664:	6054      	str	r4, [r2, #4]
 800a666:	e7ca      	b.n	800a5fe <_free_r+0x26>
 800a668:	b003      	add	sp, #12
 800a66a:	bd30      	pop	{r4, r5, pc}
 800a66c:	20001d48 	.word	0x20001d48

0800a670 <sbrk_aligned>:
 800a670:	b570      	push	{r4, r5, r6, lr}
 800a672:	4e0e      	ldr	r6, [pc, #56]	; (800a6ac <sbrk_aligned+0x3c>)
 800a674:	460c      	mov	r4, r1
 800a676:	6831      	ldr	r1, [r6, #0]
 800a678:	4605      	mov	r5, r0
 800a67a:	b911      	cbnz	r1, 800a682 <sbrk_aligned+0x12>
 800a67c:	f000 fd00 	bl	800b080 <_sbrk_r>
 800a680:	6030      	str	r0, [r6, #0]
 800a682:	4621      	mov	r1, r4
 800a684:	4628      	mov	r0, r5
 800a686:	f000 fcfb 	bl	800b080 <_sbrk_r>
 800a68a:	1c43      	adds	r3, r0, #1
 800a68c:	d00a      	beq.n	800a6a4 <sbrk_aligned+0x34>
 800a68e:	1cc4      	adds	r4, r0, #3
 800a690:	f024 0403 	bic.w	r4, r4, #3
 800a694:	42a0      	cmp	r0, r4
 800a696:	d007      	beq.n	800a6a8 <sbrk_aligned+0x38>
 800a698:	1a21      	subs	r1, r4, r0
 800a69a:	4628      	mov	r0, r5
 800a69c:	f000 fcf0 	bl	800b080 <_sbrk_r>
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	d101      	bne.n	800a6a8 <sbrk_aligned+0x38>
 800a6a4:	f04f 34ff 	mov.w	r4, #4294967295
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	bd70      	pop	{r4, r5, r6, pc}
 800a6ac:	20001d4c 	.word	0x20001d4c

0800a6b0 <_malloc_r>:
 800a6b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6b4:	1ccd      	adds	r5, r1, #3
 800a6b6:	f025 0503 	bic.w	r5, r5, #3
 800a6ba:	3508      	adds	r5, #8
 800a6bc:	2d0c      	cmp	r5, #12
 800a6be:	bf38      	it	cc
 800a6c0:	250c      	movcc	r5, #12
 800a6c2:	2d00      	cmp	r5, #0
 800a6c4:	4607      	mov	r7, r0
 800a6c6:	db01      	blt.n	800a6cc <_malloc_r+0x1c>
 800a6c8:	42a9      	cmp	r1, r5
 800a6ca:	d905      	bls.n	800a6d8 <_malloc_r+0x28>
 800a6cc:	230c      	movs	r3, #12
 800a6ce:	603b      	str	r3, [r7, #0]
 800a6d0:	2600      	movs	r6, #0
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a7ac <_malloc_r+0xfc>
 800a6dc:	f000 f868 	bl	800a7b0 <__malloc_lock>
 800a6e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a6e4:	461c      	mov	r4, r3
 800a6e6:	bb5c      	cbnz	r4, 800a740 <_malloc_r+0x90>
 800a6e8:	4629      	mov	r1, r5
 800a6ea:	4638      	mov	r0, r7
 800a6ec:	f7ff ffc0 	bl	800a670 <sbrk_aligned>
 800a6f0:	1c43      	adds	r3, r0, #1
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	d155      	bne.n	800a7a2 <_malloc_r+0xf2>
 800a6f6:	f8d8 4000 	ldr.w	r4, [r8]
 800a6fa:	4626      	mov	r6, r4
 800a6fc:	2e00      	cmp	r6, #0
 800a6fe:	d145      	bne.n	800a78c <_malloc_r+0xdc>
 800a700:	2c00      	cmp	r4, #0
 800a702:	d048      	beq.n	800a796 <_malloc_r+0xe6>
 800a704:	6823      	ldr	r3, [r4, #0]
 800a706:	4631      	mov	r1, r6
 800a708:	4638      	mov	r0, r7
 800a70a:	eb04 0903 	add.w	r9, r4, r3
 800a70e:	f000 fcb7 	bl	800b080 <_sbrk_r>
 800a712:	4581      	cmp	r9, r0
 800a714:	d13f      	bne.n	800a796 <_malloc_r+0xe6>
 800a716:	6821      	ldr	r1, [r4, #0]
 800a718:	1a6d      	subs	r5, r5, r1
 800a71a:	4629      	mov	r1, r5
 800a71c:	4638      	mov	r0, r7
 800a71e:	f7ff ffa7 	bl	800a670 <sbrk_aligned>
 800a722:	3001      	adds	r0, #1
 800a724:	d037      	beq.n	800a796 <_malloc_r+0xe6>
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	442b      	add	r3, r5
 800a72a:	6023      	str	r3, [r4, #0]
 800a72c:	f8d8 3000 	ldr.w	r3, [r8]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d038      	beq.n	800a7a6 <_malloc_r+0xf6>
 800a734:	685a      	ldr	r2, [r3, #4]
 800a736:	42a2      	cmp	r2, r4
 800a738:	d12b      	bne.n	800a792 <_malloc_r+0xe2>
 800a73a:	2200      	movs	r2, #0
 800a73c:	605a      	str	r2, [r3, #4]
 800a73e:	e00f      	b.n	800a760 <_malloc_r+0xb0>
 800a740:	6822      	ldr	r2, [r4, #0]
 800a742:	1b52      	subs	r2, r2, r5
 800a744:	d41f      	bmi.n	800a786 <_malloc_r+0xd6>
 800a746:	2a0b      	cmp	r2, #11
 800a748:	d917      	bls.n	800a77a <_malloc_r+0xca>
 800a74a:	1961      	adds	r1, r4, r5
 800a74c:	42a3      	cmp	r3, r4
 800a74e:	6025      	str	r5, [r4, #0]
 800a750:	bf18      	it	ne
 800a752:	6059      	strne	r1, [r3, #4]
 800a754:	6863      	ldr	r3, [r4, #4]
 800a756:	bf08      	it	eq
 800a758:	f8c8 1000 	streq.w	r1, [r8]
 800a75c:	5162      	str	r2, [r4, r5]
 800a75e:	604b      	str	r3, [r1, #4]
 800a760:	4638      	mov	r0, r7
 800a762:	f104 060b 	add.w	r6, r4, #11
 800a766:	f000 f829 	bl	800a7bc <__malloc_unlock>
 800a76a:	f026 0607 	bic.w	r6, r6, #7
 800a76e:	1d23      	adds	r3, r4, #4
 800a770:	1af2      	subs	r2, r6, r3
 800a772:	d0ae      	beq.n	800a6d2 <_malloc_r+0x22>
 800a774:	1b9b      	subs	r3, r3, r6
 800a776:	50a3      	str	r3, [r4, r2]
 800a778:	e7ab      	b.n	800a6d2 <_malloc_r+0x22>
 800a77a:	42a3      	cmp	r3, r4
 800a77c:	6862      	ldr	r2, [r4, #4]
 800a77e:	d1dd      	bne.n	800a73c <_malloc_r+0x8c>
 800a780:	f8c8 2000 	str.w	r2, [r8]
 800a784:	e7ec      	b.n	800a760 <_malloc_r+0xb0>
 800a786:	4623      	mov	r3, r4
 800a788:	6864      	ldr	r4, [r4, #4]
 800a78a:	e7ac      	b.n	800a6e6 <_malloc_r+0x36>
 800a78c:	4634      	mov	r4, r6
 800a78e:	6876      	ldr	r6, [r6, #4]
 800a790:	e7b4      	b.n	800a6fc <_malloc_r+0x4c>
 800a792:	4613      	mov	r3, r2
 800a794:	e7cc      	b.n	800a730 <_malloc_r+0x80>
 800a796:	230c      	movs	r3, #12
 800a798:	603b      	str	r3, [r7, #0]
 800a79a:	4638      	mov	r0, r7
 800a79c:	f000 f80e 	bl	800a7bc <__malloc_unlock>
 800a7a0:	e797      	b.n	800a6d2 <_malloc_r+0x22>
 800a7a2:	6025      	str	r5, [r4, #0]
 800a7a4:	e7dc      	b.n	800a760 <_malloc_r+0xb0>
 800a7a6:	605b      	str	r3, [r3, #4]
 800a7a8:	deff      	udf	#255	; 0xff
 800a7aa:	bf00      	nop
 800a7ac:	20001d48 	.word	0x20001d48

0800a7b0 <__malloc_lock>:
 800a7b0:	4801      	ldr	r0, [pc, #4]	; (800a7b8 <__malloc_lock+0x8>)
 800a7b2:	f7ff befa 	b.w	800a5aa <__retarget_lock_acquire_recursive>
 800a7b6:	bf00      	nop
 800a7b8:	20001d44 	.word	0x20001d44

0800a7bc <__malloc_unlock>:
 800a7bc:	4801      	ldr	r0, [pc, #4]	; (800a7c4 <__malloc_unlock+0x8>)
 800a7be:	f7ff bef5 	b.w	800a5ac <__retarget_lock_release_recursive>
 800a7c2:	bf00      	nop
 800a7c4:	20001d44 	.word	0x20001d44

0800a7c8 <__sfputc_r>:
 800a7c8:	6893      	ldr	r3, [r2, #8]
 800a7ca:	3b01      	subs	r3, #1
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	b410      	push	{r4}
 800a7d0:	6093      	str	r3, [r2, #8]
 800a7d2:	da08      	bge.n	800a7e6 <__sfputc_r+0x1e>
 800a7d4:	6994      	ldr	r4, [r2, #24]
 800a7d6:	42a3      	cmp	r3, r4
 800a7d8:	db01      	blt.n	800a7de <__sfputc_r+0x16>
 800a7da:	290a      	cmp	r1, #10
 800a7dc:	d103      	bne.n	800a7e6 <__sfputc_r+0x1e>
 800a7de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7e2:	f000 bb73 	b.w	800aecc <__swbuf_r>
 800a7e6:	6813      	ldr	r3, [r2, #0]
 800a7e8:	1c58      	adds	r0, r3, #1
 800a7ea:	6010      	str	r0, [r2, #0]
 800a7ec:	7019      	strb	r1, [r3, #0]
 800a7ee:	4608      	mov	r0, r1
 800a7f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7f4:	4770      	bx	lr

0800a7f6 <__sfputs_r>:
 800a7f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	460f      	mov	r7, r1
 800a7fc:	4614      	mov	r4, r2
 800a7fe:	18d5      	adds	r5, r2, r3
 800a800:	42ac      	cmp	r4, r5
 800a802:	d101      	bne.n	800a808 <__sfputs_r+0x12>
 800a804:	2000      	movs	r0, #0
 800a806:	e007      	b.n	800a818 <__sfputs_r+0x22>
 800a808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a80c:	463a      	mov	r2, r7
 800a80e:	4630      	mov	r0, r6
 800a810:	f7ff ffda 	bl	800a7c8 <__sfputc_r>
 800a814:	1c43      	adds	r3, r0, #1
 800a816:	d1f3      	bne.n	800a800 <__sfputs_r+0xa>
 800a818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a81c <_vfiprintf_r>:
 800a81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a820:	460d      	mov	r5, r1
 800a822:	b09d      	sub	sp, #116	; 0x74
 800a824:	4614      	mov	r4, r2
 800a826:	4698      	mov	r8, r3
 800a828:	4606      	mov	r6, r0
 800a82a:	b118      	cbz	r0, 800a834 <_vfiprintf_r+0x18>
 800a82c:	6a03      	ldr	r3, [r0, #32]
 800a82e:	b90b      	cbnz	r3, 800a834 <_vfiprintf_r+0x18>
 800a830:	f7ff fda4 	bl	800a37c <__sinit>
 800a834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a836:	07d9      	lsls	r1, r3, #31
 800a838:	d405      	bmi.n	800a846 <_vfiprintf_r+0x2a>
 800a83a:	89ab      	ldrh	r3, [r5, #12]
 800a83c:	059a      	lsls	r2, r3, #22
 800a83e:	d402      	bmi.n	800a846 <_vfiprintf_r+0x2a>
 800a840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a842:	f7ff feb2 	bl	800a5aa <__retarget_lock_acquire_recursive>
 800a846:	89ab      	ldrh	r3, [r5, #12]
 800a848:	071b      	lsls	r3, r3, #28
 800a84a:	d501      	bpl.n	800a850 <_vfiprintf_r+0x34>
 800a84c:	692b      	ldr	r3, [r5, #16]
 800a84e:	b99b      	cbnz	r3, 800a878 <_vfiprintf_r+0x5c>
 800a850:	4629      	mov	r1, r5
 800a852:	4630      	mov	r0, r6
 800a854:	f000 fb78 	bl	800af48 <__swsetup_r>
 800a858:	b170      	cbz	r0, 800a878 <_vfiprintf_r+0x5c>
 800a85a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a85c:	07dc      	lsls	r4, r3, #31
 800a85e:	d504      	bpl.n	800a86a <_vfiprintf_r+0x4e>
 800a860:	f04f 30ff 	mov.w	r0, #4294967295
 800a864:	b01d      	add	sp, #116	; 0x74
 800a866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a86a:	89ab      	ldrh	r3, [r5, #12]
 800a86c:	0598      	lsls	r0, r3, #22
 800a86e:	d4f7      	bmi.n	800a860 <_vfiprintf_r+0x44>
 800a870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a872:	f7ff fe9b 	bl	800a5ac <__retarget_lock_release_recursive>
 800a876:	e7f3      	b.n	800a860 <_vfiprintf_r+0x44>
 800a878:	2300      	movs	r3, #0
 800a87a:	9309      	str	r3, [sp, #36]	; 0x24
 800a87c:	2320      	movs	r3, #32
 800a87e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a882:	f8cd 800c 	str.w	r8, [sp, #12]
 800a886:	2330      	movs	r3, #48	; 0x30
 800a888:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800aa3c <_vfiprintf_r+0x220>
 800a88c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a890:	f04f 0901 	mov.w	r9, #1
 800a894:	4623      	mov	r3, r4
 800a896:	469a      	mov	sl, r3
 800a898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a89c:	b10a      	cbz	r2, 800a8a2 <_vfiprintf_r+0x86>
 800a89e:	2a25      	cmp	r2, #37	; 0x25
 800a8a0:	d1f9      	bne.n	800a896 <_vfiprintf_r+0x7a>
 800a8a2:	ebba 0b04 	subs.w	fp, sl, r4
 800a8a6:	d00b      	beq.n	800a8c0 <_vfiprintf_r+0xa4>
 800a8a8:	465b      	mov	r3, fp
 800a8aa:	4622      	mov	r2, r4
 800a8ac:	4629      	mov	r1, r5
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	f7ff ffa1 	bl	800a7f6 <__sfputs_r>
 800a8b4:	3001      	adds	r0, #1
 800a8b6:	f000 80a9 	beq.w	800aa0c <_vfiprintf_r+0x1f0>
 800a8ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8bc:	445a      	add	r2, fp
 800a8be:	9209      	str	r2, [sp, #36]	; 0x24
 800a8c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f000 80a1 	beq.w	800aa0c <_vfiprintf_r+0x1f0>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a8d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8d4:	f10a 0a01 	add.w	sl, sl, #1
 800a8d8:	9304      	str	r3, [sp, #16]
 800a8da:	9307      	str	r3, [sp, #28]
 800a8dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8e0:	931a      	str	r3, [sp, #104]	; 0x68
 800a8e2:	4654      	mov	r4, sl
 800a8e4:	2205      	movs	r2, #5
 800a8e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ea:	4854      	ldr	r0, [pc, #336]	; (800aa3c <_vfiprintf_r+0x220>)
 800a8ec:	f7f5 fc70 	bl	80001d0 <memchr>
 800a8f0:	9a04      	ldr	r2, [sp, #16]
 800a8f2:	b9d8      	cbnz	r0, 800a92c <_vfiprintf_r+0x110>
 800a8f4:	06d1      	lsls	r1, r2, #27
 800a8f6:	bf44      	itt	mi
 800a8f8:	2320      	movmi	r3, #32
 800a8fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8fe:	0713      	lsls	r3, r2, #28
 800a900:	bf44      	itt	mi
 800a902:	232b      	movmi	r3, #43	; 0x2b
 800a904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a908:	f89a 3000 	ldrb.w	r3, [sl]
 800a90c:	2b2a      	cmp	r3, #42	; 0x2a
 800a90e:	d015      	beq.n	800a93c <_vfiprintf_r+0x120>
 800a910:	9a07      	ldr	r2, [sp, #28]
 800a912:	4654      	mov	r4, sl
 800a914:	2000      	movs	r0, #0
 800a916:	f04f 0c0a 	mov.w	ip, #10
 800a91a:	4621      	mov	r1, r4
 800a91c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a920:	3b30      	subs	r3, #48	; 0x30
 800a922:	2b09      	cmp	r3, #9
 800a924:	d94d      	bls.n	800a9c2 <_vfiprintf_r+0x1a6>
 800a926:	b1b0      	cbz	r0, 800a956 <_vfiprintf_r+0x13a>
 800a928:	9207      	str	r2, [sp, #28]
 800a92a:	e014      	b.n	800a956 <_vfiprintf_r+0x13a>
 800a92c:	eba0 0308 	sub.w	r3, r0, r8
 800a930:	fa09 f303 	lsl.w	r3, r9, r3
 800a934:	4313      	orrs	r3, r2
 800a936:	9304      	str	r3, [sp, #16]
 800a938:	46a2      	mov	sl, r4
 800a93a:	e7d2      	b.n	800a8e2 <_vfiprintf_r+0xc6>
 800a93c:	9b03      	ldr	r3, [sp, #12]
 800a93e:	1d19      	adds	r1, r3, #4
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	9103      	str	r1, [sp, #12]
 800a944:	2b00      	cmp	r3, #0
 800a946:	bfbb      	ittet	lt
 800a948:	425b      	neglt	r3, r3
 800a94a:	f042 0202 	orrlt.w	r2, r2, #2
 800a94e:	9307      	strge	r3, [sp, #28]
 800a950:	9307      	strlt	r3, [sp, #28]
 800a952:	bfb8      	it	lt
 800a954:	9204      	strlt	r2, [sp, #16]
 800a956:	7823      	ldrb	r3, [r4, #0]
 800a958:	2b2e      	cmp	r3, #46	; 0x2e
 800a95a:	d10c      	bne.n	800a976 <_vfiprintf_r+0x15a>
 800a95c:	7863      	ldrb	r3, [r4, #1]
 800a95e:	2b2a      	cmp	r3, #42	; 0x2a
 800a960:	d134      	bne.n	800a9cc <_vfiprintf_r+0x1b0>
 800a962:	9b03      	ldr	r3, [sp, #12]
 800a964:	1d1a      	adds	r2, r3, #4
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	9203      	str	r2, [sp, #12]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	bfb8      	it	lt
 800a96e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a972:	3402      	adds	r4, #2
 800a974:	9305      	str	r3, [sp, #20]
 800a976:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800aa4c <_vfiprintf_r+0x230>
 800a97a:	7821      	ldrb	r1, [r4, #0]
 800a97c:	2203      	movs	r2, #3
 800a97e:	4650      	mov	r0, sl
 800a980:	f7f5 fc26 	bl	80001d0 <memchr>
 800a984:	b138      	cbz	r0, 800a996 <_vfiprintf_r+0x17a>
 800a986:	9b04      	ldr	r3, [sp, #16]
 800a988:	eba0 000a 	sub.w	r0, r0, sl
 800a98c:	2240      	movs	r2, #64	; 0x40
 800a98e:	4082      	lsls	r2, r0
 800a990:	4313      	orrs	r3, r2
 800a992:	3401      	adds	r4, #1
 800a994:	9304      	str	r3, [sp, #16]
 800a996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a99a:	4829      	ldr	r0, [pc, #164]	; (800aa40 <_vfiprintf_r+0x224>)
 800a99c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9a0:	2206      	movs	r2, #6
 800a9a2:	f7f5 fc15 	bl	80001d0 <memchr>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d03f      	beq.n	800aa2a <_vfiprintf_r+0x20e>
 800a9aa:	4b26      	ldr	r3, [pc, #152]	; (800aa44 <_vfiprintf_r+0x228>)
 800a9ac:	bb1b      	cbnz	r3, 800a9f6 <_vfiprintf_r+0x1da>
 800a9ae:	9b03      	ldr	r3, [sp, #12]
 800a9b0:	3307      	adds	r3, #7
 800a9b2:	f023 0307 	bic.w	r3, r3, #7
 800a9b6:	3308      	adds	r3, #8
 800a9b8:	9303      	str	r3, [sp, #12]
 800a9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9bc:	443b      	add	r3, r7
 800a9be:	9309      	str	r3, [sp, #36]	; 0x24
 800a9c0:	e768      	b.n	800a894 <_vfiprintf_r+0x78>
 800a9c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	2001      	movs	r0, #1
 800a9ca:	e7a6      	b.n	800a91a <_vfiprintf_r+0xfe>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	3401      	adds	r4, #1
 800a9d0:	9305      	str	r3, [sp, #20]
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	f04f 0c0a 	mov.w	ip, #10
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9de:	3a30      	subs	r2, #48	; 0x30
 800a9e0:	2a09      	cmp	r2, #9
 800a9e2:	d903      	bls.n	800a9ec <_vfiprintf_r+0x1d0>
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d0c6      	beq.n	800a976 <_vfiprintf_r+0x15a>
 800a9e8:	9105      	str	r1, [sp, #20]
 800a9ea:	e7c4      	b.n	800a976 <_vfiprintf_r+0x15a>
 800a9ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9f0:	4604      	mov	r4, r0
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e7f0      	b.n	800a9d8 <_vfiprintf_r+0x1bc>
 800a9f6:	ab03      	add	r3, sp, #12
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	462a      	mov	r2, r5
 800a9fc:	4b12      	ldr	r3, [pc, #72]	; (800aa48 <_vfiprintf_r+0x22c>)
 800a9fe:	a904      	add	r1, sp, #16
 800aa00:	4630      	mov	r0, r6
 800aa02:	f3af 8000 	nop.w
 800aa06:	4607      	mov	r7, r0
 800aa08:	1c78      	adds	r0, r7, #1
 800aa0a:	d1d6      	bne.n	800a9ba <_vfiprintf_r+0x19e>
 800aa0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa0e:	07d9      	lsls	r1, r3, #31
 800aa10:	d405      	bmi.n	800aa1e <_vfiprintf_r+0x202>
 800aa12:	89ab      	ldrh	r3, [r5, #12]
 800aa14:	059a      	lsls	r2, r3, #22
 800aa16:	d402      	bmi.n	800aa1e <_vfiprintf_r+0x202>
 800aa18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa1a:	f7ff fdc7 	bl	800a5ac <__retarget_lock_release_recursive>
 800aa1e:	89ab      	ldrh	r3, [r5, #12]
 800aa20:	065b      	lsls	r3, r3, #25
 800aa22:	f53f af1d 	bmi.w	800a860 <_vfiprintf_r+0x44>
 800aa26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa28:	e71c      	b.n	800a864 <_vfiprintf_r+0x48>
 800aa2a:	ab03      	add	r3, sp, #12
 800aa2c:	9300      	str	r3, [sp, #0]
 800aa2e:	462a      	mov	r2, r5
 800aa30:	4b05      	ldr	r3, [pc, #20]	; (800aa48 <_vfiprintf_r+0x22c>)
 800aa32:	a904      	add	r1, sp, #16
 800aa34:	4630      	mov	r0, r6
 800aa36:	f000 f879 	bl	800ab2c <_printf_i>
 800aa3a:	e7e4      	b.n	800aa06 <_vfiprintf_r+0x1ea>
 800aa3c:	0800b4cb 	.word	0x0800b4cb
 800aa40:	0800b4d5 	.word	0x0800b4d5
 800aa44:	00000000 	.word	0x00000000
 800aa48:	0800a7f7 	.word	0x0800a7f7
 800aa4c:	0800b4d1 	.word	0x0800b4d1

0800aa50 <_printf_common>:
 800aa50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa54:	4616      	mov	r6, r2
 800aa56:	4699      	mov	r9, r3
 800aa58:	688a      	ldr	r2, [r1, #8]
 800aa5a:	690b      	ldr	r3, [r1, #16]
 800aa5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa60:	4293      	cmp	r3, r2
 800aa62:	bfb8      	it	lt
 800aa64:	4613      	movlt	r3, r2
 800aa66:	6033      	str	r3, [r6, #0]
 800aa68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa6c:	4607      	mov	r7, r0
 800aa6e:	460c      	mov	r4, r1
 800aa70:	b10a      	cbz	r2, 800aa76 <_printf_common+0x26>
 800aa72:	3301      	adds	r3, #1
 800aa74:	6033      	str	r3, [r6, #0]
 800aa76:	6823      	ldr	r3, [r4, #0]
 800aa78:	0699      	lsls	r1, r3, #26
 800aa7a:	bf42      	ittt	mi
 800aa7c:	6833      	ldrmi	r3, [r6, #0]
 800aa7e:	3302      	addmi	r3, #2
 800aa80:	6033      	strmi	r3, [r6, #0]
 800aa82:	6825      	ldr	r5, [r4, #0]
 800aa84:	f015 0506 	ands.w	r5, r5, #6
 800aa88:	d106      	bne.n	800aa98 <_printf_common+0x48>
 800aa8a:	f104 0a19 	add.w	sl, r4, #25
 800aa8e:	68e3      	ldr	r3, [r4, #12]
 800aa90:	6832      	ldr	r2, [r6, #0]
 800aa92:	1a9b      	subs	r3, r3, r2
 800aa94:	42ab      	cmp	r3, r5
 800aa96:	dc26      	bgt.n	800aae6 <_printf_common+0x96>
 800aa98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa9c:	1e13      	subs	r3, r2, #0
 800aa9e:	6822      	ldr	r2, [r4, #0]
 800aaa0:	bf18      	it	ne
 800aaa2:	2301      	movne	r3, #1
 800aaa4:	0692      	lsls	r2, r2, #26
 800aaa6:	d42b      	bmi.n	800ab00 <_printf_common+0xb0>
 800aaa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aaac:	4649      	mov	r1, r9
 800aaae:	4638      	mov	r0, r7
 800aab0:	47c0      	blx	r8
 800aab2:	3001      	adds	r0, #1
 800aab4:	d01e      	beq.n	800aaf4 <_printf_common+0xa4>
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	6922      	ldr	r2, [r4, #16]
 800aaba:	f003 0306 	and.w	r3, r3, #6
 800aabe:	2b04      	cmp	r3, #4
 800aac0:	bf02      	ittt	eq
 800aac2:	68e5      	ldreq	r5, [r4, #12]
 800aac4:	6833      	ldreq	r3, [r6, #0]
 800aac6:	1aed      	subeq	r5, r5, r3
 800aac8:	68a3      	ldr	r3, [r4, #8]
 800aaca:	bf0c      	ite	eq
 800aacc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aad0:	2500      	movne	r5, #0
 800aad2:	4293      	cmp	r3, r2
 800aad4:	bfc4      	itt	gt
 800aad6:	1a9b      	subgt	r3, r3, r2
 800aad8:	18ed      	addgt	r5, r5, r3
 800aada:	2600      	movs	r6, #0
 800aadc:	341a      	adds	r4, #26
 800aade:	42b5      	cmp	r5, r6
 800aae0:	d11a      	bne.n	800ab18 <_printf_common+0xc8>
 800aae2:	2000      	movs	r0, #0
 800aae4:	e008      	b.n	800aaf8 <_printf_common+0xa8>
 800aae6:	2301      	movs	r3, #1
 800aae8:	4652      	mov	r2, sl
 800aaea:	4649      	mov	r1, r9
 800aaec:	4638      	mov	r0, r7
 800aaee:	47c0      	blx	r8
 800aaf0:	3001      	adds	r0, #1
 800aaf2:	d103      	bne.n	800aafc <_printf_common+0xac>
 800aaf4:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aafc:	3501      	adds	r5, #1
 800aafe:	e7c6      	b.n	800aa8e <_printf_common+0x3e>
 800ab00:	18e1      	adds	r1, r4, r3
 800ab02:	1c5a      	adds	r2, r3, #1
 800ab04:	2030      	movs	r0, #48	; 0x30
 800ab06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab0a:	4422      	add	r2, r4
 800ab0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab14:	3302      	adds	r3, #2
 800ab16:	e7c7      	b.n	800aaa8 <_printf_common+0x58>
 800ab18:	2301      	movs	r3, #1
 800ab1a:	4622      	mov	r2, r4
 800ab1c:	4649      	mov	r1, r9
 800ab1e:	4638      	mov	r0, r7
 800ab20:	47c0      	blx	r8
 800ab22:	3001      	adds	r0, #1
 800ab24:	d0e6      	beq.n	800aaf4 <_printf_common+0xa4>
 800ab26:	3601      	adds	r6, #1
 800ab28:	e7d9      	b.n	800aade <_printf_common+0x8e>
	...

0800ab2c <_printf_i>:
 800ab2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab30:	7e0f      	ldrb	r7, [r1, #24]
 800ab32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab34:	2f78      	cmp	r7, #120	; 0x78
 800ab36:	4691      	mov	r9, r2
 800ab38:	4680      	mov	r8, r0
 800ab3a:	460c      	mov	r4, r1
 800ab3c:	469a      	mov	sl, r3
 800ab3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab42:	d807      	bhi.n	800ab54 <_printf_i+0x28>
 800ab44:	2f62      	cmp	r7, #98	; 0x62
 800ab46:	d80a      	bhi.n	800ab5e <_printf_i+0x32>
 800ab48:	2f00      	cmp	r7, #0
 800ab4a:	f000 80d4 	beq.w	800acf6 <_printf_i+0x1ca>
 800ab4e:	2f58      	cmp	r7, #88	; 0x58
 800ab50:	f000 80c0 	beq.w	800acd4 <_printf_i+0x1a8>
 800ab54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab5c:	e03a      	b.n	800abd4 <_printf_i+0xa8>
 800ab5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab62:	2b15      	cmp	r3, #21
 800ab64:	d8f6      	bhi.n	800ab54 <_printf_i+0x28>
 800ab66:	a101      	add	r1, pc, #4	; (adr r1, 800ab6c <_printf_i+0x40>)
 800ab68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab6c:	0800abc5 	.word	0x0800abc5
 800ab70:	0800abd9 	.word	0x0800abd9
 800ab74:	0800ab55 	.word	0x0800ab55
 800ab78:	0800ab55 	.word	0x0800ab55
 800ab7c:	0800ab55 	.word	0x0800ab55
 800ab80:	0800ab55 	.word	0x0800ab55
 800ab84:	0800abd9 	.word	0x0800abd9
 800ab88:	0800ab55 	.word	0x0800ab55
 800ab8c:	0800ab55 	.word	0x0800ab55
 800ab90:	0800ab55 	.word	0x0800ab55
 800ab94:	0800ab55 	.word	0x0800ab55
 800ab98:	0800acdd 	.word	0x0800acdd
 800ab9c:	0800ac05 	.word	0x0800ac05
 800aba0:	0800ac97 	.word	0x0800ac97
 800aba4:	0800ab55 	.word	0x0800ab55
 800aba8:	0800ab55 	.word	0x0800ab55
 800abac:	0800acff 	.word	0x0800acff
 800abb0:	0800ab55 	.word	0x0800ab55
 800abb4:	0800ac05 	.word	0x0800ac05
 800abb8:	0800ab55 	.word	0x0800ab55
 800abbc:	0800ab55 	.word	0x0800ab55
 800abc0:	0800ac9f 	.word	0x0800ac9f
 800abc4:	682b      	ldr	r3, [r5, #0]
 800abc6:	1d1a      	adds	r2, r3, #4
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	602a      	str	r2, [r5, #0]
 800abcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abd4:	2301      	movs	r3, #1
 800abd6:	e09f      	b.n	800ad18 <_printf_i+0x1ec>
 800abd8:	6820      	ldr	r0, [r4, #0]
 800abda:	682b      	ldr	r3, [r5, #0]
 800abdc:	0607      	lsls	r7, r0, #24
 800abde:	f103 0104 	add.w	r1, r3, #4
 800abe2:	6029      	str	r1, [r5, #0]
 800abe4:	d501      	bpl.n	800abea <_printf_i+0xbe>
 800abe6:	681e      	ldr	r6, [r3, #0]
 800abe8:	e003      	b.n	800abf2 <_printf_i+0xc6>
 800abea:	0646      	lsls	r6, r0, #25
 800abec:	d5fb      	bpl.n	800abe6 <_printf_i+0xba>
 800abee:	f9b3 6000 	ldrsh.w	r6, [r3]
 800abf2:	2e00      	cmp	r6, #0
 800abf4:	da03      	bge.n	800abfe <_printf_i+0xd2>
 800abf6:	232d      	movs	r3, #45	; 0x2d
 800abf8:	4276      	negs	r6, r6
 800abfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abfe:	485a      	ldr	r0, [pc, #360]	; (800ad68 <_printf_i+0x23c>)
 800ac00:	230a      	movs	r3, #10
 800ac02:	e012      	b.n	800ac2a <_printf_i+0xfe>
 800ac04:	682b      	ldr	r3, [r5, #0]
 800ac06:	6820      	ldr	r0, [r4, #0]
 800ac08:	1d19      	adds	r1, r3, #4
 800ac0a:	6029      	str	r1, [r5, #0]
 800ac0c:	0605      	lsls	r5, r0, #24
 800ac0e:	d501      	bpl.n	800ac14 <_printf_i+0xe8>
 800ac10:	681e      	ldr	r6, [r3, #0]
 800ac12:	e002      	b.n	800ac1a <_printf_i+0xee>
 800ac14:	0641      	lsls	r1, r0, #25
 800ac16:	d5fb      	bpl.n	800ac10 <_printf_i+0xe4>
 800ac18:	881e      	ldrh	r6, [r3, #0]
 800ac1a:	4853      	ldr	r0, [pc, #332]	; (800ad68 <_printf_i+0x23c>)
 800ac1c:	2f6f      	cmp	r7, #111	; 0x6f
 800ac1e:	bf0c      	ite	eq
 800ac20:	2308      	moveq	r3, #8
 800ac22:	230a      	movne	r3, #10
 800ac24:	2100      	movs	r1, #0
 800ac26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac2a:	6865      	ldr	r5, [r4, #4]
 800ac2c:	60a5      	str	r5, [r4, #8]
 800ac2e:	2d00      	cmp	r5, #0
 800ac30:	bfa2      	ittt	ge
 800ac32:	6821      	ldrge	r1, [r4, #0]
 800ac34:	f021 0104 	bicge.w	r1, r1, #4
 800ac38:	6021      	strge	r1, [r4, #0]
 800ac3a:	b90e      	cbnz	r6, 800ac40 <_printf_i+0x114>
 800ac3c:	2d00      	cmp	r5, #0
 800ac3e:	d04b      	beq.n	800acd8 <_printf_i+0x1ac>
 800ac40:	4615      	mov	r5, r2
 800ac42:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac46:	fb03 6711 	mls	r7, r3, r1, r6
 800ac4a:	5dc7      	ldrb	r7, [r0, r7]
 800ac4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac50:	4637      	mov	r7, r6
 800ac52:	42bb      	cmp	r3, r7
 800ac54:	460e      	mov	r6, r1
 800ac56:	d9f4      	bls.n	800ac42 <_printf_i+0x116>
 800ac58:	2b08      	cmp	r3, #8
 800ac5a:	d10b      	bne.n	800ac74 <_printf_i+0x148>
 800ac5c:	6823      	ldr	r3, [r4, #0]
 800ac5e:	07de      	lsls	r6, r3, #31
 800ac60:	d508      	bpl.n	800ac74 <_printf_i+0x148>
 800ac62:	6923      	ldr	r3, [r4, #16]
 800ac64:	6861      	ldr	r1, [r4, #4]
 800ac66:	4299      	cmp	r1, r3
 800ac68:	bfde      	ittt	le
 800ac6a:	2330      	movle	r3, #48	; 0x30
 800ac6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac70:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac74:	1b52      	subs	r2, r2, r5
 800ac76:	6122      	str	r2, [r4, #16]
 800ac78:	f8cd a000 	str.w	sl, [sp]
 800ac7c:	464b      	mov	r3, r9
 800ac7e:	aa03      	add	r2, sp, #12
 800ac80:	4621      	mov	r1, r4
 800ac82:	4640      	mov	r0, r8
 800ac84:	f7ff fee4 	bl	800aa50 <_printf_common>
 800ac88:	3001      	adds	r0, #1
 800ac8a:	d14a      	bne.n	800ad22 <_printf_i+0x1f6>
 800ac8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac90:	b004      	add	sp, #16
 800ac92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac96:	6823      	ldr	r3, [r4, #0]
 800ac98:	f043 0320 	orr.w	r3, r3, #32
 800ac9c:	6023      	str	r3, [r4, #0]
 800ac9e:	4833      	ldr	r0, [pc, #204]	; (800ad6c <_printf_i+0x240>)
 800aca0:	2778      	movs	r7, #120	; 0x78
 800aca2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	6829      	ldr	r1, [r5, #0]
 800acaa:	061f      	lsls	r7, r3, #24
 800acac:	f851 6b04 	ldr.w	r6, [r1], #4
 800acb0:	d402      	bmi.n	800acb8 <_printf_i+0x18c>
 800acb2:	065f      	lsls	r7, r3, #25
 800acb4:	bf48      	it	mi
 800acb6:	b2b6      	uxthmi	r6, r6
 800acb8:	07df      	lsls	r7, r3, #31
 800acba:	bf48      	it	mi
 800acbc:	f043 0320 	orrmi.w	r3, r3, #32
 800acc0:	6029      	str	r1, [r5, #0]
 800acc2:	bf48      	it	mi
 800acc4:	6023      	strmi	r3, [r4, #0]
 800acc6:	b91e      	cbnz	r6, 800acd0 <_printf_i+0x1a4>
 800acc8:	6823      	ldr	r3, [r4, #0]
 800acca:	f023 0320 	bic.w	r3, r3, #32
 800acce:	6023      	str	r3, [r4, #0]
 800acd0:	2310      	movs	r3, #16
 800acd2:	e7a7      	b.n	800ac24 <_printf_i+0xf8>
 800acd4:	4824      	ldr	r0, [pc, #144]	; (800ad68 <_printf_i+0x23c>)
 800acd6:	e7e4      	b.n	800aca2 <_printf_i+0x176>
 800acd8:	4615      	mov	r5, r2
 800acda:	e7bd      	b.n	800ac58 <_printf_i+0x12c>
 800acdc:	682b      	ldr	r3, [r5, #0]
 800acde:	6826      	ldr	r6, [r4, #0]
 800ace0:	6961      	ldr	r1, [r4, #20]
 800ace2:	1d18      	adds	r0, r3, #4
 800ace4:	6028      	str	r0, [r5, #0]
 800ace6:	0635      	lsls	r5, r6, #24
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	d501      	bpl.n	800acf0 <_printf_i+0x1c4>
 800acec:	6019      	str	r1, [r3, #0]
 800acee:	e002      	b.n	800acf6 <_printf_i+0x1ca>
 800acf0:	0670      	lsls	r0, r6, #25
 800acf2:	d5fb      	bpl.n	800acec <_printf_i+0x1c0>
 800acf4:	8019      	strh	r1, [r3, #0]
 800acf6:	2300      	movs	r3, #0
 800acf8:	6123      	str	r3, [r4, #16]
 800acfa:	4615      	mov	r5, r2
 800acfc:	e7bc      	b.n	800ac78 <_printf_i+0x14c>
 800acfe:	682b      	ldr	r3, [r5, #0]
 800ad00:	1d1a      	adds	r2, r3, #4
 800ad02:	602a      	str	r2, [r5, #0]
 800ad04:	681d      	ldr	r5, [r3, #0]
 800ad06:	6862      	ldr	r2, [r4, #4]
 800ad08:	2100      	movs	r1, #0
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	f7f5 fa60 	bl	80001d0 <memchr>
 800ad10:	b108      	cbz	r0, 800ad16 <_printf_i+0x1ea>
 800ad12:	1b40      	subs	r0, r0, r5
 800ad14:	6060      	str	r0, [r4, #4]
 800ad16:	6863      	ldr	r3, [r4, #4]
 800ad18:	6123      	str	r3, [r4, #16]
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad20:	e7aa      	b.n	800ac78 <_printf_i+0x14c>
 800ad22:	6923      	ldr	r3, [r4, #16]
 800ad24:	462a      	mov	r2, r5
 800ad26:	4649      	mov	r1, r9
 800ad28:	4640      	mov	r0, r8
 800ad2a:	47d0      	blx	sl
 800ad2c:	3001      	adds	r0, #1
 800ad2e:	d0ad      	beq.n	800ac8c <_printf_i+0x160>
 800ad30:	6823      	ldr	r3, [r4, #0]
 800ad32:	079b      	lsls	r3, r3, #30
 800ad34:	d413      	bmi.n	800ad5e <_printf_i+0x232>
 800ad36:	68e0      	ldr	r0, [r4, #12]
 800ad38:	9b03      	ldr	r3, [sp, #12]
 800ad3a:	4298      	cmp	r0, r3
 800ad3c:	bfb8      	it	lt
 800ad3e:	4618      	movlt	r0, r3
 800ad40:	e7a6      	b.n	800ac90 <_printf_i+0x164>
 800ad42:	2301      	movs	r3, #1
 800ad44:	4632      	mov	r2, r6
 800ad46:	4649      	mov	r1, r9
 800ad48:	4640      	mov	r0, r8
 800ad4a:	47d0      	blx	sl
 800ad4c:	3001      	adds	r0, #1
 800ad4e:	d09d      	beq.n	800ac8c <_printf_i+0x160>
 800ad50:	3501      	adds	r5, #1
 800ad52:	68e3      	ldr	r3, [r4, #12]
 800ad54:	9903      	ldr	r1, [sp, #12]
 800ad56:	1a5b      	subs	r3, r3, r1
 800ad58:	42ab      	cmp	r3, r5
 800ad5a:	dcf2      	bgt.n	800ad42 <_printf_i+0x216>
 800ad5c:	e7eb      	b.n	800ad36 <_printf_i+0x20a>
 800ad5e:	2500      	movs	r5, #0
 800ad60:	f104 0619 	add.w	r6, r4, #25
 800ad64:	e7f5      	b.n	800ad52 <_printf_i+0x226>
 800ad66:	bf00      	nop
 800ad68:	0800b4dc 	.word	0x0800b4dc
 800ad6c:	0800b4ed 	.word	0x0800b4ed

0800ad70 <__sflush_r>:
 800ad70:	898a      	ldrh	r2, [r1, #12]
 800ad72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad76:	4605      	mov	r5, r0
 800ad78:	0710      	lsls	r0, r2, #28
 800ad7a:	460c      	mov	r4, r1
 800ad7c:	d458      	bmi.n	800ae30 <__sflush_r+0xc0>
 800ad7e:	684b      	ldr	r3, [r1, #4]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	dc05      	bgt.n	800ad90 <__sflush_r+0x20>
 800ad84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	dc02      	bgt.n	800ad90 <__sflush_r+0x20>
 800ad8a:	2000      	movs	r0, #0
 800ad8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad92:	2e00      	cmp	r6, #0
 800ad94:	d0f9      	beq.n	800ad8a <__sflush_r+0x1a>
 800ad96:	2300      	movs	r3, #0
 800ad98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad9c:	682f      	ldr	r7, [r5, #0]
 800ad9e:	6a21      	ldr	r1, [r4, #32]
 800ada0:	602b      	str	r3, [r5, #0]
 800ada2:	d032      	beq.n	800ae0a <__sflush_r+0x9a>
 800ada4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ada6:	89a3      	ldrh	r3, [r4, #12]
 800ada8:	075a      	lsls	r2, r3, #29
 800adaa:	d505      	bpl.n	800adb8 <__sflush_r+0x48>
 800adac:	6863      	ldr	r3, [r4, #4]
 800adae:	1ac0      	subs	r0, r0, r3
 800adb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adb2:	b10b      	cbz	r3, 800adb8 <__sflush_r+0x48>
 800adb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adb6:	1ac0      	subs	r0, r0, r3
 800adb8:	2300      	movs	r3, #0
 800adba:	4602      	mov	r2, r0
 800adbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adbe:	6a21      	ldr	r1, [r4, #32]
 800adc0:	4628      	mov	r0, r5
 800adc2:	47b0      	blx	r6
 800adc4:	1c43      	adds	r3, r0, #1
 800adc6:	89a3      	ldrh	r3, [r4, #12]
 800adc8:	d106      	bne.n	800add8 <__sflush_r+0x68>
 800adca:	6829      	ldr	r1, [r5, #0]
 800adcc:	291d      	cmp	r1, #29
 800adce:	d82b      	bhi.n	800ae28 <__sflush_r+0xb8>
 800add0:	4a29      	ldr	r2, [pc, #164]	; (800ae78 <__sflush_r+0x108>)
 800add2:	410a      	asrs	r2, r1
 800add4:	07d6      	lsls	r6, r2, #31
 800add6:	d427      	bmi.n	800ae28 <__sflush_r+0xb8>
 800add8:	2200      	movs	r2, #0
 800adda:	6062      	str	r2, [r4, #4]
 800addc:	04d9      	lsls	r1, r3, #19
 800adde:	6922      	ldr	r2, [r4, #16]
 800ade0:	6022      	str	r2, [r4, #0]
 800ade2:	d504      	bpl.n	800adee <__sflush_r+0x7e>
 800ade4:	1c42      	adds	r2, r0, #1
 800ade6:	d101      	bne.n	800adec <__sflush_r+0x7c>
 800ade8:	682b      	ldr	r3, [r5, #0]
 800adea:	b903      	cbnz	r3, 800adee <__sflush_r+0x7e>
 800adec:	6560      	str	r0, [r4, #84]	; 0x54
 800adee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adf0:	602f      	str	r7, [r5, #0]
 800adf2:	2900      	cmp	r1, #0
 800adf4:	d0c9      	beq.n	800ad8a <__sflush_r+0x1a>
 800adf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adfa:	4299      	cmp	r1, r3
 800adfc:	d002      	beq.n	800ae04 <__sflush_r+0x94>
 800adfe:	4628      	mov	r0, r5
 800ae00:	f7ff fbea 	bl	800a5d8 <_free_r>
 800ae04:	2000      	movs	r0, #0
 800ae06:	6360      	str	r0, [r4, #52]	; 0x34
 800ae08:	e7c0      	b.n	800ad8c <__sflush_r+0x1c>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	47b0      	blx	r6
 800ae10:	1c41      	adds	r1, r0, #1
 800ae12:	d1c8      	bne.n	800ada6 <__sflush_r+0x36>
 800ae14:	682b      	ldr	r3, [r5, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d0c5      	beq.n	800ada6 <__sflush_r+0x36>
 800ae1a:	2b1d      	cmp	r3, #29
 800ae1c:	d001      	beq.n	800ae22 <__sflush_r+0xb2>
 800ae1e:	2b16      	cmp	r3, #22
 800ae20:	d101      	bne.n	800ae26 <__sflush_r+0xb6>
 800ae22:	602f      	str	r7, [r5, #0]
 800ae24:	e7b1      	b.n	800ad8a <__sflush_r+0x1a>
 800ae26:	89a3      	ldrh	r3, [r4, #12]
 800ae28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae2c:	81a3      	strh	r3, [r4, #12]
 800ae2e:	e7ad      	b.n	800ad8c <__sflush_r+0x1c>
 800ae30:	690f      	ldr	r7, [r1, #16]
 800ae32:	2f00      	cmp	r7, #0
 800ae34:	d0a9      	beq.n	800ad8a <__sflush_r+0x1a>
 800ae36:	0793      	lsls	r3, r2, #30
 800ae38:	680e      	ldr	r6, [r1, #0]
 800ae3a:	bf08      	it	eq
 800ae3c:	694b      	ldreq	r3, [r1, #20]
 800ae3e:	600f      	str	r7, [r1, #0]
 800ae40:	bf18      	it	ne
 800ae42:	2300      	movne	r3, #0
 800ae44:	eba6 0807 	sub.w	r8, r6, r7
 800ae48:	608b      	str	r3, [r1, #8]
 800ae4a:	f1b8 0f00 	cmp.w	r8, #0
 800ae4e:	dd9c      	ble.n	800ad8a <__sflush_r+0x1a>
 800ae50:	6a21      	ldr	r1, [r4, #32]
 800ae52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae54:	4643      	mov	r3, r8
 800ae56:	463a      	mov	r2, r7
 800ae58:	4628      	mov	r0, r5
 800ae5a:	47b0      	blx	r6
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	dc06      	bgt.n	800ae6e <__sflush_r+0xfe>
 800ae60:	89a3      	ldrh	r3, [r4, #12]
 800ae62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae66:	81a3      	strh	r3, [r4, #12]
 800ae68:	f04f 30ff 	mov.w	r0, #4294967295
 800ae6c:	e78e      	b.n	800ad8c <__sflush_r+0x1c>
 800ae6e:	4407      	add	r7, r0
 800ae70:	eba8 0800 	sub.w	r8, r8, r0
 800ae74:	e7e9      	b.n	800ae4a <__sflush_r+0xda>
 800ae76:	bf00      	nop
 800ae78:	dfbffffe 	.word	0xdfbffffe

0800ae7c <_fflush_r>:
 800ae7c:	b538      	push	{r3, r4, r5, lr}
 800ae7e:	690b      	ldr	r3, [r1, #16]
 800ae80:	4605      	mov	r5, r0
 800ae82:	460c      	mov	r4, r1
 800ae84:	b913      	cbnz	r3, 800ae8c <_fflush_r+0x10>
 800ae86:	2500      	movs	r5, #0
 800ae88:	4628      	mov	r0, r5
 800ae8a:	bd38      	pop	{r3, r4, r5, pc}
 800ae8c:	b118      	cbz	r0, 800ae96 <_fflush_r+0x1a>
 800ae8e:	6a03      	ldr	r3, [r0, #32]
 800ae90:	b90b      	cbnz	r3, 800ae96 <_fflush_r+0x1a>
 800ae92:	f7ff fa73 	bl	800a37c <__sinit>
 800ae96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d0f3      	beq.n	800ae86 <_fflush_r+0xa>
 800ae9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aea0:	07d0      	lsls	r0, r2, #31
 800aea2:	d404      	bmi.n	800aeae <_fflush_r+0x32>
 800aea4:	0599      	lsls	r1, r3, #22
 800aea6:	d402      	bmi.n	800aeae <_fflush_r+0x32>
 800aea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeaa:	f7ff fb7e 	bl	800a5aa <__retarget_lock_acquire_recursive>
 800aeae:	4628      	mov	r0, r5
 800aeb0:	4621      	mov	r1, r4
 800aeb2:	f7ff ff5d 	bl	800ad70 <__sflush_r>
 800aeb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aeb8:	07da      	lsls	r2, r3, #31
 800aeba:	4605      	mov	r5, r0
 800aebc:	d4e4      	bmi.n	800ae88 <_fflush_r+0xc>
 800aebe:	89a3      	ldrh	r3, [r4, #12]
 800aec0:	059b      	lsls	r3, r3, #22
 800aec2:	d4e1      	bmi.n	800ae88 <_fflush_r+0xc>
 800aec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aec6:	f7ff fb71 	bl	800a5ac <__retarget_lock_release_recursive>
 800aeca:	e7dd      	b.n	800ae88 <_fflush_r+0xc>

0800aecc <__swbuf_r>:
 800aecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aece:	460e      	mov	r6, r1
 800aed0:	4614      	mov	r4, r2
 800aed2:	4605      	mov	r5, r0
 800aed4:	b118      	cbz	r0, 800aede <__swbuf_r+0x12>
 800aed6:	6a03      	ldr	r3, [r0, #32]
 800aed8:	b90b      	cbnz	r3, 800aede <__swbuf_r+0x12>
 800aeda:	f7ff fa4f 	bl	800a37c <__sinit>
 800aede:	69a3      	ldr	r3, [r4, #24]
 800aee0:	60a3      	str	r3, [r4, #8]
 800aee2:	89a3      	ldrh	r3, [r4, #12]
 800aee4:	071a      	lsls	r2, r3, #28
 800aee6:	d525      	bpl.n	800af34 <__swbuf_r+0x68>
 800aee8:	6923      	ldr	r3, [r4, #16]
 800aeea:	b31b      	cbz	r3, 800af34 <__swbuf_r+0x68>
 800aeec:	6823      	ldr	r3, [r4, #0]
 800aeee:	6922      	ldr	r2, [r4, #16]
 800aef0:	1a98      	subs	r0, r3, r2
 800aef2:	6963      	ldr	r3, [r4, #20]
 800aef4:	b2f6      	uxtb	r6, r6
 800aef6:	4283      	cmp	r3, r0
 800aef8:	4637      	mov	r7, r6
 800aefa:	dc04      	bgt.n	800af06 <__swbuf_r+0x3a>
 800aefc:	4621      	mov	r1, r4
 800aefe:	4628      	mov	r0, r5
 800af00:	f7ff ffbc 	bl	800ae7c <_fflush_r>
 800af04:	b9e0      	cbnz	r0, 800af40 <__swbuf_r+0x74>
 800af06:	68a3      	ldr	r3, [r4, #8]
 800af08:	3b01      	subs	r3, #1
 800af0a:	60a3      	str	r3, [r4, #8]
 800af0c:	6823      	ldr	r3, [r4, #0]
 800af0e:	1c5a      	adds	r2, r3, #1
 800af10:	6022      	str	r2, [r4, #0]
 800af12:	701e      	strb	r6, [r3, #0]
 800af14:	6962      	ldr	r2, [r4, #20]
 800af16:	1c43      	adds	r3, r0, #1
 800af18:	429a      	cmp	r2, r3
 800af1a:	d004      	beq.n	800af26 <__swbuf_r+0x5a>
 800af1c:	89a3      	ldrh	r3, [r4, #12]
 800af1e:	07db      	lsls	r3, r3, #31
 800af20:	d506      	bpl.n	800af30 <__swbuf_r+0x64>
 800af22:	2e0a      	cmp	r6, #10
 800af24:	d104      	bne.n	800af30 <__swbuf_r+0x64>
 800af26:	4621      	mov	r1, r4
 800af28:	4628      	mov	r0, r5
 800af2a:	f7ff ffa7 	bl	800ae7c <_fflush_r>
 800af2e:	b938      	cbnz	r0, 800af40 <__swbuf_r+0x74>
 800af30:	4638      	mov	r0, r7
 800af32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af34:	4621      	mov	r1, r4
 800af36:	4628      	mov	r0, r5
 800af38:	f000 f806 	bl	800af48 <__swsetup_r>
 800af3c:	2800      	cmp	r0, #0
 800af3e:	d0d5      	beq.n	800aeec <__swbuf_r+0x20>
 800af40:	f04f 37ff 	mov.w	r7, #4294967295
 800af44:	e7f4      	b.n	800af30 <__swbuf_r+0x64>
	...

0800af48 <__swsetup_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	4b2a      	ldr	r3, [pc, #168]	; (800aff4 <__swsetup_r+0xac>)
 800af4c:	4605      	mov	r5, r0
 800af4e:	6818      	ldr	r0, [r3, #0]
 800af50:	460c      	mov	r4, r1
 800af52:	b118      	cbz	r0, 800af5c <__swsetup_r+0x14>
 800af54:	6a03      	ldr	r3, [r0, #32]
 800af56:	b90b      	cbnz	r3, 800af5c <__swsetup_r+0x14>
 800af58:	f7ff fa10 	bl	800a37c <__sinit>
 800af5c:	89a3      	ldrh	r3, [r4, #12]
 800af5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af62:	0718      	lsls	r0, r3, #28
 800af64:	d422      	bmi.n	800afac <__swsetup_r+0x64>
 800af66:	06d9      	lsls	r1, r3, #27
 800af68:	d407      	bmi.n	800af7a <__swsetup_r+0x32>
 800af6a:	2309      	movs	r3, #9
 800af6c:	602b      	str	r3, [r5, #0]
 800af6e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af72:	81a3      	strh	r3, [r4, #12]
 800af74:	f04f 30ff 	mov.w	r0, #4294967295
 800af78:	e034      	b.n	800afe4 <__swsetup_r+0x9c>
 800af7a:	0758      	lsls	r0, r3, #29
 800af7c:	d512      	bpl.n	800afa4 <__swsetup_r+0x5c>
 800af7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af80:	b141      	cbz	r1, 800af94 <__swsetup_r+0x4c>
 800af82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af86:	4299      	cmp	r1, r3
 800af88:	d002      	beq.n	800af90 <__swsetup_r+0x48>
 800af8a:	4628      	mov	r0, r5
 800af8c:	f7ff fb24 	bl	800a5d8 <_free_r>
 800af90:	2300      	movs	r3, #0
 800af92:	6363      	str	r3, [r4, #52]	; 0x34
 800af94:	89a3      	ldrh	r3, [r4, #12]
 800af96:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af9a:	81a3      	strh	r3, [r4, #12]
 800af9c:	2300      	movs	r3, #0
 800af9e:	6063      	str	r3, [r4, #4]
 800afa0:	6923      	ldr	r3, [r4, #16]
 800afa2:	6023      	str	r3, [r4, #0]
 800afa4:	89a3      	ldrh	r3, [r4, #12]
 800afa6:	f043 0308 	orr.w	r3, r3, #8
 800afaa:	81a3      	strh	r3, [r4, #12]
 800afac:	6923      	ldr	r3, [r4, #16]
 800afae:	b94b      	cbnz	r3, 800afc4 <__swsetup_r+0x7c>
 800afb0:	89a3      	ldrh	r3, [r4, #12]
 800afb2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800afb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afba:	d003      	beq.n	800afc4 <__swsetup_r+0x7c>
 800afbc:	4621      	mov	r1, r4
 800afbe:	4628      	mov	r0, r5
 800afc0:	f000 f894 	bl	800b0ec <__smakebuf_r>
 800afc4:	89a0      	ldrh	r0, [r4, #12]
 800afc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afca:	f010 0301 	ands.w	r3, r0, #1
 800afce:	d00a      	beq.n	800afe6 <__swsetup_r+0x9e>
 800afd0:	2300      	movs	r3, #0
 800afd2:	60a3      	str	r3, [r4, #8]
 800afd4:	6963      	ldr	r3, [r4, #20]
 800afd6:	425b      	negs	r3, r3
 800afd8:	61a3      	str	r3, [r4, #24]
 800afda:	6923      	ldr	r3, [r4, #16]
 800afdc:	b943      	cbnz	r3, 800aff0 <__swsetup_r+0xa8>
 800afde:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800afe2:	d1c4      	bne.n	800af6e <__swsetup_r+0x26>
 800afe4:	bd38      	pop	{r3, r4, r5, pc}
 800afe6:	0781      	lsls	r1, r0, #30
 800afe8:	bf58      	it	pl
 800afea:	6963      	ldrpl	r3, [r4, #20]
 800afec:	60a3      	str	r3, [r4, #8]
 800afee:	e7f4      	b.n	800afda <__swsetup_r+0x92>
 800aff0:	2000      	movs	r0, #0
 800aff2:	e7f7      	b.n	800afe4 <__swsetup_r+0x9c>
 800aff4:	2000006c 	.word	0x2000006c

0800aff8 <_raise_r>:
 800aff8:	291f      	cmp	r1, #31
 800affa:	b538      	push	{r3, r4, r5, lr}
 800affc:	4604      	mov	r4, r0
 800affe:	460d      	mov	r5, r1
 800b000:	d904      	bls.n	800b00c <_raise_r+0x14>
 800b002:	2316      	movs	r3, #22
 800b004:	6003      	str	r3, [r0, #0]
 800b006:	f04f 30ff 	mov.w	r0, #4294967295
 800b00a:	bd38      	pop	{r3, r4, r5, pc}
 800b00c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b00e:	b112      	cbz	r2, 800b016 <_raise_r+0x1e>
 800b010:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b014:	b94b      	cbnz	r3, 800b02a <_raise_r+0x32>
 800b016:	4620      	mov	r0, r4
 800b018:	f000 f830 	bl	800b07c <_getpid_r>
 800b01c:	462a      	mov	r2, r5
 800b01e:	4601      	mov	r1, r0
 800b020:	4620      	mov	r0, r4
 800b022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b026:	f000 b817 	b.w	800b058 <_kill_r>
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d00a      	beq.n	800b044 <_raise_r+0x4c>
 800b02e:	1c59      	adds	r1, r3, #1
 800b030:	d103      	bne.n	800b03a <_raise_r+0x42>
 800b032:	2316      	movs	r3, #22
 800b034:	6003      	str	r3, [r0, #0]
 800b036:	2001      	movs	r0, #1
 800b038:	e7e7      	b.n	800b00a <_raise_r+0x12>
 800b03a:	2400      	movs	r4, #0
 800b03c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b040:	4628      	mov	r0, r5
 800b042:	4798      	blx	r3
 800b044:	2000      	movs	r0, #0
 800b046:	e7e0      	b.n	800b00a <_raise_r+0x12>

0800b048 <raise>:
 800b048:	4b02      	ldr	r3, [pc, #8]	; (800b054 <raise+0xc>)
 800b04a:	4601      	mov	r1, r0
 800b04c:	6818      	ldr	r0, [r3, #0]
 800b04e:	f7ff bfd3 	b.w	800aff8 <_raise_r>
 800b052:	bf00      	nop
 800b054:	2000006c 	.word	0x2000006c

0800b058 <_kill_r>:
 800b058:	b538      	push	{r3, r4, r5, lr}
 800b05a:	4d07      	ldr	r5, [pc, #28]	; (800b078 <_kill_r+0x20>)
 800b05c:	2300      	movs	r3, #0
 800b05e:	4604      	mov	r4, r0
 800b060:	4608      	mov	r0, r1
 800b062:	4611      	mov	r1, r2
 800b064:	602b      	str	r3, [r5, #0]
 800b066:	f7f6 f82b 	bl	80010c0 <_kill>
 800b06a:	1c43      	adds	r3, r0, #1
 800b06c:	d102      	bne.n	800b074 <_kill_r+0x1c>
 800b06e:	682b      	ldr	r3, [r5, #0]
 800b070:	b103      	cbz	r3, 800b074 <_kill_r+0x1c>
 800b072:	6023      	str	r3, [r4, #0]
 800b074:	bd38      	pop	{r3, r4, r5, pc}
 800b076:	bf00      	nop
 800b078:	20001d40 	.word	0x20001d40

0800b07c <_getpid_r>:
 800b07c:	f7f6 b818 	b.w	80010b0 <_getpid>

0800b080 <_sbrk_r>:
 800b080:	b538      	push	{r3, r4, r5, lr}
 800b082:	4d06      	ldr	r5, [pc, #24]	; (800b09c <_sbrk_r+0x1c>)
 800b084:	2300      	movs	r3, #0
 800b086:	4604      	mov	r4, r0
 800b088:	4608      	mov	r0, r1
 800b08a:	602b      	str	r3, [r5, #0]
 800b08c:	f7f6 f884 	bl	8001198 <_sbrk>
 800b090:	1c43      	adds	r3, r0, #1
 800b092:	d102      	bne.n	800b09a <_sbrk_r+0x1a>
 800b094:	682b      	ldr	r3, [r5, #0]
 800b096:	b103      	cbz	r3, 800b09a <_sbrk_r+0x1a>
 800b098:	6023      	str	r3, [r4, #0]
 800b09a:	bd38      	pop	{r3, r4, r5, pc}
 800b09c:	20001d40 	.word	0x20001d40

0800b0a0 <__swhatbuf_r>:
 800b0a0:	b570      	push	{r4, r5, r6, lr}
 800b0a2:	460c      	mov	r4, r1
 800b0a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0a8:	2900      	cmp	r1, #0
 800b0aa:	b096      	sub	sp, #88	; 0x58
 800b0ac:	4615      	mov	r5, r2
 800b0ae:	461e      	mov	r6, r3
 800b0b0:	da0d      	bge.n	800b0ce <__swhatbuf_r+0x2e>
 800b0b2:	89a3      	ldrh	r3, [r4, #12]
 800b0b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b0b8:	f04f 0100 	mov.w	r1, #0
 800b0bc:	bf0c      	ite	eq
 800b0be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b0c2:	2340      	movne	r3, #64	; 0x40
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	6031      	str	r1, [r6, #0]
 800b0c8:	602b      	str	r3, [r5, #0]
 800b0ca:	b016      	add	sp, #88	; 0x58
 800b0cc:	bd70      	pop	{r4, r5, r6, pc}
 800b0ce:	466a      	mov	r2, sp
 800b0d0:	f000 f848 	bl	800b164 <_fstat_r>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	dbec      	blt.n	800b0b2 <__swhatbuf_r+0x12>
 800b0d8:	9901      	ldr	r1, [sp, #4]
 800b0da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b0de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b0e2:	4259      	negs	r1, r3
 800b0e4:	4159      	adcs	r1, r3
 800b0e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0ea:	e7eb      	b.n	800b0c4 <__swhatbuf_r+0x24>

0800b0ec <__smakebuf_r>:
 800b0ec:	898b      	ldrh	r3, [r1, #12]
 800b0ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0f0:	079d      	lsls	r5, r3, #30
 800b0f2:	4606      	mov	r6, r0
 800b0f4:	460c      	mov	r4, r1
 800b0f6:	d507      	bpl.n	800b108 <__smakebuf_r+0x1c>
 800b0f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0fc:	6023      	str	r3, [r4, #0]
 800b0fe:	6123      	str	r3, [r4, #16]
 800b100:	2301      	movs	r3, #1
 800b102:	6163      	str	r3, [r4, #20]
 800b104:	b002      	add	sp, #8
 800b106:	bd70      	pop	{r4, r5, r6, pc}
 800b108:	ab01      	add	r3, sp, #4
 800b10a:	466a      	mov	r2, sp
 800b10c:	f7ff ffc8 	bl	800b0a0 <__swhatbuf_r>
 800b110:	9900      	ldr	r1, [sp, #0]
 800b112:	4605      	mov	r5, r0
 800b114:	4630      	mov	r0, r6
 800b116:	f7ff facb 	bl	800a6b0 <_malloc_r>
 800b11a:	b948      	cbnz	r0, 800b130 <__smakebuf_r+0x44>
 800b11c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b120:	059a      	lsls	r2, r3, #22
 800b122:	d4ef      	bmi.n	800b104 <__smakebuf_r+0x18>
 800b124:	f023 0303 	bic.w	r3, r3, #3
 800b128:	f043 0302 	orr.w	r3, r3, #2
 800b12c:	81a3      	strh	r3, [r4, #12]
 800b12e:	e7e3      	b.n	800b0f8 <__smakebuf_r+0xc>
 800b130:	89a3      	ldrh	r3, [r4, #12]
 800b132:	6020      	str	r0, [r4, #0]
 800b134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b138:	81a3      	strh	r3, [r4, #12]
 800b13a:	9b00      	ldr	r3, [sp, #0]
 800b13c:	6163      	str	r3, [r4, #20]
 800b13e:	9b01      	ldr	r3, [sp, #4]
 800b140:	6120      	str	r0, [r4, #16]
 800b142:	b15b      	cbz	r3, 800b15c <__smakebuf_r+0x70>
 800b144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b148:	4630      	mov	r0, r6
 800b14a:	f000 f81d 	bl	800b188 <_isatty_r>
 800b14e:	b128      	cbz	r0, 800b15c <__smakebuf_r+0x70>
 800b150:	89a3      	ldrh	r3, [r4, #12]
 800b152:	f023 0303 	bic.w	r3, r3, #3
 800b156:	f043 0301 	orr.w	r3, r3, #1
 800b15a:	81a3      	strh	r3, [r4, #12]
 800b15c:	89a3      	ldrh	r3, [r4, #12]
 800b15e:	431d      	orrs	r5, r3
 800b160:	81a5      	strh	r5, [r4, #12]
 800b162:	e7cf      	b.n	800b104 <__smakebuf_r+0x18>

0800b164 <_fstat_r>:
 800b164:	b538      	push	{r3, r4, r5, lr}
 800b166:	4d07      	ldr	r5, [pc, #28]	; (800b184 <_fstat_r+0x20>)
 800b168:	2300      	movs	r3, #0
 800b16a:	4604      	mov	r4, r0
 800b16c:	4608      	mov	r0, r1
 800b16e:	4611      	mov	r1, r2
 800b170:	602b      	str	r3, [r5, #0]
 800b172:	f7f5 ffe8 	bl	8001146 <_fstat>
 800b176:	1c43      	adds	r3, r0, #1
 800b178:	d102      	bne.n	800b180 <_fstat_r+0x1c>
 800b17a:	682b      	ldr	r3, [r5, #0]
 800b17c:	b103      	cbz	r3, 800b180 <_fstat_r+0x1c>
 800b17e:	6023      	str	r3, [r4, #0]
 800b180:	bd38      	pop	{r3, r4, r5, pc}
 800b182:	bf00      	nop
 800b184:	20001d40 	.word	0x20001d40

0800b188 <_isatty_r>:
 800b188:	b538      	push	{r3, r4, r5, lr}
 800b18a:	4d06      	ldr	r5, [pc, #24]	; (800b1a4 <_isatty_r+0x1c>)
 800b18c:	2300      	movs	r3, #0
 800b18e:	4604      	mov	r4, r0
 800b190:	4608      	mov	r0, r1
 800b192:	602b      	str	r3, [r5, #0]
 800b194:	f7f5 ffe7 	bl	8001166 <_isatty>
 800b198:	1c43      	adds	r3, r0, #1
 800b19a:	d102      	bne.n	800b1a2 <_isatty_r+0x1a>
 800b19c:	682b      	ldr	r3, [r5, #0]
 800b19e:	b103      	cbz	r3, 800b1a2 <_isatty_r+0x1a>
 800b1a0:	6023      	str	r3, [r4, #0]
 800b1a2:	bd38      	pop	{r3, r4, r5, pc}
 800b1a4:	20001d40 	.word	0x20001d40

0800b1a8 <_init>:
 800b1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1aa:	bf00      	nop
 800b1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ae:	bc08      	pop	{r3}
 800b1b0:	469e      	mov	lr, r3
 800b1b2:	4770      	bx	lr

0800b1b4 <_fini>:
 800b1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b6:	bf00      	nop
 800b1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ba:	bc08      	pop	{r3}
 800b1bc:	469e      	mov	lr, r3
 800b1be:	4770      	bx	lr
