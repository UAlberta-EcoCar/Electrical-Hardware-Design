
RF-Module-Firmware-HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c790  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d30  0800c920  0800c920  0000d920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d650  0800d650  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d650  0800d650  0000e650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d658  0800d658  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d658  0800d658  0000e658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d65c  0800d65c  0000e65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800d660  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002278  200001d8  0800d838  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002450  0800d838  0000f450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022af2  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b79  00000000  00000000  00031cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd8  00000000  00000000  00036878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000158b  00000000  00000000  00038450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002548c  00000000  00000000  000399db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021601  00000000  00000000  0005ee67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcebc  00000000  00000000  00080468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d324  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084c0  00000000  00000000  0015d368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  00165828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c908 	.word	0x0800c908

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800c908 	.word	0x0800c908

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_CAN1_Init>:
/* USER CODE END 0 */

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8000f18 <MX_CAN1_Init+0x80>)
 8000ea0:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 5;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000ea4:	2205      	movs	r2, #5
 8000ea6:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eae:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000eb6:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000eba:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000ebe:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000ec2:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ec4:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000eca:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000ed0:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000edc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8000ee8:	480a      	ldr	r0, [pc, #40]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000eea:	f001 fc73 	bl	80027d4 <HAL_CAN_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_CAN1_Init+0x60>
		Error_Handler();
 8000ef4:	f000 fb6c 	bl	80015d0 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000ef8:	4806      	ldr	r0, [pc, #24]	@ (8000f14 <MX_CAN1_Init+0x7c>)
 8000efa:	f001 fe30 	bl	8002b5e <HAL_CAN_Start>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d004      	beq.n	8000f0e <MX_CAN1_Init+0x76>
		printf("[!SYSTEM ERROR]CAN Initialization Error At CAN Start");
 8000f04:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <MX_CAN1_Init+0x84>)
 8000f06:	f009 fcd1 	bl	800a8ac <iprintf>
		Error_Handler();
 8000f0a:	f000 fb61 	bl	80015d0 <Error_Handler>
	}
	/* USER CODE END CAN1_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200001f4 	.word	0x200001f4
 8000f18:	40006400 	.word	0x40006400
 8000f1c:	0800c920 	.word	0x0800c920

08000f20 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	@ 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
	if (canHandle->Instance == CAN1) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a21      	ldr	r2, [pc, #132]	@ (8000fc4 <HAL_CAN_MspInit+0xa4>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d13b      	bne.n	8000fba <HAL_CAN_MspInit+0x9a>
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* CAN1 clock enable */
		__HAL_RCC_CAN1_CLK_ENABLE();
 8000f42:	4b21      	ldr	r3, [pc, #132]	@ (8000fc8 <HAL_CAN_MspInit+0xa8>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f46:	4a20      	ldr	r2, [pc, #128]	@ (8000fc8 <HAL_CAN_MspInit+0xa8>)
 8000f48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <HAL_CAN_MspInit+0xa8>)
 8000f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <HAL_CAN_MspInit+0xa8>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	4a1a      	ldr	r2, [pc, #104]	@ (8000fc8 <HAL_CAN_MspInit+0xa8>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f66:	4b18      	ldr	r3, [pc, #96]	@ (8000fc8 <HAL_CAN_MspInit+0xa8>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
		/**CAN1 GPIO Configuration
		 PA11     ------> CAN1_RX
		 PA12     ------> CAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f76:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f84:	2309      	movs	r3, #9
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f92:	f002 f8fd 	bl	8003190 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f9a:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fa8:	2309      	movs	r3, #9
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb6:	f002 f8eb 	bl	8003190 <HAL_GPIO_Init>

		/* USER CODE BEGIN CAN1_MspInit 1 */

		/* USER CODE END CAN1_MspInit 1 */
	}
}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	@ 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40006400 	.word	0x40006400
 8000fc8:	40021000 	.word	0x40021000

08000fcc <CAN_Initialize>:
	}
}

/* USER CODE BEGIN 1 */

void CAN_Initialize() {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b094      	sub	sp, #80	@ 0x50
 8000fd0:	af00      	add	r7, sp, #0
	MX_CAN1_Init();
 8000fd2:	f7ff ff61 	bl	8000e98 <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	CAN_FilterTypeDef high_priority_filter;
	high_priority_filter.FilterIdHigh = 0x100 << 5;
 8000fd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fda:	62bb      	str	r3, [r7, #40]	@ 0x28
	high_priority_filter.FilterMaskIdHigh = 0x700 << 5;
 8000fdc:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000fe0:	633b      	str	r3, [r7, #48]	@ 0x30
	high_priority_filter.FilterIdLow = 0x0000;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	high_priority_filter.FilterMaskIdLow = 0x0000;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	637b      	str	r3, [r7, #52]	@ 0x34
	high_priority_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	63bb      	str	r3, [r7, #56]	@ 0x38
	high_priority_filter.FilterBank = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	high_priority_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	643b      	str	r3, [r7, #64]	@ 0x40
	high_priority_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	647b      	str	r3, [r7, #68]	@ 0x44
	high_priority_filter.FilterActivation = CAN_FILTER_ENABLE;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	64bb      	str	r3, [r7, #72]	@ 0x48

	if (HAL_CAN_ConfigFilter(&hcan1, &high_priority_filter) != HAL_OK) {
 8000ffe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001002:	4619      	mov	r1, r3
 8001004:	480f      	ldr	r0, [pc, #60]	@ (8001044 <CAN_Initialize+0x78>)
 8001006:	f001 fce0 	bl	80029ca <HAL_CAN_ConfigFilter>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <CAN_Initialize+0x48>
		/* Filter configuration Error */
		Error_Handler();
 8001010:	f000 fade 	bl	80015d0 <Error_Handler>
	}

	CAN_FilterTypeDef low_priority_filter;
	low_priority_filter.FilterIdHigh = 0x100 << 5;
 8001014:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001018:	603b      	str	r3, [r7, #0]
	low_priority_filter.FilterMaskIdHigh = 0x700 << 5;
 800101a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800101e:	60bb      	str	r3, [r7, #8]
	low_priority_filter.FilterIdLow = 0x0000;
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
	low_priority_filter.FilterMaskIdLow = 0x0000;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
	low_priority_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
	low_priority_filter.FilterBank = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
	low_priority_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001030:	2300      	movs	r3, #0
 8001032:	61bb      	str	r3, [r7, #24]
	low_priority_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001034:	2301      	movs	r3, #1
 8001036:	61fb      	str	r3, [r7, #28]
	low_priority_filter.FilterActivation = CAN_FILTER_ENABLE;
 8001038:	2301      	movs	r3, #1
 800103a:	623b      	str	r3, [r7, #32]
//	}
//	TxHeader.RTR = CAN_RTR_DATA;
//	TxHeader.IDE = CAN_ID_STD;
//	TxHeader.DLC = 8;
//	TxHeader.TransmitGlobalTime = DISABLE;
}
 800103c:	bf00      	nop
 800103e:	3750      	adds	r7, #80	@ 0x50
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200001f4 	.word	0x200001f4

08001048 <HAL_CAN_SafeAddTxMessage>:
//	}
//
//	return 1;
//}
HAL_StatusTypeDef HAL_CAN_SafeAddTxMessage(uint8_t *msg, uint32_t msg_id,
		uint32_t msg_length, uint32_t *TxMailbox, uint32_t rtr) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	@ 0x30
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	603b      	str	r3, [r7, #0]
	uint32_t fc_tick;
	HAL_StatusTypeDef hal_stat;
	CAN_TxHeaderTypeDef _TxHeader;

	// These will never change
	_TxHeader.IDE = CAN_ID_STD;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
	_TxHeader.ExtId = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
	_TxHeader.TransmitGlobalTime = DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	// User will give us this information
	_TxHeader.RTR = rtr;
 8001064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001066:	61fb      	str	r3, [r7, #28]
	_TxHeader.StdId = msg_id;
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	613b      	str	r3, [r7, #16]
	_TxHeader.DLC = msg_length;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	623b      	str	r3, [r7, #32]

	// Start a timer to check timeout conditions
	fc_tick = HAL_GetTick();
 8001070:	f001 fba4 	bl	80027bc <HAL_GetTick>
 8001074:	62f8      	str	r0, [r7, #44]	@ 0x2c

	/* Try to add a Tx message. Returns HAL_ERROR if there are no avail
	 * mailboxes or if the peripheral is not initialized. */
	do {
		hal_stat = HAL_CAN_AddTxMessage(&hcan1, &_TxHeader, msg, TxMailbox);
 8001076:	f107 0110 	add.w	r1, r7, #16
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	480c      	ldr	r0, [pc, #48]	@ (80010b0 <HAL_CAN_SafeAddTxMessage+0x68>)
 8001080:	f001 fdb1 	bl	8002be6 <HAL_CAN_AddTxMessage>
 8001084:	4603      	mov	r3, r0
 8001086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	} while (hal_stat != HAL_OK && (HAL_GetTick() - fc_tick < 500));
 800108a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800108e:	2b00      	cmp	r3, #0
 8001090:	d007      	beq.n	80010a2 <HAL_CAN_SafeAddTxMessage+0x5a>
 8001092:	f001 fb93 	bl	80027bc <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010a0:	d3e9      	bcc.n	8001076 <HAL_CAN_SafeAddTxMessage+0x2e>

	return hal_stat;
 80010a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3730      	adds	r7, #48	@ 0x30
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200001f4 	.word	0x200001f4

080010b4 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80010b8:	4a0c      	ldr	r2, [pc, #48]	@ (80010ec <MX_FREERTOS_Init+0x38>)
 80010ba:	2100      	movs	r1, #0
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <MX_FREERTOS_Init+0x3c>)
 80010be:	f006 f977 	bl	80073b0 <osThreadNew>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a0b      	ldr	r2, [pc, #44]	@ (80010f4 <MX_FREERTOS_Init+0x40>)
 80010c6:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of CanRxTask */
	CanRxTaskHandle = osThreadNew(StartCanRxTask, NULL, &CanRxTask_attributes);
 80010c8:	4a0b      	ldr	r2, [pc, #44]	@ (80010f8 <MX_FREERTOS_Init+0x44>)
 80010ca:	2100      	movs	r1, #0
 80010cc:	480b      	ldr	r0, [pc, #44]	@ (80010fc <MX_FREERTOS_Init+0x48>)
 80010ce:	f006 f96f 	bl	80073b0 <osThreadNew>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <MX_FREERTOS_Init+0x4c>)
 80010d6:	6013      	str	r3, [r2, #0]

	/* creation of CanRtrTask */
	CanRtrTaskHandle = osThreadNew(StartCanRtrTask, NULL,
 80010d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <MX_FREERTOS_Init+0x50>)
 80010da:	2100      	movs	r1, #0
 80010dc:	480a      	ldr	r0, [pc, #40]	@ (8001108 <MX_FREERTOS_Init+0x54>)
 80010de:	f006 f967 	bl	80073b0 <osThreadNew>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a09      	ldr	r2, [pc, #36]	@ (800110c <MX_FREERTOS_Init+0x58>)
 80010e6:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	0800d228 	.word	0x0800d228
 80010f0:	08001111 	.word	0x08001111
 80010f4:	2000021c 	.word	0x2000021c
 80010f8:	0800d24c 	.word	0x0800d24c
 80010fc:	080011f1 	.word	0x080011f1
 8001100:	20000220 	.word	0x20000220
 8001104:	0800d270 	.word	0x0800d270
 8001108:	08001275 	.word	0x08001275
 800110c:	200004cc 	.word	0x200004cc

08001110 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b092      	sub	sp, #72	@ 0x48
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDefaultTask */
	//	rfm95_init();
	//	uint8_t version = 0, temp = 0;
	rf_handle_t rfm95 = { .rf_nreset_port = RF_NRST_GPIO_Port, .rf_nreset_pin =
 8001118:	f107 0318 	add.w	r3, r7, #24
 800111c:	222c      	movs	r2, #44	@ 0x2c
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f009 fd0b 	bl	800ab3c <memset>
 8001126:	4b2a      	ldr	r3, [pc, #168]	@ (80011d0 <StartDefaultTask+0xc0>)
 8001128:	61bb      	str	r3, [r7, #24]
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001134:	623b      	str	r3, [r7, #32]
 8001136:	2310      	movs	r3, #16
 8001138:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800113a:	4b26      	ldr	r3, [pc, #152]	@ (80011d4 <StartDefaultTask+0xc4>)
 800113c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800113e:	2320      	movs	r3, #32
 8001140:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001142:	4b25      	ldr	r3, [pc, #148]	@ (80011d8 <StartDefaultTask+0xc8>)
 8001144:	637b      	str	r3, [r7, #52]	@ 0x34
 8001146:	4b25      	ldr	r3, [pc, #148]	@ (80011dc <StartDefaultTask+0xcc>)
 8001148:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RF_NRST_Pin, .rf_nss_port = SPI1_NSS_GPIO_Port, .rf_nss_pin =
	SPI1_NSS_Pin, .rf_spi_handle = &hspi1, .rf_delay_func = osDelay,
			.rf_spi_timeout = HAL_MAX_DELAY, .rf_carrier_frequency = 868000000 };

	rf_initialize_radio(&rfm95);
 800114a:	f107 0318 	add.w	r3, r7, #24
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fad0 	bl	80016f4 <rf_initialize_radio>
	rf_set_tx_power(&rfm95, 5);
 8001154:	f107 0318 	add.w	r3, r7, #24
 8001158:	2105      	movs	r1, #5
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fd66 	bl	8001c2c <rf_set_tx_power>

	rf_set_frequency(&rfm95, 868000000);
 8001160:	f107 0318 	add.w	r3, r7, #24
 8001164:	491d      	ldr	r1, [pc, #116]	@ (80011dc <StartDefaultTask+0xcc>)
 8001166:	4618      	mov	r0, r3
 8001168:	f000 fd0e 	bl	8001b88 <rf_set_frequency>
	uint8_t testdata = 347u;
 800116c:	235b      	movs	r3, #91	@ 0x5b
 800116e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	//	rf_set_op_mode(&rfm95, RF_OP_MODE_RX_SINGLE);

	//	rf_listen_implicit(&rfm95, 1);
	//	rf_listen(&rfm95);

	const char test[] = "Hello.78\0";
 8001172:	4a1b      	ldr	r2, [pc, #108]	@ (80011e0 <StartDefaultTask+0xd0>)
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	ca07      	ldmia	r2, {r0, r1, r2}
 800117a:	c303      	stmia	r3!, {r0, r1}
 800117c:	801a      	strh	r2, [r3, #0]

	uint8_t rec_legth = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

	/* Infinite loop */
	for (;;) {
		//osDelay(100);
		log_info("Sending message %s", test);
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	22cd      	movs	r2, #205	@ 0xcd
 800118a:	4916      	ldr	r1, [pc, #88]	@ (80011e4 <StartDefaultTask+0xd4>)
 800118c:	4816      	ldr	r0, [pc, #88]	@ (80011e8 <StartDefaultTask+0xd8>)
 800118e:	f009 fb8d 	bl	800a8ac <iprintf>
		HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001198:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119c:	f002 f962 	bl	8003464 <HAL_GPIO_WritePin>
		//rf_initialize_radio(&rfm95);
		rf_send(&rfm95, test_packet.packet_raw, 16);
 80011a0:	f107 0318 	add.w	r3, r7, #24
 80011a4:	2210      	movs	r2, #16
 80011a6:	4911      	ldr	r1, [pc, #68]	@ (80011ec <StartDefaultTask+0xdc>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 fb8f 	bl	80018cc <rf_send>
		testdata += 1;
 80011ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80011b2:	3301      	adds	r3, #1
 80011b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c2:	f002 f94f 	bl	8003464 <HAL_GPIO_WritePin>
		osDelay(100);
 80011c6:	2064      	movs	r0, #100	@ 0x64
 80011c8:	f006 f984 	bl	80074d4 <osDelay>
		log_info("Sending message %s", test);
 80011cc:	bf00      	nop
 80011ce:	e7d9      	b.n	8001184 <StartDefaultTask+0x74>
 80011d0:	2000078c 	.word	0x2000078c
 80011d4:	48000400 	.word	0x48000400
 80011d8:	080074d5 	.word	0x080074d5
 80011dc:	33bca100 	.word	0x33bca100
 80011e0:	0800c9d8 	.word	0x0800c9d8
 80011e4:	0800c99c 	.word	0x0800c99c
 80011e8:	0800c9b4 	.word	0x0800c9b4
 80011ec:	20000778 	.word	0x20000778

080011f0 <StartCanRxTask>:
 * @brief Function implementing the CanRxTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanRxTask */
void StartCanRxTask(void *argument) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af02      	add	r7, sp, #8
 80011f6:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for (;;) {

//		CAN_Transmit(CAN_LUCY_FC_VI, NULL, NULL, CAN_RTR_REMOTE);
		if (!HAL_CAN_SafeAddTxMessage(NULL, CAN_LUCY_FC_VI, 0, &TxMailbox,
 80011f8:	2302      	movs	r3, #2
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <StartCanRxTask+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f240 1103 	movw	r1, #259	@ 0x103
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff ff1f 	bl	8001048 <HAL_CAN_SafeAddTxMessage>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d105      	bne.n	800121c <StartCanRxTask+0x2c>
		CAN_RTR_REMOTE)) {
			log_info("Sending CAN REQUEST");
 8001210:	22fa      	movs	r2, #250	@ 0xfa
 8001212:	4915      	ldr	r1, [pc, #84]	@ (8001268 <StartCanRxTask+0x78>)
 8001214:	4815      	ldr	r0, [pc, #84]	@ (800126c <StartCanRxTask+0x7c>)
 8001216:	f009 fb49 	bl	800a8ac <iprintf>
 800121a:	e004      	b.n	8001226 <StartCanRxTask+0x36>
		} else {
			log_info("CAN TIMED OUT");
 800121c:	22fc      	movs	r2, #252	@ 0xfc
 800121e:	4912      	ldr	r1, [pc, #72]	@ (8001268 <StartCanRxTask+0x78>)
 8001220:	4813      	ldr	r0, [pc, #76]	@ (8001270 <StartCanRxTask+0x80>)
 8001222:	f009 fb43 	bl	800a8ac <iprintf>
		}

		if (!HAL_CAN_SafeAddTxMessage(NULL, CAN_LUCY_MOTOR_VI, 0, &TxMailbox,
 8001226:	2302      	movs	r3, #2
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <StartCanRxTask+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001232:	2000      	movs	r0, #0
 8001234:	f7ff ff08 	bl	8001048 <HAL_CAN_SafeAddTxMessage>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d106      	bne.n	800124c <StartCanRxTask+0x5c>
		CAN_RTR_REMOTE)) {
			log_info("Sending CAN REQUEST");
 800123e:	f240 1201 	movw	r2, #257	@ 0x101
 8001242:	4909      	ldr	r1, [pc, #36]	@ (8001268 <StartCanRxTask+0x78>)
 8001244:	4809      	ldr	r0, [pc, #36]	@ (800126c <StartCanRxTask+0x7c>)
 8001246:	f009 fb31 	bl	800a8ac <iprintf>
 800124a:	e005      	b.n	8001258 <StartCanRxTask+0x68>
		} else {
			log_info("CAN TIMED OUT");
 800124c:	f240 1203 	movw	r2, #259	@ 0x103
 8001250:	4905      	ldr	r1, [pc, #20]	@ (8001268 <StartCanRxTask+0x78>)
 8001252:	4807      	ldr	r0, [pc, #28]	@ (8001270 <StartCanRxTask+0x80>)
 8001254:	f009 fb2a 	bl	800a8ac <iprintf>
		}
		osDelay(1000);
 8001258:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800125c:	f006 f93a 	bl	80074d4 <osDelay>
		if (!HAL_CAN_SafeAddTxMessage(NULL, CAN_LUCY_FC_VI, 0, &TxMailbox,
 8001260:	e7ca      	b.n	80011f8 <StartCanRxTask+0x8>
 8001262:	bf00      	nop
 8001264:	20000788 	.word	0x20000788
 8001268:	0800c99c 	.word	0x0800c99c
 800126c:	0800c9e4 	.word	0x0800c9e4
 8001270:	0800ca0c 	.word	0x0800ca0c

08001274 <StartCanRtrTask>:
 * @brief Function implementing the CanRtrTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanRtrTask */
void StartCanRtrTask(void *argument) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b08e      	sub	sp, #56	@ 0x38
 8001278:	af02      	add	r7, sp, #8
 800127a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCanRtrTask */
	CAN_Initialize();
 800127c:	f7ff fea6 	bl	8000fcc <CAN_Initialize>
	/* Infinite loop */
	uint8_t RxData[8];
	HAL_StatusTypeDef hal_stat;
	CAN_RxHeaderTypeDef RxHeader = { 0 };
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
 8001290:	615a      	str	r2, [r3, #20]
 8001292:	619a      	str	r2, [r3, #24]
	for (;;) {
//		HAL_CAN_GetRxFifoFillLevel(&hcan1, RxFifo);
		hal_stat = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader,
 8001294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001298:	f107 0208 	add.w	r2, r7, #8
 800129c:	2100      	movs	r1, #0
 800129e:	4825      	ldr	r0, [pc, #148]	@ (8001334 <StartCanRtrTask+0xc0>)
 80012a0:	f001 fd71 	bl	8002d86 <HAL_CAN_GetRxMessage>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				RxData);
		if (!hal_stat) {
 80012aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d13c      	bne.n	800132c <StartCanRtrTask+0xb8>
			log_info("Got message");
 80012b2:	f240 121d 	movw	r2, #285	@ 0x11d
 80012b6:	4920      	ldr	r1, [pc, #128]	@ (8001338 <StartCanRtrTask+0xc4>)
 80012b8:	4820      	ldr	r0, [pc, #128]	@ (800133c <StartCanRtrTask+0xc8>)
 80012ba:	f009 faf7 	bl	800a8ac <iprintf>

			log_info("0x%x %d RTR: %d", RxHeader.StdId, RxHeader.DLC,
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	9201      	str	r2, [sp, #4]
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	460b      	mov	r3, r1
 80012ca:	f240 121f 	movw	r2, #287	@ 0x11f
 80012ce:	491a      	ldr	r1, [pc, #104]	@ (8001338 <StartCanRtrTask+0xc4>)
 80012d0:	481b      	ldr	r0, [pc, #108]	@ (8001340 <StartCanRtrTask+0xcc>)
 80012d2:	f009 faeb 	bl	800a8ac <iprintf>
					RxHeader.RTR);

			if (RxHeader.StdId == CAN_LUCY_FC_VI && RxHeader.DLC != 0) {
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	f240 1203 	movw	r2, #259	@ 0x103
 80012dc:	4293      	cmp	r3, r2
 80012de:	d110      	bne.n	8001302 <StartCanRtrTask+0x8e>
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00d      	beq.n	8001302 <StartCanRtrTask+0x8e>

				memcpy(test_packet.packet_fc.can_raw_lucy_fc_vi, RxData, 8);
 80012e6:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <StartCanRtrTask+0xd0>)
 80012e8:	461a      	mov	r2, r3
 80012ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012f2:	e882 0003 	stmia.w	r2, {r0, r1}
				log_info("Copying 103");
 80012f6:	f240 1225 	movw	r2, #293	@ 0x125
 80012fa:	490f      	ldr	r1, [pc, #60]	@ (8001338 <StartCanRtrTask+0xc4>)
 80012fc:	4812      	ldr	r0, [pc, #72]	@ (8001348 <StartCanRtrTask+0xd4>)
 80012fe:	f009 fad5 	bl	800a8ac <iprintf>
			}

			if (RxHeader.StdId == CAN_LUCY_MOTOR_VI && RxHeader.DLC != 0) {
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001308:	d110      	bne.n	800132c <StartCanRtrTask+0xb8>
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00d      	beq.n	800132c <StartCanRtrTask+0xb8>

				memcpy(test_packet.packet_mtr.can_raw_lucy_motor_vi, RxData, 8);
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <StartCanRtrTask+0xd0>)
 8001312:	3308      	adds	r3, #8
 8001314:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001318:	e892 0003 	ldmia.w	r2, {r0, r1}
 800131c:	e883 0003 	stmia.w	r3, {r0, r1}
				log_info("Copying 102");
 8001320:	f240 122b 	movw	r2, #299	@ 0x12b
 8001324:	4904      	ldr	r1, [pc, #16]	@ (8001338 <StartCanRtrTask+0xc4>)
 8001326:	4809      	ldr	r0, [pc, #36]	@ (800134c <StartCanRtrTask+0xd8>)
 8001328:	f009 fac0 	bl	800a8ac <iprintf>
			}

		}
		osDelay(5);
 800132c:	2005      	movs	r0, #5
 800132e:	f006 f8d1 	bl	80074d4 <osDelay>
		hal_stat = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader,
 8001332:	e7af      	b.n	8001294 <StartCanRtrTask+0x20>
 8001334:	200001f4 	.word	0x200001f4
 8001338:	0800c99c 	.word	0x0800c99c
 800133c:	0800ca2c 	.word	0x0800ca2c
 8001340:	0800ca4c 	.word	0x0800ca4c
 8001344:	20000778 	.word	0x20000778
 8001348:	0800ca70 	.word	0x0800ca70
 800134c:	0800ca90 	.word	0x0800ca90

08001350 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	4b4a      	ldr	r3, [pc, #296]	@ (8001490 <MX_GPIO_Init+0x140>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	4a49      	ldr	r2, [pc, #292]	@ (8001490 <MX_GPIO_Init+0x140>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001372:	4b47      	ldr	r3, [pc, #284]	@ (8001490 <MX_GPIO_Init+0x140>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b44      	ldr	r3, [pc, #272]	@ (8001490 <MX_GPIO_Init+0x140>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	4a43      	ldr	r2, [pc, #268]	@ (8001490 <MX_GPIO_Init+0x140>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138a:	4b41      	ldr	r3, [pc, #260]	@ (8001490 <MX_GPIO_Init+0x140>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	4b3e      	ldr	r3, [pc, #248]	@ (8001490 <MX_GPIO_Init+0x140>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	4a3d      	ldr	r2, [pc, #244]	@ (8001490 <MX_GPIO_Init+0x140>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001490 <MX_GPIO_Init+0x140>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013b4:	4837      	ldr	r0, [pc, #220]	@ (8001494 <MX_GPIO_Init+0x144>)
 80013b6:	f002 f855 	bl	8003464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|LED_D1_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80013c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c4:	f002 f84e 	bl	8003464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_NRST_GPIO_Port, RF_NRST_Pin, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2120      	movs	r1, #32
 80013cc:	4832      	ldr	r0, [pc, #200]	@ (8001498 <MX_GPIO_Init+0x148>)
 80013ce:	f002 f849 	bl	8003464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_STBY_Pin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 80013d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	4619      	mov	r1, r3
 80013ea:	482a      	ldr	r0, [pc, #168]	@ (8001494 <MX_GPIO_Init+0x144>)
 80013ec:	f001 fed0 	bl	8003190 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_NSS_Pin LED_D1_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin|LED_D1_Pin;
 80013f0:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 80013f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	4619      	mov	r1, r3
 8001408:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800140c:	f001 fec0 	bl	8003190 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin DIO1_Pin DIO2_Pin DIO3_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin|DIO2_Pin|DIO3_Pin;
 8001410:	23c3      	movs	r3, #195	@ 0xc3
 8001412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001414:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	4619      	mov	r1, r3
 8001424:	481c      	ldr	r0, [pc, #112]	@ (8001498 <MX_GPIO_Init+0x148>)
 8001426:	f001 feb3 	bl	8003190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800142a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800142e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	4619      	mov	r1, r3
 8001446:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800144a:	f001 fea1 	bl	8003190 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO4_Pin */
  GPIO_InitStruct.Pin = DIO4_Pin;
 800144e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001454:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO4_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	4619      	mov	r1, r3
 8001464:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001468:	f001 fe92 	bl	8003190 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_NRST_Pin */
  GPIO_InitStruct.Pin = RF_NRST_Pin;
 800146c:	2320      	movs	r3, #32
 800146e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_NRST_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4619      	mov	r1, r3
 8001482:	4805      	ldr	r0, [pc, #20]	@ (8001498 <MX_GPIO_Init+0x148>)
 8001484:	f001 fe84 	bl	8003190 <HAL_GPIO_Init>

}
 8001488:	bf00      	nop
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000
 8001494:	48000800 	.word	0x48000800
 8001498:	48000400 	.word	0x48000400

0800149c <_write>:
int _write(int file, char *ptr, int len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	4804      	ldr	r0, [pc, #16]	@ (80014c4 <_write+0x28>)
 80014b4:	f005 fa1c 	bl	80068f0 <HAL_UART_Transmit>
	return len;
 80014b8:	687b      	ldr	r3, [r7, #4]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200008d8 	.word	0x200008d8

080014c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014cc:	f001 f949 	bl	8002762 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d0:	f000 f814 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d4:	f7ff ff3c 	bl	8001350 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014d8:	f001 f892 	bl	8002600 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80014dc:	f7ff fcdc 	bl	8000e98 <MX_CAN1_Init>
  MX_TIM1_Init();
 80014e0:	f000 feda 	bl	8002298 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014e4:	f000 ff84 	bl	80023f0 <MX_TIM2_Init>
  MX_SPI1_Init();
 80014e8:	f000 fcd0 	bl	8001e8c <MX_SPI1_Init>
//  CAN_Initialize();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80014ec:	f005 ff16 	bl	800731c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80014f0:	f7ff fde0 	bl	80010b4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80014f4:	f005 ff36 	bl	8007364 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <main+0x30>

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b096      	sub	sp, #88	@ 0x58
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	2244      	movs	r2, #68	@ 0x44
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f009 fb16 	bl	800ab3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	463b      	mov	r3, r7
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800151e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001522:	f001 ffc5 	bl	80034b0 <HAL_PWREx_ControlVoltageScaling>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800152c:	f000 f850 	bl	80015d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001530:	2301      	movs	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001534:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001538:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153a:	2302      	movs	r3, #2
 800153c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800153e:	2303      	movs	r3, #3
 8001540:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001542:	2301      	movs	r3, #1
 8001544:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001546:	2314      	movs	r3, #20
 8001548:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800154a:	2307      	movs	r3, #7
 800154c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800154e:	2302      	movs	r3, #2
 8001550:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001552:	2302      	movs	r3, #2
 8001554:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4618      	mov	r0, r3
 800155c:	f001 fffe 	bl	800355c <HAL_RCC_OscConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001566:	f000 f833 	bl	80015d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156a:	230f      	movs	r3, #15
 800156c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156e:	2303      	movs	r3, #3
 8001570:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800157e:	463b      	mov	r3, r7
 8001580:	2104      	movs	r1, #4
 8001582:	4618      	mov	r0, r3
 8001584:	f002 fbfe 	bl	8003d84 <HAL_RCC_ClockConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800158e:	f000 f81f 	bl	80015d0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_16);
 8001592:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001596:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800159a:	2000      	movs	r0, #0
 800159c:	f002 fcf2 	bl	8003f84 <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80015a0:	f002 fe1a 	bl	80041d8 <HAL_RCC_EnableCSS>
}
 80015a4:	bf00      	nop
 80015a6:	3758      	adds	r7, #88	@ 0x58
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a04      	ldr	r2, [pc, #16]	@ (80015cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d101      	bne.n	80015c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015be:	f001 f8e9 	bl	8002794 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40014400 	.word	0x40014400

080015d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d6:	b672      	cpsid	i
}
 80015d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	e002      	b.n	80015e6 <Error_Handler+0x16>
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3301      	adds	r3, #1
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001654 <Error_Handler+0x84>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	ddf8      	ble.n	80015e0 <Error_Handler+0x10>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D1_PWM_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	e002      	b.n	80015fa <Error_Handler+0x2a>
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	3301      	adds	r3, #1
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4a15      	ldr	r2, [pc, #84]	@ (8001654 <Error_Handler+0x84>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	ddf8      	ble.n	80015f4 <Error_Handler+0x24>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D2_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	e002      	b.n	800160e <Error_Handler+0x3e>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3301      	adds	r3, #1
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4a10      	ldr	r2, [pc, #64]	@ (8001654 <Error_Handler+0x84>)
 8001612:	4293      	cmp	r3, r2
 8001614:	ddf8      	ble.n	8001608 <Error_Handler+0x38>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D3_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	e002      	b.n	8001622 <Error_Handler+0x52>
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	3301      	adds	r3, #1
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	4a0b      	ldr	r2, [pc, #44]	@ (8001654 <Error_Handler+0x84>)
 8001626:	4293      	cmp	r3, r2
 8001628:	ddf8      	ble.n	800161c <Error_Handler+0x4c>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D1_Pin, GPIO_PIN_RESET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	e002      	b.n	8001636 <Error_Handler+0x66>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3301      	adds	r3, #1
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a06      	ldr	r2, [pc, #24]	@ (8001654 <Error_Handler+0x84>)
 800163a:	4293      	cmp	r3, r2
 800163c:	ddf8      	ble.n	8001630 <Error_Handler+0x60>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D2_Pin, GPIO_PIN_RESET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 800163e:	2300      	movs	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	e002      	b.n	800164a <Error_Handler+0x7a>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	4a01      	ldr	r2, [pc, #4]	@ (8001654 <Error_Handler+0x84>)
 800164e:	4293      	cmp	r3, r2
 8001650:	ddf8      	ble.n	8001644 <Error_Handler+0x74>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001652:	e7c2      	b.n	80015da <Error_Handler+0xa>
 8001654:	000c34ff 	.word	0x000c34ff

08001658 <rf_set_op_mode>:

#define LOG_WARN(M, ...) printf("[Abi's RFlib]" SETFG_YELLOW "[WARN] " M GR_RESET "\r\n", ##__VA_ARGS__)

#define LOG_INFO(M, ...) printf("[Abi's RFlib][INFO] " M "\r\n", ##__VA_ARGS__)

int rf_set_op_mode(rf_handle_t *rf_handle, rf_op_mode_t rf_op_mode) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	70fb      	strb	r3, [r7, #3]

	rf_register_op_mode_config_t opmode = { 0 };
 8001664:	2300      	movs	r3, #0
 8001666:	733b      	strb	r3, [r7, #12]

	if (!rf_spi_read_register(rf_handle, RegOpMode, &opmode.op_mode)) {
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	461a      	mov	r2, r3
 800166e:	2101      	movs	r1, #1
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 fb57 	bl	8001d24 <rf_spi_read_register>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d106      	bne.n	800168a <rf_set_op_mode+0x32>
		LOG_ERROR("SPI ERROR Setting op mode");
 800167c:	2216      	movs	r2, #22
 800167e:	491b      	ldr	r1, [pc, #108]	@ (80016ec <rf_set_op_mode+0x94>)
 8001680:	481b      	ldr	r0, [pc, #108]	@ (80016f0 <rf_set_op_mode+0x98>)
 8001682:	f009 f913 	bl	800a8ac <iprintf>
		return 0;
 8001686:	2300      	movs	r3, #0
 8001688:	e02b      	b.n	80016e2 <rf_set_op_mode+0x8a>

//	opmode.access_shared_reg = 0;

//	opmode.long_range_mode = 1; // just assume we are long range mode only.

	opmode.mode = rf_op_mode;
 800168a:	78fb      	ldrb	r3, [r7, #3]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	b2da      	uxtb	r2, r3
 8001692:	7b3b      	ldrb	r3, [r7, #12]
 8001694:	f362 0302 	bfi	r3, r2, #0, #3
 8001698:	733b      	strb	r3, [r7, #12]

	if (!rf_spi_write_register(rf_handle, RegOpMode, opmode.op_mode)) {
 800169a:	7b3b      	ldrb	r3, [r7, #12]
 800169c:	461a      	mov	r2, r3
 800169e:	2101      	movs	r1, #1
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 fb8d 	bl	8001dc0 <rf_spi_write_register>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d106      	bne.n	80016ba <rf_set_op_mode+0x62>
		LOG_ERROR("SPI ERROR Setting op mode");
 80016ac:	2223      	movs	r2, #35	@ 0x23
 80016ae:	490f      	ldr	r1, [pc, #60]	@ (80016ec <rf_set_op_mode+0x94>)
 80016b0:	480f      	ldr	r0, [pc, #60]	@ (80016f0 <rf_set_op_mode+0x98>)
 80016b2:	f009 f8fb 	bl	800a8ac <iprintf>
		return 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e013      	b.n	80016e2 <rf_set_op_mode+0x8a>
	}

	opmode.op_mode = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	733b      	strb	r3, [r7, #12]

	if (!rf_spi_read_register(rf_handle, RegOpMode, &opmode.op_mode)) {
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	461a      	mov	r2, r3
 80016c4:	2101      	movs	r1, #1
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 fb2c 	bl	8001d24 <rf_spi_read_register>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d106      	bne.n	80016e0 <rf_set_op_mode+0x88>
		LOG_ERROR("SPI ERROR Setting op mode");
 80016d2:	222a      	movs	r2, #42	@ 0x2a
 80016d4:	4905      	ldr	r1, [pc, #20]	@ (80016ec <rf_set_op_mode+0x94>)
 80016d6:	4806      	ldr	r0, [pc, #24]	@ (80016f0 <rf_set_op_mode+0x98>)
 80016d8:	f009 f8e8 	bl	800a8ac <iprintf>
		return 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	e000      	b.n	80016e2 <rf_set_op_mode+0x8a>
	}

	return 1;
 80016e0:	2301      	movs	r3, #1

}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	0800cab0 	.word	0x0800cab0
 80016f0:	0800cac8 	.word	0x0800cac8

080016f4 <rf_initialize_radio>:

int rf_initialize_radio(rf_handle_t *rf_handle) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	if (rf_handle == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <rf_initialize_radio+0x12>
		return 0;
 8001702:	2300      	movs	r3, #0
 8001704:	e0cd      	b.n	80018a2 <rf_initialize_radio+0x1ae>

	if (rf_handle->rf_spi_timeout == NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <rf_initialize_radio+0x20>
		rf_handle->rf_spi_timeout = 100;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2264      	movs	r2, #100	@ 0x64
 8001712:	605a      	str	r2, [r3, #4]

	if (rf_handle->rf_module_identifier == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 3020 	ldrb.w	r3, [r3, #32]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d103      	bne.n	8001726 <rf_initialize_radio+0x32>
		rf_handle->rf_module_identifier = -1;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	22ff      	movs	r2, #255	@ 0xff
 8001722:	f883 2020 	strb.w	r2, [r3, #32]

	if (rf_handle->rf_carrier_frequency == NULL) {
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172a:	2b00      	cmp	r3, #0
 800172c:	d106      	bne.n	800173c <rf_initialize_radio+0x48>
		LOG_ERROR("Carrier Frequency not defined.");
 800172e:	223d      	movs	r2, #61	@ 0x3d
 8001730:	495e      	ldr	r1, [pc, #376]	@ (80018ac <rf_initialize_radio+0x1b8>)
 8001732:	485f      	ldr	r0, [pc, #380]	@ (80018b0 <rf_initialize_radio+0x1bc>)
 8001734:	f009 f8ba 	bl	800a8ac <iprintf>
		return 0;
 8001738:	2300      	movs	r3, #0
 800173a:	e0b2      	b.n	80018a2 <rf_initialize_radio+0x1ae>
	}

	printf("\r\n");
 800173c:	485d      	ldr	r0, [pc, #372]	@ (80018b4 <rf_initialize_radio+0x1c0>)
 800173e:	f009 f91d 	bl	800a97c <puts>

	LOG_INFO(SETFG_GREEN "Initializing module" GR_RESET,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001748:	4619      	mov	r1, r3
 800174a:	485b      	ldr	r0, [pc, #364]	@ (80018b8 <rf_initialize_radio+0x1c4>)
 800174c:	f009 f8ae 	bl	800a8ac <iprintf>
			rf_handle->rf_module_identifier);

	rf_reset(rf_handle);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 fb75 	bl	8001e40 <rf_reset>

// check version
	uint8_t version;
	if (!rf_spi_read_register(rf_handle, RegVersion, &version)) {
 8001756:	f107 0317 	add.w	r3, r7, #23
 800175a:	461a      	mov	r2, r3
 800175c:	2142      	movs	r1, #66	@ 0x42
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 fae0 	bl	8001d24 <rf_spi_read_register>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d106      	bne.n	8001778 <rf_initialize_radio+0x84>
		LOG_ERROR("Module did not return a version; SPI Error");
 800176a:	224b      	movs	r2, #75	@ 0x4b
 800176c:	494f      	ldr	r1, [pc, #316]	@ (80018ac <rf_initialize_radio+0x1b8>)
 800176e:	4853      	ldr	r0, [pc, #332]	@ (80018bc <rf_initialize_radio+0x1c8>)
 8001770:	f009 f89c 	bl	800a8ac <iprintf>
		return 0;
 8001774:	2300      	movs	r3, #0
 8001776:	e094      	b.n	80018a2 <rf_initialize_radio+0x1ae>
	}

	if (RFM9x_VER != version) {
 8001778:	7dfb      	ldrb	r3, [r7, #23]
 800177a:	2b12      	cmp	r3, #18
 800177c:	d006      	beq.n	800178c <rf_initialize_radio+0x98>
		LOG_ERROR("Module did not return the correct version");
 800177e:	2250      	movs	r2, #80	@ 0x50
 8001780:	494a      	ldr	r1, [pc, #296]	@ (80018ac <rf_initialize_radio+0x1b8>)
 8001782:	484f      	ldr	r0, [pc, #316]	@ (80018c0 <rf_initialize_radio+0x1cc>)
 8001784:	f009 f892 	bl	800a8ac <iprintf>
		return 0;
 8001788:	2300      	movs	r3, #0
 800178a:	e08a      	b.n	80018a2 <rf_initialize_radio+0x1ae>
	}

	LOG_INFO("Module Available; \x1b[34;1;4mVersion: 0x%x\x1b[0m", version);
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	4619      	mov	r1, r3
 8001790:	484c      	ldr	r0, [pc, #304]	@ (80018c4 <rf_initialize_radio+0x1d0>)
 8001792:	f009 f88b 	bl	800a8ac <iprintf>

// Module must be placed in sleep mode before switching to lora.
	rf_register_op_mode_config_t opmode = { 0 };
 8001796:	2300      	movs	r3, #0
 8001798:	753b      	strb	r3, [r7, #20]
	opmode.long_range_mode = 1;
 800179a:	7d3b      	ldrb	r3, [r7, #20]
 800179c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017a0:	753b      	strb	r3, [r7, #20]
	opmode.mode = RF_OP_MODE_SLEEP;
 80017a2:	7d3b      	ldrb	r3, [r7, #20]
 80017a4:	f36f 0302 	bfc	r3, #0, #3
 80017a8:	753b      	strb	r3, [r7, #20]
	if (!rf_spi_write_register(rf_handle, RegOpMode, opmode.op_mode))
 80017aa:	7d3b      	ldrb	r3, [r7, #20]
 80017ac:	461a      	mov	r2, r3
 80017ae:	2101      	movs	r1, #1
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 fb05 	bl	8001dc0 <rf_spi_write_register>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <rf_initialize_radio+0xcc>
		return 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	e070      	b.n	80018a2 <rf_initialize_radio+0x1ae>
//	rf_register_dio_mapping_2_config_t diomapping2 = { 0 };
//	if (!rf_spi_write_register(rf_handle, RegDioMapping2,
//			diomapping2.dio_mapping_2))
//		return 0;

	if (rf_handle->rf_post_init_clbk != NULL) {
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <rf_initialize_radio+0xda>
		rf_handle->rf_post_init_clbk();
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4798      	blx	r3
	}

// Set up TX and RX FIFO base addresses.
	if (!rf_spi_write_register(rf_handle, RegFifoTxBaseAddr, 0x00)) // previously 0x80
 80017ce:	2200      	movs	r2, #0
 80017d0:	210e      	movs	r1, #14
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 faf4 	bl	8001dc0 <rf_spi_write_register>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <rf_initialize_radio+0xee>
		return 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	e05f      	b.n	80018a2 <rf_initialize_radio+0x1ae>
	if (!rf_spi_write_register(rf_handle, RegFifoRxBaseAddr, 0x00))
 80017e2:	2200      	movs	r2, #0
 80017e4:	210f      	movs	r1, #15
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 faea 	bl	8001dc0 <rf_spi_write_register>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <rf_initialize_radio+0x102>
		return 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e055      	b.n	80018a2 <rf_initialize_radio+0x1ae>

// Maximum payload length of the RFM95 is 64.
	if (!rf_spi_write_register(rf_handle, RegMaxPayloadLength, 64))
 80017f6:	2240      	movs	r2, #64	@ 0x40
 80017f8:	2123      	movs	r1, #35	@ 0x23
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 fae0 	bl	8001dc0 <rf_spi_write_register>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <rf_initialize_radio+0x116>
		return 0;
 8001806:	2300      	movs	r3, #0
 8001808:	e04b      	b.n	80018a2 <rf_initialize_radio+0x1ae>

// make sure this is defined
	rf_set_frequency(rf_handle, rf_handle->rf_carrier_frequency);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180e:	4619      	mov	r1, r3
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f9b9 	bl	8001b88 <rf_set_frequency>

// Set LNA to the highest gain with 150% boost.
	rf_register_lna_config_t lnaboost = { 0 };
 8001816:	2300      	movs	r3, #0
 8001818:	743b      	strb	r3, [r7, #16]
	if (!rf_spi_read_register(rf_handle, RegLna, &lnaboost.lna_config))
 800181a:	f107 0310 	add.w	r3, r7, #16
 800181e:	461a      	mov	r2, r3
 8001820:	210c      	movs	r1, #12
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 fa7e 	bl	8001d24 <rf_spi_read_register>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <rf_initialize_radio+0x13e>
		return 0;
 800182e:	2300      	movs	r3, #0
 8001830:	e037      	b.n	80018a2 <rf_initialize_radio+0x1ae>
	lnaboost.LnaBoostHf = 0b11;
 8001832:	7c3b      	ldrb	r3, [r7, #16]
 8001834:	f043 0303 	orr.w	r3, r3, #3
 8001838:	743b      	strb	r3, [r7, #16]
	if (!rf_spi_write_register(rf_handle, RegLna, lnaboost.lna_config))
 800183a:	7c3b      	ldrb	r3, [r7, #16]
 800183c:	461a      	mov	r2, r3
 800183e:	210c      	movs	r1, #12
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 fabd 	bl	8001dc0 <rf_spi_write_register>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <rf_initialize_radio+0x15c>
		return 0;
 800184c:	2300      	movs	r3, #0
 800184e:	e028      	b.n	80018a2 <rf_initialize_radio+0x1ae>

// Set auto AGC
	rf_register_modem_config_3_t autoagc = { 0 };
 8001850:	2300      	movs	r3, #0
 8001852:	733b      	strb	r3, [r7, #12]
	autoagc.agc_auto_on = 1;
 8001854:	7b3b      	ldrb	r3, [r7, #12]
 8001856:	f043 0304 	orr.w	r3, r3, #4
 800185a:	733b      	strb	r3, [r7, #12]
	if (!rf_spi_write_register(rf_handle, RegModemConfig3,
 800185c:	7b3b      	ldrb	r3, [r7, #12]
 800185e:	461a      	mov	r2, r3
 8001860:	2126      	movs	r1, #38	@ 0x26
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 faac 	bl	8001dc0 <rf_spi_write_register>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <rf_initialize_radio+0x17e>
			autoagc.modem_config_3))
		return 0;
 800186e:	2300      	movs	r3, #0
 8001870:	e017      	b.n	80018a2 <rf_initialize_radio+0x1ae>

// Set module power to 17dbm.
	if (!rf_set_tx_power(rf_handle, 10))
 8001872:	210a      	movs	r1, #10
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f9d9 	bl	8001c2c <rf_set_tx_power>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <rf_initialize_radio+0x190>
		return 0;
 8001880:	2300      	movs	r3, #0
 8001882:	e00e      	b.n	80018a2 <rf_initialize_radio+0x1ae>
//	idle.long_range_mode = 1;
//	idle.mode = RF_OP_MODE_STDBY;
//	if (!rf_spi_write_register(rf_handle, RegOpMode, idle.op_mode))
//		return 0;

	if (!rf_set_op_mode(rf_handle, RF_OP_MODE_STDBY)) {
 8001884:	2101      	movs	r1, #1
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff fee6 	bl	8001658 <rf_set_op_mode>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d106      	bne.n	80018a0 <rf_initialize_radio+0x1ac>
		LOG_ERROR("OP Mode Init error");
 8001892:	2295      	movs	r2, #149	@ 0x95
 8001894:	4905      	ldr	r1, [pc, #20]	@ (80018ac <rf_initialize_radio+0x1b8>)
 8001896:	480c      	ldr	r0, [pc, #48]	@ (80018c8 <rf_initialize_radio+0x1d4>)
 8001898:	f009 f808 	bl	800a8ac <iprintf>
		return 0;
 800189c:	2300      	movs	r3, #0
 800189e:	e000      	b.n	80018a2 <rf_initialize_radio+0x1ae>
	}

	return 1;
 80018a0:	2301      	movs	r3, #1
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	0800cab0 	.word	0x0800cab0
 80018b0:	0800cb0c 	.word	0x0800cb0c
 80018b4:	0800cb54 	.word	0x0800cb54
 80018b8:	0800cb58 	.word	0x0800cb58
 80018bc:	0800cb8c 	.word	0x0800cb8c
 80018c0:	0800cbe0 	.word	0x0800cbe0
 80018c4:	0800cc34 	.word	0x0800cc34
 80018c8:	0800cc78 	.word	0x0800cc78

080018cc <rf_send>:

int rf_send(rf_handle_t *rf_handle, uint8_t *buffer, uint8_t length_bytes) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08e      	sub	sp, #56	@ 0x38
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	4613      	mov	r3, r2
 80018d8:	71fb      	strb	r3, [r7, #7]

	rf_register_op_mode_config_t current_op_mode = { 0 };
 80018da:	2300      	movs	r3, #0
 80018dc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	if (!rf_spi_read_register(rf_handle, RegOpMode, &current_op_mode.op_mode))
 80018e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018e4:	461a      	mov	r2, r3
 80018e6:	2101      	movs	r1, #1
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 fa1b 	bl	8001d24 <rf_spi_read_register>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <rf_send+0x2c>
		return 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	e138      	b.n	8001b6a <rf_send+0x29e>

// check if in transmit mode.
	if (RF_OP_MODE_TX == current_op_mode.mode) {
 80018f8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b03      	cmp	r3, #3
 8001904:	d104      	bne.n	8001910 <rf_send+0x44>
		LOG_WARN("Module in TX unable to send.");
 8001906:	489b      	ldr	r0, [pc, #620]	@ (8001b74 <rf_send+0x2a8>)
 8001908:	f009 f838 	bl	800a97c <puts>
		return 0;
 800190c:	2300      	movs	r3, #0
 800190e:	e12c      	b.n	8001b6a <rf_send+0x29e>
	}
// here, since the module is not transmitting lets clear the inturrpt flags for tx done.
	rf_register_irq_flags_t irq_flags = { 0 };
 8001910:	2300      	movs	r3, #0
 8001912:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	if (!rf_spi_read_register(rf_handle, RegIrqFlags, &irq_flags.irq_flags))
 8001916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800191a:	461a      	mov	r2, r3
 800191c:	2112      	movs	r1, #18
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 fa00 	bl	8001d24 <rf_spi_read_register>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <rf_send+0x62>
		return 0;
 800192a:	2300      	movs	r3, #0
 800192c:	e11d      	b.n	8001b6a <rf_send+0x29e>
// if the flag is still set
	if (irq_flags.tx_done) {
 800192e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d014      	beq.n	8001966 <rf_send+0x9a>
		// then clear it.
		irq_flags.irq_flags = 0b0; // first set all else to 0
 800193c:	2300      	movs	r3, #0
 800193e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		irq_flags.tx_done = 1;
 8001942:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001946:	f043 0308 	orr.w	r3, r3, #8
 800194a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		if (!rf_spi_write_register(rf_handle, RegIrqFlags, irq_flags.irq_flags))
 800194e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001952:	461a      	mov	r2, r3
 8001954:	2112      	movs	r1, #18
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 fa32 	bl	8001dc0 <rf_spi_write_register>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <rf_send+0x9a>
			return 0;
 8001962:	2300      	movs	r3, #0
 8001964:	e101      	b.n	8001b6a <rf_send+0x29e>
	}

// put in idle lora
	rf_register_op_mode_config_t idle_op_mode = { 0 };
 8001966:	2300      	movs	r3, #0
 8001968:	f887 3020 	strb.w	r3, [r7, #32]
	idle_op_mode.long_range_mode = 1;
 800196c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001974:	f887 3020 	strb.w	r3, [r7, #32]
	idle_op_mode.mode = RF_OP_MODE_STDBY;
 8001978:	f897 3020 	ldrb.w	r3, [r7, #32]
 800197c:	2201      	movs	r2, #1
 800197e:	f362 0302 	bfi	r3, r2, #0, #3
 8001982:	f887 3020 	strb.w	r3, [r7, #32]
	if (!rf_spi_write_register(rf_handle, RegOpMode, idle_op_mode.op_mode))
 8001986:	f897 3020 	ldrb.w	r3, [r7, #32]
 800198a:	461a      	mov	r2, r3
 800198c:	2101      	movs	r1, #1
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 fa16 	bl	8001dc0 <rf_spi_write_register>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <rf_send+0xd2>
		return 0;
 800199a:	2300      	movs	r3, #0
 800199c:	e0e5      	b.n	8001b6a <rf_send+0x29e>

// TODO: add a global that configures the implicit or explicit header mode.

	rf_register_modem_config_1_t modem_config_1 = { 0 };
 800199e:	2300      	movs	r3, #0
 80019a0:	773b      	strb	r3, [r7, #28]
	if (!rf_spi_read_register(rf_handle, RegModemConfig1,
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	461a      	mov	r2, r3
 80019a8:	211d      	movs	r1, #29
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 f9ba 	bl	8001d24 <rf_spi_read_register>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <rf_send+0xee>
			&modem_config_1.modem_config_1))
		return 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e0d7      	b.n	8001b6a <rf_send+0x29e>

// Default to explicit header.
	modem_config_1.implicit_header_mode_on = 0;
 80019ba:	7f3b      	ldrb	r3, [r7, #28]
 80019bc:	f36f 0300 	bfc	r3, #0, #1
 80019c0:	773b      	strb	r3, [r7, #28]
	if (!rf_spi_write_register(rf_handle, RegModemConfig1,
 80019c2:	7f3b      	ldrb	r3, [r7, #28]
 80019c4:	461a      	mov	r2, r3
 80019c6:	211d      	movs	r1, #29
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 f9f9 	bl	8001dc0 <rf_spi_write_register>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <rf_send+0x10c>
			modem_config_1.modem_config_1))
		return 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	e0c8      	b.n	8001b6a <rf_send+0x29e>

// Reset fifo address and payload length

	if (!rf_spi_write_register(rf_handle, RegFifoAddrPtr, 0))
 80019d8:	2200      	movs	r2, #0
 80019da:	210d      	movs	r1, #13
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f000 f9ef 	bl	8001dc0 <rf_spi_write_register>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <rf_send+0x120>
		return 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e0be      	b.n	8001b6a <rf_send+0x29e>

	if (!rf_spi_write_register(rf_handle, RegPayloadLength, 0)) // set to 0 for now.
 80019ec:	2200      	movs	r2, #0
 80019ee:	2122      	movs	r1, #34	@ 0x22
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 f9e5 	bl	8001dc0 <rf_spi_write_register>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <rf_send+0x134>
		return 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e0b4      	b.n	8001b6a <rf_send+0x29e>

// add data

// check size TODO: optimize this since it is constant.
	uint8_t max_payload_length = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	76fb      	strb	r3, [r7, #27]
	if (!rf_spi_read_register(rf_handle, RegMaxPayloadLength,
 8001a04:	f107 031b 	add.w	r3, r7, #27
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2123      	movs	r1, #35	@ 0x23
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f000 f989 	bl	8001d24 <rf_spi_read_register>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <rf_send+0x150>
			&max_payload_length))
		return 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	e0a6      	b.n	8001b6a <rf_send+0x29e>

	if (max_payload_length < length_bytes) {
 8001a1c:	7efb      	ldrb	r3, [r7, #27]
 8001a1e:	79fa      	ldrb	r2, [r7, #7]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d909      	bls.n	8001a38 <rf_send+0x16c>
		printf(
				"\x1b[31;4;3;1m[Abi's RFlib] [%d] [ERROR] Max payload length exceeded with %d; max is %d.\x1b[0m\r\n",
				rf_handle->rf_module_identifier, max_payload_length,
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f893 3020 	ldrb.w	r3, [r3, #32]
		printf(
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	7efb      	ldrb	r3, [r7, #27]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	4851      	ldr	r0, [pc, #324]	@ (8001b78 <rf_send+0x2ac>)
 8001a34:	f008 ff3a 	bl	800a8ac <iprintf>
				length_bytes);
	}

	uint8_t current_payload_length = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	76bb      	strb	r3, [r7, #26]
	if (!rf_spi_read_register(rf_handle, RegPayloadLength,
 8001a3c:	f107 031a 	add.w	r3, r7, #26
 8001a40:	461a      	mov	r2, r3
 8001a42:	2122      	movs	r1, #34	@ 0x22
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f000 f96d 	bl	8001d24 <rf_spi_read_register>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <rf_send+0x188>
			&current_payload_length))
		return 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	e08a      	b.n	8001b6a <rf_send+0x29e>

// never should happen cuz we reset the payload length above
	if (current_payload_length + length_bytes > max_payload_length) {
 8001a54:	7ebb      	ldrb	r3, [r7, #26]
 8001a56:	461a      	mov	r2, r3
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	7efa      	ldrb	r2, [r7, #27]
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	dd0d      	ble.n	8001a7e <rf_send+0x1b2>
		printf(
				"\x1b[31;4;3;1m[Abi's RFlib] [%d] [ERROR] Old buffer not clear and adding current bytes exceeds max payload %d, prev %d, new %d.\x1b[0m\r\n",
				rf_handle->rf_module_identifier, max_payload_length,
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f893 3020 	ldrb.w	r3, [r3, #32]
		printf(
 8001a68:	4619      	mov	r1, r3
 8001a6a:	7efb      	ldrb	r3, [r7, #27]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	7ebb      	ldrb	r3, [r7, #26]
 8001a70:	4618      	mov	r0, r3
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	4603      	mov	r3, r0
 8001a78:	4840      	ldr	r0, [pc, #256]	@ (8001b7c <rf_send+0x2b0>)
 8001a7a:	f008 ff17 	bl	800a8ac <iprintf>
				current_payload_length, length_bytes);
	}

// fill fifo
// write data to module
	for (int i = 0; i < length_bytes; i++) {
 8001a7e:	2300      	movs	r3, #0
 8001a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a82:	e015      	b.n	8001ab0 <rf_send+0x1e4>
		if (!rf_spi_write_register(rf_handle, RegFifo, buffer[i])) {
 8001a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	4413      	add	r3, r2
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	2100      	movs	r1, #0
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 f995 	bl	8001dc0 <rf_spi_write_register>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d106      	bne.n	8001aaa <rf_send+0x1de>
			LOG_ERROR("FIFO Write ERROR");
 8001a9c:	22f0      	movs	r2, #240	@ 0xf0
 8001a9e:	4938      	ldr	r1, [pc, #224]	@ (8001b80 <rf_send+0x2b4>)
 8001aa0:	4838      	ldr	r0, [pc, #224]	@ (8001b84 <rf_send+0x2b8>)
 8001aa2:	f008 ff03 	bl	800a8ac <iprintf>
			return 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e05f      	b.n	8001b6a <rf_send+0x29e>
	for (int i = 0; i < length_bytes; i++) {
 8001aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aac:	3301      	adds	r3, #1
 8001aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dbe5      	blt.n	8001a84 <rf_send+0x1b8>
		}
	}

// update the payload length
	if (!rf_spi_write_register(rf_handle, RegPayloadLength, length_bytes))
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	461a      	mov	r2, r3
 8001abc:	2122      	movs	r1, #34	@ 0x22
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 f97e 	bl	8001dc0 <rf_spi_write_register>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <rf_send+0x202>
		return 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e04d      	b.n	8001b6a <rf_send+0x29e>

// end packet and send
	rf_register_dio_mapping_1_config_t dio_mapping_1 = { 0 };
 8001ace:	2300      	movs	r3, #0
 8001ad0:	763b      	strb	r3, [r7, #24]

// TODO: use dio0 inturrupt

// put in tx mode
	rf_register_op_mode_config_t tx_mode_config = { 0 };
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	753b      	strb	r3, [r7, #20]
	tx_mode_config.long_range_mode = 1;
 8001ad6:	7d3b      	ldrb	r3, [r7, #20]
 8001ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001adc:	753b      	strb	r3, [r7, #20]
	tx_mode_config.mode = RF_OP_MODE_TX;
 8001ade:	7d3b      	ldrb	r3, [r7, #20]
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	f362 0302 	bfi	r3, r2, #0, #3
 8001ae6:	753b      	strb	r3, [r7, #20]

	if (!rf_spi_write_register(rf_handle, RegOpMode, tx_mode_config.op_mode))
 8001ae8:	7d3b      	ldrb	r3, [r7, #20]
 8001aea:	461a      	mov	r2, r3
 8001aec:	2101      	movs	r1, #1
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 f966 	bl	8001dc0 <rf_spi_write_register>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <rf_send+0x232>
		return 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e035      	b.n	8001b6a <rf_send+0x29e>

// Blocking

	rf_register_irq_flags_t tx_done_flags = { 0 };
 8001afe:	2300      	movs	r3, #0
 8001b00:	743b      	strb	r3, [r7, #16]
	if (!rf_spi_read_register(rf_handle, RegIrqFlags, &tx_done_flags.irq_flags))
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	461a      	mov	r2, r3
 8001b08:	2112      	movs	r1, #18
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 f90a 	bl	8001d24 <rf_spi_read_register>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d111      	bne.n	8001b3a <rf_send+0x26e>
		return 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e027      	b.n	8001b6a <rf_send+0x29e>

	while (!tx_done_flags.tx_done) {
		rf_handle->rf_delay_func(10);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	200a      	movs	r0, #10
 8001b20:	4798      	blx	r3
		if (!rf_spi_read_register(rf_handle, RegIrqFlags,
 8001b22:	f107 0310 	add.w	r3, r7, #16
 8001b26:	461a      	mov	r2, r3
 8001b28:	2112      	movs	r1, #18
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f8fa 	bl	8001d24 <rf_spi_read_register>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <rf_send+0x26e>
				&tx_done_flags.irq_flags))
			return 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e017      	b.n	8001b6a <rf_send+0x29e>
	while (!tx_done_flags.tx_done) {
 8001b3a:	7c3b      	ldrb	r3, [r7, #16]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0e9      	beq.n	8001b1a <rf_send+0x24e>
	}

// done sending
// clear flags
	tx_done_flags.irq_flags = 0; // 0 out the rest
 8001b46:	2300      	movs	r3, #0
 8001b48:	743b      	strb	r3, [r7, #16]
	tx_done_flags.tx_done = 1;	 // set the tx done bit to clear.
 8001b4a:	7c3b      	ldrb	r3, [r7, #16]
 8001b4c:	f043 0308 	orr.w	r3, r3, #8
 8001b50:	743b      	strb	r3, [r7, #16]

// clear the tx done flag for next packet.
	if (!rf_spi_write_register(rf_handle, RegIrqFlags, tx_done_flags.irq_flags))
 8001b52:	7c3b      	ldrb	r3, [r7, #16]
 8001b54:	461a      	mov	r2, r3
 8001b56:	2112      	movs	r1, #18
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 f931 	bl	8001dc0 <rf_spi_write_register>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <rf_send+0x29c>
		return 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	e000      	b.n	8001b6a <rf_send+0x29e>

	return 1;
 8001b68:	2301      	movs	r3, #1
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3730      	adds	r7, #48	@ 0x30
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	0800ccb4 	.word	0x0800ccb4
 8001b78:	0800ccf0 	.word	0x0800ccf0
 8001b7c:	0800cd4c 	.word	0x0800cd4c
 8001b80:	0800cab0 	.word	0x0800cab0
 8001b84:	0800cdd0 	.word	0x0800cdd0

08001b88 <rf_set_frequency>:

int rf_set_frequency(rf_handle_t *rf_handle, uint32_t rf_carrier_frequency) {
 8001b88:	b5b0      	push	{r4, r5, r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]

// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t) rf_carrier_frequency << 19) / 32000000;
 8001b92:	6839      	ldr	r1, [r7, #0]
 8001b94:	2000      	movs	r0, #0
 8001b96:	460a      	mov	r2, r1
 8001b98:	4603      	mov	r3, r0
 8001b9a:	0b55      	lsrs	r5, r2, #13
 8001b9c:	04d4      	lsls	r4, r2, #19
 8001b9e:	4a22      	ldr	r2, [pc, #136]	@ (8001c28 <rf_set_frequency+0xa0>)
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	f7fe fffe 	bl	8000ba8 <__aeabi_uldivmod>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!rf_spi_write_register(rf_handle, RegFrfMsb, (uint8_t) (frf >> 16)))
 8001bb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	0c02      	lsrs	r2, r0, #16
 8001bc2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001bc6:	0c0b      	lsrs	r3, r1, #16
 8001bc8:	b2d3      	uxtb	r3, r2
 8001bca:	461a      	mov	r2, r3
 8001bcc:	2106      	movs	r1, #6
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f8f6 	bl	8001dc0 <rf_spi_write_register>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <rf_set_frequency+0x56>
		return 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e020      	b.n	8001c20 <rf_set_frequency+0x98>
	if (!rf_spi_write_register(rf_handle, RegFrfMid, (uint8_t) (frf >> 8)))
 8001bde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	0a02      	lsrs	r2, r0, #8
 8001bec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001bf0:	0a0b      	lsrs	r3, r1, #8
 8001bf2:	b2d3      	uxtb	r3, r2
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	2107      	movs	r1, #7
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f8e1 	bl	8001dc0 <rf_spi_write_register>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <rf_set_frequency+0x80>
		return 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	e00b      	b.n	8001c20 <rf_set_frequency+0x98>
	if (!rf_spi_write_register(rf_handle, RegFrfLsb, (uint8_t) (frf >> 0)))
 8001c08:	7a3b      	ldrb	r3, [r7, #8]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	2108      	movs	r1, #8
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f8d6 	bl	8001dc0 <rf_spi_write_register>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <rf_set_frequency+0x96>
		return 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e000      	b.n	8001c20 <rf_set_frequency+0x98>

	return 1;
 8001c1e:	2301      	movs	r3, #1
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bdb0      	pop	{r4, r5, r7, pc}
 8001c28:	01e84800 	.word	0x01e84800

08001c2c <rf_set_tx_power>:

int rf_set_tx_power(rf_handle_t *rf_handle, uint8_t rf_power_dbm) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	70fb      	strb	r3, [r7, #3]

	if (!((rf_power_dbm >= 2 && rf_power_dbm <= 17) || (rf_power_dbm == 20))) {
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d902      	bls.n	8001c44 <rf_set_tx_power+0x18>
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	2b11      	cmp	r3, #17
 8001c42:	d90b      	bls.n	8001c5c <rf_set_tx_power+0x30>
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	2b14      	cmp	r3, #20
 8001c48:	d008      	beq.n	8001c5c <rf_set_tx_power+0x30>

		LOG_ERROR("Unable to set power to %d out of range.", rf_power_dbm);
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8001c50:	4930      	ldr	r1, [pc, #192]	@ (8001d14 <rf_set_tx_power+0xe8>)
 8001c52:	4831      	ldr	r0, [pc, #196]	@ (8001d18 <rf_set_tx_power+0xec>)
 8001c54:	f008 fe2a 	bl	800a8ac <iprintf>
		return 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	e057      	b.n	8001d0c <rf_set_tx_power+0xe0>
	}

	rf_register_pa_config_t reg_pa_config;
	uint8_t reg_pa_dac_config = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]

	if (rf_power_dbm >= 2 || rf_power_dbm <= 17) {
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d802      	bhi.n	8001c6c <rf_set_tx_power+0x40>
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	2b11      	cmp	r3, #17
 8001c6a:	d814      	bhi.n	8001c96 <rf_set_tx_power+0x6a>
		reg_pa_config.max_power = 7;
 8001c6c:	7b3b      	ldrb	r3, [r7, #12]
 8001c6e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001c72:	733b      	strb	r3, [r7, #12]
		reg_pa_config.pa_select = 1;
 8001c74:	7b3b      	ldrb	r3, [r7, #12]
 8001c76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c7a:	733b      	strb	r3, [r7, #12]
		reg_pa_config.output_power = (rf_power_dbm - 2);
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	3b02      	subs	r3, #2
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	7b3b      	ldrb	r3, [r7, #12]
 8001c8a:	f362 0303 	bfi	r3, r2, #0, #4
 8001c8e:	733b      	strb	r3, [r7, #12]
		reg_pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 8001c90:	2384      	movs	r3, #132	@ 0x84
 8001c92:	73fb      	strb	r3, [r7, #15]
 8001c94:	e010      	b.n	8001cb8 <rf_set_tx_power+0x8c>
	} else if (rf_power_dbm == 20) {
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	2b14      	cmp	r3, #20
 8001c9a:	d10d      	bne.n	8001cb8 <rf_set_tx_power+0x8c>
		reg_pa_config.max_power = 7;
 8001c9c:	7b3b      	ldrb	r3, [r7, #12]
 8001c9e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001ca2:	733b      	strb	r3, [r7, #12]
		reg_pa_config.pa_select = 1;
 8001ca4:	7b3b      	ldrb	r3, [r7, #12]
 8001ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001caa:	733b      	strb	r3, [r7, #12]
		reg_pa_config.output_power = 15;
 8001cac:	7b3b      	ldrb	r3, [r7, #12]
 8001cae:	f043 030f 	orr.w	r3, r3, #15
 8001cb2:	733b      	strb	r3, [r7, #12]
		reg_pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8001cb4:	2387      	movs	r3, #135	@ 0x87
 8001cb6:	73fb      	strb	r3, [r7, #15]
	}

	if (!rf_spi_write_register(rf_handle, RegPaConfig,
 8001cb8:	7b3b      	ldrb	r3, [r7, #12]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	2109      	movs	r1, #9
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f87e 	bl	8001dc0 <rf_spi_write_register>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d108      	bne.n	8001cdc <rf_set_tx_power+0xb0>
			reg_pa_config.pa_config)) {

		LOG_ERROR("Unable to set power to %d SPI write error.", rf_power_dbm);
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 8001cd0:	4910      	ldr	r1, [pc, #64]	@ (8001d14 <rf_set_tx_power+0xe8>)
 8001cd2:	4812      	ldr	r0, [pc, #72]	@ (8001d1c <rf_set_tx_power+0xf0>)
 8001cd4:	f008 fdea 	bl	800a8ac <iprintf>
		return 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e017      	b.n	8001d0c <rf_set_tx_power+0xe0>
	}
	if (!rf_spi_write_register(rf_handle, RegPaDac, reg_pa_dac_config)) {
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	214d      	movs	r1, #77	@ 0x4d
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f86c 	bl	8001dc0 <rf_spi_write_register>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d108      	bne.n	8001d00 <rf_set_tx_power+0xd4>

		LOG_ERROR("Unable to set power to %d SPI write error.", rf_power_dbm);
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	f240 124d 	movw	r2, #333	@ 0x14d
 8001cf4:	4907      	ldr	r1, [pc, #28]	@ (8001d14 <rf_set_tx_power+0xe8>)
 8001cf6:	4809      	ldr	r0, [pc, #36]	@ (8001d1c <rf_set_tx_power+0xf0>)
 8001cf8:	f008 fdd8 	bl	800a8ac <iprintf>
		return 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	e005      	b.n	8001d0c <rf_set_tx_power+0xe0>
	}

	LOG_INFO("Set power to %d.", rf_power_dbm);
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	4619      	mov	r1, r3
 8001d04:	4806      	ldr	r0, [pc, #24]	@ (8001d20 <rf_set_tx_power+0xf4>)
 8001d06:	f008 fdd1 	bl	800a8ac <iprintf>

	return 1;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	0800cab0 	.word	0x0800cab0
 8001d18:	0800ce0c 	.word	0x0800ce0c
 8001d1c:	0800ce60 	.word	0x0800ce60
 8001d20:	0800ceb4 	.word	0x0800ceb4

08001d24 <rf_spi_read_register>:

	return 1;
}

int rf_spi_read_register(rf_handle_t *rf_handle, uint8_t rf_register_address,
		uint8_t *rf_register_result) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	72fb      	strb	r3, [r7, #11]

// 0 the MSB since that is the wnr bit. we are reading so it must be 0.
	uint8_t prep_register = rf_register_address & 0x7f;
 8001d32:	7afb      	ldrb	r3, [r7, #11]
 8001d34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(rf_handle->rf_nss_port, rf_handle->rf_nss_pin,
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6898      	ldr	r0, [r3, #8]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	899b      	ldrh	r3, [r3, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	4619      	mov	r1, r3
 8001d48:	f001 fb8c 	bl	8003464 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	if (HAL_SPI_Transmit(rf_handle->rf_spi_handle, &prep_register, 1,
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f107 0117 	add.w	r1, r7, #23
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f002 fe54 	bl	8004a06 <HAL_SPI_Transmit>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <rf_spi_read_register+0x52>
			rf_handle->rf_spi_timeout) != HAL_OK) {
		LOG_ERROR("Failed to read register 0x%x", rf_register_address);
 8001d64:	7afb      	ldrb	r3, [r7, #11]
 8001d66:	f44f 72b3 	mov.w	r2, #358	@ 0x166
 8001d6a:	4913      	ldr	r1, [pc, #76]	@ (8001db8 <rf_spi_read_register+0x94>)
 8001d6c:	4813      	ldr	r0, [pc, #76]	@ (8001dbc <rf_spi_read_register+0x98>)
 8001d6e:	f008 fd9d 	bl	800a8ac <iprintf>
		return 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e01c      	b.n	8001db0 <rf_spi_read_register+0x8c>
	}

	if (HAL_SPI_Receive(rf_handle->rf_spi_handle, rf_register_result, 1,
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	f002 ffb6 	bl	8004cf2 <HAL_SPI_Receive>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <rf_spi_read_register+0x7a>
			rf_handle->rf_spi_timeout) != HAL_OK) {
		LOG_ERROR("Failed to read register 0x%x", rf_register_address);
 8001d8c:	7afb      	ldrb	r3, [r7, #11]
 8001d8e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8001d92:	4909      	ldr	r1, [pc, #36]	@ (8001db8 <rf_spi_read_register+0x94>)
 8001d94:	4809      	ldr	r0, [pc, #36]	@ (8001dbc <rf_spi_read_register+0x98>)
 8001d96:	f008 fd89 	bl	800a8ac <iprintf>
		return 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e008      	b.n	8001db0 <rf_spi_read_register+0x8c>
	}

	HAL_GPIO_WritePin(rf_handle->rf_nss_port, rf_handle->rf_nss_pin,
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6898      	ldr	r0, [r3, #8]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	899b      	ldrh	r3, [r3, #12]
 8001da6:	2201      	movs	r2, #1
 8001da8:	4619      	mov	r1, r3
 8001daa:	f001 fb5b 	bl	8003464 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	return 1;
 8001dae:	2301      	movs	r3, #1
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	0800cab0 	.word	0x0800cab0
 8001dbc:	0800cedc 	.word	0x0800cedc

08001dc0 <rf_spi_write_register>:

int rf_spi_write_register(rf_handle_t *rf_handle, uint8_t rf_register_address,
		uint8_t rf_register_value) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	70fb      	strb	r3, [r7, #3]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	70bb      	strb	r3, [r7, #2]
// 1 the MSB since that is the wnr bit. we are writing so it must be 1.
	uint8_t prep_register_buffer[2] = { ((uint8_t) rf_register_address | 0x80u),
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	733b      	strb	r3, [r7, #12]
 8001dda:	78bb      	ldrb	r3, [r7, #2]
 8001ddc:	737b      	strb	r3, [r7, #13]
			rf_register_value };

	HAL_GPIO_WritePin(rf_handle->rf_nss_port, rf_handle->rf_nss_pin,
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6898      	ldr	r0, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	899b      	ldrh	r3, [r3, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	4619      	mov	r1, r3
 8001dea:	f001 fb3b 	bl	8003464 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	if (HAL_SPI_Transmit(rf_handle->rf_spi_handle, prep_register_buffer, 2,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f107 010c 	add.w	r1, r7, #12
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f002 fe03 	bl	8004a06 <HAL_SPI_Transmit>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00b      	beq.n	8001e1e <rf_spi_write_register+0x5e>
			rf_handle->rf_spi_timeout) != HAL_OK) {
		LOG_ERROR("Failed to set register 0x%x : 0x%x", rf_register_address,
 8001e06:	78fa      	ldrb	r2, [r7, #3]
 8001e08:	78bb      	ldrb	r3, [r7, #2]
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e12:	4909      	ldr	r1, [pc, #36]	@ (8001e38 <rf_spi_write_register+0x78>)
 8001e14:	4809      	ldr	r0, [pc, #36]	@ (8001e3c <rf_spi_write_register+0x7c>)
 8001e16:	f008 fd49 	bl	800a8ac <iprintf>
				rf_register_value);
		return 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e008      	b.n	8001e30 <rf_spi_write_register+0x70>
	}

	HAL_GPIO_WritePin(rf_handle->rf_nss_port, rf_handle->rf_nss_pin,
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6898      	ldr	r0, [r3, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	899b      	ldrh	r3, [r3, #12]
 8001e26:	2201      	movs	r2, #1
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f001 fb1b 	bl	8003464 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	return 1;
 8001e2e:	2301      	movs	r3, #1
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	0800cab0 	.word	0x0800cab0
 8001e3c:	0800cf24 	.word	0x0800cf24

08001e40 <rf_reset>:

int rf_reset(rf_handle_t *rf_handle) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

//	printf(
//			"\x1b[33;1;3;4m[Abi's RFlib] [%d] [WARN] : Reseting module\x1b[0m\r\n",
//			rf_handle->rf_module_identifier);

	LOG_WARN("Reseting module");
 8001e48:	480f      	ldr	r0, [pc, #60]	@ (8001e88 <rf_reset+0x48>)
 8001e4a:	f008 fd97 	bl	800a97c <puts>

	HAL_GPIO_WritePin(rf_handle->rf_nreset_port, rf_handle->rf_nreset_pin,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6918      	ldr	r0, [r3, #16]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	8a9b      	ldrh	r3, [r3, #20]
 8001e56:	2200      	movs	r2, #0
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f001 fb03 	bl	8003464 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	rf_handle->rf_delay_func(100);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	2064      	movs	r0, #100	@ 0x64
 8001e64:	4798      	blx	r3
	HAL_GPIO_WritePin(rf_handle->rf_nreset_port, rf_handle->rf_nreset_pin,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6918      	ldr	r0, [r3, #16]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	8a9b      	ldrh	r3, [r3, #20]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4619      	mov	r1, r3
 8001e72:	f001 faf7 	bl	8003464 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	rf_handle->rf_delay_func(100);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	2064      	movs	r0, #100	@ 0x64
 8001e7c:	4798      	blx	r3

	return 1;
 8001e7e:	2301      	movs	r3, #1
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	0800cf70 	.word	0x0800cf70

08001e8c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e90:	4b1b      	ldr	r3, [pc, #108]	@ (8001f00 <MX_SPI1_Init+0x74>)
 8001e92:	4a1c      	ldr	r2, [pc, #112]	@ (8001f04 <MX_SPI1_Init+0x78>)
 8001e94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e96:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <MX_SPI1_Init+0x74>)
 8001e98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e9e:	4b18      	ldr	r3, [pc, #96]	@ (8001f00 <MX_SPI1_Init+0x74>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ea4:	4b16      	ldr	r3, [pc, #88]	@ (8001f00 <MX_SPI1_Init+0x74>)
 8001ea6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001eaa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eac:	4b14      	ldr	r3, [pc, #80]	@ (8001f00 <MX_SPI1_Init+0x74>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <MX_SPI1_Init+0x74>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <MX_SPI1_Init+0x74>)
 8001eba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ebe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f00 <MX_SPI1_Init+0x74>)
 8001ec2:	2228      	movs	r2, #40	@ 0x28
 8001ec4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f00 <MX_SPI1_Init+0x74>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <MX_SPI1_Init+0x74>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <MX_SPI1_Init+0x74>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	@ (8001f00 <MX_SPI1_Init+0x74>)
 8001eda:	2207      	movs	r2, #7
 8001edc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ede:	4b08      	ldr	r3, [pc, #32]	@ (8001f00 <MX_SPI1_Init+0x74>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <MX_SPI1_Init+0x74>)
 8001ee6:	2208      	movs	r2, #8
 8001ee8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001eea:	4805      	ldr	r0, [pc, #20]	@ (8001f00 <MX_SPI1_Init+0x74>)
 8001eec:	f002 fce8 	bl	80048c0 <HAL_SPI_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001ef6:	f7ff fb6b 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2000078c 	.word	0x2000078c
 8001f04:	40013000 	.word	0x40013000

08001f08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	@ 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a17      	ldr	r2, [pc, #92]	@ (8001f84 <HAL_SPI_MspInit+0x7c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d128      	bne.n	8001f7c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f2a:	4b17      	ldr	r3, [pc, #92]	@ (8001f88 <HAL_SPI_MspInit+0x80>)
 8001f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f2e:	4a16      	ldr	r2, [pc, #88]	@ (8001f88 <HAL_SPI_MspInit+0x80>)
 8001f30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f34:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f36:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <HAL_SPI_MspInit+0x80>)
 8001f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b11      	ldr	r3, [pc, #68]	@ (8001f88 <HAL_SPI_MspInit+0x80>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f46:	4a10      	ldr	r2, [pc, #64]	@ (8001f88 <HAL_SPI_MspInit+0x80>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <HAL_SPI_MspInit+0x80>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f5a:	23e0      	movs	r3, #224	@ 0xe0
 8001f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f66:	2303      	movs	r3, #3
 8001f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	4619      	mov	r1, r3
 8001f74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f78:	f001 f90a 	bl	8003190 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	3728      	adds	r7, #40	@ 0x28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40013000 	.word	0x40013000
 8001f88:	40021000 	.word	0x40021000

08001f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f92:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <HAL_MspInit+0x4c>)
 8001f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f96:	4a10      	ldr	r2, [pc, #64]	@ (8001fd8 <HAL_MspInit+0x4c>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <HAL_MspInit+0x4c>)
 8001fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <HAL_MspInit+0x4c>)
 8001fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fae:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd8 <HAL_MspInit+0x4c>)
 8001fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fb6:	4b08      	ldr	r3, [pc, #32]	@ (8001fd8 <HAL_MspInit+0x4c>)
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	210f      	movs	r1, #15
 8001fc6:	f06f 0001 	mvn.w	r0, #1
 8001fca:	f001 f8b7 	bl	800313c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000

08001fdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	@ 0x30
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001fea:	4b2e      	ldr	r3, [pc, #184]	@ (80020a4 <HAL_InitTick+0xc8>)
 8001fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fee:	4a2d      	ldr	r2, [pc, #180]	@ (80020a4 <HAL_InitTick+0xc8>)
 8001ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ff4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ff6:	4b2b      	ldr	r3, [pc, #172]	@ (80020a4 <HAL_InitTick+0xc8>)
 8001ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002002:	f107 020c 	add.w	r2, r7, #12
 8002006:	f107 0310 	add.w	r3, r7, #16
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f002 f8b1 	bl	8004174 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002012:	f002 f899 	bl	8004148 <HAL_RCC_GetPCLK2Freq>
 8002016:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800201a:	4a23      	ldr	r2, [pc, #140]	@ (80020a8 <HAL_InitTick+0xcc>)
 800201c:	fba2 2303 	umull	r2, r3, r2, r3
 8002020:	0c9b      	lsrs	r3, r3, #18
 8002022:	3b01      	subs	r3, #1
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8002026:	4b21      	ldr	r3, [pc, #132]	@ (80020ac <HAL_InitTick+0xd0>)
 8002028:	4a21      	ldr	r2, [pc, #132]	@ (80020b0 <HAL_InitTick+0xd4>)
 800202a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800202c:	4b1f      	ldr	r3, [pc, #124]	@ (80020ac <HAL_InitTick+0xd0>)
 800202e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002032:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8002034:	4a1d      	ldr	r2, [pc, #116]	@ (80020ac <HAL_InitTick+0xd0>)
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 800203a:	4b1c      	ldr	r3, [pc, #112]	@ (80020ac <HAL_InitTick+0xd0>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002040:	4b1a      	ldr	r3, [pc, #104]	@ (80020ac <HAL_InitTick+0xd0>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002046:	4b19      	ldr	r3, [pc, #100]	@ (80020ac <HAL_InitTick+0xd0>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 800204c:	4817      	ldr	r0, [pc, #92]	@ (80020ac <HAL_InitTick+0xd0>)
 800204e:	f003 fb63 	bl	8005718 <HAL_TIM_Base_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002058:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800205c:	2b00      	cmp	r3, #0
 800205e:	d11b      	bne.n	8002098 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8002060:	4812      	ldr	r0, [pc, #72]	@ (80020ac <HAL_InitTick+0xd0>)
 8002062:	f003 fbb1 	bl	80057c8 <HAL_TIM_Base_Start_IT>
 8002066:	4603      	mov	r3, r0
 8002068:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800206c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002070:	2b00      	cmp	r3, #0
 8002072:	d111      	bne.n	8002098 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002074:	2019      	movs	r0, #25
 8002076:	f001 f87d 	bl	8003174 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b0f      	cmp	r3, #15
 800207e:	d808      	bhi.n	8002092 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002080:	2200      	movs	r2, #0
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	2019      	movs	r0, #25
 8002086:	f001 f859 	bl	800313c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800208a:	4a0a      	ldr	r2, [pc, #40]	@ (80020b4 <HAL_InitTick+0xd8>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	e002      	b.n	8002098 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002098:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800209c:	4618      	mov	r0, r3
 800209e:	3730      	adds	r7, #48	@ 0x30
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000
 80020a8:	431bde83 	.word	0x431bde83
 80020ac:	200007f0 	.word	0x200007f0
 80020b0:	40014400 	.word	0x40014400
 80020b4:	20000004 	.word	0x20000004

080020b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80020bc:	f002 f89c 	bl	80041f8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <NMI_Handler+0x8>

080020c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.Pin = LED_D3_PWM_Pin;
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	HAL_GPIO_Init(LED_D3_PWM_GPIO_Port, &GPIO_InitStruct);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <HardFault_Handler+0x4>

080020cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <MemManage_Handler+0x4>

080020d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <BusFault_Handler+0x4>

080020dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e0:	bf00      	nop
 80020e2:	e7fd      	b.n	80020e0 <UsageFault_Handler+0x4>

080020e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  if (htim1.Instance != NULL)
 80020f8:	4b07      	ldr	r3, [pc, #28]	@ (8002118 <TIM1_UP_TIM16_IRQHandler+0x24>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <TIM1_UP_TIM16_IRQHandler+0x12>
  {
    HAL_TIM_IRQHandler(&htim1);
 8002100:	4805      	ldr	r0, [pc, #20]	@ (8002118 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8002102:	f003 fc16 	bl	8005932 <HAL_TIM_IRQHandler>
  }
  if (htim16.Instance != NULL)
 8002106:	4b05      	ldr	r3, [pc, #20]	@ (800211c <TIM1_UP_TIM16_IRQHandler+0x28>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <TIM1_UP_TIM16_IRQHandler+0x20>
  {
    HAL_TIM_IRQHandler(&htim16);
 800210e:	4803      	ldr	r0, [pc, #12]	@ (800211c <TIM1_UP_TIM16_IRQHandler+0x28>)
 8002110:	f003 fc0f 	bl	8005932 <HAL_TIM_IRQHandler>
  }
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000840 	.word	0x20000840
 800211c:	200007f0 	.word	0x200007f0

08002120 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return 1;
 8002124:	2301      	movs	r3, #1
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <_kill>:

int _kill(int pid, int sig)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800213a:	f008 fda7 	bl	800ac8c <__errno>
 800213e:	4603      	mov	r3, r0
 8002140:	2216      	movs	r2, #22
 8002142:	601a      	str	r2, [r3, #0]
  return -1;
 8002144:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <_exit>:

void _exit (int status)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002158:	f04f 31ff 	mov.w	r1, #4294967295
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7ff ffe7 	bl	8002130 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002162:	bf00      	nop
 8002164:	e7fd      	b.n	8002162 <_exit+0x12>

08002166 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b086      	sub	sp, #24
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	e00a      	b.n	800218e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002178:	f3af 8000 	nop.w
 800217c:	4601      	mov	r1, r0
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	60ba      	str	r2, [r7, #8]
 8002184:	b2ca      	uxtb	r2, r1
 8002186:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	3301      	adds	r3, #1
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	429a      	cmp	r2, r3
 8002194:	dbf0      	blt.n	8002178 <_read+0x12>
  }

  return len;
 8002196:	687b      	ldr	r3, [r7, #4]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021c8:	605a      	str	r2, [r3, #4]
  return 0;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <_isatty>:

int _isatty(int file)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021e0:	2301      	movs	r3, #1
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b085      	sub	sp, #20
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002210:	4a14      	ldr	r2, [pc, #80]	@ (8002264 <_sbrk+0x5c>)
 8002212:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <_sbrk+0x60>)
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800221c:	4b13      	ldr	r3, [pc, #76]	@ (800226c <_sbrk+0x64>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002224:	4b11      	ldr	r3, [pc, #68]	@ (800226c <_sbrk+0x64>)
 8002226:	4a12      	ldr	r2, [pc, #72]	@ (8002270 <_sbrk+0x68>)
 8002228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800222a:	4b10      	ldr	r3, [pc, #64]	@ (800226c <_sbrk+0x64>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	429a      	cmp	r2, r3
 8002236:	d207      	bcs.n	8002248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002238:	f008 fd28 	bl	800ac8c <__errno>
 800223c:	4603      	mov	r3, r0
 800223e:	220c      	movs	r2, #12
 8002240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
 8002246:	e009      	b.n	800225c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002248:	4b08      	ldr	r3, [pc, #32]	@ (800226c <_sbrk+0x64>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800224e:	4b07      	ldr	r3, [pc, #28]	@ (800226c <_sbrk+0x64>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	4a05      	ldr	r2, [pc, #20]	@ (800226c <_sbrk+0x64>)
 8002258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800225a:	68fb      	ldr	r3, [r7, #12]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20010000 	.word	0x20010000
 8002268:	00000400 	.word	0x00000400
 800226c:	2000083c 	.word	0x2000083c
 8002270:	20002450 	.word	0x20002450

08002274 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002278:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <SystemInit+0x20>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227e:	4a05      	ldr	r2, [pc, #20]	@ (8002294 <SystemInit+0x20>)
 8002280:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002284:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b09a      	sub	sp, #104	@ 0x68
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
 80022c8:	615a      	str	r2, [r3, #20]
 80022ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022cc:	1d3b      	adds	r3, r7, #4
 80022ce:	222c      	movs	r2, #44	@ 0x2c
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f008 fc32 	bl	800ab3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022d8:	4b43      	ldr	r3, [pc, #268]	@ (80023e8 <MX_TIM1_Init+0x150>)
 80022da:	4a44      	ldr	r2, [pc, #272]	@ (80023ec <MX_TIM1_Init+0x154>)
 80022dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 80022de:	4b42      	ldr	r3, [pc, #264]	@ (80023e8 <MX_TIM1_Init+0x150>)
 80022e0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80022e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e6:	4b40      	ldr	r3, [pc, #256]	@ (80023e8 <MX_TIM1_Init+0x150>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80022ec:	4b3e      	ldr	r3, [pc, #248]	@ (80023e8 <MX_TIM1_Init+0x150>)
 80022ee:	2263      	movs	r2, #99	@ 0x63
 80022f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f2:	4b3d      	ldr	r3, [pc, #244]	@ (80023e8 <MX_TIM1_Init+0x150>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022f8:	4b3b      	ldr	r3, [pc, #236]	@ (80023e8 <MX_TIM1_Init+0x150>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022fe:	4b3a      	ldr	r3, [pc, #232]	@ (80023e8 <MX_TIM1_Init+0x150>)
 8002300:	2280      	movs	r2, #128	@ 0x80
 8002302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002304:	4838      	ldr	r0, [pc, #224]	@ (80023e8 <MX_TIM1_Init+0x150>)
 8002306:	f003 fa07 	bl	8005718 <HAL_TIM_Base_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002310:	f7ff f95e 	bl	80015d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002314:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002318:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800231a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800231e:	4619      	mov	r1, r3
 8002320:	4831      	ldr	r0, [pc, #196]	@ (80023e8 <MX_TIM1_Init+0x150>)
 8002322:	f003 fd21 	bl	8005d68 <HAL_TIM_ConfigClockSource>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800232c:	f7ff f950 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002330:	482d      	ldr	r0, [pc, #180]	@ (80023e8 <MX_TIM1_Init+0x150>)
 8002332:	f003 fa9d 	bl	8005870 <HAL_TIM_PWM_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800233c:	f7ff f948 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002340:	2300      	movs	r3, #0
 8002342:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002344:	2300      	movs	r3, #0
 8002346:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002348:	2300      	movs	r3, #0
 800234a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800234c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002350:	4619      	mov	r1, r3
 8002352:	4825      	ldr	r0, [pc, #148]	@ (80023e8 <MX_TIM1_Init+0x150>)
 8002354:	f004 f982 	bl	800665c <HAL_TIMEx_MasterConfigSynchronization>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800235e:	f7ff f937 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002362:	2360      	movs	r3, #96	@ 0x60
 8002364:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800236a:	2300      	movs	r3, #0
 800236c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800236e:	2300      	movs	r3, #0
 8002370:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002376:	2300      	movs	r3, #0
 8002378:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800237a:	2300      	movs	r3, #0
 800237c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800237e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002382:	2204      	movs	r2, #4
 8002384:	4619      	mov	r1, r3
 8002386:	4818      	ldr	r0, [pc, #96]	@ (80023e8 <MX_TIM1_Init+0x150>)
 8002388:	f003 fbda 	bl	8005b40 <HAL_TIM_PWM_ConfigChannel>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002392:	f7ff f91d 	bl	80015d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80023b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023bc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	4619      	mov	r1, r3
 80023ca:	4807      	ldr	r0, [pc, #28]	@ (80023e8 <MX_TIM1_Init+0x150>)
 80023cc:	f004 f9ac 	bl	8006728 <HAL_TIMEx_ConfigBreakDeadTime>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80023d6:	f7ff f8fb 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80023da:	4803      	ldr	r0, [pc, #12]	@ (80023e8 <MX_TIM1_Init+0x150>)
 80023dc:	f000 f8b6 	bl	800254c <HAL_TIM_MspPostInit>

}
 80023e0:	bf00      	nop
 80023e2:	3768      	adds	r7, #104	@ 0x68
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000840 	.word	0x20000840
 80023ec:	40012c00 	.word	0x40012c00

080023f0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08e      	sub	sp, #56	@ 0x38
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	605a      	str	r2, [r3, #4]
 8002400:	609a      	str	r2, [r3, #8]
 8002402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002404:	f107 031c 	add.w	r3, r7, #28
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002410:	463b      	mov	r3, r7
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	605a      	str	r2, [r3, #4]
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	60da      	str	r2, [r3, #12]
 800241c:	611a      	str	r2, [r3, #16]
 800241e:	615a      	str	r2, [r3, #20]
 8002420:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002422:	4b2d      	ldr	r3, [pc, #180]	@ (80024d8 <MX_TIM2_Init+0xe8>)
 8002424:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002428:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 800242a:	4b2b      	ldr	r3, [pc, #172]	@ (80024d8 <MX_TIM2_Init+0xe8>)
 800242c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002430:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002432:	4b29      	ldr	r3, [pc, #164]	@ (80024d8 <MX_TIM2_Init+0xe8>)
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002438:	4b27      	ldr	r3, [pc, #156]	@ (80024d8 <MX_TIM2_Init+0xe8>)
 800243a:	2263      	movs	r2, #99	@ 0x63
 800243c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243e:	4b26      	ldr	r3, [pc, #152]	@ (80024d8 <MX_TIM2_Init+0xe8>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002444:	4b24      	ldr	r3, [pc, #144]	@ (80024d8 <MX_TIM2_Init+0xe8>)
 8002446:	2280      	movs	r2, #128	@ 0x80
 8002448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800244a:	4823      	ldr	r0, [pc, #140]	@ (80024d8 <MX_TIM2_Init+0xe8>)
 800244c:	f003 f964 	bl	8005718 <HAL_TIM_Base_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002456:	f7ff f8bb 	bl	80015d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800245a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800245e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002460:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002464:	4619      	mov	r1, r3
 8002466:	481c      	ldr	r0, [pc, #112]	@ (80024d8 <MX_TIM2_Init+0xe8>)
 8002468:	f003 fc7e 	bl	8005d68 <HAL_TIM_ConfigClockSource>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002472:	f7ff f8ad 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002476:	4818      	ldr	r0, [pc, #96]	@ (80024d8 <MX_TIM2_Init+0xe8>)
 8002478:	f003 f9fa 	bl	8005870 <HAL_TIM_PWM_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002482:	f7ff f8a5 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800248a:	2300      	movs	r3, #0
 800248c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800248e:	f107 031c 	add.w	r3, r7, #28
 8002492:	4619      	mov	r1, r3
 8002494:	4810      	ldr	r0, [pc, #64]	@ (80024d8 <MX_TIM2_Init+0xe8>)
 8002496:	f004 f8e1 	bl	800665c <HAL_TIMEx_MasterConfigSynchronization>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80024a0:	f7ff f896 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024a4:	2360      	movs	r3, #96	@ 0x60
 80024a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024b4:	463b      	mov	r3, r7
 80024b6:	2204      	movs	r2, #4
 80024b8:	4619      	mov	r1, r3
 80024ba:	4807      	ldr	r0, [pc, #28]	@ (80024d8 <MX_TIM2_Init+0xe8>)
 80024bc:	f003 fb40 	bl	8005b40 <HAL_TIM_PWM_ConfigChannel>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80024c6:	f7ff f883 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80024ca:	4803      	ldr	r0, [pc, #12]	@ (80024d8 <MX_TIM2_Init+0xe8>)
 80024cc:	f000 f83e 	bl	800254c <HAL_TIM_MspPostInit>

}
 80024d0:	bf00      	nop
 80024d2:	3738      	adds	r7, #56	@ 0x38
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	2000088c 	.word	0x2000088c

080024dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a16      	ldr	r2, [pc, #88]	@ (8002544 <HAL_TIM_Base_MspInit+0x68>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d114      	bne.n	8002518 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024ee:	4b16      	ldr	r3, [pc, #88]	@ (8002548 <HAL_TIM_Base_MspInit+0x6c>)
 80024f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f2:	4a15      	ldr	r2, [pc, #84]	@ (8002548 <HAL_TIM_Base_MspInit+0x6c>)
 80024f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80024fa:	4b13      	ldr	r3, [pc, #76]	@ (8002548 <HAL_TIM_Base_MspInit+0x6c>)
 80024fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	210f      	movs	r1, #15
 800250a:	2019      	movs	r0, #25
 800250c:	f000 fe16 	bl	800313c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002510:	2019      	movs	r0, #25
 8002512:	f000 fe2f 	bl	8003174 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002516:	e010      	b.n	800253a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002520:	d10b      	bne.n	800253a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002522:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <HAL_TIM_Base_MspInit+0x6c>)
 8002524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002526:	4a08      	ldr	r2, [pc, #32]	@ (8002548 <HAL_TIM_Base_MspInit+0x6c>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	6593      	str	r3, [r2, #88]	@ 0x58
 800252e:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <HAL_TIM_Base_MspInit+0x6c>)
 8002530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]
}
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40012c00 	.word	0x40012c00
 8002548:	40021000 	.word	0x40021000

0800254c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	@ 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a23      	ldr	r2, [pc, #140]	@ (80025f8 <HAL_TIM_MspPostInit+0xac>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d11e      	bne.n	80025ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	4b23      	ldr	r3, [pc, #140]	@ (80025fc <HAL_TIM_MspPostInit+0xb0>)
 8002570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002572:	4a22      	ldr	r2, [pc, #136]	@ (80025fc <HAL_TIM_MspPostInit+0xb0>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800257a:	4b20      	ldr	r3, [pc, #128]	@ (80025fc <HAL_TIM_MspPostInit+0xb0>)
 800257c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LED_D2_PWM_Pin;
 8002586:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800258a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002594:	2300      	movs	r3, #0
 8002596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002598:	2301      	movs	r3, #1
 800259a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_D2_PWM_GPIO_Port, &GPIO_InitStruct);
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4619      	mov	r1, r3
 80025a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025a6:	f000 fdf3 	bl	8003190 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80025aa:	e021      	b.n	80025f0 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025b4:	d11c      	bne.n	80025f0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b6:	4b11      	ldr	r3, [pc, #68]	@ (80025fc <HAL_TIM_MspPostInit+0xb0>)
 80025b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ba:	4a10      	ldr	r2, [pc, #64]	@ (80025fc <HAL_TIM_MspPostInit+0xb0>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025c2:	4b0e      	ldr	r3, [pc, #56]	@ (80025fc <HAL_TIM_MspPostInit+0xb0>)
 80025c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_D3_PWM_Pin;
 80025ce:	2302      	movs	r3, #2
 80025d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2300      	movs	r3, #0
 80025dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025de:	2301      	movs	r3, #1
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 80025e2:	f107 0314 	add.w	r3, r7, #20
 80025e6:	4619      	mov	r1, r3
 80025e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025ec:	f000 fdd0 	bl	8003190 <HAL_GPIO_Init>
}
 80025f0:	bf00      	nop
 80025f2:	3728      	adds	r7, #40	@ 0x28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40012c00 	.word	0x40012c00
 80025fc:	40021000 	.word	0x40021000

08002600 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002604:	4b14      	ldr	r3, [pc, #80]	@ (8002658 <MX_USART2_UART_Init+0x58>)
 8002606:	4a15      	ldr	r2, [pc, #84]	@ (800265c <MX_USART2_UART_Init+0x5c>)
 8002608:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800260a:	4b13      	ldr	r3, [pc, #76]	@ (8002658 <MX_USART2_UART_Init+0x58>)
 800260c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002610:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002612:	4b11      	ldr	r3, [pc, #68]	@ (8002658 <MX_USART2_UART_Init+0x58>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002618:	4b0f      	ldr	r3, [pc, #60]	@ (8002658 <MX_USART2_UART_Init+0x58>)
 800261a:	2200      	movs	r2, #0
 800261c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800261e:	4b0e      	ldr	r3, [pc, #56]	@ (8002658 <MX_USART2_UART_Init+0x58>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002624:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <MX_USART2_UART_Init+0x58>)
 8002626:	220c      	movs	r2, #12
 8002628:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262a:	4b0b      	ldr	r3, [pc, #44]	@ (8002658 <MX_USART2_UART_Init+0x58>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002630:	4b09      	ldr	r3, [pc, #36]	@ (8002658 <MX_USART2_UART_Init+0x58>)
 8002632:	2200      	movs	r2, #0
 8002634:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002636:	4b08      	ldr	r3, [pc, #32]	@ (8002658 <MX_USART2_UART_Init+0x58>)
 8002638:	2200      	movs	r2, #0
 800263a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800263c:	4b06      	ldr	r3, [pc, #24]	@ (8002658 <MX_USART2_UART_Init+0x58>)
 800263e:	2200      	movs	r2, #0
 8002640:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002642:	4805      	ldr	r0, [pc, #20]	@ (8002658 <MX_USART2_UART_Init+0x58>)
 8002644:	f004 f906 	bl	8006854 <HAL_UART_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800264e:	f7fe ffbf 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	200008d8 	.word	0x200008d8
 800265c:	40004400 	.word	0x40004400

08002660 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b09e      	sub	sp, #120	@ 0x78
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002678:	f107 0310 	add.w	r3, r7, #16
 800267c:	2254      	movs	r2, #84	@ 0x54
 800267e:	2100      	movs	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f008 fa5b 	bl	800ab3c <memset>
  if(uartHandle->Instance==USART2)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a1f      	ldr	r2, [pc, #124]	@ (8002708 <HAL_UART_MspInit+0xa8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d136      	bne.n	80026fe <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002690:	2302      	movs	r3, #2
 8002692:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002694:	2300      	movs	r3, #0
 8002696:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002698:	f107 0310 	add.w	r3, r7, #16
 800269c:	4618      	mov	r0, r3
 800269e:	f001 fe27 	bl	80042f0 <HAL_RCCEx_PeriphCLKConfig>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026a8:	f7fe ff92 	bl	80015d0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ac:	4b17      	ldr	r3, [pc, #92]	@ (800270c <HAL_UART_MspInit+0xac>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b0:	4a16      	ldr	r2, [pc, #88]	@ (800270c <HAL_UART_MspInit+0xac>)
 80026b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80026b8:	4b14      	ldr	r3, [pc, #80]	@ (800270c <HAL_UART_MspInit+0xac>)
 80026ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c4:	4b11      	ldr	r3, [pc, #68]	@ (800270c <HAL_UART_MspInit+0xac>)
 80026c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c8:	4a10      	ldr	r2, [pc, #64]	@ (800270c <HAL_UART_MspInit+0xac>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026d0:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <HAL_UART_MspInit+0xac>)
 80026d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026dc:	230c      	movs	r3, #12
 80026de:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e8:	2303      	movs	r3, #3
 80026ea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026ec:	2307      	movs	r3, #7
 80026ee:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80026f4:	4619      	mov	r1, r3
 80026f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026fa:	f000 fd49 	bl	8003190 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026fe:	bf00      	nop
 8002700:	3778      	adds	r7, #120	@ 0x78
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40004400 	.word	0x40004400
 800270c:	40021000 	.word	0x40021000

08002710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002710:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002748 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002714:	f7ff fdae 	bl	8002274 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002718:	480c      	ldr	r0, [pc, #48]	@ (800274c <LoopForever+0x6>)
  ldr r1, =_edata
 800271a:	490d      	ldr	r1, [pc, #52]	@ (8002750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800271c:	4a0d      	ldr	r2, [pc, #52]	@ (8002754 <LoopForever+0xe>)
  movs r3, #0
 800271e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002720:	e002      	b.n	8002728 <LoopCopyDataInit>

08002722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002726:	3304      	adds	r3, #4

08002728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800272a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800272c:	d3f9      	bcc.n	8002722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800272e:	4a0a      	ldr	r2, [pc, #40]	@ (8002758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002730:	4c0a      	ldr	r4, [pc, #40]	@ (800275c <LoopForever+0x16>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002734:	e001      	b.n	800273a <LoopFillZerobss>

08002736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002738:	3204      	adds	r2, #4

0800273a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800273a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800273c:	d3fb      	bcc.n	8002736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800273e:	f008 faab 	bl	800ac98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002742:	f7fe fec1 	bl	80014c8 <main>

08002746 <LoopForever>:

LoopForever:
    b LoopForever
 8002746:	e7fe      	b.n	8002746 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002748:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800274c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002750:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002754:	0800d660 	.word	0x0800d660
  ldr r2, =_sbss
 8002758:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800275c:	20002450 	.word	0x20002450

08002760 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002760:	e7fe      	b.n	8002760 <ADC1_IRQHandler>

08002762 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800276c:	2003      	movs	r0, #3
 800276e:	f000 fcda 	bl	8003126 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002772:	200f      	movs	r0, #15
 8002774:	f7ff fc32 	bl	8001fdc <HAL_InitTick>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	71fb      	strb	r3, [r7, #7]
 8002782:	e001      	b.n	8002788 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002784:	f7ff fc02 	bl	8001f8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002788:	79fb      	ldrb	r3, [r7, #7]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002798:	4b06      	ldr	r3, [pc, #24]	@ (80027b4 <HAL_IncTick+0x20>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <HAL_IncTick+0x24>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	4a04      	ldr	r2, [pc, #16]	@ (80027b8 <HAL_IncTick+0x24>)
 80027a6:	6013      	str	r3, [r2, #0]
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000008 	.word	0x20000008
 80027b8:	20000960 	.word	0x20000960

080027bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return uwTick;
 80027c0:	4b03      	ldr	r3, [pc, #12]	@ (80027d0 <HAL_GetTick+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20000960 	.word	0x20000960

080027d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e0ed      	b.n	80029c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d102      	bne.n	80027f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7fe fb94 	bl	8000f20 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0201 	orr.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002808:	f7ff ffd8 	bl	80027bc <HAL_GetTick>
 800280c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800280e:	e012      	b.n	8002836 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002810:	f7ff ffd4 	bl	80027bc <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b0a      	cmp	r3, #10
 800281c:	d90b      	bls.n	8002836 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2205      	movs	r2, #5
 800282e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e0c5      	b.n	80029c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0e5      	beq.n	8002810 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0202 	bic.w	r2, r2, #2
 8002852:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002854:	f7ff ffb2 	bl	80027bc <HAL_GetTick>
 8002858:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800285a:	e012      	b.n	8002882 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800285c:	f7ff ffae 	bl	80027bc <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b0a      	cmp	r3, #10
 8002868:	d90b      	bls.n	8002882 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2205      	movs	r2, #5
 800287a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e09f      	b.n	80029c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1e5      	bne.n	800285c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	7e1b      	ldrb	r3, [r3, #24]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d108      	bne.n	80028aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e007      	b.n	80028ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	7e5b      	ldrb	r3, [r3, #25]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d108      	bne.n	80028d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e007      	b.n	80028e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	7e9b      	ldrb	r3, [r3, #26]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d108      	bne.n	80028fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0220 	orr.w	r2, r2, #32
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	e007      	b.n	800290e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0220 	bic.w	r2, r2, #32
 800290c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7edb      	ldrb	r3, [r3, #27]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d108      	bne.n	8002928 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0210 	bic.w	r2, r2, #16
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	e007      	b.n	8002938 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0210 	orr.w	r2, r2, #16
 8002936:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	7f1b      	ldrb	r3, [r3, #28]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d108      	bne.n	8002952 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0208 	orr.w	r2, r2, #8
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	e007      	b.n	8002962 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0208 	bic.w	r2, r2, #8
 8002960:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	7f5b      	ldrb	r3, [r3, #29]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d108      	bne.n	800297c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0204 	orr.w	r2, r2, #4
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	e007      	b.n	800298c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0204 	bic.w	r2, r2, #4
 800298a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	ea42 0103 	orr.w	r1, r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	1e5a      	subs	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b087      	sub	sp, #28
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80029e2:	7cfb      	ldrb	r3, [r7, #19]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d003      	beq.n	80029f0 <HAL_CAN_ConfigFilter+0x26>
 80029e8:	7cfb      	ldrb	r3, [r7, #19]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	f040 80aa 	bne.w	8002b44 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	2201      	movs	r2, #1
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d123      	bne.n	8002a72 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	401a      	ands	r2, r3
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a4c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	3248      	adds	r2, #72	@ 0x48
 8002a52:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a66:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a68:	6979      	ldr	r1, [r7, #20]
 8002a6a:	3348      	adds	r3, #72	@ 0x48
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	440b      	add	r3, r1
 8002a70:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d122      	bne.n	8002ac0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a9a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	3248      	adds	r2, #72	@ 0x48
 8002aa0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ab4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ab6:	6979      	ldr	r1, [r7, #20]
 8002ab8:	3348      	adds	r3, #72	@ 0x48
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	440b      	add	r3, r1
 8002abe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d109      	bne.n	8002adc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002ada:	e007      	b.n	8002aec <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d109      	bne.n	8002b08 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	401a      	ands	r2, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002b06:	e007      	b.n	8002b18 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	431a      	orrs	r2, r3
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d107      	bne.n	8002b30 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002b36:	f023 0201 	bic.w	r2, r3, #1
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	e006      	b.n	8002b52 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
  }
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	371c      	adds	r7, #28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d12e      	bne.n	8002bd0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2202      	movs	r2, #2
 8002b76:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0201 	bic.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b8a:	f7ff fe17 	bl	80027bc <HAL_GetTick>
 8002b8e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b90:	e012      	b.n	8002bb8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b92:	f7ff fe13 	bl	80027bc <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b0a      	cmp	r3, #10
 8002b9e:	d90b      	bls.n	8002bb8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2205      	movs	r2, #5
 8002bb0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e012      	b.n	8002bde <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1e5      	bne.n	8002b92 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e006      	b.n	8002bde <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b089      	sub	sp, #36	@ 0x24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bfa:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c04:	7ffb      	ldrb	r3, [r7, #31]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d003      	beq.n	8002c12 <HAL_CAN_AddTxMessage+0x2c>
 8002c0a:	7ffb      	ldrb	r3, [r7, #31]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	f040 80ad 	bne.w	8002d6c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10a      	bne.n	8002c32 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d105      	bne.n	8002c32 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8095 	beq.w	8002d5c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	0e1b      	lsrs	r3, r3, #24
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	409a      	lsls	r2, r3
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10d      	bne.n	8002c6a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c58:	68f9      	ldr	r1, [r7, #12]
 8002c5a:	6809      	ldr	r1, [r1, #0]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	3318      	adds	r3, #24
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	440b      	add	r3, r1
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	e00f      	b.n	8002c8a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c74:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c7a:	68f9      	ldr	r1, [r7, #12]
 8002c7c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002c7e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	3318      	adds	r3, #24
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	440b      	add	r3, r1
 8002c88:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6819      	ldr	r1, [r3, #0]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	3318      	adds	r3, #24
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	440b      	add	r3, r1
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	7d1b      	ldrb	r3, [r3, #20]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d111      	bne.n	8002cca <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	3318      	adds	r3, #24
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	6811      	ldr	r1, [r2, #0]
 8002cba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	3318      	adds	r3, #24
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3307      	adds	r3, #7
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	061a      	lsls	r2, r3, #24
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3306      	adds	r3, #6
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	041b      	lsls	r3, r3, #16
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3305      	adds	r3, #5
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	021b      	lsls	r3, r3, #8
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	3204      	adds	r2, #4
 8002cea:	7812      	ldrb	r2, [r2, #0]
 8002cec:	4610      	mov	r0, r2
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	6811      	ldr	r1, [r2, #0]
 8002cf2:	ea43 0200 	orr.w	r2, r3, r0
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002d00:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3303      	adds	r3, #3
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	061a      	lsls	r2, r3, #24
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3302      	adds	r3, #2
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	041b      	lsls	r3, r3, #16
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3301      	adds	r3, #1
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	7812      	ldrb	r2, [r2, #0]
 8002d22:	4610      	mov	r0, r2
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	6811      	ldr	r1, [r2, #0]
 8002d28:	ea43 0200 	orr.w	r2, r3, r0
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	440b      	add	r3, r1
 8002d32:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002d36:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	3318      	adds	r3, #24
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	4413      	add	r3, r2
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	6811      	ldr	r1, [r2, #0]
 8002d4a:	f043 0201 	orr.w	r2, r3, #1
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	3318      	adds	r3, #24
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	440b      	add	r3, r1
 8002d56:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e00e      	b.n	8002d7a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e006      	b.n	8002d7a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
  }
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3724      	adds	r7, #36	@ 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002d86:	b480      	push	{r7}
 8002d88:	b087      	sub	sp, #28
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d9a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d003      	beq.n	8002daa <HAL_CAN_GetRxMessage+0x24>
 8002da2:	7dfb      	ldrb	r3, [r7, #23]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	f040 8103 	bne.w	8002fb0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10e      	bne.n	8002dce <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d116      	bne.n	8002dec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0f7      	b.n	8002fbe <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d107      	bne.n	8002dec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0e8      	b.n	8002fbe <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	331b      	adds	r3, #27
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	4413      	add	r3, r2
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0204 	and.w	r2, r3, #4
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10c      	bne.n	8002e24 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	331b      	adds	r3, #27
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	4413      	add	r3, r2
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	0d5b      	lsrs	r3, r3, #21
 8002e1a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	e00b      	b.n	8002e3c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	331b      	adds	r3, #27
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	4413      	add	r3, r2
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	08db      	lsrs	r3, r3, #3
 8002e34:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	331b      	adds	r3, #27
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	4413      	add	r3, r2
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0202 	and.w	r2, r3, #2
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	331b      	adds	r3, #27
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3304      	adds	r3, #4
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2208      	movs	r2, #8
 8002e6e:	611a      	str	r2, [r3, #16]
 8002e70:	e00b      	b.n	8002e8a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	331b      	adds	r3, #27
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3304      	adds	r3, #4
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 020f 	and.w	r2, r3, #15
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	331b      	adds	r3, #27
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	4413      	add	r3, r2
 8002e96:	3304      	adds	r3, #4
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	0a1b      	lsrs	r3, r3, #8
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	331b      	adds	r3, #27
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	4413      	add	r3, r2
 8002eae:	3304      	adds	r3, #4
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	0c1b      	lsrs	r3, r3, #16
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	0a1a      	lsrs	r2, r3, #8
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	0c1a      	lsrs	r2, r3, #16
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	3302      	adds	r3, #2
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	0e1a      	lsrs	r2, r3, #24
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	3303      	adds	r3, #3
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	3304      	adds	r3, #4
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	0a1a      	lsrs	r2, r3, #8
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	3305      	adds	r3, #5
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	0c1a      	lsrs	r2, r3, #16
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	3306      	adds	r3, #6
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	0e1a      	lsrs	r2, r3, #24
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	3307      	adds	r3, #7
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d108      	bne.n	8002f9c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0220 	orr.w	r2, r2, #32
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	e007      	b.n	8002fac <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0220 	orr.w	r2, r2, #32
 8002faa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e006      	b.n	8002fbe <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
  }
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	371c      	adds	r7, #28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
	...

08002fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003010 <__NVIC_SetPriorityGrouping+0x44>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fe8:	4013      	ands	r3, r2
 8002fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ff4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ffe:	4a04      	ldr	r2, [pc, #16]	@ (8003010 <__NVIC_SetPriorityGrouping+0x44>)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	60d3      	str	r3, [r2, #12]
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003018:	4b04      	ldr	r3, [pc, #16]	@ (800302c <__NVIC_GetPriorityGrouping+0x18>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	0a1b      	lsrs	r3, r3, #8
 800301e:	f003 0307 	and.w	r3, r3, #7
}
 8003022:	4618      	mov	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	2b00      	cmp	r3, #0
 8003040:	db0b      	blt.n	800305a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	f003 021f 	and.w	r2, r3, #31
 8003048:	4907      	ldr	r1, [pc, #28]	@ (8003068 <__NVIC_EnableIRQ+0x38>)
 800304a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	2001      	movs	r0, #1
 8003052:	fa00 f202 	lsl.w	r2, r0, r2
 8003056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	e000e100 	.word	0xe000e100

0800306c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	6039      	str	r1, [r7, #0]
 8003076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307c:	2b00      	cmp	r3, #0
 800307e:	db0a      	blt.n	8003096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	b2da      	uxtb	r2, r3
 8003084:	490c      	ldr	r1, [pc, #48]	@ (80030b8 <__NVIC_SetPriority+0x4c>)
 8003086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308a:	0112      	lsls	r2, r2, #4
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	440b      	add	r3, r1
 8003090:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003094:	e00a      	b.n	80030ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	b2da      	uxtb	r2, r3
 800309a:	4908      	ldr	r1, [pc, #32]	@ (80030bc <__NVIC_SetPriority+0x50>)
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	3b04      	subs	r3, #4
 80030a4:	0112      	lsls	r2, r2, #4
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	440b      	add	r3, r1
 80030aa:	761a      	strb	r2, [r3, #24]
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	e000e100 	.word	0xe000e100
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b089      	sub	sp, #36	@ 0x24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f1c3 0307 	rsb	r3, r3, #7
 80030da:	2b04      	cmp	r3, #4
 80030dc:	bf28      	it	cs
 80030de:	2304      	movcs	r3, #4
 80030e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3304      	adds	r3, #4
 80030e6:	2b06      	cmp	r3, #6
 80030e8:	d902      	bls.n	80030f0 <NVIC_EncodePriority+0x30>
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3b03      	subs	r3, #3
 80030ee:	e000      	b.n	80030f2 <NVIC_EncodePriority+0x32>
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f4:	f04f 32ff 	mov.w	r2, #4294967295
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43da      	mvns	r2, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	401a      	ands	r2, r3
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003108:	f04f 31ff 	mov.w	r1, #4294967295
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	fa01 f303 	lsl.w	r3, r1, r3
 8003112:	43d9      	mvns	r1, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	4313      	orrs	r3, r2
         );
}
 800311a:	4618      	mov	r0, r3
 800311c:	3724      	adds	r7, #36	@ 0x24
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff ff4c 	bl	8002fcc <__NVIC_SetPriorityGrouping>
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800314e:	f7ff ff61 	bl	8003014 <__NVIC_GetPriorityGrouping>
 8003152:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	68b9      	ldr	r1, [r7, #8]
 8003158:	6978      	ldr	r0, [r7, #20]
 800315a:	f7ff ffb1 	bl	80030c0 <NVIC_EncodePriority>
 800315e:	4602      	mov	r2, r0
 8003160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003164:	4611      	mov	r1, r2
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff ff80 	bl	800306c <__NVIC_SetPriority>
}
 800316c:	bf00      	nop
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800317e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff ff54 	bl	8003030 <__NVIC_EnableIRQ>
}
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003190:	b480      	push	{r7}
 8003192:	b087      	sub	sp, #28
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800319e:	e148      	b.n	8003432 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	2101      	movs	r1, #1
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ac:	4013      	ands	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 813a 	beq.w	800342c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d005      	beq.n	80031d0 <HAL_GPIO_Init+0x40>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d130      	bne.n	8003232 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	2203      	movs	r2, #3
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4013      	ands	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003206:	2201      	movs	r2, #1
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4013      	ands	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	091b      	lsrs	r3, r3, #4
 800321c:	f003 0201 	and.w	r2, r3, #1
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	2b03      	cmp	r3, #3
 800323c:	d017      	beq.n	800326e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	2203      	movs	r2, #3
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4013      	ands	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d123      	bne.n	80032c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	08da      	lsrs	r2, r3, #3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3208      	adds	r2, #8
 8003282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003286:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	220f      	movs	r2, #15
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4013      	ands	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	08da      	lsrs	r2, r3, #3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3208      	adds	r2, #8
 80032bc:	6939      	ldr	r1, [r7, #16]
 80032be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	2203      	movs	r2, #3
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4013      	ands	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 0203 	and.w	r2, r3, #3
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 8094 	beq.w	800342c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003304:	4b52      	ldr	r3, [pc, #328]	@ (8003450 <HAL_GPIO_Init+0x2c0>)
 8003306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003308:	4a51      	ldr	r2, [pc, #324]	@ (8003450 <HAL_GPIO_Init+0x2c0>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003310:	4b4f      	ldr	r3, [pc, #316]	@ (8003450 <HAL_GPIO_Init+0x2c0>)
 8003312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800331c:	4a4d      	ldr	r2, [pc, #308]	@ (8003454 <HAL_GPIO_Init+0x2c4>)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	089b      	lsrs	r3, r3, #2
 8003322:	3302      	adds	r3, #2
 8003324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003328:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	220f      	movs	r2, #15
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003346:	d00d      	beq.n	8003364 <HAL_GPIO_Init+0x1d4>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a43      	ldr	r2, [pc, #268]	@ (8003458 <HAL_GPIO_Init+0x2c8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d007      	beq.n	8003360 <HAL_GPIO_Init+0x1d0>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a42      	ldr	r2, [pc, #264]	@ (800345c <HAL_GPIO_Init+0x2cc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d101      	bne.n	800335c <HAL_GPIO_Init+0x1cc>
 8003358:	2302      	movs	r3, #2
 800335a:	e004      	b.n	8003366 <HAL_GPIO_Init+0x1d6>
 800335c:	2307      	movs	r3, #7
 800335e:	e002      	b.n	8003366 <HAL_GPIO_Init+0x1d6>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <HAL_GPIO_Init+0x1d6>
 8003364:	2300      	movs	r3, #0
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	f002 0203 	and.w	r2, r2, #3
 800336c:	0092      	lsls	r2, r2, #2
 800336e:	4093      	lsls	r3, r2
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003376:	4937      	ldr	r1, [pc, #220]	@ (8003454 <HAL_GPIO_Init+0x2c4>)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	3302      	adds	r3, #2
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003384:	4b36      	ldr	r3, [pc, #216]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	43db      	mvns	r3, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4013      	ands	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	43db      	mvns	r3, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033d2:	4a23      	ldr	r2, [pc, #140]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80033d8:	4b21      	ldr	r3, [pc, #132]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4013      	ands	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033fc:	4a18      	ldr	r2, [pc, #96]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003402:	4b17      	ldr	r3, [pc, #92]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	43db      	mvns	r3, r3
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4013      	ands	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003426:	4a0e      	ldr	r2, [pc, #56]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	3301      	adds	r3, #1
 8003430:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	f47f aeaf 	bne.w	80031a0 <HAL_GPIO_Init+0x10>
  }
}
 8003442:	bf00      	nop
 8003444:	bf00      	nop
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	40021000 	.word	0x40021000
 8003454:	40010000 	.word	0x40010000
 8003458:	48000400 	.word	0x48000400
 800345c:	48000800 	.word	0x48000800
 8003460:	40010400 	.word	0x40010400

08003464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	807b      	strh	r3, [r7, #2]
 8003470:	4613      	mov	r3, r2
 8003472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003474:	787b      	ldrb	r3, [r7, #1]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800347a:	887a      	ldrh	r2, [r7, #2]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003480:	e002      	b.n	8003488 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003482:	887a      	ldrh	r2, [r7, #2]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003498:	4b04      	ldr	r3, [pc, #16]	@ (80034ac <HAL_PWREx_GetVoltageRange+0x18>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40007000 	.word	0x40007000

080034b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034be:	d130      	bne.n	8003522 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034c0:	4b23      	ldr	r3, [pc, #140]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034cc:	d038      	beq.n	8003540 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034ce:	4b20      	ldr	r3, [pc, #128]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034de:	4b1d      	ldr	r3, [pc, #116]	@ (8003554 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2232      	movs	r2, #50	@ 0x32
 80034e4:	fb02 f303 	mul.w	r3, r2, r3
 80034e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034ea:	fba2 2303 	umull	r2, r3, r2, r3
 80034ee:	0c9b      	lsrs	r3, r3, #18
 80034f0:	3301      	adds	r3, #1
 80034f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034f4:	e002      	b.n	80034fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034fc:	4b14      	ldr	r3, [pc, #80]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003508:	d102      	bne.n	8003510 <HAL_PWREx_ControlVoltageScaling+0x60>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1f2      	bne.n	80034f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003510:	4b0f      	ldr	r3, [pc, #60]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800351c:	d110      	bne.n	8003540 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e00f      	b.n	8003542 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003522:	4b0b      	ldr	r3, [pc, #44]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800352a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800352e:	d007      	beq.n	8003540 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003530:	4b07      	ldr	r3, [pc, #28]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003538:	4a05      	ldr	r2, [pc, #20]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800353a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800353e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40007000 	.word	0x40007000
 8003554:	20000000 	.word	0x20000000
 8003558:	431bde83 	.word	0x431bde83

0800355c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d102      	bne.n	8003570 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f000 bc02 	b.w	8003d74 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003570:	4b96      	ldr	r3, [pc, #600]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800357a:	4b94      	ldr	r3, [pc, #592]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80e4 	beq.w	800375a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <HAL_RCC_OscConfig+0x4c>
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b0c      	cmp	r3, #12
 800359c:	f040 808b 	bne.w	80036b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	f040 8087 	bne.w	80036b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035a8:	4b88      	ldr	r3, [pc, #544]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_RCC_OscConfig+0x64>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e3d9      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1a      	ldr	r2, [r3, #32]
 80035c4:	4b81      	ldr	r3, [pc, #516]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0308 	and.w	r3, r3, #8
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d004      	beq.n	80035da <HAL_RCC_OscConfig+0x7e>
 80035d0:	4b7e      	ldr	r3, [pc, #504]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035d8:	e005      	b.n	80035e6 <HAL_RCC_OscConfig+0x8a>
 80035da:	4b7c      	ldr	r3, [pc, #496]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80035dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d223      	bcs.n	8003632 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fe1e 	bl	8004230 <RCC_SetFlashLatencyFromMSIRange>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e3ba      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035fe:	4b73      	ldr	r3, [pc, #460]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a72      	ldr	r2, [pc, #456]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003604:	f043 0308 	orr.w	r3, r3, #8
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4b70      	ldr	r3, [pc, #448]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	496d      	ldr	r1, [pc, #436]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003618:	4313      	orrs	r3, r2
 800361a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800361c:	4b6b      	ldr	r3, [pc, #428]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	021b      	lsls	r3, r3, #8
 800362a:	4968      	ldr	r1, [pc, #416]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800362c:	4313      	orrs	r3, r2
 800362e:	604b      	str	r3, [r1, #4]
 8003630:	e025      	b.n	800367e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003632:	4b66      	ldr	r3, [pc, #408]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a65      	ldr	r2, [pc, #404]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003638:	f043 0308 	orr.w	r3, r3, #8
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	4b63      	ldr	r3, [pc, #396]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	4960      	ldr	r1, [pc, #384]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800364c:	4313      	orrs	r3, r2
 800364e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003650:	4b5e      	ldr	r3, [pc, #376]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	495b      	ldr	r1, [pc, #364]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d109      	bne.n	800367e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fdde 	bl	8004230 <RCC_SetFlashLatencyFromMSIRange>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e37a      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800367e:	f000 fcb5 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 8003682:	4602      	mov	r2, r0
 8003684:	4b51      	ldr	r3, [pc, #324]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	091b      	lsrs	r3, r3, #4
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	4950      	ldr	r1, [pc, #320]	@ (80037d0 <HAL_RCC_OscConfig+0x274>)
 8003690:	5ccb      	ldrb	r3, [r1, r3]
 8003692:	f003 031f 	and.w	r3, r3, #31
 8003696:	fa22 f303 	lsr.w	r3, r2, r3
 800369a:	4a4e      	ldr	r2, [pc, #312]	@ (80037d4 <HAL_RCC_OscConfig+0x278>)
 800369c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800369e:	4b4e      	ldr	r3, [pc, #312]	@ (80037d8 <HAL_RCC_OscConfig+0x27c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe fc9a 	bl	8001fdc <HAL_InitTick>
 80036a8:	4603      	mov	r3, r0
 80036aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d052      	beq.n	8003758 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	e35e      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d032      	beq.n	8003724 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036be:	4b43      	ldr	r3, [pc, #268]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a42      	ldr	r2, [pc, #264]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036ca:	f7ff f877 	bl	80027bc <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036d2:	f7ff f873 	bl	80027bc <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e347      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036e4:	4b39      	ldr	r3, [pc, #228]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036f0:	4b36      	ldr	r3, [pc, #216]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a35      	ldr	r2, [pc, #212]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80036f6:	f043 0308 	orr.w	r3, r3, #8
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	4b33      	ldr	r3, [pc, #204]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	4930      	ldr	r1, [pc, #192]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800370e:	4b2f      	ldr	r3, [pc, #188]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	492b      	ldr	r1, [pc, #172]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
 8003722:	e01a      	b.n	800375a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003724:	4b29      	ldr	r3, [pc, #164]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a28      	ldr	r2, [pc, #160]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800372a:	f023 0301 	bic.w	r3, r3, #1
 800372e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003730:	f7ff f844 	bl	80027bc <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003738:	f7ff f840 	bl	80027bc <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e314      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800374a:	4b20      	ldr	r3, [pc, #128]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0x1dc>
 8003756:	e000      	b.n	800375a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003758:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d073      	beq.n	800384e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	2b08      	cmp	r3, #8
 800376a:	d005      	beq.n	8003778 <HAL_RCC_OscConfig+0x21c>
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	2b0c      	cmp	r3, #12
 8003770:	d10e      	bne.n	8003790 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b03      	cmp	r3, #3
 8003776:	d10b      	bne.n	8003790 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003778:	4b14      	ldr	r3, [pc, #80]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d063      	beq.n	800384c <HAL_RCC_OscConfig+0x2f0>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d15f      	bne.n	800384c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e2f1      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003798:	d106      	bne.n	80037a8 <HAL_RCC_OscConfig+0x24c>
 800379a:	4b0c      	ldr	r3, [pc, #48]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a0b      	ldr	r2, [pc, #44]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80037a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e025      	b.n	80037f4 <HAL_RCC_OscConfig+0x298>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037b0:	d114      	bne.n	80037dc <HAL_RCC_OscConfig+0x280>
 80037b2:	4b06      	ldr	r3, [pc, #24]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a05      	ldr	r2, [pc, #20]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80037b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	4b03      	ldr	r3, [pc, #12]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a02      	ldr	r2, [pc, #8]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80037c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e013      	b.n	80037f4 <HAL_RCC_OscConfig+0x298>
 80037cc:	40021000 	.word	0x40021000
 80037d0:	0800d294 	.word	0x0800d294
 80037d4:	20000000 	.word	0x20000000
 80037d8:	20000004 	.word	0x20000004
 80037dc:	4ba0      	ldr	r3, [pc, #640]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a9f      	ldr	r2, [pc, #636]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80037e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	4b9d      	ldr	r3, [pc, #628]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a9c      	ldr	r2, [pc, #624]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80037ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d013      	beq.n	8003824 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fe ffde 	bl	80027bc <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003804:	f7fe ffda 	bl	80027bc <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b64      	cmp	r3, #100	@ 0x64
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e2ae      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003816:	4b92      	ldr	r3, [pc, #584]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f0      	beq.n	8003804 <HAL_RCC_OscConfig+0x2a8>
 8003822:	e014      	b.n	800384e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003824:	f7fe ffca 	bl	80027bc <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800382c:	f7fe ffc6 	bl	80027bc <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b64      	cmp	r3, #100	@ 0x64
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e29a      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800383e:	4b88      	ldr	r3, [pc, #544]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x2d0>
 800384a:	e000      	b.n	800384e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d060      	beq.n	800391c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d005      	beq.n	800386c <HAL_RCC_OscConfig+0x310>
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2b0c      	cmp	r3, #12
 8003864:	d119      	bne.n	800389a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b02      	cmp	r3, #2
 800386a:	d116      	bne.n	800389a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800386c:	4b7c      	ldr	r3, [pc, #496]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_RCC_OscConfig+0x328>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e277      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003884:	4b76      	ldr	r3, [pc, #472]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	061b      	lsls	r3, r3, #24
 8003892:	4973      	ldr	r1, [pc, #460]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003894:	4313      	orrs	r3, r2
 8003896:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003898:	e040      	b.n	800391c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d023      	beq.n	80038ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a2:	4b6f      	ldr	r3, [pc, #444]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a6e      	ldr	r2, [pc, #440]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80038a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ae:	f7fe ff85 	bl	80027bc <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b6:	f7fe ff81 	bl	80027bc <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e255      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038c8:	4b65      	ldr	r3, [pc, #404]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d4:	4b62      	ldr	r3, [pc, #392]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	061b      	lsls	r3, r3, #24
 80038e2:	495f      	ldr	r1, [pc, #380]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
 80038e8:	e018      	b.n	800391c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ea:	4b5d      	ldr	r3, [pc, #372]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a5c      	ldr	r2, [pc, #368]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80038f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f6:	f7fe ff61 	bl	80027bc <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038fe:	f7fe ff5d 	bl	80027bc <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e231      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003910:	4b53      	ldr	r3, [pc, #332]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1f0      	bne.n	80038fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d03c      	beq.n	80039a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01c      	beq.n	800396a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003930:	4b4b      	ldr	r3, [pc, #300]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003932:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003936:	4a4a      	ldr	r2, [pc, #296]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003940:	f7fe ff3c 	bl	80027bc <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003948:	f7fe ff38 	bl	80027bc <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e20c      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800395a:	4b41      	ldr	r3, [pc, #260]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 800395c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0ef      	beq.n	8003948 <HAL_RCC_OscConfig+0x3ec>
 8003968:	e01b      	b.n	80039a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800396a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 800396c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003970:	4a3b      	ldr	r2, [pc, #236]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003972:	f023 0301 	bic.w	r3, r3, #1
 8003976:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397a:	f7fe ff1f 	bl	80027bc <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003982:	f7fe ff1b 	bl	80027bc <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e1ef      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003994:	4b32      	ldr	r3, [pc, #200]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1ef      	bne.n	8003982 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80a6 	beq.w	8003afc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b0:	2300      	movs	r3, #0
 80039b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80039b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10d      	bne.n	80039dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c0:	4b27      	ldr	r3, [pc, #156]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80039c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c4:	4a26      	ldr	r2, [pc, #152]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80039c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80039cc:	4b24      	ldr	r3, [pc, #144]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80039ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d4:	60bb      	str	r3, [r7, #8]
 80039d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d8:	2301      	movs	r3, #1
 80039da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039dc:	4b21      	ldr	r3, [pc, #132]	@ (8003a64 <HAL_RCC_OscConfig+0x508>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d118      	bne.n	8003a1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003a64 <HAL_RCC_OscConfig+0x508>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003a64 <HAL_RCC_OscConfig+0x508>)
 80039ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039f4:	f7fe fee2 	bl	80027bc <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039fc:	f7fe fede 	bl	80027bc <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e1b2      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a0e:	4b15      	ldr	r3, [pc, #84]	@ (8003a64 <HAL_RCC_OscConfig+0x508>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d108      	bne.n	8003a34 <HAL_RCC_OscConfig+0x4d8>
 8003a22:	4b0f      	ldr	r3, [pc, #60]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a28:	4a0d      	ldr	r2, [pc, #52]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a32:	e029      	b.n	8003a88 <HAL_RCC_OscConfig+0x52c>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b05      	cmp	r3, #5
 8003a3a:	d115      	bne.n	8003a68 <HAL_RCC_OscConfig+0x50c>
 8003a3c:	4b08      	ldr	r3, [pc, #32]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a42:	4a07      	ldr	r2, [pc, #28]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003a44:	f043 0304 	orr.w	r3, r3, #4
 8003a48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a4c:	4b04      	ldr	r3, [pc, #16]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a52:	4a03      	ldr	r2, [pc, #12]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a5c:	e014      	b.n	8003a88 <HAL_RCC_OscConfig+0x52c>
 8003a5e:	bf00      	nop
 8003a60:	40021000 	.word	0x40021000
 8003a64:	40007000 	.word	0x40007000
 8003a68:	4b9a      	ldr	r3, [pc, #616]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6e:	4a99      	ldr	r2, [pc, #612]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a78:	4b96      	ldr	r3, [pc, #600]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7e:	4a95      	ldr	r2, [pc, #596]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003a80:	f023 0304 	bic.w	r3, r3, #4
 8003a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d016      	beq.n	8003abe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a90:	f7fe fe94 	bl	80027bc <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a98:	f7fe fe90 	bl	80027bc <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e162      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aae:	4b89      	ldr	r3, [pc, #548]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0ed      	beq.n	8003a98 <HAL_RCC_OscConfig+0x53c>
 8003abc:	e015      	b.n	8003aea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abe:	f7fe fe7d 	bl	80027bc <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ac4:	e00a      	b.n	8003adc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac6:	f7fe fe79 	bl	80027bc <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e14b      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003adc:	4b7d      	ldr	r3, [pc, #500]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1ed      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aea:	7ffb      	ldrb	r3, [r7, #31]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d105      	bne.n	8003afc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af0:	4b78      	ldr	r3, [pc, #480]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af4:	4a77      	ldr	r2, [pc, #476]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003afa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d03c      	beq.n	8003b82 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d01c      	beq.n	8003b4a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b10:	4b70      	ldr	r3, [pc, #448]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003b12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b16:	4a6f      	ldr	r2, [pc, #444]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b20:	f7fe fe4c 	bl	80027bc <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b28:	f7fe fe48 	bl	80027bc <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e11c      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b3a:	4b66      	ldr	r3, [pc, #408]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003b3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0ef      	beq.n	8003b28 <HAL_RCC_OscConfig+0x5cc>
 8003b48:	e01b      	b.n	8003b82 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b4a:	4b62      	ldr	r3, [pc, #392]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003b4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b50:	4a60      	ldr	r2, [pc, #384]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5a:	f7fe fe2f 	bl	80027bc <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b62:	f7fe fe2b 	bl	80027bc <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e0ff      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b74:	4b57      	ldr	r3, [pc, #348]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1ef      	bne.n	8003b62 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80f3 	beq.w	8003d72 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	f040 80c9 	bne.w	8003d28 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b96:	4b4f      	ldr	r3, [pc, #316]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f003 0203 	and.w	r2, r3, #3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d12c      	bne.n	8003c04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d123      	bne.n	8003c04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d11b      	bne.n	8003c04 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d113      	bne.n	8003c04 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	3b01      	subs	r3, #1
 8003bea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d109      	bne.n	8003c04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	085b      	lsrs	r3, r3, #1
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d06b      	beq.n	8003cdc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	2b0c      	cmp	r3, #12
 8003c08:	d062      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c0a:	4b32      	ldr	r3, [pc, #200]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e0ac      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003c20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c24:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c26:	f7fe fdc9 	bl	80027bc <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2e:	f7fe fdc5 	bl	80027bc <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e099      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c40:	4b24      	ldr	r3, [pc, #144]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1f0      	bne.n	8003c2e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c4c:	4b21      	ldr	r3, [pc, #132]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	4b21      	ldr	r3, [pc, #132]	@ (8003cd8 <HAL_RCC_OscConfig+0x77c>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c5c:	3a01      	subs	r2, #1
 8003c5e:	0112      	lsls	r2, r2, #4
 8003c60:	4311      	orrs	r1, r2
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c66:	0212      	lsls	r2, r2, #8
 8003c68:	4311      	orrs	r1, r2
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c6e:	0852      	lsrs	r2, r2, #1
 8003c70:	3a01      	subs	r2, #1
 8003c72:	0552      	lsls	r2, r2, #21
 8003c74:	4311      	orrs	r1, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c7a:	0852      	lsrs	r2, r2, #1
 8003c7c:	3a01      	subs	r2, #1
 8003c7e:	0652      	lsls	r2, r2, #25
 8003c80:	4311      	orrs	r1, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c86:	06d2      	lsls	r2, r2, #27
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	4912      	ldr	r1, [pc, #72]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c90:	4b10      	ldr	r3, [pc, #64]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a0f      	ldr	r2, [pc, #60]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003c96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003ca2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ca6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ca8:	f7fe fd88 	bl	80027bc <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb0:	f7fe fd84 	bl	80027bc <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e058      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc2:	4b04      	ldr	r3, [pc, #16]	@ (8003cd4 <HAL_RCC_OscConfig+0x778>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cce:	e050      	b.n	8003d72 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e04f      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cdc:	4b27      	ldr	r3, [pc, #156]	@ (8003d7c <HAL_RCC_OscConfig+0x820>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d144      	bne.n	8003d72 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ce8:	4b24      	ldr	r3, [pc, #144]	@ (8003d7c <HAL_RCC_OscConfig+0x820>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a23      	ldr	r2, [pc, #140]	@ (8003d7c <HAL_RCC_OscConfig+0x820>)
 8003cee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cf2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cf4:	4b21      	ldr	r3, [pc, #132]	@ (8003d7c <HAL_RCC_OscConfig+0x820>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	4a20      	ldr	r2, [pc, #128]	@ (8003d7c <HAL_RCC_OscConfig+0x820>)
 8003cfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cfe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d00:	f7fe fd5c 	bl	80027bc <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d08:	f7fe fd58 	bl	80027bc <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e02c      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d1a:	4b18      	ldr	r3, [pc, #96]	@ (8003d7c <HAL_RCC_OscConfig+0x820>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0x7ac>
 8003d26:	e024      	b.n	8003d72 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	2b0c      	cmp	r3, #12
 8003d2c:	d01f      	beq.n	8003d6e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2e:	4b13      	ldr	r3, [pc, #76]	@ (8003d7c <HAL_RCC_OscConfig+0x820>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a12      	ldr	r2, [pc, #72]	@ (8003d7c <HAL_RCC_OscConfig+0x820>)
 8003d34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3a:	f7fe fd3f 	bl	80027bc <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d42:	f7fe fd3b 	bl	80027bc <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e00f      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d54:	4b09      	ldr	r3, [pc, #36]	@ (8003d7c <HAL_RCC_OscConfig+0x820>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f0      	bne.n	8003d42 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003d60:	4b06      	ldr	r3, [pc, #24]	@ (8003d7c <HAL_RCC_OscConfig+0x820>)
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	4905      	ldr	r1, [pc, #20]	@ (8003d7c <HAL_RCC_OscConfig+0x820>)
 8003d66:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <HAL_RCC_OscConfig+0x824>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	60cb      	str	r3, [r1, #12]
 8003d6c:	e001      	b.n	8003d72 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3720      	adds	r7, #32
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	feeefffc 	.word	0xfeeefffc

08003d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0e7      	b.n	8003f68 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d98:	4b75      	ldr	r3, [pc, #468]	@ (8003f70 <HAL_RCC_ClockConfig+0x1ec>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d910      	bls.n	8003dc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b72      	ldr	r3, [pc, #456]	@ (8003f70 <HAL_RCC_ClockConfig+0x1ec>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 0207 	bic.w	r2, r3, #7
 8003dae:	4970      	ldr	r1, [pc, #448]	@ (8003f70 <HAL_RCC_ClockConfig+0x1ec>)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db6:	4b6e      	ldr	r3, [pc, #440]	@ (8003f70 <HAL_RCC_ClockConfig+0x1ec>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d001      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0cf      	b.n	8003f68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d010      	beq.n	8003df6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	4b66      	ldr	r3, [pc, #408]	@ (8003f74 <HAL_RCC_ClockConfig+0x1f0>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d908      	bls.n	8003df6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de4:	4b63      	ldr	r3, [pc, #396]	@ (8003f74 <HAL_RCC_ClockConfig+0x1f0>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	4960      	ldr	r1, [pc, #384]	@ (8003f74 <HAL_RCC_ClockConfig+0x1f0>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d04c      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d107      	bne.n	8003e1a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e0a:	4b5a      	ldr	r3, [pc, #360]	@ (8003f74 <HAL_RCC_ClockConfig+0x1f0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d121      	bne.n	8003e5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e0a6      	b.n	8003f68 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d107      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e22:	4b54      	ldr	r3, [pc, #336]	@ (8003f74 <HAL_RCC_ClockConfig+0x1f0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d115      	bne.n	8003e5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e09a      	b.n	8003f68 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d107      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e3a:	4b4e      	ldr	r3, [pc, #312]	@ (8003f74 <HAL_RCC_ClockConfig+0x1f0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d109      	bne.n	8003e5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e08e      	b.n	8003f68 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f74 <HAL_RCC_ClockConfig+0x1f0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e086      	b.n	8003f68 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e5a:	4b46      	ldr	r3, [pc, #280]	@ (8003f74 <HAL_RCC_ClockConfig+0x1f0>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f023 0203 	bic.w	r2, r3, #3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	4943      	ldr	r1, [pc, #268]	@ (8003f74 <HAL_RCC_ClockConfig+0x1f0>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e6c:	f7fe fca6 	bl	80027bc <HAL_GetTick>
 8003e70:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e72:	e00a      	b.n	8003e8a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e74:	f7fe fca2 	bl	80027bc <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e06e      	b.n	8003f68 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8a:	4b3a      	ldr	r3, [pc, #232]	@ (8003f74 <HAL_RCC_ClockConfig+0x1f0>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 020c 	and.w	r2, r3, #12
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d1eb      	bne.n	8003e74 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d010      	beq.n	8003eca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	4b31      	ldr	r3, [pc, #196]	@ (8003f74 <HAL_RCC_ClockConfig+0x1f0>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d208      	bcs.n	8003eca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb8:	4b2e      	ldr	r3, [pc, #184]	@ (8003f74 <HAL_RCC_ClockConfig+0x1f0>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	492b      	ldr	r1, [pc, #172]	@ (8003f74 <HAL_RCC_ClockConfig+0x1f0>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003eca:	4b29      	ldr	r3, [pc, #164]	@ (8003f70 <HAL_RCC_ClockConfig+0x1ec>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d210      	bcs.n	8003efa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed8:	4b25      	ldr	r3, [pc, #148]	@ (8003f70 <HAL_RCC_ClockConfig+0x1ec>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f023 0207 	bic.w	r2, r3, #7
 8003ee0:	4923      	ldr	r1, [pc, #140]	@ (8003f70 <HAL_RCC_ClockConfig+0x1ec>)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee8:	4b21      	ldr	r3, [pc, #132]	@ (8003f70 <HAL_RCC_ClockConfig+0x1ec>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d001      	beq.n	8003efa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e036      	b.n	8003f68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d008      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f06:	4b1b      	ldr	r3, [pc, #108]	@ (8003f74 <HAL_RCC_ClockConfig+0x1f0>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	4918      	ldr	r1, [pc, #96]	@ (8003f74 <HAL_RCC_ClockConfig+0x1f0>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d009      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f24:	4b13      	ldr	r3, [pc, #76]	@ (8003f74 <HAL_RCC_ClockConfig+0x1f0>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4910      	ldr	r1, [pc, #64]	@ (8003f74 <HAL_RCC_ClockConfig+0x1f0>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f38:	f000 f858 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f74 <HAL_RCC_ClockConfig+0x1f0>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	091b      	lsrs	r3, r3, #4
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	490b      	ldr	r1, [pc, #44]	@ (8003f78 <HAL_RCC_ClockConfig+0x1f4>)
 8003f4a:	5ccb      	ldrb	r3, [r1, r3]
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
 8003f54:	4a09      	ldr	r2, [pc, #36]	@ (8003f7c <HAL_RCC_ClockConfig+0x1f8>)
 8003f56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f58:	4b09      	ldr	r3, [pc, #36]	@ (8003f80 <HAL_RCC_ClockConfig+0x1fc>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fe f83d 	bl	8001fdc <HAL_InitTick>
 8003f62:	4603      	mov	r3, r0
 8003f64:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f66:	7afb      	ldrb	r3, [r7, #11]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40022000 	.word	0x40022000
 8003f74:	40021000 	.word	0x40021000
 8003f78:	0800d294 	.word	0x0800d294
 8003f7c:	20000000 	.word	0x20000000
 8003f80:	20000004 	.word	0x20000004

08003f84 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08a      	sub	sp, #40	@ 0x28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8003f90:	4b15      	ldr	r3, [pc, #84]	@ (8003fe8 <HAL_RCC_MCOConfig+0x64>)
 8003f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f94:	4a14      	ldr	r2, [pc, #80]	@ (8003fe8 <HAL_RCC_MCOConfig+0x64>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f9c:	4b12      	ldr	r3, [pc, #72]	@ (8003fe8 <HAL_RCC_MCOConfig+0x64>)
 8003f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	613b      	str	r3, [r7, #16]
 8003fa6:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8003fa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fae:	2302      	movs	r3, #2
 8003fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003fbe:	f107 0314 	add.w	r3, r7, #20
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fc8:	f7ff f8e2 	bl	8003190 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8003fcc:	4b06      	ldr	r3, [pc, #24]	@ (8003fe8 <HAL_RCC_MCOConfig+0x64>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	430b      	orrs	r3, r1
 8003fda:	4903      	ldr	r1, [pc, #12]	@ (8003fe8 <HAL_RCC_MCOConfig+0x64>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	608b      	str	r3, [r1, #8]
}
 8003fe0:	bf00      	nop
 8003fe2:	3728      	adds	r7, #40	@ 0x28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40021000 	.word	0x40021000

08003fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b089      	sub	sp, #36	@ 0x24
 8003ff0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80040f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
 8004002:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004004:	4b3b      	ldr	r3, [pc, #236]	@ (80040f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0303 	and.w	r3, r3, #3
 800400c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <HAL_RCC_GetSysClockFreq+0x34>
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	2b0c      	cmp	r3, #12
 8004018:	d121      	bne.n	800405e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d11e      	bne.n	800405e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004020:	4b34      	ldr	r3, [pc, #208]	@ (80040f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b00      	cmp	r3, #0
 800402a:	d107      	bne.n	800403c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800402c:	4b31      	ldr	r3, [pc, #196]	@ (80040f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800402e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004032:	0a1b      	lsrs	r3, r3, #8
 8004034:	f003 030f 	and.w	r3, r3, #15
 8004038:	61fb      	str	r3, [r7, #28]
 800403a:	e005      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800403c:	4b2d      	ldr	r3, [pc, #180]	@ (80040f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	091b      	lsrs	r3, r3, #4
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004048:	4a2b      	ldr	r2, [pc, #172]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004050:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10d      	bne.n	8004074 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800405c:	e00a      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	2b04      	cmp	r3, #4
 8004062:	d102      	bne.n	800406a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004064:	4b25      	ldr	r3, [pc, #148]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x110>)
 8004066:	61bb      	str	r3, [r7, #24]
 8004068:	e004      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2b08      	cmp	r3, #8
 800406e:	d101      	bne.n	8004074 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004070:	4b23      	ldr	r3, [pc, #140]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x114>)
 8004072:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	2b0c      	cmp	r3, #12
 8004078:	d134      	bne.n	80040e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800407a:	4b1e      	ldr	r3, [pc, #120]	@ (80040f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d003      	beq.n	8004092 <HAL_RCC_GetSysClockFreq+0xa6>
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b03      	cmp	r3, #3
 800408e:	d003      	beq.n	8004098 <HAL_RCC_GetSysClockFreq+0xac>
 8004090:	e005      	b.n	800409e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004092:	4b1a      	ldr	r3, [pc, #104]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x110>)
 8004094:	617b      	str	r3, [r7, #20]
      break;
 8004096:	e005      	b.n	80040a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004098:	4b19      	ldr	r3, [pc, #100]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x114>)
 800409a:	617b      	str	r3, [r7, #20]
      break;
 800409c:	e002      	b.n	80040a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	617b      	str	r3, [r7, #20]
      break;
 80040a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040a4:	4b13      	ldr	r3, [pc, #76]	@ (80040f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	091b      	lsrs	r3, r3, #4
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	3301      	adds	r3, #1
 80040b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040b2:	4b10      	ldr	r3, [pc, #64]	@ (80040f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	0a1b      	lsrs	r3, r3, #8
 80040b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	fb03 f202 	mul.w	r2, r3, r2
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040ca:	4b0a      	ldr	r3, [pc, #40]	@ (80040f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	0e5b      	lsrs	r3, r3, #25
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	3301      	adds	r3, #1
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040e4:	69bb      	ldr	r3, [r7, #24]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3724      	adds	r7, #36	@ 0x24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	40021000 	.word	0x40021000
 80040f8:	0800d2ac 	.word	0x0800d2ac
 80040fc:	00f42400 	.word	0x00f42400
 8004100:	007a1200 	.word	0x007a1200

08004104 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004108:	4b03      	ldr	r3, [pc, #12]	@ (8004118 <HAL_RCC_GetHCLKFreq+0x14>)
 800410a:	681b      	ldr	r3, [r3, #0]
}
 800410c:	4618      	mov	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000000 	.word	0x20000000

0800411c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004120:	f7ff fff0 	bl	8004104 <HAL_RCC_GetHCLKFreq>
 8004124:	4602      	mov	r2, r0
 8004126:	4b06      	ldr	r3, [pc, #24]	@ (8004140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	0a1b      	lsrs	r3, r3, #8
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	4904      	ldr	r1, [pc, #16]	@ (8004144 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004132:	5ccb      	ldrb	r3, [r1, r3]
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800413c:	4618      	mov	r0, r3
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40021000 	.word	0x40021000
 8004144:	0800d2a4 	.word	0x0800d2a4

08004148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800414c:	f7ff ffda 	bl	8004104 <HAL_RCC_GetHCLKFreq>
 8004150:	4602      	mov	r2, r0
 8004152:	4b06      	ldr	r3, [pc, #24]	@ (800416c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	0adb      	lsrs	r3, r3, #11
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	4904      	ldr	r1, [pc, #16]	@ (8004170 <HAL_RCC_GetPCLK2Freq+0x28>)
 800415e:	5ccb      	ldrb	r3, [r1, r3]
 8004160:	f003 031f 	and.w	r3, r3, #31
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004168:	4618      	mov	r0, r3
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40021000 	.word	0x40021000
 8004170:	0800d2a4 	.word	0x0800d2a4

08004174 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	220f      	movs	r2, #15
 8004182:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004184:	4b12      	ldr	r3, [pc, #72]	@ (80041d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 0203 	and.w	r2, r3, #3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004190:	4b0f      	ldr	r3, [pc, #60]	@ (80041d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800419c:	4b0c      	ldr	r3, [pc, #48]	@ (80041d0 <HAL_RCC_GetClockConfig+0x5c>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80041a8:	4b09      	ldr	r3, [pc, #36]	@ (80041d0 <HAL_RCC_GetClockConfig+0x5c>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	08db      	lsrs	r3, r3, #3
 80041ae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80041b6:	4b07      	ldr	r3, [pc, #28]	@ (80041d4 <HAL_RCC_GetClockConfig+0x60>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0207 	and.w	r2, r3, #7
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	601a      	str	r2, [r3, #0]
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40022000 	.word	0x40022000

080041d8 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80041dc:	4b05      	ldr	r3, [pc, #20]	@ (80041f4 <HAL_RCC_EnableCSS+0x1c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a04      	ldr	r2, [pc, #16]	@ (80041f4 <HAL_RCC_EnableCSS+0x1c>)
 80041e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80041e6:	6013      	str	r3, [r2, #0]
}
 80041e8:	bf00      	nop
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40021000 	.word	0x40021000

080041f8 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80041fc:	4b07      	ldr	r3, [pc, #28]	@ (800421c <HAL_RCC_NMI_IRQHandler+0x24>)
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004208:	d105      	bne.n	8004216 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800420a:	f000 f809 	bl	8004220 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800420e:	4b03      	ldr	r3, [pc, #12]	@ (800421c <HAL_RCC_NMI_IRQHandler+0x24>)
 8004210:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004214:	621a      	str	r2, [r3, #32]
  }
}
 8004216:	bf00      	nop
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40021000 	.word	0x40021000

08004220 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
	...

08004230 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004238:	2300      	movs	r3, #0
 800423a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800423c:	4b2a      	ldr	r3, [pc, #168]	@ (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800423e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004248:	f7ff f924 	bl	8003494 <HAL_PWREx_GetVoltageRange>
 800424c:	6178      	str	r0, [r7, #20]
 800424e:	e014      	b.n	800427a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004250:	4b25      	ldr	r3, [pc, #148]	@ (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004254:	4a24      	ldr	r2, [pc, #144]	@ (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800425a:	6593      	str	r3, [r2, #88]	@ 0x58
 800425c:	4b22      	ldr	r3, [pc, #136]	@ (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800425e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004268:	f7ff f914 	bl	8003494 <HAL_PWREx_GetVoltageRange>
 800426c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800426e:	4b1e      	ldr	r3, [pc, #120]	@ (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004272:	4a1d      	ldr	r2, [pc, #116]	@ (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004274:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004278:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004280:	d10b      	bne.n	800429a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b80      	cmp	r3, #128	@ 0x80
 8004286:	d919      	bls.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2ba0      	cmp	r3, #160	@ 0xa0
 800428c:	d902      	bls.n	8004294 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800428e:	2302      	movs	r3, #2
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	e013      	b.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004294:	2301      	movs	r3, #1
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	e010      	b.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b80      	cmp	r3, #128	@ 0x80
 800429e:	d902      	bls.n	80042a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042a0:	2303      	movs	r3, #3
 80042a2:	613b      	str	r3, [r7, #16]
 80042a4:	e00a      	b.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b80      	cmp	r3, #128	@ 0x80
 80042aa:	d102      	bne.n	80042b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042ac:	2302      	movs	r3, #2
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	e004      	b.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b70      	cmp	r3, #112	@ 0x70
 80042b6:	d101      	bne.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042b8:	2301      	movs	r3, #1
 80042ba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042bc:	4b0b      	ldr	r3, [pc, #44]	@ (80042ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f023 0207 	bic.w	r2, r3, #7
 80042c4:	4909      	ldr	r1, [pc, #36]	@ (80042ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042cc:	4b07      	ldr	r3, [pc, #28]	@ (80042ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d001      	beq.n	80042de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e000      	b.n	80042e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40021000 	.word	0x40021000
 80042ec:	40022000 	.word	0x40022000

080042f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042f8:	2300      	movs	r3, #0
 80042fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042fc:	2300      	movs	r3, #0
 80042fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004308:	2b00      	cmp	r3, #0
 800430a:	d031      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004310:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004314:	d01a      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004316:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800431a:	d814      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800431c:	2b00      	cmp	r3, #0
 800431e:	d009      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004320:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004324:	d10f      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004326:	4b5d      	ldr	r3, [pc, #372]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	4a5c      	ldr	r2, [pc, #368]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800432c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004330:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004332:	e00c      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3304      	adds	r3, #4
 8004338:	2100      	movs	r1, #0
 800433a:	4618      	mov	r0, r3
 800433c:	f000 f9ce 	bl	80046dc <RCCEx_PLLSAI1_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004344:	e003      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	74fb      	strb	r3, [r7, #19]
      break;
 800434a:	e000      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800434c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800434e:	7cfb      	ldrb	r3, [r7, #19]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10b      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004354:	4b51      	ldr	r3, [pc, #324]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004362:	494e      	ldr	r1, [pc, #312]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800436a:	e001      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800436c:	7cfb      	ldrb	r3, [r7, #19]
 800436e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 809e 	beq.w	80044ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800437e:	2300      	movs	r3, #0
 8004380:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004382:	4b46      	ldr	r3, [pc, #280]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004392:	2300      	movs	r3, #0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00d      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004398:	4b40      	ldr	r3, [pc, #256]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800439a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800439c:	4a3f      	ldr	r2, [pc, #252]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800439e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80043a4:	4b3d      	ldr	r3, [pc, #244]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ac:	60bb      	str	r3, [r7, #8]
 80043ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b0:	2301      	movs	r3, #1
 80043b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043b4:	4b3a      	ldr	r3, [pc, #232]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a39      	ldr	r2, [pc, #228]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043c0:	f7fe f9fc 	bl	80027bc <HAL_GetTick>
 80043c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043c6:	e009      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c8:	f7fe f9f8 	bl	80027bc <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d902      	bls.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	74fb      	strb	r3, [r7, #19]
        break;
 80043da:	e005      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043dc:	4b30      	ldr	r3, [pc, #192]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0ef      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80043e8:	7cfb      	ldrb	r3, [r7, #19]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d15a      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043ee:	4b2b      	ldr	r3, [pc, #172]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01e      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	429a      	cmp	r2, r3
 8004408:	d019      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800440a:	4b24      	ldr	r3, [pc, #144]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800440c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004414:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004416:	4b21      	ldr	r3, [pc, #132]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800441c:	4a1f      	ldr	r2, [pc, #124]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800441e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004422:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004426:	4b1d      	ldr	r3, [pc, #116]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442c:	4a1b      	ldr	r2, [pc, #108]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800442e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004432:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004436:	4a19      	ldr	r2, [pc, #100]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d016      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004448:	f7fe f9b8 	bl	80027bc <HAL_GetTick>
 800444c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800444e:	e00b      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004450:	f7fe f9b4 	bl	80027bc <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800445e:	4293      	cmp	r3, r2
 8004460:	d902      	bls.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	74fb      	strb	r3, [r7, #19]
            break;
 8004466:	e006      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004468:	4b0c      	ldr	r3, [pc, #48]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800446a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0ec      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004476:	7cfb      	ldrb	r3, [r7, #19]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10b      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800447c:	4b07      	ldr	r3, [pc, #28]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004482:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800448a:	4904      	ldr	r1, [pc, #16]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004492:	e009      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004494:	7cfb      	ldrb	r3, [r7, #19]
 8004496:	74bb      	strb	r3, [r7, #18]
 8004498:	e006      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800449a:	bf00      	nop
 800449c:	40021000 	.word	0x40021000
 80044a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a4:	7cfb      	ldrb	r3, [r7, #19]
 80044a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044a8:	7c7b      	ldrb	r3, [r7, #17]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d105      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ae:	4b8a      	ldr	r3, [pc, #552]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b2:	4a89      	ldr	r2, [pc, #548]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044c6:	4b84      	ldr	r3, [pc, #528]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044cc:	f023 0203 	bic.w	r2, r3, #3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	4980      	ldr	r1, [pc, #512]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00a      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044e8:	4b7b      	ldr	r3, [pc, #492]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ee:	f023 020c 	bic.w	r2, r3, #12
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	4978      	ldr	r1, [pc, #480]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0320 	and.w	r3, r3, #32
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800450a:	4b73      	ldr	r3, [pc, #460]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800450c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004510:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004518:	496f      	ldr	r1, [pc, #444]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800452c:	4b6a      	ldr	r3, [pc, #424]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004532:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800453a:	4967      	ldr	r1, [pc, #412]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800454e:	4b62      	ldr	r3, [pc, #392]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004554:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455c:	495e      	ldr	r1, [pc, #376]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004570:	4b59      	ldr	r3, [pc, #356]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004576:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457e:	4956      	ldr	r1, [pc, #344]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004592:	4b51      	ldr	r3, [pc, #324]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004598:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a0:	494d      	ldr	r1, [pc, #308]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d028      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045b4:	4b48      	ldr	r3, [pc, #288]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c2:	4945      	ldr	r1, [pc, #276]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045d2:	d106      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045d4:	4b40      	ldr	r3, [pc, #256]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	4a3f      	ldr	r2, [pc, #252]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045de:	60d3      	str	r3, [r2, #12]
 80045e0:	e011      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045ea:	d10c      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3304      	adds	r3, #4
 80045f0:	2101      	movs	r1, #1
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 f872 	bl	80046dc <RCCEx_PLLSAI1_Config>
 80045f8:	4603      	mov	r3, r0
 80045fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045fc:	7cfb      	ldrb	r3, [r7, #19]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004602:	7cfb      	ldrb	r3, [r7, #19]
 8004604:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d028      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004612:	4b31      	ldr	r3, [pc, #196]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004618:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004620:	492d      	ldr	r1, [pc, #180]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004630:	d106      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004632:	4b29      	ldr	r3, [pc, #164]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	4a28      	ldr	r2, [pc, #160]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004638:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800463c:	60d3      	str	r3, [r2, #12]
 800463e:	e011      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004644:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004648:	d10c      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3304      	adds	r3, #4
 800464e:	2101      	movs	r1, #1
 8004650:	4618      	mov	r0, r3
 8004652:	f000 f843 	bl	80046dc <RCCEx_PLLSAI1_Config>
 8004656:	4603      	mov	r3, r0
 8004658:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800465a:	7cfb      	ldrb	r3, [r7, #19]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004660:	7cfb      	ldrb	r3, [r7, #19]
 8004662:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01c      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004670:	4b19      	ldr	r3, [pc, #100]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004676:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800467e:	4916      	ldr	r1, [pc, #88]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800468a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800468e:	d10c      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3304      	adds	r3, #4
 8004694:	2102      	movs	r1, #2
 8004696:	4618      	mov	r0, r3
 8004698:	f000 f820 	bl	80046dc <RCCEx_PLLSAI1_Config>
 800469c:	4603      	mov	r3, r0
 800469e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046a0:	7cfb      	ldrb	r3, [r7, #19]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80046a6:	7cfb      	ldrb	r3, [r7, #19]
 80046a8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046b6:	4b08      	ldr	r3, [pc, #32]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046bc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046c4:	4904      	ldr	r1, [pc, #16]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40021000 	.word	0x40021000

080046dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046ea:	4b74      	ldr	r3, [pc, #464]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d018      	beq.n	8004728 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046f6:	4b71      	ldr	r3, [pc, #452]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f003 0203 	and.w	r2, r3, #3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d10d      	bne.n	8004722 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
       ||
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800470e:	4b6b      	ldr	r3, [pc, #428]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	091b      	lsrs	r3, r3, #4
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
       ||
 800471e:	429a      	cmp	r2, r3
 8004720:	d047      	beq.n	80047b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	73fb      	strb	r3, [r7, #15]
 8004726:	e044      	b.n	80047b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d018      	beq.n	8004762 <RCCEx_PLLSAI1_Config+0x86>
 8004730:	2b03      	cmp	r3, #3
 8004732:	d825      	bhi.n	8004780 <RCCEx_PLLSAI1_Config+0xa4>
 8004734:	2b01      	cmp	r3, #1
 8004736:	d002      	beq.n	800473e <RCCEx_PLLSAI1_Config+0x62>
 8004738:	2b02      	cmp	r3, #2
 800473a:	d009      	beq.n	8004750 <RCCEx_PLLSAI1_Config+0x74>
 800473c:	e020      	b.n	8004780 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800473e:	4b5f      	ldr	r3, [pc, #380]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d11d      	bne.n	8004786 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800474e:	e01a      	b.n	8004786 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004750:	4b5a      	ldr	r3, [pc, #360]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004758:	2b00      	cmp	r3, #0
 800475a:	d116      	bne.n	800478a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004760:	e013      	b.n	800478a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004762:	4b56      	ldr	r3, [pc, #344]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10f      	bne.n	800478e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800476e:	4b53      	ldr	r3, [pc, #332]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d109      	bne.n	800478e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800477e:	e006      	b.n	800478e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
      break;
 8004784:	e004      	b.n	8004790 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004786:	bf00      	nop
 8004788:	e002      	b.n	8004790 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800478a:	bf00      	nop
 800478c:	e000      	b.n	8004790 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800478e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10d      	bne.n	80047b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004796:	4b49      	ldr	r3, [pc, #292]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6819      	ldr	r1, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	430b      	orrs	r3, r1
 80047ac:	4943      	ldr	r1, [pc, #268]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d17c      	bne.n	80048b2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047b8:	4b40      	ldr	r3, [pc, #256]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a3f      	ldr	r2, [pc, #252]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c4:	f7fd fffa 	bl	80027bc <HAL_GetTick>
 80047c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047ca:	e009      	b.n	80047e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047cc:	f7fd fff6 	bl	80027bc <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d902      	bls.n	80047e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	73fb      	strb	r3, [r7, #15]
        break;
 80047de:	e005      	b.n	80047ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047e0:	4b36      	ldr	r3, [pc, #216]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1ef      	bne.n	80047cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d15f      	bne.n	80048b2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d110      	bne.n	800481a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047f8:	4b30      	ldr	r3, [pc, #192]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004800:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6892      	ldr	r2, [r2, #8]
 8004808:	0211      	lsls	r1, r2, #8
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68d2      	ldr	r2, [r2, #12]
 800480e:	06d2      	lsls	r2, r2, #27
 8004810:	430a      	orrs	r2, r1
 8004812:	492a      	ldr	r1, [pc, #168]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004814:	4313      	orrs	r3, r2
 8004816:	610b      	str	r3, [r1, #16]
 8004818:	e027      	b.n	800486a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d112      	bne.n	8004846 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004820:	4b26      	ldr	r3, [pc, #152]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004828:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6892      	ldr	r2, [r2, #8]
 8004830:	0211      	lsls	r1, r2, #8
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6912      	ldr	r2, [r2, #16]
 8004836:	0852      	lsrs	r2, r2, #1
 8004838:	3a01      	subs	r2, #1
 800483a:	0552      	lsls	r2, r2, #21
 800483c:	430a      	orrs	r2, r1
 800483e:	491f      	ldr	r1, [pc, #124]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004840:	4313      	orrs	r3, r2
 8004842:	610b      	str	r3, [r1, #16]
 8004844:	e011      	b.n	800486a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004846:	4b1d      	ldr	r3, [pc, #116]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800484e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6892      	ldr	r2, [r2, #8]
 8004856:	0211      	lsls	r1, r2, #8
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6952      	ldr	r2, [r2, #20]
 800485c:	0852      	lsrs	r2, r2, #1
 800485e:	3a01      	subs	r2, #1
 8004860:	0652      	lsls	r2, r2, #25
 8004862:	430a      	orrs	r2, r1
 8004864:	4915      	ldr	r1, [pc, #84]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004866:	4313      	orrs	r3, r2
 8004868:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800486a:	4b14      	ldr	r3, [pc, #80]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a13      	ldr	r2, [pc, #76]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004870:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004874:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004876:	f7fd ffa1 	bl	80027bc <HAL_GetTick>
 800487a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800487c:	e009      	b.n	8004892 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800487e:	f7fd ff9d 	bl	80027bc <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d902      	bls.n	8004892 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	73fb      	strb	r3, [r7, #15]
          break;
 8004890:	e005      	b.n	800489e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004892:	4b0a      	ldr	r3, [pc, #40]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0ef      	beq.n	800487e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048a4:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	4903      	ldr	r1, [pc, #12]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40021000 	.word	0x40021000

080048c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e095      	b.n	80049fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d108      	bne.n	80048ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048e2:	d009      	beq.n	80048f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	61da      	str	r2, [r3, #28]
 80048ea:	e005      	b.n	80048f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fd faf8 	bl	8001f08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800492e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004938:	d902      	bls.n	8004940 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	e002      	b.n	8004946 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004940:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004944:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800494e:	d007      	beq.n	8004960 <HAL_SPI_Init+0xa0>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004958:	d002      	beq.n	8004960 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a2:	ea42 0103 	orr.w	r1, r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049aa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	0c1b      	lsrs	r3, r3, #16
 80049bc:	f003 0204 	and.w	r2, r3, #4
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c4:	f003 0310 	and.w	r3, r3, #16
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80049dc:	ea42 0103 	orr.w	r1, r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b088      	sub	sp, #32
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	60f8      	str	r0, [r7, #12]
 8004a0e:	60b9      	str	r1, [r7, #8]
 8004a10:	603b      	str	r3, [r7, #0]
 8004a12:	4613      	mov	r3, r2
 8004a14:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a16:	f7fd fed1 	bl	80027bc <HAL_GetTick>
 8004a1a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004a1c:	88fb      	ldrh	r3, [r7, #6]
 8004a1e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d001      	beq.n	8004a30 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e15c      	b.n	8004cea <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <HAL_SPI_Transmit+0x36>
 8004a36:	88fb      	ldrh	r3, [r7, #6]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e154      	b.n	8004cea <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <HAL_SPI_Transmit+0x48>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e14d      	b.n	8004cea <HAL_SPI_Transmit+0x2e4>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2203      	movs	r2, #3
 8004a5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	88fa      	ldrh	r2, [r7, #6]
 8004a6e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	88fa      	ldrh	r2, [r7, #6]
 8004a74:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aa0:	d10f      	bne.n	8004ac2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ab0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ac0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004acc:	2b40      	cmp	r3, #64	@ 0x40
 8004ace:	d007      	beq.n	8004ae0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ade:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ae8:	d952      	bls.n	8004b90 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <HAL_SPI_Transmit+0xf2>
 8004af2:	8b7b      	ldrh	r3, [r7, #26]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d145      	bne.n	8004b84 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afc:	881a      	ldrh	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b08:	1c9a      	adds	r2, r3, #2
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b1c:	e032      	b.n	8004b84 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d112      	bne.n	8004b52 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b30:	881a      	ldrh	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3c:	1c9a      	adds	r2, r3, #2
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b50:	e018      	b.n	8004b84 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b52:	f7fd fe33 	bl	80027bc <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d803      	bhi.n	8004b6a <HAL_SPI_Transmit+0x164>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b68:	d102      	bne.n	8004b70 <HAL_SPI_Transmit+0x16a>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d109      	bne.n	8004b84 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e0b2      	b.n	8004cea <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1c7      	bne.n	8004b1e <HAL_SPI_Transmit+0x118>
 8004b8e:	e083      	b.n	8004c98 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <HAL_SPI_Transmit+0x198>
 8004b98:	8b7b      	ldrh	r3, [r7, #26]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d177      	bne.n	8004c8e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d912      	bls.n	8004bce <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bac:	881a      	ldrh	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb8:	1c9a      	adds	r2, r3, #2
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b02      	subs	r3, #2
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bcc:	e05f      	b.n	8004c8e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	330c      	adds	r3, #12
 8004bd8:	7812      	ldrb	r2, [r2, #0]
 8004bda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004bf4:	e04b      	b.n	8004c8e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d12b      	bne.n	8004c5c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d912      	bls.n	8004c34 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c12:	881a      	ldrh	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1e:	1c9a      	adds	r2, r3, #2
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b02      	subs	r3, #2
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c32:	e02c      	b.n	8004c8e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	330c      	adds	r3, #12
 8004c3e:	7812      	ldrb	r2, [r2, #0]
 8004c40:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c5a:	e018      	b.n	8004c8e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c5c:	f7fd fdae 	bl	80027bc <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d803      	bhi.n	8004c74 <HAL_SPI_Transmit+0x26e>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c72:	d102      	bne.n	8004c7a <HAL_SPI_Transmit+0x274>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e02d      	b.n	8004cea <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1ae      	bne.n	8004bf6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c98:	69fa      	ldr	r2, [r7, #28]
 8004c9a:	6839      	ldr	r1, [r7, #0]
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 fcf5 	bl	800568c <SPI_EndRxTxTransaction>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10a      	bne.n	8004ccc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
  }
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3720      	adds	r7, #32
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b088      	sub	sp, #32
 8004cf6:	af02      	add	r7, sp, #8
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	603b      	str	r3, [r7, #0]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d001      	beq.n	8004d12 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e123      	b.n	8004f5a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d1a:	d112      	bne.n	8004d42 <HAL_SPI_Receive+0x50>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10e      	bne.n	8004d42 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2204      	movs	r2, #4
 8004d28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d2c:	88fa      	ldrh	r2, [r7, #6]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	4613      	mov	r3, r2
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	68b9      	ldr	r1, [r7, #8]
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f912 	bl	8004f62 <HAL_SPI_TransmitReceive>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	e10b      	b.n	8004f5a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d42:	f7fd fd3b 	bl	80027bc <HAL_GetTick>
 8004d46:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_SPI_Receive+0x62>
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e100      	b.n	8004f5a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d101      	bne.n	8004d66 <HAL_SPI_Receive+0x74>
 8004d62:	2302      	movs	r3, #2
 8004d64:	e0f9      	b.n	8004f5a <HAL_SPI_Receive+0x268>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2204      	movs	r2, #4
 8004d72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	88fa      	ldrh	r2, [r7, #6]
 8004d86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	88fa      	ldrh	r2, [r7, #6]
 8004d8e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004db8:	d908      	bls.n	8004dcc <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004dc8:	605a      	str	r2, [r3, #4]
 8004dca:	e007      	b.n	8004ddc <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004dda:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004de4:	d10f      	bne.n	8004e06 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004df4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004e04:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e10:	2b40      	cmp	r3, #64	@ 0x40
 8004e12:	d007      	beq.n	8004e24 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e22:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e2c:	d875      	bhi.n	8004f1a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e2e:	e037      	b.n	8004ea0 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d117      	bne.n	8004e6e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f103 020c 	add.w	r2, r3, #12
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4a:	7812      	ldrb	r2, [r2, #0]
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004e6c:	e018      	b.n	8004ea0 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e6e:	f7fd fca5 	bl	80027bc <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d803      	bhi.n	8004e86 <HAL_SPI_Receive+0x194>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e84:	d102      	bne.n	8004e8c <HAL_SPI_Receive+0x19a>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d109      	bne.n	8004ea0 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e05c      	b.n	8004f5a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1c1      	bne.n	8004e30 <HAL_SPI_Receive+0x13e>
 8004eac:	e03b      	b.n	8004f26 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d115      	bne.n	8004ee8 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec6:	b292      	uxth	r2, r2
 8004ec8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ece:	1c9a      	adds	r2, r3, #2
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004ee6:	e018      	b.n	8004f1a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ee8:	f7fd fc68 	bl	80027bc <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d803      	bhi.n	8004f00 <HAL_SPI_Receive+0x20e>
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efe:	d102      	bne.n	8004f06 <HAL_SPI_Receive+0x214>
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d109      	bne.n	8004f1a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e01f      	b.n	8004f5a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1c3      	bne.n	8004eae <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	6839      	ldr	r1, [r7, #0]
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 fb56 	bl	80055dc <SPI_EndRxTransaction>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8004f58:	2300      	movs	r3, #0
  }
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b08a      	sub	sp, #40	@ 0x28
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	60f8      	str	r0, [r7, #12]
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	607a      	str	r2, [r7, #4]
 8004f6e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f70:	2301      	movs	r3, #1
 8004f72:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f74:	f7fd fc22 	bl	80027bc <HAL_GetTick>
 8004f78:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f80:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004f88:	887b      	ldrh	r3, [r7, #2]
 8004f8a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004f8c:	887b      	ldrh	r3, [r7, #2]
 8004f8e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f90:	7ffb      	ldrb	r3, [r7, #31]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d00c      	beq.n	8004fb0 <HAL_SPI_TransmitReceive+0x4e>
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f9c:	d106      	bne.n	8004fac <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d102      	bne.n	8004fac <HAL_SPI_TransmitReceive+0x4a>
 8004fa6:	7ffb      	ldrb	r3, [r7, #31]
 8004fa8:	2b04      	cmp	r3, #4
 8004faa:	d001      	beq.n	8004fb0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004fac:	2302      	movs	r3, #2
 8004fae:	e1f3      	b.n	8005398 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <HAL_SPI_TransmitReceive+0x60>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <HAL_SPI_TransmitReceive+0x60>
 8004fbc:	887b      	ldrh	r3, [r7, #2]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e1e8      	b.n	8005398 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_SPI_TransmitReceive+0x72>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e1e1      	b.n	8005398 <HAL_SPI_TransmitReceive+0x436>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d003      	beq.n	8004ff0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2205      	movs	r2, #5
 8004fec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	887a      	ldrh	r2, [r7, #2]
 8005000:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	887a      	ldrh	r2, [r7, #2]
 8005008:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	887a      	ldrh	r2, [r7, #2]
 8005016:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	887a      	ldrh	r2, [r7, #2]
 800501c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005032:	d802      	bhi.n	800503a <HAL_SPI_TransmitReceive+0xd8>
 8005034:	8abb      	ldrh	r3, [r7, #20]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d908      	bls.n	800504c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005048:	605a      	str	r2, [r3, #4]
 800504a:	e007      	b.n	800505c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800505a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005066:	2b40      	cmp	r3, #64	@ 0x40
 8005068:	d007      	beq.n	800507a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005078:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005082:	f240 8083 	bls.w	800518c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <HAL_SPI_TransmitReceive+0x132>
 800508e:	8afb      	ldrh	r3, [r7, #22]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d16f      	bne.n	8005174 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005098:	881a      	ldrh	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a4:	1c9a      	adds	r2, r3, #2
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050b8:	e05c      	b.n	8005174 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d11b      	bne.n	8005100 <HAL_SPI_TransmitReceive+0x19e>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d016      	beq.n	8005100 <HAL_SPI_TransmitReceive+0x19e>
 80050d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d113      	bne.n	8005100 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050dc:	881a      	ldrh	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e8:	1c9a      	adds	r2, r3, #2
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b01      	cmp	r3, #1
 800510c:	d11c      	bne.n	8005148 <HAL_SPI_TransmitReceive+0x1e6>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d016      	beq.n	8005148 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005124:	b292      	uxth	r2, r2
 8005126:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512c:	1c9a      	adds	r2, r3, #2
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005144:	2301      	movs	r3, #1
 8005146:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005148:	f7fd fb38 	bl	80027bc <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005154:	429a      	cmp	r2, r3
 8005156:	d80d      	bhi.n	8005174 <HAL_SPI_TransmitReceive+0x212>
 8005158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515e:	d009      	beq.n	8005174 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e111      	b.n	8005398 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005178:	b29b      	uxth	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d19d      	bne.n	80050ba <HAL_SPI_TransmitReceive+0x158>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d197      	bne.n	80050ba <HAL_SPI_TransmitReceive+0x158>
 800518a:	e0e5      	b.n	8005358 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <HAL_SPI_TransmitReceive+0x23a>
 8005194:	8afb      	ldrh	r3, [r7, #22]
 8005196:	2b01      	cmp	r3, #1
 8005198:	f040 80d1 	bne.w	800533e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d912      	bls.n	80051cc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051aa:	881a      	ldrh	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b6:	1c9a      	adds	r2, r3, #2
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b02      	subs	r3, #2
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051ca:	e0b8      	b.n	800533e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	330c      	adds	r3, #12
 80051d6:	7812      	ldrb	r2, [r2, #0]
 80051d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051f2:	e0a4      	b.n	800533e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d134      	bne.n	800526c <HAL_SPI_TransmitReceive+0x30a>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d02f      	beq.n	800526c <HAL_SPI_TransmitReceive+0x30a>
 800520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520e:	2b01      	cmp	r3, #1
 8005210:	d12c      	bne.n	800526c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b01      	cmp	r3, #1
 800521a:	d912      	bls.n	8005242 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005220:	881a      	ldrh	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522c:	1c9a      	adds	r2, r3, #2
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005236:	b29b      	uxth	r3, r3
 8005238:	3b02      	subs	r3, #2
 800523a:	b29a      	uxth	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005240:	e012      	b.n	8005268 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	330c      	adds	r3, #12
 800524c:	7812      	ldrb	r2, [r2, #0]
 800524e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800525e:	b29b      	uxth	r3, r3
 8005260:	3b01      	subs	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b01      	cmp	r3, #1
 8005278:	d148      	bne.n	800530c <HAL_SPI_TransmitReceive+0x3aa>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d042      	beq.n	800530c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b01      	cmp	r3, #1
 8005290:	d923      	bls.n	80052da <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529c:	b292      	uxth	r2, r2
 800529e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a4:	1c9a      	adds	r2, r3, #2
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b02      	subs	r3, #2
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d81f      	bhi.n	8005308 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80052d6:	605a      	str	r2, [r3, #4]
 80052d8:	e016      	b.n	8005308 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f103 020c 	add.w	r2, r3, #12
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e6:	7812      	ldrb	r2, [r2, #0]
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	3b01      	subs	r3, #1
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005308:	2301      	movs	r3, #1
 800530a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800530c:	f7fd fa56 	bl	80027bc <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005318:	429a      	cmp	r2, r3
 800531a:	d803      	bhi.n	8005324 <HAL_SPI_TransmitReceive+0x3c2>
 800531c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005322:	d102      	bne.n	800532a <HAL_SPI_TransmitReceive+0x3c8>
 8005324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005326:	2b00      	cmp	r3, #0
 8005328:	d109      	bne.n	800533e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e02c      	b.n	8005398 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005342:	b29b      	uxth	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	f47f af55 	bne.w	80051f4 <HAL_SPI_TransmitReceive+0x292>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	f47f af4e 	bne.w	80051f4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005358:	6a3a      	ldr	r2, [r7, #32]
 800535a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f995 	bl	800568c <SPI_EndRxTxTransaction>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e00e      	b.n	8005398 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e000      	b.n	8005398 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005396:	2300      	movs	r3, #0
  }
}
 8005398:	4618      	mov	r0, r3
 800539a:	3728      	adds	r7, #40	@ 0x28
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	603b      	str	r3, [r7, #0]
 80053ac:	4613      	mov	r3, r2
 80053ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053b0:	f7fd fa04 	bl	80027bc <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b8:	1a9b      	subs	r3, r3, r2
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	4413      	add	r3, r2
 80053be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053c0:	f7fd f9fc 	bl	80027bc <HAL_GetTick>
 80053c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053c6:	4b39      	ldr	r3, [pc, #228]	@ (80054ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	015b      	lsls	r3, r3, #5
 80053cc:	0d1b      	lsrs	r3, r3, #20
 80053ce:	69fa      	ldr	r2, [r7, #28]
 80053d0:	fb02 f303 	mul.w	r3, r2, r3
 80053d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053d6:	e054      	b.n	8005482 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053de:	d050      	beq.n	8005482 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053e0:	f7fd f9ec 	bl	80027bc <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d902      	bls.n	80053f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d13d      	bne.n	8005472 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005404:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800540e:	d111      	bne.n	8005434 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005418:	d004      	beq.n	8005424 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005422:	d107      	bne.n	8005434 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005432:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005438:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800543c:	d10f      	bne.n	800545e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800545c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e017      	b.n	80054a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	3b01      	subs	r3, #1
 8005480:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	4013      	ands	r3, r2
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	429a      	cmp	r2, r3
 8005490:	bf0c      	ite	eq
 8005492:	2301      	moveq	r3, #1
 8005494:	2300      	movne	r3, #0
 8005496:	b2db      	uxtb	r3, r3
 8005498:	461a      	mov	r2, r3
 800549a:	79fb      	ldrb	r3, [r7, #7]
 800549c:	429a      	cmp	r2, r3
 800549e:	d19b      	bne.n	80053d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3720      	adds	r7, #32
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000000 	.word	0x20000000

080054b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08a      	sub	sp, #40	@ 0x28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80054c2:	f7fd f97b 	bl	80027bc <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	4413      	add	r3, r2
 80054d0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80054d2:	f7fd f973 	bl	80027bc <HAL_GetTick>
 80054d6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	330c      	adds	r3, #12
 80054de:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80054e0:	4b3d      	ldr	r3, [pc, #244]	@ (80055d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	4613      	mov	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	00da      	lsls	r2, r3, #3
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	0d1b      	lsrs	r3, r3, #20
 80054f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
 80054f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80054f8:	e060      	b.n	80055bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005500:	d107      	bne.n	8005512 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d104      	bne.n	8005512 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	b2db      	uxtb	r3, r3
 800550e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005510:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005518:	d050      	beq.n	80055bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800551a:	f7fd f94f 	bl	80027bc <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005526:	429a      	cmp	r2, r3
 8005528:	d902      	bls.n	8005530 <SPI_WaitFifoStateUntilTimeout+0x80>
 800552a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552c:	2b00      	cmp	r3, #0
 800552e:	d13d      	bne.n	80055ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800553e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005548:	d111      	bne.n	800556e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005552:	d004      	beq.n	800555e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800555c:	d107      	bne.n	800556e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800556c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005572:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005576:	d10f      	bne.n	8005598 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005596:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e010      	b.n	80055ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	3b01      	subs	r3, #1
 80055ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	4013      	ands	r3, r2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d196      	bne.n	80054fa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3728      	adds	r7, #40	@ 0x28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000000 	.word	0x20000000

080055dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055f0:	d111      	bne.n	8005616 <SPI_EndRxTransaction+0x3a>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055fa:	d004      	beq.n	8005606 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005604:	d107      	bne.n	8005616 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005614:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2200      	movs	r2, #0
 800561e:	2180      	movs	r1, #128	@ 0x80
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff febd 	bl	80053a0 <SPI_WaitFlagStateUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d007      	beq.n	800563c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005630:	f043 0220 	orr.w	r2, r3, #32
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e023      	b.n	8005684 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005644:	d11d      	bne.n	8005682 <SPI_EndRxTransaction+0xa6>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800564e:	d004      	beq.n	800565a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005658:	d113      	bne.n	8005682 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2200      	movs	r2, #0
 8005662:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f7ff ff22 	bl	80054b0 <SPI_WaitFifoStateUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d007      	beq.n	8005682 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005676:	f043 0220 	orr.w	r2, r3, #32
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e000      	b.n	8005684 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af02      	add	r7, sp, #8
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2200      	movs	r2, #0
 80056a0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f7ff ff03 	bl	80054b0 <SPI_WaitFifoStateUntilTimeout>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d007      	beq.n	80056c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056b4:	f043 0220 	orr.w	r2, r3, #32
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e027      	b.n	8005710 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2200      	movs	r2, #0
 80056c8:	2180      	movs	r1, #128	@ 0x80
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f7ff fe68 	bl	80053a0 <SPI_WaitFlagStateUntilTimeout>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056da:	f043 0220 	orr.w	r2, r3, #32
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e014      	b.n	8005710 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f7ff fedc 	bl	80054b0 <SPI_WaitFifoStateUntilTimeout>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d007      	beq.n	800570e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005702:	f043 0220 	orr.w	r2, r3, #32
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e000      	b.n	8005710 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e049      	b.n	80057be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fc fecc 	bl	80024dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3304      	adds	r3, #4
 8005754:	4619      	mov	r1, r3
 8005756:	4610      	mov	r0, r2
 8005758:	f000 fbf8 	bl	8005f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d001      	beq.n	80057e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e03b      	b.n	8005858 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a19      	ldr	r2, [pc, #100]	@ (8005864 <HAL_TIM_Base_Start_IT+0x9c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d009      	beq.n	8005816 <HAL_TIM_Base_Start_IT+0x4e>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800580a:	d004      	beq.n	8005816 <HAL_TIM_Base_Start_IT+0x4e>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a15      	ldr	r2, [pc, #84]	@ (8005868 <HAL_TIM_Base_Start_IT+0xa0>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d115      	bne.n	8005842 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	4b13      	ldr	r3, [pc, #76]	@ (800586c <HAL_TIM_Base_Start_IT+0xa4>)
 800581e:	4013      	ands	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b06      	cmp	r3, #6
 8005826:	d015      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x8c>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800582e:	d011      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0201 	orr.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005840:	e008      	b.n	8005854 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f042 0201 	orr.w	r2, r2, #1
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	e000      	b.n	8005856 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005854:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	40012c00 	.word	0x40012c00
 8005868:	40014000 	.word	0x40014000
 800586c:	00010007 	.word	0x00010007

08005870 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e049      	b.n	8005916 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f841 	bl	800591e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3304      	adds	r3, #4
 80058ac:	4619      	mov	r1, r3
 80058ae:	4610      	mov	r0, r2
 80058b0:	f000 fb4c 	bl	8005f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b084      	sub	sp, #16
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d020      	beq.n	8005996 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d01b      	beq.n	8005996 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f06f 0202 	mvn.w	r2, #2
 8005966:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	f003 0303 	and.w	r3, r3, #3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fac6 	bl	8005f0e <HAL_TIM_IC_CaptureCallback>
 8005982:	e005      	b.n	8005990 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fab8 	bl	8005efa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fac9 	bl	8005f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b00      	cmp	r3, #0
 800599e:	d020      	beq.n	80059e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f003 0304 	and.w	r3, r3, #4
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d01b      	beq.n	80059e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f06f 0204 	mvn.w	r2, #4
 80059b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 faa0 	bl	8005f0e <HAL_TIM_IC_CaptureCallback>
 80059ce:	e005      	b.n	80059dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fa92 	bl	8005efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 faa3 	bl	8005f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f003 0308 	and.w	r3, r3, #8
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d020      	beq.n	8005a2e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d01b      	beq.n	8005a2e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f06f 0208 	mvn.w	r2, #8
 80059fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2204      	movs	r2, #4
 8005a04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	f003 0303 	and.w	r3, r3, #3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fa7a 	bl	8005f0e <HAL_TIM_IC_CaptureCallback>
 8005a1a:	e005      	b.n	8005a28 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fa6c 	bl	8005efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fa7d 	bl	8005f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f003 0310 	and.w	r3, r3, #16
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d020      	beq.n	8005a7a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f003 0310 	and.w	r3, r3, #16
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d01b      	beq.n	8005a7a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f06f 0210 	mvn.w	r2, #16
 8005a4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2208      	movs	r2, #8
 8005a50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fa54 	bl	8005f0e <HAL_TIM_IC_CaptureCallback>
 8005a66:	e005      	b.n	8005a74 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fa46 	bl	8005efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fa57 	bl	8005f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00c      	beq.n	8005a9e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d007      	beq.n	8005a9e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f06f 0201 	mvn.w	r2, #1
 8005a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7fb fd87 	bl	80015ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d104      	bne.n	8005ab2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00c      	beq.n	8005acc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d007      	beq.n	8005acc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 feb0 	bl	800682c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00c      	beq.n	8005af0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d007      	beq.n	8005af0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fea8 	bl	8006840 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00c      	beq.n	8005b14 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d007      	beq.n	8005b14 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fa11 	bl	8005f36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00c      	beq.n	8005b38 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f003 0320 	and.w	r3, r3, #32
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d007      	beq.n	8005b38 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f06f 0220 	mvn.w	r2, #32
 8005b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fe70 	bl	8006818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b38:	bf00      	nop
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d101      	bne.n	8005b5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	e0ff      	b.n	8005d5e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b14      	cmp	r3, #20
 8005b6a:	f200 80f0 	bhi.w	8005d4e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b74:	08005bc9 	.word	0x08005bc9
 8005b78:	08005d4f 	.word	0x08005d4f
 8005b7c:	08005d4f 	.word	0x08005d4f
 8005b80:	08005d4f 	.word	0x08005d4f
 8005b84:	08005c09 	.word	0x08005c09
 8005b88:	08005d4f 	.word	0x08005d4f
 8005b8c:	08005d4f 	.word	0x08005d4f
 8005b90:	08005d4f 	.word	0x08005d4f
 8005b94:	08005c4b 	.word	0x08005c4b
 8005b98:	08005d4f 	.word	0x08005d4f
 8005b9c:	08005d4f 	.word	0x08005d4f
 8005ba0:	08005d4f 	.word	0x08005d4f
 8005ba4:	08005c8b 	.word	0x08005c8b
 8005ba8:	08005d4f 	.word	0x08005d4f
 8005bac:	08005d4f 	.word	0x08005d4f
 8005bb0:	08005d4f 	.word	0x08005d4f
 8005bb4:	08005ccd 	.word	0x08005ccd
 8005bb8:	08005d4f 	.word	0x08005d4f
 8005bbc:	08005d4f 	.word	0x08005d4f
 8005bc0:	08005d4f 	.word	0x08005d4f
 8005bc4:	08005d0d 	.word	0x08005d0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fa2c 	bl	800602c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0208 	orr.w	r2, r2, #8
 8005be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699a      	ldr	r2, [r3, #24]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0204 	bic.w	r2, r2, #4
 8005bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6999      	ldr	r1, [r3, #24]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	691a      	ldr	r2, [r3, #16]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	619a      	str	r2, [r3, #24]
      break;
 8005c06:	e0a5      	b.n	8005d54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fa88 	bl	8006124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6999      	ldr	r1, [r3, #24]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	021a      	lsls	r2, r3, #8
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	619a      	str	r2, [r3, #24]
      break;
 8005c48:	e084      	b.n	8005d54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 fae1 	bl	8006218 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f042 0208 	orr.w	r2, r2, #8
 8005c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69da      	ldr	r2, [r3, #28]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0204 	bic.w	r2, r2, #4
 8005c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69d9      	ldr	r1, [r3, #28]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	61da      	str	r2, [r3, #28]
      break;
 8005c88:	e064      	b.n	8005d54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68b9      	ldr	r1, [r7, #8]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 fb39 	bl	8006308 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69da      	ldr	r2, [r3, #28]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69da      	ldr	r2, [r3, #28]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69d9      	ldr	r1, [r3, #28]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	021a      	lsls	r2, r3, #8
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	61da      	str	r2, [r3, #28]
      break;
 8005cca:	e043      	b.n	8005d54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68b9      	ldr	r1, [r7, #8]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fb76 	bl	80063c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0208 	orr.w	r2, r2, #8
 8005ce6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 0204 	bic.w	r2, r2, #4
 8005cf6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	691a      	ldr	r2, [r3, #16]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d0a:	e023      	b.n	8005d54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68b9      	ldr	r1, [r7, #8]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fbae 	bl	8006474 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d26:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d36:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	021a      	lsls	r2, r3, #8
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d4c:	e002      	b.n	8005d54 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	75fb      	strb	r3, [r7, #23]
      break;
 8005d52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop

08005d68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d101      	bne.n	8005d84 <HAL_TIM_ConfigClockSource+0x1c>
 8005d80:	2302      	movs	r3, #2
 8005d82:	e0b6      	b.n	8005ef2 <HAL_TIM_ConfigClockSource+0x18a>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005da2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dc0:	d03e      	beq.n	8005e40 <HAL_TIM_ConfigClockSource+0xd8>
 8005dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dc6:	f200 8087 	bhi.w	8005ed8 <HAL_TIM_ConfigClockSource+0x170>
 8005dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dce:	f000 8086 	beq.w	8005ede <HAL_TIM_ConfigClockSource+0x176>
 8005dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dd6:	d87f      	bhi.n	8005ed8 <HAL_TIM_ConfigClockSource+0x170>
 8005dd8:	2b70      	cmp	r3, #112	@ 0x70
 8005dda:	d01a      	beq.n	8005e12 <HAL_TIM_ConfigClockSource+0xaa>
 8005ddc:	2b70      	cmp	r3, #112	@ 0x70
 8005dde:	d87b      	bhi.n	8005ed8 <HAL_TIM_ConfigClockSource+0x170>
 8005de0:	2b60      	cmp	r3, #96	@ 0x60
 8005de2:	d050      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x11e>
 8005de4:	2b60      	cmp	r3, #96	@ 0x60
 8005de6:	d877      	bhi.n	8005ed8 <HAL_TIM_ConfigClockSource+0x170>
 8005de8:	2b50      	cmp	r3, #80	@ 0x50
 8005dea:	d03c      	beq.n	8005e66 <HAL_TIM_ConfigClockSource+0xfe>
 8005dec:	2b50      	cmp	r3, #80	@ 0x50
 8005dee:	d873      	bhi.n	8005ed8 <HAL_TIM_ConfigClockSource+0x170>
 8005df0:	2b40      	cmp	r3, #64	@ 0x40
 8005df2:	d058      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0x13e>
 8005df4:	2b40      	cmp	r3, #64	@ 0x40
 8005df6:	d86f      	bhi.n	8005ed8 <HAL_TIM_ConfigClockSource+0x170>
 8005df8:	2b30      	cmp	r3, #48	@ 0x30
 8005dfa:	d064      	beq.n	8005ec6 <HAL_TIM_ConfigClockSource+0x15e>
 8005dfc:	2b30      	cmp	r3, #48	@ 0x30
 8005dfe:	d86b      	bhi.n	8005ed8 <HAL_TIM_ConfigClockSource+0x170>
 8005e00:	2b20      	cmp	r3, #32
 8005e02:	d060      	beq.n	8005ec6 <HAL_TIM_ConfigClockSource+0x15e>
 8005e04:	2b20      	cmp	r3, #32
 8005e06:	d867      	bhi.n	8005ed8 <HAL_TIM_ConfigClockSource+0x170>
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d05c      	beq.n	8005ec6 <HAL_TIM_ConfigClockSource+0x15e>
 8005e0c:	2b10      	cmp	r3, #16
 8005e0e:	d05a      	beq.n	8005ec6 <HAL_TIM_ConfigClockSource+0x15e>
 8005e10:	e062      	b.n	8005ed8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e22:	f000 fbfb 	bl	800661c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	609a      	str	r2, [r3, #8]
      break;
 8005e3e:	e04f      	b.n	8005ee0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e50:	f000 fbe4 	bl	800661c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e62:	609a      	str	r2, [r3, #8]
      break;
 8005e64:	e03c      	b.n	8005ee0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e72:	461a      	mov	r2, r3
 8005e74:	f000 fb58 	bl	8006528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2150      	movs	r1, #80	@ 0x50
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 fbb1 	bl	80065e6 <TIM_ITRx_SetConfig>
      break;
 8005e84:	e02c      	b.n	8005ee0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e92:	461a      	mov	r2, r3
 8005e94:	f000 fb77 	bl	8006586 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2160      	movs	r1, #96	@ 0x60
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 fba1 	bl	80065e6 <TIM_ITRx_SetConfig>
      break;
 8005ea4:	e01c      	b.n	8005ee0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	f000 fb38 	bl	8006528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2140      	movs	r1, #64	@ 0x40
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fb91 	bl	80065e6 <TIM_ITRx_SetConfig>
      break;
 8005ec4:	e00c      	b.n	8005ee0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	f000 fb88 	bl	80065e6 <TIM_ITRx_SetConfig>
      break;
 8005ed6:	e003      	b.n	8005ee0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	73fb      	strb	r3, [r7, #15]
      break;
 8005edc:	e000      	b.n	8005ee0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005ede:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f2a:	bf00      	nop
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
	...

08005f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a30      	ldr	r2, [pc, #192]	@ (8006020 <TIM_Base_SetConfig+0xd4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d003      	beq.n	8005f6c <TIM_Base_SetConfig+0x20>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f6a:	d108      	bne.n	8005f7e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a27      	ldr	r2, [pc, #156]	@ (8006020 <TIM_Base_SetConfig+0xd4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d00b      	beq.n	8005f9e <TIM_Base_SetConfig+0x52>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f8c:	d007      	beq.n	8005f9e <TIM_Base_SetConfig+0x52>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a24      	ldr	r2, [pc, #144]	@ (8006024 <TIM_Base_SetConfig+0xd8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d003      	beq.n	8005f9e <TIM_Base_SetConfig+0x52>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a23      	ldr	r2, [pc, #140]	@ (8006028 <TIM_Base_SetConfig+0xdc>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d108      	bne.n	8005fb0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a12      	ldr	r2, [pc, #72]	@ (8006020 <TIM_Base_SetConfig+0xd4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d007      	beq.n	8005fec <TIM_Base_SetConfig+0xa0>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a11      	ldr	r2, [pc, #68]	@ (8006024 <TIM_Base_SetConfig+0xd8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d003      	beq.n	8005fec <TIM_Base_SetConfig+0xa0>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a10      	ldr	r2, [pc, #64]	@ (8006028 <TIM_Base_SetConfig+0xdc>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d103      	bne.n	8005ff4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	691a      	ldr	r2, [r3, #16]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b01      	cmp	r3, #1
 8006004:	d105      	bne.n	8006012 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f023 0201 	bic.w	r2, r3, #1
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	611a      	str	r2, [r3, #16]
  }
}
 8006012:	bf00      	nop
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	40012c00 	.word	0x40012c00
 8006024:	40014000 	.word	0x40014000
 8006028:	40014400 	.word	0x40014400

0800602c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	f023 0201 	bic.w	r2, r3, #1
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800605a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800605e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 0303 	bic.w	r3, r3, #3
 8006066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f023 0302 	bic.w	r3, r3, #2
 8006078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	4313      	orrs	r3, r2
 8006082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a24      	ldr	r2, [pc, #144]	@ (8006118 <TIM_OC1_SetConfig+0xec>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d007      	beq.n	800609c <TIM_OC1_SetConfig+0x70>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a23      	ldr	r2, [pc, #140]	@ (800611c <TIM_OC1_SetConfig+0xf0>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d003      	beq.n	800609c <TIM_OC1_SetConfig+0x70>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a22      	ldr	r2, [pc, #136]	@ (8006120 <TIM_OC1_SetConfig+0xf4>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d10c      	bne.n	80060b6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f023 0308 	bic.w	r3, r3, #8
 80060a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f023 0304 	bic.w	r3, r3, #4
 80060b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a17      	ldr	r2, [pc, #92]	@ (8006118 <TIM_OC1_SetConfig+0xec>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d007      	beq.n	80060ce <TIM_OC1_SetConfig+0xa2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a16      	ldr	r2, [pc, #88]	@ (800611c <TIM_OC1_SetConfig+0xf0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d003      	beq.n	80060ce <TIM_OC1_SetConfig+0xa2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a15      	ldr	r2, [pc, #84]	@ (8006120 <TIM_OC1_SetConfig+0xf4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d111      	bne.n	80060f2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	621a      	str	r2, [r3, #32]
}
 800610c:	bf00      	nop
 800610e:	371c      	adds	r7, #28
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	40012c00 	.word	0x40012c00
 800611c:	40014000 	.word	0x40014000
 8006120:	40014400 	.word	0x40014400

08006124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	f023 0210 	bic.w	r2, r3, #16
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800615e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f023 0320 	bic.w	r3, r3, #32
 8006172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a22      	ldr	r2, [pc, #136]	@ (800620c <TIM_OC2_SetConfig+0xe8>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d10d      	bne.n	80061a4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800618e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	011b      	lsls	r3, r3, #4
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4313      	orrs	r3, r2
 800619a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a19      	ldr	r2, [pc, #100]	@ (800620c <TIM_OC2_SetConfig+0xe8>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d007      	beq.n	80061bc <TIM_OC2_SetConfig+0x98>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a18      	ldr	r2, [pc, #96]	@ (8006210 <TIM_OC2_SetConfig+0xec>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d003      	beq.n	80061bc <TIM_OC2_SetConfig+0x98>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a17      	ldr	r2, [pc, #92]	@ (8006214 <TIM_OC2_SetConfig+0xf0>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d113      	bne.n	80061e4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	621a      	str	r2, [r3, #32]
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	40012c00 	.word	0x40012c00
 8006210:	40014000 	.word	0x40014000
 8006214:	40014400 	.word	0x40014400

08006218 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800624a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 0303 	bic.w	r3, r3, #3
 8006252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	021b      	lsls	r3, r3, #8
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a21      	ldr	r2, [pc, #132]	@ (80062fc <TIM_OC3_SetConfig+0xe4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d10d      	bne.n	8006296 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006280:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	021b      	lsls	r3, r3, #8
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	4313      	orrs	r3, r2
 800628c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a18      	ldr	r2, [pc, #96]	@ (80062fc <TIM_OC3_SetConfig+0xe4>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d007      	beq.n	80062ae <TIM_OC3_SetConfig+0x96>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a17      	ldr	r2, [pc, #92]	@ (8006300 <TIM_OC3_SetConfig+0xe8>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d003      	beq.n	80062ae <TIM_OC3_SetConfig+0x96>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a16      	ldr	r2, [pc, #88]	@ (8006304 <TIM_OC3_SetConfig+0xec>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d113      	bne.n	80062d6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	011b      	lsls	r3, r3, #4
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	621a      	str	r2, [r3, #32]
}
 80062f0:	bf00      	nop
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	40012c00 	.word	0x40012c00
 8006300:	40014000 	.word	0x40014000
 8006304:	40014400 	.word	0x40014400

08006308 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800633a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	021b      	lsls	r3, r3, #8
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	4313      	orrs	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	031b      	lsls	r3, r3, #12
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	4313      	orrs	r3, r2
 8006362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a14      	ldr	r2, [pc, #80]	@ (80063b8 <TIM_OC4_SetConfig+0xb0>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d007      	beq.n	800637c <TIM_OC4_SetConfig+0x74>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a13      	ldr	r2, [pc, #76]	@ (80063bc <TIM_OC4_SetConfig+0xb4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d003      	beq.n	800637c <TIM_OC4_SetConfig+0x74>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a12      	ldr	r2, [pc, #72]	@ (80063c0 <TIM_OC4_SetConfig+0xb8>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d109      	bne.n	8006390 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006382:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	019b      	lsls	r3, r3, #6
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	621a      	str	r2, [r3, #32]
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	40012c00 	.word	0x40012c00
 80063bc:	40014000 	.word	0x40014000
 80063c0:	40014400 	.word	0x40014400

080063c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006408:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	041b      	lsls	r3, r3, #16
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	4313      	orrs	r3, r2
 8006414:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a13      	ldr	r2, [pc, #76]	@ (8006468 <TIM_OC5_SetConfig+0xa4>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d007      	beq.n	800642e <TIM_OC5_SetConfig+0x6a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a12      	ldr	r2, [pc, #72]	@ (800646c <TIM_OC5_SetConfig+0xa8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d003      	beq.n	800642e <TIM_OC5_SetConfig+0x6a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a11      	ldr	r2, [pc, #68]	@ (8006470 <TIM_OC5_SetConfig+0xac>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d109      	bne.n	8006442 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006434:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	021b      	lsls	r3, r3, #8
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	621a      	str	r2, [r3, #32]
}
 800645c:	bf00      	nop
 800645e:	371c      	adds	r7, #28
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	40012c00 	.word	0x40012c00
 800646c:	40014000 	.word	0x40014000
 8006470:	40014400 	.word	0x40014400

08006474 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800649a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	021b      	lsls	r3, r3, #8
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80064ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	051b      	lsls	r3, r3, #20
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a14      	ldr	r2, [pc, #80]	@ (800651c <TIM_OC6_SetConfig+0xa8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d007      	beq.n	80064e0 <TIM_OC6_SetConfig+0x6c>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a13      	ldr	r2, [pc, #76]	@ (8006520 <TIM_OC6_SetConfig+0xac>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d003      	beq.n	80064e0 <TIM_OC6_SetConfig+0x6c>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a12      	ldr	r2, [pc, #72]	@ (8006524 <TIM_OC6_SetConfig+0xb0>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d109      	bne.n	80064f4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	029b      	lsls	r3, r3, #10
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	621a      	str	r2, [r3, #32]
}
 800650e:	bf00      	nop
 8006510:	371c      	adds	r7, #28
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	40012c00 	.word	0x40012c00
 8006520:	40014000 	.word	0x40014000
 8006524:	40014400 	.word	0x40014400

08006528 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	f023 0201 	bic.w	r2, r3, #1
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	011b      	lsls	r3, r3, #4
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	4313      	orrs	r3, r2
 800655c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f023 030a 	bic.w	r3, r3, #10
 8006564:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4313      	orrs	r3, r2
 800656c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	621a      	str	r2, [r3, #32]
}
 800657a:	bf00      	nop
 800657c:	371c      	adds	r7, #28
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006586:	b480      	push	{r7}
 8006588:	b087      	sub	sp, #28
 800658a:	af00      	add	r7, sp, #0
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	f023 0210 	bic.w	r2, r3, #16
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	031b      	lsls	r3, r3, #12
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80065c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	011b      	lsls	r3, r3, #4
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	621a      	str	r2, [r3, #32]
}
 80065da:	bf00      	nop
 80065dc:	371c      	adds	r7, #28
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b085      	sub	sp, #20
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4313      	orrs	r3, r2
 8006604:	f043 0307 	orr.w	r3, r3, #7
 8006608:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	609a      	str	r2, [r3, #8]
}
 8006610:	bf00      	nop
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
 8006628:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006636:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	021a      	lsls	r2, r3, #8
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	431a      	orrs	r2, r3
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	4313      	orrs	r3, r2
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	4313      	orrs	r3, r2
 8006648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	609a      	str	r2, [r3, #8]
}
 8006650:	bf00      	nop
 8006652:	371c      	adds	r7, #28
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800666c:	2b01      	cmp	r3, #1
 800666e:	d101      	bne.n	8006674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006670:	2302      	movs	r3, #2
 8006672:	e04f      	b.n	8006714 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2202      	movs	r2, #2
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a21      	ldr	r2, [pc, #132]	@ (8006720 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d108      	bne.n	80066b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80066a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a14      	ldr	r2, [pc, #80]	@ (8006720 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d009      	beq.n	80066e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066dc:	d004      	beq.n	80066e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a10      	ldr	r2, [pc, #64]	@ (8006724 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d10c      	bne.n	8006702 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	40012c00 	.word	0x40012c00
 8006724:	40014000 	.word	0x40014000

08006728 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006732:	2300      	movs	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800673c:	2b01      	cmp	r3, #1
 800673e:	d101      	bne.n	8006744 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006740:	2302      	movs	r3, #2
 8006742:	e060      	b.n	8006806 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4313      	orrs	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	4313      	orrs	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	041b      	lsls	r3, r3, #16
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a14      	ldr	r2, [pc, #80]	@ (8006814 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d115      	bne.n	80067f4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d2:	051b      	lsls	r3, r3, #20
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	40012c00 	.word	0x40012c00

08006818 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e040      	b.n	80068e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800686a:	2b00      	cmp	r3, #0
 800686c:	d106      	bne.n	800687c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7fb fef2 	bl	8002660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2224      	movs	r2, #36	@ 0x24
 8006880:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0201 	bic.w	r2, r2, #1
 8006890:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fade 	bl	8006e5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f8af 	bl	8006a04 <UART_SetConfig>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d101      	bne.n	80068b0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e01b      	b.n	80068e8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689a      	ldr	r2, [r3, #8]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0201 	orr.w	r2, r2, #1
 80068de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fb5d 	bl	8006fa0 <UART_CheckIdleState>
 80068e6:	4603      	mov	r3, r0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08a      	sub	sp, #40	@ 0x28
 80068f4:	af02      	add	r7, sp, #8
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	603b      	str	r3, [r7, #0]
 80068fc:	4613      	mov	r3, r2
 80068fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006904:	2b20      	cmp	r3, #32
 8006906:	d177      	bne.n	80069f8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <HAL_UART_Transmit+0x24>
 800690e:	88fb      	ldrh	r3, [r7, #6]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e070      	b.n	80069fa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2221      	movs	r2, #33	@ 0x21
 8006924:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006926:	f7fb ff49 	bl	80027bc <HAL_GetTick>
 800692a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	88fa      	ldrh	r2, [r7, #6]
 8006930:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	88fa      	ldrh	r2, [r7, #6]
 8006938:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006944:	d108      	bne.n	8006958 <HAL_UART_Transmit+0x68>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d104      	bne.n	8006958 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800694e:	2300      	movs	r3, #0
 8006950:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	61bb      	str	r3, [r7, #24]
 8006956:	e003      	b.n	8006960 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800695c:	2300      	movs	r3, #0
 800695e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006960:	e02f      	b.n	80069c2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2200      	movs	r2, #0
 800696a:	2180      	movs	r1, #128	@ 0x80
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 fbbf 	bl	80070f0 <UART_WaitOnFlagUntilTimeout>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d004      	beq.n	8006982 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2220      	movs	r2, #32
 800697c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e03b      	b.n	80069fa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10b      	bne.n	80069a0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	881a      	ldrh	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006994:	b292      	uxth	r2, r2
 8006996:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	3302      	adds	r3, #2
 800699c:	61bb      	str	r3, [r7, #24]
 800699e:	e007      	b.n	80069b0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	781a      	ldrb	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	3301      	adds	r3, #1
 80069ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1c9      	bne.n	8006962 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2200      	movs	r2, #0
 80069d6:	2140      	movs	r1, #64	@ 0x40
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 fb89 	bl	80070f0 <UART_WaitOnFlagUntilTimeout>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d004      	beq.n	80069ee <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2220      	movs	r2, #32
 80069e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e005      	b.n	80069fa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2220      	movs	r2, #32
 80069f2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	e000      	b.n	80069fa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80069f8:	2302      	movs	r3, #2
  }
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3720      	adds	r7, #32
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
	...

08006a04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a08:	b08a      	sub	sp, #40	@ 0x28
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	689a      	ldr	r2, [r3, #8]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	431a      	orrs	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	431a      	orrs	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	4bb4      	ldr	r3, [pc, #720]	@ (8006d04 <UART_SetConfig+0x300>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	6812      	ldr	r2, [r2, #0]
 8006a3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4aa9      	ldr	r2, [pc, #676]	@ (8006d08 <UART_SetConfig+0x304>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d004      	beq.n	8006a70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a80:	430a      	orrs	r2, r1
 8006a82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4aa0      	ldr	r2, [pc, #640]	@ (8006d0c <UART_SetConfig+0x308>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d126      	bne.n	8006adc <UART_SetConfig+0xd8>
 8006a8e:	4ba0      	ldr	r3, [pc, #640]	@ (8006d10 <UART_SetConfig+0x30c>)
 8006a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a94:	f003 0303 	and.w	r3, r3, #3
 8006a98:	2b03      	cmp	r3, #3
 8006a9a:	d81b      	bhi.n	8006ad4 <UART_SetConfig+0xd0>
 8006a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa4 <UART_SetConfig+0xa0>)
 8006a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa2:	bf00      	nop
 8006aa4:	08006ab5 	.word	0x08006ab5
 8006aa8:	08006ac5 	.word	0x08006ac5
 8006aac:	08006abd 	.word	0x08006abd
 8006ab0:	08006acd 	.word	0x08006acd
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006aba:	e080      	b.n	8006bbe <UART_SetConfig+0x1ba>
 8006abc:	2302      	movs	r3, #2
 8006abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ac2:	e07c      	b.n	8006bbe <UART_SetConfig+0x1ba>
 8006ac4:	2304      	movs	r3, #4
 8006ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006aca:	e078      	b.n	8006bbe <UART_SetConfig+0x1ba>
 8006acc:	2308      	movs	r3, #8
 8006ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ad2:	e074      	b.n	8006bbe <UART_SetConfig+0x1ba>
 8006ad4:	2310      	movs	r3, #16
 8006ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ada:	e070      	b.n	8006bbe <UART_SetConfig+0x1ba>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a8c      	ldr	r2, [pc, #560]	@ (8006d14 <UART_SetConfig+0x310>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d138      	bne.n	8006b58 <UART_SetConfig+0x154>
 8006ae6:	4b8a      	ldr	r3, [pc, #552]	@ (8006d10 <UART_SetConfig+0x30c>)
 8006ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aec:	f003 030c 	and.w	r3, r3, #12
 8006af0:	2b0c      	cmp	r3, #12
 8006af2:	d82d      	bhi.n	8006b50 <UART_SetConfig+0x14c>
 8006af4:	a201      	add	r2, pc, #4	@ (adr r2, 8006afc <UART_SetConfig+0xf8>)
 8006af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afa:	bf00      	nop
 8006afc:	08006b31 	.word	0x08006b31
 8006b00:	08006b51 	.word	0x08006b51
 8006b04:	08006b51 	.word	0x08006b51
 8006b08:	08006b51 	.word	0x08006b51
 8006b0c:	08006b41 	.word	0x08006b41
 8006b10:	08006b51 	.word	0x08006b51
 8006b14:	08006b51 	.word	0x08006b51
 8006b18:	08006b51 	.word	0x08006b51
 8006b1c:	08006b39 	.word	0x08006b39
 8006b20:	08006b51 	.word	0x08006b51
 8006b24:	08006b51 	.word	0x08006b51
 8006b28:	08006b51 	.word	0x08006b51
 8006b2c:	08006b49 	.word	0x08006b49
 8006b30:	2300      	movs	r3, #0
 8006b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b36:	e042      	b.n	8006bbe <UART_SetConfig+0x1ba>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b3e:	e03e      	b.n	8006bbe <UART_SetConfig+0x1ba>
 8006b40:	2304      	movs	r3, #4
 8006b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b46:	e03a      	b.n	8006bbe <UART_SetConfig+0x1ba>
 8006b48:	2308      	movs	r3, #8
 8006b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b4e:	e036      	b.n	8006bbe <UART_SetConfig+0x1ba>
 8006b50:	2310      	movs	r3, #16
 8006b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b56:	e032      	b.n	8006bbe <UART_SetConfig+0x1ba>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a6a      	ldr	r2, [pc, #424]	@ (8006d08 <UART_SetConfig+0x304>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d12a      	bne.n	8006bb8 <UART_SetConfig+0x1b4>
 8006b62:	4b6b      	ldr	r3, [pc, #428]	@ (8006d10 <UART_SetConfig+0x30c>)
 8006b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b70:	d01a      	beq.n	8006ba8 <UART_SetConfig+0x1a4>
 8006b72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b76:	d81b      	bhi.n	8006bb0 <UART_SetConfig+0x1ac>
 8006b78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b7c:	d00c      	beq.n	8006b98 <UART_SetConfig+0x194>
 8006b7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b82:	d815      	bhi.n	8006bb0 <UART_SetConfig+0x1ac>
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d003      	beq.n	8006b90 <UART_SetConfig+0x18c>
 8006b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b8c:	d008      	beq.n	8006ba0 <UART_SetConfig+0x19c>
 8006b8e:	e00f      	b.n	8006bb0 <UART_SetConfig+0x1ac>
 8006b90:	2300      	movs	r3, #0
 8006b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b96:	e012      	b.n	8006bbe <UART_SetConfig+0x1ba>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b9e:	e00e      	b.n	8006bbe <UART_SetConfig+0x1ba>
 8006ba0:	2304      	movs	r3, #4
 8006ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ba6:	e00a      	b.n	8006bbe <UART_SetConfig+0x1ba>
 8006ba8:	2308      	movs	r3, #8
 8006baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bae:	e006      	b.n	8006bbe <UART_SetConfig+0x1ba>
 8006bb0:	2310      	movs	r3, #16
 8006bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bb6:	e002      	b.n	8006bbe <UART_SetConfig+0x1ba>
 8006bb8:	2310      	movs	r3, #16
 8006bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a51      	ldr	r2, [pc, #324]	@ (8006d08 <UART_SetConfig+0x304>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d17a      	bne.n	8006cbe <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bc8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d824      	bhi.n	8006c1a <UART_SetConfig+0x216>
 8006bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd8 <UART_SetConfig+0x1d4>)
 8006bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd6:	bf00      	nop
 8006bd8:	08006bfd 	.word	0x08006bfd
 8006bdc:	08006c1b 	.word	0x08006c1b
 8006be0:	08006c05 	.word	0x08006c05
 8006be4:	08006c1b 	.word	0x08006c1b
 8006be8:	08006c0b 	.word	0x08006c0b
 8006bec:	08006c1b 	.word	0x08006c1b
 8006bf0:	08006c1b 	.word	0x08006c1b
 8006bf4:	08006c1b 	.word	0x08006c1b
 8006bf8:	08006c13 	.word	0x08006c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bfc:	f7fd fa8e 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 8006c00:	61f8      	str	r0, [r7, #28]
        break;
 8006c02:	e010      	b.n	8006c26 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c04:	4b44      	ldr	r3, [pc, #272]	@ (8006d18 <UART_SetConfig+0x314>)
 8006c06:	61fb      	str	r3, [r7, #28]
        break;
 8006c08:	e00d      	b.n	8006c26 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c0a:	f7fd f9ef 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 8006c0e:	61f8      	str	r0, [r7, #28]
        break;
 8006c10:	e009      	b.n	8006c26 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c16:	61fb      	str	r3, [r7, #28]
        break;
 8006c18:	e005      	b.n	8006c26 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006c24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 8107 	beq.w	8006e3c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	4613      	mov	r3, r2
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	4413      	add	r3, r2
 8006c38:	69fa      	ldr	r2, [r7, #28]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d305      	bcc.n	8006c4a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c44:	69fa      	ldr	r2, [r7, #28]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d903      	bls.n	8006c52 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c50:	e0f4      	b.n	8006e3c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	2200      	movs	r2, #0
 8006c56:	461c      	mov	r4, r3
 8006c58:	4615      	mov	r5, r2
 8006c5a:	f04f 0200 	mov.w	r2, #0
 8006c5e:	f04f 0300 	mov.w	r3, #0
 8006c62:	022b      	lsls	r3, r5, #8
 8006c64:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c68:	0222      	lsls	r2, r4, #8
 8006c6a:	68f9      	ldr	r1, [r7, #12]
 8006c6c:	6849      	ldr	r1, [r1, #4]
 8006c6e:	0849      	lsrs	r1, r1, #1
 8006c70:	2000      	movs	r0, #0
 8006c72:	4688      	mov	r8, r1
 8006c74:	4681      	mov	r9, r0
 8006c76:	eb12 0a08 	adds.w	sl, r2, r8
 8006c7a:	eb43 0b09 	adc.w	fp, r3, r9
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	603b      	str	r3, [r7, #0]
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c8c:	4650      	mov	r0, sl
 8006c8e:	4659      	mov	r1, fp
 8006c90:	f7f9 ff8a 	bl	8000ba8 <__aeabi_uldivmod>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4613      	mov	r3, r2
 8006c9a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ca2:	d308      	bcc.n	8006cb6 <UART_SetConfig+0x2b2>
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006caa:	d204      	bcs.n	8006cb6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	60da      	str	r2, [r3, #12]
 8006cb4:	e0c2      	b.n	8006e3c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006cbc:	e0be      	b.n	8006e3c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cc6:	d16a      	bne.n	8006d9e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006cc8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	d834      	bhi.n	8006d3a <UART_SetConfig+0x336>
 8006cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd8 <UART_SetConfig+0x2d4>)
 8006cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd6:	bf00      	nop
 8006cd8:	08006cfd 	.word	0x08006cfd
 8006cdc:	08006d1d 	.word	0x08006d1d
 8006ce0:	08006d25 	.word	0x08006d25
 8006ce4:	08006d3b 	.word	0x08006d3b
 8006ce8:	08006d2b 	.word	0x08006d2b
 8006cec:	08006d3b 	.word	0x08006d3b
 8006cf0:	08006d3b 	.word	0x08006d3b
 8006cf4:	08006d3b 	.word	0x08006d3b
 8006cf8:	08006d33 	.word	0x08006d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cfc:	f7fd fa0e 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 8006d00:	61f8      	str	r0, [r7, #28]
        break;
 8006d02:	e020      	b.n	8006d46 <UART_SetConfig+0x342>
 8006d04:	efff69f3 	.word	0xefff69f3
 8006d08:	40008000 	.word	0x40008000
 8006d0c:	40013800 	.word	0x40013800
 8006d10:	40021000 	.word	0x40021000
 8006d14:	40004400 	.word	0x40004400
 8006d18:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d1c:	f7fd fa14 	bl	8004148 <HAL_RCC_GetPCLK2Freq>
 8006d20:	61f8      	str	r0, [r7, #28]
        break;
 8006d22:	e010      	b.n	8006d46 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d24:	4b4c      	ldr	r3, [pc, #304]	@ (8006e58 <UART_SetConfig+0x454>)
 8006d26:	61fb      	str	r3, [r7, #28]
        break;
 8006d28:	e00d      	b.n	8006d46 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d2a:	f7fd f95f 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 8006d2e:	61f8      	str	r0, [r7, #28]
        break;
 8006d30:	e009      	b.n	8006d46 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d36:	61fb      	str	r3, [r7, #28]
        break;
 8006d38:	e005      	b.n	8006d46 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006d44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d077      	beq.n	8006e3c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	005a      	lsls	r2, r3, #1
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	085b      	lsrs	r3, r3, #1
 8006d56:	441a      	add	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d60:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	2b0f      	cmp	r3, #15
 8006d66:	d916      	bls.n	8006d96 <UART_SetConfig+0x392>
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d6e:	d212      	bcs.n	8006d96 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	f023 030f 	bic.w	r3, r3, #15
 8006d78:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	085b      	lsrs	r3, r3, #1
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	f003 0307 	and.w	r3, r3, #7
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	8afb      	ldrh	r3, [r7, #22]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	8afa      	ldrh	r2, [r7, #22]
 8006d92:	60da      	str	r2, [r3, #12]
 8006d94:	e052      	b.n	8006e3c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006d9c:	e04e      	b.n	8006e3c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d9e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006da2:	2b08      	cmp	r3, #8
 8006da4:	d827      	bhi.n	8006df6 <UART_SetConfig+0x3f2>
 8006da6:	a201      	add	r2, pc, #4	@ (adr r2, 8006dac <UART_SetConfig+0x3a8>)
 8006da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dac:	08006dd1 	.word	0x08006dd1
 8006db0:	08006dd9 	.word	0x08006dd9
 8006db4:	08006de1 	.word	0x08006de1
 8006db8:	08006df7 	.word	0x08006df7
 8006dbc:	08006de7 	.word	0x08006de7
 8006dc0:	08006df7 	.word	0x08006df7
 8006dc4:	08006df7 	.word	0x08006df7
 8006dc8:	08006df7 	.word	0x08006df7
 8006dcc:	08006def 	.word	0x08006def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dd0:	f7fd f9a4 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 8006dd4:	61f8      	str	r0, [r7, #28]
        break;
 8006dd6:	e014      	b.n	8006e02 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dd8:	f7fd f9b6 	bl	8004148 <HAL_RCC_GetPCLK2Freq>
 8006ddc:	61f8      	str	r0, [r7, #28]
        break;
 8006dde:	e010      	b.n	8006e02 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006de0:	4b1d      	ldr	r3, [pc, #116]	@ (8006e58 <UART_SetConfig+0x454>)
 8006de2:	61fb      	str	r3, [r7, #28]
        break;
 8006de4:	e00d      	b.n	8006e02 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006de6:	f7fd f901 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 8006dea:	61f8      	str	r0, [r7, #28]
        break;
 8006dec:	e009      	b.n	8006e02 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006df2:	61fb      	str	r3, [r7, #28]
        break;
 8006df4:	e005      	b.n	8006e02 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006e00:	bf00      	nop
    }

    if (pclk != 0U)
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d019      	beq.n	8006e3c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	085a      	lsrs	r2, r3, #1
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	441a      	add	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e1a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	2b0f      	cmp	r3, #15
 8006e20:	d909      	bls.n	8006e36 <UART_SetConfig+0x432>
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e28:	d205      	bcs.n	8006e36 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	60da      	str	r2, [r3, #12]
 8006e34:	e002      	b.n	8006e3c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006e48:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3728      	adds	r7, #40	@ 0x28
 8006e50:	46bd      	mov	sp, r7
 8006e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e56:	bf00      	nop
 8006e58:	00f42400 	.word	0x00f42400

08006e5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e68:	f003 0308 	and.w	r3, r3, #8
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00a      	beq.n	8006e86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00a      	beq.n	8006ea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00a      	beq.n	8006eca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ece:	f003 0304 	and.w	r3, r3, #4
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00a      	beq.n	8006eec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef0:	f003 0310 	and.w	r3, r3, #16
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00a      	beq.n	8006f0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f12:	f003 0320 	and.w	r3, r3, #32
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00a      	beq.n	8006f30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d01a      	beq.n	8006f72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f5a:	d10a      	bne.n	8006f72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00a      	beq.n	8006f94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	605a      	str	r2, [r3, #4]
  }
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b098      	sub	sp, #96	@ 0x60
 8006fa4:	af02      	add	r7, sp, #8
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fb0:	f7fb fc04 	bl	80027bc <HAL_GetTick>
 8006fb4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0308 	and.w	r3, r3, #8
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	d12e      	bne.n	8007022 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f88c 	bl	80070f0 <UART_WaitOnFlagUntilTimeout>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d021      	beq.n	8007022 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe6:	e853 3f00 	ldrex	r3, [r3]
 8006fea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ff2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ffc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ffe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007000:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007002:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007004:	e841 2300 	strex	r3, r2, [r1]
 8007008:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800700a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1e6      	bne.n	8006fde <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2220      	movs	r2, #32
 8007014:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e062      	b.n	80070e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0304 	and.w	r3, r3, #4
 800702c:	2b04      	cmp	r3, #4
 800702e:	d149      	bne.n	80070c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007030:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007038:	2200      	movs	r2, #0
 800703a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f856 	bl	80070f0 <UART_WaitOnFlagUntilTimeout>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d03c      	beq.n	80070c4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007052:	e853 3f00 	ldrex	r3, [r3]
 8007056:	623b      	str	r3, [r7, #32]
   return(result);
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800705e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	461a      	mov	r2, r3
 8007066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007068:	633b      	str	r3, [r7, #48]	@ 0x30
 800706a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800706e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007070:	e841 2300 	strex	r3, r2, [r1]
 8007074:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1e6      	bne.n	800704a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	3308      	adds	r3, #8
 8007082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	e853 3f00 	ldrex	r3, [r3]
 800708a:	60fb      	str	r3, [r7, #12]
   return(result);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 0301 	bic.w	r3, r3, #1
 8007092:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3308      	adds	r3, #8
 800709a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800709c:	61fa      	str	r2, [r7, #28]
 800709e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a0:	69b9      	ldr	r1, [r7, #24]
 80070a2:	69fa      	ldr	r2, [r7, #28]
 80070a4:	e841 2300 	strex	r3, r2, [r1]
 80070a8:	617b      	str	r3, [r7, #20]
   return(result);
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1e5      	bne.n	800707c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2220      	movs	r2, #32
 80070b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e011      	b.n	80070e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2220      	movs	r2, #32
 80070c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3758      	adds	r7, #88	@ 0x58
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	603b      	str	r3, [r7, #0]
 80070fc:	4613      	mov	r3, r2
 80070fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007100:	e04f      	b.n	80071a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007108:	d04b      	beq.n	80071a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800710a:	f7fb fb57 	bl	80027bc <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	429a      	cmp	r2, r3
 8007118:	d302      	bcc.n	8007120 <UART_WaitOnFlagUntilTimeout+0x30>
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e04e      	b.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0304 	and.w	r3, r3, #4
 800712e:	2b00      	cmp	r3, #0
 8007130:	d037      	beq.n	80071a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2b80      	cmp	r3, #128	@ 0x80
 8007136:	d034      	beq.n	80071a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	2b40      	cmp	r3, #64	@ 0x40
 800713c:	d031      	beq.n	80071a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	f003 0308 	and.w	r3, r3, #8
 8007148:	2b08      	cmp	r3, #8
 800714a:	d110      	bne.n	800716e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2208      	movs	r2, #8
 8007152:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 f838 	bl	80071ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2208      	movs	r2, #8
 800715e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e029      	b.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	69db      	ldr	r3, [r3, #28]
 8007174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007178:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800717c:	d111      	bne.n	80071a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007186:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 f81e 	bl	80071ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2220      	movs	r2, #32
 8007192:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e00f      	b.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	69da      	ldr	r2, [r3, #28]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	4013      	ands	r3, r2
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	bf0c      	ite	eq
 80071b2:	2301      	moveq	r3, #1
 80071b4:	2300      	movne	r3, #0
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	461a      	mov	r2, r3
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d0a0      	beq.n	8007102 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b095      	sub	sp, #84	@ 0x54
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071da:	e853 3f00 	ldrex	r3, [r3]
 80071de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	461a      	mov	r2, r3
 80071ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80071f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071f8:	e841 2300 	strex	r3, r2, [r1]
 80071fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1e6      	bne.n	80071d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3308      	adds	r3, #8
 800720a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720c:	6a3b      	ldr	r3, [r7, #32]
 800720e:	e853 3f00 	ldrex	r3, [r3]
 8007212:	61fb      	str	r3, [r7, #28]
   return(result);
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	f023 0301 	bic.w	r3, r3, #1
 800721a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3308      	adds	r3, #8
 8007222:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007224:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007226:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007228:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800722a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800722c:	e841 2300 	strex	r3, r2, [r1]
 8007230:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1e5      	bne.n	8007204 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800723c:	2b01      	cmp	r3, #1
 800723e:	d118      	bne.n	8007272 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	e853 3f00 	ldrex	r3, [r3]
 800724c:	60bb      	str	r3, [r7, #8]
   return(result);
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f023 0310 	bic.w	r3, r3, #16
 8007254:	647b      	str	r3, [r7, #68]	@ 0x44
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800725e:	61bb      	str	r3, [r7, #24]
 8007260:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007262:	6979      	ldr	r1, [r7, #20]
 8007264:	69ba      	ldr	r2, [r7, #24]
 8007266:	e841 2300 	strex	r3, r2, [r1]
 800726a:	613b      	str	r3, [r7, #16]
   return(result);
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1e6      	bne.n	8007240 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2220      	movs	r2, #32
 8007276:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007286:	bf00      	nop
 8007288:	3754      	adds	r7, #84	@ 0x54
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
	...

08007294 <__NVIC_SetPriority>:
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	4603      	mov	r3, r0
 800729c:	6039      	str	r1, [r7, #0]
 800729e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	db0a      	blt.n	80072be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	490c      	ldr	r1, [pc, #48]	@ (80072e0 <__NVIC_SetPriority+0x4c>)
 80072ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072b2:	0112      	lsls	r2, r2, #4
 80072b4:	b2d2      	uxtb	r2, r2
 80072b6:	440b      	add	r3, r1
 80072b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80072bc:	e00a      	b.n	80072d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	4908      	ldr	r1, [pc, #32]	@ (80072e4 <__NVIC_SetPriority+0x50>)
 80072c4:	79fb      	ldrb	r3, [r7, #7]
 80072c6:	f003 030f 	and.w	r3, r3, #15
 80072ca:	3b04      	subs	r3, #4
 80072cc:	0112      	lsls	r2, r2, #4
 80072ce:	b2d2      	uxtb	r2, r2
 80072d0:	440b      	add	r3, r1
 80072d2:	761a      	strb	r2, [r3, #24]
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	e000e100 	.word	0xe000e100
 80072e4:	e000ed00 	.word	0xe000ed00

080072e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80072ec:	4b05      	ldr	r3, [pc, #20]	@ (8007304 <SysTick_Handler+0x1c>)
 80072ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80072f0:	f001 fd46 	bl	8008d80 <xTaskGetSchedulerState>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d001      	beq.n	80072fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80072fa:	f002 fb3d 	bl	8009978 <xPortSysTickHandler>
  }
}
 80072fe:	bf00      	nop
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	e000e010 	.word	0xe000e010

08007308 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800730c:	2100      	movs	r1, #0
 800730e:	f06f 0004 	mvn.w	r0, #4
 8007312:	f7ff ffbf 	bl	8007294 <__NVIC_SetPriority>
#endif
}
 8007316:	bf00      	nop
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007322:	f3ef 8305 	mrs	r3, IPSR
 8007326:	603b      	str	r3, [r7, #0]
  return(result);
 8007328:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800732e:	f06f 0305 	mvn.w	r3, #5
 8007332:	607b      	str	r3, [r7, #4]
 8007334:	e00c      	b.n	8007350 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007336:	4b0a      	ldr	r3, [pc, #40]	@ (8007360 <osKernelInitialize+0x44>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d105      	bne.n	800734a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800733e:	4b08      	ldr	r3, [pc, #32]	@ (8007360 <osKernelInitialize+0x44>)
 8007340:	2201      	movs	r2, #1
 8007342:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007344:	2300      	movs	r3, #0
 8007346:	607b      	str	r3, [r7, #4]
 8007348:	e002      	b.n	8007350 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800734a:	f04f 33ff 	mov.w	r3, #4294967295
 800734e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007350:	687b      	ldr	r3, [r7, #4]
}
 8007352:	4618      	mov	r0, r3
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	20000964 	.word	0x20000964

08007364 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800736a:	f3ef 8305 	mrs	r3, IPSR
 800736e:	603b      	str	r3, [r7, #0]
  return(result);
 8007370:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007372:	2b00      	cmp	r3, #0
 8007374:	d003      	beq.n	800737e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007376:	f06f 0305 	mvn.w	r3, #5
 800737a:	607b      	str	r3, [r7, #4]
 800737c:	e010      	b.n	80073a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800737e:	4b0b      	ldr	r3, [pc, #44]	@ (80073ac <osKernelStart+0x48>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d109      	bne.n	800739a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007386:	f7ff ffbf 	bl	8007308 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800738a:	4b08      	ldr	r3, [pc, #32]	@ (80073ac <osKernelStart+0x48>)
 800738c:	2202      	movs	r2, #2
 800738e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007390:	f001 f892 	bl	80084b8 <vTaskStartScheduler>
      stat = osOK;
 8007394:	2300      	movs	r3, #0
 8007396:	607b      	str	r3, [r7, #4]
 8007398:	e002      	b.n	80073a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800739a:	f04f 33ff 	mov.w	r3, #4294967295
 800739e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073a0:	687b      	ldr	r3, [r7, #4]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20000964 	.word	0x20000964

080073b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08e      	sub	sp, #56	@ 0x38
 80073b4:	af04      	add	r7, sp, #16
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80073bc:	2300      	movs	r3, #0
 80073be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073c0:	f3ef 8305 	mrs	r3, IPSR
 80073c4:	617b      	str	r3, [r7, #20]
  return(result);
 80073c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d17e      	bne.n	80074ca <osThreadNew+0x11a>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d07b      	beq.n	80074ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80073d2:	2380      	movs	r3, #128	@ 0x80
 80073d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80073d6:	2318      	movs	r3, #24
 80073d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80073da:	2300      	movs	r3, #0
 80073dc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80073de:	f04f 33ff 	mov.w	r3, #4294967295
 80073e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d045      	beq.n	8007476 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <osThreadNew+0x48>
        name = attr->name;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d008      	beq.n	800741e <osThreadNew+0x6e>
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	2b38      	cmp	r3, #56	@ 0x38
 8007410:	d805      	bhi.n	800741e <osThreadNew+0x6e>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <osThreadNew+0x72>
        return (NULL);
 800741e:	2300      	movs	r3, #0
 8007420:	e054      	b.n	80074cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d003      	beq.n	8007432 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	089b      	lsrs	r3, r3, #2
 8007430:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00e      	beq.n	8007458 <osThreadNew+0xa8>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	2ba7      	cmp	r3, #167	@ 0xa7
 8007440:	d90a      	bls.n	8007458 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007446:	2b00      	cmp	r3, #0
 8007448:	d006      	beq.n	8007458 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <osThreadNew+0xa8>
        mem = 1;
 8007452:	2301      	movs	r3, #1
 8007454:	61bb      	str	r3, [r7, #24]
 8007456:	e010      	b.n	800747a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10c      	bne.n	800747a <osThreadNew+0xca>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d108      	bne.n	800747a <osThreadNew+0xca>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d104      	bne.n	800747a <osThreadNew+0xca>
          mem = 0;
 8007470:	2300      	movs	r3, #0
 8007472:	61bb      	str	r3, [r7, #24]
 8007474:	e001      	b.n	800747a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007476:	2300      	movs	r3, #0
 8007478:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d110      	bne.n	80074a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007488:	9202      	str	r2, [sp, #8]
 800748a:	9301      	str	r3, [sp, #4]
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	6a3a      	ldr	r2, [r7, #32]
 8007494:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 fe1a 	bl	80080d0 <xTaskCreateStatic>
 800749c:	4603      	mov	r3, r0
 800749e:	613b      	str	r3, [r7, #16]
 80074a0:	e013      	b.n	80074ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d110      	bne.n	80074ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	f107 0310 	add.w	r3, r7, #16
 80074b0:	9301      	str	r3, [sp, #4]
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 fe68 	bl	8008190 <xTaskCreate>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d001      	beq.n	80074ca <osThreadNew+0x11a>
            hTask = NULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074ca:	693b      	ldr	r3, [r7, #16]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3728      	adds	r7, #40	@ 0x28
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074dc:	f3ef 8305 	mrs	r3, IPSR
 80074e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80074e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d003      	beq.n	80074f0 <osDelay+0x1c>
    stat = osErrorISR;
 80074e8:	f06f 0305 	mvn.w	r3, #5
 80074ec:	60fb      	str	r3, [r7, #12]
 80074ee:	e007      	b.n	8007500 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d002      	beq.n	8007500 <osDelay+0x2c>
      vTaskDelay(ticks);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 ffa6 	bl	800844c <vTaskDelay>
    }
  }

  return (stat);
 8007500:	68fb      	ldr	r3, [r7, #12]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	4a07      	ldr	r2, [pc, #28]	@ (8007538 <vApplicationGetIdleTaskMemory+0x2c>)
 800751c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	4a06      	ldr	r2, [pc, #24]	@ (800753c <vApplicationGetIdleTaskMemory+0x30>)
 8007522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2280      	movs	r2, #128	@ 0x80
 8007528:	601a      	str	r2, [r3, #0]
}
 800752a:	bf00      	nop
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	20000968 	.word	0x20000968
 800753c:	20000a10 	.word	0x20000a10

08007540 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	4a07      	ldr	r2, [pc, #28]	@ (800756c <vApplicationGetTimerTaskMemory+0x2c>)
 8007550:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	4a06      	ldr	r2, [pc, #24]	@ (8007570 <vApplicationGetTimerTaskMemory+0x30>)
 8007556:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800755e:	601a      	str	r2, [r3, #0]
}
 8007560:	bf00      	nop
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	20000c10 	.word	0x20000c10
 8007570:	20000cb8 	.word	0x20000cb8

08007574 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f103 0208 	add.w	r2, r3, #8
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f04f 32ff 	mov.w	r2, #4294967295
 800758c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f103 0208 	add.w	r2, r3, #8
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f103 0208 	add.w	r2, r3, #8
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80075c2:	bf00      	nop
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075ce:	b480      	push	{r7}
 80075d0:	b085      	sub	sp, #20
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	1c5a      	adds	r2, r3, #1
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	601a      	str	r2, [r3, #0]
}
 800760a:	bf00      	nop
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007616:	b480      	push	{r7}
 8007618:	b085      	sub	sp, #20
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762c:	d103      	bne.n	8007636 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	e00c      	b.n	8007650 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	3308      	adds	r3, #8
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	e002      	b.n	8007644 <vListInsert+0x2e>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	429a      	cmp	r2, r3
 800764e:	d2f6      	bcs.n	800763e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	683a      	ldr	r2, [r7, #0]
 800766a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	601a      	str	r2, [r3, #0]
}
 800767c:	bf00      	nop
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	6892      	ldr	r2, [r2, #8]
 800769e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	6852      	ldr	r2, [r2, #4]
 80076a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d103      	bne.n	80076bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	1e5a      	subs	r2, r3, #1
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10b      	bne.n	8007708 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007702:	bf00      	nop
 8007704:	bf00      	nop
 8007706:	e7fd      	b.n	8007704 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007708:	f002 f8a6 	bl	8009858 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007714:	68f9      	ldr	r1, [r7, #12]
 8007716:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007718:	fb01 f303 	mul.w	r3, r1, r3
 800771c:	441a      	add	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007738:	3b01      	subs	r3, #1
 800773a:	68f9      	ldr	r1, [r7, #12]
 800773c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800773e:	fb01 f303 	mul.w	r3, r1, r3
 8007742:	441a      	add	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	22ff      	movs	r2, #255	@ 0xff
 800774c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	22ff      	movs	r2, #255	@ 0xff
 8007754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d114      	bne.n	8007788 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d01a      	beq.n	800779c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3310      	adds	r3, #16
 800776a:	4618      	mov	r0, r3
 800776c:	f001 f942 	bl	80089f4 <xTaskRemoveFromEventList>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d012      	beq.n	800779c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007776:	4b0d      	ldr	r3, [pc, #52]	@ (80077ac <xQueueGenericReset+0xd0>)
 8007778:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	e009      	b.n	800779c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	3310      	adds	r3, #16
 800778c:	4618      	mov	r0, r3
 800778e:	f7ff fef1 	bl	8007574 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	3324      	adds	r3, #36	@ 0x24
 8007796:	4618      	mov	r0, r3
 8007798:	f7ff feec 	bl	8007574 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800779c:	f002 f88e 	bl	80098bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80077a0:	2301      	movs	r3, #1
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	e000ed04 	.word	0xe000ed04

080077b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b08e      	sub	sp, #56	@ 0x38
 80077b4:	af02      	add	r7, sp, #8
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
 80077bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10b      	bne.n	80077dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80077c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80077d6:	bf00      	nop
 80077d8:	bf00      	nop
 80077da:	e7fd      	b.n	80077d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10b      	bne.n	80077fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80077e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop
 80077f8:	e7fd      	b.n	80077f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d002      	beq.n	8007806 <xQueueGenericCreateStatic+0x56>
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d001      	beq.n	800780a <xQueueGenericCreateStatic+0x5a>
 8007806:	2301      	movs	r3, #1
 8007808:	e000      	b.n	800780c <xQueueGenericCreateStatic+0x5c>
 800780a:	2300      	movs	r3, #0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10b      	bne.n	8007828 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	623b      	str	r3, [r7, #32]
}
 8007822:	bf00      	nop
 8007824:	bf00      	nop
 8007826:	e7fd      	b.n	8007824 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d102      	bne.n	8007834 <xQueueGenericCreateStatic+0x84>
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <xQueueGenericCreateStatic+0x88>
 8007834:	2301      	movs	r3, #1
 8007836:	e000      	b.n	800783a <xQueueGenericCreateStatic+0x8a>
 8007838:	2300      	movs	r3, #0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10b      	bne.n	8007856 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	61fb      	str	r3, [r7, #28]
}
 8007850:	bf00      	nop
 8007852:	bf00      	nop
 8007854:	e7fd      	b.n	8007852 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007856:	2350      	movs	r3, #80	@ 0x50
 8007858:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2b50      	cmp	r3, #80	@ 0x50
 800785e:	d00b      	beq.n	8007878 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	61bb      	str	r3, [r7, #24]
}
 8007872:	bf00      	nop
 8007874:	bf00      	nop
 8007876:	e7fd      	b.n	8007874 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007878:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800787e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00d      	beq.n	80078a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800788c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	4613      	mov	r3, r2
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	68b9      	ldr	r1, [r7, #8]
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f000 f805 	bl	80078aa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80078a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3730      	adds	r7, #48	@ 0x30
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	60f8      	str	r0, [r7, #12]
 80078b2:	60b9      	str	r1, [r7, #8]
 80078b4:	607a      	str	r2, [r7, #4]
 80078b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d103      	bne.n	80078c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	69ba      	ldr	r2, [r7, #24]
 80078c2:	601a      	str	r2, [r3, #0]
 80078c4:	e002      	b.n	80078cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80078d8:	2101      	movs	r1, #1
 80078da:	69b8      	ldr	r0, [r7, #24]
 80078dc:	f7ff fefe 	bl	80076dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	78fa      	ldrb	r2, [r7, #3]
 80078e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80078e8:	bf00      	nop
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08e      	sub	sp, #56	@ 0x38
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80078fe:	2300      	movs	r3, #0
 8007900:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10b      	bne.n	8007924 <xQueueGenericSend+0x34>
	__asm volatile
 800790c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800791e:	bf00      	nop
 8007920:	bf00      	nop
 8007922:	e7fd      	b.n	8007920 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d103      	bne.n	8007932 <xQueueGenericSend+0x42>
 800792a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800792e:	2b00      	cmp	r3, #0
 8007930:	d101      	bne.n	8007936 <xQueueGenericSend+0x46>
 8007932:	2301      	movs	r3, #1
 8007934:	e000      	b.n	8007938 <xQueueGenericSend+0x48>
 8007936:	2300      	movs	r3, #0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10b      	bne.n	8007954 <xQueueGenericSend+0x64>
	__asm volatile
 800793c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007940:	f383 8811 	msr	BASEPRI, r3
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800794e:	bf00      	nop
 8007950:	bf00      	nop
 8007952:	e7fd      	b.n	8007950 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	2b02      	cmp	r3, #2
 8007958:	d103      	bne.n	8007962 <xQueueGenericSend+0x72>
 800795a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800795e:	2b01      	cmp	r3, #1
 8007960:	d101      	bne.n	8007966 <xQueueGenericSend+0x76>
 8007962:	2301      	movs	r3, #1
 8007964:	e000      	b.n	8007968 <xQueueGenericSend+0x78>
 8007966:	2300      	movs	r3, #0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10b      	bne.n	8007984 <xQueueGenericSend+0x94>
	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	623b      	str	r3, [r7, #32]
}
 800797e:	bf00      	nop
 8007980:	bf00      	nop
 8007982:	e7fd      	b.n	8007980 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007984:	f001 f9fc 	bl	8008d80 <xTaskGetSchedulerState>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d102      	bne.n	8007994 <xQueueGenericSend+0xa4>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <xQueueGenericSend+0xa8>
 8007994:	2301      	movs	r3, #1
 8007996:	e000      	b.n	800799a <xQueueGenericSend+0xaa>
 8007998:	2300      	movs	r3, #0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10b      	bne.n	80079b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	61fb      	str	r3, [r7, #28]
}
 80079b0:	bf00      	nop
 80079b2:	bf00      	nop
 80079b4:	e7fd      	b.n	80079b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079b6:	f001 ff4f 	bl	8009858 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d302      	bcc.n	80079cc <xQueueGenericSend+0xdc>
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d129      	bne.n	8007a20 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	68b9      	ldr	r1, [r7, #8]
 80079d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079d2:	f000 fa0f 	bl	8007df4 <prvCopyDataToQueue>
 80079d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d010      	beq.n	8007a02 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e2:	3324      	adds	r3, #36	@ 0x24
 80079e4:	4618      	mov	r0, r3
 80079e6:	f001 f805 	bl	80089f4 <xTaskRemoveFromEventList>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d013      	beq.n	8007a18 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80079f0:	4b3f      	ldr	r3, [pc, #252]	@ (8007af0 <xQueueGenericSend+0x200>)
 80079f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079f6:	601a      	str	r2, [r3, #0]
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	e00a      	b.n	8007a18 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d007      	beq.n	8007a18 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007a08:	4b39      	ldr	r3, [pc, #228]	@ (8007af0 <xQueueGenericSend+0x200>)
 8007a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a0e:	601a      	str	r2, [r3, #0]
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007a18:	f001 ff50 	bl	80098bc <vPortExitCritical>
				return pdPASS;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e063      	b.n	8007ae8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d103      	bne.n	8007a2e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a26:	f001 ff49 	bl	80098bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e05c      	b.n	8007ae8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d106      	bne.n	8007a42 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a34:	f107 0314 	add.w	r3, r7, #20
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f001 f83f 	bl	8008abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a42:	f001 ff3b 	bl	80098bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a46:	f000 fda7 	bl	8008598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a4a:	f001 ff05 	bl	8009858 <vPortEnterCritical>
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a54:	b25b      	sxtb	r3, r3
 8007a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5a:	d103      	bne.n	8007a64 <xQueueGenericSend+0x174>
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a6a:	b25b      	sxtb	r3, r3
 8007a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a70:	d103      	bne.n	8007a7a <xQueueGenericSend+0x18a>
 8007a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a7a:	f001 ff1f 	bl	80098bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a7e:	1d3a      	adds	r2, r7, #4
 8007a80:	f107 0314 	add.w	r3, r7, #20
 8007a84:	4611      	mov	r1, r2
 8007a86:	4618      	mov	r0, r3
 8007a88:	f001 f82e 	bl	8008ae8 <xTaskCheckForTimeOut>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d124      	bne.n	8007adc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007a92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a94:	f000 faa6 	bl	8007fe4 <prvIsQueueFull>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d018      	beq.n	8007ad0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa0:	3310      	adds	r3, #16
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 ff52 	bl	8008950 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007aac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007aae:	f000 fa31 	bl	8007f14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007ab2:	f000 fd7f 	bl	80085b4 <xTaskResumeAll>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f47f af7c 	bne.w	80079b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007abe:	4b0c      	ldr	r3, [pc, #48]	@ (8007af0 <xQueueGenericSend+0x200>)
 8007ac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ac4:	601a      	str	r2, [r3, #0]
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	e772      	b.n	80079b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ad0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ad2:	f000 fa1f 	bl	8007f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ad6:	f000 fd6d 	bl	80085b4 <xTaskResumeAll>
 8007ada:	e76c      	b.n	80079b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007adc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ade:	f000 fa19 	bl	8007f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ae2:	f000 fd67 	bl	80085b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007ae6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3738      	adds	r7, #56	@ 0x38
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	e000ed04 	.word	0xe000ed04

08007af4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b090      	sub	sp, #64	@ 0x40
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10b      	bne.n	8007b24 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007b1e:	bf00      	nop
 8007b20:	bf00      	nop
 8007b22:	e7fd      	b.n	8007b20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d103      	bne.n	8007b32 <xQueueGenericSendFromISR+0x3e>
 8007b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <xQueueGenericSendFromISR+0x42>
 8007b32:	2301      	movs	r3, #1
 8007b34:	e000      	b.n	8007b38 <xQueueGenericSendFromISR+0x44>
 8007b36:	2300      	movs	r3, #0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10b      	bne.n	8007b54 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b40:	f383 8811 	msr	BASEPRI, r3
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b4e:	bf00      	nop
 8007b50:	bf00      	nop
 8007b52:	e7fd      	b.n	8007b50 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d103      	bne.n	8007b62 <xQueueGenericSendFromISR+0x6e>
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d101      	bne.n	8007b66 <xQueueGenericSendFromISR+0x72>
 8007b62:	2301      	movs	r3, #1
 8007b64:	e000      	b.n	8007b68 <xQueueGenericSendFromISR+0x74>
 8007b66:	2300      	movs	r3, #0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10b      	bne.n	8007b84 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	623b      	str	r3, [r7, #32]
}
 8007b7e:	bf00      	nop
 8007b80:	bf00      	nop
 8007b82:	e7fd      	b.n	8007b80 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b84:	f001 ff48 	bl	8009a18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007b88:	f3ef 8211 	mrs	r2, BASEPRI
 8007b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	61fa      	str	r2, [r7, #28]
 8007b9e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ba0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ba2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d302      	bcc.n	8007bb6 <xQueueGenericSendFromISR+0xc2>
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d12f      	bne.n	8007c16 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007bbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	68b9      	ldr	r1, [r7, #8]
 8007bca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007bcc:	f000 f912 	bl	8007df4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007bd0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd8:	d112      	bne.n	8007c00 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d016      	beq.n	8007c10 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be4:	3324      	adds	r3, #36	@ 0x24
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 ff04 	bl	80089f4 <xTaskRemoveFromEventList>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00e      	beq.n	8007c10 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00b      	beq.n	8007c10 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	e007      	b.n	8007c10 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007c04:	3301      	adds	r3, #1
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	b25a      	sxtb	r2, r3
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007c10:	2301      	movs	r3, #1
 8007c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007c14:	e001      	b.n	8007c1a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c1c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3740      	adds	r7, #64	@ 0x40
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b08c      	sub	sp, #48	@ 0x30
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10b      	bne.n	8007c62 <xQueueReceive+0x32>
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	623b      	str	r3, [r7, #32]
}
 8007c5c:	bf00      	nop
 8007c5e:	bf00      	nop
 8007c60:	e7fd      	b.n	8007c5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d103      	bne.n	8007c70 <xQueueReceive+0x40>
 8007c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <xQueueReceive+0x44>
 8007c70:	2301      	movs	r3, #1
 8007c72:	e000      	b.n	8007c76 <xQueueReceive+0x46>
 8007c74:	2300      	movs	r3, #0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10b      	bne.n	8007c92 <xQueueReceive+0x62>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	61fb      	str	r3, [r7, #28]
}
 8007c8c:	bf00      	nop
 8007c8e:	bf00      	nop
 8007c90:	e7fd      	b.n	8007c8e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c92:	f001 f875 	bl	8008d80 <xTaskGetSchedulerState>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d102      	bne.n	8007ca2 <xQueueReceive+0x72>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <xQueueReceive+0x76>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e000      	b.n	8007ca8 <xQueueReceive+0x78>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10b      	bne.n	8007cc4 <xQueueReceive+0x94>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	61bb      	str	r3, [r7, #24]
}
 8007cbe:	bf00      	nop
 8007cc0:	bf00      	nop
 8007cc2:	e7fd      	b.n	8007cc0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cc4:	f001 fdc8 	bl	8009858 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ccc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d01f      	beq.n	8007d14 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007cd4:	68b9      	ldr	r1, [r7, #8]
 8007cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cd8:	f000 f8f6 	bl	8007ec8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cde:	1e5a      	subs	r2, r3, #1
 8007ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00f      	beq.n	8007d0c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cee:	3310      	adds	r3, #16
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 fe7f 	bl	80089f4 <xTaskRemoveFromEventList>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d007      	beq.n	8007d0c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007cfc:	4b3c      	ldr	r3, [pc, #240]	@ (8007df0 <xQueueReceive+0x1c0>)
 8007cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d02:	601a      	str	r2, [r3, #0]
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d0c:	f001 fdd6 	bl	80098bc <vPortExitCritical>
				return pdPASS;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e069      	b.n	8007de8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d103      	bne.n	8007d22 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d1a:	f001 fdcf 	bl	80098bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	e062      	b.n	8007de8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d106      	bne.n	8007d36 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d28:	f107 0310 	add.w	r3, r7, #16
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 fec5 	bl	8008abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d32:	2301      	movs	r3, #1
 8007d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d36:	f001 fdc1 	bl	80098bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d3a:	f000 fc2d 	bl	8008598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d3e:	f001 fd8b 	bl	8009858 <vPortEnterCritical>
 8007d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d48:	b25b      	sxtb	r3, r3
 8007d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d4e:	d103      	bne.n	8007d58 <xQueueReceive+0x128>
 8007d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d5e:	b25b      	sxtb	r3, r3
 8007d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d64:	d103      	bne.n	8007d6e <xQueueReceive+0x13e>
 8007d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d6e:	f001 fda5 	bl	80098bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d72:	1d3a      	adds	r2, r7, #4
 8007d74:	f107 0310 	add.w	r3, r7, #16
 8007d78:	4611      	mov	r1, r2
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 feb4 	bl	8008ae8 <xTaskCheckForTimeOut>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d123      	bne.n	8007dce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d88:	f000 f916 	bl	8007fb8 <prvIsQueueEmpty>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d017      	beq.n	8007dc2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d94:	3324      	adds	r3, #36	@ 0x24
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	4611      	mov	r1, r2
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 fdd8 	bl	8008950 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007da0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007da2:	f000 f8b7 	bl	8007f14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007da6:	f000 fc05 	bl	80085b4 <xTaskResumeAll>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d189      	bne.n	8007cc4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007db0:	4b0f      	ldr	r3, [pc, #60]	@ (8007df0 <xQueueReceive+0x1c0>)
 8007db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	e780      	b.n	8007cc4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dc4:	f000 f8a6 	bl	8007f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007dc8:	f000 fbf4 	bl	80085b4 <xTaskResumeAll>
 8007dcc:	e77a      	b.n	8007cc4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007dce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dd0:	f000 f8a0 	bl	8007f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dd4:	f000 fbee 	bl	80085b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dda:	f000 f8ed 	bl	8007fb8 <prvIsQueueEmpty>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f43f af6f 	beq.w	8007cc4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007de6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3730      	adds	r7, #48	@ 0x30
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	e000ed04 	.word	0xe000ed04

08007df4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e00:	2300      	movs	r3, #0
 8007e02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10d      	bne.n	8007e2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d14d      	bne.n	8007eb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f000 ffcc 	bl	8008dbc <xTaskPriorityDisinherit>
 8007e24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	609a      	str	r2, [r3, #8]
 8007e2c:	e043      	b.n	8007eb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d119      	bne.n	8007e68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6858      	ldr	r0, [r3, #4]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	68b9      	ldr	r1, [r7, #8]
 8007e40:	f002 ff51 	bl	800ace6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e4c:	441a      	add	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d32b      	bcc.n	8007eb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	605a      	str	r2, [r3, #4]
 8007e66:	e026      	b.n	8007eb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	68d8      	ldr	r0, [r3, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e70:	461a      	mov	r2, r3
 8007e72:	68b9      	ldr	r1, [r7, #8]
 8007e74:	f002 ff37 	bl	800ace6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	68da      	ldr	r2, [r3, #12]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e80:	425b      	negs	r3, r3
 8007e82:	441a      	add	r2, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	68da      	ldr	r2, [r3, #12]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d207      	bcs.n	8007ea4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	689a      	ldr	r2, [r3, #8]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e9c:	425b      	negs	r3, r3
 8007e9e:	441a      	add	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d105      	bne.n	8007eb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	1c5a      	adds	r2, r3, #1
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007ebe:	697b      	ldr	r3, [r7, #20]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d018      	beq.n	8007f0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee2:	441a      	add	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68da      	ldr	r2, [r3, #12]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d303      	bcc.n	8007efc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68d9      	ldr	r1, [r3, #12]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f04:	461a      	mov	r2, r3
 8007f06:	6838      	ldr	r0, [r7, #0]
 8007f08:	f002 feed 	bl	800ace6 <memcpy>
	}
}
 8007f0c:	bf00      	nop
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f1c:	f001 fc9c 	bl	8009858 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f28:	e011      	b.n	8007f4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d012      	beq.n	8007f58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	3324      	adds	r3, #36	@ 0x24
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 fd5c 	bl	80089f4 <xTaskRemoveFromEventList>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f42:	f000 fe35 	bl	8008bb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	dce9      	bgt.n	8007f2a <prvUnlockQueue+0x16>
 8007f56:	e000      	b.n	8007f5a <prvUnlockQueue+0x46>
					break;
 8007f58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	22ff      	movs	r2, #255	@ 0xff
 8007f5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007f62:	f001 fcab 	bl	80098bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f66:	f001 fc77 	bl	8009858 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f72:	e011      	b.n	8007f98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d012      	beq.n	8007fa2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3310      	adds	r3, #16
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 fd37 	bl	80089f4 <xTaskRemoveFromEventList>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f8c:	f000 fe10 	bl	8008bb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	3b01      	subs	r3, #1
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	dce9      	bgt.n	8007f74 <prvUnlockQueue+0x60>
 8007fa0:	e000      	b.n	8007fa4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007fa2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	22ff      	movs	r2, #255	@ 0xff
 8007fa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007fac:	f001 fc86 	bl	80098bc <vPortExitCritical>
}
 8007fb0:	bf00      	nop
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fc0:	f001 fc4a 	bl	8009858 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d102      	bne.n	8007fd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	e001      	b.n	8007fd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fd6:	f001 fc71 	bl	80098bc <vPortExitCritical>

	return xReturn;
 8007fda:	68fb      	ldr	r3, [r7, #12]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fec:	f001 fc34 	bl	8009858 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d102      	bne.n	8008002 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	e001      	b.n	8008006 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008002:	2300      	movs	r3, #0
 8008004:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008006:	f001 fc59 	bl	80098bc <vPortExitCritical>

	return xReturn;
 800800a:	68fb      	ldr	r3, [r7, #12]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800801e:	2300      	movs	r3, #0
 8008020:	60fb      	str	r3, [r7, #12]
 8008022:	e014      	b.n	800804e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008024:	4a0f      	ldr	r2, [pc, #60]	@ (8008064 <vQueueAddToRegistry+0x50>)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10b      	bne.n	8008048 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008030:	490c      	ldr	r1, [pc, #48]	@ (8008064 <vQueueAddToRegistry+0x50>)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800803a:	4a0a      	ldr	r2, [pc, #40]	@ (8008064 <vQueueAddToRegistry+0x50>)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	00db      	lsls	r3, r3, #3
 8008040:	4413      	add	r3, r2
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008046:	e006      	b.n	8008056 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	3301      	adds	r3, #1
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2b07      	cmp	r3, #7
 8008052:	d9e7      	bls.n	8008024 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008054:	bf00      	nop
 8008056:	bf00      	nop
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	200010b8 	.word	0x200010b8

08008068 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008068:	b580      	push	{r7, lr}
 800806a:	b086      	sub	sp, #24
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008078:	f001 fbee 	bl	8009858 <vPortEnterCritical>
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008082:	b25b      	sxtb	r3, r3
 8008084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008088:	d103      	bne.n	8008092 <vQueueWaitForMessageRestricted+0x2a>
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008098:	b25b      	sxtb	r3, r3
 800809a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809e:	d103      	bne.n	80080a8 <vQueueWaitForMessageRestricted+0x40>
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080a8:	f001 fc08 	bl	80098bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d106      	bne.n	80080c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	3324      	adds	r3, #36	@ 0x24
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	68b9      	ldr	r1, [r7, #8]
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 fc6d 	bl	800899c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80080c2:	6978      	ldr	r0, [r7, #20]
 80080c4:	f7ff ff26 	bl	8007f14 <prvUnlockQueue>
	}
 80080c8:	bf00      	nop
 80080ca:	3718      	adds	r7, #24
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08e      	sub	sp, #56	@ 0x38
 80080d4:	af04      	add	r7, sp, #16
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10b      	bne.n	80080fc <xTaskCreateStatic+0x2c>
	__asm volatile
 80080e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	623b      	str	r3, [r7, #32]
}
 80080f6:	bf00      	nop
 80080f8:	bf00      	nop
 80080fa:	e7fd      	b.n	80080f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80080fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10b      	bne.n	800811a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	61fb      	str	r3, [r7, #28]
}
 8008114:	bf00      	nop
 8008116:	bf00      	nop
 8008118:	e7fd      	b.n	8008116 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800811a:	23a8      	movs	r3, #168	@ 0xa8
 800811c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	2ba8      	cmp	r3, #168	@ 0xa8
 8008122:	d00b      	beq.n	800813c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	61bb      	str	r3, [r7, #24]
}
 8008136:	bf00      	nop
 8008138:	bf00      	nop
 800813a:	e7fd      	b.n	8008138 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800813c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800813e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008140:	2b00      	cmp	r3, #0
 8008142:	d01e      	beq.n	8008182 <xTaskCreateStatic+0xb2>
 8008144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008146:	2b00      	cmp	r3, #0
 8008148:	d01b      	beq.n	8008182 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800814a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800814c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800814e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008150:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008152:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008156:	2202      	movs	r2, #2
 8008158:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800815c:	2300      	movs	r3, #0
 800815e:	9303      	str	r3, [sp, #12]
 8008160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008162:	9302      	str	r3, [sp, #8]
 8008164:	f107 0314 	add.w	r3, r7, #20
 8008168:	9301      	str	r3, [sp, #4]
 800816a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	68b9      	ldr	r1, [r7, #8]
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 f851 	bl	800821c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800817a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800817c:	f000 f8f6 	bl	800836c <prvAddNewTaskToReadyList>
 8008180:	e001      	b.n	8008186 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008182:	2300      	movs	r3, #0
 8008184:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008186:	697b      	ldr	r3, [r7, #20]
	}
 8008188:	4618      	mov	r0, r3
 800818a:	3728      	adds	r7, #40	@ 0x28
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008190:	b580      	push	{r7, lr}
 8008192:	b08c      	sub	sp, #48	@ 0x30
 8008194:	af04      	add	r7, sp, #16
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	603b      	str	r3, [r7, #0]
 800819c:	4613      	mov	r3, r2
 800819e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80081a0:	88fb      	ldrh	r3, [r7, #6]
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4618      	mov	r0, r3
 80081a6:	f001 fc79 	bl	8009a9c <pvPortMalloc>
 80081aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00e      	beq.n	80081d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80081b2:	20a8      	movs	r0, #168	@ 0xa8
 80081b4:	f001 fc72 	bl	8009a9c <pvPortMalloc>
 80081b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d003      	beq.n	80081c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80081c6:	e005      	b.n	80081d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80081c8:	6978      	ldr	r0, [r7, #20]
 80081ca:	f001 fd35 	bl	8009c38 <vPortFree>
 80081ce:	e001      	b.n	80081d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081d0:	2300      	movs	r3, #0
 80081d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d017      	beq.n	800820a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081e2:	88fa      	ldrh	r2, [r7, #6]
 80081e4:	2300      	movs	r3, #0
 80081e6:	9303      	str	r3, [sp, #12]
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	9302      	str	r3, [sp, #8]
 80081ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ee:	9301      	str	r3, [sp, #4]
 80081f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	68b9      	ldr	r1, [r7, #8]
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f000 f80f 	bl	800821c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081fe:	69f8      	ldr	r0, [r7, #28]
 8008200:	f000 f8b4 	bl	800836c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008204:	2301      	movs	r3, #1
 8008206:	61bb      	str	r3, [r7, #24]
 8008208:	e002      	b.n	8008210 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800820a:	f04f 33ff 	mov.w	r3, #4294967295
 800820e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008210:	69bb      	ldr	r3, [r7, #24]
	}
 8008212:	4618      	mov	r0, r3
 8008214:	3720      	adds	r7, #32
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
	...

0800821c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b088      	sub	sp, #32
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
 8008228:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800822a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	461a      	mov	r2, r3
 8008234:	21a5      	movs	r1, #165	@ 0xa5
 8008236:	f002 fc81 	bl	800ab3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800823a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008244:	3b01      	subs	r3, #1
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	f023 0307 	bic.w	r3, r3, #7
 8008252:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	f003 0307 	and.w	r3, r3, #7
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00b      	beq.n	8008276 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	617b      	str	r3, [r7, #20]
}
 8008270:	bf00      	nop
 8008272:	bf00      	nop
 8008274:	e7fd      	b.n	8008272 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d01f      	beq.n	80082bc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800827c:	2300      	movs	r3, #0
 800827e:	61fb      	str	r3, [r7, #28]
 8008280:	e012      	b.n	80082a8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	4413      	add	r3, r2
 8008288:	7819      	ldrb	r1, [r3, #0]
 800828a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	4413      	add	r3, r2
 8008290:	3334      	adds	r3, #52	@ 0x34
 8008292:	460a      	mov	r2, r1
 8008294:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	4413      	add	r3, r2
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d006      	beq.n	80082b0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	3301      	adds	r3, #1
 80082a6:	61fb      	str	r3, [r7, #28]
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	2b0f      	cmp	r3, #15
 80082ac:	d9e9      	bls.n	8008282 <prvInitialiseNewTask+0x66>
 80082ae:	e000      	b.n	80082b2 <prvInitialiseNewTask+0x96>
			{
				break;
 80082b0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80082b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80082ba:	e003      	b.n	80082c4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80082bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80082c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c6:	2b37      	cmp	r3, #55	@ 0x37
 80082c8:	d901      	bls.n	80082ce <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80082ca:	2337      	movs	r3, #55	@ 0x37
 80082cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80082ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80082d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082d8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80082da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082dc:	2200      	movs	r2, #0
 80082de:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e2:	3304      	adds	r3, #4
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7ff f965 	bl	80075b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ec:	3318      	adds	r3, #24
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7ff f960 	bl	80075b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008302:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008306:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008308:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830c:	2200      	movs	r2, #0
 800830e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008314:	2200      	movs	r2, #0
 8008316:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800831a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831c:	3354      	adds	r3, #84	@ 0x54
 800831e:	224c      	movs	r2, #76	@ 0x4c
 8008320:	2100      	movs	r1, #0
 8008322:	4618      	mov	r0, r3
 8008324:	f002 fc0a 	bl	800ab3c <memset>
 8008328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832a:	4a0d      	ldr	r2, [pc, #52]	@ (8008360 <prvInitialiseNewTask+0x144>)
 800832c:	659a      	str	r2, [r3, #88]	@ 0x58
 800832e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008330:	4a0c      	ldr	r2, [pc, #48]	@ (8008364 <prvInitialiseNewTask+0x148>)
 8008332:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008336:	4a0c      	ldr	r2, [pc, #48]	@ (8008368 <prvInitialiseNewTask+0x14c>)
 8008338:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800833a:	683a      	ldr	r2, [r7, #0]
 800833c:	68f9      	ldr	r1, [r7, #12]
 800833e:	69b8      	ldr	r0, [r7, #24]
 8008340:	f001 f95a 	bl	80095f8 <pxPortInitialiseStack>
 8008344:	4602      	mov	r2, r0
 8008346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008348:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800834a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800834c:	2b00      	cmp	r3, #0
 800834e:	d002      	beq.n	8008356 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008356:	bf00      	nop
 8008358:	3720      	adds	r7, #32
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	20002304 	.word	0x20002304
 8008364:	2000236c 	.word	0x2000236c
 8008368:	200023d4 	.word	0x200023d4

0800836c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008374:	f001 fa70 	bl	8009858 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008378:	4b2d      	ldr	r3, [pc, #180]	@ (8008430 <prvAddNewTaskToReadyList+0xc4>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3301      	adds	r3, #1
 800837e:	4a2c      	ldr	r2, [pc, #176]	@ (8008430 <prvAddNewTaskToReadyList+0xc4>)
 8008380:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008382:	4b2c      	ldr	r3, [pc, #176]	@ (8008434 <prvAddNewTaskToReadyList+0xc8>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d109      	bne.n	800839e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800838a:	4a2a      	ldr	r2, [pc, #168]	@ (8008434 <prvAddNewTaskToReadyList+0xc8>)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008390:	4b27      	ldr	r3, [pc, #156]	@ (8008430 <prvAddNewTaskToReadyList+0xc4>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d110      	bne.n	80083ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008398:	f000 fc2e 	bl	8008bf8 <prvInitialiseTaskLists>
 800839c:	e00d      	b.n	80083ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800839e:	4b26      	ldr	r3, [pc, #152]	@ (8008438 <prvAddNewTaskToReadyList+0xcc>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d109      	bne.n	80083ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80083a6:	4b23      	ldr	r3, [pc, #140]	@ (8008434 <prvAddNewTaskToReadyList+0xc8>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d802      	bhi.n	80083ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80083b4:	4a1f      	ldr	r2, [pc, #124]	@ (8008434 <prvAddNewTaskToReadyList+0xc8>)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80083ba:	4b20      	ldr	r3, [pc, #128]	@ (800843c <prvAddNewTaskToReadyList+0xd0>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	3301      	adds	r3, #1
 80083c0:	4a1e      	ldr	r2, [pc, #120]	@ (800843c <prvAddNewTaskToReadyList+0xd0>)
 80083c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80083c4:	4b1d      	ldr	r3, [pc, #116]	@ (800843c <prvAddNewTaskToReadyList+0xd0>)
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083d0:	4b1b      	ldr	r3, [pc, #108]	@ (8008440 <prvAddNewTaskToReadyList+0xd4>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d903      	bls.n	80083e0 <prvAddNewTaskToReadyList+0x74>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083dc:	4a18      	ldr	r2, [pc, #96]	@ (8008440 <prvAddNewTaskToReadyList+0xd4>)
 80083de:	6013      	str	r3, [r2, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083e4:	4613      	mov	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4413      	add	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4a15      	ldr	r2, [pc, #84]	@ (8008444 <prvAddNewTaskToReadyList+0xd8>)
 80083ee:	441a      	add	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	3304      	adds	r3, #4
 80083f4:	4619      	mov	r1, r3
 80083f6:	4610      	mov	r0, r2
 80083f8:	f7ff f8e9 	bl	80075ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80083fc:	f001 fa5e 	bl	80098bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008400:	4b0d      	ldr	r3, [pc, #52]	@ (8008438 <prvAddNewTaskToReadyList+0xcc>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00e      	beq.n	8008426 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008408:	4b0a      	ldr	r3, [pc, #40]	@ (8008434 <prvAddNewTaskToReadyList+0xc8>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008412:	429a      	cmp	r2, r3
 8008414:	d207      	bcs.n	8008426 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008416:	4b0c      	ldr	r3, [pc, #48]	@ (8008448 <prvAddNewTaskToReadyList+0xdc>)
 8008418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008426:	bf00      	nop
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	200015cc 	.word	0x200015cc
 8008434:	200010f8 	.word	0x200010f8
 8008438:	200015d8 	.word	0x200015d8
 800843c:	200015e8 	.word	0x200015e8
 8008440:	200015d4 	.word	0x200015d4
 8008444:	200010fc 	.word	0x200010fc
 8008448:	e000ed04 	.word	0xe000ed04

0800844c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008454:	2300      	movs	r3, #0
 8008456:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d018      	beq.n	8008490 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800845e:	4b14      	ldr	r3, [pc, #80]	@ (80084b0 <vTaskDelay+0x64>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00b      	beq.n	800847e <vTaskDelay+0x32>
	__asm volatile
 8008466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	60bb      	str	r3, [r7, #8]
}
 8008478:	bf00      	nop
 800847a:	bf00      	nop
 800847c:	e7fd      	b.n	800847a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800847e:	f000 f88b 	bl	8008598 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008482:	2100      	movs	r1, #0
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fd09 	bl	8008e9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800848a:	f000 f893 	bl	80085b4 <xTaskResumeAll>
 800848e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d107      	bne.n	80084a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008496:	4b07      	ldr	r3, [pc, #28]	@ (80084b4 <vTaskDelay+0x68>)
 8008498:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800849c:	601a      	str	r2, [r3, #0]
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80084a6:	bf00      	nop
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	200015f4 	.word	0x200015f4
 80084b4:	e000ed04 	.word	0xe000ed04

080084b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b08a      	sub	sp, #40	@ 0x28
 80084bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80084be:	2300      	movs	r3, #0
 80084c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80084c2:	2300      	movs	r3, #0
 80084c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80084c6:	463a      	mov	r2, r7
 80084c8:	1d39      	adds	r1, r7, #4
 80084ca:	f107 0308 	add.w	r3, r7, #8
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7ff f81c 	bl	800750c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	9202      	str	r2, [sp, #8]
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	2300      	movs	r3, #0
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	2300      	movs	r3, #0
 80084e4:	460a      	mov	r2, r1
 80084e6:	4924      	ldr	r1, [pc, #144]	@ (8008578 <vTaskStartScheduler+0xc0>)
 80084e8:	4824      	ldr	r0, [pc, #144]	@ (800857c <vTaskStartScheduler+0xc4>)
 80084ea:	f7ff fdf1 	bl	80080d0 <xTaskCreateStatic>
 80084ee:	4603      	mov	r3, r0
 80084f0:	4a23      	ldr	r2, [pc, #140]	@ (8008580 <vTaskStartScheduler+0xc8>)
 80084f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084f4:	4b22      	ldr	r3, [pc, #136]	@ (8008580 <vTaskStartScheduler+0xc8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d002      	beq.n	8008502 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80084fc:	2301      	movs	r3, #1
 80084fe:	617b      	str	r3, [r7, #20]
 8008500:	e001      	b.n	8008506 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008502:	2300      	movs	r3, #0
 8008504:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d102      	bne.n	8008512 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800850c:	f000 fd1a 	bl	8008f44 <xTimerCreateTimerTask>
 8008510:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d11b      	bne.n	8008550 <vTaskStartScheduler+0x98>
	__asm volatile
 8008518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800851c:	f383 8811 	msr	BASEPRI, r3
 8008520:	f3bf 8f6f 	isb	sy
 8008524:	f3bf 8f4f 	dsb	sy
 8008528:	613b      	str	r3, [r7, #16]
}
 800852a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800852c:	4b15      	ldr	r3, [pc, #84]	@ (8008584 <vTaskStartScheduler+0xcc>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	3354      	adds	r3, #84	@ 0x54
 8008532:	4a15      	ldr	r2, [pc, #84]	@ (8008588 <vTaskStartScheduler+0xd0>)
 8008534:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008536:	4b15      	ldr	r3, [pc, #84]	@ (800858c <vTaskStartScheduler+0xd4>)
 8008538:	f04f 32ff 	mov.w	r2, #4294967295
 800853c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800853e:	4b14      	ldr	r3, [pc, #80]	@ (8008590 <vTaskStartScheduler+0xd8>)
 8008540:	2201      	movs	r2, #1
 8008542:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008544:	4b13      	ldr	r3, [pc, #76]	@ (8008594 <vTaskStartScheduler+0xdc>)
 8008546:	2200      	movs	r2, #0
 8008548:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800854a:	f001 f8e1 	bl	8009710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800854e:	e00f      	b.n	8008570 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008556:	d10b      	bne.n	8008570 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800855c:	f383 8811 	msr	BASEPRI, r3
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	60fb      	str	r3, [r7, #12]
}
 800856a:	bf00      	nop
 800856c:	bf00      	nop
 800856e:	e7fd      	b.n	800856c <vTaskStartScheduler+0xb4>
}
 8008570:	bf00      	nop
 8008572:	3718      	adds	r7, #24
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	0800d210 	.word	0x0800d210
 800857c:	08008bc9 	.word	0x08008bc9
 8008580:	200015f0 	.word	0x200015f0
 8008584:	200010f8 	.word	0x200010f8
 8008588:	2000001c 	.word	0x2000001c
 800858c:	200015ec 	.word	0x200015ec
 8008590:	200015d8 	.word	0x200015d8
 8008594:	200015d0 	.word	0x200015d0

08008598 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008598:	b480      	push	{r7}
 800859a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800859c:	4b04      	ldr	r3, [pc, #16]	@ (80085b0 <vTaskSuspendAll+0x18>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3301      	adds	r3, #1
 80085a2:	4a03      	ldr	r2, [pc, #12]	@ (80085b0 <vTaskSuspendAll+0x18>)
 80085a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80085a6:	bf00      	nop
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr
 80085b0:	200015f4 	.word	0x200015f4

080085b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80085ba:	2300      	movs	r3, #0
 80085bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80085be:	2300      	movs	r3, #0
 80085c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80085c2:	4b42      	ldr	r3, [pc, #264]	@ (80086cc <xTaskResumeAll+0x118>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d10b      	bne.n	80085e2 <xTaskResumeAll+0x2e>
	__asm volatile
 80085ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ce:	f383 8811 	msr	BASEPRI, r3
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	603b      	str	r3, [r7, #0]
}
 80085dc:	bf00      	nop
 80085de:	bf00      	nop
 80085e0:	e7fd      	b.n	80085de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80085e2:	f001 f939 	bl	8009858 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80085e6:	4b39      	ldr	r3, [pc, #228]	@ (80086cc <xTaskResumeAll+0x118>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	4a37      	ldr	r2, [pc, #220]	@ (80086cc <xTaskResumeAll+0x118>)
 80085ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085f0:	4b36      	ldr	r3, [pc, #216]	@ (80086cc <xTaskResumeAll+0x118>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d162      	bne.n	80086be <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085f8:	4b35      	ldr	r3, [pc, #212]	@ (80086d0 <xTaskResumeAll+0x11c>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d05e      	beq.n	80086be <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008600:	e02f      	b.n	8008662 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008602:	4b34      	ldr	r3, [pc, #208]	@ (80086d4 <xTaskResumeAll+0x120>)
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3318      	adds	r3, #24
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff f83a 	bl	8007688 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	3304      	adds	r3, #4
 8008618:	4618      	mov	r0, r3
 800861a:	f7ff f835 	bl	8007688 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008622:	4b2d      	ldr	r3, [pc, #180]	@ (80086d8 <xTaskResumeAll+0x124>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	429a      	cmp	r2, r3
 8008628:	d903      	bls.n	8008632 <xTaskResumeAll+0x7e>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862e:	4a2a      	ldr	r2, [pc, #168]	@ (80086d8 <xTaskResumeAll+0x124>)
 8008630:	6013      	str	r3, [r2, #0]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008636:	4613      	mov	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4413      	add	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4a27      	ldr	r2, [pc, #156]	@ (80086dc <xTaskResumeAll+0x128>)
 8008640:	441a      	add	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	3304      	adds	r3, #4
 8008646:	4619      	mov	r1, r3
 8008648:	4610      	mov	r0, r2
 800864a:	f7fe ffc0 	bl	80075ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008652:	4b23      	ldr	r3, [pc, #140]	@ (80086e0 <xTaskResumeAll+0x12c>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008658:	429a      	cmp	r2, r3
 800865a:	d302      	bcc.n	8008662 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800865c:	4b21      	ldr	r3, [pc, #132]	@ (80086e4 <xTaskResumeAll+0x130>)
 800865e:	2201      	movs	r2, #1
 8008660:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008662:	4b1c      	ldr	r3, [pc, #112]	@ (80086d4 <xTaskResumeAll+0x120>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1cb      	bne.n	8008602 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008670:	f000 fb66 	bl	8008d40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008674:	4b1c      	ldr	r3, [pc, #112]	@ (80086e8 <xTaskResumeAll+0x134>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d010      	beq.n	80086a2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008680:	f000 f846 	bl	8008710 <xTaskIncrementTick>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d002      	beq.n	8008690 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800868a:	4b16      	ldr	r3, [pc, #88]	@ (80086e4 <xTaskResumeAll+0x130>)
 800868c:	2201      	movs	r2, #1
 800868e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	3b01      	subs	r3, #1
 8008694:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1f1      	bne.n	8008680 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800869c:	4b12      	ldr	r3, [pc, #72]	@ (80086e8 <xTaskResumeAll+0x134>)
 800869e:	2200      	movs	r2, #0
 80086a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80086a2:	4b10      	ldr	r3, [pc, #64]	@ (80086e4 <xTaskResumeAll+0x130>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d009      	beq.n	80086be <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80086aa:	2301      	movs	r3, #1
 80086ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80086ae:	4b0f      	ldr	r3, [pc, #60]	@ (80086ec <xTaskResumeAll+0x138>)
 80086b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086be:	f001 f8fd 	bl	80098bc <vPortExitCritical>

	return xAlreadyYielded;
 80086c2:	68bb      	ldr	r3, [r7, #8]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	200015f4 	.word	0x200015f4
 80086d0:	200015cc 	.word	0x200015cc
 80086d4:	2000158c 	.word	0x2000158c
 80086d8:	200015d4 	.word	0x200015d4
 80086dc:	200010fc 	.word	0x200010fc
 80086e0:	200010f8 	.word	0x200010f8
 80086e4:	200015e0 	.word	0x200015e0
 80086e8:	200015dc 	.word	0x200015dc
 80086ec:	e000ed04 	.word	0xe000ed04

080086f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086f6:	4b05      	ldr	r3, [pc, #20]	@ (800870c <xTaskGetTickCount+0x1c>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80086fc:	687b      	ldr	r3, [r7, #4]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	200015d0 	.word	0x200015d0

08008710 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008716:	2300      	movs	r3, #0
 8008718:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800871a:	4b4f      	ldr	r3, [pc, #316]	@ (8008858 <xTaskIncrementTick+0x148>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	f040 8090 	bne.w	8008844 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008724:	4b4d      	ldr	r3, [pc, #308]	@ (800885c <xTaskIncrementTick+0x14c>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	3301      	adds	r3, #1
 800872a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800872c:	4a4b      	ldr	r2, [pc, #300]	@ (800885c <xTaskIncrementTick+0x14c>)
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d121      	bne.n	800877c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008738:	4b49      	ldr	r3, [pc, #292]	@ (8008860 <xTaskIncrementTick+0x150>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00b      	beq.n	800875a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	603b      	str	r3, [r7, #0]
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop
 8008758:	e7fd      	b.n	8008756 <xTaskIncrementTick+0x46>
 800875a:	4b41      	ldr	r3, [pc, #260]	@ (8008860 <xTaskIncrementTick+0x150>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	60fb      	str	r3, [r7, #12]
 8008760:	4b40      	ldr	r3, [pc, #256]	@ (8008864 <xTaskIncrementTick+0x154>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a3e      	ldr	r2, [pc, #248]	@ (8008860 <xTaskIncrementTick+0x150>)
 8008766:	6013      	str	r3, [r2, #0]
 8008768:	4a3e      	ldr	r2, [pc, #248]	@ (8008864 <xTaskIncrementTick+0x154>)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6013      	str	r3, [r2, #0]
 800876e:	4b3e      	ldr	r3, [pc, #248]	@ (8008868 <xTaskIncrementTick+0x158>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3301      	adds	r3, #1
 8008774:	4a3c      	ldr	r2, [pc, #240]	@ (8008868 <xTaskIncrementTick+0x158>)
 8008776:	6013      	str	r3, [r2, #0]
 8008778:	f000 fae2 	bl	8008d40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800877c:	4b3b      	ldr	r3, [pc, #236]	@ (800886c <xTaskIncrementTick+0x15c>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	693a      	ldr	r2, [r7, #16]
 8008782:	429a      	cmp	r2, r3
 8008784:	d349      	bcc.n	800881a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008786:	4b36      	ldr	r3, [pc, #216]	@ (8008860 <xTaskIncrementTick+0x150>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d104      	bne.n	800879a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008790:	4b36      	ldr	r3, [pc, #216]	@ (800886c <xTaskIncrementTick+0x15c>)
 8008792:	f04f 32ff 	mov.w	r2, #4294967295
 8008796:	601a      	str	r2, [r3, #0]
					break;
 8008798:	e03f      	b.n	800881a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800879a:	4b31      	ldr	r3, [pc, #196]	@ (8008860 <xTaskIncrementTick+0x150>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d203      	bcs.n	80087ba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80087b2:	4a2e      	ldr	r2, [pc, #184]	@ (800886c <xTaskIncrementTick+0x15c>)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087b8:	e02f      	b.n	800881a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	3304      	adds	r3, #4
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fe ff62 	bl	8007688 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d004      	beq.n	80087d6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	3318      	adds	r3, #24
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7fe ff59 	bl	8007688 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087da:	4b25      	ldr	r3, [pc, #148]	@ (8008870 <xTaskIncrementTick+0x160>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d903      	bls.n	80087ea <xTaskIncrementTick+0xda>
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e6:	4a22      	ldr	r2, [pc, #136]	@ (8008870 <xTaskIncrementTick+0x160>)
 80087e8:	6013      	str	r3, [r2, #0]
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ee:	4613      	mov	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4a1f      	ldr	r2, [pc, #124]	@ (8008874 <xTaskIncrementTick+0x164>)
 80087f8:	441a      	add	r2, r3
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	3304      	adds	r3, #4
 80087fe:	4619      	mov	r1, r3
 8008800:	4610      	mov	r0, r2
 8008802:	f7fe fee4 	bl	80075ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800880a:	4b1b      	ldr	r3, [pc, #108]	@ (8008878 <xTaskIncrementTick+0x168>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008810:	429a      	cmp	r2, r3
 8008812:	d3b8      	bcc.n	8008786 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008814:	2301      	movs	r3, #1
 8008816:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008818:	e7b5      	b.n	8008786 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800881a:	4b17      	ldr	r3, [pc, #92]	@ (8008878 <xTaskIncrementTick+0x168>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008820:	4914      	ldr	r1, [pc, #80]	@ (8008874 <xTaskIncrementTick+0x164>)
 8008822:	4613      	mov	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	440b      	add	r3, r1
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d901      	bls.n	8008836 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008832:	2301      	movs	r3, #1
 8008834:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008836:	4b11      	ldr	r3, [pc, #68]	@ (800887c <xTaskIncrementTick+0x16c>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d007      	beq.n	800884e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800883e:	2301      	movs	r3, #1
 8008840:	617b      	str	r3, [r7, #20]
 8008842:	e004      	b.n	800884e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008844:	4b0e      	ldr	r3, [pc, #56]	@ (8008880 <xTaskIncrementTick+0x170>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3301      	adds	r3, #1
 800884a:	4a0d      	ldr	r2, [pc, #52]	@ (8008880 <xTaskIncrementTick+0x170>)
 800884c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800884e:	697b      	ldr	r3, [r7, #20]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3718      	adds	r7, #24
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	200015f4 	.word	0x200015f4
 800885c:	200015d0 	.word	0x200015d0
 8008860:	20001584 	.word	0x20001584
 8008864:	20001588 	.word	0x20001588
 8008868:	200015e4 	.word	0x200015e4
 800886c:	200015ec 	.word	0x200015ec
 8008870:	200015d4 	.word	0x200015d4
 8008874:	200010fc 	.word	0x200010fc
 8008878:	200010f8 	.word	0x200010f8
 800887c:	200015e0 	.word	0x200015e0
 8008880:	200015dc 	.word	0x200015dc

08008884 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800888a:	4b2b      	ldr	r3, [pc, #172]	@ (8008938 <vTaskSwitchContext+0xb4>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d003      	beq.n	800889a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008892:	4b2a      	ldr	r3, [pc, #168]	@ (800893c <vTaskSwitchContext+0xb8>)
 8008894:	2201      	movs	r2, #1
 8008896:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008898:	e047      	b.n	800892a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800889a:	4b28      	ldr	r3, [pc, #160]	@ (800893c <vTaskSwitchContext+0xb8>)
 800889c:	2200      	movs	r2, #0
 800889e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088a0:	4b27      	ldr	r3, [pc, #156]	@ (8008940 <vTaskSwitchContext+0xbc>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	60fb      	str	r3, [r7, #12]
 80088a6:	e011      	b.n	80088cc <vTaskSwitchContext+0x48>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d10b      	bne.n	80088c6 <vTaskSwitchContext+0x42>
	__asm volatile
 80088ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	607b      	str	r3, [r7, #4]
}
 80088c0:	bf00      	nop
 80088c2:	bf00      	nop
 80088c4:	e7fd      	b.n	80088c2 <vTaskSwitchContext+0x3e>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	3b01      	subs	r3, #1
 80088ca:	60fb      	str	r3, [r7, #12]
 80088cc:	491d      	ldr	r1, [pc, #116]	@ (8008944 <vTaskSwitchContext+0xc0>)
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	4613      	mov	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	440b      	add	r3, r1
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d0e3      	beq.n	80088a8 <vTaskSwitchContext+0x24>
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	4613      	mov	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4413      	add	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4a16      	ldr	r2, [pc, #88]	@ (8008944 <vTaskSwitchContext+0xc0>)
 80088ec:	4413      	add	r3, r2
 80088ee:	60bb      	str	r3, [r7, #8]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	605a      	str	r2, [r3, #4]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	685a      	ldr	r2, [r3, #4]
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	3308      	adds	r3, #8
 8008902:	429a      	cmp	r2, r3
 8008904:	d104      	bne.n	8008910 <vTaskSwitchContext+0x8c>
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	685a      	ldr	r2, [r3, #4]
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	605a      	str	r2, [r3, #4]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	4a0c      	ldr	r2, [pc, #48]	@ (8008948 <vTaskSwitchContext+0xc4>)
 8008918:	6013      	str	r3, [r2, #0]
 800891a:	4a09      	ldr	r2, [pc, #36]	@ (8008940 <vTaskSwitchContext+0xbc>)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008920:	4b09      	ldr	r3, [pc, #36]	@ (8008948 <vTaskSwitchContext+0xc4>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	3354      	adds	r3, #84	@ 0x54
 8008926:	4a09      	ldr	r2, [pc, #36]	@ (800894c <vTaskSwitchContext+0xc8>)
 8008928:	6013      	str	r3, [r2, #0]
}
 800892a:	bf00      	nop
 800892c:	3714      	adds	r7, #20
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	200015f4 	.word	0x200015f4
 800893c:	200015e0 	.word	0x200015e0
 8008940:	200015d4 	.word	0x200015d4
 8008944:	200010fc 	.word	0x200010fc
 8008948:	200010f8 	.word	0x200010f8
 800894c:	2000001c 	.word	0x2000001c

08008950 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10b      	bne.n	8008978 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	60fb      	str	r3, [r7, #12]
}
 8008972:	bf00      	nop
 8008974:	bf00      	nop
 8008976:	e7fd      	b.n	8008974 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008978:	4b07      	ldr	r3, [pc, #28]	@ (8008998 <vTaskPlaceOnEventList+0x48>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3318      	adds	r3, #24
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7fe fe48 	bl	8007616 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008986:	2101      	movs	r1, #1
 8008988:	6838      	ldr	r0, [r7, #0]
 800898a:	f000 fa87 	bl	8008e9c <prvAddCurrentTaskToDelayedList>
}
 800898e:	bf00      	nop
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	200010f8 	.word	0x200010f8

0800899c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10b      	bne.n	80089c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80089ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	617b      	str	r3, [r7, #20]
}
 80089c0:	bf00      	nop
 80089c2:	bf00      	nop
 80089c4:	e7fd      	b.n	80089c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089c6:	4b0a      	ldr	r3, [pc, #40]	@ (80089f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3318      	adds	r3, #24
 80089cc:	4619      	mov	r1, r3
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f7fe fdfd 	bl	80075ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d002      	beq.n	80089e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80089da:	f04f 33ff 	mov.w	r3, #4294967295
 80089de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80089e0:	6879      	ldr	r1, [r7, #4]
 80089e2:	68b8      	ldr	r0, [r7, #8]
 80089e4:	f000 fa5a 	bl	8008e9c <prvAddCurrentTaskToDelayedList>
	}
 80089e8:	bf00      	nop
 80089ea:	3718      	adds	r7, #24
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	200010f8 	.word	0x200010f8

080089f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10b      	bne.n	8008a22 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	60fb      	str	r3, [r7, #12]
}
 8008a1c:	bf00      	nop
 8008a1e:	bf00      	nop
 8008a20:	e7fd      	b.n	8008a1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	3318      	adds	r3, #24
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fe fe2e 	bl	8007688 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8008aa4 <xTaskRemoveFromEventList+0xb0>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d11d      	bne.n	8008a70 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	3304      	adds	r3, #4
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fe fe25 	bl	8007688 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a42:	4b19      	ldr	r3, [pc, #100]	@ (8008aa8 <xTaskRemoveFromEventList+0xb4>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d903      	bls.n	8008a52 <xTaskRemoveFromEventList+0x5e>
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a4e:	4a16      	ldr	r2, [pc, #88]	@ (8008aa8 <xTaskRemoveFromEventList+0xb4>)
 8008a50:	6013      	str	r3, [r2, #0]
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a56:	4613      	mov	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4413      	add	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4a13      	ldr	r2, [pc, #76]	@ (8008aac <xTaskRemoveFromEventList+0xb8>)
 8008a60:	441a      	add	r2, r3
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	3304      	adds	r3, #4
 8008a66:	4619      	mov	r1, r3
 8008a68:	4610      	mov	r0, r2
 8008a6a:	f7fe fdb0 	bl	80075ce <vListInsertEnd>
 8008a6e:	e005      	b.n	8008a7c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	3318      	adds	r3, #24
 8008a74:	4619      	mov	r1, r3
 8008a76:	480e      	ldr	r0, [pc, #56]	@ (8008ab0 <xTaskRemoveFromEventList+0xbc>)
 8008a78:	f7fe fda9 	bl	80075ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a80:	4b0c      	ldr	r3, [pc, #48]	@ (8008ab4 <xTaskRemoveFromEventList+0xc0>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d905      	bls.n	8008a96 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8008ab8 <xTaskRemoveFromEventList+0xc4>)
 8008a90:	2201      	movs	r2, #1
 8008a92:	601a      	str	r2, [r3, #0]
 8008a94:	e001      	b.n	8008a9a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008a96:	2300      	movs	r3, #0
 8008a98:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a9a:	697b      	ldr	r3, [r7, #20]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3718      	adds	r7, #24
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	200015f4 	.word	0x200015f4
 8008aa8:	200015d4 	.word	0x200015d4
 8008aac:	200010fc 	.word	0x200010fc
 8008ab0:	2000158c 	.word	0x2000158c
 8008ab4:	200010f8 	.word	0x200010f8
 8008ab8:	200015e0 	.word	0x200015e0

08008abc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ac4:	4b06      	ldr	r3, [pc, #24]	@ (8008ae0 <vTaskInternalSetTimeOutState+0x24>)
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008acc:	4b05      	ldr	r3, [pc, #20]	@ (8008ae4 <vTaskInternalSetTimeOutState+0x28>)
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	605a      	str	r2, [r3, #4]
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	200015e4 	.word	0x200015e4
 8008ae4:	200015d0 	.word	0x200015d0

08008ae8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b088      	sub	sp, #32
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10b      	bne.n	8008b10 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afc:	f383 8811 	msr	BASEPRI, r3
 8008b00:	f3bf 8f6f 	isb	sy
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	613b      	str	r3, [r7, #16]
}
 8008b0a:	bf00      	nop
 8008b0c:	bf00      	nop
 8008b0e:	e7fd      	b.n	8008b0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10b      	bne.n	8008b2e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	60fb      	str	r3, [r7, #12]
}
 8008b28:	bf00      	nop
 8008b2a:	bf00      	nop
 8008b2c:	e7fd      	b.n	8008b2a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008b2e:	f000 fe93 	bl	8009858 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b32:	4b1d      	ldr	r3, [pc, #116]	@ (8008ba8 <xTaskCheckForTimeOut+0xc0>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	69ba      	ldr	r2, [r7, #24]
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b4a:	d102      	bne.n	8008b52 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	61fb      	str	r3, [r7, #28]
 8008b50:	e023      	b.n	8008b9a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	4b15      	ldr	r3, [pc, #84]	@ (8008bac <xTaskCheckForTimeOut+0xc4>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d007      	beq.n	8008b6e <xTaskCheckForTimeOut+0x86>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	69ba      	ldr	r2, [r7, #24]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d302      	bcc.n	8008b6e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	61fb      	str	r3, [r7, #28]
 8008b6c:	e015      	b.n	8008b9a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d20b      	bcs.n	8008b90 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	1ad2      	subs	r2, r2, r3
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f7ff ff99 	bl	8008abc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	61fb      	str	r3, [r7, #28]
 8008b8e:	e004      	b.n	8008b9a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2200      	movs	r2, #0
 8008b94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b96:	2301      	movs	r3, #1
 8008b98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b9a:	f000 fe8f 	bl	80098bc <vPortExitCritical>

	return xReturn;
 8008b9e:	69fb      	ldr	r3, [r7, #28]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3720      	adds	r7, #32
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	200015d0 	.word	0x200015d0
 8008bac:	200015e4 	.word	0x200015e4

08008bb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008bb4:	4b03      	ldr	r3, [pc, #12]	@ (8008bc4 <vTaskMissedYield+0x14>)
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]
}
 8008bba:	bf00      	nop
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr
 8008bc4:	200015e0 	.word	0x200015e0

08008bc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008bd0:	f000 f852 	bl	8008c78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008bd4:	4b06      	ldr	r3, [pc, #24]	@ (8008bf0 <prvIdleTask+0x28>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d9f9      	bls.n	8008bd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bdc:	4b05      	ldr	r3, [pc, #20]	@ (8008bf4 <prvIdleTask+0x2c>)
 8008bde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008be2:	601a      	str	r2, [r3, #0]
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008bec:	e7f0      	b.n	8008bd0 <prvIdleTask+0x8>
 8008bee:	bf00      	nop
 8008bf0:	200010fc 	.word	0x200010fc
 8008bf4:	e000ed04 	.word	0xe000ed04

08008bf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bfe:	2300      	movs	r3, #0
 8008c00:	607b      	str	r3, [r7, #4]
 8008c02:	e00c      	b.n	8008c1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	4613      	mov	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4a12      	ldr	r2, [pc, #72]	@ (8008c58 <prvInitialiseTaskLists+0x60>)
 8008c10:	4413      	add	r3, r2
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fe fcae 	bl	8007574 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	607b      	str	r3, [r7, #4]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2b37      	cmp	r3, #55	@ 0x37
 8008c22:	d9ef      	bls.n	8008c04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c24:	480d      	ldr	r0, [pc, #52]	@ (8008c5c <prvInitialiseTaskLists+0x64>)
 8008c26:	f7fe fca5 	bl	8007574 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c2a:	480d      	ldr	r0, [pc, #52]	@ (8008c60 <prvInitialiseTaskLists+0x68>)
 8008c2c:	f7fe fca2 	bl	8007574 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c30:	480c      	ldr	r0, [pc, #48]	@ (8008c64 <prvInitialiseTaskLists+0x6c>)
 8008c32:	f7fe fc9f 	bl	8007574 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c36:	480c      	ldr	r0, [pc, #48]	@ (8008c68 <prvInitialiseTaskLists+0x70>)
 8008c38:	f7fe fc9c 	bl	8007574 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c3c:	480b      	ldr	r0, [pc, #44]	@ (8008c6c <prvInitialiseTaskLists+0x74>)
 8008c3e:	f7fe fc99 	bl	8007574 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c42:	4b0b      	ldr	r3, [pc, #44]	@ (8008c70 <prvInitialiseTaskLists+0x78>)
 8008c44:	4a05      	ldr	r2, [pc, #20]	@ (8008c5c <prvInitialiseTaskLists+0x64>)
 8008c46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c48:	4b0a      	ldr	r3, [pc, #40]	@ (8008c74 <prvInitialiseTaskLists+0x7c>)
 8008c4a:	4a05      	ldr	r2, [pc, #20]	@ (8008c60 <prvInitialiseTaskLists+0x68>)
 8008c4c:	601a      	str	r2, [r3, #0]
}
 8008c4e:	bf00      	nop
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	200010fc 	.word	0x200010fc
 8008c5c:	2000155c 	.word	0x2000155c
 8008c60:	20001570 	.word	0x20001570
 8008c64:	2000158c 	.word	0x2000158c
 8008c68:	200015a0 	.word	0x200015a0
 8008c6c:	200015b8 	.word	0x200015b8
 8008c70:	20001584 	.word	0x20001584
 8008c74:	20001588 	.word	0x20001588

08008c78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c7e:	e019      	b.n	8008cb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c80:	f000 fdea 	bl	8009858 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c84:	4b10      	ldr	r3, [pc, #64]	@ (8008cc8 <prvCheckTasksWaitingTermination+0x50>)
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	3304      	adds	r3, #4
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fe fcf9 	bl	8007688 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c96:	4b0d      	ldr	r3, [pc, #52]	@ (8008ccc <prvCheckTasksWaitingTermination+0x54>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8008ccc <prvCheckTasksWaitingTermination+0x54>)
 8008c9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8008cd0 <prvCheckTasksWaitingTermination+0x58>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8008cd0 <prvCheckTasksWaitingTermination+0x58>)
 8008ca8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008caa:	f000 fe07 	bl	80098bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f810 	bl	8008cd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cb4:	4b06      	ldr	r3, [pc, #24]	@ (8008cd0 <prvCheckTasksWaitingTermination+0x58>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1e1      	bne.n	8008c80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008cbc:	bf00      	nop
 8008cbe:	bf00      	nop
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	200015a0 	.word	0x200015a0
 8008ccc:	200015cc 	.word	0x200015cc
 8008cd0:	200015b4 	.word	0x200015b4

08008cd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	3354      	adds	r3, #84	@ 0x54
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f001 ff47 	bl	800ab74 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d108      	bne.n	8008d02 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 ff9f 	bl	8009c38 <vPortFree>
				vPortFree( pxTCB );
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 ff9c 	bl	8009c38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d00:	e019      	b.n	8008d36 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d103      	bne.n	8008d14 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 ff93 	bl	8009c38 <vPortFree>
	}
 8008d12:	e010      	b.n	8008d36 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d00b      	beq.n	8008d36 <prvDeleteTCB+0x62>
	__asm volatile
 8008d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	60fb      	str	r3, [r7, #12]
}
 8008d30:	bf00      	nop
 8008d32:	bf00      	nop
 8008d34:	e7fd      	b.n	8008d32 <prvDeleteTCB+0x5e>
	}
 8008d36:	bf00      	nop
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d46:	4b0c      	ldr	r3, [pc, #48]	@ (8008d78 <prvResetNextTaskUnblockTime+0x38>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d104      	bne.n	8008d5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d50:	4b0a      	ldr	r3, [pc, #40]	@ (8008d7c <prvResetNextTaskUnblockTime+0x3c>)
 8008d52:	f04f 32ff 	mov.w	r2, #4294967295
 8008d56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d58:	e008      	b.n	8008d6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d5a:	4b07      	ldr	r3, [pc, #28]	@ (8008d78 <prvResetNextTaskUnblockTime+0x38>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	4a04      	ldr	r2, [pc, #16]	@ (8008d7c <prvResetNextTaskUnblockTime+0x3c>)
 8008d6a:	6013      	str	r3, [r2, #0]
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr
 8008d78:	20001584 	.word	0x20001584
 8008d7c:	200015ec 	.word	0x200015ec

08008d80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d86:	4b0b      	ldr	r3, [pc, #44]	@ (8008db4 <xTaskGetSchedulerState+0x34>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d102      	bne.n	8008d94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	607b      	str	r3, [r7, #4]
 8008d92:	e008      	b.n	8008da6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d94:	4b08      	ldr	r3, [pc, #32]	@ (8008db8 <xTaskGetSchedulerState+0x38>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d102      	bne.n	8008da2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	607b      	str	r3, [r7, #4]
 8008da0:	e001      	b.n	8008da6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008da2:	2300      	movs	r3, #0
 8008da4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008da6:	687b      	ldr	r3, [r7, #4]
	}
 8008da8:	4618      	mov	r0, r3
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	200015d8 	.word	0x200015d8
 8008db8:	200015f4 	.word	0x200015f4

08008dbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d058      	beq.n	8008e84 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8008e90 <xTaskPriorityDisinherit+0xd4>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	693a      	ldr	r2, [r7, #16]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d00b      	beq.n	8008df4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	60fb      	str	r3, [r7, #12]
}
 8008dee:	bf00      	nop
 8008df0:	bf00      	nop
 8008df2:	e7fd      	b.n	8008df0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d10b      	bne.n	8008e14 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e00:	f383 8811 	msr	BASEPRI, r3
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	60bb      	str	r3, [r7, #8]
}
 8008e0e:	bf00      	nop
 8008e10:	bf00      	nop
 8008e12:	e7fd      	b.n	8008e10 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e18:	1e5a      	subs	r2, r3, #1
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d02c      	beq.n	8008e84 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d128      	bne.n	8008e84 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	3304      	adds	r3, #4
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fe fc26 	bl	8007688 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e48:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e54:	4b0f      	ldr	r3, [pc, #60]	@ (8008e94 <xTaskPriorityDisinherit+0xd8>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d903      	bls.n	8008e64 <xTaskPriorityDisinherit+0xa8>
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e60:	4a0c      	ldr	r2, [pc, #48]	@ (8008e94 <xTaskPriorityDisinherit+0xd8>)
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e68:	4613      	mov	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4a09      	ldr	r2, [pc, #36]	@ (8008e98 <xTaskPriorityDisinherit+0xdc>)
 8008e72:	441a      	add	r2, r3
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	3304      	adds	r3, #4
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	f7fe fba7 	bl	80075ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e80:	2301      	movs	r3, #1
 8008e82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e84:	697b      	ldr	r3, [r7, #20]
	}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3718      	adds	r7, #24
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	200010f8 	.word	0x200010f8
 8008e94:	200015d4 	.word	0x200015d4
 8008e98:	200010fc 	.word	0x200010fc

08008e9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ea6:	4b21      	ldr	r3, [pc, #132]	@ (8008f2c <prvAddCurrentTaskToDelayedList+0x90>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008eac:	4b20      	ldr	r3, [pc, #128]	@ (8008f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	3304      	adds	r3, #4
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fe fbe8 	bl	8007688 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ebe:	d10a      	bne.n	8008ed6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d007      	beq.n	8008ed6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8008f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3304      	adds	r3, #4
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4819      	ldr	r0, [pc, #100]	@ (8008f34 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ed0:	f7fe fb7d 	bl	80075ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ed4:	e026      	b.n	8008f24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4413      	add	r3, r2
 8008edc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ede:	4b14      	ldr	r3, [pc, #80]	@ (8008f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d209      	bcs.n	8008f02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008eee:	4b12      	ldr	r3, [pc, #72]	@ (8008f38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8008f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	3304      	adds	r3, #4
 8008ef8:	4619      	mov	r1, r3
 8008efa:	4610      	mov	r0, r2
 8008efc:	f7fe fb8b 	bl	8007616 <vListInsert>
}
 8008f00:	e010      	b.n	8008f24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f02:	4b0e      	ldr	r3, [pc, #56]	@ (8008f3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	4b0a      	ldr	r3, [pc, #40]	@ (8008f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	3304      	adds	r3, #4
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	4610      	mov	r0, r2
 8008f10:	f7fe fb81 	bl	8007616 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f14:	4b0a      	ldr	r3, [pc, #40]	@ (8008f40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d202      	bcs.n	8008f24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f1e:	4a08      	ldr	r2, [pc, #32]	@ (8008f40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	6013      	str	r3, [r2, #0]
}
 8008f24:	bf00      	nop
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	200015d0 	.word	0x200015d0
 8008f30:	200010f8 	.word	0x200010f8
 8008f34:	200015b8 	.word	0x200015b8
 8008f38:	20001588 	.word	0x20001588
 8008f3c:	20001584 	.word	0x20001584
 8008f40:	200015ec 	.word	0x200015ec

08008f44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b08a      	sub	sp, #40	@ 0x28
 8008f48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f4e:	f000 fb13 	bl	8009578 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f52:	4b1d      	ldr	r3, [pc, #116]	@ (8008fc8 <xTimerCreateTimerTask+0x84>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d021      	beq.n	8008f9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f62:	1d3a      	adds	r2, r7, #4
 8008f64:	f107 0108 	add.w	r1, r7, #8
 8008f68:	f107 030c 	add.w	r3, r7, #12
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fe fae7 	bl	8007540 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f72:	6879      	ldr	r1, [r7, #4]
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	9202      	str	r2, [sp, #8]
 8008f7a:	9301      	str	r3, [sp, #4]
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	2300      	movs	r3, #0
 8008f82:	460a      	mov	r2, r1
 8008f84:	4911      	ldr	r1, [pc, #68]	@ (8008fcc <xTimerCreateTimerTask+0x88>)
 8008f86:	4812      	ldr	r0, [pc, #72]	@ (8008fd0 <xTimerCreateTimerTask+0x8c>)
 8008f88:	f7ff f8a2 	bl	80080d0 <xTaskCreateStatic>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	4a11      	ldr	r2, [pc, #68]	@ (8008fd4 <xTimerCreateTimerTask+0x90>)
 8008f90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f92:	4b10      	ldr	r3, [pc, #64]	@ (8008fd4 <xTimerCreateTimerTask+0x90>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10b      	bne.n	8008fbc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	613b      	str	r3, [r7, #16]
}
 8008fb6:	bf00      	nop
 8008fb8:	bf00      	nop
 8008fba:	e7fd      	b.n	8008fb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008fbc:	697b      	ldr	r3, [r7, #20]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3718      	adds	r7, #24
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	20001628 	.word	0x20001628
 8008fcc:	0800d218 	.word	0x0800d218
 8008fd0:	08009111 	.word	0x08009111
 8008fd4:	2000162c 	.word	0x2000162c

08008fd8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b08a      	sub	sp, #40	@ 0x28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
 8008fe4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10b      	bne.n	8009008 <xTimerGenericCommand+0x30>
	__asm volatile
 8008ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	623b      	str	r3, [r7, #32]
}
 8009002:	bf00      	nop
 8009004:	bf00      	nop
 8009006:	e7fd      	b.n	8009004 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009008:	4b19      	ldr	r3, [pc, #100]	@ (8009070 <xTimerGenericCommand+0x98>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d02a      	beq.n	8009066 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2b05      	cmp	r3, #5
 8009020:	dc18      	bgt.n	8009054 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009022:	f7ff fead 	bl	8008d80 <xTaskGetSchedulerState>
 8009026:	4603      	mov	r3, r0
 8009028:	2b02      	cmp	r3, #2
 800902a:	d109      	bne.n	8009040 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800902c:	4b10      	ldr	r3, [pc, #64]	@ (8009070 <xTimerGenericCommand+0x98>)
 800902e:	6818      	ldr	r0, [r3, #0]
 8009030:	f107 0110 	add.w	r1, r7, #16
 8009034:	2300      	movs	r3, #0
 8009036:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009038:	f7fe fc5a 	bl	80078f0 <xQueueGenericSend>
 800903c:	6278      	str	r0, [r7, #36]	@ 0x24
 800903e:	e012      	b.n	8009066 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009040:	4b0b      	ldr	r3, [pc, #44]	@ (8009070 <xTimerGenericCommand+0x98>)
 8009042:	6818      	ldr	r0, [r3, #0]
 8009044:	f107 0110 	add.w	r1, r7, #16
 8009048:	2300      	movs	r3, #0
 800904a:	2200      	movs	r2, #0
 800904c:	f7fe fc50 	bl	80078f0 <xQueueGenericSend>
 8009050:	6278      	str	r0, [r7, #36]	@ 0x24
 8009052:	e008      	b.n	8009066 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009054:	4b06      	ldr	r3, [pc, #24]	@ (8009070 <xTimerGenericCommand+0x98>)
 8009056:	6818      	ldr	r0, [r3, #0]
 8009058:	f107 0110 	add.w	r1, r7, #16
 800905c:	2300      	movs	r3, #0
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	f7fe fd48 	bl	8007af4 <xQueueGenericSendFromISR>
 8009064:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009068:	4618      	mov	r0, r3
 800906a:	3728      	adds	r7, #40	@ 0x28
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	20001628 	.word	0x20001628

08009074 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b088      	sub	sp, #32
 8009078:	af02      	add	r7, sp, #8
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800907e:	4b23      	ldr	r3, [pc, #140]	@ (800910c <prvProcessExpiredTimer+0x98>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	3304      	adds	r3, #4
 800908c:	4618      	mov	r0, r3
 800908e:	f7fe fafb 	bl	8007688 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009098:	f003 0304 	and.w	r3, r3, #4
 800909c:	2b00      	cmp	r3, #0
 800909e:	d023      	beq.n	80090e8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	699a      	ldr	r2, [r3, #24]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	18d1      	adds	r1, r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	6978      	ldr	r0, [r7, #20]
 80090ae:	f000 f8d5 	bl	800925c <prvInsertTimerInActiveList>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d020      	beq.n	80090fa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090b8:	2300      	movs	r3, #0
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	2300      	movs	r3, #0
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	2100      	movs	r1, #0
 80090c2:	6978      	ldr	r0, [r7, #20]
 80090c4:	f7ff ff88 	bl	8008fd8 <xTimerGenericCommand>
 80090c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d114      	bne.n	80090fa <prvProcessExpiredTimer+0x86>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	60fb      	str	r3, [r7, #12]
}
 80090e2:	bf00      	nop
 80090e4:	bf00      	nop
 80090e6:	e7fd      	b.n	80090e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090ee:	f023 0301 	bic.w	r3, r3, #1
 80090f2:	b2da      	uxtb	r2, r3
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	6a1b      	ldr	r3, [r3, #32]
 80090fe:	6978      	ldr	r0, [r7, #20]
 8009100:	4798      	blx	r3
}
 8009102:	bf00      	nop
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	20001620 	.word	0x20001620

08009110 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009118:	f107 0308 	add.w	r3, r7, #8
 800911c:	4618      	mov	r0, r3
 800911e:	f000 f859 	bl	80091d4 <prvGetNextExpireTime>
 8009122:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	4619      	mov	r1, r3
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f000 f805 	bl	8009138 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800912e:	f000 f8d7 	bl	80092e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009132:	bf00      	nop
 8009134:	e7f0      	b.n	8009118 <prvTimerTask+0x8>
	...

08009138 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009142:	f7ff fa29 	bl	8008598 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009146:	f107 0308 	add.w	r3, r7, #8
 800914a:	4618      	mov	r0, r3
 800914c:	f000 f866 	bl	800921c <prvSampleTimeNow>
 8009150:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d130      	bne.n	80091ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d10a      	bne.n	8009174 <prvProcessTimerOrBlockTask+0x3c>
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	429a      	cmp	r2, r3
 8009164:	d806      	bhi.n	8009174 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009166:	f7ff fa25 	bl	80085b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800916a:	68f9      	ldr	r1, [r7, #12]
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7ff ff81 	bl	8009074 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009172:	e024      	b.n	80091be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d008      	beq.n	800918c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800917a:	4b13      	ldr	r3, [pc, #76]	@ (80091c8 <prvProcessTimerOrBlockTask+0x90>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d101      	bne.n	8009188 <prvProcessTimerOrBlockTask+0x50>
 8009184:	2301      	movs	r3, #1
 8009186:	e000      	b.n	800918a <prvProcessTimerOrBlockTask+0x52>
 8009188:	2300      	movs	r3, #0
 800918a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800918c:	4b0f      	ldr	r3, [pc, #60]	@ (80091cc <prvProcessTimerOrBlockTask+0x94>)
 800918e:	6818      	ldr	r0, [r3, #0]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	4619      	mov	r1, r3
 800919a:	f7fe ff65 	bl	8008068 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800919e:	f7ff fa09 	bl	80085b4 <xTaskResumeAll>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10a      	bne.n	80091be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80091a8:	4b09      	ldr	r3, [pc, #36]	@ (80091d0 <prvProcessTimerOrBlockTask+0x98>)
 80091aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091ae:	601a      	str	r2, [r3, #0]
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	f3bf 8f6f 	isb	sy
}
 80091b8:	e001      	b.n	80091be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80091ba:	f7ff f9fb 	bl	80085b4 <xTaskResumeAll>
}
 80091be:	bf00      	nop
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	20001624 	.word	0x20001624
 80091cc:	20001628 	.word	0x20001628
 80091d0:	e000ed04 	.word	0xe000ed04

080091d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091dc:	4b0e      	ldr	r3, [pc, #56]	@ (8009218 <prvGetNextExpireTime+0x44>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d101      	bne.n	80091ea <prvGetNextExpireTime+0x16>
 80091e6:	2201      	movs	r2, #1
 80091e8:	e000      	b.n	80091ec <prvGetNextExpireTime+0x18>
 80091ea:	2200      	movs	r2, #0
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d105      	bne.n	8009204 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091f8:	4b07      	ldr	r3, [pc, #28]	@ (8009218 <prvGetNextExpireTime+0x44>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	60fb      	str	r3, [r7, #12]
 8009202:	e001      	b.n	8009208 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009204:	2300      	movs	r3, #0
 8009206:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009208:	68fb      	ldr	r3, [r7, #12]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3714      	adds	r7, #20
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	20001620 	.word	0x20001620

0800921c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009224:	f7ff fa64 	bl	80086f0 <xTaskGetTickCount>
 8009228:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800922a:	4b0b      	ldr	r3, [pc, #44]	@ (8009258 <prvSampleTimeNow+0x3c>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	429a      	cmp	r2, r3
 8009232:	d205      	bcs.n	8009240 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009234:	f000 f93a 	bl	80094ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	e002      	b.n	8009246 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009246:	4a04      	ldr	r2, [pc, #16]	@ (8009258 <prvSampleTimeNow+0x3c>)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800924c:	68fb      	ldr	r3, [r7, #12]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	20001630 	.word	0x20001630

0800925c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800926a:	2300      	movs	r3, #0
 800926c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	68ba      	ldr	r2, [r7, #8]
 8009272:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	429a      	cmp	r2, r3
 8009280:	d812      	bhi.n	80092a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	1ad2      	subs	r2, r2, r3
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	429a      	cmp	r2, r3
 800928e:	d302      	bcc.n	8009296 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009290:	2301      	movs	r3, #1
 8009292:	617b      	str	r3, [r7, #20]
 8009294:	e01b      	b.n	80092ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009296:	4b10      	ldr	r3, [pc, #64]	@ (80092d8 <prvInsertTimerInActiveList+0x7c>)
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	3304      	adds	r3, #4
 800929e:	4619      	mov	r1, r3
 80092a0:	4610      	mov	r0, r2
 80092a2:	f7fe f9b8 	bl	8007616 <vListInsert>
 80092a6:	e012      	b.n	80092ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d206      	bcs.n	80092be <prvInsertTimerInActiveList+0x62>
 80092b0:	68ba      	ldr	r2, [r7, #8]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d302      	bcc.n	80092be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80092b8:	2301      	movs	r3, #1
 80092ba:	617b      	str	r3, [r7, #20]
 80092bc:	e007      	b.n	80092ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092be:	4b07      	ldr	r3, [pc, #28]	@ (80092dc <prvInsertTimerInActiveList+0x80>)
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	3304      	adds	r3, #4
 80092c6:	4619      	mov	r1, r3
 80092c8:	4610      	mov	r0, r2
 80092ca:	f7fe f9a4 	bl	8007616 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80092ce:	697b      	ldr	r3, [r7, #20]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3718      	adds	r7, #24
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	20001624 	.word	0x20001624
 80092dc:	20001620 	.word	0x20001620

080092e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b08e      	sub	sp, #56	@ 0x38
 80092e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092e6:	e0ce      	b.n	8009486 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	da19      	bge.n	8009322 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80092ee:	1d3b      	adds	r3, r7, #4
 80092f0:	3304      	adds	r3, #4
 80092f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80092f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10b      	bne.n	8009312 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80092fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092fe:	f383 8811 	msr	BASEPRI, r3
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	61fb      	str	r3, [r7, #28]
}
 800930c:	bf00      	nop
 800930e:	bf00      	nop
 8009310:	e7fd      	b.n	800930e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009318:	6850      	ldr	r0, [r2, #4]
 800931a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800931c:	6892      	ldr	r2, [r2, #8]
 800931e:	4611      	mov	r1, r2
 8009320:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	f2c0 80ae 	blt.w	8009486 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800932e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d004      	beq.n	8009340 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009338:	3304      	adds	r3, #4
 800933a:	4618      	mov	r0, r3
 800933c:	f7fe f9a4 	bl	8007688 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009340:	463b      	mov	r3, r7
 8009342:	4618      	mov	r0, r3
 8009344:	f7ff ff6a 	bl	800921c <prvSampleTimeNow>
 8009348:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2b09      	cmp	r3, #9
 800934e:	f200 8097 	bhi.w	8009480 <prvProcessReceivedCommands+0x1a0>
 8009352:	a201      	add	r2, pc, #4	@ (adr r2, 8009358 <prvProcessReceivedCommands+0x78>)
 8009354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009358:	08009381 	.word	0x08009381
 800935c:	08009381 	.word	0x08009381
 8009360:	08009381 	.word	0x08009381
 8009364:	080093f7 	.word	0x080093f7
 8009368:	0800940b 	.word	0x0800940b
 800936c:	08009457 	.word	0x08009457
 8009370:	08009381 	.word	0x08009381
 8009374:	08009381 	.word	0x08009381
 8009378:	080093f7 	.word	0x080093f7
 800937c:	0800940b 	.word	0x0800940b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009382:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009386:	f043 0301 	orr.w	r3, r3, #1
 800938a:	b2da      	uxtb	r2, r3
 800938c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800938e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	18d1      	adds	r1, r2, r3
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800939e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093a0:	f7ff ff5c 	bl	800925c <prvInsertTimerInActiveList>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d06c      	beq.n	8009484 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093b8:	f003 0304 	and.w	r3, r3, #4
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d061      	beq.n	8009484 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	441a      	add	r2, r3
 80093c8:	2300      	movs	r3, #0
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	2300      	movs	r3, #0
 80093ce:	2100      	movs	r1, #0
 80093d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093d2:	f7ff fe01 	bl	8008fd8 <xTimerGenericCommand>
 80093d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80093d8:	6a3b      	ldr	r3, [r7, #32]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d152      	bne.n	8009484 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80093de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	61bb      	str	r3, [r7, #24]
}
 80093f0:	bf00      	nop
 80093f2:	bf00      	nop
 80093f4:	e7fd      	b.n	80093f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093fc:	f023 0301 	bic.w	r3, r3, #1
 8009400:	b2da      	uxtb	r2, r3
 8009402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009404:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009408:	e03d      	b.n	8009486 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800940a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800940c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009410:	f043 0301 	orr.w	r3, r3, #1
 8009414:	b2da      	uxtb	r2, r3
 8009416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009418:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009420:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10b      	bne.n	8009442 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800942a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	617b      	str	r3, [r7, #20]
}
 800943c:	bf00      	nop
 800943e:	bf00      	nop
 8009440:	e7fd      	b.n	800943e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009444:	699a      	ldr	r2, [r3, #24]
 8009446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009448:	18d1      	adds	r1, r2, r3
 800944a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800944c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800944e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009450:	f7ff ff04 	bl	800925c <prvInsertTimerInActiveList>
					break;
 8009454:	e017      	b.n	8009486 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009458:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800945c:	f003 0302 	and.w	r3, r3, #2
 8009460:	2b00      	cmp	r3, #0
 8009462:	d103      	bne.n	800946c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009464:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009466:	f000 fbe7 	bl	8009c38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800946a:	e00c      	b.n	8009486 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800946c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009472:	f023 0301 	bic.w	r3, r3, #1
 8009476:	b2da      	uxtb	r2, r3
 8009478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800947a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800947e:	e002      	b.n	8009486 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009480:	bf00      	nop
 8009482:	e000      	b.n	8009486 <prvProcessReceivedCommands+0x1a6>
					break;
 8009484:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009486:	4b08      	ldr	r3, [pc, #32]	@ (80094a8 <prvProcessReceivedCommands+0x1c8>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	1d39      	adds	r1, r7, #4
 800948c:	2200      	movs	r2, #0
 800948e:	4618      	mov	r0, r3
 8009490:	f7fe fbce 	bl	8007c30 <xQueueReceive>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	f47f af26 	bne.w	80092e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800949c:	bf00      	nop
 800949e:	bf00      	nop
 80094a0:	3730      	adds	r7, #48	@ 0x30
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	20001628 	.word	0x20001628

080094ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094b2:	e049      	b.n	8009548 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094b4:	4b2e      	ldr	r3, [pc, #184]	@ (8009570 <prvSwitchTimerLists+0xc4>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094be:	4b2c      	ldr	r3, [pc, #176]	@ (8009570 <prvSwitchTimerLists+0xc4>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	3304      	adds	r3, #4
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7fe f8db 	bl	8007688 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6a1b      	ldr	r3, [r3, #32]
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094e0:	f003 0304 	and.w	r3, r3, #4
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d02f      	beq.n	8009548 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	693a      	ldr	r2, [r7, #16]
 80094ee:	4413      	add	r3, r2
 80094f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d90e      	bls.n	8009518 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009506:	4b1a      	ldr	r3, [pc, #104]	@ (8009570 <prvSwitchTimerLists+0xc4>)
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	3304      	adds	r3, #4
 800950e:	4619      	mov	r1, r3
 8009510:	4610      	mov	r0, r2
 8009512:	f7fe f880 	bl	8007616 <vListInsert>
 8009516:	e017      	b.n	8009548 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009518:	2300      	movs	r3, #0
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	2300      	movs	r3, #0
 800951e:	693a      	ldr	r2, [r7, #16]
 8009520:	2100      	movs	r1, #0
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f7ff fd58 	bl	8008fd8 <xTimerGenericCommand>
 8009528:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10b      	bne.n	8009548 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	603b      	str	r3, [r7, #0]
}
 8009542:	bf00      	nop
 8009544:	bf00      	nop
 8009546:	e7fd      	b.n	8009544 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009548:	4b09      	ldr	r3, [pc, #36]	@ (8009570 <prvSwitchTimerLists+0xc4>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1b0      	bne.n	80094b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009552:	4b07      	ldr	r3, [pc, #28]	@ (8009570 <prvSwitchTimerLists+0xc4>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009558:	4b06      	ldr	r3, [pc, #24]	@ (8009574 <prvSwitchTimerLists+0xc8>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a04      	ldr	r2, [pc, #16]	@ (8009570 <prvSwitchTimerLists+0xc4>)
 800955e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009560:	4a04      	ldr	r2, [pc, #16]	@ (8009574 <prvSwitchTimerLists+0xc8>)
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	6013      	str	r3, [r2, #0]
}
 8009566:	bf00      	nop
 8009568:	3718      	adds	r7, #24
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	20001620 	.word	0x20001620
 8009574:	20001624 	.word	0x20001624

08009578 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800957e:	f000 f96b 	bl	8009858 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009582:	4b15      	ldr	r3, [pc, #84]	@ (80095d8 <prvCheckForValidListAndQueue+0x60>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d120      	bne.n	80095cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800958a:	4814      	ldr	r0, [pc, #80]	@ (80095dc <prvCheckForValidListAndQueue+0x64>)
 800958c:	f7fd fff2 	bl	8007574 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009590:	4813      	ldr	r0, [pc, #76]	@ (80095e0 <prvCheckForValidListAndQueue+0x68>)
 8009592:	f7fd ffef 	bl	8007574 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009596:	4b13      	ldr	r3, [pc, #76]	@ (80095e4 <prvCheckForValidListAndQueue+0x6c>)
 8009598:	4a10      	ldr	r2, [pc, #64]	@ (80095dc <prvCheckForValidListAndQueue+0x64>)
 800959a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800959c:	4b12      	ldr	r3, [pc, #72]	@ (80095e8 <prvCheckForValidListAndQueue+0x70>)
 800959e:	4a10      	ldr	r2, [pc, #64]	@ (80095e0 <prvCheckForValidListAndQueue+0x68>)
 80095a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80095a2:	2300      	movs	r3, #0
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	4b11      	ldr	r3, [pc, #68]	@ (80095ec <prvCheckForValidListAndQueue+0x74>)
 80095a8:	4a11      	ldr	r2, [pc, #68]	@ (80095f0 <prvCheckForValidListAndQueue+0x78>)
 80095aa:	2110      	movs	r1, #16
 80095ac:	200a      	movs	r0, #10
 80095ae:	f7fe f8ff 	bl	80077b0 <xQueueGenericCreateStatic>
 80095b2:	4603      	mov	r3, r0
 80095b4:	4a08      	ldr	r2, [pc, #32]	@ (80095d8 <prvCheckForValidListAndQueue+0x60>)
 80095b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80095b8:	4b07      	ldr	r3, [pc, #28]	@ (80095d8 <prvCheckForValidListAndQueue+0x60>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d005      	beq.n	80095cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80095c0:	4b05      	ldr	r3, [pc, #20]	@ (80095d8 <prvCheckForValidListAndQueue+0x60>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	490b      	ldr	r1, [pc, #44]	@ (80095f4 <prvCheckForValidListAndQueue+0x7c>)
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fe fd24 	bl	8008014 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095cc:	f000 f976 	bl	80098bc <vPortExitCritical>
}
 80095d0:	bf00      	nop
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	20001628 	.word	0x20001628
 80095dc:	200015f8 	.word	0x200015f8
 80095e0:	2000160c 	.word	0x2000160c
 80095e4:	20001620 	.word	0x20001620
 80095e8:	20001624 	.word	0x20001624
 80095ec:	200016d4 	.word	0x200016d4
 80095f0:	20001634 	.word	0x20001634
 80095f4:	0800d220 	.word	0x0800d220

080095f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	3b04      	subs	r3, #4
 8009608:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	3b04      	subs	r3, #4
 8009616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	f023 0201 	bic.w	r2, r3, #1
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	3b04      	subs	r3, #4
 8009626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009628:	4a0c      	ldr	r2, [pc, #48]	@ (800965c <pxPortInitialiseStack+0x64>)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	3b14      	subs	r3, #20
 8009632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	3b04      	subs	r3, #4
 800963e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f06f 0202 	mvn.w	r2, #2
 8009646:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	3b20      	subs	r3, #32
 800964c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800964e:	68fb      	ldr	r3, [r7, #12]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	08009661 	.word	0x08009661

08009660 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009666:	2300      	movs	r3, #0
 8009668:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800966a:	4b13      	ldr	r3, [pc, #76]	@ (80096b8 <prvTaskExitError+0x58>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009672:	d00b      	beq.n	800968c <prvTaskExitError+0x2c>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	60fb      	str	r3, [r7, #12]
}
 8009686:	bf00      	nop
 8009688:	bf00      	nop
 800968a:	e7fd      	b.n	8009688 <prvTaskExitError+0x28>
	__asm volatile
 800968c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	60bb      	str	r3, [r7, #8]
}
 800969e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80096a0:	bf00      	nop
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d0fc      	beq.n	80096a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80096a8:	bf00      	nop
 80096aa:	bf00      	nop
 80096ac:	3714      	adds	r7, #20
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	2000000c 	.word	0x2000000c
 80096bc:	00000000 	.word	0x00000000

080096c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80096c0:	4b07      	ldr	r3, [pc, #28]	@ (80096e0 <pxCurrentTCBConst2>)
 80096c2:	6819      	ldr	r1, [r3, #0]
 80096c4:	6808      	ldr	r0, [r1, #0]
 80096c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ca:	f380 8809 	msr	PSP, r0
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f04f 0000 	mov.w	r0, #0
 80096d6:	f380 8811 	msr	BASEPRI, r0
 80096da:	4770      	bx	lr
 80096dc:	f3af 8000 	nop.w

080096e0 <pxCurrentTCBConst2>:
 80096e0:	200010f8 	.word	0x200010f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop

080096e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80096e8:	4808      	ldr	r0, [pc, #32]	@ (800970c <prvPortStartFirstTask+0x24>)
 80096ea:	6800      	ldr	r0, [r0, #0]
 80096ec:	6800      	ldr	r0, [r0, #0]
 80096ee:	f380 8808 	msr	MSP, r0
 80096f2:	f04f 0000 	mov.w	r0, #0
 80096f6:	f380 8814 	msr	CONTROL, r0
 80096fa:	b662      	cpsie	i
 80096fc:	b661      	cpsie	f
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	df00      	svc	0
 8009708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800970a:	bf00      	nop
 800970c:	e000ed08 	.word	0xe000ed08

08009710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009716:	4b47      	ldr	r3, [pc, #284]	@ (8009834 <xPortStartScheduler+0x124>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a47      	ldr	r2, [pc, #284]	@ (8009838 <xPortStartScheduler+0x128>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d10b      	bne.n	8009738 <xPortStartScheduler+0x28>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	613b      	str	r3, [r7, #16]
}
 8009732:	bf00      	nop
 8009734:	bf00      	nop
 8009736:	e7fd      	b.n	8009734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009738:	4b3e      	ldr	r3, [pc, #248]	@ (8009834 <xPortStartScheduler+0x124>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a3f      	ldr	r2, [pc, #252]	@ (800983c <xPortStartScheduler+0x12c>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d10b      	bne.n	800975a <xPortStartScheduler+0x4a>
	__asm volatile
 8009742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009746:	f383 8811 	msr	BASEPRI, r3
 800974a:	f3bf 8f6f 	isb	sy
 800974e:	f3bf 8f4f 	dsb	sy
 8009752:	60fb      	str	r3, [r7, #12]
}
 8009754:	bf00      	nop
 8009756:	bf00      	nop
 8009758:	e7fd      	b.n	8009756 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800975a:	4b39      	ldr	r3, [pc, #228]	@ (8009840 <xPortStartScheduler+0x130>)
 800975c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	b2db      	uxtb	r3, r3
 8009764:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	22ff      	movs	r2, #255	@ 0xff
 800976a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	b2db      	uxtb	r3, r3
 8009772:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009774:	78fb      	ldrb	r3, [r7, #3]
 8009776:	b2db      	uxtb	r3, r3
 8009778:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800977c:	b2da      	uxtb	r2, r3
 800977e:	4b31      	ldr	r3, [pc, #196]	@ (8009844 <xPortStartScheduler+0x134>)
 8009780:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009782:	4b31      	ldr	r3, [pc, #196]	@ (8009848 <xPortStartScheduler+0x138>)
 8009784:	2207      	movs	r2, #7
 8009786:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009788:	e009      	b.n	800979e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800978a:	4b2f      	ldr	r3, [pc, #188]	@ (8009848 <xPortStartScheduler+0x138>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3b01      	subs	r3, #1
 8009790:	4a2d      	ldr	r2, [pc, #180]	@ (8009848 <xPortStartScheduler+0x138>)
 8009792:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009794:	78fb      	ldrb	r3, [r7, #3]
 8009796:	b2db      	uxtb	r3, r3
 8009798:	005b      	lsls	r3, r3, #1
 800979a:	b2db      	uxtb	r3, r3
 800979c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800979e:	78fb      	ldrb	r3, [r7, #3]
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097a6:	2b80      	cmp	r3, #128	@ 0x80
 80097a8:	d0ef      	beq.n	800978a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097aa:	4b27      	ldr	r3, [pc, #156]	@ (8009848 <xPortStartScheduler+0x138>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f1c3 0307 	rsb	r3, r3, #7
 80097b2:	2b04      	cmp	r3, #4
 80097b4:	d00b      	beq.n	80097ce <xPortStartScheduler+0xbe>
	__asm volatile
 80097b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ba:	f383 8811 	msr	BASEPRI, r3
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f3bf 8f4f 	dsb	sy
 80097c6:	60bb      	str	r3, [r7, #8]
}
 80097c8:	bf00      	nop
 80097ca:	bf00      	nop
 80097cc:	e7fd      	b.n	80097ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097ce:	4b1e      	ldr	r3, [pc, #120]	@ (8009848 <xPortStartScheduler+0x138>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	021b      	lsls	r3, r3, #8
 80097d4:	4a1c      	ldr	r2, [pc, #112]	@ (8009848 <xPortStartScheduler+0x138>)
 80097d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097d8:	4b1b      	ldr	r3, [pc, #108]	@ (8009848 <xPortStartScheduler+0x138>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80097e0:	4a19      	ldr	r2, [pc, #100]	@ (8009848 <xPortStartScheduler+0x138>)
 80097e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097ec:	4b17      	ldr	r3, [pc, #92]	@ (800984c <xPortStartScheduler+0x13c>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a16      	ldr	r2, [pc, #88]	@ (800984c <xPortStartScheduler+0x13c>)
 80097f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80097f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097f8:	4b14      	ldr	r3, [pc, #80]	@ (800984c <xPortStartScheduler+0x13c>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a13      	ldr	r2, [pc, #76]	@ (800984c <xPortStartScheduler+0x13c>)
 80097fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009802:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009804:	f000 f8da 	bl	80099bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009808:	4b11      	ldr	r3, [pc, #68]	@ (8009850 <xPortStartScheduler+0x140>)
 800980a:	2200      	movs	r2, #0
 800980c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800980e:	f000 f8f9 	bl	8009a04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009812:	4b10      	ldr	r3, [pc, #64]	@ (8009854 <xPortStartScheduler+0x144>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a0f      	ldr	r2, [pc, #60]	@ (8009854 <xPortStartScheduler+0x144>)
 8009818:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800981c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800981e:	f7ff ff63 	bl	80096e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009822:	f7ff f82f 	bl	8008884 <vTaskSwitchContext>
	prvTaskExitError();
 8009826:	f7ff ff1b 	bl	8009660 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3718      	adds	r7, #24
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	e000ed00 	.word	0xe000ed00
 8009838:	410fc271 	.word	0x410fc271
 800983c:	410fc270 	.word	0x410fc270
 8009840:	e000e400 	.word	0xe000e400
 8009844:	20001724 	.word	0x20001724
 8009848:	20001728 	.word	0x20001728
 800984c:	e000ed20 	.word	0xe000ed20
 8009850:	2000000c 	.word	0x2000000c
 8009854:	e000ef34 	.word	0xe000ef34

08009858 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
	__asm volatile
 800985e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009862:	f383 8811 	msr	BASEPRI, r3
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	607b      	str	r3, [r7, #4]
}
 8009870:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009872:	4b10      	ldr	r3, [pc, #64]	@ (80098b4 <vPortEnterCritical+0x5c>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3301      	adds	r3, #1
 8009878:	4a0e      	ldr	r2, [pc, #56]	@ (80098b4 <vPortEnterCritical+0x5c>)
 800987a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800987c:	4b0d      	ldr	r3, [pc, #52]	@ (80098b4 <vPortEnterCritical+0x5c>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b01      	cmp	r3, #1
 8009882:	d110      	bne.n	80098a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009884:	4b0c      	ldr	r3, [pc, #48]	@ (80098b8 <vPortEnterCritical+0x60>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00b      	beq.n	80098a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800988e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	603b      	str	r3, [r7, #0]
}
 80098a0:	bf00      	nop
 80098a2:	bf00      	nop
 80098a4:	e7fd      	b.n	80098a2 <vPortEnterCritical+0x4a>
	}
}
 80098a6:	bf00      	nop
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	2000000c 	.word	0x2000000c
 80098b8:	e000ed04 	.word	0xe000ed04

080098bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098c2:	4b12      	ldr	r3, [pc, #72]	@ (800990c <vPortExitCritical+0x50>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10b      	bne.n	80098e2 <vPortExitCritical+0x26>
	__asm volatile
 80098ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ce:	f383 8811 	msr	BASEPRI, r3
 80098d2:	f3bf 8f6f 	isb	sy
 80098d6:	f3bf 8f4f 	dsb	sy
 80098da:	607b      	str	r3, [r7, #4]
}
 80098dc:	bf00      	nop
 80098de:	bf00      	nop
 80098e0:	e7fd      	b.n	80098de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80098e2:	4b0a      	ldr	r3, [pc, #40]	@ (800990c <vPortExitCritical+0x50>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	3b01      	subs	r3, #1
 80098e8:	4a08      	ldr	r2, [pc, #32]	@ (800990c <vPortExitCritical+0x50>)
 80098ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098ec:	4b07      	ldr	r3, [pc, #28]	@ (800990c <vPortExitCritical+0x50>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d105      	bne.n	8009900 <vPortExitCritical+0x44>
 80098f4:	2300      	movs	r3, #0
 80098f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	f383 8811 	msr	BASEPRI, r3
}
 80098fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr
 800990c:	2000000c 	.word	0x2000000c

08009910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009910:	f3ef 8009 	mrs	r0, PSP
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	4b15      	ldr	r3, [pc, #84]	@ (8009970 <pxCurrentTCBConst>)
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	f01e 0f10 	tst.w	lr, #16
 8009920:	bf08      	it	eq
 8009922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992a:	6010      	str	r0, [r2, #0]
 800992c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009930:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009934:	f380 8811 	msr	BASEPRI, r0
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	f3bf 8f6f 	isb	sy
 8009940:	f7fe ffa0 	bl	8008884 <vTaskSwitchContext>
 8009944:	f04f 0000 	mov.w	r0, #0
 8009948:	f380 8811 	msr	BASEPRI, r0
 800994c:	bc09      	pop	{r0, r3}
 800994e:	6819      	ldr	r1, [r3, #0]
 8009950:	6808      	ldr	r0, [r1, #0]
 8009952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009956:	f01e 0f10 	tst.w	lr, #16
 800995a:	bf08      	it	eq
 800995c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009960:	f380 8809 	msr	PSP, r0
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	f3af 8000 	nop.w

08009970 <pxCurrentTCBConst>:
 8009970:	200010f8 	.word	0x200010f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009974:	bf00      	nop
 8009976:	bf00      	nop

08009978 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
	__asm volatile
 800997e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	607b      	str	r3, [r7, #4]
}
 8009990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009992:	f7fe febd 	bl	8008710 <xTaskIncrementTick>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d003      	beq.n	80099a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800999c:	4b06      	ldr	r3, [pc, #24]	@ (80099b8 <xPortSysTickHandler+0x40>)
 800999e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	2300      	movs	r3, #0
 80099a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	f383 8811 	msr	BASEPRI, r3
}
 80099ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099b0:	bf00      	nop
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	e000ed04 	.word	0xe000ed04

080099bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80099bc:	b480      	push	{r7}
 80099be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099c0:	4b0b      	ldr	r3, [pc, #44]	@ (80099f0 <vPortSetupTimerInterrupt+0x34>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099c6:	4b0b      	ldr	r3, [pc, #44]	@ (80099f4 <vPortSetupTimerInterrupt+0x38>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099cc:	4b0a      	ldr	r3, [pc, #40]	@ (80099f8 <vPortSetupTimerInterrupt+0x3c>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a0a      	ldr	r2, [pc, #40]	@ (80099fc <vPortSetupTimerInterrupt+0x40>)
 80099d2:	fba2 2303 	umull	r2, r3, r2, r3
 80099d6:	099b      	lsrs	r3, r3, #6
 80099d8:	4a09      	ldr	r2, [pc, #36]	@ (8009a00 <vPortSetupTimerInterrupt+0x44>)
 80099da:	3b01      	subs	r3, #1
 80099dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099de:	4b04      	ldr	r3, [pc, #16]	@ (80099f0 <vPortSetupTimerInterrupt+0x34>)
 80099e0:	2207      	movs	r2, #7
 80099e2:	601a      	str	r2, [r3, #0]
}
 80099e4:	bf00      	nop
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	e000e010 	.word	0xe000e010
 80099f4:	e000e018 	.word	0xe000e018
 80099f8:	20000000 	.word	0x20000000
 80099fc:	10624dd3 	.word	0x10624dd3
 8009a00:	e000e014 	.word	0xe000e014

08009a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009a14 <vPortEnableVFP+0x10>
 8009a08:	6801      	ldr	r1, [r0, #0]
 8009a0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009a0e:	6001      	str	r1, [r0, #0]
 8009a10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a12:	bf00      	nop
 8009a14:	e000ed88 	.word	0xe000ed88

08009a18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a1e:	f3ef 8305 	mrs	r3, IPSR
 8009a22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b0f      	cmp	r3, #15
 8009a28:	d915      	bls.n	8009a56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a2a:	4a18      	ldr	r2, [pc, #96]	@ (8009a8c <vPortValidateInterruptPriority+0x74>)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	4413      	add	r3, r2
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a34:	4b16      	ldr	r3, [pc, #88]	@ (8009a90 <vPortValidateInterruptPriority+0x78>)
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	7afa      	ldrb	r2, [r7, #11]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d20b      	bcs.n	8009a56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	607b      	str	r3, [r7, #4]
}
 8009a50:	bf00      	nop
 8009a52:	bf00      	nop
 8009a54:	e7fd      	b.n	8009a52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a56:	4b0f      	ldr	r3, [pc, #60]	@ (8009a94 <vPortValidateInterruptPriority+0x7c>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8009a98 <vPortValidateInterruptPriority+0x80>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d90b      	bls.n	8009a7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a6a:	f383 8811 	msr	BASEPRI, r3
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f3bf 8f4f 	dsb	sy
 8009a76:	603b      	str	r3, [r7, #0]
}
 8009a78:	bf00      	nop
 8009a7a:	bf00      	nop
 8009a7c:	e7fd      	b.n	8009a7a <vPortValidateInterruptPriority+0x62>
	}
 8009a7e:	bf00      	nop
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	e000e3f0 	.word	0xe000e3f0
 8009a90:	20001724 	.word	0x20001724
 8009a94:	e000ed0c 	.word	0xe000ed0c
 8009a98:	20001728 	.word	0x20001728

08009a9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b08a      	sub	sp, #40	@ 0x28
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009aa8:	f7fe fd76 	bl	8008598 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009aac:	4b5c      	ldr	r3, [pc, #368]	@ (8009c20 <pvPortMalloc+0x184>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d101      	bne.n	8009ab8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ab4:	f000 f924 	bl	8009d00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ab8:	4b5a      	ldr	r3, [pc, #360]	@ (8009c24 <pvPortMalloc+0x188>)
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4013      	ands	r3, r2
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f040 8095 	bne.w	8009bf0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d01e      	beq.n	8009b0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009acc:	2208      	movs	r2, #8
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f003 0307 	and.w	r3, r3, #7
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d015      	beq.n	8009b0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f023 0307 	bic.w	r3, r3, #7
 8009ae4:	3308      	adds	r3, #8
 8009ae6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f003 0307 	and.w	r3, r3, #7
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00b      	beq.n	8009b0a <pvPortMalloc+0x6e>
	__asm volatile
 8009af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	617b      	str	r3, [r7, #20]
}
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop
 8009b08:	e7fd      	b.n	8009b06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d06f      	beq.n	8009bf0 <pvPortMalloc+0x154>
 8009b10:	4b45      	ldr	r3, [pc, #276]	@ (8009c28 <pvPortMalloc+0x18c>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d86a      	bhi.n	8009bf0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b1a:	4b44      	ldr	r3, [pc, #272]	@ (8009c2c <pvPortMalloc+0x190>)
 8009b1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b1e:	4b43      	ldr	r3, [pc, #268]	@ (8009c2c <pvPortMalloc+0x190>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b24:	e004      	b.n	8009b30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d903      	bls.n	8009b42 <pvPortMalloc+0xa6>
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1f1      	bne.n	8009b26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b42:	4b37      	ldr	r3, [pc, #220]	@ (8009c20 <pvPortMalloc+0x184>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d051      	beq.n	8009bf0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2208      	movs	r2, #8
 8009b52:	4413      	add	r3, r2
 8009b54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b60:	685a      	ldr	r2, [r3, #4]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	1ad2      	subs	r2, r2, r3
 8009b66:	2308      	movs	r3, #8
 8009b68:	005b      	lsls	r3, r3, #1
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d920      	bls.n	8009bb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4413      	add	r3, r2
 8009b74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	f003 0307 	and.w	r3, r3, #7
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00b      	beq.n	8009b98 <pvPortMalloc+0xfc>
	__asm volatile
 8009b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	613b      	str	r3, [r7, #16]
}
 8009b92:	bf00      	nop
 8009b94:	bf00      	nop
 8009b96:	e7fd      	b.n	8009b94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9a:	685a      	ldr	r2, [r3, #4]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	1ad2      	subs	r2, r2, r3
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009baa:	69b8      	ldr	r0, [r7, #24]
 8009bac:	f000 f90a 	bl	8009dc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8009c28 <pvPortMalloc+0x18c>)
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	4a1b      	ldr	r2, [pc, #108]	@ (8009c28 <pvPortMalloc+0x18c>)
 8009bbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8009c28 <pvPortMalloc+0x18c>)
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8009c30 <pvPortMalloc+0x194>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d203      	bcs.n	8009bd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009bca:	4b17      	ldr	r3, [pc, #92]	@ (8009c28 <pvPortMalloc+0x18c>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a18      	ldr	r2, [pc, #96]	@ (8009c30 <pvPortMalloc+0x194>)
 8009bd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd4:	685a      	ldr	r2, [r3, #4]
 8009bd6:	4b13      	ldr	r3, [pc, #76]	@ (8009c24 <pvPortMalloc+0x188>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	431a      	orrs	r2, r3
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009be6:	4b13      	ldr	r3, [pc, #76]	@ (8009c34 <pvPortMalloc+0x198>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	3301      	adds	r3, #1
 8009bec:	4a11      	ldr	r2, [pc, #68]	@ (8009c34 <pvPortMalloc+0x198>)
 8009bee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bf0:	f7fe fce0 	bl	80085b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	f003 0307 	and.w	r3, r3, #7
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00b      	beq.n	8009c16 <pvPortMalloc+0x17a>
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	60fb      	str	r3, [r7, #12]
}
 8009c10:	bf00      	nop
 8009c12:	bf00      	nop
 8009c14:	e7fd      	b.n	8009c12 <pvPortMalloc+0x176>
	return pvReturn;
 8009c16:	69fb      	ldr	r3, [r7, #28]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3728      	adds	r7, #40	@ 0x28
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	200022ec 	.word	0x200022ec
 8009c24:	20002300 	.word	0x20002300
 8009c28:	200022f0 	.word	0x200022f0
 8009c2c:	200022e4 	.word	0x200022e4
 8009c30:	200022f4 	.word	0x200022f4
 8009c34:	200022f8 	.word	0x200022f8

08009c38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b086      	sub	sp, #24
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d04f      	beq.n	8009cea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c4a:	2308      	movs	r3, #8
 8009c4c:	425b      	negs	r3, r3
 8009c4e:	697a      	ldr	r2, [r7, #20]
 8009c50:	4413      	add	r3, r2
 8009c52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	685a      	ldr	r2, [r3, #4]
 8009c5c:	4b25      	ldr	r3, [pc, #148]	@ (8009cf4 <vPortFree+0xbc>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4013      	ands	r3, r2
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10b      	bne.n	8009c7e <vPortFree+0x46>
	__asm volatile
 8009c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c6a:	f383 8811 	msr	BASEPRI, r3
 8009c6e:	f3bf 8f6f 	isb	sy
 8009c72:	f3bf 8f4f 	dsb	sy
 8009c76:	60fb      	str	r3, [r7, #12]
}
 8009c78:	bf00      	nop
 8009c7a:	bf00      	nop
 8009c7c:	e7fd      	b.n	8009c7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00b      	beq.n	8009c9e <vPortFree+0x66>
	__asm volatile
 8009c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	60bb      	str	r3, [r7, #8]
}
 8009c98:	bf00      	nop
 8009c9a:	bf00      	nop
 8009c9c:	e7fd      	b.n	8009c9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	4b14      	ldr	r3, [pc, #80]	@ (8009cf4 <vPortFree+0xbc>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d01e      	beq.n	8009cea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d11a      	bne.n	8009cea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	685a      	ldr	r2, [r3, #4]
 8009cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8009cf4 <vPortFree+0xbc>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	43db      	mvns	r3, r3
 8009cbe:	401a      	ands	r2, r3
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009cc4:	f7fe fc68 	bl	8008598 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	685a      	ldr	r2, [r3, #4]
 8009ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8009cf8 <vPortFree+0xc0>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	4a09      	ldr	r2, [pc, #36]	@ (8009cf8 <vPortFree+0xc0>)
 8009cd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cd6:	6938      	ldr	r0, [r7, #16]
 8009cd8:	f000 f874 	bl	8009dc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009cdc:	4b07      	ldr	r3, [pc, #28]	@ (8009cfc <vPortFree+0xc4>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	4a06      	ldr	r2, [pc, #24]	@ (8009cfc <vPortFree+0xc4>)
 8009ce4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009ce6:	f7fe fc65 	bl	80085b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cea:	bf00      	nop
 8009cec:	3718      	adds	r7, #24
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	20002300 	.word	0x20002300
 8009cf8:	200022f0 	.word	0x200022f0
 8009cfc:	200022fc 	.word	0x200022fc

08009d00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d00:	b480      	push	{r7}
 8009d02:	b085      	sub	sp, #20
 8009d04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d06:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009d0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d0c:	4b27      	ldr	r3, [pc, #156]	@ (8009dac <prvHeapInit+0xac>)
 8009d0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f003 0307 	and.w	r3, r3, #7
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00c      	beq.n	8009d34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	3307      	adds	r3, #7
 8009d1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f023 0307 	bic.w	r3, r3, #7
 8009d26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	1ad3      	subs	r3, r2, r3
 8009d2e:	4a1f      	ldr	r2, [pc, #124]	@ (8009dac <prvHeapInit+0xac>)
 8009d30:	4413      	add	r3, r2
 8009d32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d38:	4a1d      	ldr	r2, [pc, #116]	@ (8009db0 <prvHeapInit+0xb0>)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8009db0 <prvHeapInit+0xb0>)
 8009d40:	2200      	movs	r2, #0
 8009d42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	4413      	add	r3, r2
 8009d4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d4c:	2208      	movs	r2, #8
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	1a9b      	subs	r3, r3, r2
 8009d52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f023 0307 	bic.w	r3, r3, #7
 8009d5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	4a15      	ldr	r2, [pc, #84]	@ (8009db4 <prvHeapInit+0xb4>)
 8009d60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d62:	4b14      	ldr	r3, [pc, #80]	@ (8009db4 <prvHeapInit+0xb4>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2200      	movs	r2, #0
 8009d68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d6a:	4b12      	ldr	r3, [pc, #72]	@ (8009db4 <prvHeapInit+0xb4>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	1ad2      	subs	r2, r2, r3
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d80:	4b0c      	ldr	r3, [pc, #48]	@ (8009db4 <prvHeapInit+0xb4>)
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8009db8 <prvHeapInit+0xb8>)
 8009d8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	4a09      	ldr	r2, [pc, #36]	@ (8009dbc <prvHeapInit+0xbc>)
 8009d96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d98:	4b09      	ldr	r3, [pc, #36]	@ (8009dc0 <prvHeapInit+0xc0>)
 8009d9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009d9e:	601a      	str	r2, [r3, #0]
}
 8009da0:	bf00      	nop
 8009da2:	3714      	adds	r7, #20
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr
 8009dac:	2000172c 	.word	0x2000172c
 8009db0:	200022e4 	.word	0x200022e4
 8009db4:	200022ec 	.word	0x200022ec
 8009db8:	200022f4 	.word	0x200022f4
 8009dbc:	200022f0 	.word	0x200022f0
 8009dc0:	20002300 	.word	0x20002300

08009dc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009dcc:	4b28      	ldr	r3, [pc, #160]	@ (8009e70 <prvInsertBlockIntoFreeList+0xac>)
 8009dce:	60fb      	str	r3, [r7, #12]
 8009dd0:	e002      	b.n	8009dd8 <prvInsertBlockIntoFreeList+0x14>
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	60fb      	str	r3, [r7, #12]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d8f7      	bhi.n	8009dd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	4413      	add	r3, r2
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d108      	bne.n	8009e06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	685a      	ldr	r2, [r3, #4]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	441a      	add	r2, r3
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	441a      	add	r2, r3
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d118      	bne.n	8009e4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	4b15      	ldr	r3, [pc, #84]	@ (8009e74 <prvInsertBlockIntoFreeList+0xb0>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d00d      	beq.n	8009e42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	685a      	ldr	r2, [r3, #4]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	441a      	add	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	601a      	str	r2, [r3, #0]
 8009e40:	e008      	b.n	8009e54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e42:	4b0c      	ldr	r3, [pc, #48]	@ (8009e74 <prvInsertBlockIntoFreeList+0xb0>)
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	601a      	str	r2, [r3, #0]
 8009e4a:	e003      	b.n	8009e54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d002      	beq.n	8009e62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e62:	bf00      	nop
 8009e64:	3714      	adds	r7, #20
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	200022e4 	.word	0x200022e4
 8009e74:	200022ec 	.word	0x200022ec

08009e78 <__cvt>:
 8009e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e7c:	ec57 6b10 	vmov	r6, r7, d0
 8009e80:	2f00      	cmp	r7, #0
 8009e82:	460c      	mov	r4, r1
 8009e84:	4619      	mov	r1, r3
 8009e86:	463b      	mov	r3, r7
 8009e88:	bfbb      	ittet	lt
 8009e8a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009e8e:	461f      	movlt	r7, r3
 8009e90:	2300      	movge	r3, #0
 8009e92:	232d      	movlt	r3, #45	@ 0x2d
 8009e94:	700b      	strb	r3, [r1, #0]
 8009e96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e98:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009e9c:	4691      	mov	r9, r2
 8009e9e:	f023 0820 	bic.w	r8, r3, #32
 8009ea2:	bfbc      	itt	lt
 8009ea4:	4632      	movlt	r2, r6
 8009ea6:	4616      	movlt	r6, r2
 8009ea8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009eac:	d005      	beq.n	8009eba <__cvt+0x42>
 8009eae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009eb2:	d100      	bne.n	8009eb6 <__cvt+0x3e>
 8009eb4:	3401      	adds	r4, #1
 8009eb6:	2102      	movs	r1, #2
 8009eb8:	e000      	b.n	8009ebc <__cvt+0x44>
 8009eba:	2103      	movs	r1, #3
 8009ebc:	ab03      	add	r3, sp, #12
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	ab02      	add	r3, sp, #8
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	ec47 6b10 	vmov	d0, r6, r7
 8009ec8:	4653      	mov	r3, sl
 8009eca:	4622      	mov	r2, r4
 8009ecc:	f000 ffa4 	bl	800ae18 <_dtoa_r>
 8009ed0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009ed4:	4605      	mov	r5, r0
 8009ed6:	d119      	bne.n	8009f0c <__cvt+0x94>
 8009ed8:	f019 0f01 	tst.w	r9, #1
 8009edc:	d00e      	beq.n	8009efc <__cvt+0x84>
 8009ede:	eb00 0904 	add.w	r9, r0, r4
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	4639      	mov	r1, r7
 8009eea:	f7f6 fded 	bl	8000ac8 <__aeabi_dcmpeq>
 8009eee:	b108      	cbz	r0, 8009ef4 <__cvt+0x7c>
 8009ef0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ef4:	2230      	movs	r2, #48	@ 0x30
 8009ef6:	9b03      	ldr	r3, [sp, #12]
 8009ef8:	454b      	cmp	r3, r9
 8009efa:	d31e      	bcc.n	8009f3a <__cvt+0xc2>
 8009efc:	9b03      	ldr	r3, [sp, #12]
 8009efe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f00:	1b5b      	subs	r3, r3, r5
 8009f02:	4628      	mov	r0, r5
 8009f04:	6013      	str	r3, [r2, #0]
 8009f06:	b004      	add	sp, #16
 8009f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f10:	eb00 0904 	add.w	r9, r0, r4
 8009f14:	d1e5      	bne.n	8009ee2 <__cvt+0x6a>
 8009f16:	7803      	ldrb	r3, [r0, #0]
 8009f18:	2b30      	cmp	r3, #48	@ 0x30
 8009f1a:	d10a      	bne.n	8009f32 <__cvt+0xba>
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	2300      	movs	r3, #0
 8009f20:	4630      	mov	r0, r6
 8009f22:	4639      	mov	r1, r7
 8009f24:	f7f6 fdd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f28:	b918      	cbnz	r0, 8009f32 <__cvt+0xba>
 8009f2a:	f1c4 0401 	rsb	r4, r4, #1
 8009f2e:	f8ca 4000 	str.w	r4, [sl]
 8009f32:	f8da 3000 	ldr.w	r3, [sl]
 8009f36:	4499      	add	r9, r3
 8009f38:	e7d3      	b.n	8009ee2 <__cvt+0x6a>
 8009f3a:	1c59      	adds	r1, r3, #1
 8009f3c:	9103      	str	r1, [sp, #12]
 8009f3e:	701a      	strb	r2, [r3, #0]
 8009f40:	e7d9      	b.n	8009ef6 <__cvt+0x7e>

08009f42 <__exponent>:
 8009f42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f44:	2900      	cmp	r1, #0
 8009f46:	bfba      	itte	lt
 8009f48:	4249      	neglt	r1, r1
 8009f4a:	232d      	movlt	r3, #45	@ 0x2d
 8009f4c:	232b      	movge	r3, #43	@ 0x2b
 8009f4e:	2909      	cmp	r1, #9
 8009f50:	7002      	strb	r2, [r0, #0]
 8009f52:	7043      	strb	r3, [r0, #1]
 8009f54:	dd29      	ble.n	8009faa <__exponent+0x68>
 8009f56:	f10d 0307 	add.w	r3, sp, #7
 8009f5a:	461d      	mov	r5, r3
 8009f5c:	270a      	movs	r7, #10
 8009f5e:	461a      	mov	r2, r3
 8009f60:	fbb1 f6f7 	udiv	r6, r1, r7
 8009f64:	fb07 1416 	mls	r4, r7, r6, r1
 8009f68:	3430      	adds	r4, #48	@ 0x30
 8009f6a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009f6e:	460c      	mov	r4, r1
 8009f70:	2c63      	cmp	r4, #99	@ 0x63
 8009f72:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f76:	4631      	mov	r1, r6
 8009f78:	dcf1      	bgt.n	8009f5e <__exponent+0x1c>
 8009f7a:	3130      	adds	r1, #48	@ 0x30
 8009f7c:	1e94      	subs	r4, r2, #2
 8009f7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009f82:	1c41      	adds	r1, r0, #1
 8009f84:	4623      	mov	r3, r4
 8009f86:	42ab      	cmp	r3, r5
 8009f88:	d30a      	bcc.n	8009fa0 <__exponent+0x5e>
 8009f8a:	f10d 0309 	add.w	r3, sp, #9
 8009f8e:	1a9b      	subs	r3, r3, r2
 8009f90:	42ac      	cmp	r4, r5
 8009f92:	bf88      	it	hi
 8009f94:	2300      	movhi	r3, #0
 8009f96:	3302      	adds	r3, #2
 8009f98:	4403      	add	r3, r0
 8009f9a:	1a18      	subs	r0, r3, r0
 8009f9c:	b003      	add	sp, #12
 8009f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fa0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009fa4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009fa8:	e7ed      	b.n	8009f86 <__exponent+0x44>
 8009faa:	2330      	movs	r3, #48	@ 0x30
 8009fac:	3130      	adds	r1, #48	@ 0x30
 8009fae:	7083      	strb	r3, [r0, #2]
 8009fb0:	70c1      	strb	r1, [r0, #3]
 8009fb2:	1d03      	adds	r3, r0, #4
 8009fb4:	e7f1      	b.n	8009f9a <__exponent+0x58>
	...

08009fb8 <_printf_float>:
 8009fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fbc:	b08d      	sub	sp, #52	@ 0x34
 8009fbe:	460c      	mov	r4, r1
 8009fc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009fc4:	4616      	mov	r6, r2
 8009fc6:	461f      	mov	r7, r3
 8009fc8:	4605      	mov	r5, r0
 8009fca:	f000 fdbf 	bl	800ab4c <_localeconv_r>
 8009fce:	6803      	ldr	r3, [r0, #0]
 8009fd0:	9304      	str	r3, [sp, #16]
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7f6 f94c 	bl	8000270 <strlen>
 8009fd8:	2300      	movs	r3, #0
 8009fda:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fdc:	f8d8 3000 	ldr.w	r3, [r8]
 8009fe0:	9005      	str	r0, [sp, #20]
 8009fe2:	3307      	adds	r3, #7
 8009fe4:	f023 0307 	bic.w	r3, r3, #7
 8009fe8:	f103 0208 	add.w	r2, r3, #8
 8009fec:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009ff0:	f8d4 b000 	ldr.w	fp, [r4]
 8009ff4:	f8c8 2000 	str.w	r2, [r8]
 8009ff8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ffc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a000:	9307      	str	r3, [sp, #28]
 800a002:	f8cd 8018 	str.w	r8, [sp, #24]
 800a006:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a00a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a00e:	4b9c      	ldr	r3, [pc, #624]	@ (800a280 <_printf_float+0x2c8>)
 800a010:	f04f 32ff 	mov.w	r2, #4294967295
 800a014:	f7f6 fd8a 	bl	8000b2c <__aeabi_dcmpun>
 800a018:	bb70      	cbnz	r0, 800a078 <_printf_float+0xc0>
 800a01a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a01e:	4b98      	ldr	r3, [pc, #608]	@ (800a280 <_printf_float+0x2c8>)
 800a020:	f04f 32ff 	mov.w	r2, #4294967295
 800a024:	f7f6 fd64 	bl	8000af0 <__aeabi_dcmple>
 800a028:	bb30      	cbnz	r0, 800a078 <_printf_float+0xc0>
 800a02a:	2200      	movs	r2, #0
 800a02c:	2300      	movs	r3, #0
 800a02e:	4640      	mov	r0, r8
 800a030:	4649      	mov	r1, r9
 800a032:	f7f6 fd53 	bl	8000adc <__aeabi_dcmplt>
 800a036:	b110      	cbz	r0, 800a03e <_printf_float+0x86>
 800a038:	232d      	movs	r3, #45	@ 0x2d
 800a03a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a03e:	4a91      	ldr	r2, [pc, #580]	@ (800a284 <_printf_float+0x2cc>)
 800a040:	4b91      	ldr	r3, [pc, #580]	@ (800a288 <_printf_float+0x2d0>)
 800a042:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a046:	bf94      	ite	ls
 800a048:	4690      	movls	r8, r2
 800a04a:	4698      	movhi	r8, r3
 800a04c:	2303      	movs	r3, #3
 800a04e:	6123      	str	r3, [r4, #16]
 800a050:	f02b 0304 	bic.w	r3, fp, #4
 800a054:	6023      	str	r3, [r4, #0]
 800a056:	f04f 0900 	mov.w	r9, #0
 800a05a:	9700      	str	r7, [sp, #0]
 800a05c:	4633      	mov	r3, r6
 800a05e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a060:	4621      	mov	r1, r4
 800a062:	4628      	mov	r0, r5
 800a064:	f000 f9d2 	bl	800a40c <_printf_common>
 800a068:	3001      	adds	r0, #1
 800a06a:	f040 808d 	bne.w	800a188 <_printf_float+0x1d0>
 800a06e:	f04f 30ff 	mov.w	r0, #4294967295
 800a072:	b00d      	add	sp, #52	@ 0x34
 800a074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a078:	4642      	mov	r2, r8
 800a07a:	464b      	mov	r3, r9
 800a07c:	4640      	mov	r0, r8
 800a07e:	4649      	mov	r1, r9
 800a080:	f7f6 fd54 	bl	8000b2c <__aeabi_dcmpun>
 800a084:	b140      	cbz	r0, 800a098 <_printf_float+0xe0>
 800a086:	464b      	mov	r3, r9
 800a088:	2b00      	cmp	r3, #0
 800a08a:	bfbc      	itt	lt
 800a08c:	232d      	movlt	r3, #45	@ 0x2d
 800a08e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a092:	4a7e      	ldr	r2, [pc, #504]	@ (800a28c <_printf_float+0x2d4>)
 800a094:	4b7e      	ldr	r3, [pc, #504]	@ (800a290 <_printf_float+0x2d8>)
 800a096:	e7d4      	b.n	800a042 <_printf_float+0x8a>
 800a098:	6863      	ldr	r3, [r4, #4]
 800a09a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a09e:	9206      	str	r2, [sp, #24]
 800a0a0:	1c5a      	adds	r2, r3, #1
 800a0a2:	d13b      	bne.n	800a11c <_printf_float+0x164>
 800a0a4:	2306      	movs	r3, #6
 800a0a6:	6063      	str	r3, [r4, #4]
 800a0a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	6022      	str	r2, [r4, #0]
 800a0b0:	9303      	str	r3, [sp, #12]
 800a0b2:	ab0a      	add	r3, sp, #40	@ 0x28
 800a0b4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a0b8:	ab09      	add	r3, sp, #36	@ 0x24
 800a0ba:	9300      	str	r3, [sp, #0]
 800a0bc:	6861      	ldr	r1, [r4, #4]
 800a0be:	ec49 8b10 	vmov	d0, r8, r9
 800a0c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	f7ff fed6 	bl	8009e78 <__cvt>
 800a0cc:	9b06      	ldr	r3, [sp, #24]
 800a0ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0d0:	2b47      	cmp	r3, #71	@ 0x47
 800a0d2:	4680      	mov	r8, r0
 800a0d4:	d129      	bne.n	800a12a <_printf_float+0x172>
 800a0d6:	1cc8      	adds	r0, r1, #3
 800a0d8:	db02      	blt.n	800a0e0 <_printf_float+0x128>
 800a0da:	6863      	ldr	r3, [r4, #4]
 800a0dc:	4299      	cmp	r1, r3
 800a0de:	dd41      	ble.n	800a164 <_printf_float+0x1ac>
 800a0e0:	f1aa 0a02 	sub.w	sl, sl, #2
 800a0e4:	fa5f fa8a 	uxtb.w	sl, sl
 800a0e8:	3901      	subs	r1, #1
 800a0ea:	4652      	mov	r2, sl
 800a0ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a0f0:	9109      	str	r1, [sp, #36]	@ 0x24
 800a0f2:	f7ff ff26 	bl	8009f42 <__exponent>
 800a0f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a0f8:	1813      	adds	r3, r2, r0
 800a0fa:	2a01      	cmp	r2, #1
 800a0fc:	4681      	mov	r9, r0
 800a0fe:	6123      	str	r3, [r4, #16]
 800a100:	dc02      	bgt.n	800a108 <_printf_float+0x150>
 800a102:	6822      	ldr	r2, [r4, #0]
 800a104:	07d2      	lsls	r2, r2, #31
 800a106:	d501      	bpl.n	800a10c <_printf_float+0x154>
 800a108:	3301      	adds	r3, #1
 800a10a:	6123      	str	r3, [r4, #16]
 800a10c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a110:	2b00      	cmp	r3, #0
 800a112:	d0a2      	beq.n	800a05a <_printf_float+0xa2>
 800a114:	232d      	movs	r3, #45	@ 0x2d
 800a116:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a11a:	e79e      	b.n	800a05a <_printf_float+0xa2>
 800a11c:	9a06      	ldr	r2, [sp, #24]
 800a11e:	2a47      	cmp	r2, #71	@ 0x47
 800a120:	d1c2      	bne.n	800a0a8 <_printf_float+0xf0>
 800a122:	2b00      	cmp	r3, #0
 800a124:	d1c0      	bne.n	800a0a8 <_printf_float+0xf0>
 800a126:	2301      	movs	r3, #1
 800a128:	e7bd      	b.n	800a0a6 <_printf_float+0xee>
 800a12a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a12e:	d9db      	bls.n	800a0e8 <_printf_float+0x130>
 800a130:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a134:	d118      	bne.n	800a168 <_printf_float+0x1b0>
 800a136:	2900      	cmp	r1, #0
 800a138:	6863      	ldr	r3, [r4, #4]
 800a13a:	dd0b      	ble.n	800a154 <_printf_float+0x19c>
 800a13c:	6121      	str	r1, [r4, #16]
 800a13e:	b913      	cbnz	r3, 800a146 <_printf_float+0x18e>
 800a140:	6822      	ldr	r2, [r4, #0]
 800a142:	07d0      	lsls	r0, r2, #31
 800a144:	d502      	bpl.n	800a14c <_printf_float+0x194>
 800a146:	3301      	adds	r3, #1
 800a148:	440b      	add	r3, r1
 800a14a:	6123      	str	r3, [r4, #16]
 800a14c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a14e:	f04f 0900 	mov.w	r9, #0
 800a152:	e7db      	b.n	800a10c <_printf_float+0x154>
 800a154:	b913      	cbnz	r3, 800a15c <_printf_float+0x1a4>
 800a156:	6822      	ldr	r2, [r4, #0]
 800a158:	07d2      	lsls	r2, r2, #31
 800a15a:	d501      	bpl.n	800a160 <_printf_float+0x1a8>
 800a15c:	3302      	adds	r3, #2
 800a15e:	e7f4      	b.n	800a14a <_printf_float+0x192>
 800a160:	2301      	movs	r3, #1
 800a162:	e7f2      	b.n	800a14a <_printf_float+0x192>
 800a164:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a168:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a16a:	4299      	cmp	r1, r3
 800a16c:	db05      	blt.n	800a17a <_printf_float+0x1c2>
 800a16e:	6823      	ldr	r3, [r4, #0]
 800a170:	6121      	str	r1, [r4, #16]
 800a172:	07d8      	lsls	r0, r3, #31
 800a174:	d5ea      	bpl.n	800a14c <_printf_float+0x194>
 800a176:	1c4b      	adds	r3, r1, #1
 800a178:	e7e7      	b.n	800a14a <_printf_float+0x192>
 800a17a:	2900      	cmp	r1, #0
 800a17c:	bfd4      	ite	le
 800a17e:	f1c1 0202 	rsble	r2, r1, #2
 800a182:	2201      	movgt	r2, #1
 800a184:	4413      	add	r3, r2
 800a186:	e7e0      	b.n	800a14a <_printf_float+0x192>
 800a188:	6823      	ldr	r3, [r4, #0]
 800a18a:	055a      	lsls	r2, r3, #21
 800a18c:	d407      	bmi.n	800a19e <_printf_float+0x1e6>
 800a18e:	6923      	ldr	r3, [r4, #16]
 800a190:	4642      	mov	r2, r8
 800a192:	4631      	mov	r1, r6
 800a194:	4628      	mov	r0, r5
 800a196:	47b8      	blx	r7
 800a198:	3001      	adds	r0, #1
 800a19a:	d12b      	bne.n	800a1f4 <_printf_float+0x23c>
 800a19c:	e767      	b.n	800a06e <_printf_float+0xb6>
 800a19e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a1a2:	f240 80dd 	bls.w	800a360 <_printf_float+0x3a8>
 800a1a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	f7f6 fc8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	d033      	beq.n	800a21e <_printf_float+0x266>
 800a1b6:	4a37      	ldr	r2, [pc, #220]	@ (800a294 <_printf_float+0x2dc>)
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	4631      	mov	r1, r6
 800a1bc:	4628      	mov	r0, r5
 800a1be:	47b8      	blx	r7
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	f43f af54 	beq.w	800a06e <_printf_float+0xb6>
 800a1c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a1ca:	4543      	cmp	r3, r8
 800a1cc:	db02      	blt.n	800a1d4 <_printf_float+0x21c>
 800a1ce:	6823      	ldr	r3, [r4, #0]
 800a1d0:	07d8      	lsls	r0, r3, #31
 800a1d2:	d50f      	bpl.n	800a1f4 <_printf_float+0x23c>
 800a1d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1d8:	4631      	mov	r1, r6
 800a1da:	4628      	mov	r0, r5
 800a1dc:	47b8      	blx	r7
 800a1de:	3001      	adds	r0, #1
 800a1e0:	f43f af45 	beq.w	800a06e <_printf_float+0xb6>
 800a1e4:	f04f 0900 	mov.w	r9, #0
 800a1e8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1ec:	f104 0a1a 	add.w	sl, r4, #26
 800a1f0:	45c8      	cmp	r8, r9
 800a1f2:	dc09      	bgt.n	800a208 <_printf_float+0x250>
 800a1f4:	6823      	ldr	r3, [r4, #0]
 800a1f6:	079b      	lsls	r3, r3, #30
 800a1f8:	f100 8103 	bmi.w	800a402 <_printf_float+0x44a>
 800a1fc:	68e0      	ldr	r0, [r4, #12]
 800a1fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a200:	4298      	cmp	r0, r3
 800a202:	bfb8      	it	lt
 800a204:	4618      	movlt	r0, r3
 800a206:	e734      	b.n	800a072 <_printf_float+0xba>
 800a208:	2301      	movs	r3, #1
 800a20a:	4652      	mov	r2, sl
 800a20c:	4631      	mov	r1, r6
 800a20e:	4628      	mov	r0, r5
 800a210:	47b8      	blx	r7
 800a212:	3001      	adds	r0, #1
 800a214:	f43f af2b 	beq.w	800a06e <_printf_float+0xb6>
 800a218:	f109 0901 	add.w	r9, r9, #1
 800a21c:	e7e8      	b.n	800a1f0 <_printf_float+0x238>
 800a21e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a220:	2b00      	cmp	r3, #0
 800a222:	dc39      	bgt.n	800a298 <_printf_float+0x2e0>
 800a224:	4a1b      	ldr	r2, [pc, #108]	@ (800a294 <_printf_float+0x2dc>)
 800a226:	2301      	movs	r3, #1
 800a228:	4631      	mov	r1, r6
 800a22a:	4628      	mov	r0, r5
 800a22c:	47b8      	blx	r7
 800a22e:	3001      	adds	r0, #1
 800a230:	f43f af1d 	beq.w	800a06e <_printf_float+0xb6>
 800a234:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a238:	ea59 0303 	orrs.w	r3, r9, r3
 800a23c:	d102      	bne.n	800a244 <_printf_float+0x28c>
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	07d9      	lsls	r1, r3, #31
 800a242:	d5d7      	bpl.n	800a1f4 <_printf_float+0x23c>
 800a244:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a248:	4631      	mov	r1, r6
 800a24a:	4628      	mov	r0, r5
 800a24c:	47b8      	blx	r7
 800a24e:	3001      	adds	r0, #1
 800a250:	f43f af0d 	beq.w	800a06e <_printf_float+0xb6>
 800a254:	f04f 0a00 	mov.w	sl, #0
 800a258:	f104 0b1a 	add.w	fp, r4, #26
 800a25c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a25e:	425b      	negs	r3, r3
 800a260:	4553      	cmp	r3, sl
 800a262:	dc01      	bgt.n	800a268 <_printf_float+0x2b0>
 800a264:	464b      	mov	r3, r9
 800a266:	e793      	b.n	800a190 <_printf_float+0x1d8>
 800a268:	2301      	movs	r3, #1
 800a26a:	465a      	mov	r2, fp
 800a26c:	4631      	mov	r1, r6
 800a26e:	4628      	mov	r0, r5
 800a270:	47b8      	blx	r7
 800a272:	3001      	adds	r0, #1
 800a274:	f43f aefb 	beq.w	800a06e <_printf_float+0xb6>
 800a278:	f10a 0a01 	add.w	sl, sl, #1
 800a27c:	e7ee      	b.n	800a25c <_printf_float+0x2a4>
 800a27e:	bf00      	nop
 800a280:	7fefffff 	.word	0x7fefffff
 800a284:	0800d2dc 	.word	0x0800d2dc
 800a288:	0800d2e0 	.word	0x0800d2e0
 800a28c:	0800d2e4 	.word	0x0800d2e4
 800a290:	0800d2e8 	.word	0x0800d2e8
 800a294:	0800d2ec 	.word	0x0800d2ec
 800a298:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a29a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a29e:	4553      	cmp	r3, sl
 800a2a0:	bfa8      	it	ge
 800a2a2:	4653      	movge	r3, sl
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	4699      	mov	r9, r3
 800a2a8:	dc36      	bgt.n	800a318 <_printf_float+0x360>
 800a2aa:	f04f 0b00 	mov.w	fp, #0
 800a2ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2b2:	f104 021a 	add.w	r2, r4, #26
 800a2b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a2b8:	9306      	str	r3, [sp, #24]
 800a2ba:	eba3 0309 	sub.w	r3, r3, r9
 800a2be:	455b      	cmp	r3, fp
 800a2c0:	dc31      	bgt.n	800a326 <_printf_float+0x36e>
 800a2c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c4:	459a      	cmp	sl, r3
 800a2c6:	dc3a      	bgt.n	800a33e <_printf_float+0x386>
 800a2c8:	6823      	ldr	r3, [r4, #0]
 800a2ca:	07da      	lsls	r2, r3, #31
 800a2cc:	d437      	bmi.n	800a33e <_printf_float+0x386>
 800a2ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2d0:	ebaa 0903 	sub.w	r9, sl, r3
 800a2d4:	9b06      	ldr	r3, [sp, #24]
 800a2d6:	ebaa 0303 	sub.w	r3, sl, r3
 800a2da:	4599      	cmp	r9, r3
 800a2dc:	bfa8      	it	ge
 800a2de:	4699      	movge	r9, r3
 800a2e0:	f1b9 0f00 	cmp.w	r9, #0
 800a2e4:	dc33      	bgt.n	800a34e <_printf_float+0x396>
 800a2e6:	f04f 0800 	mov.w	r8, #0
 800a2ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2ee:	f104 0b1a 	add.w	fp, r4, #26
 800a2f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2f4:	ebaa 0303 	sub.w	r3, sl, r3
 800a2f8:	eba3 0309 	sub.w	r3, r3, r9
 800a2fc:	4543      	cmp	r3, r8
 800a2fe:	f77f af79 	ble.w	800a1f4 <_printf_float+0x23c>
 800a302:	2301      	movs	r3, #1
 800a304:	465a      	mov	r2, fp
 800a306:	4631      	mov	r1, r6
 800a308:	4628      	mov	r0, r5
 800a30a:	47b8      	blx	r7
 800a30c:	3001      	adds	r0, #1
 800a30e:	f43f aeae 	beq.w	800a06e <_printf_float+0xb6>
 800a312:	f108 0801 	add.w	r8, r8, #1
 800a316:	e7ec      	b.n	800a2f2 <_printf_float+0x33a>
 800a318:	4642      	mov	r2, r8
 800a31a:	4631      	mov	r1, r6
 800a31c:	4628      	mov	r0, r5
 800a31e:	47b8      	blx	r7
 800a320:	3001      	adds	r0, #1
 800a322:	d1c2      	bne.n	800a2aa <_printf_float+0x2f2>
 800a324:	e6a3      	b.n	800a06e <_printf_float+0xb6>
 800a326:	2301      	movs	r3, #1
 800a328:	4631      	mov	r1, r6
 800a32a:	4628      	mov	r0, r5
 800a32c:	9206      	str	r2, [sp, #24]
 800a32e:	47b8      	blx	r7
 800a330:	3001      	adds	r0, #1
 800a332:	f43f ae9c 	beq.w	800a06e <_printf_float+0xb6>
 800a336:	9a06      	ldr	r2, [sp, #24]
 800a338:	f10b 0b01 	add.w	fp, fp, #1
 800a33c:	e7bb      	b.n	800a2b6 <_printf_float+0x2fe>
 800a33e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a342:	4631      	mov	r1, r6
 800a344:	4628      	mov	r0, r5
 800a346:	47b8      	blx	r7
 800a348:	3001      	adds	r0, #1
 800a34a:	d1c0      	bne.n	800a2ce <_printf_float+0x316>
 800a34c:	e68f      	b.n	800a06e <_printf_float+0xb6>
 800a34e:	9a06      	ldr	r2, [sp, #24]
 800a350:	464b      	mov	r3, r9
 800a352:	4442      	add	r2, r8
 800a354:	4631      	mov	r1, r6
 800a356:	4628      	mov	r0, r5
 800a358:	47b8      	blx	r7
 800a35a:	3001      	adds	r0, #1
 800a35c:	d1c3      	bne.n	800a2e6 <_printf_float+0x32e>
 800a35e:	e686      	b.n	800a06e <_printf_float+0xb6>
 800a360:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a364:	f1ba 0f01 	cmp.w	sl, #1
 800a368:	dc01      	bgt.n	800a36e <_printf_float+0x3b6>
 800a36a:	07db      	lsls	r3, r3, #31
 800a36c:	d536      	bpl.n	800a3dc <_printf_float+0x424>
 800a36e:	2301      	movs	r3, #1
 800a370:	4642      	mov	r2, r8
 800a372:	4631      	mov	r1, r6
 800a374:	4628      	mov	r0, r5
 800a376:	47b8      	blx	r7
 800a378:	3001      	adds	r0, #1
 800a37a:	f43f ae78 	beq.w	800a06e <_printf_float+0xb6>
 800a37e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a382:	4631      	mov	r1, r6
 800a384:	4628      	mov	r0, r5
 800a386:	47b8      	blx	r7
 800a388:	3001      	adds	r0, #1
 800a38a:	f43f ae70 	beq.w	800a06e <_printf_float+0xb6>
 800a38e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a392:	2200      	movs	r2, #0
 800a394:	2300      	movs	r3, #0
 800a396:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a39a:	f7f6 fb95 	bl	8000ac8 <__aeabi_dcmpeq>
 800a39e:	b9c0      	cbnz	r0, 800a3d2 <_printf_float+0x41a>
 800a3a0:	4653      	mov	r3, sl
 800a3a2:	f108 0201 	add.w	r2, r8, #1
 800a3a6:	4631      	mov	r1, r6
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	47b8      	blx	r7
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	d10c      	bne.n	800a3ca <_printf_float+0x412>
 800a3b0:	e65d      	b.n	800a06e <_printf_float+0xb6>
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	465a      	mov	r2, fp
 800a3b6:	4631      	mov	r1, r6
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	47b8      	blx	r7
 800a3bc:	3001      	adds	r0, #1
 800a3be:	f43f ae56 	beq.w	800a06e <_printf_float+0xb6>
 800a3c2:	f108 0801 	add.w	r8, r8, #1
 800a3c6:	45d0      	cmp	r8, sl
 800a3c8:	dbf3      	blt.n	800a3b2 <_printf_float+0x3fa>
 800a3ca:	464b      	mov	r3, r9
 800a3cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a3d0:	e6df      	b.n	800a192 <_printf_float+0x1da>
 800a3d2:	f04f 0800 	mov.w	r8, #0
 800a3d6:	f104 0b1a 	add.w	fp, r4, #26
 800a3da:	e7f4      	b.n	800a3c6 <_printf_float+0x40e>
 800a3dc:	2301      	movs	r3, #1
 800a3de:	4642      	mov	r2, r8
 800a3e0:	e7e1      	b.n	800a3a6 <_printf_float+0x3ee>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	464a      	mov	r2, r9
 800a3e6:	4631      	mov	r1, r6
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	47b8      	blx	r7
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	f43f ae3e 	beq.w	800a06e <_printf_float+0xb6>
 800a3f2:	f108 0801 	add.w	r8, r8, #1
 800a3f6:	68e3      	ldr	r3, [r4, #12]
 800a3f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3fa:	1a5b      	subs	r3, r3, r1
 800a3fc:	4543      	cmp	r3, r8
 800a3fe:	dcf0      	bgt.n	800a3e2 <_printf_float+0x42a>
 800a400:	e6fc      	b.n	800a1fc <_printf_float+0x244>
 800a402:	f04f 0800 	mov.w	r8, #0
 800a406:	f104 0919 	add.w	r9, r4, #25
 800a40a:	e7f4      	b.n	800a3f6 <_printf_float+0x43e>

0800a40c <_printf_common>:
 800a40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a410:	4616      	mov	r6, r2
 800a412:	4698      	mov	r8, r3
 800a414:	688a      	ldr	r2, [r1, #8]
 800a416:	690b      	ldr	r3, [r1, #16]
 800a418:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a41c:	4293      	cmp	r3, r2
 800a41e:	bfb8      	it	lt
 800a420:	4613      	movlt	r3, r2
 800a422:	6033      	str	r3, [r6, #0]
 800a424:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a428:	4607      	mov	r7, r0
 800a42a:	460c      	mov	r4, r1
 800a42c:	b10a      	cbz	r2, 800a432 <_printf_common+0x26>
 800a42e:	3301      	adds	r3, #1
 800a430:	6033      	str	r3, [r6, #0]
 800a432:	6823      	ldr	r3, [r4, #0]
 800a434:	0699      	lsls	r1, r3, #26
 800a436:	bf42      	ittt	mi
 800a438:	6833      	ldrmi	r3, [r6, #0]
 800a43a:	3302      	addmi	r3, #2
 800a43c:	6033      	strmi	r3, [r6, #0]
 800a43e:	6825      	ldr	r5, [r4, #0]
 800a440:	f015 0506 	ands.w	r5, r5, #6
 800a444:	d106      	bne.n	800a454 <_printf_common+0x48>
 800a446:	f104 0a19 	add.w	sl, r4, #25
 800a44a:	68e3      	ldr	r3, [r4, #12]
 800a44c:	6832      	ldr	r2, [r6, #0]
 800a44e:	1a9b      	subs	r3, r3, r2
 800a450:	42ab      	cmp	r3, r5
 800a452:	dc26      	bgt.n	800a4a2 <_printf_common+0x96>
 800a454:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a458:	6822      	ldr	r2, [r4, #0]
 800a45a:	3b00      	subs	r3, #0
 800a45c:	bf18      	it	ne
 800a45e:	2301      	movne	r3, #1
 800a460:	0692      	lsls	r2, r2, #26
 800a462:	d42b      	bmi.n	800a4bc <_printf_common+0xb0>
 800a464:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a468:	4641      	mov	r1, r8
 800a46a:	4638      	mov	r0, r7
 800a46c:	47c8      	blx	r9
 800a46e:	3001      	adds	r0, #1
 800a470:	d01e      	beq.n	800a4b0 <_printf_common+0xa4>
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	6922      	ldr	r2, [r4, #16]
 800a476:	f003 0306 	and.w	r3, r3, #6
 800a47a:	2b04      	cmp	r3, #4
 800a47c:	bf02      	ittt	eq
 800a47e:	68e5      	ldreq	r5, [r4, #12]
 800a480:	6833      	ldreq	r3, [r6, #0]
 800a482:	1aed      	subeq	r5, r5, r3
 800a484:	68a3      	ldr	r3, [r4, #8]
 800a486:	bf0c      	ite	eq
 800a488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a48c:	2500      	movne	r5, #0
 800a48e:	4293      	cmp	r3, r2
 800a490:	bfc4      	itt	gt
 800a492:	1a9b      	subgt	r3, r3, r2
 800a494:	18ed      	addgt	r5, r5, r3
 800a496:	2600      	movs	r6, #0
 800a498:	341a      	adds	r4, #26
 800a49a:	42b5      	cmp	r5, r6
 800a49c:	d11a      	bne.n	800a4d4 <_printf_common+0xc8>
 800a49e:	2000      	movs	r0, #0
 800a4a0:	e008      	b.n	800a4b4 <_printf_common+0xa8>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	4652      	mov	r2, sl
 800a4a6:	4641      	mov	r1, r8
 800a4a8:	4638      	mov	r0, r7
 800a4aa:	47c8      	blx	r9
 800a4ac:	3001      	adds	r0, #1
 800a4ae:	d103      	bne.n	800a4b8 <_printf_common+0xac>
 800a4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b8:	3501      	adds	r5, #1
 800a4ba:	e7c6      	b.n	800a44a <_printf_common+0x3e>
 800a4bc:	18e1      	adds	r1, r4, r3
 800a4be:	1c5a      	adds	r2, r3, #1
 800a4c0:	2030      	movs	r0, #48	@ 0x30
 800a4c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4c6:	4422      	add	r2, r4
 800a4c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4d0:	3302      	adds	r3, #2
 800a4d2:	e7c7      	b.n	800a464 <_printf_common+0x58>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	4622      	mov	r2, r4
 800a4d8:	4641      	mov	r1, r8
 800a4da:	4638      	mov	r0, r7
 800a4dc:	47c8      	blx	r9
 800a4de:	3001      	adds	r0, #1
 800a4e0:	d0e6      	beq.n	800a4b0 <_printf_common+0xa4>
 800a4e2:	3601      	adds	r6, #1
 800a4e4:	e7d9      	b.n	800a49a <_printf_common+0x8e>
	...

0800a4e8 <_printf_i>:
 800a4e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4ec:	7e0f      	ldrb	r7, [r1, #24]
 800a4ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a4f0:	2f78      	cmp	r7, #120	@ 0x78
 800a4f2:	4691      	mov	r9, r2
 800a4f4:	4680      	mov	r8, r0
 800a4f6:	460c      	mov	r4, r1
 800a4f8:	469a      	mov	sl, r3
 800a4fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a4fe:	d807      	bhi.n	800a510 <_printf_i+0x28>
 800a500:	2f62      	cmp	r7, #98	@ 0x62
 800a502:	d80a      	bhi.n	800a51a <_printf_i+0x32>
 800a504:	2f00      	cmp	r7, #0
 800a506:	f000 80d2 	beq.w	800a6ae <_printf_i+0x1c6>
 800a50a:	2f58      	cmp	r7, #88	@ 0x58
 800a50c:	f000 80b9 	beq.w	800a682 <_printf_i+0x19a>
 800a510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a514:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a518:	e03a      	b.n	800a590 <_printf_i+0xa8>
 800a51a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a51e:	2b15      	cmp	r3, #21
 800a520:	d8f6      	bhi.n	800a510 <_printf_i+0x28>
 800a522:	a101      	add	r1, pc, #4	@ (adr r1, 800a528 <_printf_i+0x40>)
 800a524:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a528:	0800a581 	.word	0x0800a581
 800a52c:	0800a595 	.word	0x0800a595
 800a530:	0800a511 	.word	0x0800a511
 800a534:	0800a511 	.word	0x0800a511
 800a538:	0800a511 	.word	0x0800a511
 800a53c:	0800a511 	.word	0x0800a511
 800a540:	0800a595 	.word	0x0800a595
 800a544:	0800a511 	.word	0x0800a511
 800a548:	0800a511 	.word	0x0800a511
 800a54c:	0800a511 	.word	0x0800a511
 800a550:	0800a511 	.word	0x0800a511
 800a554:	0800a695 	.word	0x0800a695
 800a558:	0800a5bf 	.word	0x0800a5bf
 800a55c:	0800a64f 	.word	0x0800a64f
 800a560:	0800a511 	.word	0x0800a511
 800a564:	0800a511 	.word	0x0800a511
 800a568:	0800a6b7 	.word	0x0800a6b7
 800a56c:	0800a511 	.word	0x0800a511
 800a570:	0800a5bf 	.word	0x0800a5bf
 800a574:	0800a511 	.word	0x0800a511
 800a578:	0800a511 	.word	0x0800a511
 800a57c:	0800a657 	.word	0x0800a657
 800a580:	6833      	ldr	r3, [r6, #0]
 800a582:	1d1a      	adds	r2, r3, #4
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	6032      	str	r2, [r6, #0]
 800a588:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a58c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a590:	2301      	movs	r3, #1
 800a592:	e09d      	b.n	800a6d0 <_printf_i+0x1e8>
 800a594:	6833      	ldr	r3, [r6, #0]
 800a596:	6820      	ldr	r0, [r4, #0]
 800a598:	1d19      	adds	r1, r3, #4
 800a59a:	6031      	str	r1, [r6, #0]
 800a59c:	0606      	lsls	r6, r0, #24
 800a59e:	d501      	bpl.n	800a5a4 <_printf_i+0xbc>
 800a5a0:	681d      	ldr	r5, [r3, #0]
 800a5a2:	e003      	b.n	800a5ac <_printf_i+0xc4>
 800a5a4:	0645      	lsls	r5, r0, #25
 800a5a6:	d5fb      	bpl.n	800a5a0 <_printf_i+0xb8>
 800a5a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a5ac:	2d00      	cmp	r5, #0
 800a5ae:	da03      	bge.n	800a5b8 <_printf_i+0xd0>
 800a5b0:	232d      	movs	r3, #45	@ 0x2d
 800a5b2:	426d      	negs	r5, r5
 800a5b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5b8:	4859      	ldr	r0, [pc, #356]	@ (800a720 <_printf_i+0x238>)
 800a5ba:	230a      	movs	r3, #10
 800a5bc:	e011      	b.n	800a5e2 <_printf_i+0xfa>
 800a5be:	6821      	ldr	r1, [r4, #0]
 800a5c0:	6833      	ldr	r3, [r6, #0]
 800a5c2:	0608      	lsls	r0, r1, #24
 800a5c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5c8:	d402      	bmi.n	800a5d0 <_printf_i+0xe8>
 800a5ca:	0649      	lsls	r1, r1, #25
 800a5cc:	bf48      	it	mi
 800a5ce:	b2ad      	uxthmi	r5, r5
 800a5d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5d2:	4853      	ldr	r0, [pc, #332]	@ (800a720 <_printf_i+0x238>)
 800a5d4:	6033      	str	r3, [r6, #0]
 800a5d6:	bf14      	ite	ne
 800a5d8:	230a      	movne	r3, #10
 800a5da:	2308      	moveq	r3, #8
 800a5dc:	2100      	movs	r1, #0
 800a5de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a5e2:	6866      	ldr	r6, [r4, #4]
 800a5e4:	60a6      	str	r6, [r4, #8]
 800a5e6:	2e00      	cmp	r6, #0
 800a5e8:	bfa2      	ittt	ge
 800a5ea:	6821      	ldrge	r1, [r4, #0]
 800a5ec:	f021 0104 	bicge.w	r1, r1, #4
 800a5f0:	6021      	strge	r1, [r4, #0]
 800a5f2:	b90d      	cbnz	r5, 800a5f8 <_printf_i+0x110>
 800a5f4:	2e00      	cmp	r6, #0
 800a5f6:	d04b      	beq.n	800a690 <_printf_i+0x1a8>
 800a5f8:	4616      	mov	r6, r2
 800a5fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5fe:	fb03 5711 	mls	r7, r3, r1, r5
 800a602:	5dc7      	ldrb	r7, [r0, r7]
 800a604:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a608:	462f      	mov	r7, r5
 800a60a:	42bb      	cmp	r3, r7
 800a60c:	460d      	mov	r5, r1
 800a60e:	d9f4      	bls.n	800a5fa <_printf_i+0x112>
 800a610:	2b08      	cmp	r3, #8
 800a612:	d10b      	bne.n	800a62c <_printf_i+0x144>
 800a614:	6823      	ldr	r3, [r4, #0]
 800a616:	07df      	lsls	r7, r3, #31
 800a618:	d508      	bpl.n	800a62c <_printf_i+0x144>
 800a61a:	6923      	ldr	r3, [r4, #16]
 800a61c:	6861      	ldr	r1, [r4, #4]
 800a61e:	4299      	cmp	r1, r3
 800a620:	bfde      	ittt	le
 800a622:	2330      	movle	r3, #48	@ 0x30
 800a624:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a628:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a62c:	1b92      	subs	r2, r2, r6
 800a62e:	6122      	str	r2, [r4, #16]
 800a630:	f8cd a000 	str.w	sl, [sp]
 800a634:	464b      	mov	r3, r9
 800a636:	aa03      	add	r2, sp, #12
 800a638:	4621      	mov	r1, r4
 800a63a:	4640      	mov	r0, r8
 800a63c:	f7ff fee6 	bl	800a40c <_printf_common>
 800a640:	3001      	adds	r0, #1
 800a642:	d14a      	bne.n	800a6da <_printf_i+0x1f2>
 800a644:	f04f 30ff 	mov.w	r0, #4294967295
 800a648:	b004      	add	sp, #16
 800a64a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a64e:	6823      	ldr	r3, [r4, #0]
 800a650:	f043 0320 	orr.w	r3, r3, #32
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	4833      	ldr	r0, [pc, #204]	@ (800a724 <_printf_i+0x23c>)
 800a658:	2778      	movs	r7, #120	@ 0x78
 800a65a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a65e:	6823      	ldr	r3, [r4, #0]
 800a660:	6831      	ldr	r1, [r6, #0]
 800a662:	061f      	lsls	r7, r3, #24
 800a664:	f851 5b04 	ldr.w	r5, [r1], #4
 800a668:	d402      	bmi.n	800a670 <_printf_i+0x188>
 800a66a:	065f      	lsls	r7, r3, #25
 800a66c:	bf48      	it	mi
 800a66e:	b2ad      	uxthmi	r5, r5
 800a670:	6031      	str	r1, [r6, #0]
 800a672:	07d9      	lsls	r1, r3, #31
 800a674:	bf44      	itt	mi
 800a676:	f043 0320 	orrmi.w	r3, r3, #32
 800a67a:	6023      	strmi	r3, [r4, #0]
 800a67c:	b11d      	cbz	r5, 800a686 <_printf_i+0x19e>
 800a67e:	2310      	movs	r3, #16
 800a680:	e7ac      	b.n	800a5dc <_printf_i+0xf4>
 800a682:	4827      	ldr	r0, [pc, #156]	@ (800a720 <_printf_i+0x238>)
 800a684:	e7e9      	b.n	800a65a <_printf_i+0x172>
 800a686:	6823      	ldr	r3, [r4, #0]
 800a688:	f023 0320 	bic.w	r3, r3, #32
 800a68c:	6023      	str	r3, [r4, #0]
 800a68e:	e7f6      	b.n	800a67e <_printf_i+0x196>
 800a690:	4616      	mov	r6, r2
 800a692:	e7bd      	b.n	800a610 <_printf_i+0x128>
 800a694:	6833      	ldr	r3, [r6, #0]
 800a696:	6825      	ldr	r5, [r4, #0]
 800a698:	6961      	ldr	r1, [r4, #20]
 800a69a:	1d18      	adds	r0, r3, #4
 800a69c:	6030      	str	r0, [r6, #0]
 800a69e:	062e      	lsls	r6, r5, #24
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	d501      	bpl.n	800a6a8 <_printf_i+0x1c0>
 800a6a4:	6019      	str	r1, [r3, #0]
 800a6a6:	e002      	b.n	800a6ae <_printf_i+0x1c6>
 800a6a8:	0668      	lsls	r0, r5, #25
 800a6aa:	d5fb      	bpl.n	800a6a4 <_printf_i+0x1bc>
 800a6ac:	8019      	strh	r1, [r3, #0]
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	6123      	str	r3, [r4, #16]
 800a6b2:	4616      	mov	r6, r2
 800a6b4:	e7bc      	b.n	800a630 <_printf_i+0x148>
 800a6b6:	6833      	ldr	r3, [r6, #0]
 800a6b8:	1d1a      	adds	r2, r3, #4
 800a6ba:	6032      	str	r2, [r6, #0]
 800a6bc:	681e      	ldr	r6, [r3, #0]
 800a6be:	6862      	ldr	r2, [r4, #4]
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	f7f5 fd84 	bl	80001d0 <memchr>
 800a6c8:	b108      	cbz	r0, 800a6ce <_printf_i+0x1e6>
 800a6ca:	1b80      	subs	r0, r0, r6
 800a6cc:	6060      	str	r0, [r4, #4]
 800a6ce:	6863      	ldr	r3, [r4, #4]
 800a6d0:	6123      	str	r3, [r4, #16]
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6d8:	e7aa      	b.n	800a630 <_printf_i+0x148>
 800a6da:	6923      	ldr	r3, [r4, #16]
 800a6dc:	4632      	mov	r2, r6
 800a6de:	4649      	mov	r1, r9
 800a6e0:	4640      	mov	r0, r8
 800a6e2:	47d0      	blx	sl
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	d0ad      	beq.n	800a644 <_printf_i+0x15c>
 800a6e8:	6823      	ldr	r3, [r4, #0]
 800a6ea:	079b      	lsls	r3, r3, #30
 800a6ec:	d413      	bmi.n	800a716 <_printf_i+0x22e>
 800a6ee:	68e0      	ldr	r0, [r4, #12]
 800a6f0:	9b03      	ldr	r3, [sp, #12]
 800a6f2:	4298      	cmp	r0, r3
 800a6f4:	bfb8      	it	lt
 800a6f6:	4618      	movlt	r0, r3
 800a6f8:	e7a6      	b.n	800a648 <_printf_i+0x160>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	4632      	mov	r2, r6
 800a6fe:	4649      	mov	r1, r9
 800a700:	4640      	mov	r0, r8
 800a702:	47d0      	blx	sl
 800a704:	3001      	adds	r0, #1
 800a706:	d09d      	beq.n	800a644 <_printf_i+0x15c>
 800a708:	3501      	adds	r5, #1
 800a70a:	68e3      	ldr	r3, [r4, #12]
 800a70c:	9903      	ldr	r1, [sp, #12]
 800a70e:	1a5b      	subs	r3, r3, r1
 800a710:	42ab      	cmp	r3, r5
 800a712:	dcf2      	bgt.n	800a6fa <_printf_i+0x212>
 800a714:	e7eb      	b.n	800a6ee <_printf_i+0x206>
 800a716:	2500      	movs	r5, #0
 800a718:	f104 0619 	add.w	r6, r4, #25
 800a71c:	e7f5      	b.n	800a70a <_printf_i+0x222>
 800a71e:	bf00      	nop
 800a720:	0800d2ee 	.word	0x0800d2ee
 800a724:	0800d2ff 	.word	0x0800d2ff

0800a728 <std>:
 800a728:	2300      	movs	r3, #0
 800a72a:	b510      	push	{r4, lr}
 800a72c:	4604      	mov	r4, r0
 800a72e:	e9c0 3300 	strd	r3, r3, [r0]
 800a732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a736:	6083      	str	r3, [r0, #8]
 800a738:	8181      	strh	r1, [r0, #12]
 800a73a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a73c:	81c2      	strh	r2, [r0, #14]
 800a73e:	6183      	str	r3, [r0, #24]
 800a740:	4619      	mov	r1, r3
 800a742:	2208      	movs	r2, #8
 800a744:	305c      	adds	r0, #92	@ 0x5c
 800a746:	f000 f9f9 	bl	800ab3c <memset>
 800a74a:	4b0d      	ldr	r3, [pc, #52]	@ (800a780 <std+0x58>)
 800a74c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a74e:	4b0d      	ldr	r3, [pc, #52]	@ (800a784 <std+0x5c>)
 800a750:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a752:	4b0d      	ldr	r3, [pc, #52]	@ (800a788 <std+0x60>)
 800a754:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a756:	4b0d      	ldr	r3, [pc, #52]	@ (800a78c <std+0x64>)
 800a758:	6323      	str	r3, [r4, #48]	@ 0x30
 800a75a:	4b0d      	ldr	r3, [pc, #52]	@ (800a790 <std+0x68>)
 800a75c:	6224      	str	r4, [r4, #32]
 800a75e:	429c      	cmp	r4, r3
 800a760:	d006      	beq.n	800a770 <std+0x48>
 800a762:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a766:	4294      	cmp	r4, r2
 800a768:	d002      	beq.n	800a770 <std+0x48>
 800a76a:	33d0      	adds	r3, #208	@ 0xd0
 800a76c:	429c      	cmp	r4, r3
 800a76e:	d105      	bne.n	800a77c <std+0x54>
 800a770:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a778:	f000 bab2 	b.w	800ace0 <__retarget_lock_init_recursive>
 800a77c:	bd10      	pop	{r4, pc}
 800a77e:	bf00      	nop
 800a780:	0800a98d 	.word	0x0800a98d
 800a784:	0800a9af 	.word	0x0800a9af
 800a788:	0800a9e7 	.word	0x0800a9e7
 800a78c:	0800aa0b 	.word	0x0800aa0b
 800a790:	20002304 	.word	0x20002304

0800a794 <stdio_exit_handler>:
 800a794:	4a02      	ldr	r2, [pc, #8]	@ (800a7a0 <stdio_exit_handler+0xc>)
 800a796:	4903      	ldr	r1, [pc, #12]	@ (800a7a4 <stdio_exit_handler+0x10>)
 800a798:	4803      	ldr	r0, [pc, #12]	@ (800a7a8 <stdio_exit_handler+0x14>)
 800a79a:	f000 b869 	b.w	800a870 <_fwalk_sglue>
 800a79e:	bf00      	nop
 800a7a0:	20000010 	.word	0x20000010
 800a7a4:	0800c631 	.word	0x0800c631
 800a7a8:	20000020 	.word	0x20000020

0800a7ac <cleanup_stdio>:
 800a7ac:	6841      	ldr	r1, [r0, #4]
 800a7ae:	4b0c      	ldr	r3, [pc, #48]	@ (800a7e0 <cleanup_stdio+0x34>)
 800a7b0:	4299      	cmp	r1, r3
 800a7b2:	b510      	push	{r4, lr}
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	d001      	beq.n	800a7bc <cleanup_stdio+0x10>
 800a7b8:	f001 ff3a 	bl	800c630 <_fflush_r>
 800a7bc:	68a1      	ldr	r1, [r4, #8]
 800a7be:	4b09      	ldr	r3, [pc, #36]	@ (800a7e4 <cleanup_stdio+0x38>)
 800a7c0:	4299      	cmp	r1, r3
 800a7c2:	d002      	beq.n	800a7ca <cleanup_stdio+0x1e>
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f001 ff33 	bl	800c630 <_fflush_r>
 800a7ca:	68e1      	ldr	r1, [r4, #12]
 800a7cc:	4b06      	ldr	r3, [pc, #24]	@ (800a7e8 <cleanup_stdio+0x3c>)
 800a7ce:	4299      	cmp	r1, r3
 800a7d0:	d004      	beq.n	800a7dc <cleanup_stdio+0x30>
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7d8:	f001 bf2a 	b.w	800c630 <_fflush_r>
 800a7dc:	bd10      	pop	{r4, pc}
 800a7de:	bf00      	nop
 800a7e0:	20002304 	.word	0x20002304
 800a7e4:	2000236c 	.word	0x2000236c
 800a7e8:	200023d4 	.word	0x200023d4

0800a7ec <global_stdio_init.part.0>:
 800a7ec:	b510      	push	{r4, lr}
 800a7ee:	4b0b      	ldr	r3, [pc, #44]	@ (800a81c <global_stdio_init.part.0+0x30>)
 800a7f0:	4c0b      	ldr	r4, [pc, #44]	@ (800a820 <global_stdio_init.part.0+0x34>)
 800a7f2:	4a0c      	ldr	r2, [pc, #48]	@ (800a824 <global_stdio_init.part.0+0x38>)
 800a7f4:	601a      	str	r2, [r3, #0]
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	2104      	movs	r1, #4
 800a7fc:	f7ff ff94 	bl	800a728 <std>
 800a800:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a804:	2201      	movs	r2, #1
 800a806:	2109      	movs	r1, #9
 800a808:	f7ff ff8e 	bl	800a728 <std>
 800a80c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a810:	2202      	movs	r2, #2
 800a812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a816:	2112      	movs	r1, #18
 800a818:	f7ff bf86 	b.w	800a728 <std>
 800a81c:	2000243c 	.word	0x2000243c
 800a820:	20002304 	.word	0x20002304
 800a824:	0800a795 	.word	0x0800a795

0800a828 <__sfp_lock_acquire>:
 800a828:	4801      	ldr	r0, [pc, #4]	@ (800a830 <__sfp_lock_acquire+0x8>)
 800a82a:	f000 ba5a 	b.w	800ace2 <__retarget_lock_acquire_recursive>
 800a82e:	bf00      	nop
 800a830:	20002445 	.word	0x20002445

0800a834 <__sfp_lock_release>:
 800a834:	4801      	ldr	r0, [pc, #4]	@ (800a83c <__sfp_lock_release+0x8>)
 800a836:	f000 ba55 	b.w	800ace4 <__retarget_lock_release_recursive>
 800a83a:	bf00      	nop
 800a83c:	20002445 	.word	0x20002445

0800a840 <__sinit>:
 800a840:	b510      	push	{r4, lr}
 800a842:	4604      	mov	r4, r0
 800a844:	f7ff fff0 	bl	800a828 <__sfp_lock_acquire>
 800a848:	6a23      	ldr	r3, [r4, #32]
 800a84a:	b11b      	cbz	r3, 800a854 <__sinit+0x14>
 800a84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a850:	f7ff bff0 	b.w	800a834 <__sfp_lock_release>
 800a854:	4b04      	ldr	r3, [pc, #16]	@ (800a868 <__sinit+0x28>)
 800a856:	6223      	str	r3, [r4, #32]
 800a858:	4b04      	ldr	r3, [pc, #16]	@ (800a86c <__sinit+0x2c>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1f5      	bne.n	800a84c <__sinit+0xc>
 800a860:	f7ff ffc4 	bl	800a7ec <global_stdio_init.part.0>
 800a864:	e7f2      	b.n	800a84c <__sinit+0xc>
 800a866:	bf00      	nop
 800a868:	0800a7ad 	.word	0x0800a7ad
 800a86c:	2000243c 	.word	0x2000243c

0800a870 <_fwalk_sglue>:
 800a870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a874:	4607      	mov	r7, r0
 800a876:	4688      	mov	r8, r1
 800a878:	4614      	mov	r4, r2
 800a87a:	2600      	movs	r6, #0
 800a87c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a880:	f1b9 0901 	subs.w	r9, r9, #1
 800a884:	d505      	bpl.n	800a892 <_fwalk_sglue+0x22>
 800a886:	6824      	ldr	r4, [r4, #0]
 800a888:	2c00      	cmp	r4, #0
 800a88a:	d1f7      	bne.n	800a87c <_fwalk_sglue+0xc>
 800a88c:	4630      	mov	r0, r6
 800a88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a892:	89ab      	ldrh	r3, [r5, #12]
 800a894:	2b01      	cmp	r3, #1
 800a896:	d907      	bls.n	800a8a8 <_fwalk_sglue+0x38>
 800a898:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a89c:	3301      	adds	r3, #1
 800a89e:	d003      	beq.n	800a8a8 <_fwalk_sglue+0x38>
 800a8a0:	4629      	mov	r1, r5
 800a8a2:	4638      	mov	r0, r7
 800a8a4:	47c0      	blx	r8
 800a8a6:	4306      	orrs	r6, r0
 800a8a8:	3568      	adds	r5, #104	@ 0x68
 800a8aa:	e7e9      	b.n	800a880 <_fwalk_sglue+0x10>

0800a8ac <iprintf>:
 800a8ac:	b40f      	push	{r0, r1, r2, r3}
 800a8ae:	b507      	push	{r0, r1, r2, lr}
 800a8b0:	4906      	ldr	r1, [pc, #24]	@ (800a8cc <iprintf+0x20>)
 800a8b2:	ab04      	add	r3, sp, #16
 800a8b4:	6808      	ldr	r0, [r1, #0]
 800a8b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8ba:	6881      	ldr	r1, [r0, #8]
 800a8bc:	9301      	str	r3, [sp, #4]
 800a8be:	f001 fd1b 	bl	800c2f8 <_vfiprintf_r>
 800a8c2:	b003      	add	sp, #12
 800a8c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8c8:	b004      	add	sp, #16
 800a8ca:	4770      	bx	lr
 800a8cc:	2000001c 	.word	0x2000001c

0800a8d0 <_puts_r>:
 800a8d0:	6a03      	ldr	r3, [r0, #32]
 800a8d2:	b570      	push	{r4, r5, r6, lr}
 800a8d4:	6884      	ldr	r4, [r0, #8]
 800a8d6:	4605      	mov	r5, r0
 800a8d8:	460e      	mov	r6, r1
 800a8da:	b90b      	cbnz	r3, 800a8e0 <_puts_r+0x10>
 800a8dc:	f7ff ffb0 	bl	800a840 <__sinit>
 800a8e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a8e2:	07db      	lsls	r3, r3, #31
 800a8e4:	d405      	bmi.n	800a8f2 <_puts_r+0x22>
 800a8e6:	89a3      	ldrh	r3, [r4, #12]
 800a8e8:	0598      	lsls	r0, r3, #22
 800a8ea:	d402      	bmi.n	800a8f2 <_puts_r+0x22>
 800a8ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8ee:	f000 f9f8 	bl	800ace2 <__retarget_lock_acquire_recursive>
 800a8f2:	89a3      	ldrh	r3, [r4, #12]
 800a8f4:	0719      	lsls	r1, r3, #28
 800a8f6:	d502      	bpl.n	800a8fe <_puts_r+0x2e>
 800a8f8:	6923      	ldr	r3, [r4, #16]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d135      	bne.n	800a96a <_puts_r+0x9a>
 800a8fe:	4621      	mov	r1, r4
 800a900:	4628      	mov	r0, r5
 800a902:	f000 f8c5 	bl	800aa90 <__swsetup_r>
 800a906:	b380      	cbz	r0, 800a96a <_puts_r+0x9a>
 800a908:	f04f 35ff 	mov.w	r5, #4294967295
 800a90c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a90e:	07da      	lsls	r2, r3, #31
 800a910:	d405      	bmi.n	800a91e <_puts_r+0x4e>
 800a912:	89a3      	ldrh	r3, [r4, #12]
 800a914:	059b      	lsls	r3, r3, #22
 800a916:	d402      	bmi.n	800a91e <_puts_r+0x4e>
 800a918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a91a:	f000 f9e3 	bl	800ace4 <__retarget_lock_release_recursive>
 800a91e:	4628      	mov	r0, r5
 800a920:	bd70      	pop	{r4, r5, r6, pc}
 800a922:	2b00      	cmp	r3, #0
 800a924:	da04      	bge.n	800a930 <_puts_r+0x60>
 800a926:	69a2      	ldr	r2, [r4, #24]
 800a928:	429a      	cmp	r2, r3
 800a92a:	dc17      	bgt.n	800a95c <_puts_r+0x8c>
 800a92c:	290a      	cmp	r1, #10
 800a92e:	d015      	beq.n	800a95c <_puts_r+0x8c>
 800a930:	6823      	ldr	r3, [r4, #0]
 800a932:	1c5a      	adds	r2, r3, #1
 800a934:	6022      	str	r2, [r4, #0]
 800a936:	7019      	strb	r1, [r3, #0]
 800a938:	68a3      	ldr	r3, [r4, #8]
 800a93a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a93e:	3b01      	subs	r3, #1
 800a940:	60a3      	str	r3, [r4, #8]
 800a942:	2900      	cmp	r1, #0
 800a944:	d1ed      	bne.n	800a922 <_puts_r+0x52>
 800a946:	2b00      	cmp	r3, #0
 800a948:	da11      	bge.n	800a96e <_puts_r+0x9e>
 800a94a:	4622      	mov	r2, r4
 800a94c:	210a      	movs	r1, #10
 800a94e:	4628      	mov	r0, r5
 800a950:	f000 f85f 	bl	800aa12 <__swbuf_r>
 800a954:	3001      	adds	r0, #1
 800a956:	d0d7      	beq.n	800a908 <_puts_r+0x38>
 800a958:	250a      	movs	r5, #10
 800a95a:	e7d7      	b.n	800a90c <_puts_r+0x3c>
 800a95c:	4622      	mov	r2, r4
 800a95e:	4628      	mov	r0, r5
 800a960:	f000 f857 	bl	800aa12 <__swbuf_r>
 800a964:	3001      	adds	r0, #1
 800a966:	d1e7      	bne.n	800a938 <_puts_r+0x68>
 800a968:	e7ce      	b.n	800a908 <_puts_r+0x38>
 800a96a:	3e01      	subs	r6, #1
 800a96c:	e7e4      	b.n	800a938 <_puts_r+0x68>
 800a96e:	6823      	ldr	r3, [r4, #0]
 800a970:	1c5a      	adds	r2, r3, #1
 800a972:	6022      	str	r2, [r4, #0]
 800a974:	220a      	movs	r2, #10
 800a976:	701a      	strb	r2, [r3, #0]
 800a978:	e7ee      	b.n	800a958 <_puts_r+0x88>
	...

0800a97c <puts>:
 800a97c:	4b02      	ldr	r3, [pc, #8]	@ (800a988 <puts+0xc>)
 800a97e:	4601      	mov	r1, r0
 800a980:	6818      	ldr	r0, [r3, #0]
 800a982:	f7ff bfa5 	b.w	800a8d0 <_puts_r>
 800a986:	bf00      	nop
 800a988:	2000001c 	.word	0x2000001c

0800a98c <__sread>:
 800a98c:	b510      	push	{r4, lr}
 800a98e:	460c      	mov	r4, r1
 800a990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a994:	f000 f956 	bl	800ac44 <_read_r>
 800a998:	2800      	cmp	r0, #0
 800a99a:	bfab      	itete	ge
 800a99c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a99e:	89a3      	ldrhlt	r3, [r4, #12]
 800a9a0:	181b      	addge	r3, r3, r0
 800a9a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a9a6:	bfac      	ite	ge
 800a9a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a9aa:	81a3      	strhlt	r3, [r4, #12]
 800a9ac:	bd10      	pop	{r4, pc}

0800a9ae <__swrite>:
 800a9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b2:	461f      	mov	r7, r3
 800a9b4:	898b      	ldrh	r3, [r1, #12]
 800a9b6:	05db      	lsls	r3, r3, #23
 800a9b8:	4605      	mov	r5, r0
 800a9ba:	460c      	mov	r4, r1
 800a9bc:	4616      	mov	r6, r2
 800a9be:	d505      	bpl.n	800a9cc <__swrite+0x1e>
 800a9c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f000 f92a 	bl	800ac20 <_lseek_r>
 800a9cc:	89a3      	ldrh	r3, [r4, #12]
 800a9ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a9d6:	81a3      	strh	r3, [r4, #12]
 800a9d8:	4632      	mov	r2, r6
 800a9da:	463b      	mov	r3, r7
 800a9dc:	4628      	mov	r0, r5
 800a9de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e2:	f000 b941 	b.w	800ac68 <_write_r>

0800a9e6 <__sseek>:
 800a9e6:	b510      	push	{r4, lr}
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ee:	f000 f917 	bl	800ac20 <_lseek_r>
 800a9f2:	1c43      	adds	r3, r0, #1
 800a9f4:	89a3      	ldrh	r3, [r4, #12]
 800a9f6:	bf15      	itete	ne
 800a9f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a9fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a9fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aa02:	81a3      	strheq	r3, [r4, #12]
 800aa04:	bf18      	it	ne
 800aa06:	81a3      	strhne	r3, [r4, #12]
 800aa08:	bd10      	pop	{r4, pc}

0800aa0a <__sclose>:
 800aa0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa0e:	f000 b8a1 	b.w	800ab54 <_close_r>

0800aa12 <__swbuf_r>:
 800aa12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa14:	460e      	mov	r6, r1
 800aa16:	4614      	mov	r4, r2
 800aa18:	4605      	mov	r5, r0
 800aa1a:	b118      	cbz	r0, 800aa24 <__swbuf_r+0x12>
 800aa1c:	6a03      	ldr	r3, [r0, #32]
 800aa1e:	b90b      	cbnz	r3, 800aa24 <__swbuf_r+0x12>
 800aa20:	f7ff ff0e 	bl	800a840 <__sinit>
 800aa24:	69a3      	ldr	r3, [r4, #24]
 800aa26:	60a3      	str	r3, [r4, #8]
 800aa28:	89a3      	ldrh	r3, [r4, #12]
 800aa2a:	071a      	lsls	r2, r3, #28
 800aa2c:	d501      	bpl.n	800aa32 <__swbuf_r+0x20>
 800aa2e:	6923      	ldr	r3, [r4, #16]
 800aa30:	b943      	cbnz	r3, 800aa44 <__swbuf_r+0x32>
 800aa32:	4621      	mov	r1, r4
 800aa34:	4628      	mov	r0, r5
 800aa36:	f000 f82b 	bl	800aa90 <__swsetup_r>
 800aa3a:	b118      	cbz	r0, 800aa44 <__swbuf_r+0x32>
 800aa3c:	f04f 37ff 	mov.w	r7, #4294967295
 800aa40:	4638      	mov	r0, r7
 800aa42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa44:	6823      	ldr	r3, [r4, #0]
 800aa46:	6922      	ldr	r2, [r4, #16]
 800aa48:	1a98      	subs	r0, r3, r2
 800aa4a:	6963      	ldr	r3, [r4, #20]
 800aa4c:	b2f6      	uxtb	r6, r6
 800aa4e:	4283      	cmp	r3, r0
 800aa50:	4637      	mov	r7, r6
 800aa52:	dc05      	bgt.n	800aa60 <__swbuf_r+0x4e>
 800aa54:	4621      	mov	r1, r4
 800aa56:	4628      	mov	r0, r5
 800aa58:	f001 fdea 	bl	800c630 <_fflush_r>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	d1ed      	bne.n	800aa3c <__swbuf_r+0x2a>
 800aa60:	68a3      	ldr	r3, [r4, #8]
 800aa62:	3b01      	subs	r3, #1
 800aa64:	60a3      	str	r3, [r4, #8]
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	1c5a      	adds	r2, r3, #1
 800aa6a:	6022      	str	r2, [r4, #0]
 800aa6c:	701e      	strb	r6, [r3, #0]
 800aa6e:	6962      	ldr	r2, [r4, #20]
 800aa70:	1c43      	adds	r3, r0, #1
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d004      	beq.n	800aa80 <__swbuf_r+0x6e>
 800aa76:	89a3      	ldrh	r3, [r4, #12]
 800aa78:	07db      	lsls	r3, r3, #31
 800aa7a:	d5e1      	bpl.n	800aa40 <__swbuf_r+0x2e>
 800aa7c:	2e0a      	cmp	r6, #10
 800aa7e:	d1df      	bne.n	800aa40 <__swbuf_r+0x2e>
 800aa80:	4621      	mov	r1, r4
 800aa82:	4628      	mov	r0, r5
 800aa84:	f001 fdd4 	bl	800c630 <_fflush_r>
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d0d9      	beq.n	800aa40 <__swbuf_r+0x2e>
 800aa8c:	e7d6      	b.n	800aa3c <__swbuf_r+0x2a>
	...

0800aa90 <__swsetup_r>:
 800aa90:	b538      	push	{r3, r4, r5, lr}
 800aa92:	4b29      	ldr	r3, [pc, #164]	@ (800ab38 <__swsetup_r+0xa8>)
 800aa94:	4605      	mov	r5, r0
 800aa96:	6818      	ldr	r0, [r3, #0]
 800aa98:	460c      	mov	r4, r1
 800aa9a:	b118      	cbz	r0, 800aaa4 <__swsetup_r+0x14>
 800aa9c:	6a03      	ldr	r3, [r0, #32]
 800aa9e:	b90b      	cbnz	r3, 800aaa4 <__swsetup_r+0x14>
 800aaa0:	f7ff fece 	bl	800a840 <__sinit>
 800aaa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaa8:	0719      	lsls	r1, r3, #28
 800aaaa:	d422      	bmi.n	800aaf2 <__swsetup_r+0x62>
 800aaac:	06da      	lsls	r2, r3, #27
 800aaae:	d407      	bmi.n	800aac0 <__swsetup_r+0x30>
 800aab0:	2209      	movs	r2, #9
 800aab2:	602a      	str	r2, [r5, #0]
 800aab4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aab8:	81a3      	strh	r3, [r4, #12]
 800aaba:	f04f 30ff 	mov.w	r0, #4294967295
 800aabe:	e033      	b.n	800ab28 <__swsetup_r+0x98>
 800aac0:	0758      	lsls	r0, r3, #29
 800aac2:	d512      	bpl.n	800aaea <__swsetup_r+0x5a>
 800aac4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aac6:	b141      	cbz	r1, 800aada <__swsetup_r+0x4a>
 800aac8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aacc:	4299      	cmp	r1, r3
 800aace:	d002      	beq.n	800aad6 <__swsetup_r+0x46>
 800aad0:	4628      	mov	r0, r5
 800aad2:	f000 ff65 	bl	800b9a0 <_free_r>
 800aad6:	2300      	movs	r3, #0
 800aad8:	6363      	str	r3, [r4, #52]	@ 0x34
 800aada:	89a3      	ldrh	r3, [r4, #12]
 800aadc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aae0:	81a3      	strh	r3, [r4, #12]
 800aae2:	2300      	movs	r3, #0
 800aae4:	6063      	str	r3, [r4, #4]
 800aae6:	6923      	ldr	r3, [r4, #16]
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	89a3      	ldrh	r3, [r4, #12]
 800aaec:	f043 0308 	orr.w	r3, r3, #8
 800aaf0:	81a3      	strh	r3, [r4, #12]
 800aaf2:	6923      	ldr	r3, [r4, #16]
 800aaf4:	b94b      	cbnz	r3, 800ab0a <__swsetup_r+0x7a>
 800aaf6:	89a3      	ldrh	r3, [r4, #12]
 800aaf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aafc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab00:	d003      	beq.n	800ab0a <__swsetup_r+0x7a>
 800ab02:	4621      	mov	r1, r4
 800ab04:	4628      	mov	r0, r5
 800ab06:	f001 fde1 	bl	800c6cc <__smakebuf_r>
 800ab0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab0e:	f013 0201 	ands.w	r2, r3, #1
 800ab12:	d00a      	beq.n	800ab2a <__swsetup_r+0x9a>
 800ab14:	2200      	movs	r2, #0
 800ab16:	60a2      	str	r2, [r4, #8]
 800ab18:	6962      	ldr	r2, [r4, #20]
 800ab1a:	4252      	negs	r2, r2
 800ab1c:	61a2      	str	r2, [r4, #24]
 800ab1e:	6922      	ldr	r2, [r4, #16]
 800ab20:	b942      	cbnz	r2, 800ab34 <__swsetup_r+0xa4>
 800ab22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab26:	d1c5      	bne.n	800aab4 <__swsetup_r+0x24>
 800ab28:	bd38      	pop	{r3, r4, r5, pc}
 800ab2a:	0799      	lsls	r1, r3, #30
 800ab2c:	bf58      	it	pl
 800ab2e:	6962      	ldrpl	r2, [r4, #20]
 800ab30:	60a2      	str	r2, [r4, #8]
 800ab32:	e7f4      	b.n	800ab1e <__swsetup_r+0x8e>
 800ab34:	2000      	movs	r0, #0
 800ab36:	e7f7      	b.n	800ab28 <__swsetup_r+0x98>
 800ab38:	2000001c 	.word	0x2000001c

0800ab3c <memset>:
 800ab3c:	4402      	add	r2, r0
 800ab3e:	4603      	mov	r3, r0
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d100      	bne.n	800ab46 <memset+0xa>
 800ab44:	4770      	bx	lr
 800ab46:	f803 1b01 	strb.w	r1, [r3], #1
 800ab4a:	e7f9      	b.n	800ab40 <memset+0x4>

0800ab4c <_localeconv_r>:
 800ab4c:	4800      	ldr	r0, [pc, #0]	@ (800ab50 <_localeconv_r+0x4>)
 800ab4e:	4770      	bx	lr
 800ab50:	2000015c 	.word	0x2000015c

0800ab54 <_close_r>:
 800ab54:	b538      	push	{r3, r4, r5, lr}
 800ab56:	4d06      	ldr	r5, [pc, #24]	@ (800ab70 <_close_r+0x1c>)
 800ab58:	2300      	movs	r3, #0
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	4608      	mov	r0, r1
 800ab5e:	602b      	str	r3, [r5, #0]
 800ab60:	f7f7 fb1e 	bl	80021a0 <_close>
 800ab64:	1c43      	adds	r3, r0, #1
 800ab66:	d102      	bne.n	800ab6e <_close_r+0x1a>
 800ab68:	682b      	ldr	r3, [r5, #0]
 800ab6a:	b103      	cbz	r3, 800ab6e <_close_r+0x1a>
 800ab6c:	6023      	str	r3, [r4, #0]
 800ab6e:	bd38      	pop	{r3, r4, r5, pc}
 800ab70:	20002440 	.word	0x20002440

0800ab74 <_reclaim_reent>:
 800ab74:	4b29      	ldr	r3, [pc, #164]	@ (800ac1c <_reclaim_reent+0xa8>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4283      	cmp	r3, r0
 800ab7a:	b570      	push	{r4, r5, r6, lr}
 800ab7c:	4604      	mov	r4, r0
 800ab7e:	d04b      	beq.n	800ac18 <_reclaim_reent+0xa4>
 800ab80:	69c3      	ldr	r3, [r0, #28]
 800ab82:	b1ab      	cbz	r3, 800abb0 <_reclaim_reent+0x3c>
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	b16b      	cbz	r3, 800aba4 <_reclaim_reent+0x30>
 800ab88:	2500      	movs	r5, #0
 800ab8a:	69e3      	ldr	r3, [r4, #28]
 800ab8c:	68db      	ldr	r3, [r3, #12]
 800ab8e:	5959      	ldr	r1, [r3, r5]
 800ab90:	2900      	cmp	r1, #0
 800ab92:	d13b      	bne.n	800ac0c <_reclaim_reent+0x98>
 800ab94:	3504      	adds	r5, #4
 800ab96:	2d80      	cmp	r5, #128	@ 0x80
 800ab98:	d1f7      	bne.n	800ab8a <_reclaim_reent+0x16>
 800ab9a:	69e3      	ldr	r3, [r4, #28]
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	68d9      	ldr	r1, [r3, #12]
 800aba0:	f000 fefe 	bl	800b9a0 <_free_r>
 800aba4:	69e3      	ldr	r3, [r4, #28]
 800aba6:	6819      	ldr	r1, [r3, #0]
 800aba8:	b111      	cbz	r1, 800abb0 <_reclaim_reent+0x3c>
 800abaa:	4620      	mov	r0, r4
 800abac:	f000 fef8 	bl	800b9a0 <_free_r>
 800abb0:	6961      	ldr	r1, [r4, #20]
 800abb2:	b111      	cbz	r1, 800abba <_reclaim_reent+0x46>
 800abb4:	4620      	mov	r0, r4
 800abb6:	f000 fef3 	bl	800b9a0 <_free_r>
 800abba:	69e1      	ldr	r1, [r4, #28]
 800abbc:	b111      	cbz	r1, 800abc4 <_reclaim_reent+0x50>
 800abbe:	4620      	mov	r0, r4
 800abc0:	f000 feee 	bl	800b9a0 <_free_r>
 800abc4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800abc6:	b111      	cbz	r1, 800abce <_reclaim_reent+0x5a>
 800abc8:	4620      	mov	r0, r4
 800abca:	f000 fee9 	bl	800b9a0 <_free_r>
 800abce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abd0:	b111      	cbz	r1, 800abd8 <_reclaim_reent+0x64>
 800abd2:	4620      	mov	r0, r4
 800abd4:	f000 fee4 	bl	800b9a0 <_free_r>
 800abd8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800abda:	b111      	cbz	r1, 800abe2 <_reclaim_reent+0x6e>
 800abdc:	4620      	mov	r0, r4
 800abde:	f000 fedf 	bl	800b9a0 <_free_r>
 800abe2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800abe4:	b111      	cbz	r1, 800abec <_reclaim_reent+0x78>
 800abe6:	4620      	mov	r0, r4
 800abe8:	f000 feda 	bl	800b9a0 <_free_r>
 800abec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800abee:	b111      	cbz	r1, 800abf6 <_reclaim_reent+0x82>
 800abf0:	4620      	mov	r0, r4
 800abf2:	f000 fed5 	bl	800b9a0 <_free_r>
 800abf6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800abf8:	b111      	cbz	r1, 800ac00 <_reclaim_reent+0x8c>
 800abfa:	4620      	mov	r0, r4
 800abfc:	f000 fed0 	bl	800b9a0 <_free_r>
 800ac00:	6a23      	ldr	r3, [r4, #32]
 800ac02:	b14b      	cbz	r3, 800ac18 <_reclaim_reent+0xa4>
 800ac04:	4620      	mov	r0, r4
 800ac06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac0a:	4718      	bx	r3
 800ac0c:	680e      	ldr	r6, [r1, #0]
 800ac0e:	4620      	mov	r0, r4
 800ac10:	f000 fec6 	bl	800b9a0 <_free_r>
 800ac14:	4631      	mov	r1, r6
 800ac16:	e7bb      	b.n	800ab90 <_reclaim_reent+0x1c>
 800ac18:	bd70      	pop	{r4, r5, r6, pc}
 800ac1a:	bf00      	nop
 800ac1c:	2000001c 	.word	0x2000001c

0800ac20 <_lseek_r>:
 800ac20:	b538      	push	{r3, r4, r5, lr}
 800ac22:	4d07      	ldr	r5, [pc, #28]	@ (800ac40 <_lseek_r+0x20>)
 800ac24:	4604      	mov	r4, r0
 800ac26:	4608      	mov	r0, r1
 800ac28:	4611      	mov	r1, r2
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	602a      	str	r2, [r5, #0]
 800ac2e:	461a      	mov	r2, r3
 800ac30:	f7f7 fadd 	bl	80021ee <_lseek>
 800ac34:	1c43      	adds	r3, r0, #1
 800ac36:	d102      	bne.n	800ac3e <_lseek_r+0x1e>
 800ac38:	682b      	ldr	r3, [r5, #0]
 800ac3a:	b103      	cbz	r3, 800ac3e <_lseek_r+0x1e>
 800ac3c:	6023      	str	r3, [r4, #0]
 800ac3e:	bd38      	pop	{r3, r4, r5, pc}
 800ac40:	20002440 	.word	0x20002440

0800ac44 <_read_r>:
 800ac44:	b538      	push	{r3, r4, r5, lr}
 800ac46:	4d07      	ldr	r5, [pc, #28]	@ (800ac64 <_read_r+0x20>)
 800ac48:	4604      	mov	r4, r0
 800ac4a:	4608      	mov	r0, r1
 800ac4c:	4611      	mov	r1, r2
 800ac4e:	2200      	movs	r2, #0
 800ac50:	602a      	str	r2, [r5, #0]
 800ac52:	461a      	mov	r2, r3
 800ac54:	f7f7 fa87 	bl	8002166 <_read>
 800ac58:	1c43      	adds	r3, r0, #1
 800ac5a:	d102      	bne.n	800ac62 <_read_r+0x1e>
 800ac5c:	682b      	ldr	r3, [r5, #0]
 800ac5e:	b103      	cbz	r3, 800ac62 <_read_r+0x1e>
 800ac60:	6023      	str	r3, [r4, #0]
 800ac62:	bd38      	pop	{r3, r4, r5, pc}
 800ac64:	20002440 	.word	0x20002440

0800ac68 <_write_r>:
 800ac68:	b538      	push	{r3, r4, r5, lr}
 800ac6a:	4d07      	ldr	r5, [pc, #28]	@ (800ac88 <_write_r+0x20>)
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	4608      	mov	r0, r1
 800ac70:	4611      	mov	r1, r2
 800ac72:	2200      	movs	r2, #0
 800ac74:	602a      	str	r2, [r5, #0]
 800ac76:	461a      	mov	r2, r3
 800ac78:	f7f6 fc10 	bl	800149c <_write>
 800ac7c:	1c43      	adds	r3, r0, #1
 800ac7e:	d102      	bne.n	800ac86 <_write_r+0x1e>
 800ac80:	682b      	ldr	r3, [r5, #0]
 800ac82:	b103      	cbz	r3, 800ac86 <_write_r+0x1e>
 800ac84:	6023      	str	r3, [r4, #0]
 800ac86:	bd38      	pop	{r3, r4, r5, pc}
 800ac88:	20002440 	.word	0x20002440

0800ac8c <__errno>:
 800ac8c:	4b01      	ldr	r3, [pc, #4]	@ (800ac94 <__errno+0x8>)
 800ac8e:	6818      	ldr	r0, [r3, #0]
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	2000001c 	.word	0x2000001c

0800ac98 <__libc_init_array>:
 800ac98:	b570      	push	{r4, r5, r6, lr}
 800ac9a:	4d0d      	ldr	r5, [pc, #52]	@ (800acd0 <__libc_init_array+0x38>)
 800ac9c:	4c0d      	ldr	r4, [pc, #52]	@ (800acd4 <__libc_init_array+0x3c>)
 800ac9e:	1b64      	subs	r4, r4, r5
 800aca0:	10a4      	asrs	r4, r4, #2
 800aca2:	2600      	movs	r6, #0
 800aca4:	42a6      	cmp	r6, r4
 800aca6:	d109      	bne.n	800acbc <__libc_init_array+0x24>
 800aca8:	4d0b      	ldr	r5, [pc, #44]	@ (800acd8 <__libc_init_array+0x40>)
 800acaa:	4c0c      	ldr	r4, [pc, #48]	@ (800acdc <__libc_init_array+0x44>)
 800acac:	f001 fe2c 	bl	800c908 <_init>
 800acb0:	1b64      	subs	r4, r4, r5
 800acb2:	10a4      	asrs	r4, r4, #2
 800acb4:	2600      	movs	r6, #0
 800acb6:	42a6      	cmp	r6, r4
 800acb8:	d105      	bne.n	800acc6 <__libc_init_array+0x2e>
 800acba:	bd70      	pop	{r4, r5, r6, pc}
 800acbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800acc0:	4798      	blx	r3
 800acc2:	3601      	adds	r6, #1
 800acc4:	e7ee      	b.n	800aca4 <__libc_init_array+0xc>
 800acc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800acca:	4798      	blx	r3
 800accc:	3601      	adds	r6, #1
 800acce:	e7f2      	b.n	800acb6 <__libc_init_array+0x1e>
 800acd0:	0800d658 	.word	0x0800d658
 800acd4:	0800d658 	.word	0x0800d658
 800acd8:	0800d658 	.word	0x0800d658
 800acdc:	0800d65c 	.word	0x0800d65c

0800ace0 <__retarget_lock_init_recursive>:
 800ace0:	4770      	bx	lr

0800ace2 <__retarget_lock_acquire_recursive>:
 800ace2:	4770      	bx	lr

0800ace4 <__retarget_lock_release_recursive>:
 800ace4:	4770      	bx	lr

0800ace6 <memcpy>:
 800ace6:	440a      	add	r2, r1
 800ace8:	4291      	cmp	r1, r2
 800acea:	f100 33ff 	add.w	r3, r0, #4294967295
 800acee:	d100      	bne.n	800acf2 <memcpy+0xc>
 800acf0:	4770      	bx	lr
 800acf2:	b510      	push	{r4, lr}
 800acf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acfc:	4291      	cmp	r1, r2
 800acfe:	d1f9      	bne.n	800acf4 <memcpy+0xe>
 800ad00:	bd10      	pop	{r4, pc}

0800ad02 <quorem>:
 800ad02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad06:	6903      	ldr	r3, [r0, #16]
 800ad08:	690c      	ldr	r4, [r1, #16]
 800ad0a:	42a3      	cmp	r3, r4
 800ad0c:	4607      	mov	r7, r0
 800ad0e:	db7e      	blt.n	800ae0e <quorem+0x10c>
 800ad10:	3c01      	subs	r4, #1
 800ad12:	f101 0814 	add.w	r8, r1, #20
 800ad16:	00a3      	lsls	r3, r4, #2
 800ad18:	f100 0514 	add.w	r5, r0, #20
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad22:	9301      	str	r3, [sp, #4]
 800ad24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad34:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad38:	d32e      	bcc.n	800ad98 <quorem+0x96>
 800ad3a:	f04f 0a00 	mov.w	sl, #0
 800ad3e:	46c4      	mov	ip, r8
 800ad40:	46ae      	mov	lr, r5
 800ad42:	46d3      	mov	fp, sl
 800ad44:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad48:	b298      	uxth	r0, r3
 800ad4a:	fb06 a000 	mla	r0, r6, r0, sl
 800ad4e:	0c02      	lsrs	r2, r0, #16
 800ad50:	0c1b      	lsrs	r3, r3, #16
 800ad52:	fb06 2303 	mla	r3, r6, r3, r2
 800ad56:	f8de 2000 	ldr.w	r2, [lr]
 800ad5a:	b280      	uxth	r0, r0
 800ad5c:	b292      	uxth	r2, r2
 800ad5e:	1a12      	subs	r2, r2, r0
 800ad60:	445a      	add	r2, fp
 800ad62:	f8de 0000 	ldr.w	r0, [lr]
 800ad66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ad70:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ad74:	b292      	uxth	r2, r2
 800ad76:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ad7a:	45e1      	cmp	r9, ip
 800ad7c:	f84e 2b04 	str.w	r2, [lr], #4
 800ad80:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ad84:	d2de      	bcs.n	800ad44 <quorem+0x42>
 800ad86:	9b00      	ldr	r3, [sp, #0]
 800ad88:	58eb      	ldr	r3, [r5, r3]
 800ad8a:	b92b      	cbnz	r3, 800ad98 <quorem+0x96>
 800ad8c:	9b01      	ldr	r3, [sp, #4]
 800ad8e:	3b04      	subs	r3, #4
 800ad90:	429d      	cmp	r5, r3
 800ad92:	461a      	mov	r2, r3
 800ad94:	d32f      	bcc.n	800adf6 <quorem+0xf4>
 800ad96:	613c      	str	r4, [r7, #16]
 800ad98:	4638      	mov	r0, r7
 800ad9a:	f001 f97b 	bl	800c094 <__mcmp>
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	db25      	blt.n	800adee <quorem+0xec>
 800ada2:	4629      	mov	r1, r5
 800ada4:	2000      	movs	r0, #0
 800ada6:	f858 2b04 	ldr.w	r2, [r8], #4
 800adaa:	f8d1 c000 	ldr.w	ip, [r1]
 800adae:	fa1f fe82 	uxth.w	lr, r2
 800adb2:	fa1f f38c 	uxth.w	r3, ip
 800adb6:	eba3 030e 	sub.w	r3, r3, lr
 800adba:	4403      	add	r3, r0
 800adbc:	0c12      	lsrs	r2, r2, #16
 800adbe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800adc2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adcc:	45c1      	cmp	r9, r8
 800adce:	f841 3b04 	str.w	r3, [r1], #4
 800add2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800add6:	d2e6      	bcs.n	800ada6 <quorem+0xa4>
 800add8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800addc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ade0:	b922      	cbnz	r2, 800adec <quorem+0xea>
 800ade2:	3b04      	subs	r3, #4
 800ade4:	429d      	cmp	r5, r3
 800ade6:	461a      	mov	r2, r3
 800ade8:	d30b      	bcc.n	800ae02 <quorem+0x100>
 800adea:	613c      	str	r4, [r7, #16]
 800adec:	3601      	adds	r6, #1
 800adee:	4630      	mov	r0, r6
 800adf0:	b003      	add	sp, #12
 800adf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf6:	6812      	ldr	r2, [r2, #0]
 800adf8:	3b04      	subs	r3, #4
 800adfa:	2a00      	cmp	r2, #0
 800adfc:	d1cb      	bne.n	800ad96 <quorem+0x94>
 800adfe:	3c01      	subs	r4, #1
 800ae00:	e7c6      	b.n	800ad90 <quorem+0x8e>
 800ae02:	6812      	ldr	r2, [r2, #0]
 800ae04:	3b04      	subs	r3, #4
 800ae06:	2a00      	cmp	r2, #0
 800ae08:	d1ef      	bne.n	800adea <quorem+0xe8>
 800ae0a:	3c01      	subs	r4, #1
 800ae0c:	e7ea      	b.n	800ade4 <quorem+0xe2>
 800ae0e:	2000      	movs	r0, #0
 800ae10:	e7ee      	b.n	800adf0 <quorem+0xee>
 800ae12:	0000      	movs	r0, r0
 800ae14:	0000      	movs	r0, r0
	...

0800ae18 <_dtoa_r>:
 800ae18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae1c:	69c7      	ldr	r7, [r0, #28]
 800ae1e:	b099      	sub	sp, #100	@ 0x64
 800ae20:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ae24:	ec55 4b10 	vmov	r4, r5, d0
 800ae28:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ae2a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ae2c:	4683      	mov	fp, r0
 800ae2e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae30:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae32:	b97f      	cbnz	r7, 800ae54 <_dtoa_r+0x3c>
 800ae34:	2010      	movs	r0, #16
 800ae36:	f000 fdfd 	bl	800ba34 <malloc>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	f8cb 001c 	str.w	r0, [fp, #28]
 800ae40:	b920      	cbnz	r0, 800ae4c <_dtoa_r+0x34>
 800ae42:	4ba7      	ldr	r3, [pc, #668]	@ (800b0e0 <_dtoa_r+0x2c8>)
 800ae44:	21ef      	movs	r1, #239	@ 0xef
 800ae46:	48a7      	ldr	r0, [pc, #668]	@ (800b0e4 <_dtoa_r+0x2cc>)
 800ae48:	f001 fcae 	bl	800c7a8 <__assert_func>
 800ae4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ae50:	6007      	str	r7, [r0, #0]
 800ae52:	60c7      	str	r7, [r0, #12]
 800ae54:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ae58:	6819      	ldr	r1, [r3, #0]
 800ae5a:	b159      	cbz	r1, 800ae74 <_dtoa_r+0x5c>
 800ae5c:	685a      	ldr	r2, [r3, #4]
 800ae5e:	604a      	str	r2, [r1, #4]
 800ae60:	2301      	movs	r3, #1
 800ae62:	4093      	lsls	r3, r2
 800ae64:	608b      	str	r3, [r1, #8]
 800ae66:	4658      	mov	r0, fp
 800ae68:	f000 feda 	bl	800bc20 <_Bfree>
 800ae6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ae70:	2200      	movs	r2, #0
 800ae72:	601a      	str	r2, [r3, #0]
 800ae74:	1e2b      	subs	r3, r5, #0
 800ae76:	bfb9      	ittee	lt
 800ae78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ae7c:	9303      	strlt	r3, [sp, #12]
 800ae7e:	2300      	movge	r3, #0
 800ae80:	6033      	strge	r3, [r6, #0]
 800ae82:	9f03      	ldr	r7, [sp, #12]
 800ae84:	4b98      	ldr	r3, [pc, #608]	@ (800b0e8 <_dtoa_r+0x2d0>)
 800ae86:	bfbc      	itt	lt
 800ae88:	2201      	movlt	r2, #1
 800ae8a:	6032      	strlt	r2, [r6, #0]
 800ae8c:	43bb      	bics	r3, r7
 800ae8e:	d112      	bne.n	800aeb6 <_dtoa_r+0x9e>
 800ae90:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ae92:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ae96:	6013      	str	r3, [r2, #0]
 800ae98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae9c:	4323      	orrs	r3, r4
 800ae9e:	f000 854d 	beq.w	800b93c <_dtoa_r+0xb24>
 800aea2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aea4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b0fc <_dtoa_r+0x2e4>
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f000 854f 	beq.w	800b94c <_dtoa_r+0xb34>
 800aeae:	f10a 0303 	add.w	r3, sl, #3
 800aeb2:	f000 bd49 	b.w	800b948 <_dtoa_r+0xb30>
 800aeb6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aeba:	2200      	movs	r2, #0
 800aebc:	ec51 0b17 	vmov	r0, r1, d7
 800aec0:	2300      	movs	r3, #0
 800aec2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800aec6:	f7f5 fdff 	bl	8000ac8 <__aeabi_dcmpeq>
 800aeca:	4680      	mov	r8, r0
 800aecc:	b158      	cbz	r0, 800aee6 <_dtoa_r+0xce>
 800aece:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aed0:	2301      	movs	r3, #1
 800aed2:	6013      	str	r3, [r2, #0]
 800aed4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aed6:	b113      	cbz	r3, 800aede <_dtoa_r+0xc6>
 800aed8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aeda:	4b84      	ldr	r3, [pc, #528]	@ (800b0ec <_dtoa_r+0x2d4>)
 800aedc:	6013      	str	r3, [r2, #0]
 800aede:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b100 <_dtoa_r+0x2e8>
 800aee2:	f000 bd33 	b.w	800b94c <_dtoa_r+0xb34>
 800aee6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aeea:	aa16      	add	r2, sp, #88	@ 0x58
 800aeec:	a917      	add	r1, sp, #92	@ 0x5c
 800aeee:	4658      	mov	r0, fp
 800aef0:	f001 f980 	bl	800c1f4 <__d2b>
 800aef4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aef8:	4681      	mov	r9, r0
 800aefa:	2e00      	cmp	r6, #0
 800aefc:	d077      	beq.n	800afee <_dtoa_r+0x1d6>
 800aefe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af00:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800af04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800af10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800af14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800af18:	4619      	mov	r1, r3
 800af1a:	2200      	movs	r2, #0
 800af1c:	4b74      	ldr	r3, [pc, #464]	@ (800b0f0 <_dtoa_r+0x2d8>)
 800af1e:	f7f5 f9b3 	bl	8000288 <__aeabi_dsub>
 800af22:	a369      	add	r3, pc, #420	@ (adr r3, 800b0c8 <_dtoa_r+0x2b0>)
 800af24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af28:	f7f5 fb66 	bl	80005f8 <__aeabi_dmul>
 800af2c:	a368      	add	r3, pc, #416	@ (adr r3, 800b0d0 <_dtoa_r+0x2b8>)
 800af2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af32:	f7f5 f9ab 	bl	800028c <__adddf3>
 800af36:	4604      	mov	r4, r0
 800af38:	4630      	mov	r0, r6
 800af3a:	460d      	mov	r5, r1
 800af3c:	f7f5 faf2 	bl	8000524 <__aeabi_i2d>
 800af40:	a365      	add	r3, pc, #404	@ (adr r3, 800b0d8 <_dtoa_r+0x2c0>)
 800af42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af46:	f7f5 fb57 	bl	80005f8 <__aeabi_dmul>
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	4620      	mov	r0, r4
 800af50:	4629      	mov	r1, r5
 800af52:	f7f5 f99b 	bl	800028c <__adddf3>
 800af56:	4604      	mov	r4, r0
 800af58:	460d      	mov	r5, r1
 800af5a:	f7f5 fdfd 	bl	8000b58 <__aeabi_d2iz>
 800af5e:	2200      	movs	r2, #0
 800af60:	4607      	mov	r7, r0
 800af62:	2300      	movs	r3, #0
 800af64:	4620      	mov	r0, r4
 800af66:	4629      	mov	r1, r5
 800af68:	f7f5 fdb8 	bl	8000adc <__aeabi_dcmplt>
 800af6c:	b140      	cbz	r0, 800af80 <_dtoa_r+0x168>
 800af6e:	4638      	mov	r0, r7
 800af70:	f7f5 fad8 	bl	8000524 <__aeabi_i2d>
 800af74:	4622      	mov	r2, r4
 800af76:	462b      	mov	r3, r5
 800af78:	f7f5 fda6 	bl	8000ac8 <__aeabi_dcmpeq>
 800af7c:	b900      	cbnz	r0, 800af80 <_dtoa_r+0x168>
 800af7e:	3f01      	subs	r7, #1
 800af80:	2f16      	cmp	r7, #22
 800af82:	d851      	bhi.n	800b028 <_dtoa_r+0x210>
 800af84:	4b5b      	ldr	r3, [pc, #364]	@ (800b0f4 <_dtoa_r+0x2dc>)
 800af86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af92:	f7f5 fda3 	bl	8000adc <__aeabi_dcmplt>
 800af96:	2800      	cmp	r0, #0
 800af98:	d048      	beq.n	800b02c <_dtoa_r+0x214>
 800af9a:	3f01      	subs	r7, #1
 800af9c:	2300      	movs	r3, #0
 800af9e:	9312      	str	r3, [sp, #72]	@ 0x48
 800afa0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800afa2:	1b9b      	subs	r3, r3, r6
 800afa4:	1e5a      	subs	r2, r3, #1
 800afa6:	bf44      	itt	mi
 800afa8:	f1c3 0801 	rsbmi	r8, r3, #1
 800afac:	2300      	movmi	r3, #0
 800afae:	9208      	str	r2, [sp, #32]
 800afb0:	bf54      	ite	pl
 800afb2:	f04f 0800 	movpl.w	r8, #0
 800afb6:	9308      	strmi	r3, [sp, #32]
 800afb8:	2f00      	cmp	r7, #0
 800afba:	db39      	blt.n	800b030 <_dtoa_r+0x218>
 800afbc:	9b08      	ldr	r3, [sp, #32]
 800afbe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800afc0:	443b      	add	r3, r7
 800afc2:	9308      	str	r3, [sp, #32]
 800afc4:	2300      	movs	r3, #0
 800afc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800afc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afca:	2b09      	cmp	r3, #9
 800afcc:	d864      	bhi.n	800b098 <_dtoa_r+0x280>
 800afce:	2b05      	cmp	r3, #5
 800afd0:	bfc4      	itt	gt
 800afd2:	3b04      	subgt	r3, #4
 800afd4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800afd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afd8:	f1a3 0302 	sub.w	r3, r3, #2
 800afdc:	bfcc      	ite	gt
 800afde:	2400      	movgt	r4, #0
 800afe0:	2401      	movle	r4, #1
 800afe2:	2b03      	cmp	r3, #3
 800afe4:	d863      	bhi.n	800b0ae <_dtoa_r+0x296>
 800afe6:	e8df f003 	tbb	[pc, r3]
 800afea:	372a      	.short	0x372a
 800afec:	5535      	.short	0x5535
 800afee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800aff2:	441e      	add	r6, r3
 800aff4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aff8:	2b20      	cmp	r3, #32
 800affa:	bfc1      	itttt	gt
 800affc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b000:	409f      	lslgt	r7, r3
 800b002:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b006:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b00a:	bfd6      	itet	le
 800b00c:	f1c3 0320 	rsble	r3, r3, #32
 800b010:	ea47 0003 	orrgt.w	r0, r7, r3
 800b014:	fa04 f003 	lslle.w	r0, r4, r3
 800b018:	f7f5 fa74 	bl	8000504 <__aeabi_ui2d>
 800b01c:	2201      	movs	r2, #1
 800b01e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b022:	3e01      	subs	r6, #1
 800b024:	9214      	str	r2, [sp, #80]	@ 0x50
 800b026:	e777      	b.n	800af18 <_dtoa_r+0x100>
 800b028:	2301      	movs	r3, #1
 800b02a:	e7b8      	b.n	800af9e <_dtoa_r+0x186>
 800b02c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b02e:	e7b7      	b.n	800afa0 <_dtoa_r+0x188>
 800b030:	427b      	negs	r3, r7
 800b032:	930a      	str	r3, [sp, #40]	@ 0x28
 800b034:	2300      	movs	r3, #0
 800b036:	eba8 0807 	sub.w	r8, r8, r7
 800b03a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b03c:	e7c4      	b.n	800afc8 <_dtoa_r+0x1b0>
 800b03e:	2300      	movs	r3, #0
 800b040:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b042:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b044:	2b00      	cmp	r3, #0
 800b046:	dc35      	bgt.n	800b0b4 <_dtoa_r+0x29c>
 800b048:	2301      	movs	r3, #1
 800b04a:	9300      	str	r3, [sp, #0]
 800b04c:	9307      	str	r3, [sp, #28]
 800b04e:	461a      	mov	r2, r3
 800b050:	920e      	str	r2, [sp, #56]	@ 0x38
 800b052:	e00b      	b.n	800b06c <_dtoa_r+0x254>
 800b054:	2301      	movs	r3, #1
 800b056:	e7f3      	b.n	800b040 <_dtoa_r+0x228>
 800b058:	2300      	movs	r3, #0
 800b05a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b05c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b05e:	18fb      	adds	r3, r7, r3
 800b060:	9300      	str	r3, [sp, #0]
 800b062:	3301      	adds	r3, #1
 800b064:	2b01      	cmp	r3, #1
 800b066:	9307      	str	r3, [sp, #28]
 800b068:	bfb8      	it	lt
 800b06a:	2301      	movlt	r3, #1
 800b06c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b070:	2100      	movs	r1, #0
 800b072:	2204      	movs	r2, #4
 800b074:	f102 0514 	add.w	r5, r2, #20
 800b078:	429d      	cmp	r5, r3
 800b07a:	d91f      	bls.n	800b0bc <_dtoa_r+0x2a4>
 800b07c:	6041      	str	r1, [r0, #4]
 800b07e:	4658      	mov	r0, fp
 800b080:	f000 fd8e 	bl	800bba0 <_Balloc>
 800b084:	4682      	mov	sl, r0
 800b086:	2800      	cmp	r0, #0
 800b088:	d13c      	bne.n	800b104 <_dtoa_r+0x2ec>
 800b08a:	4b1b      	ldr	r3, [pc, #108]	@ (800b0f8 <_dtoa_r+0x2e0>)
 800b08c:	4602      	mov	r2, r0
 800b08e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b092:	e6d8      	b.n	800ae46 <_dtoa_r+0x2e>
 800b094:	2301      	movs	r3, #1
 800b096:	e7e0      	b.n	800b05a <_dtoa_r+0x242>
 800b098:	2401      	movs	r4, #1
 800b09a:	2300      	movs	r3, #0
 800b09c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b09e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b0a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0a4:	9300      	str	r3, [sp, #0]
 800b0a6:	9307      	str	r3, [sp, #28]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	2312      	movs	r3, #18
 800b0ac:	e7d0      	b.n	800b050 <_dtoa_r+0x238>
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0b2:	e7f5      	b.n	800b0a0 <_dtoa_r+0x288>
 800b0b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0b6:	9300      	str	r3, [sp, #0]
 800b0b8:	9307      	str	r3, [sp, #28]
 800b0ba:	e7d7      	b.n	800b06c <_dtoa_r+0x254>
 800b0bc:	3101      	adds	r1, #1
 800b0be:	0052      	lsls	r2, r2, #1
 800b0c0:	e7d8      	b.n	800b074 <_dtoa_r+0x25c>
 800b0c2:	bf00      	nop
 800b0c4:	f3af 8000 	nop.w
 800b0c8:	636f4361 	.word	0x636f4361
 800b0cc:	3fd287a7 	.word	0x3fd287a7
 800b0d0:	8b60c8b3 	.word	0x8b60c8b3
 800b0d4:	3fc68a28 	.word	0x3fc68a28
 800b0d8:	509f79fb 	.word	0x509f79fb
 800b0dc:	3fd34413 	.word	0x3fd34413
 800b0e0:	0800d31d 	.word	0x0800d31d
 800b0e4:	0800d334 	.word	0x0800d334
 800b0e8:	7ff00000 	.word	0x7ff00000
 800b0ec:	0800d2ed 	.word	0x0800d2ed
 800b0f0:	3ff80000 	.word	0x3ff80000
 800b0f4:	0800d430 	.word	0x0800d430
 800b0f8:	0800d38c 	.word	0x0800d38c
 800b0fc:	0800d319 	.word	0x0800d319
 800b100:	0800d2ec 	.word	0x0800d2ec
 800b104:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b108:	6018      	str	r0, [r3, #0]
 800b10a:	9b07      	ldr	r3, [sp, #28]
 800b10c:	2b0e      	cmp	r3, #14
 800b10e:	f200 80a4 	bhi.w	800b25a <_dtoa_r+0x442>
 800b112:	2c00      	cmp	r4, #0
 800b114:	f000 80a1 	beq.w	800b25a <_dtoa_r+0x442>
 800b118:	2f00      	cmp	r7, #0
 800b11a:	dd33      	ble.n	800b184 <_dtoa_r+0x36c>
 800b11c:	4bad      	ldr	r3, [pc, #692]	@ (800b3d4 <_dtoa_r+0x5bc>)
 800b11e:	f007 020f 	and.w	r2, r7, #15
 800b122:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b126:	ed93 7b00 	vldr	d7, [r3]
 800b12a:	05f8      	lsls	r0, r7, #23
 800b12c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b130:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b134:	d516      	bpl.n	800b164 <_dtoa_r+0x34c>
 800b136:	4ba8      	ldr	r3, [pc, #672]	@ (800b3d8 <_dtoa_r+0x5c0>)
 800b138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b13c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b140:	f7f5 fb84 	bl	800084c <__aeabi_ddiv>
 800b144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b148:	f004 040f 	and.w	r4, r4, #15
 800b14c:	2603      	movs	r6, #3
 800b14e:	4da2      	ldr	r5, [pc, #648]	@ (800b3d8 <_dtoa_r+0x5c0>)
 800b150:	b954      	cbnz	r4, 800b168 <_dtoa_r+0x350>
 800b152:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b15a:	f7f5 fb77 	bl	800084c <__aeabi_ddiv>
 800b15e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b162:	e028      	b.n	800b1b6 <_dtoa_r+0x39e>
 800b164:	2602      	movs	r6, #2
 800b166:	e7f2      	b.n	800b14e <_dtoa_r+0x336>
 800b168:	07e1      	lsls	r1, r4, #31
 800b16a:	d508      	bpl.n	800b17e <_dtoa_r+0x366>
 800b16c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b170:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b174:	f7f5 fa40 	bl	80005f8 <__aeabi_dmul>
 800b178:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b17c:	3601      	adds	r6, #1
 800b17e:	1064      	asrs	r4, r4, #1
 800b180:	3508      	adds	r5, #8
 800b182:	e7e5      	b.n	800b150 <_dtoa_r+0x338>
 800b184:	f000 80d2 	beq.w	800b32c <_dtoa_r+0x514>
 800b188:	427c      	negs	r4, r7
 800b18a:	4b92      	ldr	r3, [pc, #584]	@ (800b3d4 <_dtoa_r+0x5bc>)
 800b18c:	4d92      	ldr	r5, [pc, #584]	@ (800b3d8 <_dtoa_r+0x5c0>)
 800b18e:	f004 020f 	and.w	r2, r4, #15
 800b192:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b19e:	f7f5 fa2b 	bl	80005f8 <__aeabi_dmul>
 800b1a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1a6:	1124      	asrs	r4, r4, #4
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	2602      	movs	r6, #2
 800b1ac:	2c00      	cmp	r4, #0
 800b1ae:	f040 80b2 	bne.w	800b316 <_dtoa_r+0x4fe>
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1d3      	bne.n	800b15e <_dtoa_r+0x346>
 800b1b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b1b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f000 80b7 	beq.w	800b330 <_dtoa_r+0x518>
 800b1c2:	4b86      	ldr	r3, [pc, #536]	@ (800b3dc <_dtoa_r+0x5c4>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	f7f5 fc87 	bl	8000adc <__aeabi_dcmplt>
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	f000 80ae 	beq.w	800b330 <_dtoa_r+0x518>
 800b1d4:	9b07      	ldr	r3, [sp, #28]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	f000 80aa 	beq.w	800b330 <_dtoa_r+0x518>
 800b1dc:	9b00      	ldr	r3, [sp, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	dd37      	ble.n	800b252 <_dtoa_r+0x43a>
 800b1e2:	1e7b      	subs	r3, r7, #1
 800b1e4:	9304      	str	r3, [sp, #16]
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	4b7d      	ldr	r3, [pc, #500]	@ (800b3e0 <_dtoa_r+0x5c8>)
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	4629      	mov	r1, r5
 800b1ee:	f7f5 fa03 	bl	80005f8 <__aeabi_dmul>
 800b1f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1f6:	9c00      	ldr	r4, [sp, #0]
 800b1f8:	3601      	adds	r6, #1
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	f7f5 f992 	bl	8000524 <__aeabi_i2d>
 800b200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b204:	f7f5 f9f8 	bl	80005f8 <__aeabi_dmul>
 800b208:	4b76      	ldr	r3, [pc, #472]	@ (800b3e4 <_dtoa_r+0x5cc>)
 800b20a:	2200      	movs	r2, #0
 800b20c:	f7f5 f83e 	bl	800028c <__adddf3>
 800b210:	4605      	mov	r5, r0
 800b212:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b216:	2c00      	cmp	r4, #0
 800b218:	f040 808d 	bne.w	800b336 <_dtoa_r+0x51e>
 800b21c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b220:	4b71      	ldr	r3, [pc, #452]	@ (800b3e8 <_dtoa_r+0x5d0>)
 800b222:	2200      	movs	r2, #0
 800b224:	f7f5 f830 	bl	8000288 <__aeabi_dsub>
 800b228:	4602      	mov	r2, r0
 800b22a:	460b      	mov	r3, r1
 800b22c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b230:	462a      	mov	r2, r5
 800b232:	4633      	mov	r3, r6
 800b234:	f7f5 fc70 	bl	8000b18 <__aeabi_dcmpgt>
 800b238:	2800      	cmp	r0, #0
 800b23a:	f040 828b 	bne.w	800b754 <_dtoa_r+0x93c>
 800b23e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b242:	462a      	mov	r2, r5
 800b244:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b248:	f7f5 fc48 	bl	8000adc <__aeabi_dcmplt>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	f040 8128 	bne.w	800b4a2 <_dtoa_r+0x68a>
 800b252:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b256:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b25a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f2c0 815a 	blt.w	800b516 <_dtoa_r+0x6fe>
 800b262:	2f0e      	cmp	r7, #14
 800b264:	f300 8157 	bgt.w	800b516 <_dtoa_r+0x6fe>
 800b268:	4b5a      	ldr	r3, [pc, #360]	@ (800b3d4 <_dtoa_r+0x5bc>)
 800b26a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b26e:	ed93 7b00 	vldr	d7, [r3]
 800b272:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b274:	2b00      	cmp	r3, #0
 800b276:	ed8d 7b00 	vstr	d7, [sp]
 800b27a:	da03      	bge.n	800b284 <_dtoa_r+0x46c>
 800b27c:	9b07      	ldr	r3, [sp, #28]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f340 8101 	ble.w	800b486 <_dtoa_r+0x66e>
 800b284:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b288:	4656      	mov	r6, sl
 800b28a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b28e:	4620      	mov	r0, r4
 800b290:	4629      	mov	r1, r5
 800b292:	f7f5 fadb 	bl	800084c <__aeabi_ddiv>
 800b296:	f7f5 fc5f 	bl	8000b58 <__aeabi_d2iz>
 800b29a:	4680      	mov	r8, r0
 800b29c:	f7f5 f942 	bl	8000524 <__aeabi_i2d>
 800b2a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2a4:	f7f5 f9a8 	bl	80005f8 <__aeabi_dmul>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	4629      	mov	r1, r5
 800b2b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b2b4:	f7f4 ffe8 	bl	8000288 <__aeabi_dsub>
 800b2b8:	f806 4b01 	strb.w	r4, [r6], #1
 800b2bc:	9d07      	ldr	r5, [sp, #28]
 800b2be:	eba6 040a 	sub.w	r4, r6, sl
 800b2c2:	42a5      	cmp	r5, r4
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	f040 8117 	bne.w	800b4fa <_dtoa_r+0x6e2>
 800b2cc:	f7f4 ffde 	bl	800028c <__adddf3>
 800b2d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2d4:	4604      	mov	r4, r0
 800b2d6:	460d      	mov	r5, r1
 800b2d8:	f7f5 fc1e 	bl	8000b18 <__aeabi_dcmpgt>
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	f040 80f9 	bne.w	800b4d4 <_dtoa_r+0x6bc>
 800b2e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	f7f5 fbed 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2ee:	b118      	cbz	r0, 800b2f8 <_dtoa_r+0x4e0>
 800b2f0:	f018 0f01 	tst.w	r8, #1
 800b2f4:	f040 80ee 	bne.w	800b4d4 <_dtoa_r+0x6bc>
 800b2f8:	4649      	mov	r1, r9
 800b2fa:	4658      	mov	r0, fp
 800b2fc:	f000 fc90 	bl	800bc20 <_Bfree>
 800b300:	2300      	movs	r3, #0
 800b302:	7033      	strb	r3, [r6, #0]
 800b304:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b306:	3701      	adds	r7, #1
 800b308:	601f      	str	r7, [r3, #0]
 800b30a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f000 831d 	beq.w	800b94c <_dtoa_r+0xb34>
 800b312:	601e      	str	r6, [r3, #0]
 800b314:	e31a      	b.n	800b94c <_dtoa_r+0xb34>
 800b316:	07e2      	lsls	r2, r4, #31
 800b318:	d505      	bpl.n	800b326 <_dtoa_r+0x50e>
 800b31a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b31e:	f7f5 f96b 	bl	80005f8 <__aeabi_dmul>
 800b322:	3601      	adds	r6, #1
 800b324:	2301      	movs	r3, #1
 800b326:	1064      	asrs	r4, r4, #1
 800b328:	3508      	adds	r5, #8
 800b32a:	e73f      	b.n	800b1ac <_dtoa_r+0x394>
 800b32c:	2602      	movs	r6, #2
 800b32e:	e742      	b.n	800b1b6 <_dtoa_r+0x39e>
 800b330:	9c07      	ldr	r4, [sp, #28]
 800b332:	9704      	str	r7, [sp, #16]
 800b334:	e761      	b.n	800b1fa <_dtoa_r+0x3e2>
 800b336:	4b27      	ldr	r3, [pc, #156]	@ (800b3d4 <_dtoa_r+0x5bc>)
 800b338:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b33a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b33e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b342:	4454      	add	r4, sl
 800b344:	2900      	cmp	r1, #0
 800b346:	d053      	beq.n	800b3f0 <_dtoa_r+0x5d8>
 800b348:	4928      	ldr	r1, [pc, #160]	@ (800b3ec <_dtoa_r+0x5d4>)
 800b34a:	2000      	movs	r0, #0
 800b34c:	f7f5 fa7e 	bl	800084c <__aeabi_ddiv>
 800b350:	4633      	mov	r3, r6
 800b352:	462a      	mov	r2, r5
 800b354:	f7f4 ff98 	bl	8000288 <__aeabi_dsub>
 800b358:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b35c:	4656      	mov	r6, sl
 800b35e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b362:	f7f5 fbf9 	bl	8000b58 <__aeabi_d2iz>
 800b366:	4605      	mov	r5, r0
 800b368:	f7f5 f8dc 	bl	8000524 <__aeabi_i2d>
 800b36c:	4602      	mov	r2, r0
 800b36e:	460b      	mov	r3, r1
 800b370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b374:	f7f4 ff88 	bl	8000288 <__aeabi_dsub>
 800b378:	3530      	adds	r5, #48	@ 0x30
 800b37a:	4602      	mov	r2, r0
 800b37c:	460b      	mov	r3, r1
 800b37e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b382:	f806 5b01 	strb.w	r5, [r6], #1
 800b386:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b38a:	f7f5 fba7 	bl	8000adc <__aeabi_dcmplt>
 800b38e:	2800      	cmp	r0, #0
 800b390:	d171      	bne.n	800b476 <_dtoa_r+0x65e>
 800b392:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b396:	4911      	ldr	r1, [pc, #68]	@ (800b3dc <_dtoa_r+0x5c4>)
 800b398:	2000      	movs	r0, #0
 800b39a:	f7f4 ff75 	bl	8000288 <__aeabi_dsub>
 800b39e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b3a2:	f7f5 fb9b 	bl	8000adc <__aeabi_dcmplt>
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	f040 8095 	bne.w	800b4d6 <_dtoa_r+0x6be>
 800b3ac:	42a6      	cmp	r6, r4
 800b3ae:	f43f af50 	beq.w	800b252 <_dtoa_r+0x43a>
 800b3b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b3b6:	4b0a      	ldr	r3, [pc, #40]	@ (800b3e0 <_dtoa_r+0x5c8>)
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f7f5 f91d 	bl	80005f8 <__aeabi_dmul>
 800b3be:	4b08      	ldr	r3, [pc, #32]	@ (800b3e0 <_dtoa_r+0x5c8>)
 800b3c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3ca:	f7f5 f915 	bl	80005f8 <__aeabi_dmul>
 800b3ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3d2:	e7c4      	b.n	800b35e <_dtoa_r+0x546>
 800b3d4:	0800d430 	.word	0x0800d430
 800b3d8:	0800d408 	.word	0x0800d408
 800b3dc:	3ff00000 	.word	0x3ff00000
 800b3e0:	40240000 	.word	0x40240000
 800b3e4:	401c0000 	.word	0x401c0000
 800b3e8:	40140000 	.word	0x40140000
 800b3ec:	3fe00000 	.word	0x3fe00000
 800b3f0:	4631      	mov	r1, r6
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	f7f5 f900 	bl	80005f8 <__aeabi_dmul>
 800b3f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b3fc:	9415      	str	r4, [sp, #84]	@ 0x54
 800b3fe:	4656      	mov	r6, sl
 800b400:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b404:	f7f5 fba8 	bl	8000b58 <__aeabi_d2iz>
 800b408:	4605      	mov	r5, r0
 800b40a:	f7f5 f88b 	bl	8000524 <__aeabi_i2d>
 800b40e:	4602      	mov	r2, r0
 800b410:	460b      	mov	r3, r1
 800b412:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b416:	f7f4 ff37 	bl	8000288 <__aeabi_dsub>
 800b41a:	3530      	adds	r5, #48	@ 0x30
 800b41c:	f806 5b01 	strb.w	r5, [r6], #1
 800b420:	4602      	mov	r2, r0
 800b422:	460b      	mov	r3, r1
 800b424:	42a6      	cmp	r6, r4
 800b426:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b42a:	f04f 0200 	mov.w	r2, #0
 800b42e:	d124      	bne.n	800b47a <_dtoa_r+0x662>
 800b430:	4bac      	ldr	r3, [pc, #688]	@ (800b6e4 <_dtoa_r+0x8cc>)
 800b432:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b436:	f7f4 ff29 	bl	800028c <__adddf3>
 800b43a:	4602      	mov	r2, r0
 800b43c:	460b      	mov	r3, r1
 800b43e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b442:	f7f5 fb69 	bl	8000b18 <__aeabi_dcmpgt>
 800b446:	2800      	cmp	r0, #0
 800b448:	d145      	bne.n	800b4d6 <_dtoa_r+0x6be>
 800b44a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b44e:	49a5      	ldr	r1, [pc, #660]	@ (800b6e4 <_dtoa_r+0x8cc>)
 800b450:	2000      	movs	r0, #0
 800b452:	f7f4 ff19 	bl	8000288 <__aeabi_dsub>
 800b456:	4602      	mov	r2, r0
 800b458:	460b      	mov	r3, r1
 800b45a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b45e:	f7f5 fb3d 	bl	8000adc <__aeabi_dcmplt>
 800b462:	2800      	cmp	r0, #0
 800b464:	f43f aef5 	beq.w	800b252 <_dtoa_r+0x43a>
 800b468:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b46a:	1e73      	subs	r3, r6, #1
 800b46c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b46e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b472:	2b30      	cmp	r3, #48	@ 0x30
 800b474:	d0f8      	beq.n	800b468 <_dtoa_r+0x650>
 800b476:	9f04      	ldr	r7, [sp, #16]
 800b478:	e73e      	b.n	800b2f8 <_dtoa_r+0x4e0>
 800b47a:	4b9b      	ldr	r3, [pc, #620]	@ (800b6e8 <_dtoa_r+0x8d0>)
 800b47c:	f7f5 f8bc 	bl	80005f8 <__aeabi_dmul>
 800b480:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b484:	e7bc      	b.n	800b400 <_dtoa_r+0x5e8>
 800b486:	d10c      	bne.n	800b4a2 <_dtoa_r+0x68a>
 800b488:	4b98      	ldr	r3, [pc, #608]	@ (800b6ec <_dtoa_r+0x8d4>)
 800b48a:	2200      	movs	r2, #0
 800b48c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b490:	f7f5 f8b2 	bl	80005f8 <__aeabi_dmul>
 800b494:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b498:	f7f5 fb34 	bl	8000b04 <__aeabi_dcmpge>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	f000 8157 	beq.w	800b750 <_dtoa_r+0x938>
 800b4a2:	2400      	movs	r4, #0
 800b4a4:	4625      	mov	r5, r4
 800b4a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4a8:	43db      	mvns	r3, r3
 800b4aa:	9304      	str	r3, [sp, #16]
 800b4ac:	4656      	mov	r6, sl
 800b4ae:	2700      	movs	r7, #0
 800b4b0:	4621      	mov	r1, r4
 800b4b2:	4658      	mov	r0, fp
 800b4b4:	f000 fbb4 	bl	800bc20 <_Bfree>
 800b4b8:	2d00      	cmp	r5, #0
 800b4ba:	d0dc      	beq.n	800b476 <_dtoa_r+0x65e>
 800b4bc:	b12f      	cbz	r7, 800b4ca <_dtoa_r+0x6b2>
 800b4be:	42af      	cmp	r7, r5
 800b4c0:	d003      	beq.n	800b4ca <_dtoa_r+0x6b2>
 800b4c2:	4639      	mov	r1, r7
 800b4c4:	4658      	mov	r0, fp
 800b4c6:	f000 fbab 	bl	800bc20 <_Bfree>
 800b4ca:	4629      	mov	r1, r5
 800b4cc:	4658      	mov	r0, fp
 800b4ce:	f000 fba7 	bl	800bc20 <_Bfree>
 800b4d2:	e7d0      	b.n	800b476 <_dtoa_r+0x65e>
 800b4d4:	9704      	str	r7, [sp, #16]
 800b4d6:	4633      	mov	r3, r6
 800b4d8:	461e      	mov	r6, r3
 800b4da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4de:	2a39      	cmp	r2, #57	@ 0x39
 800b4e0:	d107      	bne.n	800b4f2 <_dtoa_r+0x6da>
 800b4e2:	459a      	cmp	sl, r3
 800b4e4:	d1f8      	bne.n	800b4d8 <_dtoa_r+0x6c0>
 800b4e6:	9a04      	ldr	r2, [sp, #16]
 800b4e8:	3201      	adds	r2, #1
 800b4ea:	9204      	str	r2, [sp, #16]
 800b4ec:	2230      	movs	r2, #48	@ 0x30
 800b4ee:	f88a 2000 	strb.w	r2, [sl]
 800b4f2:	781a      	ldrb	r2, [r3, #0]
 800b4f4:	3201      	adds	r2, #1
 800b4f6:	701a      	strb	r2, [r3, #0]
 800b4f8:	e7bd      	b.n	800b476 <_dtoa_r+0x65e>
 800b4fa:	4b7b      	ldr	r3, [pc, #492]	@ (800b6e8 <_dtoa_r+0x8d0>)
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	f7f5 f87b 	bl	80005f8 <__aeabi_dmul>
 800b502:	2200      	movs	r2, #0
 800b504:	2300      	movs	r3, #0
 800b506:	4604      	mov	r4, r0
 800b508:	460d      	mov	r5, r1
 800b50a:	f7f5 fadd 	bl	8000ac8 <__aeabi_dcmpeq>
 800b50e:	2800      	cmp	r0, #0
 800b510:	f43f aebb 	beq.w	800b28a <_dtoa_r+0x472>
 800b514:	e6f0      	b.n	800b2f8 <_dtoa_r+0x4e0>
 800b516:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b518:	2a00      	cmp	r2, #0
 800b51a:	f000 80db 	beq.w	800b6d4 <_dtoa_r+0x8bc>
 800b51e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b520:	2a01      	cmp	r2, #1
 800b522:	f300 80bf 	bgt.w	800b6a4 <_dtoa_r+0x88c>
 800b526:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b528:	2a00      	cmp	r2, #0
 800b52a:	f000 80b7 	beq.w	800b69c <_dtoa_r+0x884>
 800b52e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b532:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b534:	4646      	mov	r6, r8
 800b536:	9a08      	ldr	r2, [sp, #32]
 800b538:	2101      	movs	r1, #1
 800b53a:	441a      	add	r2, r3
 800b53c:	4658      	mov	r0, fp
 800b53e:	4498      	add	r8, r3
 800b540:	9208      	str	r2, [sp, #32]
 800b542:	f000 fc21 	bl	800bd88 <__i2b>
 800b546:	4605      	mov	r5, r0
 800b548:	b15e      	cbz	r6, 800b562 <_dtoa_r+0x74a>
 800b54a:	9b08      	ldr	r3, [sp, #32]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	dd08      	ble.n	800b562 <_dtoa_r+0x74a>
 800b550:	42b3      	cmp	r3, r6
 800b552:	9a08      	ldr	r2, [sp, #32]
 800b554:	bfa8      	it	ge
 800b556:	4633      	movge	r3, r6
 800b558:	eba8 0803 	sub.w	r8, r8, r3
 800b55c:	1af6      	subs	r6, r6, r3
 800b55e:	1ad3      	subs	r3, r2, r3
 800b560:	9308      	str	r3, [sp, #32]
 800b562:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b564:	b1f3      	cbz	r3, 800b5a4 <_dtoa_r+0x78c>
 800b566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f000 80b7 	beq.w	800b6dc <_dtoa_r+0x8c4>
 800b56e:	b18c      	cbz	r4, 800b594 <_dtoa_r+0x77c>
 800b570:	4629      	mov	r1, r5
 800b572:	4622      	mov	r2, r4
 800b574:	4658      	mov	r0, fp
 800b576:	f000 fcc7 	bl	800bf08 <__pow5mult>
 800b57a:	464a      	mov	r2, r9
 800b57c:	4601      	mov	r1, r0
 800b57e:	4605      	mov	r5, r0
 800b580:	4658      	mov	r0, fp
 800b582:	f000 fc17 	bl	800bdb4 <__multiply>
 800b586:	4649      	mov	r1, r9
 800b588:	9004      	str	r0, [sp, #16]
 800b58a:	4658      	mov	r0, fp
 800b58c:	f000 fb48 	bl	800bc20 <_Bfree>
 800b590:	9b04      	ldr	r3, [sp, #16]
 800b592:	4699      	mov	r9, r3
 800b594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b596:	1b1a      	subs	r2, r3, r4
 800b598:	d004      	beq.n	800b5a4 <_dtoa_r+0x78c>
 800b59a:	4649      	mov	r1, r9
 800b59c:	4658      	mov	r0, fp
 800b59e:	f000 fcb3 	bl	800bf08 <__pow5mult>
 800b5a2:	4681      	mov	r9, r0
 800b5a4:	2101      	movs	r1, #1
 800b5a6:	4658      	mov	r0, fp
 800b5a8:	f000 fbee 	bl	800bd88 <__i2b>
 800b5ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f000 81cf 	beq.w	800b954 <_dtoa_r+0xb3c>
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	4601      	mov	r1, r0
 800b5ba:	4658      	mov	r0, fp
 800b5bc:	f000 fca4 	bl	800bf08 <__pow5mult>
 800b5c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	f300 8095 	bgt.w	800b6f4 <_dtoa_r+0x8dc>
 800b5ca:	9b02      	ldr	r3, [sp, #8]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f040 8087 	bne.w	800b6e0 <_dtoa_r+0x8c8>
 800b5d2:	9b03      	ldr	r3, [sp, #12]
 800b5d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f040 8089 	bne.w	800b6f0 <_dtoa_r+0x8d8>
 800b5de:	9b03      	ldr	r3, [sp, #12]
 800b5e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b5e4:	0d1b      	lsrs	r3, r3, #20
 800b5e6:	051b      	lsls	r3, r3, #20
 800b5e8:	b12b      	cbz	r3, 800b5f6 <_dtoa_r+0x7de>
 800b5ea:	9b08      	ldr	r3, [sp, #32]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	9308      	str	r3, [sp, #32]
 800b5f0:	f108 0801 	add.w	r8, r8, #1
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	f000 81b0 	beq.w	800b960 <_dtoa_r+0xb48>
 800b600:	6923      	ldr	r3, [r4, #16]
 800b602:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b606:	6918      	ldr	r0, [r3, #16]
 800b608:	f000 fb72 	bl	800bcf0 <__hi0bits>
 800b60c:	f1c0 0020 	rsb	r0, r0, #32
 800b610:	9b08      	ldr	r3, [sp, #32]
 800b612:	4418      	add	r0, r3
 800b614:	f010 001f 	ands.w	r0, r0, #31
 800b618:	d077      	beq.n	800b70a <_dtoa_r+0x8f2>
 800b61a:	f1c0 0320 	rsb	r3, r0, #32
 800b61e:	2b04      	cmp	r3, #4
 800b620:	dd6b      	ble.n	800b6fa <_dtoa_r+0x8e2>
 800b622:	9b08      	ldr	r3, [sp, #32]
 800b624:	f1c0 001c 	rsb	r0, r0, #28
 800b628:	4403      	add	r3, r0
 800b62a:	4480      	add	r8, r0
 800b62c:	4406      	add	r6, r0
 800b62e:	9308      	str	r3, [sp, #32]
 800b630:	f1b8 0f00 	cmp.w	r8, #0
 800b634:	dd05      	ble.n	800b642 <_dtoa_r+0x82a>
 800b636:	4649      	mov	r1, r9
 800b638:	4642      	mov	r2, r8
 800b63a:	4658      	mov	r0, fp
 800b63c:	f000 fcbe 	bl	800bfbc <__lshift>
 800b640:	4681      	mov	r9, r0
 800b642:	9b08      	ldr	r3, [sp, #32]
 800b644:	2b00      	cmp	r3, #0
 800b646:	dd05      	ble.n	800b654 <_dtoa_r+0x83c>
 800b648:	4621      	mov	r1, r4
 800b64a:	461a      	mov	r2, r3
 800b64c:	4658      	mov	r0, fp
 800b64e:	f000 fcb5 	bl	800bfbc <__lshift>
 800b652:	4604      	mov	r4, r0
 800b654:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b656:	2b00      	cmp	r3, #0
 800b658:	d059      	beq.n	800b70e <_dtoa_r+0x8f6>
 800b65a:	4621      	mov	r1, r4
 800b65c:	4648      	mov	r0, r9
 800b65e:	f000 fd19 	bl	800c094 <__mcmp>
 800b662:	2800      	cmp	r0, #0
 800b664:	da53      	bge.n	800b70e <_dtoa_r+0x8f6>
 800b666:	1e7b      	subs	r3, r7, #1
 800b668:	9304      	str	r3, [sp, #16]
 800b66a:	4649      	mov	r1, r9
 800b66c:	2300      	movs	r3, #0
 800b66e:	220a      	movs	r2, #10
 800b670:	4658      	mov	r0, fp
 800b672:	f000 faf7 	bl	800bc64 <__multadd>
 800b676:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b678:	4681      	mov	r9, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f000 8172 	beq.w	800b964 <_dtoa_r+0xb4c>
 800b680:	2300      	movs	r3, #0
 800b682:	4629      	mov	r1, r5
 800b684:	220a      	movs	r2, #10
 800b686:	4658      	mov	r0, fp
 800b688:	f000 faec 	bl	800bc64 <__multadd>
 800b68c:	9b00      	ldr	r3, [sp, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	4605      	mov	r5, r0
 800b692:	dc67      	bgt.n	800b764 <_dtoa_r+0x94c>
 800b694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b696:	2b02      	cmp	r3, #2
 800b698:	dc41      	bgt.n	800b71e <_dtoa_r+0x906>
 800b69a:	e063      	b.n	800b764 <_dtoa_r+0x94c>
 800b69c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b69e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b6a2:	e746      	b.n	800b532 <_dtoa_r+0x71a>
 800b6a4:	9b07      	ldr	r3, [sp, #28]
 800b6a6:	1e5c      	subs	r4, r3, #1
 800b6a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6aa:	42a3      	cmp	r3, r4
 800b6ac:	bfbf      	itttt	lt
 800b6ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b6b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b6b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b6b4:	1ae3      	sublt	r3, r4, r3
 800b6b6:	bfb4      	ite	lt
 800b6b8:	18d2      	addlt	r2, r2, r3
 800b6ba:	1b1c      	subge	r4, r3, r4
 800b6bc:	9b07      	ldr	r3, [sp, #28]
 800b6be:	bfbc      	itt	lt
 800b6c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b6c2:	2400      	movlt	r4, #0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	bfb5      	itete	lt
 800b6c8:	eba8 0603 	sublt.w	r6, r8, r3
 800b6cc:	9b07      	ldrge	r3, [sp, #28]
 800b6ce:	2300      	movlt	r3, #0
 800b6d0:	4646      	movge	r6, r8
 800b6d2:	e730      	b.n	800b536 <_dtoa_r+0x71e>
 800b6d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b6d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b6d8:	4646      	mov	r6, r8
 800b6da:	e735      	b.n	800b548 <_dtoa_r+0x730>
 800b6dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b6de:	e75c      	b.n	800b59a <_dtoa_r+0x782>
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	e788      	b.n	800b5f6 <_dtoa_r+0x7de>
 800b6e4:	3fe00000 	.word	0x3fe00000
 800b6e8:	40240000 	.word	0x40240000
 800b6ec:	40140000 	.word	0x40140000
 800b6f0:	9b02      	ldr	r3, [sp, #8]
 800b6f2:	e780      	b.n	800b5f6 <_dtoa_r+0x7de>
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6f8:	e782      	b.n	800b600 <_dtoa_r+0x7e8>
 800b6fa:	d099      	beq.n	800b630 <_dtoa_r+0x818>
 800b6fc:	9a08      	ldr	r2, [sp, #32]
 800b6fe:	331c      	adds	r3, #28
 800b700:	441a      	add	r2, r3
 800b702:	4498      	add	r8, r3
 800b704:	441e      	add	r6, r3
 800b706:	9208      	str	r2, [sp, #32]
 800b708:	e792      	b.n	800b630 <_dtoa_r+0x818>
 800b70a:	4603      	mov	r3, r0
 800b70c:	e7f6      	b.n	800b6fc <_dtoa_r+0x8e4>
 800b70e:	9b07      	ldr	r3, [sp, #28]
 800b710:	9704      	str	r7, [sp, #16]
 800b712:	2b00      	cmp	r3, #0
 800b714:	dc20      	bgt.n	800b758 <_dtoa_r+0x940>
 800b716:	9300      	str	r3, [sp, #0]
 800b718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b71a:	2b02      	cmp	r3, #2
 800b71c:	dd1e      	ble.n	800b75c <_dtoa_r+0x944>
 800b71e:	9b00      	ldr	r3, [sp, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	f47f aec0 	bne.w	800b4a6 <_dtoa_r+0x68e>
 800b726:	4621      	mov	r1, r4
 800b728:	2205      	movs	r2, #5
 800b72a:	4658      	mov	r0, fp
 800b72c:	f000 fa9a 	bl	800bc64 <__multadd>
 800b730:	4601      	mov	r1, r0
 800b732:	4604      	mov	r4, r0
 800b734:	4648      	mov	r0, r9
 800b736:	f000 fcad 	bl	800c094 <__mcmp>
 800b73a:	2800      	cmp	r0, #0
 800b73c:	f77f aeb3 	ble.w	800b4a6 <_dtoa_r+0x68e>
 800b740:	4656      	mov	r6, sl
 800b742:	2331      	movs	r3, #49	@ 0x31
 800b744:	f806 3b01 	strb.w	r3, [r6], #1
 800b748:	9b04      	ldr	r3, [sp, #16]
 800b74a:	3301      	adds	r3, #1
 800b74c:	9304      	str	r3, [sp, #16]
 800b74e:	e6ae      	b.n	800b4ae <_dtoa_r+0x696>
 800b750:	9c07      	ldr	r4, [sp, #28]
 800b752:	9704      	str	r7, [sp, #16]
 800b754:	4625      	mov	r5, r4
 800b756:	e7f3      	b.n	800b740 <_dtoa_r+0x928>
 800b758:	9b07      	ldr	r3, [sp, #28]
 800b75a:	9300      	str	r3, [sp, #0]
 800b75c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f000 8104 	beq.w	800b96c <_dtoa_r+0xb54>
 800b764:	2e00      	cmp	r6, #0
 800b766:	dd05      	ble.n	800b774 <_dtoa_r+0x95c>
 800b768:	4629      	mov	r1, r5
 800b76a:	4632      	mov	r2, r6
 800b76c:	4658      	mov	r0, fp
 800b76e:	f000 fc25 	bl	800bfbc <__lshift>
 800b772:	4605      	mov	r5, r0
 800b774:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b776:	2b00      	cmp	r3, #0
 800b778:	d05a      	beq.n	800b830 <_dtoa_r+0xa18>
 800b77a:	6869      	ldr	r1, [r5, #4]
 800b77c:	4658      	mov	r0, fp
 800b77e:	f000 fa0f 	bl	800bba0 <_Balloc>
 800b782:	4606      	mov	r6, r0
 800b784:	b928      	cbnz	r0, 800b792 <_dtoa_r+0x97a>
 800b786:	4b84      	ldr	r3, [pc, #528]	@ (800b998 <_dtoa_r+0xb80>)
 800b788:	4602      	mov	r2, r0
 800b78a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b78e:	f7ff bb5a 	b.w	800ae46 <_dtoa_r+0x2e>
 800b792:	692a      	ldr	r2, [r5, #16]
 800b794:	3202      	adds	r2, #2
 800b796:	0092      	lsls	r2, r2, #2
 800b798:	f105 010c 	add.w	r1, r5, #12
 800b79c:	300c      	adds	r0, #12
 800b79e:	f7ff faa2 	bl	800ace6 <memcpy>
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	4631      	mov	r1, r6
 800b7a6:	4658      	mov	r0, fp
 800b7a8:	f000 fc08 	bl	800bfbc <__lshift>
 800b7ac:	f10a 0301 	add.w	r3, sl, #1
 800b7b0:	9307      	str	r3, [sp, #28]
 800b7b2:	9b00      	ldr	r3, [sp, #0]
 800b7b4:	4453      	add	r3, sl
 800b7b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7b8:	9b02      	ldr	r3, [sp, #8]
 800b7ba:	f003 0301 	and.w	r3, r3, #1
 800b7be:	462f      	mov	r7, r5
 800b7c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7c2:	4605      	mov	r5, r0
 800b7c4:	9b07      	ldr	r3, [sp, #28]
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	4648      	mov	r0, r9
 800b7cc:	9300      	str	r3, [sp, #0]
 800b7ce:	f7ff fa98 	bl	800ad02 <quorem>
 800b7d2:	4639      	mov	r1, r7
 800b7d4:	9002      	str	r0, [sp, #8]
 800b7d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b7da:	4648      	mov	r0, r9
 800b7dc:	f000 fc5a 	bl	800c094 <__mcmp>
 800b7e0:	462a      	mov	r2, r5
 800b7e2:	9008      	str	r0, [sp, #32]
 800b7e4:	4621      	mov	r1, r4
 800b7e6:	4658      	mov	r0, fp
 800b7e8:	f000 fc70 	bl	800c0cc <__mdiff>
 800b7ec:	68c2      	ldr	r2, [r0, #12]
 800b7ee:	4606      	mov	r6, r0
 800b7f0:	bb02      	cbnz	r2, 800b834 <_dtoa_r+0xa1c>
 800b7f2:	4601      	mov	r1, r0
 800b7f4:	4648      	mov	r0, r9
 800b7f6:	f000 fc4d 	bl	800c094 <__mcmp>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	4631      	mov	r1, r6
 800b7fe:	4658      	mov	r0, fp
 800b800:	920e      	str	r2, [sp, #56]	@ 0x38
 800b802:	f000 fa0d 	bl	800bc20 <_Bfree>
 800b806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b808:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b80a:	9e07      	ldr	r6, [sp, #28]
 800b80c:	ea43 0102 	orr.w	r1, r3, r2
 800b810:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b812:	4319      	orrs	r1, r3
 800b814:	d110      	bne.n	800b838 <_dtoa_r+0xa20>
 800b816:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b81a:	d029      	beq.n	800b870 <_dtoa_r+0xa58>
 800b81c:	9b08      	ldr	r3, [sp, #32]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	dd02      	ble.n	800b828 <_dtoa_r+0xa10>
 800b822:	9b02      	ldr	r3, [sp, #8]
 800b824:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b828:	9b00      	ldr	r3, [sp, #0]
 800b82a:	f883 8000 	strb.w	r8, [r3]
 800b82e:	e63f      	b.n	800b4b0 <_dtoa_r+0x698>
 800b830:	4628      	mov	r0, r5
 800b832:	e7bb      	b.n	800b7ac <_dtoa_r+0x994>
 800b834:	2201      	movs	r2, #1
 800b836:	e7e1      	b.n	800b7fc <_dtoa_r+0x9e4>
 800b838:	9b08      	ldr	r3, [sp, #32]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	db04      	blt.n	800b848 <_dtoa_r+0xa30>
 800b83e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b840:	430b      	orrs	r3, r1
 800b842:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b844:	430b      	orrs	r3, r1
 800b846:	d120      	bne.n	800b88a <_dtoa_r+0xa72>
 800b848:	2a00      	cmp	r2, #0
 800b84a:	dded      	ble.n	800b828 <_dtoa_r+0xa10>
 800b84c:	4649      	mov	r1, r9
 800b84e:	2201      	movs	r2, #1
 800b850:	4658      	mov	r0, fp
 800b852:	f000 fbb3 	bl	800bfbc <__lshift>
 800b856:	4621      	mov	r1, r4
 800b858:	4681      	mov	r9, r0
 800b85a:	f000 fc1b 	bl	800c094 <__mcmp>
 800b85e:	2800      	cmp	r0, #0
 800b860:	dc03      	bgt.n	800b86a <_dtoa_r+0xa52>
 800b862:	d1e1      	bne.n	800b828 <_dtoa_r+0xa10>
 800b864:	f018 0f01 	tst.w	r8, #1
 800b868:	d0de      	beq.n	800b828 <_dtoa_r+0xa10>
 800b86a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b86e:	d1d8      	bne.n	800b822 <_dtoa_r+0xa0a>
 800b870:	9a00      	ldr	r2, [sp, #0]
 800b872:	2339      	movs	r3, #57	@ 0x39
 800b874:	7013      	strb	r3, [r2, #0]
 800b876:	4633      	mov	r3, r6
 800b878:	461e      	mov	r6, r3
 800b87a:	3b01      	subs	r3, #1
 800b87c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b880:	2a39      	cmp	r2, #57	@ 0x39
 800b882:	d052      	beq.n	800b92a <_dtoa_r+0xb12>
 800b884:	3201      	adds	r2, #1
 800b886:	701a      	strb	r2, [r3, #0]
 800b888:	e612      	b.n	800b4b0 <_dtoa_r+0x698>
 800b88a:	2a00      	cmp	r2, #0
 800b88c:	dd07      	ble.n	800b89e <_dtoa_r+0xa86>
 800b88e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b892:	d0ed      	beq.n	800b870 <_dtoa_r+0xa58>
 800b894:	9a00      	ldr	r2, [sp, #0]
 800b896:	f108 0301 	add.w	r3, r8, #1
 800b89a:	7013      	strb	r3, [r2, #0]
 800b89c:	e608      	b.n	800b4b0 <_dtoa_r+0x698>
 800b89e:	9b07      	ldr	r3, [sp, #28]
 800b8a0:	9a07      	ldr	r2, [sp, #28]
 800b8a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b8a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d028      	beq.n	800b8fe <_dtoa_r+0xae6>
 800b8ac:	4649      	mov	r1, r9
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	220a      	movs	r2, #10
 800b8b2:	4658      	mov	r0, fp
 800b8b4:	f000 f9d6 	bl	800bc64 <__multadd>
 800b8b8:	42af      	cmp	r7, r5
 800b8ba:	4681      	mov	r9, r0
 800b8bc:	f04f 0300 	mov.w	r3, #0
 800b8c0:	f04f 020a 	mov.w	r2, #10
 800b8c4:	4639      	mov	r1, r7
 800b8c6:	4658      	mov	r0, fp
 800b8c8:	d107      	bne.n	800b8da <_dtoa_r+0xac2>
 800b8ca:	f000 f9cb 	bl	800bc64 <__multadd>
 800b8ce:	4607      	mov	r7, r0
 800b8d0:	4605      	mov	r5, r0
 800b8d2:	9b07      	ldr	r3, [sp, #28]
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	9307      	str	r3, [sp, #28]
 800b8d8:	e774      	b.n	800b7c4 <_dtoa_r+0x9ac>
 800b8da:	f000 f9c3 	bl	800bc64 <__multadd>
 800b8de:	4629      	mov	r1, r5
 800b8e0:	4607      	mov	r7, r0
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	220a      	movs	r2, #10
 800b8e6:	4658      	mov	r0, fp
 800b8e8:	f000 f9bc 	bl	800bc64 <__multadd>
 800b8ec:	4605      	mov	r5, r0
 800b8ee:	e7f0      	b.n	800b8d2 <_dtoa_r+0xaba>
 800b8f0:	9b00      	ldr	r3, [sp, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	bfcc      	ite	gt
 800b8f6:	461e      	movgt	r6, r3
 800b8f8:	2601      	movle	r6, #1
 800b8fa:	4456      	add	r6, sl
 800b8fc:	2700      	movs	r7, #0
 800b8fe:	4649      	mov	r1, r9
 800b900:	2201      	movs	r2, #1
 800b902:	4658      	mov	r0, fp
 800b904:	f000 fb5a 	bl	800bfbc <__lshift>
 800b908:	4621      	mov	r1, r4
 800b90a:	4681      	mov	r9, r0
 800b90c:	f000 fbc2 	bl	800c094 <__mcmp>
 800b910:	2800      	cmp	r0, #0
 800b912:	dcb0      	bgt.n	800b876 <_dtoa_r+0xa5e>
 800b914:	d102      	bne.n	800b91c <_dtoa_r+0xb04>
 800b916:	f018 0f01 	tst.w	r8, #1
 800b91a:	d1ac      	bne.n	800b876 <_dtoa_r+0xa5e>
 800b91c:	4633      	mov	r3, r6
 800b91e:	461e      	mov	r6, r3
 800b920:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b924:	2a30      	cmp	r2, #48	@ 0x30
 800b926:	d0fa      	beq.n	800b91e <_dtoa_r+0xb06>
 800b928:	e5c2      	b.n	800b4b0 <_dtoa_r+0x698>
 800b92a:	459a      	cmp	sl, r3
 800b92c:	d1a4      	bne.n	800b878 <_dtoa_r+0xa60>
 800b92e:	9b04      	ldr	r3, [sp, #16]
 800b930:	3301      	adds	r3, #1
 800b932:	9304      	str	r3, [sp, #16]
 800b934:	2331      	movs	r3, #49	@ 0x31
 800b936:	f88a 3000 	strb.w	r3, [sl]
 800b93a:	e5b9      	b.n	800b4b0 <_dtoa_r+0x698>
 800b93c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b93e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b99c <_dtoa_r+0xb84>
 800b942:	b11b      	cbz	r3, 800b94c <_dtoa_r+0xb34>
 800b944:	f10a 0308 	add.w	r3, sl, #8
 800b948:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b94a:	6013      	str	r3, [r2, #0]
 800b94c:	4650      	mov	r0, sl
 800b94e:	b019      	add	sp, #100	@ 0x64
 800b950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b956:	2b01      	cmp	r3, #1
 800b958:	f77f ae37 	ble.w	800b5ca <_dtoa_r+0x7b2>
 800b95c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b95e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b960:	2001      	movs	r0, #1
 800b962:	e655      	b.n	800b610 <_dtoa_r+0x7f8>
 800b964:	9b00      	ldr	r3, [sp, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	f77f aed6 	ble.w	800b718 <_dtoa_r+0x900>
 800b96c:	4656      	mov	r6, sl
 800b96e:	4621      	mov	r1, r4
 800b970:	4648      	mov	r0, r9
 800b972:	f7ff f9c6 	bl	800ad02 <quorem>
 800b976:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b97a:	f806 8b01 	strb.w	r8, [r6], #1
 800b97e:	9b00      	ldr	r3, [sp, #0]
 800b980:	eba6 020a 	sub.w	r2, r6, sl
 800b984:	4293      	cmp	r3, r2
 800b986:	ddb3      	ble.n	800b8f0 <_dtoa_r+0xad8>
 800b988:	4649      	mov	r1, r9
 800b98a:	2300      	movs	r3, #0
 800b98c:	220a      	movs	r2, #10
 800b98e:	4658      	mov	r0, fp
 800b990:	f000 f968 	bl	800bc64 <__multadd>
 800b994:	4681      	mov	r9, r0
 800b996:	e7ea      	b.n	800b96e <_dtoa_r+0xb56>
 800b998:	0800d38c 	.word	0x0800d38c
 800b99c:	0800d310 	.word	0x0800d310

0800b9a0 <_free_r>:
 800b9a0:	b538      	push	{r3, r4, r5, lr}
 800b9a2:	4605      	mov	r5, r0
 800b9a4:	2900      	cmp	r1, #0
 800b9a6:	d041      	beq.n	800ba2c <_free_r+0x8c>
 800b9a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9ac:	1f0c      	subs	r4, r1, #4
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	bfb8      	it	lt
 800b9b2:	18e4      	addlt	r4, r4, r3
 800b9b4:	f000 f8e8 	bl	800bb88 <__malloc_lock>
 800b9b8:	4a1d      	ldr	r2, [pc, #116]	@ (800ba30 <_free_r+0x90>)
 800b9ba:	6813      	ldr	r3, [r2, #0]
 800b9bc:	b933      	cbnz	r3, 800b9cc <_free_r+0x2c>
 800b9be:	6063      	str	r3, [r4, #4]
 800b9c0:	6014      	str	r4, [r2, #0]
 800b9c2:	4628      	mov	r0, r5
 800b9c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9c8:	f000 b8e4 	b.w	800bb94 <__malloc_unlock>
 800b9cc:	42a3      	cmp	r3, r4
 800b9ce:	d908      	bls.n	800b9e2 <_free_r+0x42>
 800b9d0:	6820      	ldr	r0, [r4, #0]
 800b9d2:	1821      	adds	r1, r4, r0
 800b9d4:	428b      	cmp	r3, r1
 800b9d6:	bf01      	itttt	eq
 800b9d8:	6819      	ldreq	r1, [r3, #0]
 800b9da:	685b      	ldreq	r3, [r3, #4]
 800b9dc:	1809      	addeq	r1, r1, r0
 800b9de:	6021      	streq	r1, [r4, #0]
 800b9e0:	e7ed      	b.n	800b9be <_free_r+0x1e>
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	b10b      	cbz	r3, 800b9ec <_free_r+0x4c>
 800b9e8:	42a3      	cmp	r3, r4
 800b9ea:	d9fa      	bls.n	800b9e2 <_free_r+0x42>
 800b9ec:	6811      	ldr	r1, [r2, #0]
 800b9ee:	1850      	adds	r0, r2, r1
 800b9f0:	42a0      	cmp	r0, r4
 800b9f2:	d10b      	bne.n	800ba0c <_free_r+0x6c>
 800b9f4:	6820      	ldr	r0, [r4, #0]
 800b9f6:	4401      	add	r1, r0
 800b9f8:	1850      	adds	r0, r2, r1
 800b9fa:	4283      	cmp	r3, r0
 800b9fc:	6011      	str	r1, [r2, #0]
 800b9fe:	d1e0      	bne.n	800b9c2 <_free_r+0x22>
 800ba00:	6818      	ldr	r0, [r3, #0]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	6053      	str	r3, [r2, #4]
 800ba06:	4408      	add	r0, r1
 800ba08:	6010      	str	r0, [r2, #0]
 800ba0a:	e7da      	b.n	800b9c2 <_free_r+0x22>
 800ba0c:	d902      	bls.n	800ba14 <_free_r+0x74>
 800ba0e:	230c      	movs	r3, #12
 800ba10:	602b      	str	r3, [r5, #0]
 800ba12:	e7d6      	b.n	800b9c2 <_free_r+0x22>
 800ba14:	6820      	ldr	r0, [r4, #0]
 800ba16:	1821      	adds	r1, r4, r0
 800ba18:	428b      	cmp	r3, r1
 800ba1a:	bf04      	itt	eq
 800ba1c:	6819      	ldreq	r1, [r3, #0]
 800ba1e:	685b      	ldreq	r3, [r3, #4]
 800ba20:	6063      	str	r3, [r4, #4]
 800ba22:	bf04      	itt	eq
 800ba24:	1809      	addeq	r1, r1, r0
 800ba26:	6021      	streq	r1, [r4, #0]
 800ba28:	6054      	str	r4, [r2, #4]
 800ba2a:	e7ca      	b.n	800b9c2 <_free_r+0x22>
 800ba2c:	bd38      	pop	{r3, r4, r5, pc}
 800ba2e:	bf00      	nop
 800ba30:	2000244c 	.word	0x2000244c

0800ba34 <malloc>:
 800ba34:	4b02      	ldr	r3, [pc, #8]	@ (800ba40 <malloc+0xc>)
 800ba36:	4601      	mov	r1, r0
 800ba38:	6818      	ldr	r0, [r3, #0]
 800ba3a:	f000 b825 	b.w	800ba88 <_malloc_r>
 800ba3e:	bf00      	nop
 800ba40:	2000001c 	.word	0x2000001c

0800ba44 <sbrk_aligned>:
 800ba44:	b570      	push	{r4, r5, r6, lr}
 800ba46:	4e0f      	ldr	r6, [pc, #60]	@ (800ba84 <sbrk_aligned+0x40>)
 800ba48:	460c      	mov	r4, r1
 800ba4a:	6831      	ldr	r1, [r6, #0]
 800ba4c:	4605      	mov	r5, r0
 800ba4e:	b911      	cbnz	r1, 800ba56 <sbrk_aligned+0x12>
 800ba50:	f000 fe9a 	bl	800c788 <_sbrk_r>
 800ba54:	6030      	str	r0, [r6, #0]
 800ba56:	4621      	mov	r1, r4
 800ba58:	4628      	mov	r0, r5
 800ba5a:	f000 fe95 	bl	800c788 <_sbrk_r>
 800ba5e:	1c43      	adds	r3, r0, #1
 800ba60:	d103      	bne.n	800ba6a <sbrk_aligned+0x26>
 800ba62:	f04f 34ff 	mov.w	r4, #4294967295
 800ba66:	4620      	mov	r0, r4
 800ba68:	bd70      	pop	{r4, r5, r6, pc}
 800ba6a:	1cc4      	adds	r4, r0, #3
 800ba6c:	f024 0403 	bic.w	r4, r4, #3
 800ba70:	42a0      	cmp	r0, r4
 800ba72:	d0f8      	beq.n	800ba66 <sbrk_aligned+0x22>
 800ba74:	1a21      	subs	r1, r4, r0
 800ba76:	4628      	mov	r0, r5
 800ba78:	f000 fe86 	bl	800c788 <_sbrk_r>
 800ba7c:	3001      	adds	r0, #1
 800ba7e:	d1f2      	bne.n	800ba66 <sbrk_aligned+0x22>
 800ba80:	e7ef      	b.n	800ba62 <sbrk_aligned+0x1e>
 800ba82:	bf00      	nop
 800ba84:	20002448 	.word	0x20002448

0800ba88 <_malloc_r>:
 800ba88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba8c:	1ccd      	adds	r5, r1, #3
 800ba8e:	f025 0503 	bic.w	r5, r5, #3
 800ba92:	3508      	adds	r5, #8
 800ba94:	2d0c      	cmp	r5, #12
 800ba96:	bf38      	it	cc
 800ba98:	250c      	movcc	r5, #12
 800ba9a:	2d00      	cmp	r5, #0
 800ba9c:	4606      	mov	r6, r0
 800ba9e:	db01      	blt.n	800baa4 <_malloc_r+0x1c>
 800baa0:	42a9      	cmp	r1, r5
 800baa2:	d904      	bls.n	800baae <_malloc_r+0x26>
 800baa4:	230c      	movs	r3, #12
 800baa6:	6033      	str	r3, [r6, #0]
 800baa8:	2000      	movs	r0, #0
 800baaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bb84 <_malloc_r+0xfc>
 800bab2:	f000 f869 	bl	800bb88 <__malloc_lock>
 800bab6:	f8d8 3000 	ldr.w	r3, [r8]
 800baba:	461c      	mov	r4, r3
 800babc:	bb44      	cbnz	r4, 800bb10 <_malloc_r+0x88>
 800babe:	4629      	mov	r1, r5
 800bac0:	4630      	mov	r0, r6
 800bac2:	f7ff ffbf 	bl	800ba44 <sbrk_aligned>
 800bac6:	1c43      	adds	r3, r0, #1
 800bac8:	4604      	mov	r4, r0
 800baca:	d158      	bne.n	800bb7e <_malloc_r+0xf6>
 800bacc:	f8d8 4000 	ldr.w	r4, [r8]
 800bad0:	4627      	mov	r7, r4
 800bad2:	2f00      	cmp	r7, #0
 800bad4:	d143      	bne.n	800bb5e <_malloc_r+0xd6>
 800bad6:	2c00      	cmp	r4, #0
 800bad8:	d04b      	beq.n	800bb72 <_malloc_r+0xea>
 800bada:	6823      	ldr	r3, [r4, #0]
 800badc:	4639      	mov	r1, r7
 800bade:	4630      	mov	r0, r6
 800bae0:	eb04 0903 	add.w	r9, r4, r3
 800bae4:	f000 fe50 	bl	800c788 <_sbrk_r>
 800bae8:	4581      	cmp	r9, r0
 800baea:	d142      	bne.n	800bb72 <_malloc_r+0xea>
 800baec:	6821      	ldr	r1, [r4, #0]
 800baee:	1a6d      	subs	r5, r5, r1
 800baf0:	4629      	mov	r1, r5
 800baf2:	4630      	mov	r0, r6
 800baf4:	f7ff ffa6 	bl	800ba44 <sbrk_aligned>
 800baf8:	3001      	adds	r0, #1
 800bafa:	d03a      	beq.n	800bb72 <_malloc_r+0xea>
 800bafc:	6823      	ldr	r3, [r4, #0]
 800bafe:	442b      	add	r3, r5
 800bb00:	6023      	str	r3, [r4, #0]
 800bb02:	f8d8 3000 	ldr.w	r3, [r8]
 800bb06:	685a      	ldr	r2, [r3, #4]
 800bb08:	bb62      	cbnz	r2, 800bb64 <_malloc_r+0xdc>
 800bb0a:	f8c8 7000 	str.w	r7, [r8]
 800bb0e:	e00f      	b.n	800bb30 <_malloc_r+0xa8>
 800bb10:	6822      	ldr	r2, [r4, #0]
 800bb12:	1b52      	subs	r2, r2, r5
 800bb14:	d420      	bmi.n	800bb58 <_malloc_r+0xd0>
 800bb16:	2a0b      	cmp	r2, #11
 800bb18:	d917      	bls.n	800bb4a <_malloc_r+0xc2>
 800bb1a:	1961      	adds	r1, r4, r5
 800bb1c:	42a3      	cmp	r3, r4
 800bb1e:	6025      	str	r5, [r4, #0]
 800bb20:	bf18      	it	ne
 800bb22:	6059      	strne	r1, [r3, #4]
 800bb24:	6863      	ldr	r3, [r4, #4]
 800bb26:	bf08      	it	eq
 800bb28:	f8c8 1000 	streq.w	r1, [r8]
 800bb2c:	5162      	str	r2, [r4, r5]
 800bb2e:	604b      	str	r3, [r1, #4]
 800bb30:	4630      	mov	r0, r6
 800bb32:	f000 f82f 	bl	800bb94 <__malloc_unlock>
 800bb36:	f104 000b 	add.w	r0, r4, #11
 800bb3a:	1d23      	adds	r3, r4, #4
 800bb3c:	f020 0007 	bic.w	r0, r0, #7
 800bb40:	1ac2      	subs	r2, r0, r3
 800bb42:	bf1c      	itt	ne
 800bb44:	1a1b      	subne	r3, r3, r0
 800bb46:	50a3      	strne	r3, [r4, r2]
 800bb48:	e7af      	b.n	800baaa <_malloc_r+0x22>
 800bb4a:	6862      	ldr	r2, [r4, #4]
 800bb4c:	42a3      	cmp	r3, r4
 800bb4e:	bf0c      	ite	eq
 800bb50:	f8c8 2000 	streq.w	r2, [r8]
 800bb54:	605a      	strne	r2, [r3, #4]
 800bb56:	e7eb      	b.n	800bb30 <_malloc_r+0xa8>
 800bb58:	4623      	mov	r3, r4
 800bb5a:	6864      	ldr	r4, [r4, #4]
 800bb5c:	e7ae      	b.n	800babc <_malloc_r+0x34>
 800bb5e:	463c      	mov	r4, r7
 800bb60:	687f      	ldr	r7, [r7, #4]
 800bb62:	e7b6      	b.n	800bad2 <_malloc_r+0x4a>
 800bb64:	461a      	mov	r2, r3
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	42a3      	cmp	r3, r4
 800bb6a:	d1fb      	bne.n	800bb64 <_malloc_r+0xdc>
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	6053      	str	r3, [r2, #4]
 800bb70:	e7de      	b.n	800bb30 <_malloc_r+0xa8>
 800bb72:	230c      	movs	r3, #12
 800bb74:	6033      	str	r3, [r6, #0]
 800bb76:	4630      	mov	r0, r6
 800bb78:	f000 f80c 	bl	800bb94 <__malloc_unlock>
 800bb7c:	e794      	b.n	800baa8 <_malloc_r+0x20>
 800bb7e:	6005      	str	r5, [r0, #0]
 800bb80:	e7d6      	b.n	800bb30 <_malloc_r+0xa8>
 800bb82:	bf00      	nop
 800bb84:	2000244c 	.word	0x2000244c

0800bb88 <__malloc_lock>:
 800bb88:	4801      	ldr	r0, [pc, #4]	@ (800bb90 <__malloc_lock+0x8>)
 800bb8a:	f7ff b8aa 	b.w	800ace2 <__retarget_lock_acquire_recursive>
 800bb8e:	bf00      	nop
 800bb90:	20002444 	.word	0x20002444

0800bb94 <__malloc_unlock>:
 800bb94:	4801      	ldr	r0, [pc, #4]	@ (800bb9c <__malloc_unlock+0x8>)
 800bb96:	f7ff b8a5 	b.w	800ace4 <__retarget_lock_release_recursive>
 800bb9a:	bf00      	nop
 800bb9c:	20002444 	.word	0x20002444

0800bba0 <_Balloc>:
 800bba0:	b570      	push	{r4, r5, r6, lr}
 800bba2:	69c6      	ldr	r6, [r0, #28]
 800bba4:	4604      	mov	r4, r0
 800bba6:	460d      	mov	r5, r1
 800bba8:	b976      	cbnz	r6, 800bbc8 <_Balloc+0x28>
 800bbaa:	2010      	movs	r0, #16
 800bbac:	f7ff ff42 	bl	800ba34 <malloc>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	61e0      	str	r0, [r4, #28]
 800bbb4:	b920      	cbnz	r0, 800bbc0 <_Balloc+0x20>
 800bbb6:	4b18      	ldr	r3, [pc, #96]	@ (800bc18 <_Balloc+0x78>)
 800bbb8:	4818      	ldr	r0, [pc, #96]	@ (800bc1c <_Balloc+0x7c>)
 800bbba:	216b      	movs	r1, #107	@ 0x6b
 800bbbc:	f000 fdf4 	bl	800c7a8 <__assert_func>
 800bbc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbc4:	6006      	str	r6, [r0, #0]
 800bbc6:	60c6      	str	r6, [r0, #12]
 800bbc8:	69e6      	ldr	r6, [r4, #28]
 800bbca:	68f3      	ldr	r3, [r6, #12]
 800bbcc:	b183      	cbz	r3, 800bbf0 <_Balloc+0x50>
 800bbce:	69e3      	ldr	r3, [r4, #28]
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bbd6:	b9b8      	cbnz	r0, 800bc08 <_Balloc+0x68>
 800bbd8:	2101      	movs	r1, #1
 800bbda:	fa01 f605 	lsl.w	r6, r1, r5
 800bbde:	1d72      	adds	r2, r6, #5
 800bbe0:	0092      	lsls	r2, r2, #2
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	f000 fdfe 	bl	800c7e4 <_calloc_r>
 800bbe8:	b160      	cbz	r0, 800bc04 <_Balloc+0x64>
 800bbea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bbee:	e00e      	b.n	800bc0e <_Balloc+0x6e>
 800bbf0:	2221      	movs	r2, #33	@ 0x21
 800bbf2:	2104      	movs	r1, #4
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	f000 fdf5 	bl	800c7e4 <_calloc_r>
 800bbfa:	69e3      	ldr	r3, [r4, #28]
 800bbfc:	60f0      	str	r0, [r6, #12]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d1e4      	bne.n	800bbce <_Balloc+0x2e>
 800bc04:	2000      	movs	r0, #0
 800bc06:	bd70      	pop	{r4, r5, r6, pc}
 800bc08:	6802      	ldr	r2, [r0, #0]
 800bc0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc0e:	2300      	movs	r3, #0
 800bc10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc14:	e7f7      	b.n	800bc06 <_Balloc+0x66>
 800bc16:	bf00      	nop
 800bc18:	0800d31d 	.word	0x0800d31d
 800bc1c:	0800d39d 	.word	0x0800d39d

0800bc20 <_Bfree>:
 800bc20:	b570      	push	{r4, r5, r6, lr}
 800bc22:	69c6      	ldr	r6, [r0, #28]
 800bc24:	4605      	mov	r5, r0
 800bc26:	460c      	mov	r4, r1
 800bc28:	b976      	cbnz	r6, 800bc48 <_Bfree+0x28>
 800bc2a:	2010      	movs	r0, #16
 800bc2c:	f7ff ff02 	bl	800ba34 <malloc>
 800bc30:	4602      	mov	r2, r0
 800bc32:	61e8      	str	r0, [r5, #28]
 800bc34:	b920      	cbnz	r0, 800bc40 <_Bfree+0x20>
 800bc36:	4b09      	ldr	r3, [pc, #36]	@ (800bc5c <_Bfree+0x3c>)
 800bc38:	4809      	ldr	r0, [pc, #36]	@ (800bc60 <_Bfree+0x40>)
 800bc3a:	218f      	movs	r1, #143	@ 0x8f
 800bc3c:	f000 fdb4 	bl	800c7a8 <__assert_func>
 800bc40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc44:	6006      	str	r6, [r0, #0]
 800bc46:	60c6      	str	r6, [r0, #12]
 800bc48:	b13c      	cbz	r4, 800bc5a <_Bfree+0x3a>
 800bc4a:	69eb      	ldr	r3, [r5, #28]
 800bc4c:	6862      	ldr	r2, [r4, #4]
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc54:	6021      	str	r1, [r4, #0]
 800bc56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc5a:	bd70      	pop	{r4, r5, r6, pc}
 800bc5c:	0800d31d 	.word	0x0800d31d
 800bc60:	0800d39d 	.word	0x0800d39d

0800bc64 <__multadd>:
 800bc64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc68:	690d      	ldr	r5, [r1, #16]
 800bc6a:	4607      	mov	r7, r0
 800bc6c:	460c      	mov	r4, r1
 800bc6e:	461e      	mov	r6, r3
 800bc70:	f101 0c14 	add.w	ip, r1, #20
 800bc74:	2000      	movs	r0, #0
 800bc76:	f8dc 3000 	ldr.w	r3, [ip]
 800bc7a:	b299      	uxth	r1, r3
 800bc7c:	fb02 6101 	mla	r1, r2, r1, r6
 800bc80:	0c1e      	lsrs	r6, r3, #16
 800bc82:	0c0b      	lsrs	r3, r1, #16
 800bc84:	fb02 3306 	mla	r3, r2, r6, r3
 800bc88:	b289      	uxth	r1, r1
 800bc8a:	3001      	adds	r0, #1
 800bc8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc90:	4285      	cmp	r5, r0
 800bc92:	f84c 1b04 	str.w	r1, [ip], #4
 800bc96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc9a:	dcec      	bgt.n	800bc76 <__multadd+0x12>
 800bc9c:	b30e      	cbz	r6, 800bce2 <__multadd+0x7e>
 800bc9e:	68a3      	ldr	r3, [r4, #8]
 800bca0:	42ab      	cmp	r3, r5
 800bca2:	dc19      	bgt.n	800bcd8 <__multadd+0x74>
 800bca4:	6861      	ldr	r1, [r4, #4]
 800bca6:	4638      	mov	r0, r7
 800bca8:	3101      	adds	r1, #1
 800bcaa:	f7ff ff79 	bl	800bba0 <_Balloc>
 800bcae:	4680      	mov	r8, r0
 800bcb0:	b928      	cbnz	r0, 800bcbe <__multadd+0x5a>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	4b0c      	ldr	r3, [pc, #48]	@ (800bce8 <__multadd+0x84>)
 800bcb6:	480d      	ldr	r0, [pc, #52]	@ (800bcec <__multadd+0x88>)
 800bcb8:	21ba      	movs	r1, #186	@ 0xba
 800bcba:	f000 fd75 	bl	800c7a8 <__assert_func>
 800bcbe:	6922      	ldr	r2, [r4, #16]
 800bcc0:	3202      	adds	r2, #2
 800bcc2:	f104 010c 	add.w	r1, r4, #12
 800bcc6:	0092      	lsls	r2, r2, #2
 800bcc8:	300c      	adds	r0, #12
 800bcca:	f7ff f80c 	bl	800ace6 <memcpy>
 800bcce:	4621      	mov	r1, r4
 800bcd0:	4638      	mov	r0, r7
 800bcd2:	f7ff ffa5 	bl	800bc20 <_Bfree>
 800bcd6:	4644      	mov	r4, r8
 800bcd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bcdc:	3501      	adds	r5, #1
 800bcde:	615e      	str	r6, [r3, #20]
 800bce0:	6125      	str	r5, [r4, #16]
 800bce2:	4620      	mov	r0, r4
 800bce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bce8:	0800d38c 	.word	0x0800d38c
 800bcec:	0800d39d 	.word	0x0800d39d

0800bcf0 <__hi0bits>:
 800bcf0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	bf36      	itet	cc
 800bcf8:	0403      	lslcc	r3, r0, #16
 800bcfa:	2000      	movcs	r0, #0
 800bcfc:	2010      	movcc	r0, #16
 800bcfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bd02:	bf3c      	itt	cc
 800bd04:	021b      	lslcc	r3, r3, #8
 800bd06:	3008      	addcc	r0, #8
 800bd08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd0c:	bf3c      	itt	cc
 800bd0e:	011b      	lslcc	r3, r3, #4
 800bd10:	3004      	addcc	r0, #4
 800bd12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd16:	bf3c      	itt	cc
 800bd18:	009b      	lslcc	r3, r3, #2
 800bd1a:	3002      	addcc	r0, #2
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	db05      	blt.n	800bd2c <__hi0bits+0x3c>
 800bd20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bd24:	f100 0001 	add.w	r0, r0, #1
 800bd28:	bf08      	it	eq
 800bd2a:	2020      	moveq	r0, #32
 800bd2c:	4770      	bx	lr

0800bd2e <__lo0bits>:
 800bd2e:	6803      	ldr	r3, [r0, #0]
 800bd30:	4602      	mov	r2, r0
 800bd32:	f013 0007 	ands.w	r0, r3, #7
 800bd36:	d00b      	beq.n	800bd50 <__lo0bits+0x22>
 800bd38:	07d9      	lsls	r1, r3, #31
 800bd3a:	d421      	bmi.n	800bd80 <__lo0bits+0x52>
 800bd3c:	0798      	lsls	r0, r3, #30
 800bd3e:	bf49      	itett	mi
 800bd40:	085b      	lsrmi	r3, r3, #1
 800bd42:	089b      	lsrpl	r3, r3, #2
 800bd44:	2001      	movmi	r0, #1
 800bd46:	6013      	strmi	r3, [r2, #0]
 800bd48:	bf5c      	itt	pl
 800bd4a:	6013      	strpl	r3, [r2, #0]
 800bd4c:	2002      	movpl	r0, #2
 800bd4e:	4770      	bx	lr
 800bd50:	b299      	uxth	r1, r3
 800bd52:	b909      	cbnz	r1, 800bd58 <__lo0bits+0x2a>
 800bd54:	0c1b      	lsrs	r3, r3, #16
 800bd56:	2010      	movs	r0, #16
 800bd58:	b2d9      	uxtb	r1, r3
 800bd5a:	b909      	cbnz	r1, 800bd60 <__lo0bits+0x32>
 800bd5c:	3008      	adds	r0, #8
 800bd5e:	0a1b      	lsrs	r3, r3, #8
 800bd60:	0719      	lsls	r1, r3, #28
 800bd62:	bf04      	itt	eq
 800bd64:	091b      	lsreq	r3, r3, #4
 800bd66:	3004      	addeq	r0, #4
 800bd68:	0799      	lsls	r1, r3, #30
 800bd6a:	bf04      	itt	eq
 800bd6c:	089b      	lsreq	r3, r3, #2
 800bd6e:	3002      	addeq	r0, #2
 800bd70:	07d9      	lsls	r1, r3, #31
 800bd72:	d403      	bmi.n	800bd7c <__lo0bits+0x4e>
 800bd74:	085b      	lsrs	r3, r3, #1
 800bd76:	f100 0001 	add.w	r0, r0, #1
 800bd7a:	d003      	beq.n	800bd84 <__lo0bits+0x56>
 800bd7c:	6013      	str	r3, [r2, #0]
 800bd7e:	4770      	bx	lr
 800bd80:	2000      	movs	r0, #0
 800bd82:	4770      	bx	lr
 800bd84:	2020      	movs	r0, #32
 800bd86:	4770      	bx	lr

0800bd88 <__i2b>:
 800bd88:	b510      	push	{r4, lr}
 800bd8a:	460c      	mov	r4, r1
 800bd8c:	2101      	movs	r1, #1
 800bd8e:	f7ff ff07 	bl	800bba0 <_Balloc>
 800bd92:	4602      	mov	r2, r0
 800bd94:	b928      	cbnz	r0, 800bda2 <__i2b+0x1a>
 800bd96:	4b05      	ldr	r3, [pc, #20]	@ (800bdac <__i2b+0x24>)
 800bd98:	4805      	ldr	r0, [pc, #20]	@ (800bdb0 <__i2b+0x28>)
 800bd9a:	f240 1145 	movw	r1, #325	@ 0x145
 800bd9e:	f000 fd03 	bl	800c7a8 <__assert_func>
 800bda2:	2301      	movs	r3, #1
 800bda4:	6144      	str	r4, [r0, #20]
 800bda6:	6103      	str	r3, [r0, #16]
 800bda8:	bd10      	pop	{r4, pc}
 800bdaa:	bf00      	nop
 800bdac:	0800d38c 	.word	0x0800d38c
 800bdb0:	0800d39d 	.word	0x0800d39d

0800bdb4 <__multiply>:
 800bdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb8:	4614      	mov	r4, r2
 800bdba:	690a      	ldr	r2, [r1, #16]
 800bdbc:	6923      	ldr	r3, [r4, #16]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	bfa8      	it	ge
 800bdc2:	4623      	movge	r3, r4
 800bdc4:	460f      	mov	r7, r1
 800bdc6:	bfa4      	itt	ge
 800bdc8:	460c      	movge	r4, r1
 800bdca:	461f      	movge	r7, r3
 800bdcc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bdd0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bdd4:	68a3      	ldr	r3, [r4, #8]
 800bdd6:	6861      	ldr	r1, [r4, #4]
 800bdd8:	eb0a 0609 	add.w	r6, sl, r9
 800bddc:	42b3      	cmp	r3, r6
 800bdde:	b085      	sub	sp, #20
 800bde0:	bfb8      	it	lt
 800bde2:	3101      	addlt	r1, #1
 800bde4:	f7ff fedc 	bl	800bba0 <_Balloc>
 800bde8:	b930      	cbnz	r0, 800bdf8 <__multiply+0x44>
 800bdea:	4602      	mov	r2, r0
 800bdec:	4b44      	ldr	r3, [pc, #272]	@ (800bf00 <__multiply+0x14c>)
 800bdee:	4845      	ldr	r0, [pc, #276]	@ (800bf04 <__multiply+0x150>)
 800bdf0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bdf4:	f000 fcd8 	bl	800c7a8 <__assert_func>
 800bdf8:	f100 0514 	add.w	r5, r0, #20
 800bdfc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be00:	462b      	mov	r3, r5
 800be02:	2200      	movs	r2, #0
 800be04:	4543      	cmp	r3, r8
 800be06:	d321      	bcc.n	800be4c <__multiply+0x98>
 800be08:	f107 0114 	add.w	r1, r7, #20
 800be0c:	f104 0214 	add.w	r2, r4, #20
 800be10:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800be14:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800be18:	9302      	str	r3, [sp, #8]
 800be1a:	1b13      	subs	r3, r2, r4
 800be1c:	3b15      	subs	r3, #21
 800be1e:	f023 0303 	bic.w	r3, r3, #3
 800be22:	3304      	adds	r3, #4
 800be24:	f104 0715 	add.w	r7, r4, #21
 800be28:	42ba      	cmp	r2, r7
 800be2a:	bf38      	it	cc
 800be2c:	2304      	movcc	r3, #4
 800be2e:	9301      	str	r3, [sp, #4]
 800be30:	9b02      	ldr	r3, [sp, #8]
 800be32:	9103      	str	r1, [sp, #12]
 800be34:	428b      	cmp	r3, r1
 800be36:	d80c      	bhi.n	800be52 <__multiply+0x9e>
 800be38:	2e00      	cmp	r6, #0
 800be3a:	dd03      	ble.n	800be44 <__multiply+0x90>
 800be3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be40:	2b00      	cmp	r3, #0
 800be42:	d05b      	beq.n	800befc <__multiply+0x148>
 800be44:	6106      	str	r6, [r0, #16]
 800be46:	b005      	add	sp, #20
 800be48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be4c:	f843 2b04 	str.w	r2, [r3], #4
 800be50:	e7d8      	b.n	800be04 <__multiply+0x50>
 800be52:	f8b1 a000 	ldrh.w	sl, [r1]
 800be56:	f1ba 0f00 	cmp.w	sl, #0
 800be5a:	d024      	beq.n	800bea6 <__multiply+0xf2>
 800be5c:	f104 0e14 	add.w	lr, r4, #20
 800be60:	46a9      	mov	r9, r5
 800be62:	f04f 0c00 	mov.w	ip, #0
 800be66:	f85e 7b04 	ldr.w	r7, [lr], #4
 800be6a:	f8d9 3000 	ldr.w	r3, [r9]
 800be6e:	fa1f fb87 	uxth.w	fp, r7
 800be72:	b29b      	uxth	r3, r3
 800be74:	fb0a 330b 	mla	r3, sl, fp, r3
 800be78:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800be7c:	f8d9 7000 	ldr.w	r7, [r9]
 800be80:	4463      	add	r3, ip
 800be82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800be86:	fb0a c70b 	mla	r7, sl, fp, ip
 800be8a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800be8e:	b29b      	uxth	r3, r3
 800be90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800be94:	4572      	cmp	r2, lr
 800be96:	f849 3b04 	str.w	r3, [r9], #4
 800be9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800be9e:	d8e2      	bhi.n	800be66 <__multiply+0xb2>
 800bea0:	9b01      	ldr	r3, [sp, #4]
 800bea2:	f845 c003 	str.w	ip, [r5, r3]
 800bea6:	9b03      	ldr	r3, [sp, #12]
 800bea8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800beac:	3104      	adds	r1, #4
 800beae:	f1b9 0f00 	cmp.w	r9, #0
 800beb2:	d021      	beq.n	800bef8 <__multiply+0x144>
 800beb4:	682b      	ldr	r3, [r5, #0]
 800beb6:	f104 0c14 	add.w	ip, r4, #20
 800beba:	46ae      	mov	lr, r5
 800bebc:	f04f 0a00 	mov.w	sl, #0
 800bec0:	f8bc b000 	ldrh.w	fp, [ip]
 800bec4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bec8:	fb09 770b 	mla	r7, r9, fp, r7
 800becc:	4457      	add	r7, sl
 800bece:	b29b      	uxth	r3, r3
 800bed0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bed4:	f84e 3b04 	str.w	r3, [lr], #4
 800bed8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bedc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bee0:	f8be 3000 	ldrh.w	r3, [lr]
 800bee4:	fb09 330a 	mla	r3, r9, sl, r3
 800bee8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800beec:	4562      	cmp	r2, ip
 800beee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bef2:	d8e5      	bhi.n	800bec0 <__multiply+0x10c>
 800bef4:	9f01      	ldr	r7, [sp, #4]
 800bef6:	51eb      	str	r3, [r5, r7]
 800bef8:	3504      	adds	r5, #4
 800befa:	e799      	b.n	800be30 <__multiply+0x7c>
 800befc:	3e01      	subs	r6, #1
 800befe:	e79b      	b.n	800be38 <__multiply+0x84>
 800bf00:	0800d38c 	.word	0x0800d38c
 800bf04:	0800d39d 	.word	0x0800d39d

0800bf08 <__pow5mult>:
 800bf08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf0c:	4615      	mov	r5, r2
 800bf0e:	f012 0203 	ands.w	r2, r2, #3
 800bf12:	4607      	mov	r7, r0
 800bf14:	460e      	mov	r6, r1
 800bf16:	d007      	beq.n	800bf28 <__pow5mult+0x20>
 800bf18:	4c25      	ldr	r4, [pc, #148]	@ (800bfb0 <__pow5mult+0xa8>)
 800bf1a:	3a01      	subs	r2, #1
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf22:	f7ff fe9f 	bl	800bc64 <__multadd>
 800bf26:	4606      	mov	r6, r0
 800bf28:	10ad      	asrs	r5, r5, #2
 800bf2a:	d03d      	beq.n	800bfa8 <__pow5mult+0xa0>
 800bf2c:	69fc      	ldr	r4, [r7, #28]
 800bf2e:	b97c      	cbnz	r4, 800bf50 <__pow5mult+0x48>
 800bf30:	2010      	movs	r0, #16
 800bf32:	f7ff fd7f 	bl	800ba34 <malloc>
 800bf36:	4602      	mov	r2, r0
 800bf38:	61f8      	str	r0, [r7, #28]
 800bf3a:	b928      	cbnz	r0, 800bf48 <__pow5mult+0x40>
 800bf3c:	4b1d      	ldr	r3, [pc, #116]	@ (800bfb4 <__pow5mult+0xac>)
 800bf3e:	481e      	ldr	r0, [pc, #120]	@ (800bfb8 <__pow5mult+0xb0>)
 800bf40:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bf44:	f000 fc30 	bl	800c7a8 <__assert_func>
 800bf48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf4c:	6004      	str	r4, [r0, #0]
 800bf4e:	60c4      	str	r4, [r0, #12]
 800bf50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bf54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf58:	b94c      	cbnz	r4, 800bf6e <__pow5mult+0x66>
 800bf5a:	f240 2171 	movw	r1, #625	@ 0x271
 800bf5e:	4638      	mov	r0, r7
 800bf60:	f7ff ff12 	bl	800bd88 <__i2b>
 800bf64:	2300      	movs	r3, #0
 800bf66:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	6003      	str	r3, [r0, #0]
 800bf6e:	f04f 0900 	mov.w	r9, #0
 800bf72:	07eb      	lsls	r3, r5, #31
 800bf74:	d50a      	bpl.n	800bf8c <__pow5mult+0x84>
 800bf76:	4631      	mov	r1, r6
 800bf78:	4622      	mov	r2, r4
 800bf7a:	4638      	mov	r0, r7
 800bf7c:	f7ff ff1a 	bl	800bdb4 <__multiply>
 800bf80:	4631      	mov	r1, r6
 800bf82:	4680      	mov	r8, r0
 800bf84:	4638      	mov	r0, r7
 800bf86:	f7ff fe4b 	bl	800bc20 <_Bfree>
 800bf8a:	4646      	mov	r6, r8
 800bf8c:	106d      	asrs	r5, r5, #1
 800bf8e:	d00b      	beq.n	800bfa8 <__pow5mult+0xa0>
 800bf90:	6820      	ldr	r0, [r4, #0]
 800bf92:	b938      	cbnz	r0, 800bfa4 <__pow5mult+0x9c>
 800bf94:	4622      	mov	r2, r4
 800bf96:	4621      	mov	r1, r4
 800bf98:	4638      	mov	r0, r7
 800bf9a:	f7ff ff0b 	bl	800bdb4 <__multiply>
 800bf9e:	6020      	str	r0, [r4, #0]
 800bfa0:	f8c0 9000 	str.w	r9, [r0]
 800bfa4:	4604      	mov	r4, r0
 800bfa6:	e7e4      	b.n	800bf72 <__pow5mult+0x6a>
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfae:	bf00      	nop
 800bfb0:	0800d3f8 	.word	0x0800d3f8
 800bfb4:	0800d31d 	.word	0x0800d31d
 800bfb8:	0800d39d 	.word	0x0800d39d

0800bfbc <__lshift>:
 800bfbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfc0:	460c      	mov	r4, r1
 800bfc2:	6849      	ldr	r1, [r1, #4]
 800bfc4:	6923      	ldr	r3, [r4, #16]
 800bfc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bfca:	68a3      	ldr	r3, [r4, #8]
 800bfcc:	4607      	mov	r7, r0
 800bfce:	4691      	mov	r9, r2
 800bfd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bfd4:	f108 0601 	add.w	r6, r8, #1
 800bfd8:	42b3      	cmp	r3, r6
 800bfda:	db0b      	blt.n	800bff4 <__lshift+0x38>
 800bfdc:	4638      	mov	r0, r7
 800bfde:	f7ff fddf 	bl	800bba0 <_Balloc>
 800bfe2:	4605      	mov	r5, r0
 800bfe4:	b948      	cbnz	r0, 800bffa <__lshift+0x3e>
 800bfe6:	4602      	mov	r2, r0
 800bfe8:	4b28      	ldr	r3, [pc, #160]	@ (800c08c <__lshift+0xd0>)
 800bfea:	4829      	ldr	r0, [pc, #164]	@ (800c090 <__lshift+0xd4>)
 800bfec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bff0:	f000 fbda 	bl	800c7a8 <__assert_func>
 800bff4:	3101      	adds	r1, #1
 800bff6:	005b      	lsls	r3, r3, #1
 800bff8:	e7ee      	b.n	800bfd8 <__lshift+0x1c>
 800bffa:	2300      	movs	r3, #0
 800bffc:	f100 0114 	add.w	r1, r0, #20
 800c000:	f100 0210 	add.w	r2, r0, #16
 800c004:	4618      	mov	r0, r3
 800c006:	4553      	cmp	r3, sl
 800c008:	db33      	blt.n	800c072 <__lshift+0xb6>
 800c00a:	6920      	ldr	r0, [r4, #16]
 800c00c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c010:	f104 0314 	add.w	r3, r4, #20
 800c014:	f019 091f 	ands.w	r9, r9, #31
 800c018:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c01c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c020:	d02b      	beq.n	800c07a <__lshift+0xbe>
 800c022:	f1c9 0e20 	rsb	lr, r9, #32
 800c026:	468a      	mov	sl, r1
 800c028:	2200      	movs	r2, #0
 800c02a:	6818      	ldr	r0, [r3, #0]
 800c02c:	fa00 f009 	lsl.w	r0, r0, r9
 800c030:	4310      	orrs	r0, r2
 800c032:	f84a 0b04 	str.w	r0, [sl], #4
 800c036:	f853 2b04 	ldr.w	r2, [r3], #4
 800c03a:	459c      	cmp	ip, r3
 800c03c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c040:	d8f3      	bhi.n	800c02a <__lshift+0x6e>
 800c042:	ebac 0304 	sub.w	r3, ip, r4
 800c046:	3b15      	subs	r3, #21
 800c048:	f023 0303 	bic.w	r3, r3, #3
 800c04c:	3304      	adds	r3, #4
 800c04e:	f104 0015 	add.w	r0, r4, #21
 800c052:	4584      	cmp	ip, r0
 800c054:	bf38      	it	cc
 800c056:	2304      	movcc	r3, #4
 800c058:	50ca      	str	r2, [r1, r3]
 800c05a:	b10a      	cbz	r2, 800c060 <__lshift+0xa4>
 800c05c:	f108 0602 	add.w	r6, r8, #2
 800c060:	3e01      	subs	r6, #1
 800c062:	4638      	mov	r0, r7
 800c064:	612e      	str	r6, [r5, #16]
 800c066:	4621      	mov	r1, r4
 800c068:	f7ff fdda 	bl	800bc20 <_Bfree>
 800c06c:	4628      	mov	r0, r5
 800c06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c072:	f842 0f04 	str.w	r0, [r2, #4]!
 800c076:	3301      	adds	r3, #1
 800c078:	e7c5      	b.n	800c006 <__lshift+0x4a>
 800c07a:	3904      	subs	r1, #4
 800c07c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c080:	f841 2f04 	str.w	r2, [r1, #4]!
 800c084:	459c      	cmp	ip, r3
 800c086:	d8f9      	bhi.n	800c07c <__lshift+0xc0>
 800c088:	e7ea      	b.n	800c060 <__lshift+0xa4>
 800c08a:	bf00      	nop
 800c08c:	0800d38c 	.word	0x0800d38c
 800c090:	0800d39d 	.word	0x0800d39d

0800c094 <__mcmp>:
 800c094:	690a      	ldr	r2, [r1, #16]
 800c096:	4603      	mov	r3, r0
 800c098:	6900      	ldr	r0, [r0, #16]
 800c09a:	1a80      	subs	r0, r0, r2
 800c09c:	b530      	push	{r4, r5, lr}
 800c09e:	d10e      	bne.n	800c0be <__mcmp+0x2a>
 800c0a0:	3314      	adds	r3, #20
 800c0a2:	3114      	adds	r1, #20
 800c0a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c0a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c0ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c0b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c0b4:	4295      	cmp	r5, r2
 800c0b6:	d003      	beq.n	800c0c0 <__mcmp+0x2c>
 800c0b8:	d205      	bcs.n	800c0c6 <__mcmp+0x32>
 800c0ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c0be:	bd30      	pop	{r4, r5, pc}
 800c0c0:	42a3      	cmp	r3, r4
 800c0c2:	d3f3      	bcc.n	800c0ac <__mcmp+0x18>
 800c0c4:	e7fb      	b.n	800c0be <__mcmp+0x2a>
 800c0c6:	2001      	movs	r0, #1
 800c0c8:	e7f9      	b.n	800c0be <__mcmp+0x2a>
	...

0800c0cc <__mdiff>:
 800c0cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d0:	4689      	mov	r9, r1
 800c0d2:	4606      	mov	r6, r0
 800c0d4:	4611      	mov	r1, r2
 800c0d6:	4648      	mov	r0, r9
 800c0d8:	4614      	mov	r4, r2
 800c0da:	f7ff ffdb 	bl	800c094 <__mcmp>
 800c0de:	1e05      	subs	r5, r0, #0
 800c0e0:	d112      	bne.n	800c108 <__mdiff+0x3c>
 800c0e2:	4629      	mov	r1, r5
 800c0e4:	4630      	mov	r0, r6
 800c0e6:	f7ff fd5b 	bl	800bba0 <_Balloc>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	b928      	cbnz	r0, 800c0fa <__mdiff+0x2e>
 800c0ee:	4b3f      	ldr	r3, [pc, #252]	@ (800c1ec <__mdiff+0x120>)
 800c0f0:	f240 2137 	movw	r1, #567	@ 0x237
 800c0f4:	483e      	ldr	r0, [pc, #248]	@ (800c1f0 <__mdiff+0x124>)
 800c0f6:	f000 fb57 	bl	800c7a8 <__assert_func>
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c100:	4610      	mov	r0, r2
 800c102:	b003      	add	sp, #12
 800c104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c108:	bfbc      	itt	lt
 800c10a:	464b      	movlt	r3, r9
 800c10c:	46a1      	movlt	r9, r4
 800c10e:	4630      	mov	r0, r6
 800c110:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c114:	bfba      	itte	lt
 800c116:	461c      	movlt	r4, r3
 800c118:	2501      	movlt	r5, #1
 800c11a:	2500      	movge	r5, #0
 800c11c:	f7ff fd40 	bl	800bba0 <_Balloc>
 800c120:	4602      	mov	r2, r0
 800c122:	b918      	cbnz	r0, 800c12c <__mdiff+0x60>
 800c124:	4b31      	ldr	r3, [pc, #196]	@ (800c1ec <__mdiff+0x120>)
 800c126:	f240 2145 	movw	r1, #581	@ 0x245
 800c12a:	e7e3      	b.n	800c0f4 <__mdiff+0x28>
 800c12c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c130:	6926      	ldr	r6, [r4, #16]
 800c132:	60c5      	str	r5, [r0, #12]
 800c134:	f109 0310 	add.w	r3, r9, #16
 800c138:	f109 0514 	add.w	r5, r9, #20
 800c13c:	f104 0e14 	add.w	lr, r4, #20
 800c140:	f100 0b14 	add.w	fp, r0, #20
 800c144:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c148:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c14c:	9301      	str	r3, [sp, #4]
 800c14e:	46d9      	mov	r9, fp
 800c150:	f04f 0c00 	mov.w	ip, #0
 800c154:	9b01      	ldr	r3, [sp, #4]
 800c156:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c15a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c15e:	9301      	str	r3, [sp, #4]
 800c160:	fa1f f38a 	uxth.w	r3, sl
 800c164:	4619      	mov	r1, r3
 800c166:	b283      	uxth	r3, r0
 800c168:	1acb      	subs	r3, r1, r3
 800c16a:	0c00      	lsrs	r0, r0, #16
 800c16c:	4463      	add	r3, ip
 800c16e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c172:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c176:	b29b      	uxth	r3, r3
 800c178:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c17c:	4576      	cmp	r6, lr
 800c17e:	f849 3b04 	str.w	r3, [r9], #4
 800c182:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c186:	d8e5      	bhi.n	800c154 <__mdiff+0x88>
 800c188:	1b33      	subs	r3, r6, r4
 800c18a:	3b15      	subs	r3, #21
 800c18c:	f023 0303 	bic.w	r3, r3, #3
 800c190:	3415      	adds	r4, #21
 800c192:	3304      	adds	r3, #4
 800c194:	42a6      	cmp	r6, r4
 800c196:	bf38      	it	cc
 800c198:	2304      	movcc	r3, #4
 800c19a:	441d      	add	r5, r3
 800c19c:	445b      	add	r3, fp
 800c19e:	461e      	mov	r6, r3
 800c1a0:	462c      	mov	r4, r5
 800c1a2:	4544      	cmp	r4, r8
 800c1a4:	d30e      	bcc.n	800c1c4 <__mdiff+0xf8>
 800c1a6:	f108 0103 	add.w	r1, r8, #3
 800c1aa:	1b49      	subs	r1, r1, r5
 800c1ac:	f021 0103 	bic.w	r1, r1, #3
 800c1b0:	3d03      	subs	r5, #3
 800c1b2:	45a8      	cmp	r8, r5
 800c1b4:	bf38      	it	cc
 800c1b6:	2100      	movcc	r1, #0
 800c1b8:	440b      	add	r3, r1
 800c1ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1be:	b191      	cbz	r1, 800c1e6 <__mdiff+0x11a>
 800c1c0:	6117      	str	r7, [r2, #16]
 800c1c2:	e79d      	b.n	800c100 <__mdiff+0x34>
 800c1c4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c1c8:	46e6      	mov	lr, ip
 800c1ca:	0c08      	lsrs	r0, r1, #16
 800c1cc:	fa1c fc81 	uxtah	ip, ip, r1
 800c1d0:	4471      	add	r1, lr
 800c1d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c1d6:	b289      	uxth	r1, r1
 800c1d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c1dc:	f846 1b04 	str.w	r1, [r6], #4
 800c1e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c1e4:	e7dd      	b.n	800c1a2 <__mdiff+0xd6>
 800c1e6:	3f01      	subs	r7, #1
 800c1e8:	e7e7      	b.n	800c1ba <__mdiff+0xee>
 800c1ea:	bf00      	nop
 800c1ec:	0800d38c 	.word	0x0800d38c
 800c1f0:	0800d39d 	.word	0x0800d39d

0800c1f4 <__d2b>:
 800c1f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1f8:	460f      	mov	r7, r1
 800c1fa:	2101      	movs	r1, #1
 800c1fc:	ec59 8b10 	vmov	r8, r9, d0
 800c200:	4616      	mov	r6, r2
 800c202:	f7ff fccd 	bl	800bba0 <_Balloc>
 800c206:	4604      	mov	r4, r0
 800c208:	b930      	cbnz	r0, 800c218 <__d2b+0x24>
 800c20a:	4602      	mov	r2, r0
 800c20c:	4b23      	ldr	r3, [pc, #140]	@ (800c29c <__d2b+0xa8>)
 800c20e:	4824      	ldr	r0, [pc, #144]	@ (800c2a0 <__d2b+0xac>)
 800c210:	f240 310f 	movw	r1, #783	@ 0x30f
 800c214:	f000 fac8 	bl	800c7a8 <__assert_func>
 800c218:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c21c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c220:	b10d      	cbz	r5, 800c226 <__d2b+0x32>
 800c222:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c226:	9301      	str	r3, [sp, #4]
 800c228:	f1b8 0300 	subs.w	r3, r8, #0
 800c22c:	d023      	beq.n	800c276 <__d2b+0x82>
 800c22e:	4668      	mov	r0, sp
 800c230:	9300      	str	r3, [sp, #0]
 800c232:	f7ff fd7c 	bl	800bd2e <__lo0bits>
 800c236:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c23a:	b1d0      	cbz	r0, 800c272 <__d2b+0x7e>
 800c23c:	f1c0 0320 	rsb	r3, r0, #32
 800c240:	fa02 f303 	lsl.w	r3, r2, r3
 800c244:	430b      	orrs	r3, r1
 800c246:	40c2      	lsrs	r2, r0
 800c248:	6163      	str	r3, [r4, #20]
 800c24a:	9201      	str	r2, [sp, #4]
 800c24c:	9b01      	ldr	r3, [sp, #4]
 800c24e:	61a3      	str	r3, [r4, #24]
 800c250:	2b00      	cmp	r3, #0
 800c252:	bf0c      	ite	eq
 800c254:	2201      	moveq	r2, #1
 800c256:	2202      	movne	r2, #2
 800c258:	6122      	str	r2, [r4, #16]
 800c25a:	b1a5      	cbz	r5, 800c286 <__d2b+0x92>
 800c25c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c260:	4405      	add	r5, r0
 800c262:	603d      	str	r5, [r7, #0]
 800c264:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c268:	6030      	str	r0, [r6, #0]
 800c26a:	4620      	mov	r0, r4
 800c26c:	b003      	add	sp, #12
 800c26e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c272:	6161      	str	r1, [r4, #20]
 800c274:	e7ea      	b.n	800c24c <__d2b+0x58>
 800c276:	a801      	add	r0, sp, #4
 800c278:	f7ff fd59 	bl	800bd2e <__lo0bits>
 800c27c:	9b01      	ldr	r3, [sp, #4]
 800c27e:	6163      	str	r3, [r4, #20]
 800c280:	3020      	adds	r0, #32
 800c282:	2201      	movs	r2, #1
 800c284:	e7e8      	b.n	800c258 <__d2b+0x64>
 800c286:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c28a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c28e:	6038      	str	r0, [r7, #0]
 800c290:	6918      	ldr	r0, [r3, #16]
 800c292:	f7ff fd2d 	bl	800bcf0 <__hi0bits>
 800c296:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c29a:	e7e5      	b.n	800c268 <__d2b+0x74>
 800c29c:	0800d38c 	.word	0x0800d38c
 800c2a0:	0800d39d 	.word	0x0800d39d

0800c2a4 <__sfputc_r>:
 800c2a4:	6893      	ldr	r3, [r2, #8]
 800c2a6:	3b01      	subs	r3, #1
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	b410      	push	{r4}
 800c2ac:	6093      	str	r3, [r2, #8]
 800c2ae:	da08      	bge.n	800c2c2 <__sfputc_r+0x1e>
 800c2b0:	6994      	ldr	r4, [r2, #24]
 800c2b2:	42a3      	cmp	r3, r4
 800c2b4:	db01      	blt.n	800c2ba <__sfputc_r+0x16>
 800c2b6:	290a      	cmp	r1, #10
 800c2b8:	d103      	bne.n	800c2c2 <__sfputc_r+0x1e>
 800c2ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2be:	f7fe bba8 	b.w	800aa12 <__swbuf_r>
 800c2c2:	6813      	ldr	r3, [r2, #0]
 800c2c4:	1c58      	adds	r0, r3, #1
 800c2c6:	6010      	str	r0, [r2, #0]
 800c2c8:	7019      	strb	r1, [r3, #0]
 800c2ca:	4608      	mov	r0, r1
 800c2cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2d0:	4770      	bx	lr

0800c2d2 <__sfputs_r>:
 800c2d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2d4:	4606      	mov	r6, r0
 800c2d6:	460f      	mov	r7, r1
 800c2d8:	4614      	mov	r4, r2
 800c2da:	18d5      	adds	r5, r2, r3
 800c2dc:	42ac      	cmp	r4, r5
 800c2de:	d101      	bne.n	800c2e4 <__sfputs_r+0x12>
 800c2e0:	2000      	movs	r0, #0
 800c2e2:	e007      	b.n	800c2f4 <__sfputs_r+0x22>
 800c2e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2e8:	463a      	mov	r2, r7
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	f7ff ffda 	bl	800c2a4 <__sfputc_r>
 800c2f0:	1c43      	adds	r3, r0, #1
 800c2f2:	d1f3      	bne.n	800c2dc <__sfputs_r+0xa>
 800c2f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c2f8 <_vfiprintf_r>:
 800c2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fc:	460d      	mov	r5, r1
 800c2fe:	b09d      	sub	sp, #116	@ 0x74
 800c300:	4614      	mov	r4, r2
 800c302:	4698      	mov	r8, r3
 800c304:	4606      	mov	r6, r0
 800c306:	b118      	cbz	r0, 800c310 <_vfiprintf_r+0x18>
 800c308:	6a03      	ldr	r3, [r0, #32]
 800c30a:	b90b      	cbnz	r3, 800c310 <_vfiprintf_r+0x18>
 800c30c:	f7fe fa98 	bl	800a840 <__sinit>
 800c310:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c312:	07d9      	lsls	r1, r3, #31
 800c314:	d405      	bmi.n	800c322 <_vfiprintf_r+0x2a>
 800c316:	89ab      	ldrh	r3, [r5, #12]
 800c318:	059a      	lsls	r2, r3, #22
 800c31a:	d402      	bmi.n	800c322 <_vfiprintf_r+0x2a>
 800c31c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c31e:	f7fe fce0 	bl	800ace2 <__retarget_lock_acquire_recursive>
 800c322:	89ab      	ldrh	r3, [r5, #12]
 800c324:	071b      	lsls	r3, r3, #28
 800c326:	d501      	bpl.n	800c32c <_vfiprintf_r+0x34>
 800c328:	692b      	ldr	r3, [r5, #16]
 800c32a:	b99b      	cbnz	r3, 800c354 <_vfiprintf_r+0x5c>
 800c32c:	4629      	mov	r1, r5
 800c32e:	4630      	mov	r0, r6
 800c330:	f7fe fbae 	bl	800aa90 <__swsetup_r>
 800c334:	b170      	cbz	r0, 800c354 <_vfiprintf_r+0x5c>
 800c336:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c338:	07dc      	lsls	r4, r3, #31
 800c33a:	d504      	bpl.n	800c346 <_vfiprintf_r+0x4e>
 800c33c:	f04f 30ff 	mov.w	r0, #4294967295
 800c340:	b01d      	add	sp, #116	@ 0x74
 800c342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c346:	89ab      	ldrh	r3, [r5, #12]
 800c348:	0598      	lsls	r0, r3, #22
 800c34a:	d4f7      	bmi.n	800c33c <_vfiprintf_r+0x44>
 800c34c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c34e:	f7fe fcc9 	bl	800ace4 <__retarget_lock_release_recursive>
 800c352:	e7f3      	b.n	800c33c <_vfiprintf_r+0x44>
 800c354:	2300      	movs	r3, #0
 800c356:	9309      	str	r3, [sp, #36]	@ 0x24
 800c358:	2320      	movs	r3, #32
 800c35a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c35e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c362:	2330      	movs	r3, #48	@ 0x30
 800c364:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c514 <_vfiprintf_r+0x21c>
 800c368:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c36c:	f04f 0901 	mov.w	r9, #1
 800c370:	4623      	mov	r3, r4
 800c372:	469a      	mov	sl, r3
 800c374:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c378:	b10a      	cbz	r2, 800c37e <_vfiprintf_r+0x86>
 800c37a:	2a25      	cmp	r2, #37	@ 0x25
 800c37c:	d1f9      	bne.n	800c372 <_vfiprintf_r+0x7a>
 800c37e:	ebba 0b04 	subs.w	fp, sl, r4
 800c382:	d00b      	beq.n	800c39c <_vfiprintf_r+0xa4>
 800c384:	465b      	mov	r3, fp
 800c386:	4622      	mov	r2, r4
 800c388:	4629      	mov	r1, r5
 800c38a:	4630      	mov	r0, r6
 800c38c:	f7ff ffa1 	bl	800c2d2 <__sfputs_r>
 800c390:	3001      	adds	r0, #1
 800c392:	f000 80a7 	beq.w	800c4e4 <_vfiprintf_r+0x1ec>
 800c396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c398:	445a      	add	r2, fp
 800c39a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c39c:	f89a 3000 	ldrb.w	r3, [sl]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	f000 809f 	beq.w	800c4e4 <_vfiprintf_r+0x1ec>
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3b0:	f10a 0a01 	add.w	sl, sl, #1
 800c3b4:	9304      	str	r3, [sp, #16]
 800c3b6:	9307      	str	r3, [sp, #28]
 800c3b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c3bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3be:	4654      	mov	r4, sl
 800c3c0:	2205      	movs	r2, #5
 800c3c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3c6:	4853      	ldr	r0, [pc, #332]	@ (800c514 <_vfiprintf_r+0x21c>)
 800c3c8:	f7f3 ff02 	bl	80001d0 <memchr>
 800c3cc:	9a04      	ldr	r2, [sp, #16]
 800c3ce:	b9d8      	cbnz	r0, 800c408 <_vfiprintf_r+0x110>
 800c3d0:	06d1      	lsls	r1, r2, #27
 800c3d2:	bf44      	itt	mi
 800c3d4:	2320      	movmi	r3, #32
 800c3d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3da:	0713      	lsls	r3, r2, #28
 800c3dc:	bf44      	itt	mi
 800c3de:	232b      	movmi	r3, #43	@ 0x2b
 800c3e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3e4:	f89a 3000 	ldrb.w	r3, [sl]
 800c3e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3ea:	d015      	beq.n	800c418 <_vfiprintf_r+0x120>
 800c3ec:	9a07      	ldr	r2, [sp, #28]
 800c3ee:	4654      	mov	r4, sl
 800c3f0:	2000      	movs	r0, #0
 800c3f2:	f04f 0c0a 	mov.w	ip, #10
 800c3f6:	4621      	mov	r1, r4
 800c3f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3fc:	3b30      	subs	r3, #48	@ 0x30
 800c3fe:	2b09      	cmp	r3, #9
 800c400:	d94b      	bls.n	800c49a <_vfiprintf_r+0x1a2>
 800c402:	b1b0      	cbz	r0, 800c432 <_vfiprintf_r+0x13a>
 800c404:	9207      	str	r2, [sp, #28]
 800c406:	e014      	b.n	800c432 <_vfiprintf_r+0x13a>
 800c408:	eba0 0308 	sub.w	r3, r0, r8
 800c40c:	fa09 f303 	lsl.w	r3, r9, r3
 800c410:	4313      	orrs	r3, r2
 800c412:	9304      	str	r3, [sp, #16]
 800c414:	46a2      	mov	sl, r4
 800c416:	e7d2      	b.n	800c3be <_vfiprintf_r+0xc6>
 800c418:	9b03      	ldr	r3, [sp, #12]
 800c41a:	1d19      	adds	r1, r3, #4
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	9103      	str	r1, [sp, #12]
 800c420:	2b00      	cmp	r3, #0
 800c422:	bfbb      	ittet	lt
 800c424:	425b      	neglt	r3, r3
 800c426:	f042 0202 	orrlt.w	r2, r2, #2
 800c42a:	9307      	strge	r3, [sp, #28]
 800c42c:	9307      	strlt	r3, [sp, #28]
 800c42e:	bfb8      	it	lt
 800c430:	9204      	strlt	r2, [sp, #16]
 800c432:	7823      	ldrb	r3, [r4, #0]
 800c434:	2b2e      	cmp	r3, #46	@ 0x2e
 800c436:	d10a      	bne.n	800c44e <_vfiprintf_r+0x156>
 800c438:	7863      	ldrb	r3, [r4, #1]
 800c43a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c43c:	d132      	bne.n	800c4a4 <_vfiprintf_r+0x1ac>
 800c43e:	9b03      	ldr	r3, [sp, #12]
 800c440:	1d1a      	adds	r2, r3, #4
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	9203      	str	r2, [sp, #12]
 800c446:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c44a:	3402      	adds	r4, #2
 800c44c:	9305      	str	r3, [sp, #20]
 800c44e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c524 <_vfiprintf_r+0x22c>
 800c452:	7821      	ldrb	r1, [r4, #0]
 800c454:	2203      	movs	r2, #3
 800c456:	4650      	mov	r0, sl
 800c458:	f7f3 feba 	bl	80001d0 <memchr>
 800c45c:	b138      	cbz	r0, 800c46e <_vfiprintf_r+0x176>
 800c45e:	9b04      	ldr	r3, [sp, #16]
 800c460:	eba0 000a 	sub.w	r0, r0, sl
 800c464:	2240      	movs	r2, #64	@ 0x40
 800c466:	4082      	lsls	r2, r0
 800c468:	4313      	orrs	r3, r2
 800c46a:	3401      	adds	r4, #1
 800c46c:	9304      	str	r3, [sp, #16]
 800c46e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c472:	4829      	ldr	r0, [pc, #164]	@ (800c518 <_vfiprintf_r+0x220>)
 800c474:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c478:	2206      	movs	r2, #6
 800c47a:	f7f3 fea9 	bl	80001d0 <memchr>
 800c47e:	2800      	cmp	r0, #0
 800c480:	d03f      	beq.n	800c502 <_vfiprintf_r+0x20a>
 800c482:	4b26      	ldr	r3, [pc, #152]	@ (800c51c <_vfiprintf_r+0x224>)
 800c484:	bb1b      	cbnz	r3, 800c4ce <_vfiprintf_r+0x1d6>
 800c486:	9b03      	ldr	r3, [sp, #12]
 800c488:	3307      	adds	r3, #7
 800c48a:	f023 0307 	bic.w	r3, r3, #7
 800c48e:	3308      	adds	r3, #8
 800c490:	9303      	str	r3, [sp, #12]
 800c492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c494:	443b      	add	r3, r7
 800c496:	9309      	str	r3, [sp, #36]	@ 0x24
 800c498:	e76a      	b.n	800c370 <_vfiprintf_r+0x78>
 800c49a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c49e:	460c      	mov	r4, r1
 800c4a0:	2001      	movs	r0, #1
 800c4a2:	e7a8      	b.n	800c3f6 <_vfiprintf_r+0xfe>
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	3401      	adds	r4, #1
 800c4a8:	9305      	str	r3, [sp, #20]
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	f04f 0c0a 	mov.w	ip, #10
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4b6:	3a30      	subs	r2, #48	@ 0x30
 800c4b8:	2a09      	cmp	r2, #9
 800c4ba:	d903      	bls.n	800c4c4 <_vfiprintf_r+0x1cc>
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d0c6      	beq.n	800c44e <_vfiprintf_r+0x156>
 800c4c0:	9105      	str	r1, [sp, #20]
 800c4c2:	e7c4      	b.n	800c44e <_vfiprintf_r+0x156>
 800c4c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4c8:	4604      	mov	r4, r0
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e7f0      	b.n	800c4b0 <_vfiprintf_r+0x1b8>
 800c4ce:	ab03      	add	r3, sp, #12
 800c4d0:	9300      	str	r3, [sp, #0]
 800c4d2:	462a      	mov	r2, r5
 800c4d4:	4b12      	ldr	r3, [pc, #72]	@ (800c520 <_vfiprintf_r+0x228>)
 800c4d6:	a904      	add	r1, sp, #16
 800c4d8:	4630      	mov	r0, r6
 800c4da:	f7fd fd6d 	bl	8009fb8 <_printf_float>
 800c4de:	4607      	mov	r7, r0
 800c4e0:	1c78      	adds	r0, r7, #1
 800c4e2:	d1d6      	bne.n	800c492 <_vfiprintf_r+0x19a>
 800c4e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4e6:	07d9      	lsls	r1, r3, #31
 800c4e8:	d405      	bmi.n	800c4f6 <_vfiprintf_r+0x1fe>
 800c4ea:	89ab      	ldrh	r3, [r5, #12]
 800c4ec:	059a      	lsls	r2, r3, #22
 800c4ee:	d402      	bmi.n	800c4f6 <_vfiprintf_r+0x1fe>
 800c4f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4f2:	f7fe fbf7 	bl	800ace4 <__retarget_lock_release_recursive>
 800c4f6:	89ab      	ldrh	r3, [r5, #12]
 800c4f8:	065b      	lsls	r3, r3, #25
 800c4fa:	f53f af1f 	bmi.w	800c33c <_vfiprintf_r+0x44>
 800c4fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c500:	e71e      	b.n	800c340 <_vfiprintf_r+0x48>
 800c502:	ab03      	add	r3, sp, #12
 800c504:	9300      	str	r3, [sp, #0]
 800c506:	462a      	mov	r2, r5
 800c508:	4b05      	ldr	r3, [pc, #20]	@ (800c520 <_vfiprintf_r+0x228>)
 800c50a:	a904      	add	r1, sp, #16
 800c50c:	4630      	mov	r0, r6
 800c50e:	f7fd ffeb 	bl	800a4e8 <_printf_i>
 800c512:	e7e4      	b.n	800c4de <_vfiprintf_r+0x1e6>
 800c514:	0800d4f8 	.word	0x0800d4f8
 800c518:	0800d502 	.word	0x0800d502
 800c51c:	08009fb9 	.word	0x08009fb9
 800c520:	0800c2d3 	.word	0x0800c2d3
 800c524:	0800d4fe 	.word	0x0800d4fe

0800c528 <__sflush_r>:
 800c528:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c530:	0716      	lsls	r6, r2, #28
 800c532:	4605      	mov	r5, r0
 800c534:	460c      	mov	r4, r1
 800c536:	d454      	bmi.n	800c5e2 <__sflush_r+0xba>
 800c538:	684b      	ldr	r3, [r1, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	dc02      	bgt.n	800c544 <__sflush_r+0x1c>
 800c53e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c540:	2b00      	cmp	r3, #0
 800c542:	dd48      	ble.n	800c5d6 <__sflush_r+0xae>
 800c544:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c546:	2e00      	cmp	r6, #0
 800c548:	d045      	beq.n	800c5d6 <__sflush_r+0xae>
 800c54a:	2300      	movs	r3, #0
 800c54c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c550:	682f      	ldr	r7, [r5, #0]
 800c552:	6a21      	ldr	r1, [r4, #32]
 800c554:	602b      	str	r3, [r5, #0]
 800c556:	d030      	beq.n	800c5ba <__sflush_r+0x92>
 800c558:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c55a:	89a3      	ldrh	r3, [r4, #12]
 800c55c:	0759      	lsls	r1, r3, #29
 800c55e:	d505      	bpl.n	800c56c <__sflush_r+0x44>
 800c560:	6863      	ldr	r3, [r4, #4]
 800c562:	1ad2      	subs	r2, r2, r3
 800c564:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c566:	b10b      	cbz	r3, 800c56c <__sflush_r+0x44>
 800c568:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c56a:	1ad2      	subs	r2, r2, r3
 800c56c:	2300      	movs	r3, #0
 800c56e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c570:	6a21      	ldr	r1, [r4, #32]
 800c572:	4628      	mov	r0, r5
 800c574:	47b0      	blx	r6
 800c576:	1c43      	adds	r3, r0, #1
 800c578:	89a3      	ldrh	r3, [r4, #12]
 800c57a:	d106      	bne.n	800c58a <__sflush_r+0x62>
 800c57c:	6829      	ldr	r1, [r5, #0]
 800c57e:	291d      	cmp	r1, #29
 800c580:	d82b      	bhi.n	800c5da <__sflush_r+0xb2>
 800c582:	4a2a      	ldr	r2, [pc, #168]	@ (800c62c <__sflush_r+0x104>)
 800c584:	410a      	asrs	r2, r1
 800c586:	07d6      	lsls	r6, r2, #31
 800c588:	d427      	bmi.n	800c5da <__sflush_r+0xb2>
 800c58a:	2200      	movs	r2, #0
 800c58c:	6062      	str	r2, [r4, #4]
 800c58e:	04d9      	lsls	r1, r3, #19
 800c590:	6922      	ldr	r2, [r4, #16]
 800c592:	6022      	str	r2, [r4, #0]
 800c594:	d504      	bpl.n	800c5a0 <__sflush_r+0x78>
 800c596:	1c42      	adds	r2, r0, #1
 800c598:	d101      	bne.n	800c59e <__sflush_r+0x76>
 800c59a:	682b      	ldr	r3, [r5, #0]
 800c59c:	b903      	cbnz	r3, 800c5a0 <__sflush_r+0x78>
 800c59e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c5a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c5a2:	602f      	str	r7, [r5, #0]
 800c5a4:	b1b9      	cbz	r1, 800c5d6 <__sflush_r+0xae>
 800c5a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c5aa:	4299      	cmp	r1, r3
 800c5ac:	d002      	beq.n	800c5b4 <__sflush_r+0x8c>
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	f7ff f9f6 	bl	800b9a0 <_free_r>
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800c5b8:	e00d      	b.n	800c5d6 <__sflush_r+0xae>
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	4628      	mov	r0, r5
 800c5be:	47b0      	blx	r6
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	1c50      	adds	r0, r2, #1
 800c5c4:	d1c9      	bne.n	800c55a <__sflush_r+0x32>
 800c5c6:	682b      	ldr	r3, [r5, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d0c6      	beq.n	800c55a <__sflush_r+0x32>
 800c5cc:	2b1d      	cmp	r3, #29
 800c5ce:	d001      	beq.n	800c5d4 <__sflush_r+0xac>
 800c5d0:	2b16      	cmp	r3, #22
 800c5d2:	d11e      	bne.n	800c612 <__sflush_r+0xea>
 800c5d4:	602f      	str	r7, [r5, #0]
 800c5d6:	2000      	movs	r0, #0
 800c5d8:	e022      	b.n	800c620 <__sflush_r+0xf8>
 800c5da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5de:	b21b      	sxth	r3, r3
 800c5e0:	e01b      	b.n	800c61a <__sflush_r+0xf2>
 800c5e2:	690f      	ldr	r7, [r1, #16]
 800c5e4:	2f00      	cmp	r7, #0
 800c5e6:	d0f6      	beq.n	800c5d6 <__sflush_r+0xae>
 800c5e8:	0793      	lsls	r3, r2, #30
 800c5ea:	680e      	ldr	r6, [r1, #0]
 800c5ec:	bf08      	it	eq
 800c5ee:	694b      	ldreq	r3, [r1, #20]
 800c5f0:	600f      	str	r7, [r1, #0]
 800c5f2:	bf18      	it	ne
 800c5f4:	2300      	movne	r3, #0
 800c5f6:	eba6 0807 	sub.w	r8, r6, r7
 800c5fa:	608b      	str	r3, [r1, #8]
 800c5fc:	f1b8 0f00 	cmp.w	r8, #0
 800c600:	dde9      	ble.n	800c5d6 <__sflush_r+0xae>
 800c602:	6a21      	ldr	r1, [r4, #32]
 800c604:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c606:	4643      	mov	r3, r8
 800c608:	463a      	mov	r2, r7
 800c60a:	4628      	mov	r0, r5
 800c60c:	47b0      	blx	r6
 800c60e:	2800      	cmp	r0, #0
 800c610:	dc08      	bgt.n	800c624 <__sflush_r+0xfc>
 800c612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c61a:	81a3      	strh	r3, [r4, #12]
 800c61c:	f04f 30ff 	mov.w	r0, #4294967295
 800c620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c624:	4407      	add	r7, r0
 800c626:	eba8 0800 	sub.w	r8, r8, r0
 800c62a:	e7e7      	b.n	800c5fc <__sflush_r+0xd4>
 800c62c:	dfbffffe 	.word	0xdfbffffe

0800c630 <_fflush_r>:
 800c630:	b538      	push	{r3, r4, r5, lr}
 800c632:	690b      	ldr	r3, [r1, #16]
 800c634:	4605      	mov	r5, r0
 800c636:	460c      	mov	r4, r1
 800c638:	b913      	cbnz	r3, 800c640 <_fflush_r+0x10>
 800c63a:	2500      	movs	r5, #0
 800c63c:	4628      	mov	r0, r5
 800c63e:	bd38      	pop	{r3, r4, r5, pc}
 800c640:	b118      	cbz	r0, 800c64a <_fflush_r+0x1a>
 800c642:	6a03      	ldr	r3, [r0, #32]
 800c644:	b90b      	cbnz	r3, 800c64a <_fflush_r+0x1a>
 800c646:	f7fe f8fb 	bl	800a840 <__sinit>
 800c64a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d0f3      	beq.n	800c63a <_fflush_r+0xa>
 800c652:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c654:	07d0      	lsls	r0, r2, #31
 800c656:	d404      	bmi.n	800c662 <_fflush_r+0x32>
 800c658:	0599      	lsls	r1, r3, #22
 800c65a:	d402      	bmi.n	800c662 <_fflush_r+0x32>
 800c65c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c65e:	f7fe fb40 	bl	800ace2 <__retarget_lock_acquire_recursive>
 800c662:	4628      	mov	r0, r5
 800c664:	4621      	mov	r1, r4
 800c666:	f7ff ff5f 	bl	800c528 <__sflush_r>
 800c66a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c66c:	07da      	lsls	r2, r3, #31
 800c66e:	4605      	mov	r5, r0
 800c670:	d4e4      	bmi.n	800c63c <_fflush_r+0xc>
 800c672:	89a3      	ldrh	r3, [r4, #12]
 800c674:	059b      	lsls	r3, r3, #22
 800c676:	d4e1      	bmi.n	800c63c <_fflush_r+0xc>
 800c678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c67a:	f7fe fb33 	bl	800ace4 <__retarget_lock_release_recursive>
 800c67e:	e7dd      	b.n	800c63c <_fflush_r+0xc>

0800c680 <__swhatbuf_r>:
 800c680:	b570      	push	{r4, r5, r6, lr}
 800c682:	460c      	mov	r4, r1
 800c684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c688:	2900      	cmp	r1, #0
 800c68a:	b096      	sub	sp, #88	@ 0x58
 800c68c:	4615      	mov	r5, r2
 800c68e:	461e      	mov	r6, r3
 800c690:	da0d      	bge.n	800c6ae <__swhatbuf_r+0x2e>
 800c692:	89a3      	ldrh	r3, [r4, #12]
 800c694:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c698:	f04f 0100 	mov.w	r1, #0
 800c69c:	bf14      	ite	ne
 800c69e:	2340      	movne	r3, #64	@ 0x40
 800c6a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c6a4:	2000      	movs	r0, #0
 800c6a6:	6031      	str	r1, [r6, #0]
 800c6a8:	602b      	str	r3, [r5, #0]
 800c6aa:	b016      	add	sp, #88	@ 0x58
 800c6ac:	bd70      	pop	{r4, r5, r6, pc}
 800c6ae:	466a      	mov	r2, sp
 800c6b0:	f000 f848 	bl	800c744 <_fstat_r>
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	dbec      	blt.n	800c692 <__swhatbuf_r+0x12>
 800c6b8:	9901      	ldr	r1, [sp, #4]
 800c6ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c6be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c6c2:	4259      	negs	r1, r3
 800c6c4:	4159      	adcs	r1, r3
 800c6c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6ca:	e7eb      	b.n	800c6a4 <__swhatbuf_r+0x24>

0800c6cc <__smakebuf_r>:
 800c6cc:	898b      	ldrh	r3, [r1, #12]
 800c6ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6d0:	079d      	lsls	r5, r3, #30
 800c6d2:	4606      	mov	r6, r0
 800c6d4:	460c      	mov	r4, r1
 800c6d6:	d507      	bpl.n	800c6e8 <__smakebuf_r+0x1c>
 800c6d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c6dc:	6023      	str	r3, [r4, #0]
 800c6de:	6123      	str	r3, [r4, #16]
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	6163      	str	r3, [r4, #20]
 800c6e4:	b003      	add	sp, #12
 800c6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6e8:	ab01      	add	r3, sp, #4
 800c6ea:	466a      	mov	r2, sp
 800c6ec:	f7ff ffc8 	bl	800c680 <__swhatbuf_r>
 800c6f0:	9f00      	ldr	r7, [sp, #0]
 800c6f2:	4605      	mov	r5, r0
 800c6f4:	4639      	mov	r1, r7
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	f7ff f9c6 	bl	800ba88 <_malloc_r>
 800c6fc:	b948      	cbnz	r0, 800c712 <__smakebuf_r+0x46>
 800c6fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c702:	059a      	lsls	r2, r3, #22
 800c704:	d4ee      	bmi.n	800c6e4 <__smakebuf_r+0x18>
 800c706:	f023 0303 	bic.w	r3, r3, #3
 800c70a:	f043 0302 	orr.w	r3, r3, #2
 800c70e:	81a3      	strh	r3, [r4, #12]
 800c710:	e7e2      	b.n	800c6d8 <__smakebuf_r+0xc>
 800c712:	89a3      	ldrh	r3, [r4, #12]
 800c714:	6020      	str	r0, [r4, #0]
 800c716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c71a:	81a3      	strh	r3, [r4, #12]
 800c71c:	9b01      	ldr	r3, [sp, #4]
 800c71e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c722:	b15b      	cbz	r3, 800c73c <__smakebuf_r+0x70>
 800c724:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c728:	4630      	mov	r0, r6
 800c72a:	f000 f81d 	bl	800c768 <_isatty_r>
 800c72e:	b128      	cbz	r0, 800c73c <__smakebuf_r+0x70>
 800c730:	89a3      	ldrh	r3, [r4, #12]
 800c732:	f023 0303 	bic.w	r3, r3, #3
 800c736:	f043 0301 	orr.w	r3, r3, #1
 800c73a:	81a3      	strh	r3, [r4, #12]
 800c73c:	89a3      	ldrh	r3, [r4, #12]
 800c73e:	431d      	orrs	r5, r3
 800c740:	81a5      	strh	r5, [r4, #12]
 800c742:	e7cf      	b.n	800c6e4 <__smakebuf_r+0x18>

0800c744 <_fstat_r>:
 800c744:	b538      	push	{r3, r4, r5, lr}
 800c746:	4d07      	ldr	r5, [pc, #28]	@ (800c764 <_fstat_r+0x20>)
 800c748:	2300      	movs	r3, #0
 800c74a:	4604      	mov	r4, r0
 800c74c:	4608      	mov	r0, r1
 800c74e:	4611      	mov	r1, r2
 800c750:	602b      	str	r3, [r5, #0]
 800c752:	f7f5 fd31 	bl	80021b8 <_fstat>
 800c756:	1c43      	adds	r3, r0, #1
 800c758:	d102      	bne.n	800c760 <_fstat_r+0x1c>
 800c75a:	682b      	ldr	r3, [r5, #0]
 800c75c:	b103      	cbz	r3, 800c760 <_fstat_r+0x1c>
 800c75e:	6023      	str	r3, [r4, #0]
 800c760:	bd38      	pop	{r3, r4, r5, pc}
 800c762:	bf00      	nop
 800c764:	20002440 	.word	0x20002440

0800c768 <_isatty_r>:
 800c768:	b538      	push	{r3, r4, r5, lr}
 800c76a:	4d06      	ldr	r5, [pc, #24]	@ (800c784 <_isatty_r+0x1c>)
 800c76c:	2300      	movs	r3, #0
 800c76e:	4604      	mov	r4, r0
 800c770:	4608      	mov	r0, r1
 800c772:	602b      	str	r3, [r5, #0]
 800c774:	f7f5 fd30 	bl	80021d8 <_isatty>
 800c778:	1c43      	adds	r3, r0, #1
 800c77a:	d102      	bne.n	800c782 <_isatty_r+0x1a>
 800c77c:	682b      	ldr	r3, [r5, #0]
 800c77e:	b103      	cbz	r3, 800c782 <_isatty_r+0x1a>
 800c780:	6023      	str	r3, [r4, #0]
 800c782:	bd38      	pop	{r3, r4, r5, pc}
 800c784:	20002440 	.word	0x20002440

0800c788 <_sbrk_r>:
 800c788:	b538      	push	{r3, r4, r5, lr}
 800c78a:	4d06      	ldr	r5, [pc, #24]	@ (800c7a4 <_sbrk_r+0x1c>)
 800c78c:	2300      	movs	r3, #0
 800c78e:	4604      	mov	r4, r0
 800c790:	4608      	mov	r0, r1
 800c792:	602b      	str	r3, [r5, #0]
 800c794:	f7f5 fd38 	bl	8002208 <_sbrk>
 800c798:	1c43      	adds	r3, r0, #1
 800c79a:	d102      	bne.n	800c7a2 <_sbrk_r+0x1a>
 800c79c:	682b      	ldr	r3, [r5, #0]
 800c79e:	b103      	cbz	r3, 800c7a2 <_sbrk_r+0x1a>
 800c7a0:	6023      	str	r3, [r4, #0]
 800c7a2:	bd38      	pop	{r3, r4, r5, pc}
 800c7a4:	20002440 	.word	0x20002440

0800c7a8 <__assert_func>:
 800c7a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7aa:	4614      	mov	r4, r2
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	4b09      	ldr	r3, [pc, #36]	@ (800c7d4 <__assert_func+0x2c>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4605      	mov	r5, r0
 800c7b4:	68d8      	ldr	r0, [r3, #12]
 800c7b6:	b954      	cbnz	r4, 800c7ce <__assert_func+0x26>
 800c7b8:	4b07      	ldr	r3, [pc, #28]	@ (800c7d8 <__assert_func+0x30>)
 800c7ba:	461c      	mov	r4, r3
 800c7bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c7c0:	9100      	str	r1, [sp, #0]
 800c7c2:	462b      	mov	r3, r5
 800c7c4:	4905      	ldr	r1, [pc, #20]	@ (800c7dc <__assert_func+0x34>)
 800c7c6:	f000 f841 	bl	800c84c <fiprintf>
 800c7ca:	f000 f851 	bl	800c870 <abort>
 800c7ce:	4b04      	ldr	r3, [pc, #16]	@ (800c7e0 <__assert_func+0x38>)
 800c7d0:	e7f4      	b.n	800c7bc <__assert_func+0x14>
 800c7d2:	bf00      	nop
 800c7d4:	2000001c 	.word	0x2000001c
 800c7d8:	0800d54e 	.word	0x0800d54e
 800c7dc:	0800d520 	.word	0x0800d520
 800c7e0:	0800d513 	.word	0x0800d513

0800c7e4 <_calloc_r>:
 800c7e4:	b570      	push	{r4, r5, r6, lr}
 800c7e6:	fba1 5402 	umull	r5, r4, r1, r2
 800c7ea:	b93c      	cbnz	r4, 800c7fc <_calloc_r+0x18>
 800c7ec:	4629      	mov	r1, r5
 800c7ee:	f7ff f94b 	bl	800ba88 <_malloc_r>
 800c7f2:	4606      	mov	r6, r0
 800c7f4:	b928      	cbnz	r0, 800c802 <_calloc_r+0x1e>
 800c7f6:	2600      	movs	r6, #0
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	bd70      	pop	{r4, r5, r6, pc}
 800c7fc:	220c      	movs	r2, #12
 800c7fe:	6002      	str	r2, [r0, #0]
 800c800:	e7f9      	b.n	800c7f6 <_calloc_r+0x12>
 800c802:	462a      	mov	r2, r5
 800c804:	4621      	mov	r1, r4
 800c806:	f7fe f999 	bl	800ab3c <memset>
 800c80a:	e7f5      	b.n	800c7f8 <_calloc_r+0x14>

0800c80c <__ascii_mbtowc>:
 800c80c:	b082      	sub	sp, #8
 800c80e:	b901      	cbnz	r1, 800c812 <__ascii_mbtowc+0x6>
 800c810:	a901      	add	r1, sp, #4
 800c812:	b142      	cbz	r2, 800c826 <__ascii_mbtowc+0x1a>
 800c814:	b14b      	cbz	r3, 800c82a <__ascii_mbtowc+0x1e>
 800c816:	7813      	ldrb	r3, [r2, #0]
 800c818:	600b      	str	r3, [r1, #0]
 800c81a:	7812      	ldrb	r2, [r2, #0]
 800c81c:	1e10      	subs	r0, r2, #0
 800c81e:	bf18      	it	ne
 800c820:	2001      	movne	r0, #1
 800c822:	b002      	add	sp, #8
 800c824:	4770      	bx	lr
 800c826:	4610      	mov	r0, r2
 800c828:	e7fb      	b.n	800c822 <__ascii_mbtowc+0x16>
 800c82a:	f06f 0001 	mvn.w	r0, #1
 800c82e:	e7f8      	b.n	800c822 <__ascii_mbtowc+0x16>

0800c830 <__ascii_wctomb>:
 800c830:	4603      	mov	r3, r0
 800c832:	4608      	mov	r0, r1
 800c834:	b141      	cbz	r1, 800c848 <__ascii_wctomb+0x18>
 800c836:	2aff      	cmp	r2, #255	@ 0xff
 800c838:	d904      	bls.n	800c844 <__ascii_wctomb+0x14>
 800c83a:	228a      	movs	r2, #138	@ 0x8a
 800c83c:	601a      	str	r2, [r3, #0]
 800c83e:	f04f 30ff 	mov.w	r0, #4294967295
 800c842:	4770      	bx	lr
 800c844:	700a      	strb	r2, [r1, #0]
 800c846:	2001      	movs	r0, #1
 800c848:	4770      	bx	lr
	...

0800c84c <fiprintf>:
 800c84c:	b40e      	push	{r1, r2, r3}
 800c84e:	b503      	push	{r0, r1, lr}
 800c850:	4601      	mov	r1, r0
 800c852:	ab03      	add	r3, sp, #12
 800c854:	4805      	ldr	r0, [pc, #20]	@ (800c86c <fiprintf+0x20>)
 800c856:	f853 2b04 	ldr.w	r2, [r3], #4
 800c85a:	6800      	ldr	r0, [r0, #0]
 800c85c:	9301      	str	r3, [sp, #4]
 800c85e:	f7ff fd4b 	bl	800c2f8 <_vfiprintf_r>
 800c862:	b002      	add	sp, #8
 800c864:	f85d eb04 	ldr.w	lr, [sp], #4
 800c868:	b003      	add	sp, #12
 800c86a:	4770      	bx	lr
 800c86c:	2000001c 	.word	0x2000001c

0800c870 <abort>:
 800c870:	b508      	push	{r3, lr}
 800c872:	2006      	movs	r0, #6
 800c874:	f000 f82c 	bl	800c8d0 <raise>
 800c878:	2001      	movs	r0, #1
 800c87a:	f7f5 fc69 	bl	8002150 <_exit>

0800c87e <_raise_r>:
 800c87e:	291f      	cmp	r1, #31
 800c880:	b538      	push	{r3, r4, r5, lr}
 800c882:	4605      	mov	r5, r0
 800c884:	460c      	mov	r4, r1
 800c886:	d904      	bls.n	800c892 <_raise_r+0x14>
 800c888:	2316      	movs	r3, #22
 800c88a:	6003      	str	r3, [r0, #0]
 800c88c:	f04f 30ff 	mov.w	r0, #4294967295
 800c890:	bd38      	pop	{r3, r4, r5, pc}
 800c892:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c894:	b112      	cbz	r2, 800c89c <_raise_r+0x1e>
 800c896:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c89a:	b94b      	cbnz	r3, 800c8b0 <_raise_r+0x32>
 800c89c:	4628      	mov	r0, r5
 800c89e:	f000 f831 	bl	800c904 <_getpid_r>
 800c8a2:	4622      	mov	r2, r4
 800c8a4:	4601      	mov	r1, r0
 800c8a6:	4628      	mov	r0, r5
 800c8a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8ac:	f000 b818 	b.w	800c8e0 <_kill_r>
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d00a      	beq.n	800c8ca <_raise_r+0x4c>
 800c8b4:	1c59      	adds	r1, r3, #1
 800c8b6:	d103      	bne.n	800c8c0 <_raise_r+0x42>
 800c8b8:	2316      	movs	r3, #22
 800c8ba:	6003      	str	r3, [r0, #0]
 800c8bc:	2001      	movs	r0, #1
 800c8be:	e7e7      	b.n	800c890 <_raise_r+0x12>
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	4798      	blx	r3
 800c8ca:	2000      	movs	r0, #0
 800c8cc:	e7e0      	b.n	800c890 <_raise_r+0x12>
	...

0800c8d0 <raise>:
 800c8d0:	4b02      	ldr	r3, [pc, #8]	@ (800c8dc <raise+0xc>)
 800c8d2:	4601      	mov	r1, r0
 800c8d4:	6818      	ldr	r0, [r3, #0]
 800c8d6:	f7ff bfd2 	b.w	800c87e <_raise_r>
 800c8da:	bf00      	nop
 800c8dc:	2000001c 	.word	0x2000001c

0800c8e0 <_kill_r>:
 800c8e0:	b538      	push	{r3, r4, r5, lr}
 800c8e2:	4d07      	ldr	r5, [pc, #28]	@ (800c900 <_kill_r+0x20>)
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	4608      	mov	r0, r1
 800c8ea:	4611      	mov	r1, r2
 800c8ec:	602b      	str	r3, [r5, #0]
 800c8ee:	f7f5 fc1f 	bl	8002130 <_kill>
 800c8f2:	1c43      	adds	r3, r0, #1
 800c8f4:	d102      	bne.n	800c8fc <_kill_r+0x1c>
 800c8f6:	682b      	ldr	r3, [r5, #0]
 800c8f8:	b103      	cbz	r3, 800c8fc <_kill_r+0x1c>
 800c8fa:	6023      	str	r3, [r4, #0]
 800c8fc:	bd38      	pop	{r3, r4, r5, pc}
 800c8fe:	bf00      	nop
 800c900:	20002440 	.word	0x20002440

0800c904 <_getpid_r>:
 800c904:	f7f5 bc0c 	b.w	8002120 <_getpid>

0800c908 <_init>:
 800c908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c90a:	bf00      	nop
 800c90c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c90e:	bc08      	pop	{r3}
 800c910:	469e      	mov	lr, r3
 800c912:	4770      	bx	lr

0800c914 <_fini>:
 800c914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c916:	bf00      	nop
 800c918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c91a:	bc08      	pop	{r3}
 800c91c:	469e      	mov	lr, r3
 800c91e:	4770      	bx	lr
