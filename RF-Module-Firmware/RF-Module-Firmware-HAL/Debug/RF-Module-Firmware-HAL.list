
RF-Module-Firmware-HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  0800d548  0800d548  0001d548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfb8  0800dfb8  00020290  2**0
                  CONTENTS
  4 .ARM          00000008  0800dfb8  0800dfb8  0001dfb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dfc0  0800dfc0  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dfc0  0800dfc0  0001dfc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dfc4  0800dfc4  0001dfc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800dfc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002590  20000290  0800e258  00020290  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002820  0800e258  00022820  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022b31  00000000  00000000  00020303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004fd9  00000000  00000000  00042e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ce0  00000000  00000000  00047e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001649  00000000  00000000  00049af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002529b  00000000  00000000  0004b139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022f61  00000000  00000000  000703d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbea5  00000000  00000000  00093335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000088f8  00000000  00000000  0016f1dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  00177ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000290 	.word	0x20000290
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d52c 	.word	0x0800d52c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000294 	.word	0x20000294
 80001cc:	0800d52c 	.word	0x0800d52c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000eaa:	4a19      	ldr	r2, [pc, #100]	; (8000f10 <MX_CAN1_Init+0x6c>)
 8000eac:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000eb0:	2210      	movs	r2, #16
 8000eb2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000eb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eba:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000ec4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ec8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000ecc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ed0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000ef8:	f001 fc30 	bl	800275c <HAL_CAN_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000f02:	f000 fbc7 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200002c4 	.word	0x200002c4
 8000f10:	40006400 	.word	0x40006400

08000f14 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a24      	ldr	r2, [pc, #144]	; (8000fc4 <HAL_CAN_MspInit+0xb0>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d141      	bne.n	8000fba <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f36:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <HAL_CAN_MspInit+0xb4>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3a:	4a23      	ldr	r2, [pc, #140]	; (8000fc8 <HAL_CAN_MspInit+0xb4>)
 8000f3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f40:	6593      	str	r3, [r2, #88]	; 0x58
 8000f42:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <HAL_CAN_MspInit+0xb4>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <HAL_CAN_MspInit+0xb4>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a1d      	ldr	r2, [pc, #116]	; (8000fc8 <HAL_CAN_MspInit+0xb4>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <HAL_CAN_MspInit+0xb4>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f78:	2309      	movs	r3, #9
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f86:	f002 fa31 	bl	80033ec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2105      	movs	r1, #5
 8000f8e:	2013      	movs	r0, #19
 8000f90:	f002 fa02 	bl	8003398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f94:	2013      	movs	r0, #19
 8000f96:	f002 fa1b 	bl	80033d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2105      	movs	r1, #5
 8000f9e:	2014      	movs	r0, #20
 8000fa0:	f002 f9fa 	bl	8003398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000fa4:	2014      	movs	r0, #20
 8000fa6:	f002 fa13 	bl	80033d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2105      	movs	r1, #5
 8000fae:	2015      	movs	r0, #21
 8000fb0:	f002 f9f2 	bl	8003398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000fb4:	2015      	movs	r0, #21
 8000fb6:	f002 fa0b 	bl	80033d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	; 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40006400 	.word	0x40006400
 8000fc8:	40021000 	.word	0x40021000

08000fcc <CAN_Initialize>:
  }
}

/* USER CODE BEGIN 1 */

void CAN_Initialize() {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b094      	sub	sp, #80	; 0x50
 8000fd0:	af00      	add	r7, sp, #0
	MX_CAN1_Init();
 8000fd2:	f7ff ff67 	bl	8000ea4 <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	CAN_FilterTypeDef high_priority_filter;
	high_priority_filter.FilterIdHigh = 0x100 << 5;
 8000fd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
	high_priority_filter.FilterMaskIdHigh = 0x700 << 5;
 8000fdc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
	high_priority_filter.FilterIdLow = 0x0000;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
	high_priority_filter.FilterMaskIdLow = 0x0000;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	637b      	str	r3, [r7, #52]	; 0x34
	high_priority_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	63bb      	str	r3, [r7, #56]	; 0x38
	high_priority_filter.FilterBank = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
	high_priority_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	643b      	str	r3, [r7, #64]	; 0x40
	high_priority_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	647b      	str	r3, [r7, #68]	; 0x44
	high_priority_filter.FilterActivation = CAN_FILTER_ENABLE;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	64bb      	str	r3, [r7, #72]	; 0x48

	if (HAL_CAN_ConfigFilter(&hcan1, &high_priority_filter) != HAL_OK) {
 8000ffe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001002:	4619      	mov	r1, r3
 8001004:	4833      	ldr	r0, [pc, #204]	; (80010d4 <CAN_Initialize+0x108>)
 8001006:	f001 fca4 	bl	8002952 <HAL_CAN_ConfigFilter>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <CAN_Initialize+0x48>
		/* Filter configuration Error */
		Error_Handler();
 8001010:	f000 fb40 	bl	8001694 <Error_Handler>
	}

	CAN_FilterTypeDef low_priority_filter;
	low_priority_filter.FilterIdHigh = 0x100 << 5;
 8001014:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001018:	603b      	str	r3, [r7, #0]
	low_priority_filter.FilterMaskIdHigh = 0x700 << 5;
 800101a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800101e:	60bb      	str	r3, [r7, #8]
	low_priority_filter.FilterIdLow = 0x0000;
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
	low_priority_filter.FilterMaskIdLow = 0x0000;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
	low_priority_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
	low_priority_filter.FilterBank = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
	low_priority_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001030:	2300      	movs	r3, #0
 8001032:	61bb      	str	r3, [r7, #24]
	low_priority_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001034:	2301      	movs	r3, #1
 8001036:	61fb      	str	r3, [r7, #28]
	low_priority_filter.FilterActivation = CAN_FILTER_ENABLE;
 8001038:	2301      	movs	r3, #1
 800103a:	623b      	str	r3, [r7, #32]

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800103c:	4825      	ldr	r0, [pc, #148]	; (80010d4 <CAN_Initialize+0x108>)
 800103e:	f001 fd52 	bl	8002ae6 <HAL_CAN_Start>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d004      	beq.n	8001052 <CAN_Initialize+0x86>
		printf("[!SYSTEM ERROR]CAN Initialization Error At CAN Start");
 8001048:	4823      	ldr	r0, [pc, #140]	; (80010d8 <CAN_Initialize+0x10c>)
 800104a:	f00a fa9f 	bl	800b58c <iprintf>
		Error_Handler();
 800104e:	f000 fb21 	bl	8001694 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8001052:	2102      	movs	r1, #2
 8001054:	481f      	ldr	r0, [pc, #124]	; (80010d4 <CAN_Initialize+0x108>)
 8001056:	f001 fe9c 	bl	8002d92 <HAL_CAN_ActivateNotification>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d004      	beq.n	800106a <CAN_Initialize+0x9e>
			!= HAL_OK) {
		printf(
 8001060:	481e      	ldr	r0, [pc, #120]	; (80010dc <CAN_Initialize+0x110>)
 8001062:	f00a fa93 	bl	800b58c <iprintf>
				"[!SYSTEM ERROR]CAN Initialization Error At CAN INTURRUPT MESSAGE PENDING RX FIFO 0");
		Error_Handler();
 8001066:	f000 fb15 	bl	8001694 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)
 800106a:	2110      	movs	r1, #16
 800106c:	4819      	ldr	r0, [pc, #100]	; (80010d4 <CAN_Initialize+0x108>)
 800106e:	f001 fe90 	bl	8002d92 <HAL_CAN_ActivateNotification>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d004      	beq.n	8001082 <CAN_Initialize+0xb6>
			!= HAL_OK) {
		printf(
 8001078:	4819      	ldr	r0, [pc, #100]	; (80010e0 <CAN_Initialize+0x114>)
 800107a:	f00a fa87 	bl	800b58c <iprintf>
				"[!SYSTEM ERROR]CAN Initialization Error At CAN INTURRUPT MESSAGE PENDING RX FIFO 1");
		Error_Handler();
 800107e:	f000 fb09 	bl	8001694 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_FULL) != HAL_OK) {
 8001082:	2104      	movs	r1, #4
 8001084:	4813      	ldr	r0, [pc, #76]	; (80010d4 <CAN_Initialize+0x108>)
 8001086:	f001 fe84 	bl	8002d92 <HAL_CAN_ActivateNotification>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d004      	beq.n	800109a <CAN_Initialize+0xce>
		printf(
 8001090:	4814      	ldr	r0, [pc, #80]	; (80010e4 <CAN_Initialize+0x118>)
 8001092:	f00a fa7b 	bl	800b58c <iprintf>
				"[!SYSTEM ERROR]CAN Initialization Error At CAN INTURRUPT RX FIFO 0 FULL");
		Error_Handler();
 8001096:	f000 fafd 	bl	8001694 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_FULL) != HAL_OK) {
 800109a:	2120      	movs	r1, #32
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <CAN_Initialize+0x108>)
 800109e:	f001 fe78 	bl	8002d92 <HAL_CAN_ActivateNotification>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d004      	beq.n	80010b2 <CAN_Initialize+0xe6>
		printf(
 80010a8:	480f      	ldr	r0, [pc, #60]	; (80010e8 <CAN_Initialize+0x11c>)
 80010aa:	f00a fa6f 	bl	800b58c <iprintf>
				"[!SYSTEM ERROR]CAN Initialization Error At CAN INTURRUPT RX FIFO 1 FULL");
		Error_Handler();
 80010ae:	f000 faf1 	bl	8001694 <Error_Handler>

//	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR))
//	!= HAL_OK) {
//		Error_Handler();
//	}
	TxHeader.RTR = CAN_RTR_DATA;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <CAN_Initialize+0x120>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <CAN_Initialize+0x120>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <CAN_Initialize+0x120>)
 80010c0:	2208      	movs	r2, #8
 80010c2:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <CAN_Initialize+0x120>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	751a      	strb	r2, [r3, #20]
}
 80010ca:	bf00      	nop
 80010cc:	3750      	adds	r7, #80	; 0x50
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200002c4 	.word	0x200002c4
 80010d8:	0800d548 	.word	0x0800d548
 80010dc:	0800d580 	.word	0x0800d580
 80010e0:	0800d5d4 	.word	0x0800d5d4
 80010e4:	0800d628 	.word	0x0800d628
 80010e8:	0800d670 	.word	0x0800d670
 80010ec:	200002ac 	.word	0x200002ac

080010f0 <configureTimerForRunTimeStats>:
void configureTimerForRunTimeStats(void);
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
	return 0;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Init */
	CAN_Initialize();
 8001114:	f7ff ff5a 	bl	8000fcc <CAN_Initialize>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of CAN_Transmission_Complete */
	CAN_Transmission_CompleteHandle = osSemaphoreNew(1, 0,
 8001118:	4a28      	ldr	r2, [pc, #160]	; (80011bc <MX_FREERTOS_Init+0xac>)
 800111a:	2100      	movs	r1, #0
 800111c:	2001      	movs	r0, #1
 800111e:	f006 fc0e 	bl	800793e <osSemaphoreNew>
 8001122:	4603      	mov	r3, r0
 8001124:	4a26      	ldr	r2, [pc, #152]	; (80011c0 <MX_FREERTOS_Init+0xb0>)
 8001126:	6013      	str	r3, [r2, #0]
			&CAN_Transmission_Complete_attributes);

	/* creation of CAN_Recieve_Complete */
	CAN_Recieve_CompleteHandle = osSemaphoreNew(1, 0,
 8001128:	4a26      	ldr	r2, [pc, #152]	; (80011c4 <MX_FREERTOS_Init+0xb4>)
 800112a:	2100      	movs	r1, #0
 800112c:	2001      	movs	r0, #1
 800112e:	f006 fc06 	bl	800793e <osSemaphoreNew>
 8001132:	4603      	mov	r3, r0
 8001134:	4a24      	ldr	r2, [pc, #144]	; (80011c8 <MX_FREERTOS_Init+0xb8>)
 8001136:	6013      	str	r3, [r2, #0]
			&CAN_Recieve_Complete_attributes);

	/* creation of RELEASE_JERMA_GAS */
	RELEASE_JERMA_GASHandle = osSemaphoreNew(1, 0,
 8001138:	4a24      	ldr	r2, [pc, #144]	; (80011cc <MX_FREERTOS_Init+0xbc>)
 800113a:	2100      	movs	r1, #0
 800113c:	2001      	movs	r0, #1
 800113e:	f006 fbfe 	bl	800793e <osSemaphoreNew>
 8001142:	4603      	mov	r3, r0
 8001144:	4a22      	ldr	r2, [pc, #136]	; (80011d0 <MX_FREERTOS_Init+0xc0>)
 8001146:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of CAN_Transmission_Queue */
	CAN_Transmission_QueueHandle = osMessageQueueNew(16, 8,
 8001148:	4a22      	ldr	r2, [pc, #136]	; (80011d4 <MX_FREERTOS_Init+0xc4>)
 800114a:	2108      	movs	r1, #8
 800114c:	2010      	movs	r0, #16
 800114e:	f006 fcc3 	bl	8007ad8 <osMessageQueueNew>
 8001152:	4603      	mov	r3, r0
 8001154:	4a20      	ldr	r2, [pc, #128]	; (80011d8 <MX_FREERTOS_Init+0xc8>)
 8001156:	6013      	str	r3, [r2, #0]
			&CAN_Transmission_Queue_attributes);

	/* creation of CAN_HIGHPrio_Reci_Queue */
	CAN_HIGHPrio_Reci_QueueHandle = osMessageQueueNew(16, 8,
 8001158:	4a20      	ldr	r2, [pc, #128]	; (80011dc <MX_FREERTOS_Init+0xcc>)
 800115a:	2108      	movs	r1, #8
 800115c:	2010      	movs	r0, #16
 800115e:	f006 fcbb 	bl	8007ad8 <osMessageQueueNew>
 8001162:	4603      	mov	r3, r0
 8001164:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <MX_FREERTOS_Init+0xd0>)
 8001166:	6013      	str	r3, [r2, #0]
			&CAN_HIGHPrio_Reci_Queue_attributes);

	/* creation of CAN_LOWPrio_Reci_Queue */
	CAN_LOWPrio_Reci_QueueHandle = osMessageQueueNew(16, sizeof(IntrimPacket),
 8001168:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <MX_FREERTOS_Init+0xd4>)
 800116a:	210c      	movs	r1, #12
 800116c:	2010      	movs	r0, #16
 800116e:	f006 fcb3 	bl	8007ad8 <osMessageQueueNew>
 8001172:	4603      	mov	r3, r0
 8001174:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <MX_FREERTOS_Init+0xd8>)
 8001176:	6013      	str	r3, [r2, #0]
			&CAN_LOWPrio_Reci_Queue_attributes);

	/* creation of CAN_JERMA_GAS_LEAK */
	CAN_JERMA_GAS_LEAKHandle = osMessageQueueNew(16, 8,
 8001178:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <MX_FREERTOS_Init+0xdc>)
 800117a:	2108      	movs	r1, #8
 800117c:	2010      	movs	r0, #16
 800117e:	f006 fcab 	bl	8007ad8 <osMessageQueueNew>
 8001182:	4603      	mov	r3, r0
 8001184:	4a1a      	ldr	r2, [pc, #104]	; (80011f0 <MX_FREERTOS_Init+0xe0>)
 8001186:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of JERMAMainThread */
	JERMAMainThreadHandle = osThreadNew(startMainThread, NULL,
 8001188:	4a1a      	ldr	r2, [pc, #104]	; (80011f4 <MX_FREERTOS_Init+0xe4>)
 800118a:	2100      	movs	r1, #0
 800118c:	481a      	ldr	r0, [pc, #104]	; (80011f8 <MX_FREERTOS_Init+0xe8>)
 800118e:	f006 fb29 	bl	80077e4 <osThreadNew>
 8001192:	4603      	mov	r3, r0
 8001194:	4a19      	ldr	r2, [pc, #100]	; (80011fc <MX_FREERTOS_Init+0xec>)
 8001196:	6013      	str	r3, [r2, #0]
			&JERMAMainThread_attributes);

	/* creation of CANThread */
	CANThreadHandle = osThreadNew(startCANThread, NULL, &CANThread_attributes);
 8001198:	4a19      	ldr	r2, [pc, #100]	; (8001200 <MX_FREERTOS_Init+0xf0>)
 800119a:	2100      	movs	r1, #0
 800119c:	4819      	ldr	r0, [pc, #100]	; (8001204 <MX_FREERTOS_Init+0xf4>)
 800119e:	f006 fb21 	bl	80077e4 <osThreadNew>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a18      	ldr	r2, [pc, #96]	; (8001208 <MX_FREERTOS_Init+0xf8>)
 80011a6:	6013      	str	r3, [r2, #0]

	/* creation of RFThread */
	RFThreadHandle = osThreadNew(startRFThread, NULL, &RFThread_attributes);
 80011a8:	4a18      	ldr	r2, [pc, #96]	; (800120c <MX_FREERTOS_Init+0xfc>)
 80011aa:	2100      	movs	r1, #0
 80011ac:	4818      	ldr	r0, [pc, #96]	; (8001210 <MX_FREERTOS_Init+0x100>)
 80011ae:	f006 fb19 	bl	80077e4 <osThreadNew>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4a17      	ldr	r2, [pc, #92]	; (8001214 <MX_FREERTOS_Init+0x104>)
 80011b6:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	0800dbb0 	.word	0x0800dbb0
 80011c0:	20000350 	.word	0x20000350
 80011c4:	0800dbc0 	.word	0x0800dbc0
 80011c8:	200003a4 	.word	0x200003a4
 80011cc:	0800dbd0 	.word	0x0800dbd0
 80011d0:	200003f8 	.word	0x200003f8
 80011d4:	0800db50 	.word	0x0800db50
 80011d8:	20000340 	.word	0x20000340
 80011dc:	0800db68 	.word	0x0800db68
 80011e0:	20000344 	.word	0x20000344
 80011e4:	0800db80 	.word	0x0800db80
 80011e8:	20000348 	.word	0x20000348
 80011ec:	0800db98 	.word	0x0800db98
 80011f0:	2000034c 	.word	0x2000034c
 80011f4:	0800dae4 	.word	0x0800dae4
 80011f8:	08001219 	.word	0x08001219
 80011fc:	20000334 	.word	0x20000334
 8001200:	0800db08 	.word	0x0800db08
 8001204:	08001229 	.word	0x08001229
 8001208:	20000338 	.word	0x20000338
 800120c:	0800db2c 	.word	0x0800db2c
 8001210:	080012cd 	.word	0x080012cd
 8001214:	2000033c 	.word	0x2000033c

08001218 <startMainThread>:
 * @brief  Function implementing the MainThread thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startMainThread */
void startMainThread(void *argument) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startMainThread */
	/* Infinite loop */
	for (;;) {
		//osSemaphoreWait(RELEASE_JERMA_GASHandle, 0);
		osDelay(1);
 8001220:	2001      	movs	r0, #1
 8001222:	f006 fb71 	bl	8007908 <osDelay>
 8001226:	e7fb      	b.n	8001220 <startMainThread+0x8>

08001228 <startCANThread>:
 * @param argument: Not used
 * @retval None
 */

/* USER CODE END Header_startCANThread */
void startCANThread(void *argument) {
 8001228:	b5b0      	push	{r4, r5, r7, lr}
 800122a:	b08c      	sub	sp, #48	; 0x30
 800122c:	af02      	add	r7, sp, #8
 800122e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startCANThread */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001230:	2104      	movs	r1, #4
 8001232:	4821      	ldr	r0, [pc, #132]	; (80012b8 <startCANThread+0x90>)
 8001234:	f004 fce8 	bl	8005c08 <HAL_TIM_PWM_Start>
	//uint8_t message[8] = { 1, 2, 3, 4, 5, 6, 7, 8 };
	uint8_t message2[8] = { 0 };
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
	IntrimPacket intrim;

	/* Infinite loop */
	for (;;) {

		osMessageQueueGet(CAN_LOWPrio_Reci_QueueHandle, &intrim, NULL,
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <startCANThread+0x94>)
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	f107 010c 	add.w	r1, r7, #12
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	2200      	movs	r2, #0
 800124e:	f006 fd17 	bl	8007c80 <osMessageQueueGet>
		osWaitForever);
		htim1.Instance->CCR2 = 5;
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <startCANThread+0x90>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2205      	movs	r2, #5
 8001258:	639a      	str	r2, [r3, #56]	; 0x38
//		printf("Got message: ");
//		for (int i = 0; i < 8; i++)
//			printf("%u", data[i]);

		printf("\r\n");
 800125a:	4819      	ldr	r0, [pc, #100]	; (80012c0 <startCANThread+0x98>)
 800125c:	f00a f9fc 	bl	800b658 <puts>

		reciever = *((struct Data*) intrim.data);
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	1d1a      	adds	r2, r3, #4
 8001266:	f107 0318 	add.w	r3, r7, #24
 800126a:	6810      	ldr	r0, [r2, #0]
 800126c:	6851      	ldr	r1, [r2, #4]
 800126e:	c303      	stmia	r3!, {r0, r1}
		printf("Packet ID: %hx ", (uint8_t) intrim.id);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4619      	mov	r1, r3
 8001276:	4813      	ldr	r0, [pc, #76]	; (80012c4 <startCANThread+0x9c>)
 8001278:	f00a f988 	bl	800b58c <iprintf>
		printf("H2: %f temp: %f", reciever.h2, reciever.temp);
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f962 	bl	8000548 <__aeabi_f2d>
 8001284:	4604      	mov	r4, r0
 8001286:	460d      	mov	r5, r1
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f95c 	bl	8000548 <__aeabi_f2d>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	e9cd 2300 	strd	r2, r3, [sp]
 8001298:	4622      	mov	r2, r4
 800129a:	462b      	mov	r3, r5
 800129c:	480a      	ldr	r0, [pc, #40]	; (80012c8 <startCANThread+0xa0>)
 800129e:	f00a f975 	bl	800b58c <iprintf>
		//CAN_Transmit(0x101, &data, sizeof(data));
		osDelay(100);
 80012a2:	2064      	movs	r0, #100	; 0x64
 80012a4:	f006 fb30 	bl	8007908 <osDelay>
		htim1.Instance->CCR2 = 0;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <startCANThread+0x90>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2200      	movs	r2, #0
 80012ae:	639a      	str	r2, [r3, #56]	; 0x38
		osDelay(100);
 80012b0:	2064      	movs	r0, #100	; 0x64
 80012b2:	f006 fb29 	bl	8007908 <osDelay>
		osMessageQueueGet(CAN_LOWPrio_Reci_QueueHandle, &intrim, NULL,
 80012b6:	e7c3      	b.n	8001240 <startCANThread+0x18>
 80012b8:	200004cc 	.word	0x200004cc
 80012bc:	20000348 	.word	0x20000348
 80012c0:	0800d7c8 	.word	0x0800d7c8
 80012c4:	0800d7cc 	.word	0x0800d7cc
 80012c8:	0800d7dc 	.word	0x0800d7dc

080012cc <startRFThread>:
 * @brief Function implementing the RFThread thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startRFThread */
void startRFThread(void *argument) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startRFThread */
	struct Data {
		float h2;
		float temp;
	} test_message;
	test_message.h2 = 1;
 80012d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012d8:	60bb      	str	r3, [r7, #8]
	test_message.temp = 1;
 80012da:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012de:	60fb      	str	r3, [r7, #12]

	rfm95_init(&rfm95_handle);
 80012e0:	480b      	ldr	r0, [pc, #44]	; (8001310 <startRFThread+0x44>)
 80012e2:	f000 fb1b 	bl	800191c <rfm95_init>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80012e6:	2104      	movs	r1, #4
 80012e8:	480a      	ldr	r0, [pc, #40]	; (8001314 <startRFThread+0x48>)
 80012ea:	f004 fc8d 	bl	8005c08 <HAL_TIM_PWM_Start>
	/* Infinite loop */
	for (;;) {
//		HAL_RNG_GenerateRandomNumber(&hrng, (uint32_t*) &message3.h2);
//		HAL_RNG_GenerateRandomNumber(&hrng, (uint32_t*) &message3.temp);
//		message3.h2 = message3.h2 / 1000 + 1;
		htim2.Instance->CCR2 = 5;
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <startRFThread+0x48>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2205      	movs	r2, #5
 80012f4:	639a      	str	r2, [r3, #56]	; 0x38
//				sizeof(test_message));
//		CAN_Transmit(0x123, (uint32_t*) &message3, sizeof(message3),
//		CAN_RTR_DATA);
//		//osMessageQueuePut(CAN_Transmission_QueueHandle, &message, 0,
//		//osWaitForever);
		osDelay(1000);
 80012f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012fa:	f006 fb05 	bl	8007908 <osDelay>
		htim2.Instance->CCR2 = 0;
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <startRFThread+0x48>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2200      	movs	r2, #0
 8001304:	639a      	str	r2, [r3, #56]	; 0x38

		osDelay(100);
 8001306:	2064      	movs	r0, #100	; 0x64
 8001308:	f006 fafe 	bl	8007908 <osDelay>
		htim2.Instance->CCR2 = 5;
 800130c:	e7ef      	b.n	80012ee <startRFThread+0x22>
 800130e:	bf00      	nop
 8001310:	20000000 	.word	0x20000000
 8001314:	20000518 	.word	0x20000518

08001318 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
volatile IntrimPacket packet; // Declared as a temporary variable outside ISR as this is being allocated and re allocated,
// therefore to save ISR time declaring it out side. Also volatile since only used in ISR.

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

	// Just check if there is atleast 1 spot open
	// If we dont and call get message we will loose that message since it wont fit and the ISR will exit.
	if (osMessageQueueGetSpace(CAN_LOWPrio_Reci_QueueHandle) >= 1) {
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f006 fd09 	bl	8007d3c <osMessageQueueGetSpace>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d01d      	beq.n	800136c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData)
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001332:	4a12      	ldr	r2, [pc, #72]	; (800137c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001334:	2100      	movs	r1, #0
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f001 fc19 	bl	8002b6e <HAL_CAN_GetRxMessage>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
				!= HAL_OK) {
			Error_Handler();
 8001342:	f000 f9a7 	bl	8001694 <Error_Handler>
		}
		// Mask the packet ID out.
		packet.id = RxHeader.StdId & 0x0FF;
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	4a0c      	ldr	r2, [pc, #48]	; (8001380 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800134e:	6013      	str	r3, [r2, #0]

		memcpy(packet.data, RxData, 8); // this is always 8 bytes therefore there
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8001352:	4a09      	ldr	r2, [pc, #36]	; (8001378 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001354:	3304      	adds	r3, #4
 8001356:	e892 0003 	ldmia.w	r2, {r0, r1}
 800135a:	e883 0003 	stmia.w	r3, {r0, r1}
		// is pretty much no added iteration time. The compiler will optimize the loop away.

		osMessageQueuePut(CAN_LOWPrio_Reci_QueueHandle, &packet, 0, 0);
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8001360:	6818      	ldr	r0, [r3, #0]
 8001362:	2300      	movs	r3, #0
 8001364:	2200      	movs	r2, #0
 8001366:	4906      	ldr	r1, [pc, #24]	; (8001380 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8001368:	f006 fc2a 	bl	8007bc0 <osMessageQueuePut>
	}

}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000348 	.word	0x20000348
 8001378:	20000324 	.word	0x20000324
 800137c:	200002ec 	.word	0x200002ec
 8001380:	200003fc 	.word	0x200003fc

08001384 <HAL_CAN_RxFifo1MsgPendingCallback>:
struct Hydrogen_Board_Leak_Emergency_Transmission {
	float h2_concentration;
};

/** HIGH PRIORITY ONLY TALKS TO H2 Board. */
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader_Reserved,
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x50>)
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 8001390:	2101      	movs	r1, #1
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f001 fbeb 	bl	8002b6e <HAL_CAN_GetRxMessage>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e>
			RxData_Reserved) != HAL_OK) {
		Error_Handler();
 800139e:	f000 f979 	bl	8001694 <Error_Handler>
	}
	if (RxHeader_Reserved.StdId == 0x000) {
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10f      	bne.n	80013ca <HAL_CAN_RxFifo1MsgPendingCallback+0x46>
		// Emergency Release JERMA. GAS GAS GAS
		printf("[!HYDROGEN BOARD]: LEAK!!! Releasing JERMAAA");
 80013aa:	480c      	ldr	r0, [pc, #48]	; (80013dc <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 80013ac:	f00a f8ee 	bl	800b58c <iprintf>
		osSemaphoreRelease(RELEASE_JERMA_GASHandle);
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f006 fb4b 	bl	8007a50 <osSemaphoreRelease>
		osMessageQueuePut(CAN_JERMA_GAS_LEAKHandle, RxData_Reserved, 0,
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 80013bc:	6818      	ldr	r0, [r3, #0]
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	2200      	movs	r2, #0
 80013c4:	4903      	ldr	r1, [pc, #12]	; (80013d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x50>)
 80013c6:	f006 fbfb 	bl	8007bc0 <osMessageQueuePut>
		osWaitForever);
	}

}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000032c 	.word	0x2000032c
 80013d8:	20000308 	.word	0x20000308
 80013dc:	0800d7ec 	.word	0x0800d7ec
 80013e0:	200003f8 	.word	0x200003f8
 80013e4:	2000034c 	.word	0x2000034c

080013e8 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	4b50      	ldr	r3, [pc, #320]	; (8001540 <MX_GPIO_Init+0x158>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4a4f      	ldr	r2, [pc, #316]	; (8001540 <MX_GPIO_Init+0x158>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4b4d      	ldr	r3, [pc, #308]	; (8001540 <MX_GPIO_Init+0x158>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4b4a      	ldr	r3, [pc, #296]	; (8001540 <MX_GPIO_Init+0x158>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	4a49      	ldr	r2, [pc, #292]	; (8001540 <MX_GPIO_Init+0x158>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001422:	4b47      	ldr	r3, [pc, #284]	; (8001540 <MX_GPIO_Init+0x158>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	4b44      	ldr	r3, [pc, #272]	; (8001540 <MX_GPIO_Init+0x158>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	4a43      	ldr	r2, [pc, #268]	; (8001540 <MX_GPIO_Init+0x158>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143a:	4b41      	ldr	r3, [pc, #260]	; (8001540 <MX_GPIO_Init+0x158>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800144c:	483d      	ldr	r0, [pc, #244]	; (8001544 <MX_GPIO_Init+0x15c>)
 800144e:	f002 f937 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_NSS_GPIO_GPIO_Port, SPI_NSS_GPIO_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	2110      	movs	r1, #16
 8001456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145a:	f002 f931 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_NRST_GPIO_Port, RF_NRST_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2120      	movs	r1, #32
 8001462:	4839      	ldr	r0, [pc, #228]	; (8001548 <MX_GPIO_Init+0x160>)
 8001464:	f002 f92c 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO5_Pin;
 8001468:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800146c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800146e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO5_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	4619      	mov	r1, r3
 800147e:	4831      	ldr	r0, [pc, #196]	; (8001544 <MX_GPIO_Init+0x15c>)
 8001480:	f001 ffb4 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8001484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001488:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 030c 	add.w	r3, r7, #12
 800149a:	4619      	mov	r1, r3
 800149c:	4829      	ldr	r0, [pc, #164]	; (8001544 <MX_GPIO_Init+0x15c>)
 800149e:	f001 ffa5 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_NSS_GPIO_Pin;
 80014a2:	2310      	movs	r3, #16
 80014a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a6:	2301      	movs	r3, #1
 80014a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_NSS_GPIO_GPIO_Port, &GPIO_InitStruct);
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	4619      	mov	r1, r3
 80014b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014bc:	f001 ff96 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin|DIO2_Pin|DIO3_Pin;
 80014c0:	23c3      	movs	r3, #195	; 0xc3
 80014c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	4619      	mov	r1, r3
 80014d4:	481c      	ldr	r0, [pc, #112]	; (8001548 <MX_GPIO_Init+0x160>)
 80014d6:	f001 ff89 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	4619      	mov	r1, r3
 80014f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fa:	f001 ff77 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO4_Pin;
 80014fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001502:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001504:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO4_GPIO_Port, &GPIO_InitStruct);
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	4619      	mov	r1, r3
 8001514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001518:	f001 ff68 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_NRST_Pin;
 800151c:	2320      	movs	r3, #32
 800151e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001520:	2301      	movs	r3, #1
 8001522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_NRST_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	4619      	mov	r1, r3
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_GPIO_Init+0x160>)
 8001534:	f001 ff5a 	bl	80033ec <HAL_GPIO_Init>

}
 8001538:	bf00      	nop
 800153a:	3720      	adds	r7, #32
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021000 	.word	0x40021000
 8001544:	48000800 	.word	0x48000800
 8001548:	48000400 	.word	0x48000400

0800154c <_write>:
int _write(int file, char *ptr, int len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	b29a      	uxth	r2, r3
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	4804      	ldr	r0, [pc, #16]	; (8001574 <_write+0x28>)
 8001564:	f005 fc40 	bl	8006de8 <HAL_UART_Transmit>
	return len;
 8001568:	687b      	ldr	r3, [r7, #4]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000564 	.word	0x20000564

08001578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800157c:	f001 f891 	bl	80026a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001580:	f000 f81d 	bl	80015be <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001584:	f7ff ff30 	bl	80013e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001588:	f000 ffda 	bl	8002540 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800158c:	f7ff fc8a 	bl	8000ea4 <MX_CAN1_Init>
  MX_TIM1_Init();
 8001590:	f000 fe1c 	bl	80021cc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001594:	f000 fed2 	bl	800233c <MX_TIM2_Init>
  MX_SPI1_Init();
 8001598:	f000 fb64 	bl	8001c64 <MX_SPI1_Init>
  MX_RNG_Init();
 800159c:	f000 fb0a 	bl	8001bb4 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015a0:	f006 f8d6 	bl	8007750 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80015a4:	f7ff fdb4 	bl	8001110 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015a8:	f006 f8f6 	bl	8007798 <osKernelStart>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_Delay(500);
 80015ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015b0:	f001 f8b0 	bl	8002714 <HAL_Delay>
		//HAL_GPIO_WritePin(GPIOA, LED_D1_Pin, GPIO_PIN_SET);

		//CAN_Transmit(TxData, sizeof(TxData));
		//CAN_Write_Hello();
		HAL_Delay(500);
 80015b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015b8:	f001 f8ac 	bl	8002714 <HAL_Delay>
		HAL_Delay(500);
 80015bc:	e7f6      	b.n	80015ac <main+0x34>

080015be <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b096      	sub	sp, #88	; 0x58
 80015c2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2244      	movs	r2, #68	; 0x44
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f00a f923 	bl	800b818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d2:	463b      	mov	r3, r7
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015e4:	f002 f892 	bl	800370c <HAL_PWREx_ControlVoltageScaling>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015ee:	f000 f851 	bl	8001694 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015f2:	2301      	movs	r3, #1
 80015f4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015f6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015fc:	2302      	movs	r3, #2
 80015fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001600:	2303      	movs	r3, #3
 8001602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001604:	2301      	movs	r3, #1
 8001606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001608:	2314      	movs	r3, #20
 800160a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800160c:	2307      	movs	r3, #7
 800160e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001610:	2302      	movs	r3, #2
 8001612:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001614:	2302      	movs	r3, #2
 8001616:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4618      	mov	r0, r3
 800161e:	f002 f8cb 	bl	80037b8 <HAL_RCC_OscConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001628:	f000 f834 	bl	8001694 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162c:	230f      	movs	r3, #15
 800162e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001630:	2303      	movs	r3, #3
 8001632:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001640:	463b      	mov	r3, r7
 8001642:	2104      	movs	r1, #4
 8001644:	4618      	mov	r0, r3
 8001646:	f002 fccb 	bl	8003fe0 <HAL_RCC_ClockConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001650:	f000 f820 	bl	8001694 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_16);
 8001654:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001658:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800165c:	2000      	movs	r0, #0
 800165e:	f002 fdbf 	bl	80041e0 <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001662:	f002 fee7 	bl	8004434 <HAL_RCC_EnableCSS>
}
 8001666:	bf00      	nop
 8001668:	3758      	adds	r7, #88	; 0x58
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a04      	ldr	r2, [pc, #16]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d101      	bne.n	8001686 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001682:	f001 f827 	bl	80026d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40001000 	.word	0x40001000

08001694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800169a:	b672      	cpsid	i
}
 800169c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	e002      	b.n	80016aa <Error_Handler+0x16>
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3301      	adds	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	4a1a      	ldr	r2, [pc, #104]	; (8001718 <Error_Handler+0x84>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	ddf8      	ble.n	80016a4 <Error_Handler+0x10>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D1_PWM_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	e002      	b.n	80016be <Error_Handler+0x2a>
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	3301      	adds	r3, #1
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4a15      	ldr	r2, [pc, #84]	; (8001718 <Error_Handler+0x84>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	ddf8      	ble.n	80016b8 <Error_Handler+0x24>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D2_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	e002      	b.n	80016d2 <Error_Handler+0x3e>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	3301      	adds	r3, #1
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4a10      	ldr	r2, [pc, #64]	; (8001718 <Error_Handler+0x84>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	ddf8      	ble.n	80016cc <Error_Handler+0x38>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D3_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	e002      	b.n	80016e6 <Error_Handler+0x52>
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	3301      	adds	r3, #1
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <Error_Handler+0x84>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	ddf8      	ble.n	80016e0 <Error_Handler+0x4c>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D1_Pin, GPIO_PIN_RESET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	e002      	b.n	80016fa <Error_Handler+0x66>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3301      	adds	r3, #1
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a06      	ldr	r2, [pc, #24]	; (8001718 <Error_Handler+0x84>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	ddf8      	ble.n	80016f4 <Error_Handler+0x60>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D2_Pin, GPIO_PIN_RESET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001702:	2300      	movs	r3, #0
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	e002      	b.n	800170e <Error_Handler+0x7a>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	3301      	adds	r3, #1
 800170c:	603b      	str	r3, [r7, #0]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	4a01      	ldr	r2, [pc, #4]	; (8001718 <Error_Handler+0x84>)
 8001712:	4293      	cmp	r3, r2
 8001714:	ddf8      	ble.n	8001708 <Error_Handler+0x74>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001716:	e7c2      	b.n	800169e <Error_Handler+0xa>
 8001718:	000c34ff 	.word	0x000c34ff

0800171c <read_register>:

#define RFM95_REGISTER_INVERT_IQ_1_RX                    		0x67
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19

static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	460b      	mov	r3, r1
 800172a:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6858      	ldr	r0, [r3, #4]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	891b      	ldrh	r3, [r3, #8]
 8001734:	2200      	movs	r2, #0
 8001736:	4619      	mov	r1, r3
 8001738:	f001 ffc2 	bl	80036c0 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 800173c:	7afb      	ldrb	r3, [r7, #11]
 800173e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001742:	b2db      	uxtb	r3, r3
 8001744:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	f107 0117 	add.w	r1, r7, #23
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
 8001752:	2201      	movs	r2, #1
 8001754:	f003 fadc 	bl	8004d10 <HAL_SPI_Transmit>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <read_register+0x46>
		return false;
 800175e:	2300      	movs	r3, #0
 8001760:	e016      	b.n	8001790 <read_register+0x74>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6818      	ldr	r0, [r3, #0]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	b29a      	uxth	r2, r3
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	f003 fc3c 	bl	8004fec <HAL_SPI_Receive>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <read_register+0x62>
		return false;
 800177a:	2300      	movs	r3, #0
 800177c:	e008      	b.n	8001790 <read_register+0x74>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6858      	ldr	r0, [r3, #4]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	891b      	ldrh	r3, [r3, #8]
 8001786:	2201      	movs	r2, #1
 8001788:	4619      	mov	r1, r3
 800178a:	f001 ff99 	bl	80036c0 <HAL_GPIO_WritePin>

	return true;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <write_register>:

static bool write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	70fb      	strb	r3, [r7, #3]
 80017a4:	4613      	mov	r3, r2
 80017a6:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6858      	ldr	r0, [r3, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	891b      	ldrh	r3, [r3, #8]
 80017b0:	2200      	movs	r2, #0
 80017b2:	4619      	mov	r1, r3
 80017b4:	f001 ff84 	bl	80036c0 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	733b      	strb	r3, [r7, #12]
 80017c2:	78bb      	ldrb	r3, [r7, #2]
 80017c4:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	f107 010c 	add.w	r1, r7, #12
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
 80017d2:	2202      	movs	r2, #2
 80017d4:	f003 fa9c 	bl	8004d10 <HAL_SPI_Transmit>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <write_register+0x4a>
		return false;
 80017de:	2300      	movs	r3, #0
 80017e0:	e008      	b.n	80017f4 <write_register+0x5c>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6858      	ldr	r0, [r3, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	891b      	ldrh	r3, [r3, #8]
 80017ea:	2201      	movs	r2, #1
 80017ec:	4619      	mov	r1, r3
 80017ee:	f001 ff67 	bl	80036c0 <HAL_GPIO_WritePin>

	return true;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <reset>:
	config_set_channel(handle, 1, 868300000);
	config_set_channel(handle, 2, 868500000);
}

static void reset(rfm95_handle_t *handle)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68d8      	ldr	r0, [r3, #12]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	8a1b      	ldrh	r3, [r3, #16]
 800180c:	2200      	movs	r2, #0
 800180e:	4619      	mov	r1, r3
 8001810:	f001 ff56 	bl	80036c0 <HAL_GPIO_WritePin>
	//HAL_Delay(1); // 0.1ms would theoretically be enough
	osDelay(5);
 8001814:	2005      	movs	r0, #5
 8001816:	f006 f877 	bl	8007908 <osDelay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68d8      	ldr	r0, [r3, #12]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	8a1b      	ldrh	r3, [r3, #16]
 8001822:	2201      	movs	r2, #1
 8001824:	4619      	mov	r1, r3
 8001826:	f001 ff4b 	bl	80036c0 <HAL_GPIO_WritePin>
	osDelay(5);
 800182a:	2005      	movs	r0, #5
 800182c:	f006 f86c 	bl	8007908 <osDelay>
	//HAL_Delay(5);
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <rfm95_set_power>:

	return handle->interrupt_times[RFM95_INTERRUPT_DIO0] != 0;
}

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 8001844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001848:	2b01      	cmp	r3, #1
 800184a:	dd03      	ble.n	8001854 <rfm95_set_power+0x1c>
 800184c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001850:	2b11      	cmp	r3, #17
 8001852:	dd09      	ble.n	8001868 <rfm95_set_power+0x30>
 8001854:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001858:	2b14      	cmp	r3, #20
 800185a:	d005      	beq.n	8001868 <rfm95_set_power+0x30>
 800185c:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <rfm95_set_power+0xd8>)
 800185e:	4a2d      	ldr	r2, [pc, #180]	; (8001914 <rfm95_set_power+0xdc>)
 8001860:	21b7      	movs	r1, #183	; 0xb7
 8001862:	482d      	ldr	r0, [pc, #180]	; (8001918 <rfm95_set_power+0xe0>)
 8001864:	f009 f93a 	bl	800aadc <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 8001868:	2300      	movs	r3, #0
 800186a:	733b      	strb	r3, [r7, #12]
	uint8_t pa_dac_config = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]

	if (power >= 2 && power <= 17) {
 8001870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001874:	2b01      	cmp	r3, #1
 8001876:	dd18      	ble.n	80018aa <rfm95_set_power+0x72>
 8001878:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800187c:	2b11      	cmp	r3, #17
 800187e:	dc14      	bgt.n	80018aa <rfm95_set_power+0x72>
		pa_config.max_power = 7;
 8001880:	7b3b      	ldrb	r3, [r7, #12]
 8001882:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001886:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8001888:	7b3b      	ldrb	r3, [r7, #12]
 800188a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800188e:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	3b02      	subs	r3, #2
 8001894:	b2db      	uxtb	r3, r3
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	b2da      	uxtb	r2, r3
 800189c:	7b3b      	ldrb	r3, [r7, #12]
 800189e:	f362 0303 	bfi	r3, r2, #0, #4
 80018a2:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 80018a4:	2384      	movs	r3, #132	; 0x84
 80018a6:	73fb      	strb	r3, [r7, #15]
 80018a8:	e011      	b.n	80018ce <rfm95_set_power+0x96>

	} else if (power == 20) {
 80018aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018ae:	2b14      	cmp	r3, #20
 80018b0:	d10d      	bne.n	80018ce <rfm95_set_power+0x96>
		pa_config.max_power = 7;
 80018b2:	7b3b      	ldrb	r3, [r7, #12]
 80018b4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80018b8:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 80018ba:	7b3b      	ldrb	r3, [r7, #12]
 80018bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c0:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 80018c2:	7b3b      	ldrb	r3, [r7, #12]
 80018c4:	f043 030f 	orr.w	r3, r3, #15
 80018c8:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 80018ca:	2387      	movs	r3, #135	; 0x87
 80018cc:	73fb      	strb	r3, [r7, #15]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 80018ce:	7b3b      	ldrb	r3, [r7, #12]
 80018d0:	461a      	mov	r2, r3
 80018d2:	2109      	movs	r1, #9
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ff5f 	bl	8001798 <write_register>
 80018da:	4603      	mov	r3, r0
 80018dc:	f083 0301 	eor.w	r3, r3, #1
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <rfm95_set_power+0xb2>
 80018e6:	2300      	movs	r3, #0
 80018e8:	e00e      	b.n	8001908 <rfm95_set_power+0xd0>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	461a      	mov	r2, r3
 80018ee:	214d      	movs	r1, #77	; 0x4d
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff51 	bl	8001798 <write_register>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f083 0301 	eor.w	r3, r3, #1
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <rfm95_set_power+0xce>
 8001902:	2300      	movs	r3, #0
 8001904:	e000      	b.n	8001908 <rfm95_set_power+0xd0>

	return true;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	0800d878 	.word	0x0800d878
 8001914:	0800dbe0 	.word	0x0800dbe0
 8001918:	0800d830 	.word	0x0800d830

0800191c <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800192e:	d005      	beq.n	800193c <rfm95_init+0x20>
 8001930:	4b94      	ldr	r3, [pc, #592]	; (8001b84 <rfm95_init+0x268>)
 8001932:	4a95      	ldr	r2, [pc, #596]	; (8001b88 <rfm95_init+0x26c>)
 8001934:	21d1      	movs	r1, #209	; 0xd1
 8001936:	4895      	ldr	r0, [pc, #596]	; (8001b8c <rfm95_init+0x270>)
 8001938:	f009 f8d0 	bl	800aadc <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <rfm95_init+0x36>
 8001946:	4b92      	ldr	r3, [pc, #584]	; (8001b90 <rfm95_init+0x274>)
 8001948:	4a8f      	ldr	r2, [pc, #572]	; (8001b88 <rfm95_init+0x26c>)
 800194a:	21d2      	movs	r1, #210	; 0xd2
 800194c:	488f      	ldr	r0, [pc, #572]	; (8001b8c <rfm95_init+0x270>)
 800194e:	f009 f8c5 	bl	800aadc <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800195c:	d005      	beq.n	800196a <rfm95_init+0x4e>
 800195e:	4b8d      	ldr	r3, [pc, #564]	; (8001b94 <rfm95_init+0x278>)
 8001960:	4a89      	ldr	r2, [pc, #548]	; (8001b88 <rfm95_init+0x26c>)
 8001962:	21d3      	movs	r1, #211	; 0xd3
 8001964:	4889      	ldr	r0, [pc, #548]	; (8001b8c <rfm95_init+0x270>)
 8001966:	f009 f8b9 	bl	800aadc <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <rfm95_init+0x64>
 8001974:	4b88      	ldr	r3, [pc, #544]	; (8001b98 <rfm95_init+0x27c>)
 8001976:	4a84      	ldr	r2, [pc, #528]	; (8001b88 <rfm95_init+0x26c>)
 8001978:	21d4      	movs	r1, #212	; 0xd4
 800197a:	4884      	ldr	r0, [pc, #528]	; (8001b8c <rfm95_init+0x270>)
 800197c:	f009 f8ae 	bl	800aadc <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d005      	beq.n	8001996 <rfm95_init+0x7a>
 800198a:	4b84      	ldr	r3, [pc, #528]	; (8001b9c <rfm95_init+0x280>)
 800198c:	4a7e      	ldr	r2, [pc, #504]	; (8001b88 <rfm95_init+0x26c>)
 800198e:	21d5      	movs	r1, #213	; 0xd5
 8001990:	487e      	ldr	r0, [pc, #504]	; (8001b8c <rfm95_init+0x270>)
 8001992:	f009 f8a3 	bl	800aadc <__assert_func>
	assert(handle->get_precision_tick != NULL);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	2b00      	cmp	r3, #0
 800199c:	d105      	bne.n	80019aa <rfm95_init+0x8e>
 800199e:	4b80      	ldr	r3, [pc, #512]	; (8001ba0 <rfm95_init+0x284>)
 80019a0:	4a79      	ldr	r2, [pc, #484]	; (8001b88 <rfm95_init+0x26c>)
 80019a2:	21d6      	movs	r1, #214	; 0xd6
 80019a4:	4879      	ldr	r0, [pc, #484]	; (8001b8c <rfm95_init+0x270>)
 80019a6:	f009 f899 	bl	800aadc <__assert_func>
	assert(handle->random_int != NULL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d105      	bne.n	80019be <rfm95_init+0xa2>
 80019b2:	4b7c      	ldr	r3, [pc, #496]	; (8001ba4 <rfm95_init+0x288>)
 80019b4:	4a74      	ldr	r2, [pc, #464]	; (8001b88 <rfm95_init+0x26c>)
 80019b6:	21d7      	movs	r1, #215	; 0xd7
 80019b8:	4874      	ldr	r0, [pc, #464]	; (8001b8c <rfm95_init+0x270>)
 80019ba:	f009 f88f 	bl	800aadc <__assert_func>
	assert(handle->precision_sleep_until != NULL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d105      	bne.n	80019d2 <rfm95_init+0xb6>
 80019c6:	4b78      	ldr	r3, [pc, #480]	; (8001ba8 <rfm95_init+0x28c>)
 80019c8:	4a6f      	ldr	r2, [pc, #444]	; (8001b88 <rfm95_init+0x26c>)
 80019ca:	21d8      	movs	r1, #216	; 0xd8
 80019cc:	486f      	ldr	r0, [pc, #444]	; (8001b8c <rfm95_init+0x270>)
 80019ce:	f009 f885 	bl	800aadc <__assert_func>
	assert(handle->precision_tick_frequency > 10000);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80019da:	4293      	cmp	r3, r2
 80019dc:	d805      	bhi.n	80019ea <rfm95_init+0xce>
 80019de:	4b73      	ldr	r3, [pc, #460]	; (8001bac <rfm95_init+0x290>)
 80019e0:	4a69      	ldr	r2, [pc, #420]	; (8001b88 <rfm95_init+0x26c>)
 80019e2:	21d9      	movs	r1, #217	; 0xd9
 80019e4:	4869      	ldr	r0, [pc, #420]	; (8001b8c <rfm95_init+0x270>)
 80019e6:	f009 f879 	bl	800aadc <__assert_func>

	reset(handle);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ff06 	bl	80017fc <reset>
//		config_load_default(handle);
//	}

	// Check for correct version.
	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 80019f0:	f107 020f 	add.w	r2, r7, #15
 80019f4:	2301      	movs	r3, #1
 80019f6:	2142      	movs	r1, #66	; 0x42
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff fe8f 	bl	800171c <read_register>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f083 0301 	eor.w	r3, r3, #1
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <rfm95_init+0xf2>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e0b6      	b.n	8001b7c <rfm95_init+0x260>
	//if (version != RFM9x_VER) return false;
	printf("RFM Version: %d", version);
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	4619      	mov	r1, r3
 8001a12:	4867      	ldr	r0, [pc, #412]	; (8001bb0 <rfm95_init+0x294>)
 8001a14:	f009 fdba 	bl	800b58c <iprintf>
	// Module must be placed in sleep mode before switching to lora.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff febb 	bl	8001798 <write_register>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f083 0301 	eor.w	r3, r3, #1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <rfm95_init+0x116>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e0a4      	b.n	8001b7c <rfm95_init+0x260>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8001a32:	2280      	movs	r2, #128	; 0x80
 8001a34:	2101      	movs	r1, #1
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff feae 	bl	8001798 <write_register>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f083 0301 	eor.w	r3, r3, #1
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <rfm95_init+0x130>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e097      	b.n	8001b7c <rfm95_init+0x260>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2140      	movs	r1, #64	; 0x40
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff fea1 	bl	8001798 <write_register>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f083 0301 	eor.w	r3, r3, #1
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <rfm95_init+0x14a>
 8001a62:	2300      	movs	r3, #0
 8001a64:	e08a      	b.n	8001b7c <rfm95_init+0x260>

	if (handle->on_after_interrupts_configured != NULL) {
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <rfm95_init+0x158>
		handle->on_after_interrupts_configured();
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a72:	4798      	blx	r3
	}

	uint8_t temp;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &temp, 1)) return false;
 8001a74:	f107 020e 	add.w	r2, r7, #14
 8001a78:	2301      	movs	r3, #1
 8001a7a:	2142      	movs	r1, #66	; 0x42
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff fe4d 	bl	800171c <read_register>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f083 0301 	eor.w	r3, r3, #1
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <rfm95_init+0x176>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e074      	b.n	8001b7c <rfm95_init+0x260>
	// Set module power to 17dbm.
	if (!rfm95_set_power(handle, 17)) return false;
 8001a92:	2111      	movs	r1, #17
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff fecf 	bl	8001838 <rfm95_set_power>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f083 0301 	eor.w	r3, r3, #1
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <rfm95_init+0x18e>
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e068      	b.n	8001b7c <rfm95_init+0x260>

	// Set LNA to the highest gain with 150% boost.
	if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 8001aaa:	2223      	movs	r2, #35	; 0x23
 8001aac:	210c      	movs	r1, #12
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff fe72 	bl	8001798 <write_register>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f083 0301 	eor.w	r3, r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <rfm95_init+0x1a8>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e05b      	b.n	8001b7c <rfm95_init+0x260>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2120      	movs	r1, #32
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff fe65 	bl	8001798 <write_register>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f083 0301 	eor.w	r3, r3, #1
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <rfm95_init+0x1c2>
 8001ada:	2300      	movs	r3, #0
 8001adc:	e04e      	b.n	8001b7c <rfm95_init+0x260>
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08)) return false;
 8001ade:	2208      	movs	r2, #8
 8001ae0:	2121      	movs	r1, #33	; 0x21
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff fe58 	bl	8001798 <write_register>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f083 0301 	eor.w	r3, r3, #1
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <rfm95_init+0x1dc>
 8001af4:	2300      	movs	r3, #0
 8001af6:	e041      	b.n	8001b7c <rfm95_init+0x260>

	// Set TTN sync word 0x34.
	if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34)) return false;
 8001af8:	2234      	movs	r2, #52	; 0x34
 8001afa:	2139      	movs	r1, #57	; 0x39
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff fe4b 	bl	8001798 <write_register>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f083 0301 	eor.w	r3, r3, #1
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <rfm95_init+0x1f6>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e034      	b.n	8001b7c <rfm95_init+0x260>

	// Set up TX and RX FIFO base addresses.
	if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80)) return false;
 8001b12:	2280      	movs	r2, #128	; 0x80
 8001b14:	210e      	movs	r1, #14
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff fe3e 	bl	8001798 <write_register>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f083 0301 	eor.w	r3, r3, #1
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <rfm95_init+0x210>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	e027      	b.n	8001b7c <rfm95_init+0x260>
	if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00)) return false;
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	210f      	movs	r1, #15
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff fe31 	bl	8001798 <write_register>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f083 0301 	eor.w	r3, r3, #1
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <rfm95_init+0x22a>
 8001b42:	2300      	movs	r3, #0
 8001b44:	e01a      	b.n	8001b7c <rfm95_init+0x260>

	// Maximum payload length of the RFM95 is 64.
	if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64)) return false;
 8001b46:	2240      	movs	r2, #64	; 0x40
 8001b48:	2123      	movs	r1, #35	; 0x23
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff fe24 	bl	8001798 <write_register>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f083 0301 	eor.w	r3, r3, #1
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <rfm95_init+0x244>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e00d      	b.n	8001b7c <rfm95_init+0x260>

	// Let module sleep after initialisation.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8001b60:	2280      	movs	r2, #128	; 0x80
 8001b62:	2101      	movs	r1, #1
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff fe17 	bl	8001798 <write_register>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f083 0301 	eor.w	r3, r3, #1
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <rfm95_init+0x25e>
 8001b76:	2300      	movs	r3, #0
 8001b78:	e000      	b.n	8001b7c <rfm95_init+0x260>

	return true;
 8001b7a:	2301      	movs	r3, #1
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	0800d8a4 	.word	0x0800d8a4
 8001b88:	0800dbf0 	.word	0x0800dbf0
 8001b8c:	0800d830 	.word	0x0800d830
 8001b90:	0800d8d8 	.word	0x0800d8d8
 8001b94:	0800d914 	.word	0x0800d914
 8001b98:	0800d94c 	.word	0x0800d94c
 8001b9c:	0800d988 	.word	0x0800d988
 8001ba0:	0800d9c0 	.word	0x0800d9c0
 8001ba4:	0800d9e4 	.word	0x0800d9e4
 8001ba8:	0800da00 	.word	0x0800da00
 8001bac:	0800da28 	.word	0x0800da28
 8001bb0:	0800da54 	.word	0x0800da54

08001bb4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <MX_RNG_Init+0x20>)
 8001bba:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <MX_RNG_Init+0x24>)
 8001bbc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <MX_RNG_Init+0x20>)
 8001bc0:	f002 ffac 	bl	8004b1c <HAL_RNG_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001bca:	f7ff fd63 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000408 	.word	0x20000408
 8001bd8:	50060800 	.word	0x50060800

08001bdc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b098      	sub	sp, #96	; 0x60
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001be4:	f107 030c 	add.w	r3, r7, #12
 8001be8:	2254      	movs	r2, #84	; 0x54
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f009 fe13 	bl	800b818 <memset>
  if(rngHandle->Instance==RNG)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_RNG_MspInit+0x80>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d12a      	bne.n	8001c52 <HAL_RNG_MspInit+0x76>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001bfc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c00:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001c02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c06:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001c10:	2308      	movs	r3, #8
 8001c12:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001c14:	2307      	movs	r3, #7
 8001c16:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001c20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c26:	f107 030c 	add.w	r3, r7, #12
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 fc8e 	bl	800454c <HAL_RCCEx_PeriphCLKConfig>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_RNG_MspInit+0x5e>
    {
      Error_Handler();
 8001c36:	f7ff fd2d 	bl	8001694 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_RNG_MspInit+0x84>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3e:	4a08      	ldr	r2, [pc, #32]	; (8001c60 <HAL_RNG_MspInit+0x84>)
 8001c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_RNG_MspInit+0x84>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001c52:	bf00      	nop
 8001c54:	3760      	adds	r7, #96	; 0x60
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	50060800 	.word	0x50060800
 8001c60:	40021000 	.word	0x40021000

08001c64 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c68:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <MX_SPI1_Init+0x74>)
 8001c6a:	4a1c      	ldr	r2, [pc, #112]	; (8001cdc <MX_SPI1_Init+0x78>)
 8001c6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <MX_SPI1_Init+0x74>)
 8001c70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c76:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <MX_SPI1_Init+0x74>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c7c:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <MX_SPI1_Init+0x74>)
 8001c7e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <MX_SPI1_Init+0x74>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <MX_SPI1_Init+0x74>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_SPI1_Init+0x74>)
 8001c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c96:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <MX_SPI1_Init+0x74>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_SPI1_Init+0x74>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <MX_SPI1_Init+0x74>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <MX_SPI1_Init+0x74>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <MX_SPI1_Init+0x74>)
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <MX_SPI1_Init+0x74>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <MX_SPI1_Init+0x74>)
 8001cbe:	2208      	movs	r2, #8
 8001cc0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cc2:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_SPI1_Init+0x74>)
 8001cc4:	f002 ff81 	bl	8004bca <HAL_SPI_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001cce:	f7ff fce1 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000418 	.word	0x20000418
 8001cdc:	40013000 	.word	0x40013000

08001ce0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a17      	ldr	r2, [pc, #92]	; (8001d5c <HAL_SPI_MspInit+0x7c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d128      	bne.n	8001d54 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d02:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <HAL_SPI_MspInit+0x80>)
 8001d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d06:	4a16      	ldr	r2, [pc, #88]	; (8001d60 <HAL_SPI_MspInit+0x80>)
 8001d08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d0e:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <HAL_SPI_MspInit+0x80>)
 8001d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_SPI_MspInit+0x80>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	4a10      	ldr	r2, [pc, #64]	; (8001d60 <HAL_SPI_MspInit+0x80>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_SPI_MspInit+0x80>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d32:	23e0      	movs	r3, #224	; 0xe0
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d42:	2305      	movs	r3, #5
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d50:	f001 fb4c 	bl	80033ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d54:	bf00      	nop
 8001d56:	3728      	adds	r7, #40	; 0x28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40013000 	.word	0x40013000
 8001d60:	40021000 	.word	0x40021000

08001d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <HAL_MspInit+0x4c>)
 8001d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6e:	4a10      	ldr	r2, [pc, #64]	; (8001db0 <HAL_MspInit+0x4c>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6613      	str	r3, [r2, #96]	; 0x60
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <HAL_MspInit+0x4c>)
 8001d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_MspInit+0x4c>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <HAL_MspInit+0x4c>)
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <HAL_MspInit+0x4c>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	210f      	movs	r1, #15
 8001d9e:	f06f 0001 	mvn.w	r0, #1
 8001da2:	f001 faf9 	bl	8003398 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000

08001db4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08e      	sub	sp, #56	; 0x38
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001dc2:	4b34      	ldr	r3, [pc, #208]	; (8001e94 <HAL_InitTick+0xe0>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	4a33      	ldr	r2, [pc, #204]	; (8001e94 <HAL_InitTick+0xe0>)
 8001dc8:	f043 0310 	orr.w	r3, r3, #16
 8001dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dce:	4b31      	ldr	r3, [pc, #196]	; (8001e94 <HAL_InitTick+0xe0>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dda:	f107 0210 	add.w	r2, r7, #16
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f002 faf3 	bl	80043d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d103      	bne.n	8001dfc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001df4:	f002 fac0 	bl	8004378 <HAL_RCC_GetPCLK1Freq>
 8001df8:	6378      	str	r0, [r7, #52]	; 0x34
 8001dfa:	e004      	b.n	8001e06 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001dfc:	f002 fabc 	bl	8004378 <HAL_RCC_GetPCLK1Freq>
 8001e00:	4603      	mov	r3, r0
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e08:	4a23      	ldr	r2, [pc, #140]	; (8001e98 <HAL_InitTick+0xe4>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	0c9b      	lsrs	r3, r3, #18
 8001e10:	3b01      	subs	r3, #1
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e14:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <HAL_InitTick+0xe8>)
 8001e16:	4a22      	ldr	r2, [pc, #136]	; (8001ea0 <HAL_InitTick+0xec>)
 8001e18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <HAL_InitTick+0xe8>)
 8001e1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e20:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e22:	4a1e      	ldr	r2, [pc, #120]	; (8001e9c <HAL_InitTick+0xe8>)
 8001e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e26:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e28:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <HAL_InitTick+0xe8>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2e:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <HAL_InitTick+0xe8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_InitTick+0xe8>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001e3a:	4818      	ldr	r0, [pc, #96]	; (8001e9c <HAL_InitTick+0xe8>)
 8001e3c:	f003 fdd6 	bl	80059ec <HAL_TIM_Base_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001e46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d11b      	bne.n	8001e86 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001e4e:	4813      	ldr	r0, [pc, #76]	; (8001e9c <HAL_InitTick+0xe8>)
 8001e50:	f003 fe24 	bl	8005a9c <HAL_TIM_Base_Start_IT>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001e5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d111      	bne.n	8001e86 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e62:	2036      	movs	r0, #54	; 0x36
 8001e64:	f001 fab4 	bl	80033d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b0f      	cmp	r3, #15
 8001e6c:	d808      	bhi.n	8001e80 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	2036      	movs	r0, #54	; 0x36
 8001e74:	f001 fa90 	bl	8003398 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e78:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <HAL_InitTick+0xf0>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e002      	b.n	8001e86 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3738      	adds	r7, #56	; 0x38
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000
 8001e98:	431bde83 	.word	0x431bde83
 8001e9c:	2000047c 	.word	0x2000047c
 8001ea0:	40001000 	.word	0x40001000
 8001ea4:	200000bc 	.word	0x200000bc

08001ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001eac:	f002 fad2 	bl	8004454 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001eb0:	e7fe      	b.n	8001eb0 <NMI_Handler+0x8>
	...

08001eb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08c      	sub	sp, #48	; 0x30
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pins : PBPin PBPin PBPin PBPin */
	GPIO_InitStruct.Pin = LED_D1_PWM_Pin;
 8001ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ecc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D1_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ede:	f001 fa85 	bl	80033ec <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D2_PWM_Pin;
 8001ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D2_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef8:	f001 fa78 	bl	80033ec <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D3_PWM_Pin;
 8001efc:	2302      	movs	r3, #2
 8001efe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f00:	2301      	movs	r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f10:	f001 fa6c 	bl	80033ec <HAL_GPIO_Init>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001f14:	2300      	movs	r3, #0
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f18:	e002      	b.n	8001f20 <HardFault_Handler+0x6c>
 8001f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f22:	4a2f      	ldr	r2, [pc, #188]	; (8001fe0 <HardFault_Handler+0x12c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	ddf8      	ble.n	8001f1a <HardFault_Handler+0x66>
			;
		HAL_GPIO_WritePin(LED_D1_PWM_GPIO_Port, LED_D1_PWM_Pin, GPIO_PIN_SET);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f32:	f001 fbc5 	bl	80036c0 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f3a:	e002      	b.n	8001f42 <HardFault_Handler+0x8e>
 8001f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3e:	3301      	adds	r3, #1
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f44:	4a26      	ldr	r2, [pc, #152]	; (8001fe0 <HardFault_Handler+0x12c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	ddf8      	ble.n	8001f3c <HardFault_Handler+0x88>
					;
		HAL_GPIO_WritePin(LED_D2_PWM_GPIO_Port, LED_D2_PWM_Pin, GPIO_PIN_SET);
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f54:	f001 fbb4 	bl	80036c0 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001f58:	2300      	movs	r3, #0
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5c:	e002      	b.n	8001f64 <HardFault_Handler+0xb0>
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	3301      	adds	r3, #1
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	4a1e      	ldr	r2, [pc, #120]	; (8001fe0 <HardFault_Handler+0x12c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	ddf8      	ble.n	8001f5e <HardFault_Handler+0xaa>
					;
		HAL_GPIO_WritePin(LED_D3_PWM_GPIO_Port, LED_D3_PWM_Pin, GPIO_PIN_SET);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	2102      	movs	r1, #2
 8001f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f74:	f001 fba4 	bl	80036c0 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	623b      	str	r3, [r7, #32]
 8001f7c:	e002      	b.n	8001f84 <HardFault_Handler+0xd0>
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	3301      	adds	r3, #1
 8001f82:	623b      	str	r3, [r7, #32]
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	4a16      	ldr	r2, [pc, #88]	; (8001fe0 <HardFault_Handler+0x12c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	ddf8      	ble.n	8001f7e <HardFault_Handler+0xca>
			;
		HAL_GPIO_WritePin(LED_D1_PWM_GPIO_Port, LED_D1_PWM_Pin, GPIO_PIN_RESET);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f96:	f001 fb93 	bl	80036c0 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	e002      	b.n	8001fa6 <HardFault_Handler+0xf2>
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	; (8001fe0 <HardFault_Handler+0x12c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	ddf8      	ble.n	8001fa0 <HardFault_Handler+0xec>
					;
		HAL_GPIO_WritePin(LED_D2_PWM_GPIO_Port, LED_D2_PWM_Pin, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb8:	f001 fb82 	bl	80036c0 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	e002      	b.n	8001fc8 <HardFault_Handler+0x114>
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <HardFault_Handler+0x12c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	ddf8      	ble.n	8001fc2 <HardFault_Handler+0x10e>
					;
		HAL_GPIO_WritePin(LED_D3_PWM_GPIO_Port, LED_D3_PWM_Pin, GPIO_PIN_RESET);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2102      	movs	r1, #2
 8001fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd8:	f001 fb72 	bl	80036c0 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001fdc:	e79a      	b.n	8001f14 <HardFault_Handler+0x60>
 8001fde:	bf00      	nop
 8001fe0:	000c34ff 	.word	0x000c34ff

08001fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe8:	e7fe      	b.n	8001fe8 <MemManage_Handler+0x4>

08001fea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fee:	e7fe      	b.n	8001fee <BusFault_Handler+0x4>

08001ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <UsageFault_Handler+0x4>

08001ff6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <CAN1_TX_IRQHandler+0x10>)
 800200a:	f000 fee8 	bl	8002dde <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200002c4 	.word	0x200002c4

08002018 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <CAN1_RX0_IRQHandler+0x10>)
 800201e:	f000 fede 	bl	8002dde <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200002c4 	.word	0x200002c4

0800202c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002030:	4802      	ldr	r0, [pc, #8]	; (800203c <CAN1_RX1_IRQHandler+0x10>)
 8002032:	f000 fed4 	bl	8002dde <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200002c4 	.word	0x200002c4

08002040 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <TIM6_DAC_IRQHandler+0x10>)
 8002046:	f003 febd 	bl	8005dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2000047c 	.word	0x2000047c

08002054 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return 1;
 8002058:	2301      	movs	r3, #1
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <_kill>:

int _kill(int pid, int sig)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800206e:	f009 fc25 	bl	800b8bc <__errno>
 8002072:	4603      	mov	r3, r0
 8002074:	2216      	movs	r2, #22
 8002076:	601a      	str	r2, [r3, #0]
  return -1;
 8002078:	f04f 33ff 	mov.w	r3, #4294967295
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <_exit>:

void _exit (int status)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800208c:	f04f 31ff 	mov.w	r1, #4294967295
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ffe7 	bl	8002064 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002096:	e7fe      	b.n	8002096 <_exit+0x12>

08002098 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	e00a      	b.n	80020c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020aa:	f3af 8000 	nop.w
 80020ae:	4601      	mov	r1, r0
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	60ba      	str	r2, [r7, #8]
 80020b6:	b2ca      	uxtb	r2, r1
 80020b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	3301      	adds	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	dbf0      	blt.n	80020aa <_read+0x12>
  }

  return len;
 80020c8:	687b      	ldr	r3, [r7, #4]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020fa:	605a      	str	r2, [r3, #4]
  return 0;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <_isatty>:

int _isatty(int file)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002112:	2301      	movs	r3, #1
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002144:	4a14      	ldr	r2, [pc, #80]	; (8002198 <_sbrk+0x5c>)
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <_sbrk+0x60>)
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <_sbrk+0x64>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d102      	bne.n	800215e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <_sbrk+0x64>)
 800215a:	4a12      	ldr	r2, [pc, #72]	; (80021a4 <_sbrk+0x68>)
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <_sbrk+0x64>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	429a      	cmp	r2, r3
 800216a:	d207      	bcs.n	800217c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800216c:	f009 fba6 	bl	800b8bc <__errno>
 8002170:	4603      	mov	r3, r0
 8002172:	220c      	movs	r2, #12
 8002174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
 800217a:	e009      	b.n	8002190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800217c:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <_sbrk+0x64>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <_sbrk+0x64>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <_sbrk+0x64>)
 800218c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800218e:	68fb      	ldr	r3, [r7, #12]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20010000 	.word	0x20010000
 800219c:	00000400 	.word	0x00000400
 80021a0:	200004c8 	.word	0x200004c8
 80021a4:	20002820 	.word	0x20002820

080021a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <SystemInit+0x20>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <SystemInit+0x20>)
 80021b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b09a      	sub	sp, #104	; 0x68
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
 80021fc:	615a      	str	r2, [r3, #20]
 80021fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	222c      	movs	r2, #44	; 0x2c
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f009 fb06 	bl	800b818 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800220c:	4b49      	ldr	r3, [pc, #292]	; (8002334 <MX_TIM1_Init+0x168>)
 800220e:	4a4a      	ldr	r2, [pc, #296]	; (8002338 <MX_TIM1_Init+0x16c>)
 8002210:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 8002212:	4b48      	ldr	r3, [pc, #288]	; (8002334 <MX_TIM1_Init+0x168>)
 8002214:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002218:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800221a:	4b46      	ldr	r3, [pc, #280]	; (8002334 <MX_TIM1_Init+0x168>)
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8002220:	4b44      	ldr	r3, [pc, #272]	; (8002334 <MX_TIM1_Init+0x168>)
 8002222:	2263      	movs	r2, #99	; 0x63
 8002224:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002226:	4b43      	ldr	r3, [pc, #268]	; (8002334 <MX_TIM1_Init+0x168>)
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800222c:	4b41      	ldr	r3, [pc, #260]	; (8002334 <MX_TIM1_Init+0x168>)
 800222e:	2200      	movs	r2, #0
 8002230:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002232:	4b40      	ldr	r3, [pc, #256]	; (8002334 <MX_TIM1_Init+0x168>)
 8002234:	2280      	movs	r2, #128	; 0x80
 8002236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002238:	483e      	ldr	r0, [pc, #248]	; (8002334 <MX_TIM1_Init+0x168>)
 800223a:	f003 fbd7 	bl	80059ec <HAL_TIM_Base_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002244:	f7ff fa26 	bl	8001694 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800224c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800224e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002252:	4619      	mov	r1, r3
 8002254:	4837      	ldr	r0, [pc, #220]	; (8002334 <MX_TIM1_Init+0x168>)
 8002256:	f003 ffe9 	bl	800622c <HAL_TIM_ConfigClockSource>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002260:	f7ff fa18 	bl	8001694 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002264:	4833      	ldr	r0, [pc, #204]	; (8002334 <MX_TIM1_Init+0x168>)
 8002266:	f003 fc6d 	bl	8005b44 <HAL_TIM_PWM_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002270:	f7ff fa10 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002274:	2300      	movs	r3, #0
 8002276:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002278:	2300      	movs	r3, #0
 800227a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800227c:	2300      	movs	r3, #0
 800227e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002280:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002284:	4619      	mov	r1, r3
 8002286:	482b      	ldr	r0, [pc, #172]	; (8002334 <MX_TIM1_Init+0x168>)
 8002288:	f004 fc64 	bl	8006b54 <HAL_TIMEx_MasterConfigSynchronization>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002292:	f7ff f9ff 	bl	8001694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002296:	2360      	movs	r3, #96	; 0x60
 8002298:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800229e:	2300      	movs	r3, #0
 80022a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022a2:	2300      	movs	r3, #0
 80022a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022aa:	2300      	movs	r3, #0
 80022ac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022ae:	2300      	movs	r3, #0
 80022b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022b6:	2204      	movs	r2, #4
 80022b8:	4619      	mov	r1, r3
 80022ba:	481e      	ldr	r0, [pc, #120]	; (8002334 <MX_TIM1_Init+0x168>)
 80022bc:	f003 fea2 	bl	8006004 <HAL_TIM_PWM_ConfigChannel>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80022c6:	f7ff f9e5 	bl	8001694 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022ce:	2208      	movs	r2, #8
 80022d0:	4619      	mov	r1, r3
 80022d2:	4818      	ldr	r0, [pc, #96]	; (8002334 <MX_TIM1_Init+0x168>)
 80022d4:	f003 fe96 	bl	8006004 <HAL_TIM_PWM_ConfigChannel>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80022de:	f7ff f9d9 	bl	8001694 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002300:	2300      	movs	r3, #0
 8002302:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002304:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	4619      	mov	r1, r3
 8002316:	4807      	ldr	r0, [pc, #28]	; (8002334 <MX_TIM1_Init+0x168>)
 8002318:	f004 fc82 	bl	8006c20 <HAL_TIMEx_ConfigBreakDeadTime>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8002322:	f7ff f9b7 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002326:	4803      	ldr	r0, [pc, #12]	; (8002334 <MX_TIM1_Init+0x168>)
 8002328:	f000 f8b0 	bl	800248c <HAL_TIM_MspPostInit>

}
 800232c:	bf00      	nop
 800232e:	3768      	adds	r7, #104	; 0x68
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	200004cc 	.word	0x200004cc
 8002338:	40012c00 	.word	0x40012c00

0800233c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08e      	sub	sp, #56	; 0x38
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	609a      	str	r2, [r3, #8]
 800234e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002350:	f107 031c 	add.w	r3, r7, #28
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800235c:	463b      	mov	r3, r7
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
 8002368:	611a      	str	r2, [r3, #16]
 800236a:	615a      	str	r2, [r3, #20]
 800236c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800236e:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <MX_TIM2_Init+0xe8>)
 8002370:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002374:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8002376:	4b2b      	ldr	r3, [pc, #172]	; (8002424 <MX_TIM2_Init+0xe8>)
 8002378:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800237c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237e:	4b29      	ldr	r3, [pc, #164]	; (8002424 <MX_TIM2_Init+0xe8>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002384:	4b27      	ldr	r3, [pc, #156]	; (8002424 <MX_TIM2_Init+0xe8>)
 8002386:	2263      	movs	r2, #99	; 0x63
 8002388:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238a:	4b26      	ldr	r3, [pc, #152]	; (8002424 <MX_TIM2_Init+0xe8>)
 800238c:	2200      	movs	r2, #0
 800238e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002390:	4b24      	ldr	r3, [pc, #144]	; (8002424 <MX_TIM2_Init+0xe8>)
 8002392:	2280      	movs	r2, #128	; 0x80
 8002394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002396:	4823      	ldr	r0, [pc, #140]	; (8002424 <MX_TIM2_Init+0xe8>)
 8002398:	f003 fb28 	bl	80059ec <HAL_TIM_Base_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80023a2:	f7ff f977 	bl	8001694 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023b0:	4619      	mov	r1, r3
 80023b2:	481c      	ldr	r0, [pc, #112]	; (8002424 <MX_TIM2_Init+0xe8>)
 80023b4:	f003 ff3a 	bl	800622c <HAL_TIM_ConfigClockSource>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80023be:	f7ff f969 	bl	8001694 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80023c2:	4818      	ldr	r0, [pc, #96]	; (8002424 <MX_TIM2_Init+0xe8>)
 80023c4:	f003 fbbe 	bl	8005b44 <HAL_TIM_PWM_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80023ce:	f7ff f961 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023da:	f107 031c 	add.w	r3, r7, #28
 80023de:	4619      	mov	r1, r3
 80023e0:	4810      	ldr	r0, [pc, #64]	; (8002424 <MX_TIM2_Init+0xe8>)
 80023e2:	f004 fbb7 	bl	8006b54 <HAL_TIMEx_MasterConfigSynchronization>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80023ec:	f7ff f952 	bl	8001694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023f0:	2360      	movs	r3, #96	; 0x60
 80023f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002400:	463b      	mov	r3, r7
 8002402:	2204      	movs	r2, #4
 8002404:	4619      	mov	r1, r3
 8002406:	4807      	ldr	r0, [pc, #28]	; (8002424 <MX_TIM2_Init+0xe8>)
 8002408:	f003 fdfc 	bl	8006004 <HAL_TIM_PWM_ConfigChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002412:	f7ff f93f 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002416:	4803      	ldr	r0, [pc, #12]	; (8002424 <MX_TIM2_Init+0xe8>)
 8002418:	f000 f838 	bl	800248c <HAL_TIM_MspPostInit>

}
 800241c:	bf00      	nop
 800241e:	3738      	adds	r7, #56	; 0x38
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000518 	.word	0x20000518

08002428 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a13      	ldr	r2, [pc, #76]	; (8002484 <HAL_TIM_Base_MspInit+0x5c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d10c      	bne.n	8002454 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800243a:	4b13      	ldr	r3, [pc, #76]	; (8002488 <HAL_TIM_Base_MspInit+0x60>)
 800243c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243e:	4a12      	ldr	r2, [pc, #72]	; (8002488 <HAL_TIM_Base_MspInit+0x60>)
 8002440:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002444:	6613      	str	r3, [r2, #96]	; 0x60
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <HAL_TIM_Base_MspInit+0x60>)
 8002448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002452:	e010      	b.n	8002476 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245c:	d10b      	bne.n	8002476 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_TIM_Base_MspInit+0x60>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002462:	4a09      	ldr	r2, [pc, #36]	; (8002488 <HAL_TIM_Base_MspInit+0x60>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6593      	str	r3, [r2, #88]	; 0x58
 800246a:	4b07      	ldr	r3, [pc, #28]	; (8002488 <HAL_TIM_Base_MspInit+0x60>)
 800246c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
}
 8002476:	bf00      	nop
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40012c00 	.word	0x40012c00
 8002488:	40021000 	.word	0x40021000

0800248c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	; 0x28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a23      	ldr	r2, [pc, #140]	; (8002538 <HAL_TIM_MspPostInit+0xac>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d11e      	bne.n	80024ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ae:	4b23      	ldr	r3, [pc, #140]	; (800253c <HAL_TIM_MspPostInit+0xb0>)
 80024b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b2:	4a22      	ldr	r2, [pc, #136]	; (800253c <HAL_TIM_MspPostInit+0xb0>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ba:	4b20      	ldr	r3, [pc, #128]	; (800253c <HAL_TIM_MspPostInit+0xb0>)
 80024bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LED_D2_PWM_Pin|LED_D1_PWM_Pin;
 80024c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024cc:	2302      	movs	r3, #2
 80024ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d4:	2300      	movs	r3, #0
 80024d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024d8:	2301      	movs	r3, #1
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	4619      	mov	r1, r3
 80024e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e6:	f000 ff81 	bl	80033ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80024ea:	e021      	b.n	8002530 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f4:	d11c      	bne.n	8002530 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <HAL_TIM_MspPostInit+0xb0>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	4a10      	ldr	r2, [pc, #64]	; (800253c <HAL_TIM_MspPostInit+0xb0>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <HAL_TIM_MspPostInit+0xb0>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_D3_PWM_Pin;
 800250e:	2302      	movs	r3, #2
 8002510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	2300      	movs	r3, #0
 800251c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800251e:	2301      	movs	r3, #1
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	4619      	mov	r1, r3
 8002528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800252c:	f000 ff5e 	bl	80033ec <HAL_GPIO_Init>
}
 8002530:	bf00      	nop
 8002532:	3728      	adds	r7, #40	; 0x28
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40012c00 	.word	0x40012c00
 800253c:	40021000 	.word	0x40021000

08002540 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002544:	4b14      	ldr	r3, [pc, #80]	; (8002598 <MX_USART2_UART_Init+0x58>)
 8002546:	4a15      	ldr	r2, [pc, #84]	; (800259c <MX_USART2_UART_Init+0x5c>)
 8002548:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <MX_USART2_UART_Init+0x58>)
 800254c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002550:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <MX_USART2_UART_Init+0x58>)
 8002554:	2200      	movs	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <MX_USART2_UART_Init+0x58>)
 800255a:	2200      	movs	r2, #0
 800255c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <MX_USART2_UART_Init+0x58>)
 8002560:	2200      	movs	r2, #0
 8002562:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <MX_USART2_UART_Init+0x58>)
 8002566:	220c      	movs	r2, #12
 8002568:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <MX_USART2_UART_Init+0x58>)
 800256c:	2200      	movs	r2, #0
 800256e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002570:	4b09      	ldr	r3, [pc, #36]	; (8002598 <MX_USART2_UART_Init+0x58>)
 8002572:	2200      	movs	r2, #0
 8002574:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002576:	4b08      	ldr	r3, [pc, #32]	; (8002598 <MX_USART2_UART_Init+0x58>)
 8002578:	2200      	movs	r2, #0
 800257a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <MX_USART2_UART_Init+0x58>)
 800257e:	2200      	movs	r2, #0
 8002580:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002582:	4805      	ldr	r0, [pc, #20]	; (8002598 <MX_USART2_UART_Init+0x58>)
 8002584:	f004 fbe2 	bl	8006d4c <HAL_UART_Init>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800258e:	f7ff f881 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000564 	.word	0x20000564
 800259c:	40004400 	.word	0x40004400

080025a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b09e      	sub	sp, #120	; 0x78
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025b8:	f107 0310 	add.w	r3, r7, #16
 80025bc:	2254      	movs	r2, #84	; 0x54
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f009 f929 	bl	800b818 <memset>
  if(uartHandle->Instance==USART2)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a1f      	ldr	r2, [pc, #124]	; (8002648 <HAL_UART_MspInit+0xa8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d136      	bne.n	800263e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025d0:	2302      	movs	r3, #2
 80025d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025d4:	2300      	movs	r3, #0
 80025d6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025d8:	f107 0310 	add.w	r3, r7, #16
 80025dc:	4618      	mov	r0, r3
 80025de:	f001 ffb5 	bl	800454c <HAL_RCCEx_PeriphCLKConfig>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025e8:	f7ff f854 	bl	8001694 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025ec:	4b17      	ldr	r3, [pc, #92]	; (800264c <HAL_UART_MspInit+0xac>)
 80025ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f0:	4a16      	ldr	r2, [pc, #88]	; (800264c <HAL_UART_MspInit+0xac>)
 80025f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f6:	6593      	str	r3, [r2, #88]	; 0x58
 80025f8:	4b14      	ldr	r3, [pc, #80]	; (800264c <HAL_UART_MspInit+0xac>)
 80025fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <HAL_UART_MspInit+0xac>)
 8002606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002608:	4a10      	ldr	r2, [pc, #64]	; (800264c <HAL_UART_MspInit+0xac>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002610:	4b0e      	ldr	r3, [pc, #56]	; (800264c <HAL_UART_MspInit+0xac>)
 8002612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800261c:	230c      	movs	r3, #12
 800261e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2302      	movs	r3, #2
 8002622:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002628:	2303      	movs	r3, #3
 800262a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800262c:	2307      	movs	r3, #7
 800262e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002630:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002634:	4619      	mov	r1, r3
 8002636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800263a:	f000 fed7 	bl	80033ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800263e:	bf00      	nop
 8002640:	3778      	adds	r7, #120	; 0x78
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40004400 	.word	0x40004400
 800264c:	40021000 	.word	0x40021000

08002650 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002688 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002654:	f7ff fda8 	bl	80021a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002658:	480c      	ldr	r0, [pc, #48]	; (800268c <LoopForever+0x6>)
  ldr r1, =_edata
 800265a:	490d      	ldr	r1, [pc, #52]	; (8002690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800265c:	4a0d      	ldr	r2, [pc, #52]	; (8002694 <LoopForever+0xe>)
  movs r3, #0
 800265e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002660:	e002      	b.n	8002668 <LoopCopyDataInit>

08002662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002666:	3304      	adds	r3, #4

08002668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800266a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800266c:	d3f9      	bcc.n	8002662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800266e:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002670:	4c0a      	ldr	r4, [pc, #40]	; (800269c <LoopForever+0x16>)
  movs r3, #0
 8002672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002674:	e001      	b.n	800267a <LoopFillZerobss>

08002676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002678:	3204      	adds	r2, #4

0800267a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800267a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800267c:	d3fb      	bcc.n	8002676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800267e:	f009 f923 	bl	800b8c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002682:	f7fe ff79 	bl	8001578 <main>

08002686 <LoopForever>:

LoopForever:
    b LoopForever
 8002686:	e7fe      	b.n	8002686 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002688:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800268c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002690:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8002694:	0800dfc8 	.word	0x0800dfc8
  ldr r2, =_sbss
 8002698:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 800269c:	20002820 	.word	0x20002820

080026a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026a0:	e7fe      	b.n	80026a0 <ADC1_IRQHandler>

080026a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ac:	2003      	movs	r0, #3
 80026ae:	f000 fe68 	bl	8003382 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026b2:	200f      	movs	r0, #15
 80026b4:	f7ff fb7e 	bl	8001db4 <HAL_InitTick>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	71fb      	strb	r3, [r7, #7]
 80026c2:	e001      	b.n	80026c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026c4:	f7ff fb4e 	bl	8001d64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026c8:	79fb      	ldrb	r3, [r7, #7]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_IncTick+0x20>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_IncTick+0x24>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <HAL_IncTick+0x24>)
 80026e6:	6013      	str	r3, [r2, #0]
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	200000c0 	.word	0x200000c0
 80026f8:	200005e8 	.word	0x200005e8

080026fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <HAL_GetTick+0x14>)
 8002702:	681b      	ldr	r3, [r3, #0]
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	200005e8 	.word	0x200005e8

08002714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800271c:	f7ff ffee 	bl	80026fc <HAL_GetTick>
 8002720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d005      	beq.n	800273a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_Delay+0x44>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800273a:	bf00      	nop
 800273c:	f7ff ffde 	bl	80026fc <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	429a      	cmp	r2, r3
 800274a:	d8f7      	bhi.n	800273c <HAL_Delay+0x28>
  {
  }
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200000c0 	.word	0x200000c0

0800275c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e0ed      	b.n	800294a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d102      	bne.n	8002780 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fe fbca 	bl	8000f14 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002790:	f7ff ffb4 	bl	80026fc <HAL_GetTick>
 8002794:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002796:	e012      	b.n	80027be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002798:	f7ff ffb0 	bl	80026fc <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b0a      	cmp	r3, #10
 80027a4:	d90b      	bls.n	80027be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2205      	movs	r2, #5
 80027b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0c5      	b.n	800294a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0e5      	beq.n	8002798 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0202 	bic.w	r2, r2, #2
 80027da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027dc:	f7ff ff8e 	bl	80026fc <HAL_GetTick>
 80027e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027e2:	e012      	b.n	800280a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027e4:	f7ff ff8a 	bl	80026fc <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b0a      	cmp	r3, #10
 80027f0:	d90b      	bls.n	800280a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2205      	movs	r2, #5
 8002802:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e09f      	b.n	800294a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1e5      	bne.n	80027e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	7e1b      	ldrb	r3, [r3, #24]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d108      	bne.n	8002832 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	e007      	b.n	8002842 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002840:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	7e5b      	ldrb	r3, [r3, #25]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d108      	bne.n	800285c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	e007      	b.n	800286c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800286a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	7e9b      	ldrb	r3, [r3, #26]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d108      	bne.n	8002886 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0220 	orr.w	r2, r2, #32
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	e007      	b.n	8002896 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0220 	bic.w	r2, r2, #32
 8002894:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	7edb      	ldrb	r3, [r3, #27]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d108      	bne.n	80028b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0210 	bic.w	r2, r2, #16
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e007      	b.n	80028c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0210 	orr.w	r2, r2, #16
 80028be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	7f1b      	ldrb	r3, [r3, #28]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d108      	bne.n	80028da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0208 	orr.w	r2, r2, #8
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	e007      	b.n	80028ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0208 	bic.w	r2, r2, #8
 80028e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	7f5b      	ldrb	r3, [r3, #29]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d108      	bne.n	8002904 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0204 	orr.w	r2, r2, #4
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e007      	b.n	8002914 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0204 	bic.w	r2, r2, #4
 8002912:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	ea42 0103 	orr.w	r1, r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	1e5a      	subs	r2, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002952:	b480      	push	{r7}
 8002954:	b087      	sub	sp, #28
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002968:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800296a:	7cfb      	ldrb	r3, [r7, #19]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d003      	beq.n	8002978 <HAL_CAN_ConfigFilter+0x26>
 8002970:	7cfb      	ldrb	r3, [r7, #19]
 8002972:	2b02      	cmp	r3, #2
 8002974:	f040 80aa 	bne.w	8002acc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800297e:	f043 0201 	orr.w	r2, r3, #1
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	2201      	movs	r2, #1
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	401a      	ands	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d123      	bne.n	80029fa <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	43db      	mvns	r3, r3
 80029bc:	401a      	ands	r2, r3
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80029d4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	3248      	adds	r2, #72	; 0x48
 80029da:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029ee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029f0:	6979      	ldr	r1, [r7, #20]
 80029f2:	3348      	adds	r3, #72	; 0x48
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	440b      	add	r3, r1
 80029f8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d122      	bne.n	8002a48 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a22:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	3248      	adds	r2, #72	; 0x48
 8002a28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a3e:	6979      	ldr	r1, [r7, #20]
 8002a40:	3348      	adds	r3, #72	; 0x48
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	440b      	add	r3, r1
 8002a46:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d109      	bne.n	8002a64 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002a62:	e007      	b.n	8002a74 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d109      	bne.n	8002a90 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	401a      	ands	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002a8e:	e007      	b.n	8002aa0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d107      	bne.n	8002ab8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002abe:	f023 0201 	bic.w	r2, r3, #1
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e006      	b.n	8002ada <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
  }
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d12e      	bne.n	8002b58 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2202      	movs	r2, #2
 8002afe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b12:	f7ff fdf3 	bl	80026fc <HAL_GetTick>
 8002b16:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b18:	e012      	b.n	8002b40 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b1a:	f7ff fdef 	bl	80026fc <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b0a      	cmp	r3, #10
 8002b26:	d90b      	bls.n	8002b40 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2205      	movs	r2, #5
 8002b38:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e012      	b.n	8002b66 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1e5      	bne.n	8002b1a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	e006      	b.n	8002b66 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
  }
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b087      	sub	sp, #28
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b82:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b84:	7dfb      	ldrb	r3, [r7, #23]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d003      	beq.n	8002b92 <HAL_CAN_GetRxMessage+0x24>
 8002b8a:	7dfb      	ldrb	r3, [r7, #23]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	f040 80f3 	bne.w	8002d78 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10e      	bne.n	8002bb6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d116      	bne.n	8002bd4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e0e7      	b.n	8002d86 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d107      	bne.n	8002bd4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0d8      	b.n	8002d86 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	331b      	adds	r3, #27
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	4413      	add	r3, r2
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0204 	and.w	r2, r3, #4
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10c      	bne.n	8002c0c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	331b      	adds	r3, #27
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	4413      	add	r3, r2
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0d5b      	lsrs	r3, r3, #21
 8002c02:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	e00b      	b.n	8002c24 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	331b      	adds	r3, #27
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	4413      	add	r3, r2
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	08db      	lsrs	r3, r3, #3
 8002c1c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	331b      	adds	r3, #27
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	4413      	add	r3, r2
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0202 	and.w	r2, r3, #2
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	331b      	adds	r3, #27
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	4413      	add	r3, r2
 8002c46:	3304      	adds	r3, #4
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 020f 	and.w	r2, r3, #15
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	331b      	adds	r3, #27
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3304      	adds	r3, #4
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	331b      	adds	r3, #27
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	4413      	add	r3, r2
 8002c76:	3304      	adds	r3, #4
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	0c1b      	lsrs	r3, r3, #16
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	0a1a      	lsrs	r2, r3, #8
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	0c1a      	lsrs	r2, r3, #16
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	3302      	adds	r3, #2
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	0e1a      	lsrs	r2, r3, #24
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	3303      	adds	r3, #3
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	0a1a      	lsrs	r2, r3, #8
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	3305      	adds	r3, #5
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	0c1a      	lsrs	r2, r3, #16
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	3306      	adds	r3, #6
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	0e1a      	lsrs	r2, r3, #24
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	3307      	adds	r3, #7
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d108      	bne.n	8002d64 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0220 	orr.w	r2, r2, #32
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	e007      	b.n	8002d74 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691a      	ldr	r2, [r3, #16]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0220 	orr.w	r2, r2, #32
 8002d72:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	e006      	b.n	8002d86 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
  }
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b085      	sub	sp, #20
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002da2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d002      	beq.n	8002db0 <HAL_CAN_ActivateNotification+0x1e>
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d109      	bne.n	8002dc4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6959      	ldr	r1, [r3, #20]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	e006      	b.n	8002dd2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
  }
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b08a      	sub	sp, #40	; 0x28
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d07c      	beq.n	8002f1e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d023      	beq.n	8002e76 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2201      	movs	r2, #1
 8002e34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f983 	bl	800314c <HAL_CAN_TxMailbox0CompleteCallback>
 8002e46:	e016      	b.n	8002e76 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d004      	beq.n	8002e5c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5a:	e00c      	b.n	8002e76 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d004      	beq.n	8002e70 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6e:	e002      	b.n	8002e76 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f989 	bl	8003188 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d024      	beq.n	8002eca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f963 	bl	8003160 <HAL_CAN_TxMailbox1CompleteCallback>
 8002e9a:	e016      	b.n	8002eca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d004      	beq.n	8002eb0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
 8002eae:	e00c      	b.n	8002eca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d004      	beq.n	8002ec4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec2:	e002      	b.n	8002eca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f969 	bl	800319c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d024      	beq.n	8002f1e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002edc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f943 	bl	8003174 <HAL_CAN_TxMailbox2CompleteCallback>
 8002eee:	e016      	b.n	8002f1e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d004      	beq.n	8002f04 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
 8002f02:	e00c      	b.n	8002f1e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d004      	beq.n	8002f18 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
 8002f16:	e002      	b.n	8002f1e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f949 	bl	80031b0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00c      	beq.n	8002f42 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2210      	movs	r2, #16
 8002f40:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00b      	beq.n	8002f64 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d006      	beq.n	8002f64 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2208      	movs	r2, #8
 8002f5c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f930 	bl	80031c4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d009      	beq.n	8002f82 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7fe f9cb 	bl	8001318 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00c      	beq.n	8002fa6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d007      	beq.n	8002fa6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2210      	movs	r2, #16
 8002fa4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00b      	beq.n	8002fc8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d006      	beq.n	8002fc8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2208      	movs	r2, #8
 8002fc0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f908 	bl	80031d8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d009      	beq.n	8002fe6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7fe f9cf 	bl	8001384 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00b      	beq.n	8003008 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d006      	beq.n	8003008 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2210      	movs	r2, #16
 8003000:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f8f2 	bl	80031ec <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d006      	beq.n	800302a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2208      	movs	r2, #8
 8003022:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f8eb 	bl	8003200 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d07b      	beq.n	800312c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	2b00      	cmp	r3, #0
 800303c:	d072      	beq.n	8003124 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	f043 0302 	orr.w	r3, r3, #2
 8003074:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	f043 0304 	orr.w	r3, r3, #4
 8003090:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003098:	2b00      	cmp	r3, #0
 800309a:	d043      	beq.n	8003124 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d03e      	beq.n	8003124 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030ac:	2b60      	cmp	r3, #96	; 0x60
 80030ae:	d02b      	beq.n	8003108 <HAL_CAN_IRQHandler+0x32a>
 80030b0:	2b60      	cmp	r3, #96	; 0x60
 80030b2:	d82e      	bhi.n	8003112 <HAL_CAN_IRQHandler+0x334>
 80030b4:	2b50      	cmp	r3, #80	; 0x50
 80030b6:	d022      	beq.n	80030fe <HAL_CAN_IRQHandler+0x320>
 80030b8:	2b50      	cmp	r3, #80	; 0x50
 80030ba:	d82a      	bhi.n	8003112 <HAL_CAN_IRQHandler+0x334>
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d019      	beq.n	80030f4 <HAL_CAN_IRQHandler+0x316>
 80030c0:	2b40      	cmp	r3, #64	; 0x40
 80030c2:	d826      	bhi.n	8003112 <HAL_CAN_IRQHandler+0x334>
 80030c4:	2b30      	cmp	r3, #48	; 0x30
 80030c6:	d010      	beq.n	80030ea <HAL_CAN_IRQHandler+0x30c>
 80030c8:	2b30      	cmp	r3, #48	; 0x30
 80030ca:	d822      	bhi.n	8003112 <HAL_CAN_IRQHandler+0x334>
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	d002      	beq.n	80030d6 <HAL_CAN_IRQHandler+0x2f8>
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d005      	beq.n	80030e0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80030d4:	e01d      	b.n	8003112 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	f043 0308 	orr.w	r3, r3, #8
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030de:	e019      	b.n	8003114 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	f043 0310 	orr.w	r3, r3, #16
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030e8:	e014      	b.n	8003114 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	f043 0320 	orr.w	r3, r3, #32
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030f2:	e00f      	b.n	8003114 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030fc:	e00a      	b.n	8003114 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003106:	e005      	b.n	8003114 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003110:	e000      	b.n	8003114 <HAL_CAN_IRQHandler+0x336>
            break;
 8003112:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003122:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2204      	movs	r2, #4
 800312a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	2b00      	cmp	r3, #0
 8003130:	d008      	beq.n	8003144 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f868 	bl	8003214 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003144:	bf00      	nop
 8003146:	3728      	adds	r7, #40	; 0x28
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003238:	4b0c      	ldr	r3, [pc, #48]	; (800326c <__NVIC_SetPriorityGrouping+0x44>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003244:	4013      	ands	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800325a:	4a04      	ldr	r2, [pc, #16]	; (800326c <__NVIC_SetPriorityGrouping+0x44>)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	60d3      	str	r3, [r2, #12]
}
 8003260:	bf00      	nop
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <__NVIC_GetPriorityGrouping+0x18>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	0a1b      	lsrs	r3, r3, #8
 800327a:	f003 0307 	and.w	r3, r3, #7
}
 800327e:	4618      	mov	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	2b00      	cmp	r3, #0
 800329c:	db0b      	blt.n	80032b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	f003 021f 	and.w	r2, r3, #31
 80032a4:	4907      	ldr	r1, [pc, #28]	; (80032c4 <__NVIC_EnableIRQ+0x38>)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	2001      	movs	r0, #1
 80032ae:	fa00 f202 	lsl.w	r2, r0, r2
 80032b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	e000e100 	.word	0xe000e100

080032c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	6039      	str	r1, [r7, #0]
 80032d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	db0a      	blt.n	80032f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	490c      	ldr	r1, [pc, #48]	; (8003314 <__NVIC_SetPriority+0x4c>)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	0112      	lsls	r2, r2, #4
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	440b      	add	r3, r1
 80032ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f0:	e00a      	b.n	8003308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	4908      	ldr	r1, [pc, #32]	; (8003318 <__NVIC_SetPriority+0x50>)
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	3b04      	subs	r3, #4
 8003300:	0112      	lsls	r2, r2, #4
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	440b      	add	r3, r1
 8003306:	761a      	strb	r2, [r3, #24]
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000e100 	.word	0xe000e100
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800331c:	b480      	push	{r7}
 800331e:	b089      	sub	sp, #36	; 0x24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f1c3 0307 	rsb	r3, r3, #7
 8003336:	2b04      	cmp	r3, #4
 8003338:	bf28      	it	cs
 800333a:	2304      	movcs	r3, #4
 800333c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	3304      	adds	r3, #4
 8003342:	2b06      	cmp	r3, #6
 8003344:	d902      	bls.n	800334c <NVIC_EncodePriority+0x30>
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3b03      	subs	r3, #3
 800334a:	e000      	b.n	800334e <NVIC_EncodePriority+0x32>
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	f04f 32ff 	mov.w	r2, #4294967295
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43da      	mvns	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	401a      	ands	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003364:	f04f 31ff 	mov.w	r1, #4294967295
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fa01 f303 	lsl.w	r3, r1, r3
 800336e:	43d9      	mvns	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003374:	4313      	orrs	r3, r2
         );
}
 8003376:	4618      	mov	r0, r3
 8003378:	3724      	adds	r7, #36	; 0x24
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff ff4c 	bl	8003228 <__NVIC_SetPriorityGrouping>
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033aa:	f7ff ff61 	bl	8003270 <__NVIC_GetPriorityGrouping>
 80033ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	6978      	ldr	r0, [r7, #20]
 80033b6:	f7ff ffb1 	bl	800331c <NVIC_EncodePriority>
 80033ba:	4602      	mov	r2, r0
 80033bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c0:	4611      	mov	r1, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff ff80 	bl	80032c8 <__NVIC_SetPriority>
}
 80033c8:	bf00      	nop
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff ff54 	bl	800328c <__NVIC_EnableIRQ>
}
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033fa:	e148      	b.n	800368e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	2101      	movs	r1, #1
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	fa01 f303 	lsl.w	r3, r1, r3
 8003408:	4013      	ands	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 813a 	beq.w	8003688 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	2b01      	cmp	r3, #1
 800341e:	d005      	beq.n	800342c <HAL_GPIO_Init+0x40>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d130      	bne.n	800348e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	2203      	movs	r2, #3
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003462:	2201      	movs	r2, #1
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4013      	ands	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	091b      	lsrs	r3, r3, #4
 8003478:	f003 0201 	and.w	r2, r3, #1
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	2b03      	cmp	r3, #3
 8003498:	d017      	beq.n	80034ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	2203      	movs	r2, #3
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43db      	mvns	r3, r3
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4013      	ands	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d123      	bne.n	800351e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	08da      	lsrs	r2, r3, #3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3208      	adds	r2, #8
 80034de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	220f      	movs	r2, #15
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4013      	ands	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	08da      	lsrs	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3208      	adds	r2, #8
 8003518:	6939      	ldr	r1, [r7, #16]
 800351a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	2203      	movs	r2, #3
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43db      	mvns	r3, r3
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4013      	ands	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f003 0203 	and.w	r2, r3, #3
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 8094 	beq.w	8003688 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003560:	4b52      	ldr	r3, [pc, #328]	; (80036ac <HAL_GPIO_Init+0x2c0>)
 8003562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003564:	4a51      	ldr	r2, [pc, #324]	; (80036ac <HAL_GPIO_Init+0x2c0>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	6613      	str	r3, [r2, #96]	; 0x60
 800356c:	4b4f      	ldr	r3, [pc, #316]	; (80036ac <HAL_GPIO_Init+0x2c0>)
 800356e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003578:	4a4d      	ldr	r2, [pc, #308]	; (80036b0 <HAL_GPIO_Init+0x2c4>)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	089b      	lsrs	r3, r3, #2
 800357e:	3302      	adds	r3, #2
 8003580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003584:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	220f      	movs	r2, #15
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4013      	ands	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035a2:	d00d      	beq.n	80035c0 <HAL_GPIO_Init+0x1d4>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a43      	ldr	r2, [pc, #268]	; (80036b4 <HAL_GPIO_Init+0x2c8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d007      	beq.n	80035bc <HAL_GPIO_Init+0x1d0>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a42      	ldr	r2, [pc, #264]	; (80036b8 <HAL_GPIO_Init+0x2cc>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d101      	bne.n	80035b8 <HAL_GPIO_Init+0x1cc>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e004      	b.n	80035c2 <HAL_GPIO_Init+0x1d6>
 80035b8:	2307      	movs	r3, #7
 80035ba:	e002      	b.n	80035c2 <HAL_GPIO_Init+0x1d6>
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <HAL_GPIO_Init+0x1d6>
 80035c0:	2300      	movs	r3, #0
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	f002 0203 	and.w	r2, r2, #3
 80035c8:	0092      	lsls	r2, r2, #2
 80035ca:	4093      	lsls	r3, r2
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035d2:	4937      	ldr	r1, [pc, #220]	; (80036b0 <HAL_GPIO_Init+0x2c4>)
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	089b      	lsrs	r3, r3, #2
 80035d8:	3302      	adds	r3, #2
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035e0:	4b36      	ldr	r3, [pc, #216]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	43db      	mvns	r3, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4013      	ands	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003604:	4a2d      	ldr	r2, [pc, #180]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800360a:	4b2c      	ldr	r3, [pc, #176]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	43db      	mvns	r3, r3
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800362e:	4a23      	ldr	r2, [pc, #140]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003634:	4b21      	ldr	r3, [pc, #132]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	43db      	mvns	r3, r3
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4013      	ands	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003658:	4a18      	ldr	r2, [pc, #96]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800365e:	4b17      	ldr	r3, [pc, #92]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	43db      	mvns	r3, r3
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4013      	ands	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003682:	4a0e      	ldr	r2, [pc, #56]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	3301      	adds	r3, #1
 800368c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	f47f aeaf 	bne.w	80033fc <HAL_GPIO_Init+0x10>
  }
}
 800369e:	bf00      	nop
 80036a0:	bf00      	nop
 80036a2:	371c      	adds	r7, #28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40010000 	.word	0x40010000
 80036b4:	48000400 	.word	0x48000400
 80036b8:	48000800 	.word	0x48000800
 80036bc:	40010400 	.word	0x40010400

080036c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]
 80036cc:	4613      	mov	r3, r2
 80036ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036d0:	787b      	ldrb	r3, [r7, #1]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036d6:	887a      	ldrh	r2, [r7, #2]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036dc:	e002      	b.n	80036e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036de:	887a      	ldrh	r2, [r7, #2]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036f4:	4b04      	ldr	r3, [pc, #16]	; (8003708 <HAL_PWREx_GetVoltageRange+0x18>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40007000 	.word	0x40007000

0800370c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800371a:	d130      	bne.n	800377e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800371c:	4b23      	ldr	r3, [pc, #140]	; (80037ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003728:	d038      	beq.n	800379c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800372a:	4b20      	ldr	r3, [pc, #128]	; (80037ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003732:	4a1e      	ldr	r2, [pc, #120]	; (80037ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003734:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003738:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800373a:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2232      	movs	r2, #50	; 0x32
 8003740:	fb02 f303 	mul.w	r3, r2, r3
 8003744:	4a1b      	ldr	r2, [pc, #108]	; (80037b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	0c9b      	lsrs	r3, r3, #18
 800374c:	3301      	adds	r3, #1
 800374e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003750:	e002      	b.n	8003758 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	3b01      	subs	r3, #1
 8003756:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003758:	4b14      	ldr	r3, [pc, #80]	; (80037ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003764:	d102      	bne.n	800376c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f2      	bne.n	8003752 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800376c:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003778:	d110      	bne.n	800379c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e00f      	b.n	800379e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800377e:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378a:	d007      	beq.n	800379c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800378c:	4b07      	ldr	r3, [pc, #28]	; (80037ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003794:	4a05      	ldr	r2, [pc, #20]	; (80037ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800379a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40007000 	.word	0x40007000
 80037b0:	200000b8 	.word	0x200000b8
 80037b4:	431bde83 	.word	0x431bde83

080037b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	f000 bc02 	b.w	8003fd0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037cc:	4b96      	ldr	r3, [pc, #600]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 030c 	and.w	r3, r3, #12
 80037d4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037d6:	4b94      	ldr	r3, [pc, #592]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80e4 	beq.w	80039b6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d007      	beq.n	8003804 <HAL_RCC_OscConfig+0x4c>
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2b0c      	cmp	r3, #12
 80037f8:	f040 808b 	bne.w	8003912 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	f040 8087 	bne.w	8003912 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003804:	4b88      	ldr	r3, [pc, #544]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_RCC_OscConfig+0x64>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e3d9      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1a      	ldr	r2, [r3, #32]
 8003820:	4b81      	ldr	r3, [pc, #516]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	d004      	beq.n	8003836 <HAL_RCC_OscConfig+0x7e>
 800382c:	4b7e      	ldr	r3, [pc, #504]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003834:	e005      	b.n	8003842 <HAL_RCC_OscConfig+0x8a>
 8003836:	4b7c      	ldr	r3, [pc, #496]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 8003838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800383c:	091b      	lsrs	r3, r3, #4
 800383e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003842:	4293      	cmp	r3, r2
 8003844:	d223      	bcs.n	800388e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	4618      	mov	r0, r3
 800384c:	f000 fe1e 	bl	800448c <RCC_SetFlashLatencyFromMSIRange>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e3ba      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800385a:	4b73      	ldr	r3, [pc, #460]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a72      	ldr	r2, [pc, #456]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 8003860:	f043 0308 	orr.w	r3, r3, #8
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	4b70      	ldr	r3, [pc, #448]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	496d      	ldr	r1, [pc, #436]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 8003874:	4313      	orrs	r3, r2
 8003876:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003878:	4b6b      	ldr	r3, [pc, #428]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	4968      	ldr	r1, [pc, #416]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 8003888:	4313      	orrs	r3, r2
 800388a:	604b      	str	r3, [r1, #4]
 800388c:	e025      	b.n	80038da <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800388e:	4b66      	ldr	r3, [pc, #408]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a65      	ldr	r2, [pc, #404]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 8003894:	f043 0308 	orr.w	r3, r3, #8
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	4b63      	ldr	r3, [pc, #396]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	4960      	ldr	r1, [pc, #384]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038ac:	4b5e      	ldr	r3, [pc, #376]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	495b      	ldr	r1, [pc, #364]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fdde 	bl	800448c <RCC_SetFlashLatencyFromMSIRange>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e37a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038da:	f000 fcb5 	bl	8004248 <HAL_RCC_GetSysClockFreq>
 80038de:	4602      	mov	r2, r0
 80038e0:	4b51      	ldr	r3, [pc, #324]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	4950      	ldr	r1, [pc, #320]	; (8003a2c <HAL_RCC_OscConfig+0x274>)
 80038ec:	5ccb      	ldrb	r3, [r1, r3]
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	fa22 f303 	lsr.w	r3, r2, r3
 80038f6:	4a4e      	ldr	r2, [pc, #312]	; (8003a30 <HAL_RCC_OscConfig+0x278>)
 80038f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038fa:	4b4e      	ldr	r3, [pc, #312]	; (8003a34 <HAL_RCC_OscConfig+0x27c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe fa58 	bl	8001db4 <HAL_InitTick>
 8003904:	4603      	mov	r3, r0
 8003906:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d052      	beq.n	80039b4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	e35e      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d032      	beq.n	8003980 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800391a:	4b43      	ldr	r3, [pc, #268]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a42      	ldr	r2, [pc, #264]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003926:	f7fe fee9 	bl	80026fc <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800392e:	f7fe fee5 	bl	80026fc <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e347      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003940:	4b39      	ldr	r3, [pc, #228]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800394c:	4b36      	ldr	r3, [pc, #216]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a35      	ldr	r2, [pc, #212]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 8003952:	f043 0308 	orr.w	r3, r3, #8
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	4b33      	ldr	r3, [pc, #204]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	4930      	ldr	r1, [pc, #192]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 8003966:	4313      	orrs	r3, r2
 8003968:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800396a:	4b2f      	ldr	r3, [pc, #188]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	021b      	lsls	r3, r3, #8
 8003978:	492b      	ldr	r1, [pc, #172]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 800397a:	4313      	orrs	r3, r2
 800397c:	604b      	str	r3, [r1, #4]
 800397e:	e01a      	b.n	80039b6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003980:	4b29      	ldr	r3, [pc, #164]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a28      	ldr	r2, [pc, #160]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800398c:	f7fe feb6 	bl	80026fc <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003994:	f7fe feb2 	bl	80026fc <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e314      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039a6:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x1dc>
 80039b2:	e000      	b.n	80039b6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d073      	beq.n	8003aaa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_OscConfig+0x21c>
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2b0c      	cmp	r3, #12
 80039cc:	d10e      	bne.n	80039ec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d10b      	bne.n	80039ec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d4:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d063      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x2f0>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d15f      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e2f1      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f4:	d106      	bne.n	8003a04 <HAL_RCC_OscConfig+0x24c>
 80039f6:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a0b      	ldr	r2, [pc, #44]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 80039fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	e025      	b.n	8003a50 <HAL_RCC_OscConfig+0x298>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a0c:	d114      	bne.n	8003a38 <HAL_RCC_OscConfig+0x280>
 8003a0e:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a05      	ldr	r2, [pc, #20]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 8003a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	4b03      	ldr	r3, [pc, #12]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a02      	ldr	r2, [pc, #8]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e013      	b.n	8003a50 <HAL_RCC_OscConfig+0x298>
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	0800dbfc 	.word	0x0800dbfc
 8003a30:	200000b8 	.word	0x200000b8
 8003a34:	200000bc 	.word	0x200000bc
 8003a38:	4ba0      	ldr	r3, [pc, #640]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a9f      	ldr	r2, [pc, #636]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	4b9d      	ldr	r3, [pc, #628]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a9c      	ldr	r2, [pc, #624]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d013      	beq.n	8003a80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a58:	f7fe fe50 	bl	80026fc <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a60:	f7fe fe4c 	bl	80026fc <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	; 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e2ae      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a72:	4b92      	ldr	r3, [pc, #584]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0x2a8>
 8003a7e:	e014      	b.n	8003aaa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a80:	f7fe fe3c 	bl	80026fc <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a88:	f7fe fe38 	bl	80026fc <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	; 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e29a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a9a:	4b88      	ldr	r3, [pc, #544]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x2d0>
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d060      	beq.n	8003b78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d005      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x310>
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2b0c      	cmp	r3, #12
 8003ac0:	d119      	bne.n	8003af6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d116      	bne.n	8003af6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac8:	4b7c      	ldr	r3, [pc, #496]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x328>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e277      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae0:	4b76      	ldr	r3, [pc, #472]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	061b      	lsls	r3, r3, #24
 8003aee:	4973      	ldr	r1, [pc, #460]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003af4:	e040      	b.n	8003b78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d023      	beq.n	8003b46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003afe:	4b6f      	ldr	r3, [pc, #444]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a6e      	ldr	r2, [pc, #440]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0a:	f7fe fdf7 	bl	80026fc <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b12:	f7fe fdf3 	bl	80026fc <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e255      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b24:	4b65      	ldr	r3, [pc, #404]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b30:	4b62      	ldr	r3, [pc, #392]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	061b      	lsls	r3, r3, #24
 8003b3e:	495f      	ldr	r1, [pc, #380]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]
 8003b44:	e018      	b.n	8003b78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b46:	4b5d      	ldr	r3, [pc, #372]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a5c      	ldr	r2, [pc, #368]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b52:	f7fe fdd3 	bl	80026fc <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5a:	f7fe fdcf 	bl	80026fc <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e231      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b6c:	4b53      	ldr	r3, [pc, #332]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1f0      	bne.n	8003b5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d03c      	beq.n	8003bfe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d01c      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b8c:	4b4b      	ldr	r3, [pc, #300]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b92:	4a4a      	ldr	r2, [pc, #296]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9c:	f7fe fdae 	bl	80026fc <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba4:	f7fe fdaa 	bl	80026fc <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e20c      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bb6:	4b41      	ldr	r3, [pc, #260]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0ef      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x3ec>
 8003bc4:	e01b      	b.n	8003bfe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc6:	4b3d      	ldr	r3, [pc, #244]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bcc:	4a3b      	ldr	r2, [pc, #236]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd6:	f7fe fd91 	bl	80026fc <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bde:	f7fe fd8d 	bl	80026fc <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e1ef      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bf0:	4b32      	ldr	r3, [pc, #200]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1ef      	bne.n	8003bde <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 80a6 	beq.w	8003d58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c10:	4b2a      	ldr	r3, [pc, #168]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10d      	bne.n	8003c38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c1c:	4b27      	ldr	r3, [pc, #156]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c20:	4a26      	ldr	r2, [pc, #152]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c26:	6593      	str	r3, [r2, #88]	; 0x58
 8003c28:	4b24      	ldr	r3, [pc, #144]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c34:	2301      	movs	r3, #1
 8003c36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c38:	4b21      	ldr	r3, [pc, #132]	; (8003cc0 <HAL_RCC_OscConfig+0x508>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d118      	bne.n	8003c76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c44:	4b1e      	ldr	r3, [pc, #120]	; (8003cc0 <HAL_RCC_OscConfig+0x508>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1d      	ldr	r2, [pc, #116]	; (8003cc0 <HAL_RCC_OscConfig+0x508>)
 8003c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c50:	f7fe fd54 	bl	80026fc <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c58:	f7fe fd50 	bl	80026fc <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e1b2      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c6a:	4b15      	ldr	r3, [pc, #84]	; (8003cc0 <HAL_RCC_OscConfig+0x508>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d108      	bne.n	8003c90 <HAL_RCC_OscConfig+0x4d8>
 8003c7e:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c84:	4a0d      	ldr	r2, [pc, #52]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c8e:	e029      	b.n	8003ce4 <HAL_RCC_OscConfig+0x52c>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2b05      	cmp	r3, #5
 8003c96:	d115      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x50c>
 8003c98:	4b08      	ldr	r3, [pc, #32]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9e:	4a07      	ldr	r2, [pc, #28]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003ca0:	f043 0304 	orr.w	r3, r3, #4
 8003ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ca8:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	4a03      	ldr	r2, [pc, #12]	; (8003cbc <HAL_RCC_OscConfig+0x504>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cb8:	e014      	b.n	8003ce4 <HAL_RCC_OscConfig+0x52c>
 8003cba:	bf00      	nop
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40007000 	.word	0x40007000
 8003cc4:	4b9a      	ldr	r3, [pc, #616]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cca:	4a99      	ldr	r2, [pc, #612]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003ccc:	f023 0301 	bic.w	r3, r3, #1
 8003cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cd4:	4b96      	ldr	r3, [pc, #600]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cda:	4a95      	ldr	r2, [pc, #596]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003cdc:	f023 0304 	bic.w	r3, r3, #4
 8003ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d016      	beq.n	8003d1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cec:	f7fe fd06 	bl	80026fc <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cf2:	e00a      	b.n	8003d0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf4:	f7fe fd02 	bl	80026fc <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e162      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d0a:	4b89      	ldr	r3, [pc, #548]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0ed      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x53c>
 8003d18:	e015      	b.n	8003d46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1a:	f7fe fcef 	bl	80026fc <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d20:	e00a      	b.n	8003d38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d22:	f7fe fceb 	bl	80026fc <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e14b      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d38:	4b7d      	ldr	r3, [pc, #500]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1ed      	bne.n	8003d22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d46:	7ffb      	ldrb	r3, [r7, #31]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d105      	bne.n	8003d58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d4c:	4b78      	ldr	r3, [pc, #480]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d50:	4a77      	ldr	r2, [pc, #476]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d56:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0320 	and.w	r3, r3, #32
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d03c      	beq.n	8003dde <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01c      	beq.n	8003da6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d6c:	4b70      	ldr	r3, [pc, #448]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d72:	4a6f      	ldr	r2, [pc, #444]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7c:	f7fe fcbe 	bl	80026fc <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d84:	f7fe fcba 	bl	80026fc <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e11c      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d96:	4b66      	ldr	r3, [pc, #408]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003d98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0ef      	beq.n	8003d84 <HAL_RCC_OscConfig+0x5cc>
 8003da4:	e01b      	b.n	8003dde <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003da6:	4b62      	ldr	r3, [pc, #392]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003da8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dac:	4a60      	ldr	r2, [pc, #384]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003dae:	f023 0301 	bic.w	r3, r3, #1
 8003db2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db6:	f7fe fca1 	bl	80026fc <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dbe:	f7fe fc9d 	bl	80026fc <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e0ff      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dd0:	4b57      	ldr	r3, [pc, #348]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003dd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1ef      	bne.n	8003dbe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 80f3 	beq.w	8003fce <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	f040 80c9 	bne.w	8003f84 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003df2:	4b4f      	ldr	r3, [pc, #316]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f003 0203 	and.w	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d12c      	bne.n	8003e60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	3b01      	subs	r3, #1
 8003e12:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d123      	bne.n	8003e60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e22:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d11b      	bne.n	8003e60 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d113      	bne.n	8003e60 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e42:	085b      	lsrs	r3, r3, #1
 8003e44:	3b01      	subs	r3, #1
 8003e46:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d109      	bne.n	8003e60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	085b      	lsrs	r3, r3, #1
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d06b      	beq.n	8003f38 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	2b0c      	cmp	r3, #12
 8003e64:	d062      	beq.n	8003f2c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e66:	4b32      	ldr	r3, [pc, #200]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e0ac      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e76:	4b2e      	ldr	r3, [pc, #184]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a2d      	ldr	r2, [pc, #180]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003e7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e80:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e82:	f7fe fc3b 	bl	80026fc <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8a:	f7fe fc37 	bl	80026fc <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e099      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e9c:	4b24      	ldr	r3, [pc, #144]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f0      	bne.n	8003e8a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ea8:	4b21      	ldr	r3, [pc, #132]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	4b21      	ldr	r3, [pc, #132]	; (8003f34 <HAL_RCC_OscConfig+0x77c>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003eb8:	3a01      	subs	r2, #1
 8003eba:	0112      	lsls	r2, r2, #4
 8003ebc:	4311      	orrs	r1, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ec2:	0212      	lsls	r2, r2, #8
 8003ec4:	4311      	orrs	r1, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003eca:	0852      	lsrs	r2, r2, #1
 8003ecc:	3a01      	subs	r2, #1
 8003ece:	0552      	lsls	r2, r2, #21
 8003ed0:	4311      	orrs	r1, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ed6:	0852      	lsrs	r2, r2, #1
 8003ed8:	3a01      	subs	r2, #1
 8003eda:	0652      	lsls	r2, r2, #25
 8003edc:	4311      	orrs	r1, r2
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ee2:	06d2      	lsls	r2, r2, #27
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	4912      	ldr	r1, [pc, #72]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003eec:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a0f      	ldr	r2, [pc, #60]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ef6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ef8:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4a0c      	ldr	r2, [pc, #48]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f04:	f7fe fbfa 	bl	80026fc <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0c:	f7fe fbf6 	bl	80026fc <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e058      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1e:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f2a:	e050      	b.n	8003fce <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e04f      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
 8003f30:	40021000 	.word	0x40021000
 8003f34:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f38:	4b27      	ldr	r3, [pc, #156]	; (8003fd8 <HAL_RCC_OscConfig+0x820>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d144      	bne.n	8003fce <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f44:	4b24      	ldr	r3, [pc, #144]	; (8003fd8 <HAL_RCC_OscConfig+0x820>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a23      	ldr	r2, [pc, #140]	; (8003fd8 <HAL_RCC_OscConfig+0x820>)
 8003f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f50:	4b21      	ldr	r3, [pc, #132]	; (8003fd8 <HAL_RCC_OscConfig+0x820>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4a20      	ldr	r2, [pc, #128]	; (8003fd8 <HAL_RCC_OscConfig+0x820>)
 8003f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f5c:	f7fe fbce 	bl	80026fc <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fe fbca 	bl	80026fc <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e02c      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f76:	4b18      	ldr	r3, [pc, #96]	; (8003fd8 <HAL_RCC_OscConfig+0x820>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x7ac>
 8003f82:	e024      	b.n	8003fce <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b0c      	cmp	r3, #12
 8003f88:	d01f      	beq.n	8003fca <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8a:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <HAL_RCC_OscConfig+0x820>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a12      	ldr	r2, [pc, #72]	; (8003fd8 <HAL_RCC_OscConfig+0x820>)
 8003f90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f96:	f7fe fbb1 	bl	80026fc <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9e:	f7fe fbad 	bl	80026fc <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e00f      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb0:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <HAL_RCC_OscConfig+0x820>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1f0      	bne.n	8003f9e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003fbc:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <HAL_RCC_OscConfig+0x820>)
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	4905      	ldr	r1, [pc, #20]	; (8003fd8 <HAL_RCC_OscConfig+0x820>)
 8003fc2:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <HAL_RCC_OscConfig+0x824>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	60cb      	str	r3, [r1, #12]
 8003fc8:	e001      	b.n	8003fce <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3720      	adds	r7, #32
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	feeefffc 	.word	0xfeeefffc

08003fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0e7      	b.n	80041c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff4:	4b75      	ldr	r3, [pc, #468]	; (80041cc <HAL_RCC_ClockConfig+0x1ec>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d910      	bls.n	8004024 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004002:	4b72      	ldr	r3, [pc, #456]	; (80041cc <HAL_RCC_ClockConfig+0x1ec>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f023 0207 	bic.w	r2, r3, #7
 800400a:	4970      	ldr	r1, [pc, #448]	; (80041cc <HAL_RCC_ClockConfig+0x1ec>)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	4313      	orrs	r3, r2
 8004010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004012:	4b6e      	ldr	r3, [pc, #440]	; (80041cc <HAL_RCC_ClockConfig+0x1ec>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d001      	beq.n	8004024 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0cf      	b.n	80041c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d010      	beq.n	8004052 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	4b66      	ldr	r3, [pc, #408]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800403c:	429a      	cmp	r2, r3
 800403e:	d908      	bls.n	8004052 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004040:	4b63      	ldr	r3, [pc, #396]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4960      	ldr	r1, [pc, #384]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 800404e:	4313      	orrs	r3, r2
 8004050:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d04c      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b03      	cmp	r3, #3
 8004064:	d107      	bne.n	8004076 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004066:	4b5a      	ldr	r3, [pc, #360]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d121      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e0a6      	b.n	80041c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d107      	bne.n	800408e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800407e:	4b54      	ldr	r3, [pc, #336]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d115      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e09a      	b.n	80041c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d107      	bne.n	80040a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004096:	4b4e      	ldr	r3, [pc, #312]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d109      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e08e      	b.n	80041c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040a6:	4b4a      	ldr	r3, [pc, #296]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e086      	b.n	80041c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040b6:	4b46      	ldr	r3, [pc, #280]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f023 0203 	bic.w	r2, r3, #3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	4943      	ldr	r1, [pc, #268]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c8:	f7fe fb18 	bl	80026fc <HAL_GetTick>
 80040cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ce:	e00a      	b.n	80040e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d0:	f7fe fb14 	bl	80026fc <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	f241 3288 	movw	r2, #5000	; 0x1388
 80040de:	4293      	cmp	r3, r2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e06e      	b.n	80041c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e6:	4b3a      	ldr	r3, [pc, #232]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 020c 	and.w	r2, r3, #12
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d1eb      	bne.n	80040d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d010      	beq.n	8004126 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	4b31      	ldr	r3, [pc, #196]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004110:	429a      	cmp	r2, r3
 8004112:	d208      	bcs.n	8004126 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004114:	4b2e      	ldr	r3, [pc, #184]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	492b      	ldr	r1, [pc, #172]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004122:	4313      	orrs	r3, r2
 8004124:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004126:	4b29      	ldr	r3, [pc, #164]	; (80041cc <HAL_RCC_ClockConfig+0x1ec>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d210      	bcs.n	8004156 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004134:	4b25      	ldr	r3, [pc, #148]	; (80041cc <HAL_RCC_ClockConfig+0x1ec>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f023 0207 	bic.w	r2, r3, #7
 800413c:	4923      	ldr	r1, [pc, #140]	; (80041cc <HAL_RCC_ClockConfig+0x1ec>)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	4313      	orrs	r3, r2
 8004142:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004144:	4b21      	ldr	r3, [pc, #132]	; (80041cc <HAL_RCC_ClockConfig+0x1ec>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d001      	beq.n	8004156 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e036      	b.n	80041c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d008      	beq.n	8004174 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004162:	4b1b      	ldr	r3, [pc, #108]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	4918      	ldr	r1, [pc, #96]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004170:	4313      	orrs	r3, r2
 8004172:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b00      	cmp	r3, #0
 800417e:	d009      	beq.n	8004194 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004180:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	4910      	ldr	r1, [pc, #64]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004190:	4313      	orrs	r3, r2
 8004192:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004194:	f000 f858 	bl	8004248 <HAL_RCC_GetSysClockFreq>
 8004198:	4602      	mov	r2, r0
 800419a:	4b0d      	ldr	r3, [pc, #52]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	091b      	lsrs	r3, r3, #4
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	490b      	ldr	r1, [pc, #44]	; (80041d4 <HAL_RCC_ClockConfig+0x1f4>)
 80041a6:	5ccb      	ldrb	r3, [r1, r3]
 80041a8:	f003 031f 	and.w	r3, r3, #31
 80041ac:	fa22 f303 	lsr.w	r3, r2, r3
 80041b0:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <HAL_RCC_ClockConfig+0x1f8>)
 80041b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041b4:	4b09      	ldr	r3, [pc, #36]	; (80041dc <HAL_RCC_ClockConfig+0x1fc>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fd fdfb 	bl	8001db4 <HAL_InitTick>
 80041be:	4603      	mov	r3, r0
 80041c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80041c2:	7afb      	ldrb	r3, [r7, #11]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40022000 	.word	0x40022000
 80041d0:	40021000 	.word	0x40021000
 80041d4:	0800dbfc 	.word	0x0800dbfc
 80041d8:	200000b8 	.word	0x200000b8
 80041dc:	200000bc 	.word	0x200000bc

080041e0 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	; 0x28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 80041ec:	4b15      	ldr	r3, [pc, #84]	; (8004244 <HAL_RCC_MCOConfig+0x64>)
 80041ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f0:	4a14      	ldr	r2, [pc, #80]	; (8004244 <HAL_RCC_MCOConfig+0x64>)
 80041f2:	f043 0301 	orr.w	r3, r3, #1
 80041f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041f8:	4b12      	ldr	r3, [pc, #72]	; (8004244 <HAL_RCC_MCOConfig+0x64>)
 80041fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8004204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800420a:	2302      	movs	r3, #2
 800420c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800420e:	2302      	movs	r3, #2
 8004210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004216:	2300      	movs	r3, #0
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800421a:	f107 0314 	add.w	r3, r7, #20
 800421e:	4619      	mov	r1, r3
 8004220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004224:	f7ff f8e2 	bl	80033ec <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8004228:	4b06      	ldr	r3, [pc, #24]	; (8004244 <HAL_RCC_MCOConfig+0x64>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	430b      	orrs	r3, r1
 8004236:	4903      	ldr	r1, [pc, #12]	; (8004244 <HAL_RCC_MCOConfig+0x64>)
 8004238:	4313      	orrs	r3, r2
 800423a:	608b      	str	r3, [r1, #8]
}
 800423c:	bf00      	nop
 800423e:	3728      	adds	r7, #40	; 0x28
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40021000 	.word	0x40021000

08004248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004248:	b480      	push	{r7}
 800424a:	b089      	sub	sp, #36	; 0x24
 800424c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	2300      	movs	r3, #0
 8004254:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004256:	4b3e      	ldr	r3, [pc, #248]	; (8004350 <HAL_RCC_GetSysClockFreq+0x108>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 030c 	and.w	r3, r3, #12
 800425e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004260:	4b3b      	ldr	r3, [pc, #236]	; (8004350 <HAL_RCC_GetSysClockFreq+0x108>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f003 0303 	and.w	r3, r3, #3
 8004268:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d005      	beq.n	800427c <HAL_RCC_GetSysClockFreq+0x34>
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b0c      	cmp	r3, #12
 8004274:	d121      	bne.n	80042ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d11e      	bne.n	80042ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800427c:	4b34      	ldr	r3, [pc, #208]	; (8004350 <HAL_RCC_GetSysClockFreq+0x108>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d107      	bne.n	8004298 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004288:	4b31      	ldr	r3, [pc, #196]	; (8004350 <HAL_RCC_GetSysClockFreq+0x108>)
 800428a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800428e:	0a1b      	lsrs	r3, r3, #8
 8004290:	f003 030f 	and.w	r3, r3, #15
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	e005      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004298:	4b2d      	ldr	r3, [pc, #180]	; (8004350 <HAL_RCC_GetSysClockFreq+0x108>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042a4:	4a2b      	ldr	r2, [pc, #172]	; (8004354 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10d      	bne.n	80042d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042b8:	e00a      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d102      	bne.n	80042c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042c0:	4b25      	ldr	r3, [pc, #148]	; (8004358 <HAL_RCC_GetSysClockFreq+0x110>)
 80042c2:	61bb      	str	r3, [r7, #24]
 80042c4:	e004      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d101      	bne.n	80042d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042cc:	4b23      	ldr	r3, [pc, #140]	; (800435c <HAL_RCC_GetSysClockFreq+0x114>)
 80042ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	2b0c      	cmp	r3, #12
 80042d4:	d134      	bne.n	8004340 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042d6:	4b1e      	ldr	r3, [pc, #120]	; (8004350 <HAL_RCC_GetSysClockFreq+0x108>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d003      	beq.n	80042ee <HAL_RCC_GetSysClockFreq+0xa6>
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	d003      	beq.n	80042f4 <HAL_RCC_GetSysClockFreq+0xac>
 80042ec:	e005      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042ee:	4b1a      	ldr	r3, [pc, #104]	; (8004358 <HAL_RCC_GetSysClockFreq+0x110>)
 80042f0:	617b      	str	r3, [r7, #20]
      break;
 80042f2:	e005      	b.n	8004300 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042f4:	4b19      	ldr	r3, [pc, #100]	; (800435c <HAL_RCC_GetSysClockFreq+0x114>)
 80042f6:	617b      	str	r3, [r7, #20]
      break;
 80042f8:	e002      	b.n	8004300 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	617b      	str	r3, [r7, #20]
      break;
 80042fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004300:	4b13      	ldr	r3, [pc, #76]	; (8004350 <HAL_RCC_GetSysClockFreq+0x108>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	091b      	lsrs	r3, r3, #4
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	3301      	adds	r3, #1
 800430c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800430e:	4b10      	ldr	r3, [pc, #64]	; (8004350 <HAL_RCC_GetSysClockFreq+0x108>)
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	0a1b      	lsrs	r3, r3, #8
 8004314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	fb03 f202 	mul.w	r2, r3, r2
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	fbb2 f3f3 	udiv	r3, r2, r3
 8004324:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004326:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <HAL_RCC_GetSysClockFreq+0x108>)
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	0e5b      	lsrs	r3, r3, #25
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	3301      	adds	r3, #1
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	fbb2 f3f3 	udiv	r3, r2, r3
 800433e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004340:	69bb      	ldr	r3, [r7, #24]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3724      	adds	r7, #36	; 0x24
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40021000 	.word	0x40021000
 8004354:	0800dc14 	.word	0x0800dc14
 8004358:	00f42400 	.word	0x00f42400
 800435c:	007a1200 	.word	0x007a1200

08004360 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004364:	4b03      	ldr	r3, [pc, #12]	; (8004374 <HAL_RCC_GetHCLKFreq+0x14>)
 8004366:	681b      	ldr	r3, [r3, #0]
}
 8004368:	4618      	mov	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	200000b8 	.word	0x200000b8

08004378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800437c:	f7ff fff0 	bl	8004360 <HAL_RCC_GetHCLKFreq>
 8004380:	4602      	mov	r2, r0
 8004382:	4b06      	ldr	r3, [pc, #24]	; (800439c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	0a1b      	lsrs	r3, r3, #8
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	4904      	ldr	r1, [pc, #16]	; (80043a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800438e:	5ccb      	ldrb	r3, [r1, r3]
 8004390:	f003 031f 	and.w	r3, r3, #31
 8004394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004398:	4618      	mov	r0, r3
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40021000 	.word	0x40021000
 80043a0:	0800dc0c 	.word	0x0800dc0c

080043a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043a8:	f7ff ffda 	bl	8004360 <HAL_RCC_GetHCLKFreq>
 80043ac:	4602      	mov	r2, r0
 80043ae:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	0adb      	lsrs	r3, r3, #11
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	4904      	ldr	r1, [pc, #16]	; (80043cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80043ba:	5ccb      	ldrb	r3, [r1, r3]
 80043bc:	f003 031f 	and.w	r3, r3, #31
 80043c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40021000 	.word	0x40021000
 80043cc:	0800dc0c 	.word	0x0800dc0c

080043d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	220f      	movs	r2, #15
 80043de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80043e0:	4b12      	ldr	r3, [pc, #72]	; (800442c <HAL_RCC_GetClockConfig+0x5c>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 0203 	and.w	r2, r3, #3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80043ec:	4b0f      	ldr	r3, [pc, #60]	; (800442c <HAL_RCC_GetClockConfig+0x5c>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80043f8:	4b0c      	ldr	r3, [pc, #48]	; (800442c <HAL_RCC_GetClockConfig+0x5c>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004404:	4b09      	ldr	r3, [pc, #36]	; (800442c <HAL_RCC_GetClockConfig+0x5c>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	08db      	lsrs	r3, r3, #3
 800440a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004412:	4b07      	ldr	r3, [pc, #28]	; (8004430 <HAL_RCC_GetClockConfig+0x60>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0207 	and.w	r2, r3, #7
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	601a      	str	r2, [r3, #0]
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40021000 	.word	0x40021000
 8004430:	40022000 	.word	0x40022000

08004434 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HAL_RCC_EnableCSS+0x1c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a04      	ldr	r2, [pc, #16]	; (8004450 <HAL_RCC_EnableCSS+0x1c>)
 800443e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004442:	6013      	str	r3, [r2, #0]
}
 8004444:	bf00      	nop
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40021000 	.word	0x40021000

08004454 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004458:	4b07      	ldr	r3, [pc, #28]	; (8004478 <HAL_RCC_NMI_IRQHandler+0x24>)
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004464:	d105      	bne.n	8004472 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004466:	f000 f809 	bl	800447c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800446a:	4b03      	ldr	r3, [pc, #12]	; (8004478 <HAL_RCC_NMI_IRQHandler+0x24>)
 800446c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004470:	621a      	str	r2, [r3, #32]
  }
}
 8004472:	bf00      	nop
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40021000 	.word	0x40021000

0800447c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
	...

0800448c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004494:	2300      	movs	r3, #0
 8004496:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004498:	4b2a      	ldr	r3, [pc, #168]	; (8004544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800449a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044a4:	f7ff f924 	bl	80036f0 <HAL_PWREx_GetVoltageRange>
 80044a8:	6178      	str	r0, [r7, #20]
 80044aa:	e014      	b.n	80044d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044ac:	4b25      	ldr	r3, [pc, #148]	; (8004544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b0:	4a24      	ldr	r2, [pc, #144]	; (8004544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b6:	6593      	str	r3, [r2, #88]	; 0x58
 80044b8:	4b22      	ldr	r3, [pc, #136]	; (8004544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044c4:	f7ff f914 	bl	80036f0 <HAL_PWREx_GetVoltageRange>
 80044c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044ca:	4b1e      	ldr	r3, [pc, #120]	; (8004544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ce:	4a1d      	ldr	r2, [pc, #116]	; (8004544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044dc:	d10b      	bne.n	80044f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b80      	cmp	r3, #128	; 0x80
 80044e2:	d919      	bls.n	8004518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2ba0      	cmp	r3, #160	; 0xa0
 80044e8:	d902      	bls.n	80044f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044ea:	2302      	movs	r3, #2
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	e013      	b.n	8004518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044f0:	2301      	movs	r3, #1
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	e010      	b.n	8004518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b80      	cmp	r3, #128	; 0x80
 80044fa:	d902      	bls.n	8004502 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044fc:	2303      	movs	r3, #3
 80044fe:	613b      	str	r3, [r7, #16]
 8004500:	e00a      	b.n	8004518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b80      	cmp	r3, #128	; 0x80
 8004506:	d102      	bne.n	800450e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004508:	2302      	movs	r3, #2
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	e004      	b.n	8004518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b70      	cmp	r3, #112	; 0x70
 8004512:	d101      	bne.n	8004518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004514:	2301      	movs	r3, #1
 8004516:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004518:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f023 0207 	bic.w	r2, r3, #7
 8004520:	4909      	ldr	r1, [pc, #36]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004528:	4b07      	ldr	r3, [pc, #28]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	429a      	cmp	r2, r3
 8004534:	d001      	beq.n	800453a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40021000 	.word	0x40021000
 8004548:	40022000 	.word	0x40022000

0800454c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004554:	2300      	movs	r3, #0
 8004556:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004558:	2300      	movs	r3, #0
 800455a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004564:	2b00      	cmp	r3, #0
 8004566:	d031      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004570:	d01a      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004572:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004576:	d814      	bhi.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004578:	2b00      	cmp	r3, #0
 800457a:	d009      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800457c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004580:	d10f      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004582:	4b5d      	ldr	r3, [pc, #372]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	4a5c      	ldr	r2, [pc, #368]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800458c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800458e:	e00c      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3304      	adds	r3, #4
 8004594:	2100      	movs	r1, #0
 8004596:	4618      	mov	r0, r3
 8004598:	f000 f9ce 	bl	8004938 <RCCEx_PLLSAI1_Config>
 800459c:	4603      	mov	r3, r0
 800459e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045a0:	e003      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	74fb      	strb	r3, [r7, #19]
      break;
 80045a6:	e000      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80045a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045aa:	7cfb      	ldrb	r3, [r7, #19]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10b      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045b0:	4b51      	ldr	r3, [pc, #324]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045be:	494e      	ldr	r1, [pc, #312]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045c6:	e001      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c8:	7cfb      	ldrb	r3, [r7, #19]
 80045ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 809e 	beq.w	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045da:	2300      	movs	r3, #0
 80045dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045de:	4b46      	ldr	r3, [pc, #280]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80045ee:	2300      	movs	r3, #0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00d      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f4:	4b40      	ldr	r3, [pc, #256]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f8:	4a3f      	ldr	r2, [pc, #252]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004600:	4b3d      	ldr	r3, [pc, #244]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800460c:	2301      	movs	r3, #1
 800460e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004610:	4b3a      	ldr	r3, [pc, #232]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a39      	ldr	r2, [pc, #228]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800461a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800461c:	f7fe f86e 	bl	80026fc <HAL_GetTick>
 8004620:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004622:	e009      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004624:	f7fe f86a 	bl	80026fc <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d902      	bls.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	74fb      	strb	r3, [r7, #19]
        break;
 8004636:	e005      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004638:	4b30      	ldr	r3, [pc, #192]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0ef      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004644:	7cfb      	ldrb	r3, [r7, #19]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d15a      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800464a:	4b2b      	ldr	r3, [pc, #172]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800464c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004654:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01e      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	429a      	cmp	r2, r3
 8004664:	d019      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004666:	4b24      	ldr	r3, [pc, #144]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004670:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004672:	4b21      	ldr	r3, [pc, #132]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004678:	4a1f      	ldr	r2, [pc, #124]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800467a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004682:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004688:	4a1b      	ldr	r2, [pc, #108]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800468a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800468e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004692:	4a19      	ldr	r2, [pc, #100]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d016      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fe f82a 	bl	80026fc <HAL_GetTick>
 80046a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046aa:	e00b      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ac:	f7fe f826 	bl	80026fc <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d902      	bls.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	74fb      	strb	r3, [r7, #19]
            break;
 80046c2:	e006      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c4:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0ec      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80046d2:	7cfb      	ldrb	r3, [r7, #19]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10b      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046d8:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e6:	4904      	ldr	r1, [pc, #16]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046ee:	e009      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046f0:	7cfb      	ldrb	r3, [r7, #19]
 80046f2:	74bb      	strb	r3, [r7, #18]
 80046f4:	e006      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80046f6:	bf00      	nop
 80046f8:	40021000 	.word	0x40021000
 80046fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004700:	7cfb      	ldrb	r3, [r7, #19]
 8004702:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004704:	7c7b      	ldrb	r3, [r7, #17]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d105      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800470a:	4b8a      	ldr	r3, [pc, #552]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800470c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470e:	4a89      	ldr	r2, [pc, #548]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004714:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004722:	4b84      	ldr	r3, [pc, #528]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004728:	f023 0203 	bic.w	r2, r3, #3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	4980      	ldr	r1, [pc, #512]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004744:	4b7b      	ldr	r3, [pc, #492]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474a:	f023 020c 	bic.w	r2, r3, #12
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	4978      	ldr	r1, [pc, #480]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004766:	4b73      	ldr	r3, [pc, #460]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	496f      	ldr	r1, [pc, #444]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004788:	4b6a      	ldr	r3, [pc, #424]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004796:	4967      	ldr	r1, [pc, #412]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047aa:	4b62      	ldr	r3, [pc, #392]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	495e      	ldr	r1, [pc, #376]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047cc:	4b59      	ldr	r3, [pc, #356]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	4956      	ldr	r1, [pc, #344]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047ee:	4b51      	ldr	r3, [pc, #324]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	494d      	ldr	r1, [pc, #308]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d028      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004810:	4b48      	ldr	r3, [pc, #288]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	4945      	ldr	r1, [pc, #276]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800482e:	d106      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004830:	4b40      	ldr	r3, [pc, #256]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	4a3f      	ldr	r2, [pc, #252]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800483a:	60d3      	str	r3, [r2, #12]
 800483c:	e011      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004846:	d10c      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3304      	adds	r3, #4
 800484c:	2101      	movs	r1, #1
 800484e:	4618      	mov	r0, r3
 8004850:	f000 f872 	bl	8004938 <RCCEx_PLLSAI1_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004858:	7cfb      	ldrb	r3, [r7, #19]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800485e:	7cfb      	ldrb	r3, [r7, #19]
 8004860:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d028      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800486e:	4b31      	ldr	r3, [pc, #196]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004874:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487c:	492d      	ldr	r1, [pc, #180]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004888:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800488c:	d106      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800488e:	4b29      	ldr	r3, [pc, #164]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	4a28      	ldr	r2, [pc, #160]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004894:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004898:	60d3      	str	r3, [r2, #12]
 800489a:	e011      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048a4:	d10c      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3304      	adds	r3, #4
 80048aa:	2101      	movs	r1, #1
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 f843 	bl	8004938 <RCCEx_PLLSAI1_Config>
 80048b2:	4603      	mov	r3, r0
 80048b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048b6:	7cfb      	ldrb	r3, [r7, #19]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80048bc:	7cfb      	ldrb	r3, [r7, #19]
 80048be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01c      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048cc:	4b19      	ldr	r3, [pc, #100]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048da:	4916      	ldr	r1, [pc, #88]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048ea:	d10c      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3304      	adds	r3, #4
 80048f0:	2102      	movs	r1, #2
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 f820 	bl	8004938 <RCCEx_PLLSAI1_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048fc:	7cfb      	ldrb	r3, [r7, #19]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004902:	7cfb      	ldrb	r3, [r7, #19]
 8004904:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004912:	4b08      	ldr	r3, [pc, #32]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004918:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004920:	4904      	ldr	r1, [pc, #16]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004928:	7cbb      	ldrb	r3, [r7, #18]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40021000 	.word	0x40021000

08004938 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004946:	4b74      	ldr	r3, [pc, #464]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d018      	beq.n	8004984 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004952:	4b71      	ldr	r3, [pc, #452]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f003 0203 	and.w	r2, r3, #3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d10d      	bne.n	800497e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
       ||
 8004966:	2b00      	cmp	r3, #0
 8004968:	d009      	beq.n	800497e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800496a:	4b6b      	ldr	r3, [pc, #428]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	091b      	lsrs	r3, r3, #4
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
       ||
 800497a:	429a      	cmp	r2, r3
 800497c:	d047      	beq.n	8004a0e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	73fb      	strb	r3, [r7, #15]
 8004982:	e044      	b.n	8004a0e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b03      	cmp	r3, #3
 800498a:	d018      	beq.n	80049be <RCCEx_PLLSAI1_Config+0x86>
 800498c:	2b03      	cmp	r3, #3
 800498e:	d825      	bhi.n	80049dc <RCCEx_PLLSAI1_Config+0xa4>
 8004990:	2b01      	cmp	r3, #1
 8004992:	d002      	beq.n	800499a <RCCEx_PLLSAI1_Config+0x62>
 8004994:	2b02      	cmp	r3, #2
 8004996:	d009      	beq.n	80049ac <RCCEx_PLLSAI1_Config+0x74>
 8004998:	e020      	b.n	80049dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800499a:	4b5f      	ldr	r3, [pc, #380]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d11d      	bne.n	80049e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049aa:	e01a      	b.n	80049e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049ac:	4b5a      	ldr	r3, [pc, #360]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d116      	bne.n	80049e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049bc:	e013      	b.n	80049e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049be:	4b56      	ldr	r3, [pc, #344]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10f      	bne.n	80049ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049ca:	4b53      	ldr	r3, [pc, #332]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049da:	e006      	b.n	80049ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
      break;
 80049e0:	e004      	b.n	80049ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049e2:	bf00      	nop
 80049e4:	e002      	b.n	80049ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049e6:	bf00      	nop
 80049e8:	e000      	b.n	80049ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10d      	bne.n	8004a0e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049f2:	4b49      	ldr	r3, [pc, #292]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6819      	ldr	r1, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	430b      	orrs	r3, r1
 8004a08:	4943      	ldr	r1, [pc, #268]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d17c      	bne.n	8004b0e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a14:	4b40      	ldr	r3, [pc, #256]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a3f      	ldr	r2, [pc, #252]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a20:	f7fd fe6c 	bl	80026fc <HAL_GetTick>
 8004a24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a26:	e009      	b.n	8004a3c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a28:	f7fd fe68 	bl	80026fc <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d902      	bls.n	8004a3c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	73fb      	strb	r3, [r7, #15]
        break;
 8004a3a:	e005      	b.n	8004a48 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a3c:	4b36      	ldr	r3, [pc, #216]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1ef      	bne.n	8004a28 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d15f      	bne.n	8004b0e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d110      	bne.n	8004a76 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a54:	4b30      	ldr	r3, [pc, #192]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004a5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6892      	ldr	r2, [r2, #8]
 8004a64:	0211      	lsls	r1, r2, #8
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	68d2      	ldr	r2, [r2, #12]
 8004a6a:	06d2      	lsls	r2, r2, #27
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	492a      	ldr	r1, [pc, #168]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	610b      	str	r3, [r1, #16]
 8004a74:	e027      	b.n	8004ac6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d112      	bne.n	8004aa2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a7c:	4b26      	ldr	r3, [pc, #152]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6892      	ldr	r2, [r2, #8]
 8004a8c:	0211      	lsls	r1, r2, #8
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6912      	ldr	r2, [r2, #16]
 8004a92:	0852      	lsrs	r2, r2, #1
 8004a94:	3a01      	subs	r2, #1
 8004a96:	0552      	lsls	r2, r2, #21
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	491f      	ldr	r1, [pc, #124]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	610b      	str	r3, [r1, #16]
 8004aa0:	e011      	b.n	8004ac6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004aa2:	4b1d      	ldr	r3, [pc, #116]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004aaa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6892      	ldr	r2, [r2, #8]
 8004ab2:	0211      	lsls	r1, r2, #8
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6952      	ldr	r2, [r2, #20]
 8004ab8:	0852      	lsrs	r2, r2, #1
 8004aba:	3a01      	subs	r2, #1
 8004abc:	0652      	lsls	r2, r2, #25
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	4915      	ldr	r1, [pc, #84]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ac6:	4b14      	ldr	r3, [pc, #80]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004acc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ad0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad2:	f7fd fe13 	bl	80026fc <HAL_GetTick>
 8004ad6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ad8:	e009      	b.n	8004aee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ada:	f7fd fe0f 	bl	80026fc <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d902      	bls.n	8004aee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	73fb      	strb	r3, [r7, #15]
          break;
 8004aec:	e005      	b.n	8004afa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004aee:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0ef      	beq.n	8004ada <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d106      	bne.n	8004b0e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	4903      	ldr	r1, [pc, #12]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40021000 	.word	0x40021000

08004b1c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e049      	b.n	8004bc2 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	795b      	ldrb	r3, [r3, #5]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d105      	bne.n	8004b44 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fd f84c 	bl	8001bdc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0204 	orr.w	r2, r2, #4
 8004b58:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b64:	2b40      	cmp	r3, #64	; 0x40
 8004b66:	d104      	bne.n	8004b72 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e027      	b.n	8004bc2 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004b72:	f7fd fdc3 	bl	80026fc <HAL_GetTick>
 8004b76:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004b78:	e015      	b.n	8004ba6 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004b7a:	f7fd fdbf 	bl	80026fc <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d90e      	bls.n	8004ba6 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d107      	bne.n	8004ba6 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2204      	movs	r2, #4
 8004b9a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e00d      	b.n	8004bc2 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d0e2      	beq.n	8004b7a <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b084      	sub	sp, #16
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e095      	b.n	8004d08 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d108      	bne.n	8004bf6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bec:	d009      	beq.n	8004c02 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	61da      	str	r2, [r3, #28]
 8004bf4:	e005      	b.n	8004c02 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d106      	bne.n	8004c22 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7fd f85f 	bl	8001ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2202      	movs	r2, #2
 8004c26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c38:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c42:	d902      	bls.n	8004c4a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c44:	2300      	movs	r3, #0
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	e002      	b.n	8004c50 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c4e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c58:	d007      	beq.n	8004c6a <HAL_SPI_Init+0xa0>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c62:	d002      	beq.n	8004c6a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cac:	ea42 0103 	orr.w	r1, r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	f003 0204 	and.w	r2, r3, #4
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	f003 0310 	and.w	r3, r3, #16
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ce6:	ea42 0103 	orr.w	r1, r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	603b      	str	r3, [r7, #0]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <HAL_SPI_Transmit+0x22>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e158      	b.n	8004fe4 <HAL_SPI_Transmit+0x2d4>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d3a:	f7fd fcdf 	bl	80026fc <HAL_GetTick>
 8004d3e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d40:	88fb      	ldrh	r3, [r7, #6]
 8004d42:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d002      	beq.n	8004d56 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d50:	2302      	movs	r3, #2
 8004d52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d54:	e13d      	b.n	8004fd2 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <HAL_SPI_Transmit+0x52>
 8004d5c:	88fb      	ldrh	r3, [r7, #6]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d102      	bne.n	8004d68 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d66:	e134      	b.n	8004fd2 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2203      	movs	r2, #3
 8004d6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	88fa      	ldrh	r2, [r7, #6]
 8004d80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	88fa      	ldrh	r2, [r7, #6]
 8004d86:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db2:	d10f      	bne.n	8004dd4 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dd2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dde:	2b40      	cmp	r3, #64	; 0x40
 8004de0:	d007      	beq.n	8004df2 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004df0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dfa:	d94b      	bls.n	8004e94 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <HAL_SPI_Transmit+0xfa>
 8004e04:	8afb      	ldrh	r3, [r7, #22]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d13e      	bne.n	8004e88 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	881a      	ldrh	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1a:	1c9a      	adds	r2, r3, #2
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e2e:	e02b      	b.n	8004e88 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d112      	bne.n	8004e64 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e42:	881a      	ldrh	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4e:	1c9a      	adds	r2, r3, #2
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e62:	e011      	b.n	8004e88 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e64:	f7fd fc4a 	bl	80026fc <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d803      	bhi.n	8004e7c <HAL_SPI_Transmit+0x16c>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7a:	d102      	bne.n	8004e82 <HAL_SPI_Transmit+0x172>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d102      	bne.n	8004e88 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e86:	e0a4      	b.n	8004fd2 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1ce      	bne.n	8004e30 <HAL_SPI_Transmit+0x120>
 8004e92:	e07c      	b.n	8004f8e <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <HAL_SPI_Transmit+0x192>
 8004e9c:	8afb      	ldrh	r3, [r7, #22]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d170      	bne.n	8004f84 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d912      	bls.n	8004ed2 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	881a      	ldrh	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	1c9a      	adds	r2, r3, #2
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b02      	subs	r3, #2
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ed0:	e058      	b.n	8004f84 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	330c      	adds	r3, #12
 8004edc:	7812      	ldrb	r2, [r2, #0]
 8004ede:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004ef8:	e044      	b.n	8004f84 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d12b      	bne.n	8004f60 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d912      	bls.n	8004f38 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	881a      	ldrh	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f22:	1c9a      	adds	r2, r3, #2
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b02      	subs	r3, #2
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f36:	e025      	b.n	8004f84 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	330c      	adds	r3, #12
 8004f42:	7812      	ldrb	r2, [r2, #0]
 8004f44:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f5e:	e011      	b.n	8004f84 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f60:	f7fd fbcc 	bl	80026fc <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d803      	bhi.n	8004f78 <HAL_SPI_Transmit+0x268>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f76:	d102      	bne.n	8004f7e <HAL_SPI_Transmit+0x26e>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d102      	bne.n	8004f84 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f82:	e026      	b.n	8004fd2 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1b5      	bne.n	8004efa <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	6839      	ldr	r1, [r7, #0]
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fce4 	bl	8005960 <SPI_EndRxTxTransaction>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10a      	bne.n	8004fc2 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fac:	2300      	movs	r3, #0
 8004fae:	613b      	str	r3, [r7, #16]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	613b      	str	r3, [r7, #16]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	77fb      	strb	r3, [r7, #31]
 8004fce:	e000      	b.n	8004fd2 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004fd0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fe2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3720      	adds	r7, #32
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b088      	sub	sp, #32
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005008:	d112      	bne.n	8005030 <HAL_SPI_Receive+0x44>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10e      	bne.n	8005030 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2204      	movs	r2, #4
 8005016:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800501a:	88fa      	ldrh	r2, [r7, #6]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	4613      	mov	r3, r2
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f910 	bl	800524c <HAL_SPI_TransmitReceive>
 800502c:	4603      	mov	r3, r0
 800502e:	e109      	b.n	8005244 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_SPI_Receive+0x52>
 800503a:	2302      	movs	r3, #2
 800503c:	e102      	b.n	8005244 <HAL_SPI_Receive+0x258>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005046:	f7fd fb59 	bl	80026fc <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b01      	cmp	r3, #1
 8005056:	d002      	beq.n	800505e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005058:	2302      	movs	r3, #2
 800505a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800505c:	e0e9      	b.n	8005232 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <HAL_SPI_Receive+0x7e>
 8005064:	88fb      	ldrh	r3, [r7, #6]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d102      	bne.n	8005070 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800506e:	e0e0      	b.n	8005232 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2204      	movs	r2, #4
 8005074:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	88fa      	ldrh	r2, [r7, #6]
 8005088:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	88fa      	ldrh	r2, [r7, #6]
 8005090:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050ba:	d908      	bls.n	80050ce <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050ca:	605a      	str	r2, [r3, #4]
 80050cc:	e007      	b.n	80050de <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050dc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e6:	d10f      	bne.n	8005108 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005106:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	2b40      	cmp	r3, #64	; 0x40
 8005114:	d007      	beq.n	8005126 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005124:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800512e:	d867      	bhi.n	8005200 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005130:	e030      	b.n	8005194 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b01      	cmp	r3, #1
 800513e:	d117      	bne.n	8005170 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f103 020c 	add.w	r2, r3, #12
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514c:	7812      	ldrb	r2, [r2, #0]
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005162:	b29b      	uxth	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b29a      	uxth	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800516e:	e011      	b.n	8005194 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005170:	f7fd fac4 	bl	80026fc <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d803      	bhi.n	8005188 <HAL_SPI_Receive+0x19c>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005186:	d102      	bne.n	800518e <HAL_SPI_Receive+0x1a2>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d102      	bne.n	8005194 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005192:	e04e      	b.n	8005232 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1c8      	bne.n	8005132 <HAL_SPI_Receive+0x146>
 80051a0:	e034      	b.n	800520c <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d115      	bne.n	80051dc <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	b292      	uxth	r2, r2
 80051bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	1c9a      	adds	r2, r3, #2
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80051da:	e011      	b.n	8005200 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051dc:	f7fd fa8e 	bl	80026fc <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d803      	bhi.n	80051f4 <HAL_SPI_Receive+0x208>
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f2:	d102      	bne.n	80051fa <HAL_SPI_Receive+0x20e>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d102      	bne.n	8005200 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80051fe:	e018      	b.n	8005232 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1ca      	bne.n	80051a2 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	6839      	ldr	r1, [r7, #0]
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 fb4d 	bl	80058b0 <SPI_EndRxTransaction>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	75fb      	strb	r3, [r7, #23]
 800522e:	e000      	b.n	8005232 <HAL_SPI_Receive+0x246>
  }

error :
 8005230:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005242:	7dfb      	ldrb	r3, [r7, #23]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08a      	sub	sp, #40	; 0x28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800525a:	2301      	movs	r3, #1
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <HAL_SPI_TransmitReceive+0x26>
 800526e:	2302      	movs	r3, #2
 8005270:	e1fb      	b.n	800566a <HAL_SPI_TransmitReceive+0x41e>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800527a:	f7fd fa3f 	bl	80026fc <HAL_GetTick>
 800527e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005286:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800528e:	887b      	ldrh	r3, [r7, #2]
 8005290:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005292:	887b      	ldrh	r3, [r7, #2]
 8005294:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005296:	7efb      	ldrb	r3, [r7, #27]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d00e      	beq.n	80052ba <HAL_SPI_TransmitReceive+0x6e>
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052a2:	d106      	bne.n	80052b2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d102      	bne.n	80052b2 <HAL_SPI_TransmitReceive+0x66>
 80052ac:	7efb      	ldrb	r3, [r7, #27]
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d003      	beq.n	80052ba <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80052b2:	2302      	movs	r3, #2
 80052b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80052b8:	e1cd      	b.n	8005656 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <HAL_SPI_TransmitReceive+0x80>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_SPI_TransmitReceive+0x80>
 80052c6:	887b      	ldrh	r3, [r7, #2]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d103      	bne.n	80052d4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80052d2:	e1c0      	b.n	8005656 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d003      	beq.n	80052e8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2205      	movs	r2, #5
 80052e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	887a      	ldrh	r2, [r7, #2]
 80052f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	887a      	ldrh	r2, [r7, #2]
 8005300:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	887a      	ldrh	r2, [r7, #2]
 800530e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	887a      	ldrh	r2, [r7, #2]
 8005314:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800532a:	d802      	bhi.n	8005332 <HAL_SPI_TransmitReceive+0xe6>
 800532c:	8a3b      	ldrh	r3, [r7, #16]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d908      	bls.n	8005344 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005340:	605a      	str	r2, [r3, #4]
 8005342:	e007      	b.n	8005354 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005352:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535e:	2b40      	cmp	r3, #64	; 0x40
 8005360:	d007      	beq.n	8005372 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005370:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800537a:	d97c      	bls.n	8005476 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <HAL_SPI_TransmitReceive+0x13e>
 8005384:	8a7b      	ldrh	r3, [r7, #18]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d169      	bne.n	800545e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	881a      	ldrh	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	1c9a      	adds	r2, r3, #2
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053ae:	e056      	b.n	800545e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d11b      	bne.n	80053f6 <HAL_SPI_TransmitReceive+0x1aa>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d016      	beq.n	80053f6 <HAL_SPI_TransmitReceive+0x1aa>
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d113      	bne.n	80053f6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d2:	881a      	ldrh	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	1c9a      	adds	r2, r3, #2
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b01      	cmp	r3, #1
 8005402:	d11c      	bne.n	800543e <HAL_SPI_TransmitReceive+0x1f2>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d016      	beq.n	800543e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	b292      	uxth	r2, r2
 800541c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	1c9a      	adds	r2, r3, #2
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800542e:	b29b      	uxth	r3, r3
 8005430:	3b01      	subs	r3, #1
 8005432:	b29a      	uxth	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800543a:	2301      	movs	r3, #1
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800543e:	f7fd f95d 	bl	80026fc <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800544a:	429a      	cmp	r2, r3
 800544c:	d807      	bhi.n	800545e <HAL_SPI_TransmitReceive+0x212>
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005454:	d003      	beq.n	800545e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800545c:	e0fb      	b.n	8005656 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005462:	b29b      	uxth	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1a3      	bne.n	80053b0 <HAL_SPI_TransmitReceive+0x164>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d19d      	bne.n	80053b0 <HAL_SPI_TransmitReceive+0x164>
 8005474:	e0df      	b.n	8005636 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_SPI_TransmitReceive+0x23a>
 800547e:	8a7b      	ldrh	r3, [r7, #18]
 8005480:	2b01      	cmp	r3, #1
 8005482:	f040 80cb 	bne.w	800561c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800548a:	b29b      	uxth	r3, r3
 800548c:	2b01      	cmp	r3, #1
 800548e:	d912      	bls.n	80054b6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005494:	881a      	ldrh	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	1c9a      	adds	r2, r3, #2
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	3b02      	subs	r3, #2
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054b4:	e0b2      	b.n	800561c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	330c      	adds	r3, #12
 80054c0:	7812      	ldrb	r2, [r2, #0]
 80054c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054dc:	e09e      	b.n	800561c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d134      	bne.n	8005556 <HAL_SPI_TransmitReceive+0x30a>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d02f      	beq.n	8005556 <HAL_SPI_TransmitReceive+0x30a>
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d12c      	bne.n	8005556 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005500:	b29b      	uxth	r3, r3
 8005502:	2b01      	cmp	r3, #1
 8005504:	d912      	bls.n	800552c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	881a      	ldrh	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	1c9a      	adds	r2, r3, #2
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005520:	b29b      	uxth	r3, r3
 8005522:	3b02      	subs	r3, #2
 8005524:	b29a      	uxth	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	87da      	strh	r2, [r3, #62]	; 0x3e
 800552a:	e012      	b.n	8005552 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	330c      	adds	r3, #12
 8005536:	7812      	ldrb	r2, [r2, #0]
 8005538:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005548:	b29b      	uxth	r3, r3
 800554a:	3b01      	subs	r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b01      	cmp	r3, #1
 8005562:	d148      	bne.n	80055f6 <HAL_SPI_TransmitReceive+0x3aa>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d042      	beq.n	80055f6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b01      	cmp	r3, #1
 800557a:	d923      	bls.n	80055c4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	b292      	uxth	r2, r2
 8005588:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	1c9a      	adds	r2, r3, #2
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800559a:	b29b      	uxth	r3, r3
 800559c:	3b02      	subs	r3, #2
 800559e:	b29a      	uxth	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d81f      	bhi.n	80055f2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055c0:	605a      	str	r2, [r3, #4]
 80055c2:	e016      	b.n	80055f2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f103 020c 	add.w	r2, r3, #12
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	7812      	ldrb	r2, [r2, #0]
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055f2:	2301      	movs	r3, #1
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055f6:	f7fd f881 	bl	80026fc <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005602:	429a      	cmp	r2, r3
 8005604:	d803      	bhi.n	800560e <HAL_SPI_TransmitReceive+0x3c2>
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560c:	d102      	bne.n	8005614 <HAL_SPI_TransmitReceive+0x3c8>
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	2b00      	cmp	r3, #0
 8005612:	d103      	bne.n	800561c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800561a:	e01c      	b.n	8005656 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	f47f af5b 	bne.w	80054de <HAL_SPI_TransmitReceive+0x292>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800562e:	b29b      	uxth	r3, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	f47f af54 	bne.w	80054de <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005636:	69fa      	ldr	r2, [r7, #28]
 8005638:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 f990 	bl	8005960 <SPI_EndRxTxTransaction>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d006      	beq.n	8005654 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	661a      	str	r2, [r3, #96]	; 0x60
 8005652:	e000      	b.n	8005656 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005654:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005666:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800566a:	4618      	mov	r0, r3
 800566c:	3728      	adds	r7, #40	; 0x28
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
	...

08005674 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b088      	sub	sp, #32
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	603b      	str	r3, [r7, #0]
 8005680:	4613      	mov	r3, r2
 8005682:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005684:	f7fd f83a 	bl	80026fc <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568c:	1a9b      	subs	r3, r3, r2
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	4413      	add	r3, r2
 8005692:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005694:	f7fd f832 	bl	80026fc <HAL_GetTick>
 8005698:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800569a:	4b39      	ldr	r3, [pc, #228]	; (8005780 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	015b      	lsls	r3, r3, #5
 80056a0:	0d1b      	lsrs	r3, r3, #20
 80056a2:	69fa      	ldr	r2, [r7, #28]
 80056a4:	fb02 f303 	mul.w	r3, r2, r3
 80056a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056aa:	e054      	b.n	8005756 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b2:	d050      	beq.n	8005756 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056b4:	f7fd f822 	bl	80026fc <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d902      	bls.n	80056ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d13d      	bne.n	8005746 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056e2:	d111      	bne.n	8005708 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ec:	d004      	beq.n	80056f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f6:	d107      	bne.n	8005708 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005706:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005710:	d10f      	bne.n	8005732 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005730:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e017      	b.n	8005776 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	3b01      	subs	r3, #1
 8005754:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4013      	ands	r3, r2
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	429a      	cmp	r2, r3
 8005764:	bf0c      	ite	eq
 8005766:	2301      	moveq	r3, #1
 8005768:	2300      	movne	r3, #0
 800576a:	b2db      	uxtb	r3, r3
 800576c:	461a      	mov	r2, r3
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	429a      	cmp	r2, r3
 8005772:	d19b      	bne.n	80056ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3720      	adds	r7, #32
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	200000b8 	.word	0x200000b8

08005784 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08a      	sub	sp, #40	; 0x28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005796:	f7fc ffb1 	bl	80026fc <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	1a9b      	subs	r3, r3, r2
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	4413      	add	r3, r2
 80057a4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80057a6:	f7fc ffa9 	bl	80026fc <HAL_GetTick>
 80057aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	330c      	adds	r3, #12
 80057b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80057b4:	4b3d      	ldr	r3, [pc, #244]	; (80058ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	4613      	mov	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	00da      	lsls	r2, r3, #3
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	0d1b      	lsrs	r3, r3, #20
 80057c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c6:	fb02 f303 	mul.w	r3, r2, r3
 80057ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80057cc:	e060      	b.n	8005890 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80057d4:	d107      	bne.n	80057e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d104      	bne.n	80057e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80057e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ec:	d050      	beq.n	8005890 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057ee:	f7fc ff85 	bl	80026fc <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d902      	bls.n	8005804 <SPI_WaitFifoStateUntilTimeout+0x80>
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	2b00      	cmp	r3, #0
 8005802:	d13d      	bne.n	8005880 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005812:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800581c:	d111      	bne.n	8005842 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005826:	d004      	beq.n	8005832 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005830:	d107      	bne.n	8005842 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005840:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800584a:	d10f      	bne.n	800586c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800586a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e010      	b.n	80058a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	3b01      	subs	r3, #1
 800588e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689a      	ldr	r2, [r3, #8]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	4013      	ands	r3, r2
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	429a      	cmp	r2, r3
 800589e:	d196      	bne.n	80057ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3728      	adds	r7, #40	; 0x28
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	200000b8 	.word	0x200000b8

080058b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058c4:	d111      	bne.n	80058ea <SPI_EndRxTransaction+0x3a>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ce:	d004      	beq.n	80058da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058d8:	d107      	bne.n	80058ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2200      	movs	r2, #0
 80058f2:	2180      	movs	r1, #128	; 0x80
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f7ff febd 	bl	8005674 <SPI_WaitFlagStateUntilTimeout>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d007      	beq.n	8005910 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005904:	f043 0220 	orr.w	r2, r3, #32
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e023      	b.n	8005958 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005918:	d11d      	bne.n	8005956 <SPI_EndRxTransaction+0xa6>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005922:	d004      	beq.n	800592e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800592c:	d113      	bne.n	8005956 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2200      	movs	r2, #0
 8005936:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f7ff ff22 	bl	8005784 <SPI_WaitFifoStateUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800594a:	f043 0220 	orr.w	r2, r3, #32
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e000      	b.n	8005958 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af02      	add	r7, sp, #8
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2200      	movs	r2, #0
 8005974:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f7ff ff03 	bl	8005784 <SPI_WaitFifoStateUntilTimeout>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d007      	beq.n	8005994 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005988:	f043 0220 	orr.w	r2, r3, #32
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e027      	b.n	80059e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2200      	movs	r2, #0
 800599c:	2180      	movs	r1, #128	; 0x80
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f7ff fe68 	bl	8005674 <SPI_WaitFlagStateUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d007      	beq.n	80059ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ae:	f043 0220 	orr.w	r2, r3, #32
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e014      	b.n	80059e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f7ff fedc 	bl	8005784 <SPI_WaitFifoStateUntilTimeout>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d007      	beq.n	80059e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d6:	f043 0220 	orr.w	r2, r3, #32
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e000      	b.n	80059e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e049      	b.n	8005a92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d106      	bne.n	8005a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7fc fd08 	bl	8002428 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3304      	adds	r3, #4
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	f000 fcf0 	bl	8006410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
	...

08005a9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d001      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e03b      	b.n	8005b2c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68da      	ldr	r2, [r3, #12]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a19      	ldr	r2, [pc, #100]	; (8005b38 <HAL_TIM_Base_Start_IT+0x9c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d009      	beq.n	8005aea <HAL_TIM_Base_Start_IT+0x4e>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ade:	d004      	beq.n	8005aea <HAL_TIM_Base_Start_IT+0x4e>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a15      	ldr	r2, [pc, #84]	; (8005b3c <HAL_TIM_Base_Start_IT+0xa0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d115      	bne.n	8005b16 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	4b13      	ldr	r3, [pc, #76]	; (8005b40 <HAL_TIM_Base_Start_IT+0xa4>)
 8005af2:	4013      	ands	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b06      	cmp	r3, #6
 8005afa:	d015      	beq.n	8005b28 <HAL_TIM_Base_Start_IT+0x8c>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b02:	d011      	beq.n	8005b28 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0201 	orr.w	r2, r2, #1
 8005b12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b14:	e008      	b.n	8005b28 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f042 0201 	orr.w	r2, r2, #1
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	e000      	b.n	8005b2a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	40012c00 	.word	0x40012c00
 8005b3c:	40014000 	.word	0x40014000
 8005b40:	00010007 	.word	0x00010007

08005b44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e049      	b.n	8005bea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d106      	bne.n	8005b70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f841 	bl	8005bf2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3304      	adds	r3, #4
 8005b80:	4619      	mov	r1, r3
 8005b82:	4610      	mov	r0, r2
 8005b84:	f000 fc44 	bl	8006410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
	...

08005c08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d109      	bne.n	8005c2c <HAL_TIM_PWM_Start+0x24>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	bf14      	ite	ne
 8005c24:	2301      	movne	r3, #1
 8005c26:	2300      	moveq	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	e03c      	b.n	8005ca6 <HAL_TIM_PWM_Start+0x9e>
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d109      	bne.n	8005c46 <HAL_TIM_PWM_Start+0x3e>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	bf14      	ite	ne
 8005c3e:	2301      	movne	r3, #1
 8005c40:	2300      	moveq	r3, #0
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	e02f      	b.n	8005ca6 <HAL_TIM_PWM_Start+0x9e>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d109      	bne.n	8005c60 <HAL_TIM_PWM_Start+0x58>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	bf14      	ite	ne
 8005c58:	2301      	movne	r3, #1
 8005c5a:	2300      	moveq	r3, #0
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	e022      	b.n	8005ca6 <HAL_TIM_PWM_Start+0x9e>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	2b0c      	cmp	r3, #12
 8005c64:	d109      	bne.n	8005c7a <HAL_TIM_PWM_Start+0x72>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	bf14      	ite	ne
 8005c72:	2301      	movne	r3, #1
 8005c74:	2300      	moveq	r3, #0
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	e015      	b.n	8005ca6 <HAL_TIM_PWM_Start+0x9e>
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b10      	cmp	r3, #16
 8005c7e:	d109      	bne.n	8005c94 <HAL_TIM_PWM_Start+0x8c>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	bf14      	ite	ne
 8005c8c:	2301      	movne	r3, #1
 8005c8e:	2300      	moveq	r3, #0
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	e008      	b.n	8005ca6 <HAL_TIM_PWM_Start+0x9e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	bf14      	ite	ne
 8005ca0:	2301      	movne	r3, #1
 8005ca2:	2300      	moveq	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e07e      	b.n	8005dac <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d104      	bne.n	8005cbe <HAL_TIM_PWM_Start+0xb6>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cbc:	e023      	b.n	8005d06 <HAL_TIM_PWM_Start+0xfe>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	d104      	bne.n	8005cce <HAL_TIM_PWM_Start+0xc6>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ccc:	e01b      	b.n	8005d06 <HAL_TIM_PWM_Start+0xfe>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d104      	bne.n	8005cde <HAL_TIM_PWM_Start+0xd6>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cdc:	e013      	b.n	8005d06 <HAL_TIM_PWM_Start+0xfe>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b0c      	cmp	r3, #12
 8005ce2:	d104      	bne.n	8005cee <HAL_TIM_PWM_Start+0xe6>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cec:	e00b      	b.n	8005d06 <HAL_TIM_PWM_Start+0xfe>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b10      	cmp	r3, #16
 8005cf2:	d104      	bne.n	8005cfe <HAL_TIM_PWM_Start+0xf6>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cfc:	e003      	b.n	8005d06 <HAL_TIM_PWM_Start+0xfe>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2202      	movs	r2, #2
 8005d02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	6839      	ldr	r1, [r7, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fefa 	bl	8006b08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a26      	ldr	r2, [pc, #152]	; (8005db4 <HAL_TIM_PWM_Start+0x1ac>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d009      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x12a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a25      	ldr	r2, [pc, #148]	; (8005db8 <HAL_TIM_PWM_Start+0x1b0>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d004      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x12a>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a23      	ldr	r2, [pc, #140]	; (8005dbc <HAL_TIM_PWM_Start+0x1b4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d101      	bne.n	8005d36 <HAL_TIM_PWM_Start+0x12e>
 8005d32:	2301      	movs	r3, #1
 8005d34:	e000      	b.n	8005d38 <HAL_TIM_PWM_Start+0x130>
 8005d36:	2300      	movs	r3, #0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d007      	beq.n	8005d4c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d4a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a18      	ldr	r2, [pc, #96]	; (8005db4 <HAL_TIM_PWM_Start+0x1ac>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d009      	beq.n	8005d6a <HAL_TIM_PWM_Start+0x162>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5e:	d004      	beq.n	8005d6a <HAL_TIM_PWM_Start+0x162>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a14      	ldr	r2, [pc, #80]	; (8005db8 <HAL_TIM_PWM_Start+0x1b0>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d115      	bne.n	8005d96 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	4b13      	ldr	r3, [pc, #76]	; (8005dc0 <HAL_TIM_PWM_Start+0x1b8>)
 8005d72:	4013      	ands	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b06      	cmp	r3, #6
 8005d7a:	d015      	beq.n	8005da8 <HAL_TIM_PWM_Start+0x1a0>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d82:	d011      	beq.n	8005da8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0201 	orr.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d94:	e008      	b.n	8005da8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f042 0201 	orr.w	r2, r2, #1
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	e000      	b.n	8005daa <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	40012c00 	.word	0x40012c00
 8005db8:	40014000 	.word	0x40014000
 8005dbc:	40014400 	.word	0x40014400
 8005dc0:	00010007 	.word	0x00010007

08005dc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d122      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d11b      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f06f 0202 	mvn.w	r2, #2
 8005df0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fae3 	bl	80063d2 <HAL_TIM_IC_CaptureCallback>
 8005e0c:	e005      	b.n	8005e1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fad5 	bl	80063be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fae6 	bl	80063e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d122      	bne.n	8005e74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d11b      	bne.n	8005e74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f06f 0204 	mvn.w	r2, #4
 8005e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fab9 	bl	80063d2 <HAL_TIM_IC_CaptureCallback>
 8005e60:	e005      	b.n	8005e6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 faab 	bl	80063be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fabc 	bl	80063e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f003 0308 	and.w	r3, r3, #8
 8005e7e:	2b08      	cmp	r3, #8
 8005e80:	d122      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f003 0308 	and.w	r3, r3, #8
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d11b      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f06f 0208 	mvn.w	r2, #8
 8005e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2204      	movs	r2, #4
 8005e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fa8f 	bl	80063d2 <HAL_TIM_IC_CaptureCallback>
 8005eb4:	e005      	b.n	8005ec2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fa81 	bl	80063be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fa92 	bl	80063e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f003 0310 	and.w	r3, r3, #16
 8005ed2:	2b10      	cmp	r3, #16
 8005ed4:	d122      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f003 0310 	and.w	r3, r3, #16
 8005ee0:	2b10      	cmp	r3, #16
 8005ee2:	d11b      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0210 	mvn.w	r2, #16
 8005eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2208      	movs	r2, #8
 8005ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fa65 	bl	80063d2 <HAL_TIM_IC_CaptureCallback>
 8005f08:	e005      	b.n	8005f16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fa57 	bl	80063be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fa68 	bl	80063e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d10e      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d107      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0201 	mvn.w	r2, #1
 8005f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fb fb94 	bl	8001670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f52:	2b80      	cmp	r3, #128	; 0x80
 8005f54:	d10e      	bne.n	8005f74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f60:	2b80      	cmp	r3, #128	; 0x80
 8005f62:	d107      	bne.n	8005f74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fed8 	bl	8006d24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f82:	d10e      	bne.n	8005fa2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8e:	2b80      	cmp	r3, #128	; 0x80
 8005f90:	d107      	bne.n	8005fa2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fecb 	bl	8006d38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fac:	2b40      	cmp	r3, #64	; 0x40
 8005fae:	d10e      	bne.n	8005fce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fba:	2b40      	cmp	r3, #64	; 0x40
 8005fbc:	d107      	bne.n	8005fce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 fa16 	bl	80063fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	f003 0320 	and.w	r3, r3, #32
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	d10e      	bne.n	8005ffa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f003 0320 	and.w	r3, r3, #32
 8005fe6:	2b20      	cmp	r3, #32
 8005fe8:	d107      	bne.n	8005ffa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f06f 0220 	mvn.w	r2, #32
 8005ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fe8b 	bl	8006d10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ffa:	bf00      	nop
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006010:	2300      	movs	r3, #0
 8006012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800601e:	2302      	movs	r3, #2
 8006020:	e0ff      	b.n	8006222 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b14      	cmp	r3, #20
 800602e:	f200 80f0 	bhi.w	8006212 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006032:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006038:	0800608d 	.word	0x0800608d
 800603c:	08006213 	.word	0x08006213
 8006040:	08006213 	.word	0x08006213
 8006044:	08006213 	.word	0x08006213
 8006048:	080060cd 	.word	0x080060cd
 800604c:	08006213 	.word	0x08006213
 8006050:	08006213 	.word	0x08006213
 8006054:	08006213 	.word	0x08006213
 8006058:	0800610f 	.word	0x0800610f
 800605c:	08006213 	.word	0x08006213
 8006060:	08006213 	.word	0x08006213
 8006064:	08006213 	.word	0x08006213
 8006068:	0800614f 	.word	0x0800614f
 800606c:	08006213 	.word	0x08006213
 8006070:	08006213 	.word	0x08006213
 8006074:	08006213 	.word	0x08006213
 8006078:	08006191 	.word	0x08006191
 800607c:	08006213 	.word	0x08006213
 8006080:	08006213 	.word	0x08006213
 8006084:	08006213 	.word	0x08006213
 8006088:	080061d1 	.word	0x080061d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68b9      	ldr	r1, [r7, #8]
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fa20 	bl	80064d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699a      	ldr	r2, [r3, #24]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0208 	orr.w	r2, r2, #8
 80060a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	699a      	ldr	r2, [r3, #24]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0204 	bic.w	r2, r2, #4
 80060b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6999      	ldr	r1, [r3, #24]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	691a      	ldr	r2, [r3, #16]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	619a      	str	r2, [r3, #24]
      break;
 80060ca:	e0a5      	b.n	8006218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68b9      	ldr	r1, [r7, #8]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 fa7c 	bl	80065d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	699a      	ldr	r2, [r3, #24]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6999      	ldr	r1, [r3, #24]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	021a      	lsls	r2, r3, #8
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	619a      	str	r2, [r3, #24]
      break;
 800610c:	e084      	b.n	8006218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68b9      	ldr	r1, [r7, #8]
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fad5 	bl	80066c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69da      	ldr	r2, [r3, #28]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0208 	orr.w	r2, r2, #8
 8006128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69da      	ldr	r2, [r3, #28]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0204 	bic.w	r2, r2, #4
 8006138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69d9      	ldr	r1, [r3, #28]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	61da      	str	r2, [r3, #28]
      break;
 800614c:	e064      	b.n	8006218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68b9      	ldr	r1, [r7, #8]
 8006154:	4618      	mov	r0, r3
 8006156:	f000 fb2d 	bl	80067b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69da      	ldr	r2, [r3, #28]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	69da      	ldr	r2, [r3, #28]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69d9      	ldr	r1, [r3, #28]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	021a      	lsls	r2, r3, #8
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	61da      	str	r2, [r3, #28]
      break;
 800618e:	e043      	b.n	8006218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68b9      	ldr	r1, [r7, #8]
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fb6a 	bl	8006870 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0208 	orr.w	r2, r2, #8
 80061aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0204 	bic.w	r2, r2, #4
 80061ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	691a      	ldr	r2, [r3, #16]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80061ce:	e023      	b.n	8006218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fba2 	bl	8006920 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	021a      	lsls	r2, r3, #8
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006210:	e002      	b.n	8006218 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	75fb      	strb	r3, [r7, #23]
      break;
 8006216:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006220:	7dfb      	ldrb	r3, [r7, #23]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop

0800622c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_TIM_ConfigClockSource+0x1c>
 8006244:	2302      	movs	r3, #2
 8006246:	e0b6      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x18a>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006266:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800626a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006272:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006284:	d03e      	beq.n	8006304 <HAL_TIM_ConfigClockSource+0xd8>
 8006286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800628a:	f200 8087 	bhi.w	800639c <HAL_TIM_ConfigClockSource+0x170>
 800628e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006292:	f000 8086 	beq.w	80063a2 <HAL_TIM_ConfigClockSource+0x176>
 8006296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800629a:	d87f      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x170>
 800629c:	2b70      	cmp	r3, #112	; 0x70
 800629e:	d01a      	beq.n	80062d6 <HAL_TIM_ConfigClockSource+0xaa>
 80062a0:	2b70      	cmp	r3, #112	; 0x70
 80062a2:	d87b      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x170>
 80062a4:	2b60      	cmp	r3, #96	; 0x60
 80062a6:	d050      	beq.n	800634a <HAL_TIM_ConfigClockSource+0x11e>
 80062a8:	2b60      	cmp	r3, #96	; 0x60
 80062aa:	d877      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x170>
 80062ac:	2b50      	cmp	r3, #80	; 0x50
 80062ae:	d03c      	beq.n	800632a <HAL_TIM_ConfigClockSource+0xfe>
 80062b0:	2b50      	cmp	r3, #80	; 0x50
 80062b2:	d873      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x170>
 80062b4:	2b40      	cmp	r3, #64	; 0x40
 80062b6:	d058      	beq.n	800636a <HAL_TIM_ConfigClockSource+0x13e>
 80062b8:	2b40      	cmp	r3, #64	; 0x40
 80062ba:	d86f      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x170>
 80062bc:	2b30      	cmp	r3, #48	; 0x30
 80062be:	d064      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x15e>
 80062c0:	2b30      	cmp	r3, #48	; 0x30
 80062c2:	d86b      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x170>
 80062c4:	2b20      	cmp	r3, #32
 80062c6:	d060      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x15e>
 80062c8:	2b20      	cmp	r3, #32
 80062ca:	d867      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x170>
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d05c      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x15e>
 80062d0:	2b10      	cmp	r3, #16
 80062d2:	d05a      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x15e>
 80062d4:	e062      	b.n	800639c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062e6:	f000 fbef 	bl	8006ac8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	609a      	str	r2, [r3, #8]
      break;
 8006302:	e04f      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006314:	f000 fbd8 	bl	8006ac8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006326:	609a      	str	r2, [r3, #8]
      break;
 8006328:	e03c      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006336:	461a      	mov	r2, r3
 8006338:	f000 fb4c 	bl	80069d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2150      	movs	r1, #80	; 0x50
 8006342:	4618      	mov	r0, r3
 8006344:	f000 fba5 	bl	8006a92 <TIM_ITRx_SetConfig>
      break;
 8006348:	e02c      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006356:	461a      	mov	r2, r3
 8006358:	f000 fb6b 	bl	8006a32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2160      	movs	r1, #96	; 0x60
 8006362:	4618      	mov	r0, r3
 8006364:	f000 fb95 	bl	8006a92 <TIM_ITRx_SetConfig>
      break;
 8006368:	e01c      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006376:	461a      	mov	r2, r3
 8006378:	f000 fb2c 	bl	80069d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2140      	movs	r1, #64	; 0x40
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fb85 	bl	8006a92 <TIM_ITRx_SetConfig>
      break;
 8006388:	e00c      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4619      	mov	r1, r3
 8006394:	4610      	mov	r0, r2
 8006396:	f000 fb7c 	bl	8006a92 <TIM_ITRx_SetConfig>
      break;
 800639a:	e003      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	73fb      	strb	r3, [r7, #15]
      break;
 80063a0:	e000      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80063a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b083      	sub	sp, #12
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006402:	bf00      	nop
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
	...

08006410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a2a      	ldr	r2, [pc, #168]	; (80064cc <TIM_Base_SetConfig+0xbc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d003      	beq.n	8006430 <TIM_Base_SetConfig+0x20>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800642e:	d108      	bne.n	8006442 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a21      	ldr	r2, [pc, #132]	; (80064cc <TIM_Base_SetConfig+0xbc>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d00b      	beq.n	8006462 <TIM_Base_SetConfig+0x52>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006450:	d007      	beq.n	8006462 <TIM_Base_SetConfig+0x52>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a1e      	ldr	r2, [pc, #120]	; (80064d0 <TIM_Base_SetConfig+0xc0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d003      	beq.n	8006462 <TIM_Base_SetConfig+0x52>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a1d      	ldr	r2, [pc, #116]	; (80064d4 <TIM_Base_SetConfig+0xc4>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d108      	bne.n	8006474 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	4313      	orrs	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	689a      	ldr	r2, [r3, #8]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a0c      	ldr	r2, [pc, #48]	; (80064cc <TIM_Base_SetConfig+0xbc>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d007      	beq.n	80064b0 <TIM_Base_SetConfig+0xa0>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a0b      	ldr	r2, [pc, #44]	; (80064d0 <TIM_Base_SetConfig+0xc0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d003      	beq.n	80064b0 <TIM_Base_SetConfig+0xa0>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a0a      	ldr	r2, [pc, #40]	; (80064d4 <TIM_Base_SetConfig+0xc4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d103      	bne.n	80064b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	691a      	ldr	r2, [r3, #16]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	615a      	str	r2, [r3, #20]
}
 80064be:	bf00      	nop
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	40012c00 	.word	0x40012c00
 80064d0:	40014000 	.word	0x40014000
 80064d4:	40014400 	.word	0x40014400

080064d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064d8:	b480      	push	{r7}
 80064da:	b087      	sub	sp, #28
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	f023 0201 	bic.w	r2, r3, #1
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0303 	bic.w	r3, r3, #3
 8006512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f023 0302 	bic.w	r3, r3, #2
 8006524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	4313      	orrs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a24      	ldr	r2, [pc, #144]	; (80065c4 <TIM_OC1_SetConfig+0xec>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d007      	beq.n	8006548 <TIM_OC1_SetConfig+0x70>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a23      	ldr	r2, [pc, #140]	; (80065c8 <TIM_OC1_SetConfig+0xf0>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d003      	beq.n	8006548 <TIM_OC1_SetConfig+0x70>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a22      	ldr	r2, [pc, #136]	; (80065cc <TIM_OC1_SetConfig+0xf4>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d10c      	bne.n	8006562 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f023 0308 	bic.w	r3, r3, #8
 800654e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	4313      	orrs	r3, r2
 8006558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f023 0304 	bic.w	r3, r3, #4
 8006560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a17      	ldr	r2, [pc, #92]	; (80065c4 <TIM_OC1_SetConfig+0xec>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d007      	beq.n	800657a <TIM_OC1_SetConfig+0xa2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a16      	ldr	r2, [pc, #88]	; (80065c8 <TIM_OC1_SetConfig+0xf0>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d003      	beq.n	800657a <TIM_OC1_SetConfig+0xa2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a15      	ldr	r2, [pc, #84]	; (80065cc <TIM_OC1_SetConfig+0xf4>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d111      	bne.n	800659e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	4313      	orrs	r3, r2
 8006592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	621a      	str	r2, [r3, #32]
}
 80065b8:	bf00      	nop
 80065ba:	371c      	adds	r7, #28
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	40012c00 	.word	0x40012c00
 80065c8:	40014000 	.word	0x40014000
 80065cc:	40014400 	.word	0x40014400

080065d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f023 0210 	bic.w	r2, r3, #16
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800660a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	021b      	lsls	r3, r3, #8
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4313      	orrs	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f023 0320 	bic.w	r3, r3, #32
 800661e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4313      	orrs	r3, r2
 800662a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a22      	ldr	r2, [pc, #136]	; (80066b8 <TIM_OC2_SetConfig+0xe8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d10d      	bne.n	8006650 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800663a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	011b      	lsls	r3, r3, #4
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	4313      	orrs	r3, r2
 8006646:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800664e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a19      	ldr	r2, [pc, #100]	; (80066b8 <TIM_OC2_SetConfig+0xe8>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d007      	beq.n	8006668 <TIM_OC2_SetConfig+0x98>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a18      	ldr	r2, [pc, #96]	; (80066bc <TIM_OC2_SetConfig+0xec>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d003      	beq.n	8006668 <TIM_OC2_SetConfig+0x98>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a17      	ldr	r2, [pc, #92]	; (80066c0 <TIM_OC2_SetConfig+0xf0>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d113      	bne.n	8006690 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800666e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006676:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	4313      	orrs	r3, r2
 8006682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	4313      	orrs	r3, r2
 800668e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	621a      	str	r2, [r3, #32]
}
 80066aa:	bf00      	nop
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	40012c00 	.word	0x40012c00
 80066bc:	40014000 	.word	0x40014000
 80066c0:	40014400 	.word	0x40014400

080066c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0303 	bic.w	r3, r3, #3
 80066fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	4313      	orrs	r3, r2
 800671c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a21      	ldr	r2, [pc, #132]	; (80067a8 <TIM_OC3_SetConfig+0xe4>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d10d      	bne.n	8006742 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800672c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	021b      	lsls	r3, r3, #8
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	4313      	orrs	r3, r2
 8006738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a18      	ldr	r2, [pc, #96]	; (80067a8 <TIM_OC3_SetConfig+0xe4>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d007      	beq.n	800675a <TIM_OC3_SetConfig+0x96>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a17      	ldr	r2, [pc, #92]	; (80067ac <TIM_OC3_SetConfig+0xe8>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d003      	beq.n	800675a <TIM_OC3_SetConfig+0x96>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a16      	ldr	r2, [pc, #88]	; (80067b0 <TIM_OC3_SetConfig+0xec>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d113      	bne.n	8006782 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	011b      	lsls	r3, r3, #4
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	4313      	orrs	r3, r2
 8006780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	621a      	str	r2, [r3, #32]
}
 800679c:	bf00      	nop
 800679e:	371c      	adds	r7, #28
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr
 80067a8:	40012c00 	.word	0x40012c00
 80067ac:	40014000 	.word	0x40014000
 80067b0:	40014400 	.word	0x40014400

080067b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	021b      	lsls	r3, r3, #8
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006802:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	031b      	lsls	r3, r3, #12
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	4313      	orrs	r3, r2
 800680e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a14      	ldr	r2, [pc, #80]	; (8006864 <TIM_OC4_SetConfig+0xb0>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d007      	beq.n	8006828 <TIM_OC4_SetConfig+0x74>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a13      	ldr	r2, [pc, #76]	; (8006868 <TIM_OC4_SetConfig+0xb4>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d003      	beq.n	8006828 <TIM_OC4_SetConfig+0x74>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a12      	ldr	r2, [pc, #72]	; (800686c <TIM_OC4_SetConfig+0xb8>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d109      	bne.n	800683c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800682e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	019b      	lsls	r3, r3, #6
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4313      	orrs	r3, r2
 800683a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	621a      	str	r2, [r3, #32]
}
 8006856:	bf00      	nop
 8006858:	371c      	adds	r7, #28
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	40012c00 	.word	0x40012c00
 8006868:	40014000 	.word	0x40014000
 800686c:	40014400 	.word	0x40014400

08006870 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800689e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80068b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	041b      	lsls	r3, r3, #16
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a13      	ldr	r2, [pc, #76]	; (8006914 <TIM_OC5_SetConfig+0xa4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d007      	beq.n	80068da <TIM_OC5_SetConfig+0x6a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a12      	ldr	r2, [pc, #72]	; (8006918 <TIM_OC5_SetConfig+0xa8>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d003      	beq.n	80068da <TIM_OC5_SetConfig+0x6a>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a11      	ldr	r2, [pc, #68]	; (800691c <TIM_OC5_SetConfig+0xac>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d109      	bne.n	80068ee <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	021b      	lsls	r3, r3, #8
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	621a      	str	r2, [r3, #32]
}
 8006908:	bf00      	nop
 800690a:	371c      	adds	r7, #28
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	40012c00 	.word	0x40012c00
 8006918:	40014000 	.word	0x40014000
 800691c:	40014400 	.word	0x40014400

08006920 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800694e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	021b      	lsls	r3, r3, #8
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	051b      	lsls	r3, r3, #20
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a14      	ldr	r2, [pc, #80]	; (80069c8 <TIM_OC6_SetConfig+0xa8>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d007      	beq.n	800698c <TIM_OC6_SetConfig+0x6c>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a13      	ldr	r2, [pc, #76]	; (80069cc <TIM_OC6_SetConfig+0xac>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d003      	beq.n	800698c <TIM_OC6_SetConfig+0x6c>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a12      	ldr	r2, [pc, #72]	; (80069d0 <TIM_OC6_SetConfig+0xb0>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d109      	bne.n	80069a0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006992:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	029b      	lsls	r3, r3, #10
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	4313      	orrs	r3, r2
 800699e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	621a      	str	r2, [r3, #32]
}
 80069ba:	bf00      	nop
 80069bc:	371c      	adds	r7, #28
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	40012c00 	.word	0x40012c00
 80069cc:	40014000 	.word	0x40014000
 80069d0:	40014400 	.word	0x40014400

080069d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	f023 0201 	bic.w	r2, r3, #1
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f023 030a 	bic.w	r3, r3, #10
 8006a10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	621a      	str	r2, [r3, #32]
}
 8006a26:	bf00      	nop
 8006a28:	371c      	adds	r7, #28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b087      	sub	sp, #28
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	f023 0210 	bic.w	r2, r3, #16
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	031b      	lsls	r3, r3, #12
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	621a      	str	r2, [r3, #32]
}
 8006a86:	bf00      	nop
 8006a88:	371c      	adds	r7, #28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b085      	sub	sp, #20
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	f043 0307 	orr.w	r3, r3, #7
 8006ab4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	609a      	str	r2, [r3, #8]
}
 8006abc:	bf00      	nop
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ae2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	021a      	lsls	r2, r3, #8
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	431a      	orrs	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	609a      	str	r2, [r3, #8]
}
 8006afc:	bf00      	nop
 8006afe:	371c      	adds	r7, #28
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f003 031f 	and.w	r3, r3, #31
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6a1a      	ldr	r2, [r3, #32]
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	43db      	mvns	r3, r3
 8006b2a:	401a      	ands	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a1a      	ldr	r2, [r3, #32]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f003 031f 	and.w	r3, r3, #31
 8006b3a:	6879      	ldr	r1, [r7, #4]
 8006b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b40:	431a      	orrs	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	621a      	str	r2, [r3, #32]
}
 8006b46:	bf00      	nop
 8006b48:	371c      	adds	r7, #28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
	...

08006b54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d101      	bne.n	8006b6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	e04f      	b.n	8006c0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2202      	movs	r2, #2
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a21      	ldr	r2, [pc, #132]	; (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d108      	bne.n	8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a14      	ldr	r2, [pc, #80]	; (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d009      	beq.n	8006be0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd4:	d004      	beq.n	8006be0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a10      	ldr	r2, [pc, #64]	; (8006c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d10c      	bne.n	8006bfa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006be6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	40012c00 	.word	0x40012c00
 8006c1c:	40014000 	.word	0x40014000

08006c20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d101      	bne.n	8006c3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	e060      	b.n	8006cfe <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	041b      	lsls	r3, r3, #16
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a14      	ldr	r2, [pc, #80]	; (8006d0c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d115      	bne.n	8006cec <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	051b      	lsls	r3, r3, #20
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40012c00 	.word	0x40012c00

08006d10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e040      	b.n	8006de0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d106      	bne.n	8006d74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7fb fc16 	bl	80025a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2224      	movs	r2, #36	; 0x24
 8006d78:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 0201 	bic.w	r2, r2, #1
 8006d88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f8c0 	bl	8006f10 <UART_SetConfig>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d101      	bne.n	8006d9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e022      	b.n	8006de0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fae0 	bl	8007368 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006db6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689a      	ldr	r2, [r3, #8]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fb67 	bl	80074ac <UART_CheckIdleState>
 8006dde:	4603      	mov	r3, r0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b08a      	sub	sp, #40	; 0x28
 8006dec:	af02      	add	r7, sp, #8
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	4613      	mov	r3, r2
 8006df6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dfc:	2b20      	cmp	r3, #32
 8006dfe:	f040 8082 	bne.w	8006f06 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d002      	beq.n	8006e0e <HAL_UART_Transmit+0x26>
 8006e08:	88fb      	ldrh	r3, [r7, #6]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e07a      	b.n	8006f08 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d101      	bne.n	8006e20 <HAL_UART_Transmit+0x38>
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	e073      	b.n	8006f08 <HAL_UART_Transmit+0x120>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2221      	movs	r2, #33	; 0x21
 8006e34:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e36:	f7fb fc61 	bl	80026fc <HAL_GetTick>
 8006e3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	88fa      	ldrh	r2, [r7, #6]
 8006e40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	88fa      	ldrh	r2, [r7, #6]
 8006e48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e54:	d108      	bne.n	8006e68 <HAL_UART_Transmit+0x80>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d104      	bne.n	8006e68 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	61bb      	str	r3, [r7, #24]
 8006e66:	e003      	b.n	8006e70 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006e78:	e02d      	b.n	8006ed6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2200      	movs	r2, #0
 8006e82:	2180      	movs	r1, #128	; 0x80
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f000 fb5a 	bl	800753e <UART_WaitOnFlagUntilTimeout>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e039      	b.n	8006f08 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10b      	bne.n	8006eb2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	881a      	ldrh	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ea6:	b292      	uxth	r2, r2
 8006ea8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	3302      	adds	r3, #2
 8006eae:	61bb      	str	r3, [r7, #24]
 8006eb0:	e008      	b.n	8006ec4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	781a      	ldrb	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	b292      	uxth	r2, r2
 8006ebc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1cb      	bne.n	8006e7a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2140      	movs	r1, #64	; 0x40
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 fb26 	bl	800753e <UART_WaitOnFlagUntilTimeout>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e005      	b.n	8006f08 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2220      	movs	r2, #32
 8006f00:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006f02:	2300      	movs	r3, #0
 8006f04:	e000      	b.n	8006f08 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006f06:	2302      	movs	r3, #2
  }
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3720      	adds	r7, #32
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f14:	b08a      	sub	sp, #40	; 0x28
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	4bb4      	ldr	r3, [pc, #720]	; (8007210 <UART_SetConfig+0x300>)
 8006f40:	4013      	ands	r3, r2
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	6812      	ldr	r2, [r2, #0]
 8006f46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4aa9      	ldr	r2, [pc, #676]	; (8007214 <UART_SetConfig+0x304>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d004      	beq.n	8006f7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4aa0      	ldr	r2, [pc, #640]	; (8007218 <UART_SetConfig+0x308>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d126      	bne.n	8006fe8 <UART_SetConfig+0xd8>
 8006f9a:	4ba0      	ldr	r3, [pc, #640]	; (800721c <UART_SetConfig+0x30c>)
 8006f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa0:	f003 0303 	and.w	r3, r3, #3
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d81b      	bhi.n	8006fe0 <UART_SetConfig+0xd0>
 8006fa8:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <UART_SetConfig+0xa0>)
 8006faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fae:	bf00      	nop
 8006fb0:	08006fc1 	.word	0x08006fc1
 8006fb4:	08006fd1 	.word	0x08006fd1
 8006fb8:	08006fc9 	.word	0x08006fc9
 8006fbc:	08006fd9 	.word	0x08006fd9
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fc6:	e080      	b.n	80070ca <UART_SetConfig+0x1ba>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fce:	e07c      	b.n	80070ca <UART_SetConfig+0x1ba>
 8006fd0:	2304      	movs	r3, #4
 8006fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fd6:	e078      	b.n	80070ca <UART_SetConfig+0x1ba>
 8006fd8:	2308      	movs	r3, #8
 8006fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fde:	e074      	b.n	80070ca <UART_SetConfig+0x1ba>
 8006fe0:	2310      	movs	r3, #16
 8006fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fe6:	e070      	b.n	80070ca <UART_SetConfig+0x1ba>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a8c      	ldr	r2, [pc, #560]	; (8007220 <UART_SetConfig+0x310>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d138      	bne.n	8007064 <UART_SetConfig+0x154>
 8006ff2:	4b8a      	ldr	r3, [pc, #552]	; (800721c <UART_SetConfig+0x30c>)
 8006ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff8:	f003 030c 	and.w	r3, r3, #12
 8006ffc:	2b0c      	cmp	r3, #12
 8006ffe:	d82d      	bhi.n	800705c <UART_SetConfig+0x14c>
 8007000:	a201      	add	r2, pc, #4	; (adr r2, 8007008 <UART_SetConfig+0xf8>)
 8007002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007006:	bf00      	nop
 8007008:	0800703d 	.word	0x0800703d
 800700c:	0800705d 	.word	0x0800705d
 8007010:	0800705d 	.word	0x0800705d
 8007014:	0800705d 	.word	0x0800705d
 8007018:	0800704d 	.word	0x0800704d
 800701c:	0800705d 	.word	0x0800705d
 8007020:	0800705d 	.word	0x0800705d
 8007024:	0800705d 	.word	0x0800705d
 8007028:	08007045 	.word	0x08007045
 800702c:	0800705d 	.word	0x0800705d
 8007030:	0800705d 	.word	0x0800705d
 8007034:	0800705d 	.word	0x0800705d
 8007038:	08007055 	.word	0x08007055
 800703c:	2300      	movs	r3, #0
 800703e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007042:	e042      	b.n	80070ca <UART_SetConfig+0x1ba>
 8007044:	2302      	movs	r3, #2
 8007046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800704a:	e03e      	b.n	80070ca <UART_SetConfig+0x1ba>
 800704c:	2304      	movs	r3, #4
 800704e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007052:	e03a      	b.n	80070ca <UART_SetConfig+0x1ba>
 8007054:	2308      	movs	r3, #8
 8007056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800705a:	e036      	b.n	80070ca <UART_SetConfig+0x1ba>
 800705c:	2310      	movs	r3, #16
 800705e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007062:	e032      	b.n	80070ca <UART_SetConfig+0x1ba>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a6a      	ldr	r2, [pc, #424]	; (8007214 <UART_SetConfig+0x304>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d12a      	bne.n	80070c4 <UART_SetConfig+0x1b4>
 800706e:	4b6b      	ldr	r3, [pc, #428]	; (800721c <UART_SetConfig+0x30c>)
 8007070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007074:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007078:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800707c:	d01a      	beq.n	80070b4 <UART_SetConfig+0x1a4>
 800707e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007082:	d81b      	bhi.n	80070bc <UART_SetConfig+0x1ac>
 8007084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007088:	d00c      	beq.n	80070a4 <UART_SetConfig+0x194>
 800708a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800708e:	d815      	bhi.n	80070bc <UART_SetConfig+0x1ac>
 8007090:	2b00      	cmp	r3, #0
 8007092:	d003      	beq.n	800709c <UART_SetConfig+0x18c>
 8007094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007098:	d008      	beq.n	80070ac <UART_SetConfig+0x19c>
 800709a:	e00f      	b.n	80070bc <UART_SetConfig+0x1ac>
 800709c:	2300      	movs	r3, #0
 800709e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070a2:	e012      	b.n	80070ca <UART_SetConfig+0x1ba>
 80070a4:	2302      	movs	r3, #2
 80070a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070aa:	e00e      	b.n	80070ca <UART_SetConfig+0x1ba>
 80070ac:	2304      	movs	r3, #4
 80070ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070b2:	e00a      	b.n	80070ca <UART_SetConfig+0x1ba>
 80070b4:	2308      	movs	r3, #8
 80070b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070ba:	e006      	b.n	80070ca <UART_SetConfig+0x1ba>
 80070bc:	2310      	movs	r3, #16
 80070be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070c2:	e002      	b.n	80070ca <UART_SetConfig+0x1ba>
 80070c4:	2310      	movs	r3, #16
 80070c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a51      	ldr	r2, [pc, #324]	; (8007214 <UART_SetConfig+0x304>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d17a      	bne.n	80071ca <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070d8:	2b08      	cmp	r3, #8
 80070da:	d824      	bhi.n	8007126 <UART_SetConfig+0x216>
 80070dc:	a201      	add	r2, pc, #4	; (adr r2, 80070e4 <UART_SetConfig+0x1d4>)
 80070de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e2:	bf00      	nop
 80070e4:	08007109 	.word	0x08007109
 80070e8:	08007127 	.word	0x08007127
 80070ec:	08007111 	.word	0x08007111
 80070f0:	08007127 	.word	0x08007127
 80070f4:	08007117 	.word	0x08007117
 80070f8:	08007127 	.word	0x08007127
 80070fc:	08007127 	.word	0x08007127
 8007100:	08007127 	.word	0x08007127
 8007104:	0800711f 	.word	0x0800711f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007108:	f7fd f936 	bl	8004378 <HAL_RCC_GetPCLK1Freq>
 800710c:	61f8      	str	r0, [r7, #28]
        break;
 800710e:	e010      	b.n	8007132 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007110:	4b44      	ldr	r3, [pc, #272]	; (8007224 <UART_SetConfig+0x314>)
 8007112:	61fb      	str	r3, [r7, #28]
        break;
 8007114:	e00d      	b.n	8007132 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007116:	f7fd f897 	bl	8004248 <HAL_RCC_GetSysClockFreq>
 800711a:	61f8      	str	r0, [r7, #28]
        break;
 800711c:	e009      	b.n	8007132 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800711e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007122:	61fb      	str	r3, [r7, #28]
        break;
 8007124:	e005      	b.n	8007132 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007126:	2300      	movs	r3, #0
 8007128:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007130:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 8107 	beq.w	8007348 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	4613      	mov	r3, r2
 8007140:	005b      	lsls	r3, r3, #1
 8007142:	4413      	add	r3, r2
 8007144:	69fa      	ldr	r2, [r7, #28]
 8007146:	429a      	cmp	r2, r3
 8007148:	d305      	bcc.n	8007156 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007150:	69fa      	ldr	r2, [r7, #28]
 8007152:	429a      	cmp	r2, r3
 8007154:	d903      	bls.n	800715e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800715c:	e0f4      	b.n	8007348 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	2200      	movs	r2, #0
 8007162:	461c      	mov	r4, r3
 8007164:	4615      	mov	r5, r2
 8007166:	f04f 0200 	mov.w	r2, #0
 800716a:	f04f 0300 	mov.w	r3, #0
 800716e:	022b      	lsls	r3, r5, #8
 8007170:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007174:	0222      	lsls	r2, r4, #8
 8007176:	68f9      	ldr	r1, [r7, #12]
 8007178:	6849      	ldr	r1, [r1, #4]
 800717a:	0849      	lsrs	r1, r1, #1
 800717c:	2000      	movs	r0, #0
 800717e:	4688      	mov	r8, r1
 8007180:	4681      	mov	r9, r0
 8007182:	eb12 0a08 	adds.w	sl, r2, r8
 8007186:	eb43 0b09 	adc.w	fp, r3, r9
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	603b      	str	r3, [r7, #0]
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007198:	4650      	mov	r0, sl
 800719a:	4659      	mov	r1, fp
 800719c:	f7f9 fd04 	bl	8000ba8 <__aeabi_uldivmod>
 80071a0:	4602      	mov	r2, r0
 80071a2:	460b      	mov	r3, r1
 80071a4:	4613      	mov	r3, r2
 80071a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071ae:	d308      	bcc.n	80071c2 <UART_SetConfig+0x2b2>
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071b6:	d204      	bcs.n	80071c2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	60da      	str	r2, [r3, #12]
 80071c0:	e0c2      	b.n	8007348 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80071c8:	e0be      	b.n	8007348 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071d2:	d16a      	bne.n	80072aa <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80071d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071d8:	2b08      	cmp	r3, #8
 80071da:	d834      	bhi.n	8007246 <UART_SetConfig+0x336>
 80071dc:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <UART_SetConfig+0x2d4>)
 80071de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e2:	bf00      	nop
 80071e4:	08007209 	.word	0x08007209
 80071e8:	08007229 	.word	0x08007229
 80071ec:	08007231 	.word	0x08007231
 80071f0:	08007247 	.word	0x08007247
 80071f4:	08007237 	.word	0x08007237
 80071f8:	08007247 	.word	0x08007247
 80071fc:	08007247 	.word	0x08007247
 8007200:	08007247 	.word	0x08007247
 8007204:	0800723f 	.word	0x0800723f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007208:	f7fd f8b6 	bl	8004378 <HAL_RCC_GetPCLK1Freq>
 800720c:	61f8      	str	r0, [r7, #28]
        break;
 800720e:	e020      	b.n	8007252 <UART_SetConfig+0x342>
 8007210:	efff69f3 	.word	0xefff69f3
 8007214:	40008000 	.word	0x40008000
 8007218:	40013800 	.word	0x40013800
 800721c:	40021000 	.word	0x40021000
 8007220:	40004400 	.word	0x40004400
 8007224:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007228:	f7fd f8bc 	bl	80043a4 <HAL_RCC_GetPCLK2Freq>
 800722c:	61f8      	str	r0, [r7, #28]
        break;
 800722e:	e010      	b.n	8007252 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007230:	4b4c      	ldr	r3, [pc, #304]	; (8007364 <UART_SetConfig+0x454>)
 8007232:	61fb      	str	r3, [r7, #28]
        break;
 8007234:	e00d      	b.n	8007252 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007236:	f7fd f807 	bl	8004248 <HAL_RCC_GetSysClockFreq>
 800723a:	61f8      	str	r0, [r7, #28]
        break;
 800723c:	e009      	b.n	8007252 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800723e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007242:	61fb      	str	r3, [r7, #28]
        break;
 8007244:	e005      	b.n	8007252 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007246:	2300      	movs	r3, #0
 8007248:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007250:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d077      	beq.n	8007348 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	005a      	lsls	r2, r3, #1
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	085b      	lsrs	r3, r3, #1
 8007262:	441a      	add	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	fbb2 f3f3 	udiv	r3, r2, r3
 800726c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	2b0f      	cmp	r3, #15
 8007272:	d916      	bls.n	80072a2 <UART_SetConfig+0x392>
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800727a:	d212      	bcs.n	80072a2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	b29b      	uxth	r3, r3
 8007280:	f023 030f 	bic.w	r3, r3, #15
 8007284:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	085b      	lsrs	r3, r3, #1
 800728a:	b29b      	uxth	r3, r3
 800728c:	f003 0307 	and.w	r3, r3, #7
 8007290:	b29a      	uxth	r2, r3
 8007292:	8afb      	ldrh	r3, [r7, #22]
 8007294:	4313      	orrs	r3, r2
 8007296:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	8afa      	ldrh	r2, [r7, #22]
 800729e:	60da      	str	r2, [r3, #12]
 80072a0:	e052      	b.n	8007348 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80072a8:	e04e      	b.n	8007348 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072ae:	2b08      	cmp	r3, #8
 80072b0:	d827      	bhi.n	8007302 <UART_SetConfig+0x3f2>
 80072b2:	a201      	add	r2, pc, #4	; (adr r2, 80072b8 <UART_SetConfig+0x3a8>)
 80072b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b8:	080072dd 	.word	0x080072dd
 80072bc:	080072e5 	.word	0x080072e5
 80072c0:	080072ed 	.word	0x080072ed
 80072c4:	08007303 	.word	0x08007303
 80072c8:	080072f3 	.word	0x080072f3
 80072cc:	08007303 	.word	0x08007303
 80072d0:	08007303 	.word	0x08007303
 80072d4:	08007303 	.word	0x08007303
 80072d8:	080072fb 	.word	0x080072fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072dc:	f7fd f84c 	bl	8004378 <HAL_RCC_GetPCLK1Freq>
 80072e0:	61f8      	str	r0, [r7, #28]
        break;
 80072e2:	e014      	b.n	800730e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072e4:	f7fd f85e 	bl	80043a4 <HAL_RCC_GetPCLK2Freq>
 80072e8:	61f8      	str	r0, [r7, #28]
        break;
 80072ea:	e010      	b.n	800730e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072ec:	4b1d      	ldr	r3, [pc, #116]	; (8007364 <UART_SetConfig+0x454>)
 80072ee:	61fb      	str	r3, [r7, #28]
        break;
 80072f0:	e00d      	b.n	800730e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072f2:	f7fc ffa9 	bl	8004248 <HAL_RCC_GetSysClockFreq>
 80072f6:	61f8      	str	r0, [r7, #28]
        break;
 80072f8:	e009      	b.n	800730e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072fe:	61fb      	str	r3, [r7, #28]
        break;
 8007300:	e005      	b.n	800730e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800730c:	bf00      	nop
    }

    if (pclk != 0U)
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d019      	beq.n	8007348 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	085a      	lsrs	r2, r3, #1
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	441a      	add	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	fbb2 f3f3 	udiv	r3, r2, r3
 8007326:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	2b0f      	cmp	r3, #15
 800732c:	d909      	bls.n	8007342 <UART_SetConfig+0x432>
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007334:	d205      	bcs.n	8007342 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	b29a      	uxth	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	60da      	str	r2, [r3, #12]
 8007340:	e002      	b.n	8007348 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007354:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007358:	4618      	mov	r0, r3
 800735a:	3728      	adds	r7, #40	; 0x28
 800735c:	46bd      	mov	sp, r7
 800735e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007362:	bf00      	nop
 8007364:	00f42400 	.word	0x00f42400

08007368 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007374:	f003 0301 	and.w	r3, r3, #1
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00a      	beq.n	8007392 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007396:	f003 0302 	and.w	r3, r3, #2
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00a      	beq.n	80073b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	f003 0304 	and.w	r3, r3, #4
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00a      	beq.n	80073d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	430a      	orrs	r2, r1
 80073d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073da:	f003 0308 	and.w	r3, r3, #8
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00a      	beq.n	80073f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	f003 0310 	and.w	r3, r3, #16
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00a      	beq.n	800741a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	f003 0320 	and.w	r3, r3, #32
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007444:	2b00      	cmp	r3, #0
 8007446:	d01a      	beq.n	800747e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	430a      	orrs	r2, r1
 800745c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007466:	d10a      	bne.n	800747e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00a      	beq.n	80074a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	430a      	orrs	r2, r1
 800749e:	605a      	str	r2, [r3, #4]
  }
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af02      	add	r7, sp, #8
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074bc:	f7fb f91e 	bl	80026fc <HAL_GetTick>
 80074c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0308 	and.w	r3, r3, #8
 80074cc:	2b08      	cmp	r3, #8
 80074ce:	d10e      	bne.n	80074ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f82d 	bl	800753e <UART_WaitOnFlagUntilTimeout>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e023      	b.n	8007536 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0304 	and.w	r3, r3, #4
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	d10e      	bne.n	800751a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f817 	bl	800753e <UART_WaitOnFlagUntilTimeout>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e00d      	b.n	8007536 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2220      	movs	r2, #32
 800751e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2220      	movs	r2, #32
 8007524:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b09c      	sub	sp, #112	; 0x70
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	60b9      	str	r1, [r7, #8]
 8007548:	603b      	str	r3, [r7, #0]
 800754a:	4613      	mov	r3, r2
 800754c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800754e:	e0a5      	b.n	800769c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007556:	f000 80a1 	beq.w	800769c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800755a:	f7fb f8cf 	bl	80026fc <HAL_GetTick>
 800755e:	4602      	mov	r2, r0
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007566:	429a      	cmp	r2, r3
 8007568:	d302      	bcc.n	8007570 <UART_WaitOnFlagUntilTimeout+0x32>
 800756a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800756c:	2b00      	cmp	r3, #0
 800756e:	d13e      	bne.n	80075ee <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007578:	e853 3f00 	ldrex	r3, [r3]
 800757c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800757e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007580:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007584:	667b      	str	r3, [r7, #100]	; 0x64
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800758e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007590:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007592:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007594:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007596:	e841 2300 	strex	r3, r2, [r1]
 800759a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800759c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1e6      	bne.n	8007570 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3308      	adds	r3, #8
 80075a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ac:	e853 3f00 	ldrex	r3, [r3]
 80075b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b4:	f023 0301 	bic.w	r3, r3, #1
 80075b8:	663b      	str	r3, [r7, #96]	; 0x60
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3308      	adds	r3, #8
 80075c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80075c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80075d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1e5      	bne.n	80075a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2220      	movs	r2, #32
 80075da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2220      	movs	r2, #32
 80075e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e067      	b.n	80076be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d04f      	beq.n	800769c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800760a:	d147      	bne.n	800769c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007614:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761e:	e853 3f00 	ldrex	r3, [r3]
 8007622:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800762a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	461a      	mov	r2, r3
 8007632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007634:	637b      	str	r3, [r7, #52]	; 0x34
 8007636:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007638:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800763a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800763c:	e841 2300 	strex	r3, r2, [r1]
 8007640:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1e6      	bne.n	8007616 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3308      	adds	r3, #8
 800764e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	e853 3f00 	ldrex	r3, [r3]
 8007656:	613b      	str	r3, [r7, #16]
   return(result);
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	f023 0301 	bic.w	r3, r3, #1
 800765e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3308      	adds	r3, #8
 8007666:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007668:	623a      	str	r2, [r7, #32]
 800766a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766c:	69f9      	ldr	r1, [r7, #28]
 800766e:	6a3a      	ldr	r2, [r7, #32]
 8007670:	e841 2300 	strex	r3, r2, [r1]
 8007674:	61bb      	str	r3, [r7, #24]
   return(result);
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1e5      	bne.n	8007648 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2220      	movs	r2, #32
 8007680:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2220      	movs	r2, #32
 8007686:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2220      	movs	r2, #32
 800768c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e010      	b.n	80076be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	69da      	ldr	r2, [r3, #28]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	4013      	ands	r3, r2
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	bf0c      	ite	eq
 80076ac:	2301      	moveq	r3, #1
 80076ae:	2300      	movne	r3, #0
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	461a      	mov	r2, r3
 80076b4:	79fb      	ldrb	r3, [r7, #7]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	f43f af4a 	beq.w	8007550 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3770      	adds	r7, #112	; 0x70
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
	...

080076c8 <__NVIC_SetPriority>:
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	4603      	mov	r3, r0
 80076d0:	6039      	str	r1, [r7, #0]
 80076d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	db0a      	blt.n	80076f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	490c      	ldr	r1, [pc, #48]	; (8007714 <__NVIC_SetPriority+0x4c>)
 80076e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076e6:	0112      	lsls	r2, r2, #4
 80076e8:	b2d2      	uxtb	r2, r2
 80076ea:	440b      	add	r3, r1
 80076ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80076f0:	e00a      	b.n	8007708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	4908      	ldr	r1, [pc, #32]	; (8007718 <__NVIC_SetPriority+0x50>)
 80076f8:	79fb      	ldrb	r3, [r7, #7]
 80076fa:	f003 030f 	and.w	r3, r3, #15
 80076fe:	3b04      	subs	r3, #4
 8007700:	0112      	lsls	r2, r2, #4
 8007702:	b2d2      	uxtb	r2, r2
 8007704:	440b      	add	r3, r1
 8007706:	761a      	strb	r2, [r3, #24]
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	e000e100 	.word	0xe000e100
 8007718:	e000ed00 	.word	0xe000ed00

0800771c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007720:	4b05      	ldr	r3, [pc, #20]	; (8007738 <SysTick_Handler+0x1c>)
 8007722:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007724:	f002 f970 	bl	8009a08 <xTaskGetSchedulerState>
 8007728:	4603      	mov	r3, r0
 800772a:	2b01      	cmp	r3, #1
 800772c:	d001      	beq.n	8007732 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800772e:	f002 ff5b 	bl	800a5e8 <xPortSysTickHandler>
  }
}
 8007732:	bf00      	nop
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	e000e010 	.word	0xe000e010

0800773c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800773c:	b580      	push	{r7, lr}
 800773e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007740:	2100      	movs	r1, #0
 8007742:	f06f 0004 	mvn.w	r0, #4
 8007746:	f7ff ffbf 	bl	80076c8 <__NVIC_SetPriority>
#endif
}
 800774a:	bf00      	nop
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007756:	f3ef 8305 	mrs	r3, IPSR
 800775a:	603b      	str	r3, [r7, #0]
  return(result);
 800775c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007762:	f06f 0305 	mvn.w	r3, #5
 8007766:	607b      	str	r3, [r7, #4]
 8007768:	e00c      	b.n	8007784 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800776a:	4b0a      	ldr	r3, [pc, #40]	; (8007794 <osKernelInitialize+0x44>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d105      	bne.n	800777e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007772:	4b08      	ldr	r3, [pc, #32]	; (8007794 <osKernelInitialize+0x44>)
 8007774:	2201      	movs	r2, #1
 8007776:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007778:	2300      	movs	r3, #0
 800777a:	607b      	str	r3, [r7, #4]
 800777c:	e002      	b.n	8007784 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800777e:	f04f 33ff 	mov.w	r3, #4294967295
 8007782:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007784:	687b      	ldr	r3, [r7, #4]
}
 8007786:	4618      	mov	r0, r3
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	200005ec 	.word	0x200005ec

08007798 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800779e:	f3ef 8305 	mrs	r3, IPSR
 80077a2:	603b      	str	r3, [r7, #0]
  return(result);
 80077a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80077aa:	f06f 0305 	mvn.w	r3, #5
 80077ae:	607b      	str	r3, [r7, #4]
 80077b0:	e010      	b.n	80077d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80077b2:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <osKernelStart+0x48>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d109      	bne.n	80077ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80077ba:	f7ff ffbf 	bl	800773c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80077be:	4b08      	ldr	r3, [pc, #32]	; (80077e0 <osKernelStart+0x48>)
 80077c0:	2202      	movs	r2, #2
 80077c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80077c4:	f001 fcbc 	bl	8009140 <vTaskStartScheduler>
      stat = osOK;
 80077c8:	2300      	movs	r3, #0
 80077ca:	607b      	str	r3, [r7, #4]
 80077cc:	e002      	b.n	80077d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80077ce:	f04f 33ff 	mov.w	r3, #4294967295
 80077d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80077d4:	687b      	ldr	r3, [r7, #4]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	200005ec 	.word	0x200005ec

080077e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08e      	sub	sp, #56	; 0x38
 80077e8:	af04      	add	r7, sp, #16
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80077f0:	2300      	movs	r3, #0
 80077f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077f4:	f3ef 8305 	mrs	r3, IPSR
 80077f8:	617b      	str	r3, [r7, #20]
  return(result);
 80077fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d17e      	bne.n	80078fe <osThreadNew+0x11a>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d07b      	beq.n	80078fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007806:	2380      	movs	r3, #128	; 0x80
 8007808:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800780a:	2318      	movs	r3, #24
 800780c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800780e:	2300      	movs	r3, #0
 8007810:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007812:	f04f 33ff 	mov.w	r3, #4294967295
 8007816:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d045      	beq.n	80078aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d002      	beq.n	800782c <osThreadNew+0x48>
        name = attr->name;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d002      	beq.n	800783a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d008      	beq.n	8007852 <osThreadNew+0x6e>
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	2b38      	cmp	r3, #56	; 0x38
 8007844:	d805      	bhi.n	8007852 <osThreadNew+0x6e>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <osThreadNew+0x72>
        return (NULL);
 8007852:	2300      	movs	r3, #0
 8007854:	e054      	b.n	8007900 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	089b      	lsrs	r3, r3, #2
 8007864:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00e      	beq.n	800788c <osThreadNew+0xa8>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	2b5f      	cmp	r3, #95	; 0x5f
 8007874:	d90a      	bls.n	800788c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800787a:	2b00      	cmp	r3, #0
 800787c:	d006      	beq.n	800788c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <osThreadNew+0xa8>
        mem = 1;
 8007886:	2301      	movs	r3, #1
 8007888:	61bb      	str	r3, [r7, #24]
 800788a:	e010      	b.n	80078ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10c      	bne.n	80078ae <osThreadNew+0xca>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d108      	bne.n	80078ae <osThreadNew+0xca>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d104      	bne.n	80078ae <osThreadNew+0xca>
          mem = 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	61bb      	str	r3, [r7, #24]
 80078a8:	e001      	b.n	80078ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d110      	bne.n	80078d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80078bc:	9202      	str	r2, [sp, #8]
 80078be:	9301      	str	r3, [sp, #4]
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	6a3a      	ldr	r2, [r7, #32]
 80078c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f001 fa60 	bl	8008d90 <xTaskCreateStatic>
 80078d0:	4603      	mov	r3, r0
 80078d2:	613b      	str	r3, [r7, #16]
 80078d4:	e013      	b.n	80078fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d110      	bne.n	80078fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	b29a      	uxth	r2, r3
 80078e0:	f107 0310 	add.w	r3, r7, #16
 80078e4:	9301      	str	r3, [sp, #4]
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f001 faab 	bl	8008e4a <xTaskCreate>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d001      	beq.n	80078fe <osThreadNew+0x11a>
            hTask = NULL;
 80078fa:	2300      	movs	r3, #0
 80078fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80078fe:	693b      	ldr	r3, [r7, #16]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3728      	adds	r7, #40	; 0x28
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007910:	f3ef 8305 	mrs	r3, IPSR
 8007914:	60bb      	str	r3, [r7, #8]
  return(result);
 8007916:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007918:	2b00      	cmp	r3, #0
 800791a:	d003      	beq.n	8007924 <osDelay+0x1c>
    stat = osErrorISR;
 800791c:	f06f 0305 	mvn.w	r3, #5
 8007920:	60fb      	str	r3, [r7, #12]
 8007922:	e007      	b.n	8007934 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007924:	2300      	movs	r3, #0
 8007926:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <osDelay+0x2c>
      vTaskDelay(ticks);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f001 fbd2 	bl	80090d8 <vTaskDelay>
    }
  }

  return (stat);
 8007934:	68fb      	ldr	r3, [r7, #12]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800793e:	b580      	push	{r7, lr}
 8007940:	b08a      	sub	sp, #40	; 0x28
 8007942:	af02      	add	r7, sp, #8
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	60b9      	str	r1, [r7, #8]
 8007948:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800794a:	2300      	movs	r3, #0
 800794c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800794e:	f3ef 8305 	mrs	r3, IPSR
 8007952:	613b      	str	r3, [r7, #16]
  return(result);
 8007954:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007956:	2b00      	cmp	r3, #0
 8007958:	d175      	bne.n	8007a46 <osSemaphoreNew+0x108>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d072      	beq.n	8007a46 <osSemaphoreNew+0x108>
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	429a      	cmp	r2, r3
 8007966:	d86e      	bhi.n	8007a46 <osSemaphoreNew+0x108>
    mem = -1;
 8007968:	f04f 33ff 	mov.w	r3, #4294967295
 800796c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d015      	beq.n	80079a0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d006      	beq.n	800798a <osSemaphoreNew+0x4c>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	2b4f      	cmp	r3, #79	; 0x4f
 8007982:	d902      	bls.n	800798a <osSemaphoreNew+0x4c>
        mem = 1;
 8007984:	2301      	movs	r3, #1
 8007986:	61bb      	str	r3, [r7, #24]
 8007988:	e00c      	b.n	80079a4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d108      	bne.n	80079a4 <osSemaphoreNew+0x66>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d104      	bne.n	80079a4 <osSemaphoreNew+0x66>
          mem = 0;
 800799a:	2300      	movs	r3, #0
 800799c:	61bb      	str	r3, [r7, #24]
 800799e:	e001      	b.n	80079a4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80079a0:	2300      	movs	r3, #0
 80079a2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079aa:	d04c      	beq.n	8007a46 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d128      	bne.n	8007a04 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d10a      	bne.n	80079ce <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	2203      	movs	r2, #3
 80079be:	9200      	str	r2, [sp, #0]
 80079c0:	2200      	movs	r2, #0
 80079c2:	2100      	movs	r1, #0
 80079c4:	2001      	movs	r0, #1
 80079c6:	f000 fb3f 	bl	8008048 <xQueueGenericCreateStatic>
 80079ca:	61f8      	str	r0, [r7, #28]
 80079cc:	e005      	b.n	80079da <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80079ce:	2203      	movs	r2, #3
 80079d0:	2100      	movs	r1, #0
 80079d2:	2001      	movs	r0, #1
 80079d4:	f000 fbb0 	bl	8008138 <xQueueGenericCreate>
 80079d8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d022      	beq.n	8007a26 <osSemaphoreNew+0xe8>
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d01f      	beq.n	8007a26 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80079e6:	2300      	movs	r3, #0
 80079e8:	2200      	movs	r2, #0
 80079ea:	2100      	movs	r1, #0
 80079ec:	69f8      	ldr	r0, [r7, #28]
 80079ee:	f000 fc6b 	bl	80082c8 <xQueueGenericSend>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d016      	beq.n	8007a26 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80079f8:	69f8      	ldr	r0, [r7, #28]
 80079fa:	f001 f80e 	bl	8008a1a <vQueueDelete>
            hSemaphore = NULL;
 80079fe:	2300      	movs	r3, #0
 8007a00:	61fb      	str	r3, [r7, #28]
 8007a02:	e010      	b.n	8007a26 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d108      	bne.n	8007a1c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	68b9      	ldr	r1, [r7, #8]
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 fbed 	bl	80081f2 <xQueueCreateCountingSemaphoreStatic>
 8007a18:	61f8      	str	r0, [r7, #28]
 8007a1a:	e004      	b.n	8007a26 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007a1c:	68b9      	ldr	r1, [r7, #8]
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f000 fc1e 	bl	8008260 <xQueueCreateCountingSemaphore>
 8007a24:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00c      	beq.n	8007a46 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <osSemaphoreNew+0xfc>
          name = attr->name;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	617b      	str	r3, [r7, #20]
 8007a38:	e001      	b.n	8007a3e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007a3e:	6979      	ldr	r1, [r7, #20]
 8007a40:	69f8      	ldr	r0, [r7, #28]
 8007a42:	f001 f91d 	bl	8008c80 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007a46:	69fb      	ldr	r3, [r7, #28]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3720      	adds	r7, #32
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d103      	bne.n	8007a6e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007a66:	f06f 0303 	mvn.w	r3, #3
 8007a6a:	617b      	str	r3, [r7, #20]
 8007a6c:	e02c      	b.n	8007ac8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a6e:	f3ef 8305 	mrs	r3, IPSR
 8007a72:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a74:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d01a      	beq.n	8007ab0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007a7e:	f107 0308 	add.w	r3, r7, #8
 8007a82:	4619      	mov	r1, r3
 8007a84:	6938      	ldr	r0, [r7, #16]
 8007a86:	f000 fdb8 	bl	80085fa <xQueueGiveFromISR>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d003      	beq.n	8007a98 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007a90:	f06f 0302 	mvn.w	r3, #2
 8007a94:	617b      	str	r3, [r7, #20]
 8007a96:	e017      	b.n	8007ac8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d014      	beq.n	8007ac8 <osSemaphoreRelease+0x78>
 8007a9e:	4b0d      	ldr	r3, [pc, #52]	; (8007ad4 <osSemaphoreRelease+0x84>)
 8007aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	e00b      	b.n	8007ac8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	6938      	ldr	r0, [r7, #16]
 8007ab8:	f000 fc06 	bl	80082c8 <xQueueGenericSend>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d002      	beq.n	8007ac8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8007ac2:	f06f 0302 	mvn.w	r3, #2
 8007ac6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007ac8:	697b      	ldr	r3, [r7, #20]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	e000ed04 	.word	0xe000ed04

08007ad8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08a      	sub	sp, #40	; 0x28
 8007adc:	af02      	add	r7, sp, #8
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ae8:	f3ef 8305 	mrs	r3, IPSR
 8007aec:	613b      	str	r3, [r7, #16]
  return(result);
 8007aee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d15f      	bne.n	8007bb4 <osMessageQueueNew+0xdc>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d05c      	beq.n	8007bb4 <osMessageQueueNew+0xdc>
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d059      	beq.n	8007bb4 <osMessageQueueNew+0xdc>
    mem = -1;
 8007b00:	f04f 33ff 	mov.w	r3, #4294967295
 8007b04:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d029      	beq.n	8007b60 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d012      	beq.n	8007b3a <osMessageQueueNew+0x62>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	2b4f      	cmp	r3, #79	; 0x4f
 8007b1a:	d90e      	bls.n	8007b3a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00a      	beq.n	8007b3a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	695a      	ldr	r2, [r3, #20]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	68b9      	ldr	r1, [r7, #8]
 8007b2c:	fb01 f303 	mul.w	r3, r1, r3
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d302      	bcc.n	8007b3a <osMessageQueueNew+0x62>
        mem = 1;
 8007b34:	2301      	movs	r3, #1
 8007b36:	61bb      	str	r3, [r7, #24]
 8007b38:	e014      	b.n	8007b64 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d110      	bne.n	8007b64 <osMessageQueueNew+0x8c>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10c      	bne.n	8007b64 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d108      	bne.n	8007b64 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d104      	bne.n	8007b64 <osMessageQueueNew+0x8c>
          mem = 0;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	61bb      	str	r3, [r7, #24]
 8007b5e:	e001      	b.n	8007b64 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007b60:	2300      	movs	r3, #0
 8007b62:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d10b      	bne.n	8007b82 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	691a      	ldr	r2, [r3, #16]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	2100      	movs	r1, #0
 8007b74:	9100      	str	r1, [sp, #0]
 8007b76:	68b9      	ldr	r1, [r7, #8]
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 fa65 	bl	8008048 <xQueueGenericCreateStatic>
 8007b7e:	61f8      	str	r0, [r7, #28]
 8007b80:	e008      	b.n	8007b94 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d105      	bne.n	8007b94 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007b88:	2200      	movs	r2, #0
 8007b8a:	68b9      	ldr	r1, [r7, #8]
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f000 fad3 	bl	8008138 <xQueueGenericCreate>
 8007b92:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00c      	beq.n	8007bb4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <osMessageQueueNew+0xd0>
        name = attr->name;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	617b      	str	r3, [r7, #20]
 8007ba6:	e001      	b.n	8007bac <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007bac:	6979      	ldr	r1, [r7, #20]
 8007bae:	69f8      	ldr	r0, [r7, #28]
 8007bb0:	f001 f866 	bl	8008c80 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007bb4:	69fb      	ldr	r3, [r7, #28]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3720      	adds	r7, #32
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b088      	sub	sp, #32
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	603b      	str	r3, [r7, #0]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bd8:	f3ef 8305 	mrs	r3, IPSR
 8007bdc:	617b      	str	r3, [r7, #20]
  return(result);
 8007bde:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d028      	beq.n	8007c36 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d005      	beq.n	8007bf6 <osMessageQueuePut+0x36>
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d002      	beq.n	8007bf6 <osMessageQueuePut+0x36>
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007bf6:	f06f 0303 	mvn.w	r3, #3
 8007bfa:	61fb      	str	r3, [r7, #28]
 8007bfc:	e038      	b.n	8007c70 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007c02:	f107 0210 	add.w	r2, r7, #16
 8007c06:	2300      	movs	r3, #0
 8007c08:	68b9      	ldr	r1, [r7, #8]
 8007c0a:	69b8      	ldr	r0, [r7, #24]
 8007c0c:	f000 fc5a 	bl	80084c4 <xQueueGenericSendFromISR>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d003      	beq.n	8007c1e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007c16:	f06f 0302 	mvn.w	r3, #2
 8007c1a:	61fb      	str	r3, [r7, #28]
 8007c1c:	e028      	b.n	8007c70 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d025      	beq.n	8007c70 <osMessageQueuePut+0xb0>
 8007c24:	4b15      	ldr	r3, [pc, #84]	; (8007c7c <osMessageQueuePut+0xbc>)
 8007c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c2a:	601a      	str	r2, [r3, #0]
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	e01c      	b.n	8007c70 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <osMessageQueuePut+0x82>
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d103      	bne.n	8007c4a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007c42:	f06f 0303 	mvn.w	r3, #3
 8007c46:	61fb      	str	r3, [r7, #28]
 8007c48:	e012      	b.n	8007c70 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	68b9      	ldr	r1, [r7, #8]
 8007c50:	69b8      	ldr	r0, [r7, #24]
 8007c52:	f000 fb39 	bl	80082c8 <xQueueGenericSend>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d009      	beq.n	8007c70 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d003      	beq.n	8007c6a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007c62:	f06f 0301 	mvn.w	r3, #1
 8007c66:	61fb      	str	r3, [r7, #28]
 8007c68:	e002      	b.n	8007c70 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007c6a:	f06f 0302 	mvn.w	r3, #2
 8007c6e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007c70:	69fb      	ldr	r3, [r7, #28]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3720      	adds	r7, #32
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	e000ed04 	.word	0xe000ed04

08007c80 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c96:	f3ef 8305 	mrs	r3, IPSR
 8007c9a:	617b      	str	r3, [r7, #20]
  return(result);
 8007c9c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d028      	beq.n	8007cf4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d005      	beq.n	8007cb4 <osMessageQueueGet+0x34>
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d002      	beq.n	8007cb4 <osMessageQueueGet+0x34>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d003      	beq.n	8007cbc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007cb4:	f06f 0303 	mvn.w	r3, #3
 8007cb8:	61fb      	str	r3, [r7, #28]
 8007cba:	e037      	b.n	8007d2c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007cc0:	f107 0310 	add.w	r3, r7, #16
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	68b9      	ldr	r1, [r7, #8]
 8007cc8:	69b8      	ldr	r0, [r7, #24]
 8007cca:	f000 fe03 	bl	80088d4 <xQueueReceiveFromISR>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d003      	beq.n	8007cdc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007cd4:	f06f 0302 	mvn.w	r3, #2
 8007cd8:	61fb      	str	r3, [r7, #28]
 8007cda:	e027      	b.n	8007d2c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d024      	beq.n	8007d2c <osMessageQueueGet+0xac>
 8007ce2:	4b15      	ldr	r3, [pc, #84]	; (8007d38 <osMessageQueueGet+0xb8>)
 8007ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	e01b      	b.n	8007d2c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d002      	beq.n	8007d00 <osMessageQueueGet+0x80>
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d103      	bne.n	8007d08 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007d00:	f06f 0303 	mvn.w	r3, #3
 8007d04:	61fb      	str	r3, [r7, #28]
 8007d06:	e011      	b.n	8007d2c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	68b9      	ldr	r1, [r7, #8]
 8007d0c:	69b8      	ldr	r0, [r7, #24]
 8007d0e:	f000 fd01 	bl	8008714 <xQueueReceive>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d009      	beq.n	8007d2c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007d1e:	f06f 0301 	mvn.w	r3, #1
 8007d22:	61fb      	str	r3, [r7, #28]
 8007d24:	e002      	b.n	8007d2c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007d26:	f06f 0302 	mvn.w	r3, #2
 8007d2a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007d2c:	69fb      	ldr	r3, [r7, #28]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3720      	adds	r7, #32
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	e000ed04 	.word	0xe000ed04

08007d3c <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b08a      	sub	sp, #40	; 0x28
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8007d48:	6a3b      	ldr	r3, [r7, #32]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d102      	bne.n	8007d54 <osMessageQueueGetSpace+0x18>
    space = 0U;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	627b      	str	r3, [r7, #36]	; 0x24
 8007d52:	e023      	b.n	8007d9c <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d54:	f3ef 8305 	mrs	r3, IPSR
 8007d58:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d5a:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d019      	beq.n	8007d94 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d60:	f3ef 8211 	mrs	r2, BASEPRI
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	613a      	str	r2, [r7, #16]
 8007d76:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d78:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 8007d7a:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d80:	6a3b      	ldr	r3, [r7, #32]
 8007d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	627b      	str	r3, [r7, #36]	; 0x24
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d92:	e003      	b.n	8007d9c <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 8007d94:	6a38      	ldr	r0, [r7, #32]
 8007d96:	f000 fe1d 	bl	80089d4 <uxQueueSpacesAvailable>
 8007d9a:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return (space);
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3728      	adds	r7, #40	; 0x28
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
	...

08007da8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	4a07      	ldr	r2, [pc, #28]	; (8007dd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007db8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	4a06      	ldr	r2, [pc, #24]	; (8007dd8 <vApplicationGetIdleTaskMemory+0x30>)
 8007dbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2280      	movs	r2, #128	; 0x80
 8007dc4:	601a      	str	r2, [r3, #0]
}
 8007dc6:	bf00      	nop
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	200005f0 	.word	0x200005f0
 8007dd8:	20000650 	.word	0x20000650

08007ddc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4a07      	ldr	r2, [pc, #28]	; (8007e08 <vApplicationGetTimerTaskMemory+0x2c>)
 8007dec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	4a06      	ldr	r2, [pc, #24]	; (8007e0c <vApplicationGetTimerTaskMemory+0x30>)
 8007df2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dfa:	601a      	str	r2, [r3, #0]
}
 8007dfc:	bf00      	nop
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr
 8007e08:	20000850 	.word	0x20000850
 8007e0c:	200008b0 	.word	0x200008b0

08007e10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f103 0208 	add.w	r2, r3, #8
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f04f 32ff 	mov.w	r2, #4294967295
 8007e28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f103 0208 	add.w	r2, r3, #8
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f103 0208 	add.w	r2, r3, #8
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e5e:	bf00      	nop
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b085      	sub	sp, #20
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	1c5a      	adds	r2, r3, #1
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	601a      	str	r2, [r3, #0]
}
 8007ea6:	bf00      	nop
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b085      	sub	sp, #20
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
 8007eba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec8:	d103      	bne.n	8007ed2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	e00c      	b.n	8007eec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	3308      	adds	r3, #8
 8007ed6:	60fb      	str	r3, [r7, #12]
 8007ed8:	e002      	b.n	8007ee0 <vListInsert+0x2e>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d2f6      	bcs.n	8007eda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	601a      	str	r2, [r3, #0]
}
 8007f18:	bf00      	nop
 8007f1a:	3714      	adds	r7, #20
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	6892      	ldr	r2, [r2, #8]
 8007f3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	6852      	ldr	r2, [r2, #4]
 8007f44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d103      	bne.n	8007f58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	689a      	ldr	r2, [r3, #8]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	1e5a      	subs	r2, r3, #1
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10a      	bne.n	8007fa2 <xQueueGenericReset+0x2a>
	__asm volatile
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	60bb      	str	r3, [r7, #8]
}
 8007f9e:	bf00      	nop
 8007fa0:	e7fe      	b.n	8007fa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007fa2:	f002 fa8f 	bl	800a4c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fae:	68f9      	ldr	r1, [r7, #12]
 8007fb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fb2:	fb01 f303 	mul.w	r3, r1, r3
 8007fb6:	441a      	add	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	68f9      	ldr	r1, [r7, #12]
 8007fd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fd8:	fb01 f303 	mul.w	r3, r1, r3
 8007fdc:	441a      	add	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	22ff      	movs	r2, #255	; 0xff
 8007fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	22ff      	movs	r2, #255	; 0xff
 8007fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d114      	bne.n	8008022 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d01a      	beq.n	8008036 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	3310      	adds	r3, #16
 8008004:	4618      	mov	r0, r3
 8008006:	f001 fb41 	bl	800968c <xTaskRemoveFromEventList>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d012      	beq.n	8008036 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008010:	4b0c      	ldr	r3, [pc, #48]	; (8008044 <xQueueGenericReset+0xcc>)
 8008012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	e009      	b.n	8008036 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	3310      	adds	r3, #16
 8008026:	4618      	mov	r0, r3
 8008028:	f7ff fef2 	bl	8007e10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	3324      	adds	r3, #36	; 0x24
 8008030:	4618      	mov	r0, r3
 8008032:	f7ff feed 	bl	8007e10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008036:	f002 fa75 	bl	800a524 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800803a:	2301      	movs	r3, #1
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	e000ed04 	.word	0xe000ed04

08008048 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008048:	b580      	push	{r7, lr}
 800804a:	b08e      	sub	sp, #56	; 0x38
 800804c:	af02      	add	r7, sp, #8
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
 8008054:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10a      	bne.n	8008072 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800806e:	bf00      	nop
 8008070:	e7fe      	b.n	8008070 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10a      	bne.n	800808e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	627b      	str	r3, [r7, #36]	; 0x24
}
 800808a:	bf00      	nop
 800808c:	e7fe      	b.n	800808c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d002      	beq.n	800809a <xQueueGenericCreateStatic+0x52>
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <xQueueGenericCreateStatic+0x56>
 800809a:	2301      	movs	r3, #1
 800809c:	e000      	b.n	80080a0 <xQueueGenericCreateStatic+0x58>
 800809e:	2300      	movs	r3, #0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10a      	bne.n	80080ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	623b      	str	r3, [r7, #32]
}
 80080b6:	bf00      	nop
 80080b8:	e7fe      	b.n	80080b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d102      	bne.n	80080c6 <xQueueGenericCreateStatic+0x7e>
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d101      	bne.n	80080ca <xQueueGenericCreateStatic+0x82>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e000      	b.n	80080cc <xQueueGenericCreateStatic+0x84>
 80080ca:	2300      	movs	r3, #0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10a      	bne.n	80080e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	61fb      	str	r3, [r7, #28]
}
 80080e2:	bf00      	nop
 80080e4:	e7fe      	b.n	80080e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80080e6:	2350      	movs	r3, #80	; 0x50
 80080e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b50      	cmp	r3, #80	; 0x50
 80080ee:	d00a      	beq.n	8008106 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	61bb      	str	r3, [r7, #24]
}
 8008102:	bf00      	nop
 8008104:	e7fe      	b.n	8008104 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008106:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00d      	beq.n	800812e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008114:	2201      	movs	r2, #1
 8008116:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800811a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800811e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	4613      	mov	r3, r2
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	68b9      	ldr	r1, [r7, #8]
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 f83f 	bl	80081ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008130:	4618      	mov	r0, r3
 8008132:	3730      	adds	r7, #48	; 0x30
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008138:	b580      	push	{r7, lr}
 800813a:	b08a      	sub	sp, #40	; 0x28
 800813c:	af02      	add	r7, sp, #8
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	4613      	mov	r3, r2
 8008144:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10a      	bne.n	8008162 <xQueueGenericCreate+0x2a>
	__asm volatile
 800814c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008150:	f383 8811 	msr	BASEPRI, r3
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	613b      	str	r3, [r7, #16]
}
 800815e:	bf00      	nop
 8008160:	e7fe      	b.n	8008160 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	68ba      	ldr	r2, [r7, #8]
 8008166:	fb02 f303 	mul.w	r3, r2, r3
 800816a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	3350      	adds	r3, #80	; 0x50
 8008170:	4618      	mov	r0, r3
 8008172:	f002 fac9 	bl	800a708 <pvPortMalloc>
 8008176:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d011      	beq.n	80081a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	3350      	adds	r3, #80	; 0x50
 8008186:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008190:	79fa      	ldrb	r2, [r7, #7]
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	4613      	mov	r3, r2
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	68b9      	ldr	r1, [r7, #8]
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f000 f805 	bl	80081ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80081a2:	69bb      	ldr	r3, [r7, #24]
	}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3720      	adds	r7, #32
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
 80081b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d103      	bne.n	80081c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	e002      	b.n	80081ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081da:	2101      	movs	r1, #1
 80081dc:	69b8      	ldr	r0, [r7, #24]
 80081de:	f7ff fecb 	bl	8007f78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	78fa      	ldrb	r2, [r7, #3]
 80081e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081ea:	bf00      	nop
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b08a      	sub	sp, #40	; 0x28
 80081f6:	af02      	add	r7, sp, #8
 80081f8:	60f8      	str	r0, [r7, #12]
 80081fa:	60b9      	str	r1, [r7, #8]
 80081fc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	61bb      	str	r3, [r7, #24]
}
 8008216:	bf00      	nop
 8008218:	e7fe      	b.n	8008218 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	429a      	cmp	r2, r3
 8008220:	d90a      	bls.n	8008238 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	617b      	str	r3, [r7, #20]
}
 8008234:	bf00      	nop
 8008236:	e7fe      	b.n	8008236 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008238:	2302      	movs	r3, #2
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	2100      	movs	r1, #0
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f7ff ff00 	bl	8008048 <xQueueGenericCreateStatic>
 8008248:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008256:	69fb      	ldr	r3, [r7, #28]
	}
 8008258:	4618      	mov	r0, r3
 800825a:	3720      	adds	r7, #32
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10a      	bne.n	8008286 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	613b      	str	r3, [r7, #16]
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	429a      	cmp	r2, r3
 800828c:	d90a      	bls.n	80082a4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	60fb      	str	r3, [r7, #12]
}
 80082a0:	bf00      	nop
 80082a2:	e7fe      	b.n	80082a2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80082a4:	2202      	movs	r2, #2
 80082a6:	2100      	movs	r1, #0
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f7ff ff45 	bl	8008138 <xQueueGenericCreate>
 80082ae:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d002      	beq.n	80082bc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80082bc:	697b      	ldr	r3, [r7, #20]
	}
 80082be:	4618      	mov	r0, r3
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
	...

080082c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08e      	sub	sp, #56	; 0x38
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
 80082d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80082d6:	2300      	movs	r3, #0
 80082d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80082de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10a      	bne.n	80082fa <xQueueGenericSend+0x32>
	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80082f6:	bf00      	nop
 80082f8:	e7fe      	b.n	80082f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d103      	bne.n	8008308 <xQueueGenericSend+0x40>
 8008300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008304:	2b00      	cmp	r3, #0
 8008306:	d101      	bne.n	800830c <xQueueGenericSend+0x44>
 8008308:	2301      	movs	r3, #1
 800830a:	e000      	b.n	800830e <xQueueGenericSend+0x46>
 800830c:	2300      	movs	r3, #0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10a      	bne.n	8008328 <xQueueGenericSend+0x60>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008324:	bf00      	nop
 8008326:	e7fe      	b.n	8008326 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b02      	cmp	r3, #2
 800832c:	d103      	bne.n	8008336 <xQueueGenericSend+0x6e>
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008332:	2b01      	cmp	r3, #1
 8008334:	d101      	bne.n	800833a <xQueueGenericSend+0x72>
 8008336:	2301      	movs	r3, #1
 8008338:	e000      	b.n	800833c <xQueueGenericSend+0x74>
 800833a:	2300      	movs	r3, #0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10a      	bne.n	8008356 <xQueueGenericSend+0x8e>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	623b      	str	r3, [r7, #32]
}
 8008352:	bf00      	nop
 8008354:	e7fe      	b.n	8008354 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008356:	f001 fb57 	bl	8009a08 <xTaskGetSchedulerState>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d102      	bne.n	8008366 <xQueueGenericSend+0x9e>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d101      	bne.n	800836a <xQueueGenericSend+0xa2>
 8008366:	2301      	movs	r3, #1
 8008368:	e000      	b.n	800836c <xQueueGenericSend+0xa4>
 800836a:	2300      	movs	r3, #0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10a      	bne.n	8008386 <xQueueGenericSend+0xbe>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	61fb      	str	r3, [r7, #28]
}
 8008382:	bf00      	nop
 8008384:	e7fe      	b.n	8008384 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008386:	f002 f89d 	bl	800a4c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800838e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008392:	429a      	cmp	r2, r3
 8008394:	d302      	bcc.n	800839c <xQueueGenericSend+0xd4>
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b02      	cmp	r3, #2
 800839a:	d129      	bne.n	80083f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	68b9      	ldr	r1, [r7, #8]
 80083a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083a2:	f000 fb5d 	bl	8008a60 <prvCopyDataToQueue>
 80083a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d010      	beq.n	80083d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b2:	3324      	adds	r3, #36	; 0x24
 80083b4:	4618      	mov	r0, r3
 80083b6:	f001 f969 	bl	800968c <xTaskRemoveFromEventList>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d013      	beq.n	80083e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80083c0:	4b3f      	ldr	r3, [pc, #252]	; (80084c0 <xQueueGenericSend+0x1f8>)
 80083c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083c6:	601a      	str	r2, [r3, #0]
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	e00a      	b.n	80083e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80083d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d007      	beq.n	80083e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80083d8:	4b39      	ldr	r3, [pc, #228]	; (80084c0 <xQueueGenericSend+0x1f8>)
 80083da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	f3bf 8f4f 	dsb	sy
 80083e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80083e8:	f002 f89c 	bl	800a524 <vPortExitCritical>
				return pdPASS;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e063      	b.n	80084b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d103      	bne.n	80083fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083f6:	f002 f895 	bl	800a524 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80083fa:	2300      	movs	r3, #0
 80083fc:	e05c      	b.n	80084b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008400:	2b00      	cmp	r3, #0
 8008402:	d106      	bne.n	8008412 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008404:	f107 0314 	add.w	r3, r7, #20
 8008408:	4618      	mov	r0, r3
 800840a:	f001 f9a3 	bl	8009754 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800840e:	2301      	movs	r3, #1
 8008410:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008412:	f002 f887 	bl	800a524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008416:	f000 fefb 	bl	8009210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800841a:	f002 f853 	bl	800a4c4 <vPortEnterCritical>
 800841e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008420:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008424:	b25b      	sxtb	r3, r3
 8008426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842a:	d103      	bne.n	8008434 <xQueueGenericSend+0x16c>
 800842c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842e:	2200      	movs	r2, #0
 8008430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008436:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800843a:	b25b      	sxtb	r3, r3
 800843c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008440:	d103      	bne.n	800844a <xQueueGenericSend+0x182>
 8008442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800844a:	f002 f86b 	bl	800a524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800844e:	1d3a      	adds	r2, r7, #4
 8008450:	f107 0314 	add.w	r3, r7, #20
 8008454:	4611      	mov	r1, r2
 8008456:	4618      	mov	r0, r3
 8008458:	f001 f992 	bl	8009780 <xTaskCheckForTimeOut>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d124      	bne.n	80084ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008462:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008464:	f000 fbf4 	bl	8008c50 <prvIsQueueFull>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d018      	beq.n	80084a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	3310      	adds	r3, #16
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	4611      	mov	r1, r2
 8008476:	4618      	mov	r0, r3
 8008478:	f001 f8b8 	bl	80095ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800847c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800847e:	f000 fb7f 	bl	8008b80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008482:	f000 fed3 	bl	800922c <xTaskResumeAll>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	f47f af7c 	bne.w	8008386 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800848e:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <xQueueGenericSend+0x1f8>)
 8008490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	e772      	b.n	8008386 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80084a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084a2:	f000 fb6d 	bl	8008b80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084a6:	f000 fec1 	bl	800922c <xTaskResumeAll>
 80084aa:	e76c      	b.n	8008386 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80084ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084ae:	f000 fb67 	bl	8008b80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084b2:	f000 febb 	bl	800922c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80084b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3738      	adds	r7, #56	; 0x38
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	e000ed04 	.word	0xe000ed04

080084c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b090      	sub	sp, #64	; 0x40
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
 80084d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80084d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10a      	bne.n	80084f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084ee:	bf00      	nop
 80084f0:	e7fe      	b.n	80084f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d103      	bne.n	8008500 <xQueueGenericSendFromISR+0x3c>
 80084f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d101      	bne.n	8008504 <xQueueGenericSendFromISR+0x40>
 8008500:	2301      	movs	r3, #1
 8008502:	e000      	b.n	8008506 <xQueueGenericSendFromISR+0x42>
 8008504:	2300      	movs	r3, #0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d10a      	bne.n	8008520 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800851c:	bf00      	nop
 800851e:	e7fe      	b.n	800851e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	2b02      	cmp	r3, #2
 8008524:	d103      	bne.n	800852e <xQueueGenericSendFromISR+0x6a>
 8008526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800852a:	2b01      	cmp	r3, #1
 800852c:	d101      	bne.n	8008532 <xQueueGenericSendFromISR+0x6e>
 800852e:	2301      	movs	r3, #1
 8008530:	e000      	b.n	8008534 <xQueueGenericSendFromISR+0x70>
 8008532:	2300      	movs	r3, #0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10a      	bne.n	800854e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853c:	f383 8811 	msr	BASEPRI, r3
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	f3bf 8f4f 	dsb	sy
 8008548:	623b      	str	r3, [r7, #32]
}
 800854a:	bf00      	nop
 800854c:	e7fe      	b.n	800854c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800854e:	f002 f89b 	bl	800a688 <vPortValidateInterruptPriority>
	__asm volatile
 8008552:	f3ef 8211 	mrs	r2, BASEPRI
 8008556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	61fa      	str	r2, [r7, #28]
 8008568:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800856a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800856c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800856e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008576:	429a      	cmp	r2, r3
 8008578:	d302      	bcc.n	8008580 <xQueueGenericSendFromISR+0xbc>
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b02      	cmp	r3, #2
 800857e:	d12f      	bne.n	80085e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008582:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800858a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	68b9      	ldr	r1, [r7, #8]
 8008594:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008596:	f000 fa63 	bl	8008a60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800859a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800859e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a2:	d112      	bne.n	80085ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d016      	beq.n	80085da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ae:	3324      	adds	r3, #36	; 0x24
 80085b0:	4618      	mov	r0, r3
 80085b2:	f001 f86b 	bl	800968c <xTaskRemoveFromEventList>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00e      	beq.n	80085da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00b      	beq.n	80085da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	601a      	str	r2, [r3, #0]
 80085c8:	e007      	b.n	80085da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80085ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80085ce:	3301      	adds	r3, #1
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	b25a      	sxtb	r2, r3
 80085d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80085da:	2301      	movs	r3, #1
 80085dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80085de:	e001      	b.n	80085e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80085e0:	2300      	movs	r3, #0
 80085e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e6:	617b      	str	r3, [r7, #20]
	__asm volatile
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	f383 8811 	msr	BASEPRI, r3
}
 80085ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3740      	adds	r7, #64	; 0x40
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b08e      	sub	sp, #56	; 0x38
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10a      	bne.n	8008624 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	623b      	str	r3, [r7, #32]
}
 8008620:	bf00      	nop
 8008622:	e7fe      	b.n	8008622 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00a      	beq.n	8008642 <xQueueGiveFromISR+0x48>
	__asm volatile
 800862c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	61fb      	str	r3, [r7, #28]
}
 800863e:	bf00      	nop
 8008640:	e7fe      	b.n	8008640 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d103      	bne.n	8008652 <xQueueGiveFromISR+0x58>
 800864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d101      	bne.n	8008656 <xQueueGiveFromISR+0x5c>
 8008652:	2301      	movs	r3, #1
 8008654:	e000      	b.n	8008658 <xQueueGiveFromISR+0x5e>
 8008656:	2300      	movs	r3, #0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10a      	bne.n	8008672 <xQueueGiveFromISR+0x78>
	__asm volatile
 800865c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	61bb      	str	r3, [r7, #24]
}
 800866e:	bf00      	nop
 8008670:	e7fe      	b.n	8008670 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008672:	f002 f809 	bl	800a688 <vPortValidateInterruptPriority>
	__asm volatile
 8008676:	f3ef 8211 	mrs	r2, BASEPRI
 800867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	617a      	str	r2, [r7, #20]
 800868c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800868e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008690:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008696:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800869e:	429a      	cmp	r2, r3
 80086a0:	d22b      	bcs.n	80086fa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ae:	1c5a      	adds	r2, r3, #1
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80086b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80086b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086bc:	d112      	bne.n	80086e4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d016      	beq.n	80086f4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	3324      	adds	r3, #36	; 0x24
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 ffde 	bl	800968c <xTaskRemoveFromEventList>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00e      	beq.n	80086f4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00b      	beq.n	80086f4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	2201      	movs	r2, #1
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	e007      	b.n	80086f4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086e8:	3301      	adds	r3, #1
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	b25a      	sxtb	r2, r3
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80086f4:	2301      	movs	r3, #1
 80086f6:	637b      	str	r3, [r7, #52]	; 0x34
 80086f8:	e001      	b.n	80086fe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80086fa:	2300      	movs	r3, #0
 80086fc:	637b      	str	r3, [r7, #52]	; 0x34
 80086fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008700:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f383 8811 	msr	BASEPRI, r3
}
 8008708:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800870a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800870c:	4618      	mov	r0, r3
 800870e:	3738      	adds	r7, #56	; 0x38
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b08c      	sub	sp, #48	; 0x30
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008720:	2300      	movs	r3, #0
 8008722:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10a      	bne.n	8008744 <xQueueReceive+0x30>
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	623b      	str	r3, [r7, #32]
}
 8008740:	bf00      	nop
 8008742:	e7fe      	b.n	8008742 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d103      	bne.n	8008752 <xQueueReceive+0x3e>
 800874a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <xQueueReceive+0x42>
 8008752:	2301      	movs	r3, #1
 8008754:	e000      	b.n	8008758 <xQueueReceive+0x44>
 8008756:	2300      	movs	r3, #0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10a      	bne.n	8008772 <xQueueReceive+0x5e>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	61fb      	str	r3, [r7, #28]
}
 800876e:	bf00      	nop
 8008770:	e7fe      	b.n	8008770 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008772:	f001 f949 	bl	8009a08 <xTaskGetSchedulerState>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d102      	bne.n	8008782 <xQueueReceive+0x6e>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <xQueueReceive+0x72>
 8008782:	2301      	movs	r3, #1
 8008784:	e000      	b.n	8008788 <xQueueReceive+0x74>
 8008786:	2300      	movs	r3, #0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10a      	bne.n	80087a2 <xQueueReceive+0x8e>
	__asm volatile
 800878c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008790:	f383 8811 	msr	BASEPRI, r3
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	61bb      	str	r3, [r7, #24]
}
 800879e:	bf00      	nop
 80087a0:	e7fe      	b.n	80087a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087a2:	f001 fe8f 	bl	800a4c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d01f      	beq.n	80087f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087b2:	68b9      	ldr	r1, [r7, #8]
 80087b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087b6:	f000 f9bd 	bl	8008b34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	1e5a      	subs	r2, r3, #1
 80087be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00f      	beq.n	80087ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	3310      	adds	r3, #16
 80087ce:	4618      	mov	r0, r3
 80087d0:	f000 ff5c 	bl	800968c <xTaskRemoveFromEventList>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d007      	beq.n	80087ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80087da:	4b3d      	ldr	r3, [pc, #244]	; (80088d0 <xQueueReceive+0x1bc>)
 80087dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087e0:	601a      	str	r2, [r3, #0]
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80087ea:	f001 fe9b 	bl	800a524 <vPortExitCritical>
				return pdPASS;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e069      	b.n	80088c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d103      	bne.n	8008800 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087f8:	f001 fe94 	bl	800a524 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087fc:	2300      	movs	r3, #0
 80087fe:	e062      	b.n	80088c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008802:	2b00      	cmp	r3, #0
 8008804:	d106      	bne.n	8008814 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008806:	f107 0310 	add.w	r3, r7, #16
 800880a:	4618      	mov	r0, r3
 800880c:	f000 ffa2 	bl	8009754 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008810:	2301      	movs	r3, #1
 8008812:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008814:	f001 fe86 	bl	800a524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008818:	f000 fcfa 	bl	8009210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800881c:	f001 fe52 	bl	800a4c4 <vPortEnterCritical>
 8008820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008822:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008826:	b25b      	sxtb	r3, r3
 8008828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882c:	d103      	bne.n	8008836 <xQueueReceive+0x122>
 800882e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800883c:	b25b      	sxtb	r3, r3
 800883e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008842:	d103      	bne.n	800884c <xQueueReceive+0x138>
 8008844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800884c:	f001 fe6a 	bl	800a524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008850:	1d3a      	adds	r2, r7, #4
 8008852:	f107 0310 	add.w	r3, r7, #16
 8008856:	4611      	mov	r1, r2
 8008858:	4618      	mov	r0, r3
 800885a:	f000 ff91 	bl	8009780 <xTaskCheckForTimeOut>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d123      	bne.n	80088ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008866:	f000 f9dd 	bl	8008c24 <prvIsQueueEmpty>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d017      	beq.n	80088a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	3324      	adds	r3, #36	; 0x24
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	4611      	mov	r1, r2
 8008878:	4618      	mov	r0, r3
 800887a:	f000 feb7 	bl	80095ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800887e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008880:	f000 f97e 	bl	8008b80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008884:	f000 fcd2 	bl	800922c <xTaskResumeAll>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d189      	bne.n	80087a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800888e:	4b10      	ldr	r3, [pc, #64]	; (80088d0 <xQueueReceive+0x1bc>)
 8008890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008894:	601a      	str	r2, [r3, #0]
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	e780      	b.n	80087a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80088a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088a2:	f000 f96d 	bl	8008b80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088a6:	f000 fcc1 	bl	800922c <xTaskResumeAll>
 80088aa:	e77a      	b.n	80087a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80088ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088ae:	f000 f967 	bl	8008b80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088b2:	f000 fcbb 	bl	800922c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088b8:	f000 f9b4 	bl	8008c24 <prvIsQueueEmpty>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f43f af6f 	beq.w	80087a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80088c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3730      	adds	r7, #48	; 0x30
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	e000ed04 	.word	0xe000ed04

080088d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b08e      	sub	sp, #56	; 0x38
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80088e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10a      	bne.n	8008900 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80088ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ee:	f383 8811 	msr	BASEPRI, r3
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	623b      	str	r3, [r7, #32]
}
 80088fc:	bf00      	nop
 80088fe:	e7fe      	b.n	80088fe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d103      	bne.n	800890e <xQueueReceiveFromISR+0x3a>
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <xQueueReceiveFromISR+0x3e>
 800890e:	2301      	movs	r3, #1
 8008910:	e000      	b.n	8008914 <xQueueReceiveFromISR+0x40>
 8008912:	2300      	movs	r3, #0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10a      	bne.n	800892e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	61fb      	str	r3, [r7, #28]
}
 800892a:	bf00      	nop
 800892c:	e7fe      	b.n	800892c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800892e:	f001 feab 	bl	800a688 <vPortValidateInterruptPriority>
	__asm volatile
 8008932:	f3ef 8211 	mrs	r2, BASEPRI
 8008936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893a:	f383 8811 	msr	BASEPRI, r3
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	61ba      	str	r2, [r7, #24]
 8008948:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800894a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800894c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008952:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008956:	2b00      	cmp	r3, #0
 8008958:	d02f      	beq.n	80089ba <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800895a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008964:	68b9      	ldr	r1, [r7, #8]
 8008966:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008968:	f000 f8e4 	bl	8008b34 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896e:	1e5a      	subs	r2, r3, #1
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008974:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897c:	d112      	bne.n	80089a4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800897e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d016      	beq.n	80089b4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	3310      	adds	r3, #16
 800898a:	4618      	mov	r0, r3
 800898c:	f000 fe7e 	bl	800968c <xTaskRemoveFromEventList>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00e      	beq.n	80089b4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00b      	beq.n	80089b4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	e007      	b.n	80089b4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80089a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089a8:	3301      	adds	r3, #1
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	b25a      	sxtb	r2, r3
 80089ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80089b4:	2301      	movs	r3, #1
 80089b6:	637b      	str	r3, [r7, #52]	; 0x34
 80089b8:	e001      	b.n	80089be <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80089ba:	2300      	movs	r3, #0
 80089bc:	637b      	str	r3, [r7, #52]	; 0x34
 80089be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	f383 8811 	msr	BASEPRI, r3
}
 80089c8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80089ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3738      	adds	r7, #56	; 0x38
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10a      	bne.n	80089fc <uxQueueSpacesAvailable+0x28>
	__asm volatile
 80089e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	60fb      	str	r3, [r7, #12]
}
 80089f8:	bf00      	nop
 80089fa:	e7fe      	b.n	80089fa <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 80089fc:	f001 fd62 	bl	800a4c4 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008a0c:	f001 fd8a 	bl	800a524 <vPortExitCritical>

	return uxReturn;
 8008a10:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008a12:	4618      	mov	r0, r3
 8008a14:	3718      	adds	r7, #24
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10a      	bne.n	8008a42 <vQueueDelete+0x28>
	__asm volatile
 8008a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a30:	f383 8811 	msr	BASEPRI, r3
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	60bb      	str	r3, [r7, #8]
}
 8008a3e:	bf00      	nop
 8008a40:	e7fe      	b.n	8008a40 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f000 f946 	bl	8008cd4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d102      	bne.n	8008a58 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f001 ff24 	bl	800a8a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008a58:	bf00      	nop
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10d      	bne.n	8008a9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d14d      	bne.n	8008b22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 ffda 	bl	8009a44 <xTaskPriorityDisinherit>
 8008a90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	609a      	str	r2, [r3, #8]
 8008a98:	e043      	b.n	8008b22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d119      	bne.n	8008ad4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6858      	ldr	r0, [r3, #4]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	68b9      	ldr	r1, [r7, #8]
 8008aac:	f002 ff33 	bl	800b916 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab8:	441a      	add	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	685a      	ldr	r2, [r3, #4]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d32b      	bcc.n	8008b22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	605a      	str	r2, [r3, #4]
 8008ad2:	e026      	b.n	8008b22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	68d8      	ldr	r0, [r3, #12]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008adc:	461a      	mov	r2, r3
 8008ade:	68b9      	ldr	r1, [r7, #8]
 8008ae0:	f002 ff19 	bl	800b916 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	68da      	ldr	r2, [r3, #12]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aec:	425b      	negs	r3, r3
 8008aee:	441a      	add	r2, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	68da      	ldr	r2, [r3, #12]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d207      	bcs.n	8008b10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	689a      	ldr	r2, [r3, #8]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b08:	425b      	negs	r3, r3
 8008b0a:	441a      	add	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d105      	bne.n	8008b22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d002      	beq.n	8008b22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	1c5a      	adds	r2, r3, #1
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008b2a:	697b      	ldr	r3, [r7, #20]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d018      	beq.n	8008b78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	68da      	ldr	r2, [r3, #12]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4e:	441a      	add	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	68da      	ldr	r2, [r3, #12]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d303      	bcc.n	8008b68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	68d9      	ldr	r1, [r3, #12]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b70:	461a      	mov	r2, r3
 8008b72:	6838      	ldr	r0, [r7, #0]
 8008b74:	f002 fecf 	bl	800b916 <memcpy>
	}
}
 8008b78:	bf00      	nop
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b88:	f001 fc9c 	bl	800a4c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b94:	e011      	b.n	8008bba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d012      	beq.n	8008bc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	3324      	adds	r3, #36	; 0x24
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 fd72 	bl	800968c <xTaskRemoveFromEventList>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d001      	beq.n	8008bb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008bae:	f000 fe49 	bl	8009844 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	dce9      	bgt.n	8008b96 <prvUnlockQueue+0x16>
 8008bc2:	e000      	b.n	8008bc6 <prvUnlockQueue+0x46>
					break;
 8008bc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	22ff      	movs	r2, #255	; 0xff
 8008bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008bce:	f001 fca9 	bl	800a524 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008bd2:	f001 fc77 	bl	800a4c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bde:	e011      	b.n	8008c04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d012      	beq.n	8008c0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	3310      	adds	r3, #16
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 fd4d 	bl	800968c <xTaskRemoveFromEventList>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d001      	beq.n	8008bfc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008bf8:	f000 fe24 	bl	8009844 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008bfc:	7bbb      	ldrb	r3, [r7, #14]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	dce9      	bgt.n	8008be0 <prvUnlockQueue+0x60>
 8008c0c:	e000      	b.n	8008c10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	22ff      	movs	r2, #255	; 0xff
 8008c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008c18:	f001 fc84 	bl	800a524 <vPortExitCritical>
}
 8008c1c:	bf00      	nop
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c2c:	f001 fc4a 	bl	800a4c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d102      	bne.n	8008c3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	e001      	b.n	8008c42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c42:	f001 fc6f 	bl	800a524 <vPortExitCritical>

	return xReturn;
 8008c46:	68fb      	ldr	r3, [r7, #12]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c58:	f001 fc34 	bl	800a4c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d102      	bne.n	8008c6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	60fb      	str	r3, [r7, #12]
 8008c6c:	e001      	b.n	8008c72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c72:	f001 fc57 	bl	800a524 <vPortExitCritical>

	return xReturn;
 8008c76:	68fb      	ldr	r3, [r7, #12]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	60fb      	str	r3, [r7, #12]
 8008c8e:	e014      	b.n	8008cba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c90:	4a0f      	ldr	r2, [pc, #60]	; (8008cd0 <vQueueAddToRegistry+0x50>)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10b      	bne.n	8008cb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c9c:	490c      	ldr	r1, [pc, #48]	; (8008cd0 <vQueueAddToRegistry+0x50>)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	683a      	ldr	r2, [r7, #0]
 8008ca2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008ca6:	4a0a      	ldr	r2, [pc, #40]	; (8008cd0 <vQueueAddToRegistry+0x50>)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	00db      	lsls	r3, r3, #3
 8008cac:	4413      	add	r3, r2
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008cb2:	e006      	b.n	8008cc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	60fb      	str	r3, [r7, #12]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2b07      	cmp	r3, #7
 8008cbe:	d9e7      	bls.n	8008c90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008cc0:	bf00      	nop
 8008cc2:	bf00      	nop
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	20000cb0 	.word	0x20000cb0

08008cd4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cdc:	2300      	movs	r3, #0
 8008cde:	60fb      	str	r3, [r7, #12]
 8008ce0:	e016      	b.n	8008d10 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008ce2:	4a10      	ldr	r2, [pc, #64]	; (8008d24 <vQueueUnregisterQueue+0x50>)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	00db      	lsls	r3, r3, #3
 8008ce8:	4413      	add	r3, r2
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d10b      	bne.n	8008d0a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008cf2:	4a0c      	ldr	r2, [pc, #48]	; (8008d24 <vQueueUnregisterQueue+0x50>)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008cfc:	4a09      	ldr	r2, [pc, #36]	; (8008d24 <vQueueUnregisterQueue+0x50>)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	00db      	lsls	r3, r3, #3
 8008d02:	4413      	add	r3, r2
 8008d04:	2200      	movs	r2, #0
 8008d06:	605a      	str	r2, [r3, #4]
				break;
 8008d08:	e006      	b.n	8008d18 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	60fb      	str	r3, [r7, #12]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2b07      	cmp	r3, #7
 8008d14:	d9e5      	bls.n	8008ce2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008d16:	bf00      	nop
 8008d18:	bf00      	nop
 8008d1a:	3714      	adds	r7, #20
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr
 8008d24:	20000cb0 	.word	0x20000cb0

08008d28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008d38:	f001 fbc4 	bl	800a4c4 <vPortEnterCritical>
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d42:	b25b      	sxtb	r3, r3
 8008d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d48:	d103      	bne.n	8008d52 <vQueueWaitForMessageRestricted+0x2a>
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d58:	b25b      	sxtb	r3, r3
 8008d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5e:	d103      	bne.n	8008d68 <vQueueWaitForMessageRestricted+0x40>
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d68:	f001 fbdc 	bl	800a524 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d106      	bne.n	8008d82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	3324      	adds	r3, #36	; 0x24
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	68b9      	ldr	r1, [r7, #8]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 fc59 	bl	8009634 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008d82:	6978      	ldr	r0, [r7, #20]
 8008d84:	f7ff fefc 	bl	8008b80 <prvUnlockQueue>
	}
 8008d88:	bf00      	nop
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08e      	sub	sp, #56	; 0x38
 8008d94:	af04      	add	r7, sp, #16
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	607a      	str	r2, [r7, #4]
 8008d9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10a      	bne.n	8008dba <xTaskCreateStatic+0x2a>
	__asm volatile
 8008da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da8:	f383 8811 	msr	BASEPRI, r3
 8008dac:	f3bf 8f6f 	isb	sy
 8008db0:	f3bf 8f4f 	dsb	sy
 8008db4:	623b      	str	r3, [r7, #32]
}
 8008db6:	bf00      	nop
 8008db8:	e7fe      	b.n	8008db8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10a      	bne.n	8008dd6 <xTaskCreateStatic+0x46>
	__asm volatile
 8008dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc4:	f383 8811 	msr	BASEPRI, r3
 8008dc8:	f3bf 8f6f 	isb	sy
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	61fb      	str	r3, [r7, #28]
}
 8008dd2:	bf00      	nop
 8008dd4:	e7fe      	b.n	8008dd4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008dd6:	2360      	movs	r3, #96	; 0x60
 8008dd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	2b60      	cmp	r3, #96	; 0x60
 8008dde:	d00a      	beq.n	8008df6 <xTaskCreateStatic+0x66>
	__asm volatile
 8008de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	61bb      	str	r3, [r7, #24]
}
 8008df2:	bf00      	nop
 8008df4:	e7fe      	b.n	8008df4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008df6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d01e      	beq.n	8008e3c <xTaskCreateStatic+0xac>
 8008dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d01b      	beq.n	8008e3c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e06:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	2202      	movs	r2, #2
 8008e12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e16:	2300      	movs	r3, #0
 8008e18:	9303      	str	r3, [sp, #12]
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	9302      	str	r3, [sp, #8]
 8008e1e:	f107 0314 	add.w	r3, r7, #20
 8008e22:	9301      	str	r3, [sp, #4]
 8008e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e26:	9300      	str	r3, [sp, #0]
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	68b9      	ldr	r1, [r7, #8]
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f000 f850 	bl	8008ed4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e36:	f000 f8df 	bl	8008ff8 <prvAddNewTaskToReadyList>
 8008e3a:	e001      	b.n	8008e40 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008e40:	697b      	ldr	r3, [r7, #20]
	}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3728      	adds	r7, #40	; 0x28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b08c      	sub	sp, #48	; 0x30
 8008e4e:	af04      	add	r7, sp, #16
 8008e50:	60f8      	str	r0, [r7, #12]
 8008e52:	60b9      	str	r1, [r7, #8]
 8008e54:	603b      	str	r3, [r7, #0]
 8008e56:	4613      	mov	r3, r2
 8008e58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e5a:	88fb      	ldrh	r3, [r7, #6]
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f001 fc52 	bl	800a708 <pvPortMalloc>
 8008e64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00e      	beq.n	8008e8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e6c:	2060      	movs	r0, #96	; 0x60
 8008e6e:	f001 fc4b 	bl	800a708 <pvPortMalloc>
 8008e72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	697a      	ldr	r2, [r7, #20]
 8008e7e:	631a      	str	r2, [r3, #48]	; 0x30
 8008e80:	e005      	b.n	8008e8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e82:	6978      	ldr	r0, [r7, #20]
 8008e84:	f001 fd0c 	bl	800a8a0 <vPortFree>
 8008e88:	e001      	b.n	8008e8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d017      	beq.n	8008ec4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e9c:	88fa      	ldrh	r2, [r7, #6]
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	9303      	str	r3, [sp, #12]
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	9302      	str	r3, [sp, #8]
 8008ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea8:	9301      	str	r3, [sp, #4]
 8008eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eac:	9300      	str	r3, [sp, #0]
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	68b9      	ldr	r1, [r7, #8]
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f000 f80e 	bl	8008ed4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008eb8:	69f8      	ldr	r0, [r7, #28]
 8008eba:	f000 f89d 	bl	8008ff8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	61bb      	str	r3, [r7, #24]
 8008ec2:	e002      	b.n	8008eca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ec8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008eca:	69bb      	ldr	r3, [r7, #24]
	}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3720      	adds	r7, #32
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b088      	sub	sp, #32
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
 8008ee0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	461a      	mov	r2, r3
 8008eec:	21a5      	movs	r1, #165	; 0xa5
 8008eee:	f002 fc93 	bl	800b818 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008efc:	3b01      	subs	r3, #1
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	4413      	add	r3, r2
 8008f02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	f023 0307 	bic.w	r3, r3, #7
 8008f0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	f003 0307 	and.w	r3, r3, #7
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00a      	beq.n	8008f2c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1a:	f383 8811 	msr	BASEPRI, r3
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	617b      	str	r3, [r7, #20]
}
 8008f28:	bf00      	nop
 8008f2a:	e7fe      	b.n	8008f2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d01f      	beq.n	8008f72 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f32:	2300      	movs	r3, #0
 8008f34:	61fb      	str	r3, [r7, #28]
 8008f36:	e012      	b.n	8008f5e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	7819      	ldrb	r1, [r3, #0]
 8008f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	4413      	add	r3, r2
 8008f46:	3334      	adds	r3, #52	; 0x34
 8008f48:	460a      	mov	r2, r1
 8008f4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	4413      	add	r3, r2
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d006      	beq.n	8008f66 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	61fb      	str	r3, [r7, #28]
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	2b0f      	cmp	r3, #15
 8008f62:	d9e9      	bls.n	8008f38 <prvInitialiseNewTask+0x64>
 8008f64:	e000      	b.n	8008f68 <prvInitialiseNewTask+0x94>
			{
				break;
 8008f66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f70:	e003      	b.n	8008f7a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7c:	2b37      	cmp	r3, #55	; 0x37
 8008f7e:	d901      	bls.n	8008f84 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f80:	2337      	movs	r3, #55	; 0x37
 8008f82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f8e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f92:	2200      	movs	r2, #0
 8008f94:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f98:	3304      	adds	r3, #4
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fe ff58 	bl	8007e50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa2:	3318      	adds	r3, #24
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fe ff53 	bl	8007e50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc8:	2200      	movs	r2, #0
 8008fca:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	68f9      	ldr	r1, [r7, #12]
 8008fd8:	69b8      	ldr	r0, [r7, #24]
 8008fda:	f001 f943 	bl	800a264 <pxPortInitialiseStack>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d002      	beq.n	8008ff0 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ff0:	bf00      	nop
 8008ff2:	3720      	adds	r7, #32
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009000:	f001 fa60 	bl	800a4c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009004:	4b2d      	ldr	r3, [pc, #180]	; (80090bc <prvAddNewTaskToReadyList+0xc4>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3301      	adds	r3, #1
 800900a:	4a2c      	ldr	r2, [pc, #176]	; (80090bc <prvAddNewTaskToReadyList+0xc4>)
 800900c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800900e:	4b2c      	ldr	r3, [pc, #176]	; (80090c0 <prvAddNewTaskToReadyList+0xc8>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d109      	bne.n	800902a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009016:	4a2a      	ldr	r2, [pc, #168]	; (80090c0 <prvAddNewTaskToReadyList+0xc8>)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800901c:	4b27      	ldr	r3, [pc, #156]	; (80090bc <prvAddNewTaskToReadyList+0xc4>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d110      	bne.n	8009046 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009024:	f000 fc32 	bl	800988c <prvInitialiseTaskLists>
 8009028:	e00d      	b.n	8009046 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800902a:	4b26      	ldr	r3, [pc, #152]	; (80090c4 <prvAddNewTaskToReadyList+0xcc>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d109      	bne.n	8009046 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009032:	4b23      	ldr	r3, [pc, #140]	; (80090c0 <prvAddNewTaskToReadyList+0xc8>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903c:	429a      	cmp	r2, r3
 800903e:	d802      	bhi.n	8009046 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009040:	4a1f      	ldr	r2, [pc, #124]	; (80090c0 <prvAddNewTaskToReadyList+0xc8>)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009046:	4b20      	ldr	r3, [pc, #128]	; (80090c8 <prvAddNewTaskToReadyList+0xd0>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3301      	adds	r3, #1
 800904c:	4a1e      	ldr	r2, [pc, #120]	; (80090c8 <prvAddNewTaskToReadyList+0xd0>)
 800904e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009050:	4b1d      	ldr	r3, [pc, #116]	; (80090c8 <prvAddNewTaskToReadyList+0xd0>)
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800905c:	4b1b      	ldr	r3, [pc, #108]	; (80090cc <prvAddNewTaskToReadyList+0xd4>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	429a      	cmp	r2, r3
 8009062:	d903      	bls.n	800906c <prvAddNewTaskToReadyList+0x74>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009068:	4a18      	ldr	r2, [pc, #96]	; (80090cc <prvAddNewTaskToReadyList+0xd4>)
 800906a:	6013      	str	r3, [r2, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009070:	4613      	mov	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	4a15      	ldr	r2, [pc, #84]	; (80090d0 <prvAddNewTaskToReadyList+0xd8>)
 800907a:	441a      	add	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	3304      	adds	r3, #4
 8009080:	4619      	mov	r1, r3
 8009082:	4610      	mov	r0, r2
 8009084:	f7fe fef1 	bl	8007e6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009088:	f001 fa4c 	bl	800a524 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800908c:	4b0d      	ldr	r3, [pc, #52]	; (80090c4 <prvAddNewTaskToReadyList+0xcc>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00e      	beq.n	80090b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009094:	4b0a      	ldr	r3, [pc, #40]	; (80090c0 <prvAddNewTaskToReadyList+0xc8>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909e:	429a      	cmp	r2, r3
 80090a0:	d207      	bcs.n	80090b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80090a2:	4b0c      	ldr	r3, [pc, #48]	; (80090d4 <prvAddNewTaskToReadyList+0xdc>)
 80090a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090b2:	bf00      	nop
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	200011c4 	.word	0x200011c4
 80090c0:	20000cf0 	.word	0x20000cf0
 80090c4:	200011d0 	.word	0x200011d0
 80090c8:	200011e0 	.word	0x200011e0
 80090cc:	200011cc 	.word	0x200011cc
 80090d0:	20000cf4 	.word	0x20000cf4
 80090d4:	e000ed04 	.word	0xe000ed04

080090d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80090e0:	2300      	movs	r3, #0
 80090e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d017      	beq.n	800911a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80090ea:	4b13      	ldr	r3, [pc, #76]	; (8009138 <vTaskDelay+0x60>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00a      	beq.n	8009108 <vTaskDelay+0x30>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	60bb      	str	r3, [r7, #8]
}
 8009104:	bf00      	nop
 8009106:	e7fe      	b.n	8009106 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009108:	f000 f882 	bl	8009210 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800910c:	2100      	movs	r1, #0
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fd06 	bl	8009b20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009114:	f000 f88a 	bl	800922c <xTaskResumeAll>
 8009118:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d107      	bne.n	8009130 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009120:	4b06      	ldr	r3, [pc, #24]	; (800913c <vTaskDelay+0x64>)
 8009122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009126:	601a      	str	r2, [r3, #0]
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009130:	bf00      	nop
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	200011ec 	.word	0x200011ec
 800913c:	e000ed04 	.word	0xe000ed04

08009140 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b08a      	sub	sp, #40	; 0x28
 8009144:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009146:	2300      	movs	r3, #0
 8009148:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800914a:	2300      	movs	r3, #0
 800914c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800914e:	463a      	mov	r2, r7
 8009150:	1d39      	adds	r1, r7, #4
 8009152:	f107 0308 	add.w	r3, r7, #8
 8009156:	4618      	mov	r0, r3
 8009158:	f7fe fe26 	bl	8007da8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	9202      	str	r2, [sp, #8]
 8009164:	9301      	str	r3, [sp, #4]
 8009166:	2300      	movs	r3, #0
 8009168:	9300      	str	r3, [sp, #0]
 800916a:	2300      	movs	r3, #0
 800916c:	460a      	mov	r2, r1
 800916e:	4922      	ldr	r1, [pc, #136]	; (80091f8 <vTaskStartScheduler+0xb8>)
 8009170:	4822      	ldr	r0, [pc, #136]	; (80091fc <vTaskStartScheduler+0xbc>)
 8009172:	f7ff fe0d 	bl	8008d90 <xTaskCreateStatic>
 8009176:	4603      	mov	r3, r0
 8009178:	4a21      	ldr	r2, [pc, #132]	; (8009200 <vTaskStartScheduler+0xc0>)
 800917a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800917c:	4b20      	ldr	r3, [pc, #128]	; (8009200 <vTaskStartScheduler+0xc0>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d002      	beq.n	800918a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009184:	2301      	movs	r3, #1
 8009186:	617b      	str	r3, [r7, #20]
 8009188:	e001      	b.n	800918e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800918a:	2300      	movs	r3, #0
 800918c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	2b01      	cmp	r3, #1
 8009192:	d102      	bne.n	800919a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009194:	f000 fd18 	bl	8009bc8 <xTimerCreateTimerTask>
 8009198:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d118      	bne.n	80091d2 <vTaskStartScheduler+0x92>
	__asm volatile
 80091a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a4:	f383 8811 	msr	BASEPRI, r3
 80091a8:	f3bf 8f6f 	isb	sy
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	613b      	str	r3, [r7, #16]
}
 80091b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80091b4:	4b13      	ldr	r3, [pc, #76]	; (8009204 <vTaskStartScheduler+0xc4>)
 80091b6:	f04f 32ff 	mov.w	r2, #4294967295
 80091ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80091bc:	4b12      	ldr	r3, [pc, #72]	; (8009208 <vTaskStartScheduler+0xc8>)
 80091be:	2201      	movs	r2, #1
 80091c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80091c2:	4b12      	ldr	r3, [pc, #72]	; (800920c <vTaskStartScheduler+0xcc>)
 80091c4:	2200      	movs	r2, #0
 80091c6:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80091c8:	f7f7 ff92 	bl	80010f0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80091cc:	f001 f8d8 	bl	800a380 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80091d0:	e00e      	b.n	80091f0 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d8:	d10a      	bne.n	80091f0 <vTaskStartScheduler+0xb0>
	__asm volatile
 80091da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091de:	f383 8811 	msr	BASEPRI, r3
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	60fb      	str	r3, [r7, #12]
}
 80091ec:	bf00      	nop
 80091ee:	e7fe      	b.n	80091ee <vTaskStartScheduler+0xae>
}
 80091f0:	bf00      	nop
 80091f2:	3718      	adds	r7, #24
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	0800daa4 	.word	0x0800daa4
 80091fc:	0800985d 	.word	0x0800985d
 8009200:	200011e8 	.word	0x200011e8
 8009204:	200011e4 	.word	0x200011e4
 8009208:	200011d0 	.word	0x200011d0
 800920c:	200011c8 	.word	0x200011c8

08009210 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009210:	b480      	push	{r7}
 8009212:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009214:	4b04      	ldr	r3, [pc, #16]	; (8009228 <vTaskSuspendAll+0x18>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	3301      	adds	r3, #1
 800921a:	4a03      	ldr	r2, [pc, #12]	; (8009228 <vTaskSuspendAll+0x18>)
 800921c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800921e:	bf00      	nop
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr
 8009228:	200011ec 	.word	0x200011ec

0800922c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009232:	2300      	movs	r3, #0
 8009234:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009236:	2300      	movs	r3, #0
 8009238:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800923a:	4b42      	ldr	r3, [pc, #264]	; (8009344 <xTaskResumeAll+0x118>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10a      	bne.n	8009258 <xTaskResumeAll+0x2c>
	__asm volatile
 8009242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009246:	f383 8811 	msr	BASEPRI, r3
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	603b      	str	r3, [r7, #0]
}
 8009254:	bf00      	nop
 8009256:	e7fe      	b.n	8009256 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009258:	f001 f934 	bl	800a4c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800925c:	4b39      	ldr	r3, [pc, #228]	; (8009344 <xTaskResumeAll+0x118>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	3b01      	subs	r3, #1
 8009262:	4a38      	ldr	r2, [pc, #224]	; (8009344 <xTaskResumeAll+0x118>)
 8009264:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009266:	4b37      	ldr	r3, [pc, #220]	; (8009344 <xTaskResumeAll+0x118>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d162      	bne.n	8009334 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800926e:	4b36      	ldr	r3, [pc, #216]	; (8009348 <xTaskResumeAll+0x11c>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d05e      	beq.n	8009334 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009276:	e02f      	b.n	80092d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009278:	4b34      	ldr	r3, [pc, #208]	; (800934c <xTaskResumeAll+0x120>)
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	3318      	adds	r3, #24
 8009284:	4618      	mov	r0, r3
 8009286:	f7fe fe4d 	bl	8007f24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	3304      	adds	r3, #4
 800928e:	4618      	mov	r0, r3
 8009290:	f7fe fe48 	bl	8007f24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009298:	4b2d      	ldr	r3, [pc, #180]	; (8009350 <xTaskResumeAll+0x124>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	429a      	cmp	r2, r3
 800929e:	d903      	bls.n	80092a8 <xTaskResumeAll+0x7c>
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a4:	4a2a      	ldr	r2, [pc, #168]	; (8009350 <xTaskResumeAll+0x124>)
 80092a6:	6013      	str	r3, [r2, #0]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ac:	4613      	mov	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4413      	add	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	4a27      	ldr	r2, [pc, #156]	; (8009354 <xTaskResumeAll+0x128>)
 80092b6:	441a      	add	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	3304      	adds	r3, #4
 80092bc:	4619      	mov	r1, r3
 80092be:	4610      	mov	r0, r2
 80092c0:	f7fe fdd3 	bl	8007e6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c8:	4b23      	ldr	r3, [pc, #140]	; (8009358 <xTaskResumeAll+0x12c>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d302      	bcc.n	80092d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80092d2:	4b22      	ldr	r3, [pc, #136]	; (800935c <xTaskResumeAll+0x130>)
 80092d4:	2201      	movs	r2, #1
 80092d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092d8:	4b1c      	ldr	r3, [pc, #112]	; (800934c <xTaskResumeAll+0x120>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d1cb      	bne.n	8009278 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80092e6:	f000 fb6f 	bl	80099c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80092ea:	4b1d      	ldr	r3, [pc, #116]	; (8009360 <xTaskResumeAll+0x134>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d010      	beq.n	8009318 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092f6:	f000 f847 	bl	8009388 <xTaskIncrementTick>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009300:	4b16      	ldr	r3, [pc, #88]	; (800935c <xTaskResumeAll+0x130>)
 8009302:	2201      	movs	r2, #1
 8009304:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	3b01      	subs	r3, #1
 800930a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1f1      	bne.n	80092f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009312:	4b13      	ldr	r3, [pc, #76]	; (8009360 <xTaskResumeAll+0x134>)
 8009314:	2200      	movs	r2, #0
 8009316:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009318:	4b10      	ldr	r3, [pc, #64]	; (800935c <xTaskResumeAll+0x130>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d009      	beq.n	8009334 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009320:	2301      	movs	r3, #1
 8009322:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009324:	4b0f      	ldr	r3, [pc, #60]	; (8009364 <xTaskResumeAll+0x138>)
 8009326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800932a:	601a      	str	r2, [r3, #0]
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009334:	f001 f8f6 	bl	800a524 <vPortExitCritical>

	return xAlreadyYielded;
 8009338:	68bb      	ldr	r3, [r7, #8]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	200011ec 	.word	0x200011ec
 8009348:	200011c4 	.word	0x200011c4
 800934c:	20001184 	.word	0x20001184
 8009350:	200011cc 	.word	0x200011cc
 8009354:	20000cf4 	.word	0x20000cf4
 8009358:	20000cf0 	.word	0x20000cf0
 800935c:	200011d8 	.word	0x200011d8
 8009360:	200011d4 	.word	0x200011d4
 8009364:	e000ed04 	.word	0xe000ed04

08009368 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800936e:	4b05      	ldr	r3, [pc, #20]	; (8009384 <xTaskGetTickCount+0x1c>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009374:	687b      	ldr	r3, [r7, #4]
}
 8009376:	4618      	mov	r0, r3
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	200011c8 	.word	0x200011c8

08009388 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b086      	sub	sp, #24
 800938c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800938e:	2300      	movs	r3, #0
 8009390:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009392:	4b4f      	ldr	r3, [pc, #316]	; (80094d0 <xTaskIncrementTick+0x148>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	f040 808f 	bne.w	80094ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800939c:	4b4d      	ldr	r3, [pc, #308]	; (80094d4 <xTaskIncrementTick+0x14c>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3301      	adds	r3, #1
 80093a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80093a4:	4a4b      	ldr	r2, [pc, #300]	; (80094d4 <xTaskIncrementTick+0x14c>)
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d120      	bne.n	80093f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80093b0:	4b49      	ldr	r3, [pc, #292]	; (80094d8 <xTaskIncrementTick+0x150>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	603b      	str	r3, [r7, #0]
}
 80093cc:	bf00      	nop
 80093ce:	e7fe      	b.n	80093ce <xTaskIncrementTick+0x46>
 80093d0:	4b41      	ldr	r3, [pc, #260]	; (80094d8 <xTaskIncrementTick+0x150>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	60fb      	str	r3, [r7, #12]
 80093d6:	4b41      	ldr	r3, [pc, #260]	; (80094dc <xTaskIncrementTick+0x154>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a3f      	ldr	r2, [pc, #252]	; (80094d8 <xTaskIncrementTick+0x150>)
 80093dc:	6013      	str	r3, [r2, #0]
 80093de:	4a3f      	ldr	r2, [pc, #252]	; (80094dc <xTaskIncrementTick+0x154>)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6013      	str	r3, [r2, #0]
 80093e4:	4b3e      	ldr	r3, [pc, #248]	; (80094e0 <xTaskIncrementTick+0x158>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3301      	adds	r3, #1
 80093ea:	4a3d      	ldr	r2, [pc, #244]	; (80094e0 <xTaskIncrementTick+0x158>)
 80093ec:	6013      	str	r3, [r2, #0]
 80093ee:	f000 faeb 	bl	80099c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80093f2:	4b3c      	ldr	r3, [pc, #240]	; (80094e4 <xTaskIncrementTick+0x15c>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	693a      	ldr	r2, [r7, #16]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d349      	bcc.n	8009490 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093fc:	4b36      	ldr	r3, [pc, #216]	; (80094d8 <xTaskIncrementTick+0x150>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d104      	bne.n	8009410 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009406:	4b37      	ldr	r3, [pc, #220]	; (80094e4 <xTaskIncrementTick+0x15c>)
 8009408:	f04f 32ff 	mov.w	r2, #4294967295
 800940c:	601a      	str	r2, [r3, #0]
					break;
 800940e:	e03f      	b.n	8009490 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009410:	4b31      	ldr	r3, [pc, #196]	; (80094d8 <xTaskIncrementTick+0x150>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	429a      	cmp	r2, r3
 8009426:	d203      	bcs.n	8009430 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009428:	4a2e      	ldr	r2, [pc, #184]	; (80094e4 <xTaskIncrementTick+0x15c>)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800942e:	e02f      	b.n	8009490 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	3304      	adds	r3, #4
 8009434:	4618      	mov	r0, r3
 8009436:	f7fe fd75 	bl	8007f24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800943e:	2b00      	cmp	r3, #0
 8009440:	d004      	beq.n	800944c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	3318      	adds	r3, #24
 8009446:	4618      	mov	r0, r3
 8009448:	f7fe fd6c 	bl	8007f24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009450:	4b25      	ldr	r3, [pc, #148]	; (80094e8 <xTaskIncrementTick+0x160>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	429a      	cmp	r2, r3
 8009456:	d903      	bls.n	8009460 <xTaskIncrementTick+0xd8>
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945c:	4a22      	ldr	r2, [pc, #136]	; (80094e8 <xTaskIncrementTick+0x160>)
 800945e:	6013      	str	r3, [r2, #0]
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009464:	4613      	mov	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4413      	add	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	4a1f      	ldr	r2, [pc, #124]	; (80094ec <xTaskIncrementTick+0x164>)
 800946e:	441a      	add	r2, r3
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	3304      	adds	r3, #4
 8009474:	4619      	mov	r1, r3
 8009476:	4610      	mov	r0, r2
 8009478:	f7fe fcf7 	bl	8007e6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009480:	4b1b      	ldr	r3, [pc, #108]	; (80094f0 <xTaskIncrementTick+0x168>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009486:	429a      	cmp	r2, r3
 8009488:	d3b8      	bcc.n	80093fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800948a:	2301      	movs	r3, #1
 800948c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800948e:	e7b5      	b.n	80093fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009490:	4b17      	ldr	r3, [pc, #92]	; (80094f0 <xTaskIncrementTick+0x168>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009496:	4915      	ldr	r1, [pc, #84]	; (80094ec <xTaskIncrementTick+0x164>)
 8009498:	4613      	mov	r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4413      	add	r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	440b      	add	r3, r1
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d901      	bls.n	80094ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80094a8:	2301      	movs	r3, #1
 80094aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80094ac:	4b11      	ldr	r3, [pc, #68]	; (80094f4 <xTaskIncrementTick+0x16c>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d007      	beq.n	80094c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80094b4:	2301      	movs	r3, #1
 80094b6:	617b      	str	r3, [r7, #20]
 80094b8:	e004      	b.n	80094c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80094ba:	4b0f      	ldr	r3, [pc, #60]	; (80094f8 <xTaskIncrementTick+0x170>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3301      	adds	r3, #1
 80094c0:	4a0d      	ldr	r2, [pc, #52]	; (80094f8 <xTaskIncrementTick+0x170>)
 80094c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80094c4:	697b      	ldr	r3, [r7, #20]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3718      	adds	r7, #24
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	200011ec 	.word	0x200011ec
 80094d4:	200011c8 	.word	0x200011c8
 80094d8:	2000117c 	.word	0x2000117c
 80094dc:	20001180 	.word	0x20001180
 80094e0:	200011dc 	.word	0x200011dc
 80094e4:	200011e4 	.word	0x200011e4
 80094e8:	200011cc 	.word	0x200011cc
 80094ec:	20000cf4 	.word	0x20000cf4
 80094f0:	20000cf0 	.word	0x20000cf0
 80094f4:	200011d8 	.word	0x200011d8
 80094f8:	200011d4 	.word	0x200011d4

080094fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009502:	4b33      	ldr	r3, [pc, #204]	; (80095d0 <vTaskSwitchContext+0xd4>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d003      	beq.n	8009512 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800950a:	4b32      	ldr	r3, [pc, #200]	; (80095d4 <vTaskSwitchContext+0xd8>)
 800950c:	2201      	movs	r2, #1
 800950e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009510:	e05a      	b.n	80095c8 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 8009512:	4b30      	ldr	r3, [pc, #192]	; (80095d4 <vTaskSwitchContext+0xd8>)
 8009514:	2200      	movs	r2, #0
 8009516:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009518:	f7f7 fdf1 	bl	80010fe <getRunTimeCounterValue>
 800951c:	4603      	mov	r3, r0
 800951e:	4a2e      	ldr	r2, [pc, #184]	; (80095d8 <vTaskSwitchContext+0xdc>)
 8009520:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009522:	4b2d      	ldr	r3, [pc, #180]	; (80095d8 <vTaskSwitchContext+0xdc>)
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	4b2d      	ldr	r3, [pc, #180]	; (80095dc <vTaskSwitchContext+0xe0>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	429a      	cmp	r2, r3
 800952c:	d909      	bls.n	8009542 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800952e:	4b2c      	ldr	r3, [pc, #176]	; (80095e0 <vTaskSwitchContext+0xe4>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009534:	4a28      	ldr	r2, [pc, #160]	; (80095d8 <vTaskSwitchContext+0xdc>)
 8009536:	6810      	ldr	r0, [r2, #0]
 8009538:	4a28      	ldr	r2, [pc, #160]	; (80095dc <vTaskSwitchContext+0xe0>)
 800953a:	6812      	ldr	r2, [r2, #0]
 800953c:	1a82      	subs	r2, r0, r2
 800953e:	440a      	add	r2, r1
 8009540:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009542:	4b25      	ldr	r3, [pc, #148]	; (80095d8 <vTaskSwitchContext+0xdc>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a25      	ldr	r2, [pc, #148]	; (80095dc <vTaskSwitchContext+0xe0>)
 8009548:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800954a:	4b26      	ldr	r3, [pc, #152]	; (80095e4 <vTaskSwitchContext+0xe8>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	60fb      	str	r3, [r7, #12]
 8009550:	e010      	b.n	8009574 <vTaskSwitchContext+0x78>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10a      	bne.n	800956e <vTaskSwitchContext+0x72>
	__asm volatile
 8009558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955c:	f383 8811 	msr	BASEPRI, r3
 8009560:	f3bf 8f6f 	isb	sy
 8009564:	f3bf 8f4f 	dsb	sy
 8009568:	607b      	str	r3, [r7, #4]
}
 800956a:	bf00      	nop
 800956c:	e7fe      	b.n	800956c <vTaskSwitchContext+0x70>
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3b01      	subs	r3, #1
 8009572:	60fb      	str	r3, [r7, #12]
 8009574:	491c      	ldr	r1, [pc, #112]	; (80095e8 <vTaskSwitchContext+0xec>)
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	4613      	mov	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	440b      	add	r3, r1
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d0e4      	beq.n	8009552 <vTaskSwitchContext+0x56>
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	4613      	mov	r3, r2
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	4413      	add	r3, r2
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	4a15      	ldr	r2, [pc, #84]	; (80095e8 <vTaskSwitchContext+0xec>)
 8009594:	4413      	add	r3, r2
 8009596:	60bb      	str	r3, [r7, #8]
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	605a      	str	r2, [r3, #4]
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	685a      	ldr	r2, [r3, #4]
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	3308      	adds	r3, #8
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d104      	bne.n	80095b8 <vTaskSwitchContext+0xbc>
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	685a      	ldr	r2, [r3, #4]
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	605a      	str	r2, [r3, #4]
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	4a08      	ldr	r2, [pc, #32]	; (80095e0 <vTaskSwitchContext+0xe4>)
 80095c0:	6013      	str	r3, [r2, #0]
 80095c2:	4a08      	ldr	r2, [pc, #32]	; (80095e4 <vTaskSwitchContext+0xe8>)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6013      	str	r3, [r2, #0]
}
 80095c8:	bf00      	nop
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	200011ec 	.word	0x200011ec
 80095d4:	200011d8 	.word	0x200011d8
 80095d8:	200011f4 	.word	0x200011f4
 80095dc:	200011f0 	.word	0x200011f0
 80095e0:	20000cf0 	.word	0x20000cf0
 80095e4:	200011cc 	.word	0x200011cc
 80095e8:	20000cf4 	.word	0x20000cf4

080095ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10a      	bne.n	8009612 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	60fb      	str	r3, [r7, #12]
}
 800960e:	bf00      	nop
 8009610:	e7fe      	b.n	8009610 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009612:	4b07      	ldr	r3, [pc, #28]	; (8009630 <vTaskPlaceOnEventList+0x44>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	3318      	adds	r3, #24
 8009618:	4619      	mov	r1, r3
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7fe fc49 	bl	8007eb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009620:	2101      	movs	r1, #1
 8009622:	6838      	ldr	r0, [r7, #0]
 8009624:	f000 fa7c 	bl	8009b20 <prvAddCurrentTaskToDelayedList>
}
 8009628:	bf00      	nop
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	20000cf0 	.word	0x20000cf0

08009634 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d10a      	bne.n	800965c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964a:	f383 8811 	msr	BASEPRI, r3
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	617b      	str	r3, [r7, #20]
}
 8009658:	bf00      	nop
 800965a:	e7fe      	b.n	800965a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800965c:	4b0a      	ldr	r3, [pc, #40]	; (8009688 <vTaskPlaceOnEventListRestricted+0x54>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	3318      	adds	r3, #24
 8009662:	4619      	mov	r1, r3
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f7fe fc00 	bl	8007e6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d002      	beq.n	8009676 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009670:	f04f 33ff 	mov.w	r3, #4294967295
 8009674:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009676:	6879      	ldr	r1, [r7, #4]
 8009678:	68b8      	ldr	r0, [r7, #8]
 800967a:	f000 fa51 	bl	8009b20 <prvAddCurrentTaskToDelayedList>
	}
 800967e:	bf00      	nop
 8009680:	3718      	adds	r7, #24
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	20000cf0 	.word	0x20000cf0

0800968c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10a      	bne.n	80096b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	60fb      	str	r3, [r7, #12]
}
 80096b4:	bf00      	nop
 80096b6:	e7fe      	b.n	80096b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	3318      	adds	r3, #24
 80096bc:	4618      	mov	r0, r3
 80096be:	f7fe fc31 	bl	8007f24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096c2:	4b1e      	ldr	r3, [pc, #120]	; (800973c <xTaskRemoveFromEventList+0xb0>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d11d      	bne.n	8009706 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	3304      	adds	r3, #4
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fe fc28 	bl	8007f24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d8:	4b19      	ldr	r3, [pc, #100]	; (8009740 <xTaskRemoveFromEventList+0xb4>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d903      	bls.n	80096e8 <xTaskRemoveFromEventList+0x5c>
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e4:	4a16      	ldr	r2, [pc, #88]	; (8009740 <xTaskRemoveFromEventList+0xb4>)
 80096e6:	6013      	str	r3, [r2, #0]
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ec:	4613      	mov	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4a13      	ldr	r2, [pc, #76]	; (8009744 <xTaskRemoveFromEventList+0xb8>)
 80096f6:	441a      	add	r2, r3
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	3304      	adds	r3, #4
 80096fc:	4619      	mov	r1, r3
 80096fe:	4610      	mov	r0, r2
 8009700:	f7fe fbb3 	bl	8007e6a <vListInsertEnd>
 8009704:	e005      	b.n	8009712 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	3318      	adds	r3, #24
 800970a:	4619      	mov	r1, r3
 800970c:	480e      	ldr	r0, [pc, #56]	; (8009748 <xTaskRemoveFromEventList+0xbc>)
 800970e:	f7fe fbac 	bl	8007e6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009716:	4b0d      	ldr	r3, [pc, #52]	; (800974c <xTaskRemoveFromEventList+0xc0>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971c:	429a      	cmp	r2, r3
 800971e:	d905      	bls.n	800972c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009720:	2301      	movs	r3, #1
 8009722:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009724:	4b0a      	ldr	r3, [pc, #40]	; (8009750 <xTaskRemoveFromEventList+0xc4>)
 8009726:	2201      	movs	r2, #1
 8009728:	601a      	str	r2, [r3, #0]
 800972a:	e001      	b.n	8009730 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800972c:	2300      	movs	r3, #0
 800972e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009730:	697b      	ldr	r3, [r7, #20]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	200011ec 	.word	0x200011ec
 8009740:	200011cc 	.word	0x200011cc
 8009744:	20000cf4 	.word	0x20000cf4
 8009748:	20001184 	.word	0x20001184
 800974c:	20000cf0 	.word	0x20000cf0
 8009750:	200011d8 	.word	0x200011d8

08009754 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800975c:	4b06      	ldr	r3, [pc, #24]	; (8009778 <vTaskInternalSetTimeOutState+0x24>)
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009764:	4b05      	ldr	r3, [pc, #20]	; (800977c <vTaskInternalSetTimeOutState+0x28>)
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	605a      	str	r2, [r3, #4]
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	200011dc 	.word	0x200011dc
 800977c:	200011c8 	.word	0x200011c8

08009780 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b088      	sub	sp, #32
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10a      	bne.n	80097a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009794:	f383 8811 	msr	BASEPRI, r3
 8009798:	f3bf 8f6f 	isb	sy
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	613b      	str	r3, [r7, #16]
}
 80097a2:	bf00      	nop
 80097a4:	e7fe      	b.n	80097a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10a      	bne.n	80097c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	60fb      	str	r3, [r7, #12]
}
 80097be:	bf00      	nop
 80097c0:	e7fe      	b.n	80097c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80097c2:	f000 fe7f 	bl	800a4c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80097c6:	4b1d      	ldr	r3, [pc, #116]	; (800983c <xTaskCheckForTimeOut+0xbc>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	69ba      	ldr	r2, [r7, #24]
 80097d2:	1ad3      	subs	r3, r2, r3
 80097d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097de:	d102      	bne.n	80097e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80097e0:	2300      	movs	r3, #0
 80097e2:	61fb      	str	r3, [r7, #28]
 80097e4:	e023      	b.n	800982e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	4b15      	ldr	r3, [pc, #84]	; (8009840 <xTaskCheckForTimeOut+0xc0>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d007      	beq.n	8009802 <xTaskCheckForTimeOut+0x82>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	69ba      	ldr	r2, [r7, #24]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d302      	bcc.n	8009802 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80097fc:	2301      	movs	r3, #1
 80097fe:	61fb      	str	r3, [r7, #28]
 8009800:	e015      	b.n	800982e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	697a      	ldr	r2, [r7, #20]
 8009808:	429a      	cmp	r2, r3
 800980a:	d20b      	bcs.n	8009824 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	1ad2      	subs	r2, r2, r3
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f7ff ff9b 	bl	8009754 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800981e:	2300      	movs	r3, #0
 8009820:	61fb      	str	r3, [r7, #28]
 8009822:	e004      	b.n	800982e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	2200      	movs	r2, #0
 8009828:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800982a:	2301      	movs	r3, #1
 800982c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800982e:	f000 fe79 	bl	800a524 <vPortExitCritical>

	return xReturn;
 8009832:	69fb      	ldr	r3, [r7, #28]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3720      	adds	r7, #32
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	200011c8 	.word	0x200011c8
 8009840:	200011dc 	.word	0x200011dc

08009844 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009844:	b480      	push	{r7}
 8009846:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009848:	4b03      	ldr	r3, [pc, #12]	; (8009858 <vTaskMissedYield+0x14>)
 800984a:	2201      	movs	r2, #1
 800984c:	601a      	str	r2, [r3, #0]
}
 800984e:	bf00      	nop
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr
 8009858:	200011d8 	.word	0x200011d8

0800985c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009864:	f000 f852 	bl	800990c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009868:	4b06      	ldr	r3, [pc, #24]	; (8009884 <prvIdleTask+0x28>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d9f9      	bls.n	8009864 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009870:	4b05      	ldr	r3, [pc, #20]	; (8009888 <prvIdleTask+0x2c>)
 8009872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009876:	601a      	str	r2, [r3, #0]
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009880:	e7f0      	b.n	8009864 <prvIdleTask+0x8>
 8009882:	bf00      	nop
 8009884:	20000cf4 	.word	0x20000cf4
 8009888:	e000ed04 	.word	0xe000ed04

0800988c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009892:	2300      	movs	r3, #0
 8009894:	607b      	str	r3, [r7, #4]
 8009896:	e00c      	b.n	80098b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	4613      	mov	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4a12      	ldr	r2, [pc, #72]	; (80098ec <prvInitialiseTaskLists+0x60>)
 80098a4:	4413      	add	r3, r2
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fe fab2 	bl	8007e10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	3301      	adds	r3, #1
 80098b0:	607b      	str	r3, [r7, #4]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2b37      	cmp	r3, #55	; 0x37
 80098b6:	d9ef      	bls.n	8009898 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80098b8:	480d      	ldr	r0, [pc, #52]	; (80098f0 <prvInitialiseTaskLists+0x64>)
 80098ba:	f7fe faa9 	bl	8007e10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80098be:	480d      	ldr	r0, [pc, #52]	; (80098f4 <prvInitialiseTaskLists+0x68>)
 80098c0:	f7fe faa6 	bl	8007e10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80098c4:	480c      	ldr	r0, [pc, #48]	; (80098f8 <prvInitialiseTaskLists+0x6c>)
 80098c6:	f7fe faa3 	bl	8007e10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80098ca:	480c      	ldr	r0, [pc, #48]	; (80098fc <prvInitialiseTaskLists+0x70>)
 80098cc:	f7fe faa0 	bl	8007e10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80098d0:	480b      	ldr	r0, [pc, #44]	; (8009900 <prvInitialiseTaskLists+0x74>)
 80098d2:	f7fe fa9d 	bl	8007e10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80098d6:	4b0b      	ldr	r3, [pc, #44]	; (8009904 <prvInitialiseTaskLists+0x78>)
 80098d8:	4a05      	ldr	r2, [pc, #20]	; (80098f0 <prvInitialiseTaskLists+0x64>)
 80098da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80098dc:	4b0a      	ldr	r3, [pc, #40]	; (8009908 <prvInitialiseTaskLists+0x7c>)
 80098de:	4a05      	ldr	r2, [pc, #20]	; (80098f4 <prvInitialiseTaskLists+0x68>)
 80098e0:	601a      	str	r2, [r3, #0]
}
 80098e2:	bf00      	nop
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	20000cf4 	.word	0x20000cf4
 80098f0:	20001154 	.word	0x20001154
 80098f4:	20001168 	.word	0x20001168
 80098f8:	20001184 	.word	0x20001184
 80098fc:	20001198 	.word	0x20001198
 8009900:	200011b0 	.word	0x200011b0
 8009904:	2000117c 	.word	0x2000117c
 8009908:	20001180 	.word	0x20001180

0800990c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009912:	e019      	b.n	8009948 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009914:	f000 fdd6 	bl	800a4c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009918:	4b10      	ldr	r3, [pc, #64]	; (800995c <prvCheckTasksWaitingTermination+0x50>)
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	3304      	adds	r3, #4
 8009924:	4618      	mov	r0, r3
 8009926:	f7fe fafd 	bl	8007f24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800992a:	4b0d      	ldr	r3, [pc, #52]	; (8009960 <prvCheckTasksWaitingTermination+0x54>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	3b01      	subs	r3, #1
 8009930:	4a0b      	ldr	r2, [pc, #44]	; (8009960 <prvCheckTasksWaitingTermination+0x54>)
 8009932:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009934:	4b0b      	ldr	r3, [pc, #44]	; (8009964 <prvCheckTasksWaitingTermination+0x58>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	3b01      	subs	r3, #1
 800993a:	4a0a      	ldr	r2, [pc, #40]	; (8009964 <prvCheckTasksWaitingTermination+0x58>)
 800993c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800993e:	f000 fdf1 	bl	800a524 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f810 	bl	8009968 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009948:	4b06      	ldr	r3, [pc, #24]	; (8009964 <prvCheckTasksWaitingTermination+0x58>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d1e1      	bne.n	8009914 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009950:	bf00      	nop
 8009952:	bf00      	nop
 8009954:	3708      	adds	r7, #8
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	20001198 	.word	0x20001198
 8009960:	200011c4 	.word	0x200011c4
 8009964:	200011ac 	.word	0x200011ac

08009968 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009976:	2b00      	cmp	r3, #0
 8009978:	d108      	bne.n	800998c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800997e:	4618      	mov	r0, r3
 8009980:	f000 ff8e 	bl	800a8a0 <vPortFree>
				vPortFree( pxTCB );
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 ff8b 	bl	800a8a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800998a:	e018      	b.n	80099be <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009992:	2b01      	cmp	r3, #1
 8009994:	d103      	bne.n	800999e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 ff82 	bl	800a8a0 <vPortFree>
	}
 800999c:	e00f      	b.n	80099be <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80099a4:	2b02      	cmp	r3, #2
 80099a6:	d00a      	beq.n	80099be <prvDeleteTCB+0x56>
	__asm volatile
 80099a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ac:	f383 8811 	msr	BASEPRI, r3
 80099b0:	f3bf 8f6f 	isb	sy
 80099b4:	f3bf 8f4f 	dsb	sy
 80099b8:	60fb      	str	r3, [r7, #12]
}
 80099ba:	bf00      	nop
 80099bc:	e7fe      	b.n	80099bc <prvDeleteTCB+0x54>
	}
 80099be:	bf00      	nop
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
	...

080099c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099ce:	4b0c      	ldr	r3, [pc, #48]	; (8009a00 <prvResetNextTaskUnblockTime+0x38>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d104      	bne.n	80099e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80099d8:	4b0a      	ldr	r3, [pc, #40]	; (8009a04 <prvResetNextTaskUnblockTime+0x3c>)
 80099da:	f04f 32ff 	mov.w	r2, #4294967295
 80099de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80099e0:	e008      	b.n	80099f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099e2:	4b07      	ldr	r3, [pc, #28]	; (8009a00 <prvResetNextTaskUnblockTime+0x38>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	4a04      	ldr	r2, [pc, #16]	; (8009a04 <prvResetNextTaskUnblockTime+0x3c>)
 80099f2:	6013      	str	r3, [r2, #0]
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	2000117c 	.word	0x2000117c
 8009a04:	200011e4 	.word	0x200011e4

08009a08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a0e:	4b0b      	ldr	r3, [pc, #44]	; (8009a3c <xTaskGetSchedulerState+0x34>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d102      	bne.n	8009a1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a16:	2301      	movs	r3, #1
 8009a18:	607b      	str	r3, [r7, #4]
 8009a1a:	e008      	b.n	8009a2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a1c:	4b08      	ldr	r3, [pc, #32]	; (8009a40 <xTaskGetSchedulerState+0x38>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d102      	bne.n	8009a2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a24:	2302      	movs	r3, #2
 8009a26:	607b      	str	r3, [r7, #4]
 8009a28:	e001      	b.n	8009a2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a2e:	687b      	ldr	r3, [r7, #4]
	}
 8009a30:	4618      	mov	r0, r3
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	200011d0 	.word	0x200011d0
 8009a40:	200011ec 	.word	0x200011ec

08009a44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b086      	sub	sp, #24
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009a50:	2300      	movs	r3, #0
 8009a52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d056      	beq.n	8009b08 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009a5a:	4b2e      	ldr	r3, [pc, #184]	; (8009b14 <xTaskPriorityDisinherit+0xd0>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d00a      	beq.n	8009a7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a68:	f383 8811 	msr	BASEPRI, r3
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	60fb      	str	r3, [r7, #12]
}
 8009a76:	bf00      	nop
 8009a78:	e7fe      	b.n	8009a78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10a      	bne.n	8009a98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	60bb      	str	r3, [r7, #8]
}
 8009a94:	bf00      	nop
 8009a96:	e7fe      	b.n	8009a96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a9c:	1e5a      	subs	r2, r3, #1
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d02c      	beq.n	8009b08 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d128      	bne.n	8009b08 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	3304      	adds	r3, #4
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fe fa32 	bl	8007f24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009acc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad8:	4b0f      	ldr	r3, [pc, #60]	; (8009b18 <xTaskPriorityDisinherit+0xd4>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d903      	bls.n	8009ae8 <xTaskPriorityDisinherit+0xa4>
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae4:	4a0c      	ldr	r2, [pc, #48]	; (8009b18 <xTaskPriorityDisinherit+0xd4>)
 8009ae6:	6013      	str	r3, [r2, #0]
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aec:	4613      	mov	r3, r2
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	4413      	add	r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	4a09      	ldr	r2, [pc, #36]	; (8009b1c <xTaskPriorityDisinherit+0xd8>)
 8009af6:	441a      	add	r2, r3
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	3304      	adds	r3, #4
 8009afc:	4619      	mov	r1, r3
 8009afe:	4610      	mov	r0, r2
 8009b00:	f7fe f9b3 	bl	8007e6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b04:	2301      	movs	r3, #1
 8009b06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b08:	697b      	ldr	r3, [r7, #20]
	}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3718      	adds	r7, #24
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20000cf0 	.word	0x20000cf0
 8009b18:	200011cc 	.word	0x200011cc
 8009b1c:	20000cf4 	.word	0x20000cf4

08009b20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b2a:	4b21      	ldr	r3, [pc, #132]	; (8009bb0 <prvAddCurrentTaskToDelayedList+0x90>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b30:	4b20      	ldr	r3, [pc, #128]	; (8009bb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	3304      	adds	r3, #4
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7fe f9f4 	bl	8007f24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b42:	d10a      	bne.n	8009b5a <prvAddCurrentTaskToDelayedList+0x3a>
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d007      	beq.n	8009b5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b4a:	4b1a      	ldr	r3, [pc, #104]	; (8009bb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	3304      	adds	r3, #4
 8009b50:	4619      	mov	r1, r3
 8009b52:	4819      	ldr	r0, [pc, #100]	; (8009bb8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009b54:	f7fe f989 	bl	8007e6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009b58:	e026      	b.n	8009ba8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4413      	add	r3, r2
 8009b60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b62:	4b14      	ldr	r3, [pc, #80]	; (8009bb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009b6a:	68ba      	ldr	r2, [r7, #8]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d209      	bcs.n	8009b86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b72:	4b12      	ldr	r3, [pc, #72]	; (8009bbc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	4b0f      	ldr	r3, [pc, #60]	; (8009bb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	4610      	mov	r0, r2
 8009b80:	f7fe f997 	bl	8007eb2 <vListInsert>
}
 8009b84:	e010      	b.n	8009ba8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b86:	4b0e      	ldr	r3, [pc, #56]	; (8009bc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	4b0a      	ldr	r3, [pc, #40]	; (8009bb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3304      	adds	r3, #4
 8009b90:	4619      	mov	r1, r3
 8009b92:	4610      	mov	r0, r2
 8009b94:	f7fe f98d 	bl	8007eb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b98:	4b0a      	ldr	r3, [pc, #40]	; (8009bc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d202      	bcs.n	8009ba8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009ba2:	4a08      	ldr	r2, [pc, #32]	; (8009bc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	6013      	str	r3, [r2, #0]
}
 8009ba8:	bf00      	nop
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	200011c8 	.word	0x200011c8
 8009bb4:	20000cf0 	.word	0x20000cf0
 8009bb8:	200011b0 	.word	0x200011b0
 8009bbc:	20001180 	.word	0x20001180
 8009bc0:	2000117c 	.word	0x2000117c
 8009bc4:	200011e4 	.word	0x200011e4

08009bc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b08a      	sub	sp, #40	; 0x28
 8009bcc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009bd2:	f000 fb07 	bl	800a1e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009bd6:	4b1c      	ldr	r3, [pc, #112]	; (8009c48 <xTimerCreateTimerTask+0x80>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d021      	beq.n	8009c22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009bde:	2300      	movs	r3, #0
 8009be0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009be2:	2300      	movs	r3, #0
 8009be4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009be6:	1d3a      	adds	r2, r7, #4
 8009be8:	f107 0108 	add.w	r1, r7, #8
 8009bec:	f107 030c 	add.w	r3, r7, #12
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7fe f8f3 	bl	8007ddc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009bf6:	6879      	ldr	r1, [r7, #4]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	9202      	str	r2, [sp, #8]
 8009bfe:	9301      	str	r3, [sp, #4]
 8009c00:	2302      	movs	r3, #2
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	2300      	movs	r3, #0
 8009c06:	460a      	mov	r2, r1
 8009c08:	4910      	ldr	r1, [pc, #64]	; (8009c4c <xTimerCreateTimerTask+0x84>)
 8009c0a:	4811      	ldr	r0, [pc, #68]	; (8009c50 <xTimerCreateTimerTask+0x88>)
 8009c0c:	f7ff f8c0 	bl	8008d90 <xTaskCreateStatic>
 8009c10:	4603      	mov	r3, r0
 8009c12:	4a10      	ldr	r2, [pc, #64]	; (8009c54 <xTimerCreateTimerTask+0x8c>)
 8009c14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009c16:	4b0f      	ldr	r3, [pc, #60]	; (8009c54 <xTimerCreateTimerTask+0x8c>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d001      	beq.n	8009c22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10a      	bne.n	8009c3e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2c:	f383 8811 	msr	BASEPRI, r3
 8009c30:	f3bf 8f6f 	isb	sy
 8009c34:	f3bf 8f4f 	dsb	sy
 8009c38:	613b      	str	r3, [r7, #16]
}
 8009c3a:	bf00      	nop
 8009c3c:	e7fe      	b.n	8009c3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009c3e:	697b      	ldr	r3, [r7, #20]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3718      	adds	r7, #24
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	20001228 	.word	0x20001228
 8009c4c:	0800dad4 	.word	0x0800dad4
 8009c50:	08009d8d 	.word	0x08009d8d
 8009c54:	2000122c 	.word	0x2000122c

08009c58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b08a      	sub	sp, #40	; 0x28
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
 8009c64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009c66:	2300      	movs	r3, #0
 8009c68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10a      	bne.n	8009c86 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c74:	f383 8811 	msr	BASEPRI, r3
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	623b      	str	r3, [r7, #32]
}
 8009c82:	bf00      	nop
 8009c84:	e7fe      	b.n	8009c84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009c86:	4b1a      	ldr	r3, [pc, #104]	; (8009cf0 <xTimerGenericCommand+0x98>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d02a      	beq.n	8009ce4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	2b05      	cmp	r3, #5
 8009c9e:	dc18      	bgt.n	8009cd2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ca0:	f7ff feb2 	bl	8009a08 <xTaskGetSchedulerState>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d109      	bne.n	8009cbe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009caa:	4b11      	ldr	r3, [pc, #68]	; (8009cf0 <xTimerGenericCommand+0x98>)
 8009cac:	6818      	ldr	r0, [r3, #0]
 8009cae:	f107 0110 	add.w	r1, r7, #16
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cb6:	f7fe fb07 	bl	80082c8 <xQueueGenericSend>
 8009cba:	6278      	str	r0, [r7, #36]	; 0x24
 8009cbc:	e012      	b.n	8009ce4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009cbe:	4b0c      	ldr	r3, [pc, #48]	; (8009cf0 <xTimerGenericCommand+0x98>)
 8009cc0:	6818      	ldr	r0, [r3, #0]
 8009cc2:	f107 0110 	add.w	r1, r7, #16
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f7fe fafd 	bl	80082c8 <xQueueGenericSend>
 8009cce:	6278      	str	r0, [r7, #36]	; 0x24
 8009cd0:	e008      	b.n	8009ce4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009cd2:	4b07      	ldr	r3, [pc, #28]	; (8009cf0 <xTimerGenericCommand+0x98>)
 8009cd4:	6818      	ldr	r0, [r3, #0]
 8009cd6:	f107 0110 	add.w	r1, r7, #16
 8009cda:	2300      	movs	r3, #0
 8009cdc:	683a      	ldr	r2, [r7, #0]
 8009cde:	f7fe fbf1 	bl	80084c4 <xQueueGenericSendFromISR>
 8009ce2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3728      	adds	r7, #40	; 0x28
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	20001228 	.word	0x20001228

08009cf4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b088      	sub	sp, #32
 8009cf8:	af02      	add	r7, sp, #8
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cfe:	4b22      	ldr	r3, [pc, #136]	; (8009d88 <prvProcessExpiredTimer+0x94>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	3304      	adds	r3, #4
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7fe f909 	bl	8007f24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d18:	f003 0304 	and.w	r3, r3, #4
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d022      	beq.n	8009d66 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	699a      	ldr	r2, [r3, #24]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	18d1      	adds	r1, r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	683a      	ldr	r2, [r7, #0]
 8009d2c:	6978      	ldr	r0, [r7, #20]
 8009d2e:	f000 f8d1 	bl	8009ed4 <prvInsertTimerInActiveList>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d01f      	beq.n	8009d78 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d38:	2300      	movs	r3, #0
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	2100      	movs	r1, #0
 8009d42:	6978      	ldr	r0, [r7, #20]
 8009d44:	f7ff ff88 	bl	8009c58 <xTimerGenericCommand>
 8009d48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d113      	bne.n	8009d78 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	60fb      	str	r3, [r7, #12]
}
 8009d62:	bf00      	nop
 8009d64:	e7fe      	b.n	8009d64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d6c:	f023 0301 	bic.w	r3, r3, #1
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	6a1b      	ldr	r3, [r3, #32]
 8009d7c:	6978      	ldr	r0, [r7, #20]
 8009d7e:	4798      	blx	r3
}
 8009d80:	bf00      	nop
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	20001220 	.word	0x20001220

08009d8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d94:	f107 0308 	add.w	r3, r7, #8
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f000 f857 	bl	8009e4c <prvGetNextExpireTime>
 8009d9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	4619      	mov	r1, r3
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f000 f803 	bl	8009db0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009daa:	f000 f8d5 	bl	8009f58 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009dae:	e7f1      	b.n	8009d94 <prvTimerTask+0x8>

08009db0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009dba:	f7ff fa29 	bl	8009210 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dbe:	f107 0308 	add.w	r3, r7, #8
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f000 f866 	bl	8009e94 <prvSampleTimeNow>
 8009dc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d130      	bne.n	8009e32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d10a      	bne.n	8009dec <prvProcessTimerOrBlockTask+0x3c>
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d806      	bhi.n	8009dec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009dde:	f7ff fa25 	bl	800922c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009de2:	68f9      	ldr	r1, [r7, #12]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7ff ff85 	bl	8009cf4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009dea:	e024      	b.n	8009e36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d008      	beq.n	8009e04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009df2:	4b13      	ldr	r3, [pc, #76]	; (8009e40 <prvProcessTimerOrBlockTask+0x90>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d101      	bne.n	8009e00 <prvProcessTimerOrBlockTask+0x50>
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e000      	b.n	8009e02 <prvProcessTimerOrBlockTask+0x52>
 8009e00:	2300      	movs	r3, #0
 8009e02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e04:	4b0f      	ldr	r3, [pc, #60]	; (8009e44 <prvProcessTimerOrBlockTask+0x94>)
 8009e06:	6818      	ldr	r0, [r3, #0]
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	4619      	mov	r1, r3
 8009e12:	f7fe ff89 	bl	8008d28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e16:	f7ff fa09 	bl	800922c <xTaskResumeAll>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10a      	bne.n	8009e36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e20:	4b09      	ldr	r3, [pc, #36]	; (8009e48 <prvProcessTimerOrBlockTask+0x98>)
 8009e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e26:	601a      	str	r2, [r3, #0]
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	f3bf 8f6f 	isb	sy
}
 8009e30:	e001      	b.n	8009e36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e32:	f7ff f9fb 	bl	800922c <xTaskResumeAll>
}
 8009e36:	bf00      	nop
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	20001224 	.word	0x20001224
 8009e44:	20001228 	.word	0x20001228
 8009e48:	e000ed04 	.word	0xe000ed04

08009e4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e54:	4b0e      	ldr	r3, [pc, #56]	; (8009e90 <prvGetNextExpireTime+0x44>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d101      	bne.n	8009e62 <prvGetNextExpireTime+0x16>
 8009e5e:	2201      	movs	r2, #1
 8009e60:	e000      	b.n	8009e64 <prvGetNextExpireTime+0x18>
 8009e62:	2200      	movs	r2, #0
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d105      	bne.n	8009e7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e70:	4b07      	ldr	r3, [pc, #28]	; (8009e90 <prvGetNextExpireTime+0x44>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	60fb      	str	r3, [r7, #12]
 8009e7a:	e001      	b.n	8009e80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009e80:	68fb      	ldr	r3, [r7, #12]
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	20001220 	.word	0x20001220

08009e94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009e9c:	f7ff fa64 	bl	8009368 <xTaskGetTickCount>
 8009ea0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009ea2:	4b0b      	ldr	r3, [pc, #44]	; (8009ed0 <prvSampleTimeNow+0x3c>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d205      	bcs.n	8009eb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009eac:	f000 f936 	bl	800a11c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	601a      	str	r2, [r3, #0]
 8009eb6:	e002      	b.n	8009ebe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009ebe:	4a04      	ldr	r2, [pc, #16]	; (8009ed0 <prvSampleTimeNow+0x3c>)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	20001230 	.word	0x20001230

08009ed4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
 8009ee0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d812      	bhi.n	8009f20 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	1ad2      	subs	r2, r2, r3
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	699b      	ldr	r3, [r3, #24]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d302      	bcc.n	8009f0e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	617b      	str	r3, [r7, #20]
 8009f0c:	e01b      	b.n	8009f46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f0e:	4b10      	ldr	r3, [pc, #64]	; (8009f50 <prvInsertTimerInActiveList+0x7c>)
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3304      	adds	r3, #4
 8009f16:	4619      	mov	r1, r3
 8009f18:	4610      	mov	r0, r2
 8009f1a:	f7fd ffca 	bl	8007eb2 <vListInsert>
 8009f1e:	e012      	b.n	8009f46 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d206      	bcs.n	8009f36 <prvInsertTimerInActiveList+0x62>
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d302      	bcc.n	8009f36 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f30:	2301      	movs	r3, #1
 8009f32:	617b      	str	r3, [r7, #20]
 8009f34:	e007      	b.n	8009f46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f36:	4b07      	ldr	r3, [pc, #28]	; (8009f54 <prvInsertTimerInActiveList+0x80>)
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	4619      	mov	r1, r3
 8009f40:	4610      	mov	r0, r2
 8009f42:	f7fd ffb6 	bl	8007eb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009f46:	697b      	ldr	r3, [r7, #20]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3718      	adds	r7, #24
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	20001224 	.word	0x20001224
 8009f54:	20001220 	.word	0x20001220

08009f58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b08e      	sub	sp, #56	; 0x38
 8009f5c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f5e:	e0ca      	b.n	800a0f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	da18      	bge.n	8009f98 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009f66:	1d3b      	adds	r3, r7, #4
 8009f68:	3304      	adds	r3, #4
 8009f6a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10a      	bne.n	8009f88 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f76:	f383 8811 	msr	BASEPRI, r3
 8009f7a:	f3bf 8f6f 	isb	sy
 8009f7e:	f3bf 8f4f 	dsb	sy
 8009f82:	61fb      	str	r3, [r7, #28]
}
 8009f84:	bf00      	nop
 8009f86:	e7fe      	b.n	8009f86 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f8e:	6850      	ldr	r0, [r2, #4]
 8009f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f92:	6892      	ldr	r2, [r2, #8]
 8009f94:	4611      	mov	r1, r2
 8009f96:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f2c0 80ab 	blt.w	800a0f6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d004      	beq.n	8009fb6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fae:	3304      	adds	r3, #4
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7fd ffb7 	bl	8007f24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fb6:	463b      	mov	r3, r7
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7ff ff6b 	bl	8009e94 <prvSampleTimeNow>
 8009fbe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2b09      	cmp	r3, #9
 8009fc4:	f200 8096 	bhi.w	800a0f4 <prvProcessReceivedCommands+0x19c>
 8009fc8:	a201      	add	r2, pc, #4	; (adr r2, 8009fd0 <prvProcessReceivedCommands+0x78>)
 8009fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fce:	bf00      	nop
 8009fd0:	08009ff9 	.word	0x08009ff9
 8009fd4:	08009ff9 	.word	0x08009ff9
 8009fd8:	08009ff9 	.word	0x08009ff9
 8009fdc:	0800a06d 	.word	0x0800a06d
 8009fe0:	0800a081 	.word	0x0800a081
 8009fe4:	0800a0cb 	.word	0x0800a0cb
 8009fe8:	08009ff9 	.word	0x08009ff9
 8009fec:	08009ff9 	.word	0x08009ff9
 8009ff0:	0800a06d 	.word	0x0800a06d
 8009ff4:	0800a081 	.word	0x0800a081
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ffe:	f043 0301 	orr.w	r3, r3, #1
 800a002:	b2da      	uxtb	r2, r3
 800a004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	18d1      	adds	r1, r2, r3
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a018:	f7ff ff5c 	bl	8009ed4 <prvInsertTimerInActiveList>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d069      	beq.n	800a0f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a028:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a030:	f003 0304 	and.w	r3, r3, #4
 800a034:	2b00      	cmp	r3, #0
 800a036:	d05e      	beq.n	800a0f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a038:	68ba      	ldr	r2, [r7, #8]
 800a03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03c:	699b      	ldr	r3, [r3, #24]
 800a03e:	441a      	add	r2, r3
 800a040:	2300      	movs	r3, #0
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	2300      	movs	r3, #0
 800a046:	2100      	movs	r1, #0
 800a048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a04a:	f7ff fe05 	bl	8009c58 <xTimerGenericCommand>
 800a04e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a050:	6a3b      	ldr	r3, [r7, #32]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d14f      	bne.n	800a0f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05a:	f383 8811 	msr	BASEPRI, r3
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f3bf 8f4f 	dsb	sy
 800a066:	61bb      	str	r3, [r7, #24]
}
 800a068:	bf00      	nop
 800a06a:	e7fe      	b.n	800a06a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a072:	f023 0301 	bic.w	r3, r3, #1
 800a076:	b2da      	uxtb	r2, r3
 800a078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a07e:	e03a      	b.n	800a0f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a082:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a086:	f043 0301 	orr.w	r3, r3, #1
 800a08a:	b2da      	uxtb	r2, r3
 800a08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a096:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09a:	699b      	ldr	r3, [r3, #24]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10a      	bne.n	800a0b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	617b      	str	r3, [r7, #20]
}
 800a0b2:	bf00      	nop
 800a0b4:	e7fe      	b.n	800a0b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b8:	699a      	ldr	r2, [r3, #24]
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0bc:	18d1      	adds	r1, r2, r3
 800a0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0c4:	f7ff ff06 	bl	8009ed4 <prvInsertTimerInActiveList>
					break;
 800a0c8:	e015      	b.n	800a0f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0d0:	f003 0302 	and.w	r3, r3, #2
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d103      	bne.n	800a0e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a0d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0da:	f000 fbe1 	bl	800a8a0 <vPortFree>
 800a0de:	e00a      	b.n	800a0f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0e6:	f023 0301 	bic.w	r3, r3, #1
 800a0ea:	b2da      	uxtb	r2, r3
 800a0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a0f2:	e000      	b.n	800a0f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a0f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0f6:	4b08      	ldr	r3, [pc, #32]	; (800a118 <prvProcessReceivedCommands+0x1c0>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	1d39      	adds	r1, r7, #4
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fe fb08 	bl	8008714 <xQueueReceive>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	f47f af2a 	bne.w	8009f60 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a10c:	bf00      	nop
 800a10e:	bf00      	nop
 800a110:	3730      	adds	r7, #48	; 0x30
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	20001228 	.word	0x20001228

0800a11c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b088      	sub	sp, #32
 800a120:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a122:	e048      	b.n	800a1b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a124:	4b2d      	ldr	r3, [pc, #180]	; (800a1dc <prvSwitchTimerLists+0xc0>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a12e:	4b2b      	ldr	r3, [pc, #172]	; (800a1dc <prvSwitchTimerLists+0xc0>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	3304      	adds	r3, #4
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7fd fef1 	bl	8007f24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6a1b      	ldr	r3, [r3, #32]
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a150:	f003 0304 	and.w	r3, r3, #4
 800a154:	2b00      	cmp	r3, #0
 800a156:	d02e      	beq.n	800a1b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	699b      	ldr	r3, [r3, #24]
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	4413      	add	r3, r2
 800a160:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a162:	68ba      	ldr	r2, [r7, #8]
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	429a      	cmp	r2, r3
 800a168:	d90e      	bls.n	800a188 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a176:	4b19      	ldr	r3, [pc, #100]	; (800a1dc <prvSwitchTimerLists+0xc0>)
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	3304      	adds	r3, #4
 800a17e:	4619      	mov	r1, r3
 800a180:	4610      	mov	r0, r2
 800a182:	f7fd fe96 	bl	8007eb2 <vListInsert>
 800a186:	e016      	b.n	800a1b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a188:	2300      	movs	r3, #0
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	2300      	movs	r3, #0
 800a18e:	693a      	ldr	r2, [r7, #16]
 800a190:	2100      	movs	r1, #0
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f7ff fd60 	bl	8009c58 <xTimerGenericCommand>
 800a198:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10a      	bne.n	800a1b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a4:	f383 8811 	msr	BASEPRI, r3
 800a1a8:	f3bf 8f6f 	isb	sy
 800a1ac:	f3bf 8f4f 	dsb	sy
 800a1b0:	603b      	str	r3, [r7, #0]
}
 800a1b2:	bf00      	nop
 800a1b4:	e7fe      	b.n	800a1b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a1b6:	4b09      	ldr	r3, [pc, #36]	; (800a1dc <prvSwitchTimerLists+0xc0>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1b1      	bne.n	800a124 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a1c0:	4b06      	ldr	r3, [pc, #24]	; (800a1dc <prvSwitchTimerLists+0xc0>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a1c6:	4b06      	ldr	r3, [pc, #24]	; (800a1e0 <prvSwitchTimerLists+0xc4>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a04      	ldr	r2, [pc, #16]	; (800a1dc <prvSwitchTimerLists+0xc0>)
 800a1cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a1ce:	4a04      	ldr	r2, [pc, #16]	; (800a1e0 <prvSwitchTimerLists+0xc4>)
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	6013      	str	r3, [r2, #0]
}
 800a1d4:	bf00      	nop
 800a1d6:	3718      	adds	r7, #24
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	20001220 	.word	0x20001220
 800a1e0:	20001224 	.word	0x20001224

0800a1e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a1ea:	f000 f96b 	bl	800a4c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a1ee:	4b15      	ldr	r3, [pc, #84]	; (800a244 <prvCheckForValidListAndQueue+0x60>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d120      	bne.n	800a238 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a1f6:	4814      	ldr	r0, [pc, #80]	; (800a248 <prvCheckForValidListAndQueue+0x64>)
 800a1f8:	f7fd fe0a 	bl	8007e10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a1fc:	4813      	ldr	r0, [pc, #76]	; (800a24c <prvCheckForValidListAndQueue+0x68>)
 800a1fe:	f7fd fe07 	bl	8007e10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a202:	4b13      	ldr	r3, [pc, #76]	; (800a250 <prvCheckForValidListAndQueue+0x6c>)
 800a204:	4a10      	ldr	r2, [pc, #64]	; (800a248 <prvCheckForValidListAndQueue+0x64>)
 800a206:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a208:	4b12      	ldr	r3, [pc, #72]	; (800a254 <prvCheckForValidListAndQueue+0x70>)
 800a20a:	4a10      	ldr	r2, [pc, #64]	; (800a24c <prvCheckForValidListAndQueue+0x68>)
 800a20c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a20e:	2300      	movs	r3, #0
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	4b11      	ldr	r3, [pc, #68]	; (800a258 <prvCheckForValidListAndQueue+0x74>)
 800a214:	4a11      	ldr	r2, [pc, #68]	; (800a25c <prvCheckForValidListAndQueue+0x78>)
 800a216:	2110      	movs	r1, #16
 800a218:	200a      	movs	r0, #10
 800a21a:	f7fd ff15 	bl	8008048 <xQueueGenericCreateStatic>
 800a21e:	4603      	mov	r3, r0
 800a220:	4a08      	ldr	r2, [pc, #32]	; (800a244 <prvCheckForValidListAndQueue+0x60>)
 800a222:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a224:	4b07      	ldr	r3, [pc, #28]	; (800a244 <prvCheckForValidListAndQueue+0x60>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d005      	beq.n	800a238 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a22c:	4b05      	ldr	r3, [pc, #20]	; (800a244 <prvCheckForValidListAndQueue+0x60>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	490b      	ldr	r1, [pc, #44]	; (800a260 <prvCheckForValidListAndQueue+0x7c>)
 800a232:	4618      	mov	r0, r3
 800a234:	f7fe fd24 	bl	8008c80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a238:	f000 f974 	bl	800a524 <vPortExitCritical>
}
 800a23c:	bf00      	nop
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	20001228 	.word	0x20001228
 800a248:	200011f8 	.word	0x200011f8
 800a24c:	2000120c 	.word	0x2000120c
 800a250:	20001220 	.word	0x20001220
 800a254:	20001224 	.word	0x20001224
 800a258:	200012d4 	.word	0x200012d4
 800a25c:	20001234 	.word	0x20001234
 800a260:	0800dadc 	.word	0x0800dadc

0800a264 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	3b04      	subs	r3, #4
 800a274:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a27c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	3b04      	subs	r3, #4
 800a282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	f023 0201 	bic.w	r2, r3, #1
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	3b04      	subs	r3, #4
 800a292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a294:	4a0c      	ldr	r2, [pc, #48]	; (800a2c8 <pxPortInitialiseStack+0x64>)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	3b14      	subs	r3, #20
 800a29e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	3b04      	subs	r3, #4
 800a2aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f06f 0202 	mvn.w	r2, #2
 800a2b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	3b20      	subs	r3, #32
 800a2b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3714      	adds	r7, #20
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr
 800a2c8:	0800a2cd 	.word	0x0800a2cd

0800a2cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a2d6:	4b12      	ldr	r3, [pc, #72]	; (800a320 <prvTaskExitError+0x54>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2de:	d00a      	beq.n	800a2f6 <prvTaskExitError+0x2a>
	__asm volatile
 800a2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	60fb      	str	r3, [r7, #12]
}
 800a2f2:	bf00      	nop
 800a2f4:	e7fe      	b.n	800a2f4 <prvTaskExitError+0x28>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	60bb      	str	r3, [r7, #8]
}
 800a308:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a30a:	bf00      	nop
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d0fc      	beq.n	800a30c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a312:	bf00      	nop
 800a314:	bf00      	nop
 800a316:	3714      	adds	r7, #20
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr
 800a320:	200000c4 	.word	0x200000c4
	...

0800a330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a330:	4b07      	ldr	r3, [pc, #28]	; (800a350 <pxCurrentTCBConst2>)
 800a332:	6819      	ldr	r1, [r3, #0]
 800a334:	6808      	ldr	r0, [r1, #0]
 800a336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33a:	f380 8809 	msr	PSP, r0
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	f04f 0000 	mov.w	r0, #0
 800a346:	f380 8811 	msr	BASEPRI, r0
 800a34a:	4770      	bx	lr
 800a34c:	f3af 8000 	nop.w

0800a350 <pxCurrentTCBConst2>:
 800a350:	20000cf0 	.word	0x20000cf0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a354:	bf00      	nop
 800a356:	bf00      	nop

0800a358 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a358:	4808      	ldr	r0, [pc, #32]	; (800a37c <prvPortStartFirstTask+0x24>)
 800a35a:	6800      	ldr	r0, [r0, #0]
 800a35c:	6800      	ldr	r0, [r0, #0]
 800a35e:	f380 8808 	msr	MSP, r0
 800a362:	f04f 0000 	mov.w	r0, #0
 800a366:	f380 8814 	msr	CONTROL, r0
 800a36a:	b662      	cpsie	i
 800a36c:	b661      	cpsie	f
 800a36e:	f3bf 8f4f 	dsb	sy
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	df00      	svc	0
 800a378:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a37a:	bf00      	nop
 800a37c:	e000ed08 	.word	0xe000ed08

0800a380 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b086      	sub	sp, #24
 800a384:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a386:	4b46      	ldr	r3, [pc, #280]	; (800a4a0 <xPortStartScheduler+0x120>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a46      	ldr	r2, [pc, #280]	; (800a4a4 <xPortStartScheduler+0x124>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d10a      	bne.n	800a3a6 <xPortStartScheduler+0x26>
	__asm volatile
 800a390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a394:	f383 8811 	msr	BASEPRI, r3
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	613b      	str	r3, [r7, #16]
}
 800a3a2:	bf00      	nop
 800a3a4:	e7fe      	b.n	800a3a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a3a6:	4b3e      	ldr	r3, [pc, #248]	; (800a4a0 <xPortStartScheduler+0x120>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a3f      	ldr	r2, [pc, #252]	; (800a4a8 <xPortStartScheduler+0x128>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d10a      	bne.n	800a3c6 <xPortStartScheduler+0x46>
	__asm volatile
 800a3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b4:	f383 8811 	msr	BASEPRI, r3
 800a3b8:	f3bf 8f6f 	isb	sy
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	60fb      	str	r3, [r7, #12]
}
 800a3c2:	bf00      	nop
 800a3c4:	e7fe      	b.n	800a3c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a3c6:	4b39      	ldr	r3, [pc, #228]	; (800a4ac <xPortStartScheduler+0x12c>)
 800a3c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	22ff      	movs	r2, #255	; 0xff
 800a3d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a3e0:	78fb      	ldrb	r3, [r7, #3]
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a3e8:	b2da      	uxtb	r2, r3
 800a3ea:	4b31      	ldr	r3, [pc, #196]	; (800a4b0 <xPortStartScheduler+0x130>)
 800a3ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a3ee:	4b31      	ldr	r3, [pc, #196]	; (800a4b4 <xPortStartScheduler+0x134>)
 800a3f0:	2207      	movs	r2, #7
 800a3f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3f4:	e009      	b.n	800a40a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a3f6:	4b2f      	ldr	r3, [pc, #188]	; (800a4b4 <xPortStartScheduler+0x134>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	4a2d      	ldr	r2, [pc, #180]	; (800a4b4 <xPortStartScheduler+0x134>)
 800a3fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a400:	78fb      	ldrb	r3, [r7, #3]
 800a402:	b2db      	uxtb	r3, r3
 800a404:	005b      	lsls	r3, r3, #1
 800a406:	b2db      	uxtb	r3, r3
 800a408:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a40a:	78fb      	ldrb	r3, [r7, #3]
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a412:	2b80      	cmp	r3, #128	; 0x80
 800a414:	d0ef      	beq.n	800a3f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a416:	4b27      	ldr	r3, [pc, #156]	; (800a4b4 <xPortStartScheduler+0x134>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f1c3 0307 	rsb	r3, r3, #7
 800a41e:	2b04      	cmp	r3, #4
 800a420:	d00a      	beq.n	800a438 <xPortStartScheduler+0xb8>
	__asm volatile
 800a422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a426:	f383 8811 	msr	BASEPRI, r3
 800a42a:	f3bf 8f6f 	isb	sy
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	60bb      	str	r3, [r7, #8]
}
 800a434:	bf00      	nop
 800a436:	e7fe      	b.n	800a436 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a438:	4b1e      	ldr	r3, [pc, #120]	; (800a4b4 <xPortStartScheduler+0x134>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	021b      	lsls	r3, r3, #8
 800a43e:	4a1d      	ldr	r2, [pc, #116]	; (800a4b4 <xPortStartScheduler+0x134>)
 800a440:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a442:	4b1c      	ldr	r3, [pc, #112]	; (800a4b4 <xPortStartScheduler+0x134>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a44a:	4a1a      	ldr	r2, [pc, #104]	; (800a4b4 <xPortStartScheduler+0x134>)
 800a44c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	b2da      	uxtb	r2, r3
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a456:	4b18      	ldr	r3, [pc, #96]	; (800a4b8 <xPortStartScheduler+0x138>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a17      	ldr	r2, [pc, #92]	; (800a4b8 <xPortStartScheduler+0x138>)
 800a45c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a460:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a462:	4b15      	ldr	r3, [pc, #84]	; (800a4b8 <xPortStartScheduler+0x138>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a14      	ldr	r2, [pc, #80]	; (800a4b8 <xPortStartScheduler+0x138>)
 800a468:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a46c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a46e:	f000 f8dd 	bl	800a62c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a472:	4b12      	ldr	r3, [pc, #72]	; (800a4bc <xPortStartScheduler+0x13c>)
 800a474:	2200      	movs	r2, #0
 800a476:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a478:	f000 f8fc 	bl	800a674 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a47c:	4b10      	ldr	r3, [pc, #64]	; (800a4c0 <xPortStartScheduler+0x140>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a0f      	ldr	r2, [pc, #60]	; (800a4c0 <xPortStartScheduler+0x140>)
 800a482:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a486:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a488:	f7ff ff66 	bl	800a358 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a48c:	f7ff f836 	bl	80094fc <vTaskSwitchContext>
	prvTaskExitError();
 800a490:	f7ff ff1c 	bl	800a2cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3718      	adds	r7, #24
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	e000ed00 	.word	0xe000ed00
 800a4a4:	410fc271 	.word	0x410fc271
 800a4a8:	410fc270 	.word	0x410fc270
 800a4ac:	e000e400 	.word	0xe000e400
 800a4b0:	20001324 	.word	0x20001324
 800a4b4:	20001328 	.word	0x20001328
 800a4b8:	e000ed20 	.word	0xe000ed20
 800a4bc:	200000c4 	.word	0x200000c4
 800a4c0:	e000ef34 	.word	0xe000ef34

0800a4c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
	__asm volatile
 800a4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	607b      	str	r3, [r7, #4]
}
 800a4dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a4de:	4b0f      	ldr	r3, [pc, #60]	; (800a51c <vPortEnterCritical+0x58>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	4a0d      	ldr	r2, [pc, #52]	; (800a51c <vPortEnterCritical+0x58>)
 800a4e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a4e8:	4b0c      	ldr	r3, [pc, #48]	; (800a51c <vPortEnterCritical+0x58>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d10f      	bne.n	800a510 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a4f0:	4b0b      	ldr	r3, [pc, #44]	; (800a520 <vPortEnterCritical+0x5c>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00a      	beq.n	800a510 <vPortEnterCritical+0x4c>
	__asm volatile
 800a4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fe:	f383 8811 	msr	BASEPRI, r3
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	f3bf 8f4f 	dsb	sy
 800a50a:	603b      	str	r3, [r7, #0]
}
 800a50c:	bf00      	nop
 800a50e:	e7fe      	b.n	800a50e <vPortEnterCritical+0x4a>
	}
}
 800a510:	bf00      	nop
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr
 800a51c:	200000c4 	.word	0x200000c4
 800a520:	e000ed04 	.word	0xe000ed04

0800a524 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a52a:	4b12      	ldr	r3, [pc, #72]	; (800a574 <vPortExitCritical+0x50>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d10a      	bne.n	800a548 <vPortExitCritical+0x24>
	__asm volatile
 800a532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a536:	f383 8811 	msr	BASEPRI, r3
 800a53a:	f3bf 8f6f 	isb	sy
 800a53e:	f3bf 8f4f 	dsb	sy
 800a542:	607b      	str	r3, [r7, #4]
}
 800a544:	bf00      	nop
 800a546:	e7fe      	b.n	800a546 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a548:	4b0a      	ldr	r3, [pc, #40]	; (800a574 <vPortExitCritical+0x50>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	3b01      	subs	r3, #1
 800a54e:	4a09      	ldr	r2, [pc, #36]	; (800a574 <vPortExitCritical+0x50>)
 800a550:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a552:	4b08      	ldr	r3, [pc, #32]	; (800a574 <vPortExitCritical+0x50>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d105      	bne.n	800a566 <vPortExitCritical+0x42>
 800a55a:	2300      	movs	r3, #0
 800a55c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	f383 8811 	msr	BASEPRI, r3
}
 800a564:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a566:	bf00      	nop
 800a568:	370c      	adds	r7, #12
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	200000c4 	.word	0x200000c4
	...

0800a580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a580:	f3ef 8009 	mrs	r0, PSP
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	4b15      	ldr	r3, [pc, #84]	; (800a5e0 <pxCurrentTCBConst>)
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	f01e 0f10 	tst.w	lr, #16
 800a590:	bf08      	it	eq
 800a592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a59a:	6010      	str	r0, [r2, #0]
 800a59c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a5a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a5a4:	f380 8811 	msr	BASEPRI, r0
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	f3bf 8f6f 	isb	sy
 800a5b0:	f7fe ffa4 	bl	80094fc <vTaskSwitchContext>
 800a5b4:	f04f 0000 	mov.w	r0, #0
 800a5b8:	f380 8811 	msr	BASEPRI, r0
 800a5bc:	bc09      	pop	{r0, r3}
 800a5be:	6819      	ldr	r1, [r3, #0]
 800a5c0:	6808      	ldr	r0, [r1, #0]
 800a5c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c6:	f01e 0f10 	tst.w	lr, #16
 800a5ca:	bf08      	it	eq
 800a5cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a5d0:	f380 8809 	msr	PSP, r0
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop
 800a5dc:	f3af 8000 	nop.w

0800a5e0 <pxCurrentTCBConst>:
 800a5e0:	20000cf0 	.word	0x20000cf0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a5e4:	bf00      	nop
 800a5e6:	bf00      	nop

0800a5e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f2:	f383 8811 	msr	BASEPRI, r3
 800a5f6:	f3bf 8f6f 	isb	sy
 800a5fa:	f3bf 8f4f 	dsb	sy
 800a5fe:	607b      	str	r3, [r7, #4]
}
 800a600:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a602:	f7fe fec1 	bl	8009388 <xTaskIncrementTick>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d003      	beq.n	800a614 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a60c:	4b06      	ldr	r3, [pc, #24]	; (800a628 <xPortSysTickHandler+0x40>)
 800a60e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a612:	601a      	str	r2, [r3, #0]
 800a614:	2300      	movs	r3, #0
 800a616:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	f383 8811 	msr	BASEPRI, r3
}
 800a61e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a620:	bf00      	nop
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	e000ed04 	.word	0xe000ed04

0800a62c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a62c:	b480      	push	{r7}
 800a62e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a630:	4b0b      	ldr	r3, [pc, #44]	; (800a660 <vPortSetupTimerInterrupt+0x34>)
 800a632:	2200      	movs	r2, #0
 800a634:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a636:	4b0b      	ldr	r3, [pc, #44]	; (800a664 <vPortSetupTimerInterrupt+0x38>)
 800a638:	2200      	movs	r2, #0
 800a63a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a63c:	4b0a      	ldr	r3, [pc, #40]	; (800a668 <vPortSetupTimerInterrupt+0x3c>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a0a      	ldr	r2, [pc, #40]	; (800a66c <vPortSetupTimerInterrupt+0x40>)
 800a642:	fba2 2303 	umull	r2, r3, r2, r3
 800a646:	099b      	lsrs	r3, r3, #6
 800a648:	4a09      	ldr	r2, [pc, #36]	; (800a670 <vPortSetupTimerInterrupt+0x44>)
 800a64a:	3b01      	subs	r3, #1
 800a64c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a64e:	4b04      	ldr	r3, [pc, #16]	; (800a660 <vPortSetupTimerInterrupt+0x34>)
 800a650:	2207      	movs	r2, #7
 800a652:	601a      	str	r2, [r3, #0]
}
 800a654:	bf00      	nop
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	e000e010 	.word	0xe000e010
 800a664:	e000e018 	.word	0xe000e018
 800a668:	200000b8 	.word	0x200000b8
 800a66c:	10624dd3 	.word	0x10624dd3
 800a670:	e000e014 	.word	0xe000e014

0800a674 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a674:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a684 <vPortEnableVFP+0x10>
 800a678:	6801      	ldr	r1, [r0, #0]
 800a67a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a67e:	6001      	str	r1, [r0, #0]
 800a680:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a682:	bf00      	nop
 800a684:	e000ed88 	.word	0xe000ed88

0800a688 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a68e:	f3ef 8305 	mrs	r3, IPSR
 800a692:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2b0f      	cmp	r3, #15
 800a698:	d914      	bls.n	800a6c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a69a:	4a17      	ldr	r2, [pc, #92]	; (800a6f8 <vPortValidateInterruptPriority+0x70>)
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	4413      	add	r3, r2
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a6a4:	4b15      	ldr	r3, [pc, #84]	; (800a6fc <vPortValidateInterruptPriority+0x74>)
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	7afa      	ldrb	r2, [r7, #11]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d20a      	bcs.n	800a6c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	607b      	str	r3, [r7, #4]
}
 800a6c0:	bf00      	nop
 800a6c2:	e7fe      	b.n	800a6c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a6c4:	4b0e      	ldr	r3, [pc, #56]	; (800a700 <vPortValidateInterruptPriority+0x78>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a6cc:	4b0d      	ldr	r3, [pc, #52]	; (800a704 <vPortValidateInterruptPriority+0x7c>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d90a      	bls.n	800a6ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d8:	f383 8811 	msr	BASEPRI, r3
 800a6dc:	f3bf 8f6f 	isb	sy
 800a6e0:	f3bf 8f4f 	dsb	sy
 800a6e4:	603b      	str	r3, [r7, #0]
}
 800a6e6:	bf00      	nop
 800a6e8:	e7fe      	b.n	800a6e8 <vPortValidateInterruptPriority+0x60>
	}
 800a6ea:	bf00      	nop
 800a6ec:	3714      	adds	r7, #20
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop
 800a6f8:	e000e3f0 	.word	0xe000e3f0
 800a6fc:	20001324 	.word	0x20001324
 800a700:	e000ed0c 	.word	0xe000ed0c
 800a704:	20001328 	.word	0x20001328

0800a708 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b08a      	sub	sp, #40	; 0x28
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a710:	2300      	movs	r3, #0
 800a712:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a714:	f7fe fd7c 	bl	8009210 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a718:	4b5b      	ldr	r3, [pc, #364]	; (800a888 <pvPortMalloc+0x180>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d101      	bne.n	800a724 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a720:	f000 f920 	bl	800a964 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a724:	4b59      	ldr	r3, [pc, #356]	; (800a88c <pvPortMalloc+0x184>)
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4013      	ands	r3, r2
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f040 8093 	bne.w	800a858 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d01d      	beq.n	800a774 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a738:	2208      	movs	r2, #8
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	4413      	add	r3, r2
 800a73e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f003 0307 	and.w	r3, r3, #7
 800a746:	2b00      	cmp	r3, #0
 800a748:	d014      	beq.n	800a774 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f023 0307 	bic.w	r3, r3, #7
 800a750:	3308      	adds	r3, #8
 800a752:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f003 0307 	and.w	r3, r3, #7
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00a      	beq.n	800a774 <pvPortMalloc+0x6c>
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	617b      	str	r3, [r7, #20]
}
 800a770:	bf00      	nop
 800a772:	e7fe      	b.n	800a772 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d06e      	beq.n	800a858 <pvPortMalloc+0x150>
 800a77a:	4b45      	ldr	r3, [pc, #276]	; (800a890 <pvPortMalloc+0x188>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	429a      	cmp	r2, r3
 800a782:	d869      	bhi.n	800a858 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a784:	4b43      	ldr	r3, [pc, #268]	; (800a894 <pvPortMalloc+0x18c>)
 800a786:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a788:	4b42      	ldr	r3, [pc, #264]	; (800a894 <pvPortMalloc+0x18c>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a78e:	e004      	b.n	800a79a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a792:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d903      	bls.n	800a7ac <pvPortMalloc+0xa4>
 800a7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d1f1      	bne.n	800a790 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a7ac:	4b36      	ldr	r3, [pc, #216]	; (800a888 <pvPortMalloc+0x180>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d050      	beq.n	800a858 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a7b6:	6a3b      	ldr	r3, [r7, #32]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2208      	movs	r2, #8
 800a7bc:	4413      	add	r3, r2
 800a7be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	6a3b      	ldr	r3, [r7, #32]
 800a7c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	1ad2      	subs	r2, r2, r3
 800a7d0:	2308      	movs	r3, #8
 800a7d2:	005b      	lsls	r3, r3, #1
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d91f      	bls.n	800a818 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a7d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4413      	add	r3, r2
 800a7de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	f003 0307 	and.w	r3, r3, #7
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00a      	beq.n	800a800 <pvPortMalloc+0xf8>
	__asm volatile
 800a7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ee:	f383 8811 	msr	BASEPRI, r3
 800a7f2:	f3bf 8f6f 	isb	sy
 800a7f6:	f3bf 8f4f 	dsb	sy
 800a7fa:	613b      	str	r3, [r7, #16]
}
 800a7fc:	bf00      	nop
 800a7fe:	e7fe      	b.n	800a7fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a802:	685a      	ldr	r2, [r3, #4]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	1ad2      	subs	r2, r2, r3
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a812:	69b8      	ldr	r0, [r7, #24]
 800a814:	f000 f908 	bl	800aa28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a818:	4b1d      	ldr	r3, [pc, #116]	; (800a890 <pvPortMalloc+0x188>)
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	4a1b      	ldr	r2, [pc, #108]	; (800a890 <pvPortMalloc+0x188>)
 800a824:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a826:	4b1a      	ldr	r3, [pc, #104]	; (800a890 <pvPortMalloc+0x188>)
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	4b1b      	ldr	r3, [pc, #108]	; (800a898 <pvPortMalloc+0x190>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d203      	bcs.n	800a83a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a832:	4b17      	ldr	r3, [pc, #92]	; (800a890 <pvPortMalloc+0x188>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a18      	ldr	r2, [pc, #96]	; (800a898 <pvPortMalloc+0x190>)
 800a838:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83c:	685a      	ldr	r2, [r3, #4]
 800a83e:	4b13      	ldr	r3, [pc, #76]	; (800a88c <pvPortMalloc+0x184>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	431a      	orrs	r2, r3
 800a844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a846:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84a:	2200      	movs	r2, #0
 800a84c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a84e:	4b13      	ldr	r3, [pc, #76]	; (800a89c <pvPortMalloc+0x194>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3301      	adds	r3, #1
 800a854:	4a11      	ldr	r2, [pc, #68]	; (800a89c <pvPortMalloc+0x194>)
 800a856:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a858:	f7fe fce8 	bl	800922c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	f003 0307 	and.w	r3, r3, #7
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00a      	beq.n	800a87c <pvPortMalloc+0x174>
	__asm volatile
 800a866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	60fb      	str	r3, [r7, #12]
}
 800a878:	bf00      	nop
 800a87a:	e7fe      	b.n	800a87a <pvPortMalloc+0x172>
	return pvReturn;
 800a87c:	69fb      	ldr	r3, [r7, #28]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3728      	adds	r7, #40	; 0x28
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	200026bc 	.word	0x200026bc
 800a88c:	200026d0 	.word	0x200026d0
 800a890:	200026c0 	.word	0x200026c0
 800a894:	200026b4 	.word	0x200026b4
 800a898:	200026c4 	.word	0x200026c4
 800a89c:	200026c8 	.word	0x200026c8

0800a8a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b086      	sub	sp, #24
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d04d      	beq.n	800a94e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a8b2:	2308      	movs	r3, #8
 800a8b4:	425b      	negs	r3, r3
 800a8b6:	697a      	ldr	r2, [r7, #20]
 800a8b8:	4413      	add	r3, r2
 800a8ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	685a      	ldr	r2, [r3, #4]
 800a8c4:	4b24      	ldr	r3, [pc, #144]	; (800a958 <vPortFree+0xb8>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4013      	ands	r3, r2
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d10a      	bne.n	800a8e4 <vPortFree+0x44>
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	60fb      	str	r3, [r7, #12]
}
 800a8e0:	bf00      	nop
 800a8e2:	e7fe      	b.n	800a8e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00a      	beq.n	800a902 <vPortFree+0x62>
	__asm volatile
 800a8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f0:	f383 8811 	msr	BASEPRI, r3
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	60bb      	str	r3, [r7, #8]
}
 800a8fe:	bf00      	nop
 800a900:	e7fe      	b.n	800a900 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	685a      	ldr	r2, [r3, #4]
 800a906:	4b14      	ldr	r3, [pc, #80]	; (800a958 <vPortFree+0xb8>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4013      	ands	r3, r2
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d01e      	beq.n	800a94e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d11a      	bne.n	800a94e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	685a      	ldr	r2, [r3, #4]
 800a91c:	4b0e      	ldr	r3, [pc, #56]	; (800a958 <vPortFree+0xb8>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	43db      	mvns	r3, r3
 800a922:	401a      	ands	r2, r3
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a928:	f7fe fc72 	bl	8009210 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	685a      	ldr	r2, [r3, #4]
 800a930:	4b0a      	ldr	r3, [pc, #40]	; (800a95c <vPortFree+0xbc>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4413      	add	r3, r2
 800a936:	4a09      	ldr	r2, [pc, #36]	; (800a95c <vPortFree+0xbc>)
 800a938:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a93a:	6938      	ldr	r0, [r7, #16]
 800a93c:	f000 f874 	bl	800aa28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a940:	4b07      	ldr	r3, [pc, #28]	; (800a960 <vPortFree+0xc0>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3301      	adds	r3, #1
 800a946:	4a06      	ldr	r2, [pc, #24]	; (800a960 <vPortFree+0xc0>)
 800a948:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a94a:	f7fe fc6f 	bl	800922c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a94e:	bf00      	nop
 800a950:	3718      	adds	r7, #24
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	200026d0 	.word	0x200026d0
 800a95c:	200026c0 	.word	0x200026c0
 800a960:	200026cc 	.word	0x200026cc

0800a964 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a964:	b480      	push	{r7}
 800a966:	b085      	sub	sp, #20
 800a968:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a96a:	f241 3388 	movw	r3, #5000	; 0x1388
 800a96e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a970:	4b27      	ldr	r3, [pc, #156]	; (800aa10 <prvHeapInit+0xac>)
 800a972:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f003 0307 	and.w	r3, r3, #7
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00c      	beq.n	800a998 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	3307      	adds	r3, #7
 800a982:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f023 0307 	bic.w	r3, r3, #7
 800a98a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a98c:	68ba      	ldr	r2, [r7, #8]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	1ad3      	subs	r3, r2, r3
 800a992:	4a1f      	ldr	r2, [pc, #124]	; (800aa10 <prvHeapInit+0xac>)
 800a994:	4413      	add	r3, r2
 800a996:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a99c:	4a1d      	ldr	r2, [pc, #116]	; (800aa14 <prvHeapInit+0xb0>)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a9a2:	4b1c      	ldr	r3, [pc, #112]	; (800aa14 <prvHeapInit+0xb0>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a9b0:	2208      	movs	r2, #8
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	1a9b      	subs	r3, r3, r2
 800a9b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f023 0307 	bic.w	r3, r3, #7
 800a9be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	4a15      	ldr	r2, [pc, #84]	; (800aa18 <prvHeapInit+0xb4>)
 800a9c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a9c6:	4b14      	ldr	r3, [pc, #80]	; (800aa18 <prvHeapInit+0xb4>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a9ce:	4b12      	ldr	r3, [pc, #72]	; (800aa18 <prvHeapInit+0xb4>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	1ad2      	subs	r2, r2, r3
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a9e4:	4b0c      	ldr	r3, [pc, #48]	; (800aa18 <prvHeapInit+0xb4>)
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	4a0a      	ldr	r2, [pc, #40]	; (800aa1c <prvHeapInit+0xb8>)
 800a9f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	4a09      	ldr	r2, [pc, #36]	; (800aa20 <prvHeapInit+0xbc>)
 800a9fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a9fc:	4b09      	ldr	r3, [pc, #36]	; (800aa24 <prvHeapInit+0xc0>)
 800a9fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aa02:	601a      	str	r2, [r3, #0]
}
 800aa04:	bf00      	nop
 800aa06:	3714      	adds	r7, #20
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr
 800aa10:	2000132c 	.word	0x2000132c
 800aa14:	200026b4 	.word	0x200026b4
 800aa18:	200026bc 	.word	0x200026bc
 800aa1c:	200026c4 	.word	0x200026c4
 800aa20:	200026c0 	.word	0x200026c0
 800aa24:	200026d0 	.word	0x200026d0

0800aa28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa30:	4b28      	ldr	r3, [pc, #160]	; (800aad4 <prvInsertBlockIntoFreeList+0xac>)
 800aa32:	60fb      	str	r3, [r7, #12]
 800aa34:	e002      	b.n	800aa3c <prvInsertBlockIntoFreeList+0x14>
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	60fb      	str	r3, [r7, #12]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d8f7      	bhi.n	800aa36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	68ba      	ldr	r2, [r7, #8]
 800aa50:	4413      	add	r3, r2
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d108      	bne.n	800aa6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	685a      	ldr	r2, [r3, #4]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	441a      	add	r2, r3
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	68ba      	ldr	r2, [r7, #8]
 800aa74:	441a      	add	r2, r3
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d118      	bne.n	800aab0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	4b15      	ldr	r3, [pc, #84]	; (800aad8 <prvInsertBlockIntoFreeList+0xb0>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d00d      	beq.n	800aaa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	685a      	ldr	r2, [r3, #4]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	441a      	add	r2, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	601a      	str	r2, [r3, #0]
 800aaa4:	e008      	b.n	800aab8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aaa6:	4b0c      	ldr	r3, [pc, #48]	; (800aad8 <prvInsertBlockIntoFreeList+0xb0>)
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	601a      	str	r2, [r3, #0]
 800aaae:	e003      	b.n	800aab8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aab8:	68fa      	ldr	r2, [r7, #12]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d002      	beq.n	800aac6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aac6:	bf00      	nop
 800aac8:	3714      	adds	r7, #20
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	200026b4 	.word	0x200026b4
 800aad8:	200026bc 	.word	0x200026bc

0800aadc <__assert_func>:
 800aadc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aade:	4614      	mov	r4, r2
 800aae0:	461a      	mov	r2, r3
 800aae2:	4b09      	ldr	r3, [pc, #36]	; (800ab08 <__assert_func+0x2c>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4605      	mov	r5, r0
 800aae8:	68d8      	ldr	r0, [r3, #12]
 800aaea:	b14c      	cbz	r4, 800ab00 <__assert_func+0x24>
 800aaec:	4b07      	ldr	r3, [pc, #28]	; (800ab0c <__assert_func+0x30>)
 800aaee:	9100      	str	r1, [sp, #0]
 800aaf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aaf4:	4906      	ldr	r1, [pc, #24]	; (800ab10 <__assert_func+0x34>)
 800aaf6:	462b      	mov	r3, r5
 800aaf8:	f000 fd18 	bl	800b52c <fiprintf>
 800aafc:	f000 ff19 	bl	800b932 <abort>
 800ab00:	4b04      	ldr	r3, [pc, #16]	; (800ab14 <__assert_func+0x38>)
 800ab02:	461c      	mov	r4, r3
 800ab04:	e7f3      	b.n	800aaee <__assert_func+0x12>
 800ab06:	bf00      	nop
 800ab08:	20000120 	.word	0x20000120
 800ab0c:	0800dc44 	.word	0x0800dc44
 800ab10:	0800dc51 	.word	0x0800dc51
 800ab14:	0800dc7f 	.word	0x0800dc7f

0800ab18 <__cvt>:
 800ab18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab1c:	ec55 4b10 	vmov	r4, r5, d0
 800ab20:	2d00      	cmp	r5, #0
 800ab22:	460e      	mov	r6, r1
 800ab24:	4619      	mov	r1, r3
 800ab26:	462b      	mov	r3, r5
 800ab28:	bfbb      	ittet	lt
 800ab2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ab2e:	461d      	movlt	r5, r3
 800ab30:	2300      	movge	r3, #0
 800ab32:	232d      	movlt	r3, #45	; 0x2d
 800ab34:	700b      	strb	r3, [r1, #0]
 800ab36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ab3c:	4691      	mov	r9, r2
 800ab3e:	f023 0820 	bic.w	r8, r3, #32
 800ab42:	bfbc      	itt	lt
 800ab44:	4622      	movlt	r2, r4
 800ab46:	4614      	movlt	r4, r2
 800ab48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab4c:	d005      	beq.n	800ab5a <__cvt+0x42>
 800ab4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ab52:	d100      	bne.n	800ab56 <__cvt+0x3e>
 800ab54:	3601      	adds	r6, #1
 800ab56:	2102      	movs	r1, #2
 800ab58:	e000      	b.n	800ab5c <__cvt+0x44>
 800ab5a:	2103      	movs	r1, #3
 800ab5c:	ab03      	add	r3, sp, #12
 800ab5e:	9301      	str	r3, [sp, #4]
 800ab60:	ab02      	add	r3, sp, #8
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	ec45 4b10 	vmov	d0, r4, r5
 800ab68:	4653      	mov	r3, sl
 800ab6a:	4632      	mov	r2, r6
 800ab6c:	f000 ff70 	bl	800ba50 <_dtoa_r>
 800ab70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ab74:	4607      	mov	r7, r0
 800ab76:	d102      	bne.n	800ab7e <__cvt+0x66>
 800ab78:	f019 0f01 	tst.w	r9, #1
 800ab7c:	d022      	beq.n	800abc4 <__cvt+0xac>
 800ab7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab82:	eb07 0906 	add.w	r9, r7, r6
 800ab86:	d110      	bne.n	800abaa <__cvt+0x92>
 800ab88:	783b      	ldrb	r3, [r7, #0]
 800ab8a:	2b30      	cmp	r3, #48	; 0x30
 800ab8c:	d10a      	bne.n	800aba4 <__cvt+0x8c>
 800ab8e:	2200      	movs	r2, #0
 800ab90:	2300      	movs	r3, #0
 800ab92:	4620      	mov	r0, r4
 800ab94:	4629      	mov	r1, r5
 800ab96:	f7f5 ff97 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab9a:	b918      	cbnz	r0, 800aba4 <__cvt+0x8c>
 800ab9c:	f1c6 0601 	rsb	r6, r6, #1
 800aba0:	f8ca 6000 	str.w	r6, [sl]
 800aba4:	f8da 3000 	ldr.w	r3, [sl]
 800aba8:	4499      	add	r9, r3
 800abaa:	2200      	movs	r2, #0
 800abac:	2300      	movs	r3, #0
 800abae:	4620      	mov	r0, r4
 800abb0:	4629      	mov	r1, r5
 800abb2:	f7f5 ff89 	bl	8000ac8 <__aeabi_dcmpeq>
 800abb6:	b108      	cbz	r0, 800abbc <__cvt+0xa4>
 800abb8:	f8cd 900c 	str.w	r9, [sp, #12]
 800abbc:	2230      	movs	r2, #48	; 0x30
 800abbe:	9b03      	ldr	r3, [sp, #12]
 800abc0:	454b      	cmp	r3, r9
 800abc2:	d307      	bcc.n	800abd4 <__cvt+0xbc>
 800abc4:	9b03      	ldr	r3, [sp, #12]
 800abc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abc8:	1bdb      	subs	r3, r3, r7
 800abca:	4638      	mov	r0, r7
 800abcc:	6013      	str	r3, [r2, #0]
 800abce:	b004      	add	sp, #16
 800abd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abd4:	1c59      	adds	r1, r3, #1
 800abd6:	9103      	str	r1, [sp, #12]
 800abd8:	701a      	strb	r2, [r3, #0]
 800abda:	e7f0      	b.n	800abbe <__cvt+0xa6>

0800abdc <__exponent>:
 800abdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abde:	4603      	mov	r3, r0
 800abe0:	2900      	cmp	r1, #0
 800abe2:	bfb8      	it	lt
 800abe4:	4249      	neglt	r1, r1
 800abe6:	f803 2b02 	strb.w	r2, [r3], #2
 800abea:	bfb4      	ite	lt
 800abec:	222d      	movlt	r2, #45	; 0x2d
 800abee:	222b      	movge	r2, #43	; 0x2b
 800abf0:	2909      	cmp	r1, #9
 800abf2:	7042      	strb	r2, [r0, #1]
 800abf4:	dd2a      	ble.n	800ac4c <__exponent+0x70>
 800abf6:	f10d 0207 	add.w	r2, sp, #7
 800abfa:	4617      	mov	r7, r2
 800abfc:	260a      	movs	r6, #10
 800abfe:	4694      	mov	ip, r2
 800ac00:	fb91 f5f6 	sdiv	r5, r1, r6
 800ac04:	fb06 1415 	mls	r4, r6, r5, r1
 800ac08:	3430      	adds	r4, #48	; 0x30
 800ac0a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ac0e:	460c      	mov	r4, r1
 800ac10:	2c63      	cmp	r4, #99	; 0x63
 800ac12:	f102 32ff 	add.w	r2, r2, #4294967295
 800ac16:	4629      	mov	r1, r5
 800ac18:	dcf1      	bgt.n	800abfe <__exponent+0x22>
 800ac1a:	3130      	adds	r1, #48	; 0x30
 800ac1c:	f1ac 0402 	sub.w	r4, ip, #2
 800ac20:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ac24:	1c41      	adds	r1, r0, #1
 800ac26:	4622      	mov	r2, r4
 800ac28:	42ba      	cmp	r2, r7
 800ac2a:	d30a      	bcc.n	800ac42 <__exponent+0x66>
 800ac2c:	f10d 0209 	add.w	r2, sp, #9
 800ac30:	eba2 020c 	sub.w	r2, r2, ip
 800ac34:	42bc      	cmp	r4, r7
 800ac36:	bf88      	it	hi
 800ac38:	2200      	movhi	r2, #0
 800ac3a:	4413      	add	r3, r2
 800ac3c:	1a18      	subs	r0, r3, r0
 800ac3e:	b003      	add	sp, #12
 800ac40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac42:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ac46:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ac4a:	e7ed      	b.n	800ac28 <__exponent+0x4c>
 800ac4c:	2330      	movs	r3, #48	; 0x30
 800ac4e:	3130      	adds	r1, #48	; 0x30
 800ac50:	7083      	strb	r3, [r0, #2]
 800ac52:	70c1      	strb	r1, [r0, #3]
 800ac54:	1d03      	adds	r3, r0, #4
 800ac56:	e7f1      	b.n	800ac3c <__exponent+0x60>

0800ac58 <_printf_float>:
 800ac58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5c:	ed2d 8b02 	vpush	{d8}
 800ac60:	b08d      	sub	sp, #52	; 0x34
 800ac62:	460c      	mov	r4, r1
 800ac64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ac68:	4616      	mov	r6, r2
 800ac6a:	461f      	mov	r7, r3
 800ac6c:	4605      	mov	r5, r0
 800ac6e:	f000 fddb 	bl	800b828 <_localeconv_r>
 800ac72:	f8d0 a000 	ldr.w	sl, [r0]
 800ac76:	4650      	mov	r0, sl
 800ac78:	f7f5 fafa 	bl	8000270 <strlen>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	930a      	str	r3, [sp, #40]	; 0x28
 800ac80:	6823      	ldr	r3, [r4, #0]
 800ac82:	9305      	str	r3, [sp, #20]
 800ac84:	f8d8 3000 	ldr.w	r3, [r8]
 800ac88:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ac8c:	3307      	adds	r3, #7
 800ac8e:	f023 0307 	bic.w	r3, r3, #7
 800ac92:	f103 0208 	add.w	r2, r3, #8
 800ac96:	f8c8 2000 	str.w	r2, [r8]
 800ac9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aca2:	9307      	str	r3, [sp, #28]
 800aca4:	f8cd 8018 	str.w	r8, [sp, #24]
 800aca8:	ee08 0a10 	vmov	s16, r0
 800acac:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800acb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acb4:	4b9e      	ldr	r3, [pc, #632]	; (800af30 <_printf_float+0x2d8>)
 800acb6:	f04f 32ff 	mov.w	r2, #4294967295
 800acba:	f7f5 ff37 	bl	8000b2c <__aeabi_dcmpun>
 800acbe:	bb88      	cbnz	r0, 800ad24 <_printf_float+0xcc>
 800acc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acc4:	4b9a      	ldr	r3, [pc, #616]	; (800af30 <_printf_float+0x2d8>)
 800acc6:	f04f 32ff 	mov.w	r2, #4294967295
 800acca:	f7f5 ff11 	bl	8000af0 <__aeabi_dcmple>
 800acce:	bb48      	cbnz	r0, 800ad24 <_printf_float+0xcc>
 800acd0:	2200      	movs	r2, #0
 800acd2:	2300      	movs	r3, #0
 800acd4:	4640      	mov	r0, r8
 800acd6:	4649      	mov	r1, r9
 800acd8:	f7f5 ff00 	bl	8000adc <__aeabi_dcmplt>
 800acdc:	b110      	cbz	r0, 800ace4 <_printf_float+0x8c>
 800acde:	232d      	movs	r3, #45	; 0x2d
 800ace0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ace4:	4a93      	ldr	r2, [pc, #588]	; (800af34 <_printf_float+0x2dc>)
 800ace6:	4b94      	ldr	r3, [pc, #592]	; (800af38 <_printf_float+0x2e0>)
 800ace8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800acec:	bf94      	ite	ls
 800acee:	4690      	movls	r8, r2
 800acf0:	4698      	movhi	r8, r3
 800acf2:	2303      	movs	r3, #3
 800acf4:	6123      	str	r3, [r4, #16]
 800acf6:	9b05      	ldr	r3, [sp, #20]
 800acf8:	f023 0304 	bic.w	r3, r3, #4
 800acfc:	6023      	str	r3, [r4, #0]
 800acfe:	f04f 0900 	mov.w	r9, #0
 800ad02:	9700      	str	r7, [sp, #0]
 800ad04:	4633      	mov	r3, r6
 800ad06:	aa0b      	add	r2, sp, #44	; 0x2c
 800ad08:	4621      	mov	r1, r4
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	f000 f9da 	bl	800b0c4 <_printf_common>
 800ad10:	3001      	adds	r0, #1
 800ad12:	f040 8090 	bne.w	800ae36 <_printf_float+0x1de>
 800ad16:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1a:	b00d      	add	sp, #52	; 0x34
 800ad1c:	ecbd 8b02 	vpop	{d8}
 800ad20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad24:	4642      	mov	r2, r8
 800ad26:	464b      	mov	r3, r9
 800ad28:	4640      	mov	r0, r8
 800ad2a:	4649      	mov	r1, r9
 800ad2c:	f7f5 fefe 	bl	8000b2c <__aeabi_dcmpun>
 800ad30:	b140      	cbz	r0, 800ad44 <_printf_float+0xec>
 800ad32:	464b      	mov	r3, r9
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	bfbc      	itt	lt
 800ad38:	232d      	movlt	r3, #45	; 0x2d
 800ad3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ad3e:	4a7f      	ldr	r2, [pc, #508]	; (800af3c <_printf_float+0x2e4>)
 800ad40:	4b7f      	ldr	r3, [pc, #508]	; (800af40 <_printf_float+0x2e8>)
 800ad42:	e7d1      	b.n	800ace8 <_printf_float+0x90>
 800ad44:	6863      	ldr	r3, [r4, #4]
 800ad46:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ad4a:	9206      	str	r2, [sp, #24]
 800ad4c:	1c5a      	adds	r2, r3, #1
 800ad4e:	d13f      	bne.n	800add0 <_printf_float+0x178>
 800ad50:	2306      	movs	r3, #6
 800ad52:	6063      	str	r3, [r4, #4]
 800ad54:	9b05      	ldr	r3, [sp, #20]
 800ad56:	6861      	ldr	r1, [r4, #4]
 800ad58:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	9303      	str	r3, [sp, #12]
 800ad60:	ab0a      	add	r3, sp, #40	; 0x28
 800ad62:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ad66:	ab09      	add	r3, sp, #36	; 0x24
 800ad68:	ec49 8b10 	vmov	d0, r8, r9
 800ad6c:	9300      	str	r3, [sp, #0]
 800ad6e:	6022      	str	r2, [r4, #0]
 800ad70:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ad74:	4628      	mov	r0, r5
 800ad76:	f7ff fecf 	bl	800ab18 <__cvt>
 800ad7a:	9b06      	ldr	r3, [sp, #24]
 800ad7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad7e:	2b47      	cmp	r3, #71	; 0x47
 800ad80:	4680      	mov	r8, r0
 800ad82:	d108      	bne.n	800ad96 <_printf_float+0x13e>
 800ad84:	1cc8      	adds	r0, r1, #3
 800ad86:	db02      	blt.n	800ad8e <_printf_float+0x136>
 800ad88:	6863      	ldr	r3, [r4, #4]
 800ad8a:	4299      	cmp	r1, r3
 800ad8c:	dd41      	ble.n	800ae12 <_printf_float+0x1ba>
 800ad8e:	f1ab 0302 	sub.w	r3, fp, #2
 800ad92:	fa5f fb83 	uxtb.w	fp, r3
 800ad96:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad9a:	d820      	bhi.n	800adde <_printf_float+0x186>
 800ad9c:	3901      	subs	r1, #1
 800ad9e:	465a      	mov	r2, fp
 800ada0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ada4:	9109      	str	r1, [sp, #36]	; 0x24
 800ada6:	f7ff ff19 	bl	800abdc <__exponent>
 800adaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adac:	1813      	adds	r3, r2, r0
 800adae:	2a01      	cmp	r2, #1
 800adb0:	4681      	mov	r9, r0
 800adb2:	6123      	str	r3, [r4, #16]
 800adb4:	dc02      	bgt.n	800adbc <_printf_float+0x164>
 800adb6:	6822      	ldr	r2, [r4, #0]
 800adb8:	07d2      	lsls	r2, r2, #31
 800adba:	d501      	bpl.n	800adc0 <_printf_float+0x168>
 800adbc:	3301      	adds	r3, #1
 800adbe:	6123      	str	r3, [r4, #16]
 800adc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d09c      	beq.n	800ad02 <_printf_float+0xaa>
 800adc8:	232d      	movs	r3, #45	; 0x2d
 800adca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adce:	e798      	b.n	800ad02 <_printf_float+0xaa>
 800add0:	9a06      	ldr	r2, [sp, #24]
 800add2:	2a47      	cmp	r2, #71	; 0x47
 800add4:	d1be      	bne.n	800ad54 <_printf_float+0xfc>
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1bc      	bne.n	800ad54 <_printf_float+0xfc>
 800adda:	2301      	movs	r3, #1
 800addc:	e7b9      	b.n	800ad52 <_printf_float+0xfa>
 800adde:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ade2:	d118      	bne.n	800ae16 <_printf_float+0x1be>
 800ade4:	2900      	cmp	r1, #0
 800ade6:	6863      	ldr	r3, [r4, #4]
 800ade8:	dd0b      	ble.n	800ae02 <_printf_float+0x1aa>
 800adea:	6121      	str	r1, [r4, #16]
 800adec:	b913      	cbnz	r3, 800adf4 <_printf_float+0x19c>
 800adee:	6822      	ldr	r2, [r4, #0]
 800adf0:	07d0      	lsls	r0, r2, #31
 800adf2:	d502      	bpl.n	800adfa <_printf_float+0x1a2>
 800adf4:	3301      	adds	r3, #1
 800adf6:	440b      	add	r3, r1
 800adf8:	6123      	str	r3, [r4, #16]
 800adfa:	65a1      	str	r1, [r4, #88]	; 0x58
 800adfc:	f04f 0900 	mov.w	r9, #0
 800ae00:	e7de      	b.n	800adc0 <_printf_float+0x168>
 800ae02:	b913      	cbnz	r3, 800ae0a <_printf_float+0x1b2>
 800ae04:	6822      	ldr	r2, [r4, #0]
 800ae06:	07d2      	lsls	r2, r2, #31
 800ae08:	d501      	bpl.n	800ae0e <_printf_float+0x1b6>
 800ae0a:	3302      	adds	r3, #2
 800ae0c:	e7f4      	b.n	800adf8 <_printf_float+0x1a0>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e7f2      	b.n	800adf8 <_printf_float+0x1a0>
 800ae12:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ae16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae18:	4299      	cmp	r1, r3
 800ae1a:	db05      	blt.n	800ae28 <_printf_float+0x1d0>
 800ae1c:	6823      	ldr	r3, [r4, #0]
 800ae1e:	6121      	str	r1, [r4, #16]
 800ae20:	07d8      	lsls	r0, r3, #31
 800ae22:	d5ea      	bpl.n	800adfa <_printf_float+0x1a2>
 800ae24:	1c4b      	adds	r3, r1, #1
 800ae26:	e7e7      	b.n	800adf8 <_printf_float+0x1a0>
 800ae28:	2900      	cmp	r1, #0
 800ae2a:	bfd4      	ite	le
 800ae2c:	f1c1 0202 	rsble	r2, r1, #2
 800ae30:	2201      	movgt	r2, #1
 800ae32:	4413      	add	r3, r2
 800ae34:	e7e0      	b.n	800adf8 <_printf_float+0x1a0>
 800ae36:	6823      	ldr	r3, [r4, #0]
 800ae38:	055a      	lsls	r2, r3, #21
 800ae3a:	d407      	bmi.n	800ae4c <_printf_float+0x1f4>
 800ae3c:	6923      	ldr	r3, [r4, #16]
 800ae3e:	4642      	mov	r2, r8
 800ae40:	4631      	mov	r1, r6
 800ae42:	4628      	mov	r0, r5
 800ae44:	47b8      	blx	r7
 800ae46:	3001      	adds	r0, #1
 800ae48:	d12c      	bne.n	800aea4 <_printf_float+0x24c>
 800ae4a:	e764      	b.n	800ad16 <_printf_float+0xbe>
 800ae4c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ae50:	f240 80e0 	bls.w	800b014 <_printf_float+0x3bc>
 800ae54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae58:	2200      	movs	r2, #0
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	f7f5 fe34 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d034      	beq.n	800aece <_printf_float+0x276>
 800ae64:	4a37      	ldr	r2, [pc, #220]	; (800af44 <_printf_float+0x2ec>)
 800ae66:	2301      	movs	r3, #1
 800ae68:	4631      	mov	r1, r6
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	47b8      	blx	r7
 800ae6e:	3001      	adds	r0, #1
 800ae70:	f43f af51 	beq.w	800ad16 <_printf_float+0xbe>
 800ae74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	db02      	blt.n	800ae82 <_printf_float+0x22a>
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	07d8      	lsls	r0, r3, #31
 800ae80:	d510      	bpl.n	800aea4 <_printf_float+0x24c>
 800ae82:	ee18 3a10 	vmov	r3, s16
 800ae86:	4652      	mov	r2, sl
 800ae88:	4631      	mov	r1, r6
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	47b8      	blx	r7
 800ae8e:	3001      	adds	r0, #1
 800ae90:	f43f af41 	beq.w	800ad16 <_printf_float+0xbe>
 800ae94:	f04f 0800 	mov.w	r8, #0
 800ae98:	f104 091a 	add.w	r9, r4, #26
 800ae9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	4543      	cmp	r3, r8
 800aea2:	dc09      	bgt.n	800aeb8 <_printf_float+0x260>
 800aea4:	6823      	ldr	r3, [r4, #0]
 800aea6:	079b      	lsls	r3, r3, #30
 800aea8:	f100 8107 	bmi.w	800b0ba <_printf_float+0x462>
 800aeac:	68e0      	ldr	r0, [r4, #12]
 800aeae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeb0:	4298      	cmp	r0, r3
 800aeb2:	bfb8      	it	lt
 800aeb4:	4618      	movlt	r0, r3
 800aeb6:	e730      	b.n	800ad1a <_printf_float+0xc2>
 800aeb8:	2301      	movs	r3, #1
 800aeba:	464a      	mov	r2, r9
 800aebc:	4631      	mov	r1, r6
 800aebe:	4628      	mov	r0, r5
 800aec0:	47b8      	blx	r7
 800aec2:	3001      	adds	r0, #1
 800aec4:	f43f af27 	beq.w	800ad16 <_printf_float+0xbe>
 800aec8:	f108 0801 	add.w	r8, r8, #1
 800aecc:	e7e6      	b.n	800ae9c <_printf_float+0x244>
 800aece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	dc39      	bgt.n	800af48 <_printf_float+0x2f0>
 800aed4:	4a1b      	ldr	r2, [pc, #108]	; (800af44 <_printf_float+0x2ec>)
 800aed6:	2301      	movs	r3, #1
 800aed8:	4631      	mov	r1, r6
 800aeda:	4628      	mov	r0, r5
 800aedc:	47b8      	blx	r7
 800aede:	3001      	adds	r0, #1
 800aee0:	f43f af19 	beq.w	800ad16 <_printf_float+0xbe>
 800aee4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aee8:	4313      	orrs	r3, r2
 800aeea:	d102      	bne.n	800aef2 <_printf_float+0x29a>
 800aeec:	6823      	ldr	r3, [r4, #0]
 800aeee:	07d9      	lsls	r1, r3, #31
 800aef0:	d5d8      	bpl.n	800aea4 <_printf_float+0x24c>
 800aef2:	ee18 3a10 	vmov	r3, s16
 800aef6:	4652      	mov	r2, sl
 800aef8:	4631      	mov	r1, r6
 800aefa:	4628      	mov	r0, r5
 800aefc:	47b8      	blx	r7
 800aefe:	3001      	adds	r0, #1
 800af00:	f43f af09 	beq.w	800ad16 <_printf_float+0xbe>
 800af04:	f04f 0900 	mov.w	r9, #0
 800af08:	f104 0a1a 	add.w	sl, r4, #26
 800af0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af0e:	425b      	negs	r3, r3
 800af10:	454b      	cmp	r3, r9
 800af12:	dc01      	bgt.n	800af18 <_printf_float+0x2c0>
 800af14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af16:	e792      	b.n	800ae3e <_printf_float+0x1e6>
 800af18:	2301      	movs	r3, #1
 800af1a:	4652      	mov	r2, sl
 800af1c:	4631      	mov	r1, r6
 800af1e:	4628      	mov	r0, r5
 800af20:	47b8      	blx	r7
 800af22:	3001      	adds	r0, #1
 800af24:	f43f aef7 	beq.w	800ad16 <_printf_float+0xbe>
 800af28:	f109 0901 	add.w	r9, r9, #1
 800af2c:	e7ee      	b.n	800af0c <_printf_float+0x2b4>
 800af2e:	bf00      	nop
 800af30:	7fefffff 	.word	0x7fefffff
 800af34:	0800dc80 	.word	0x0800dc80
 800af38:	0800dc84 	.word	0x0800dc84
 800af3c:	0800dc88 	.word	0x0800dc88
 800af40:	0800dc8c 	.word	0x0800dc8c
 800af44:	0800dc90 	.word	0x0800dc90
 800af48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af4c:	429a      	cmp	r2, r3
 800af4e:	bfa8      	it	ge
 800af50:	461a      	movge	r2, r3
 800af52:	2a00      	cmp	r2, #0
 800af54:	4691      	mov	r9, r2
 800af56:	dc37      	bgt.n	800afc8 <_printf_float+0x370>
 800af58:	f04f 0b00 	mov.w	fp, #0
 800af5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af60:	f104 021a 	add.w	r2, r4, #26
 800af64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af66:	9305      	str	r3, [sp, #20]
 800af68:	eba3 0309 	sub.w	r3, r3, r9
 800af6c:	455b      	cmp	r3, fp
 800af6e:	dc33      	bgt.n	800afd8 <_printf_float+0x380>
 800af70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af74:	429a      	cmp	r2, r3
 800af76:	db3b      	blt.n	800aff0 <_printf_float+0x398>
 800af78:	6823      	ldr	r3, [r4, #0]
 800af7a:	07da      	lsls	r2, r3, #31
 800af7c:	d438      	bmi.n	800aff0 <_printf_float+0x398>
 800af7e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800af82:	eba2 0903 	sub.w	r9, r2, r3
 800af86:	9b05      	ldr	r3, [sp, #20]
 800af88:	1ad2      	subs	r2, r2, r3
 800af8a:	4591      	cmp	r9, r2
 800af8c:	bfa8      	it	ge
 800af8e:	4691      	movge	r9, r2
 800af90:	f1b9 0f00 	cmp.w	r9, #0
 800af94:	dc35      	bgt.n	800b002 <_printf_float+0x3aa>
 800af96:	f04f 0800 	mov.w	r8, #0
 800af9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af9e:	f104 0a1a 	add.w	sl, r4, #26
 800afa2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800afa6:	1a9b      	subs	r3, r3, r2
 800afa8:	eba3 0309 	sub.w	r3, r3, r9
 800afac:	4543      	cmp	r3, r8
 800afae:	f77f af79 	ble.w	800aea4 <_printf_float+0x24c>
 800afb2:	2301      	movs	r3, #1
 800afb4:	4652      	mov	r2, sl
 800afb6:	4631      	mov	r1, r6
 800afb8:	4628      	mov	r0, r5
 800afba:	47b8      	blx	r7
 800afbc:	3001      	adds	r0, #1
 800afbe:	f43f aeaa 	beq.w	800ad16 <_printf_float+0xbe>
 800afc2:	f108 0801 	add.w	r8, r8, #1
 800afc6:	e7ec      	b.n	800afa2 <_printf_float+0x34a>
 800afc8:	4613      	mov	r3, r2
 800afca:	4631      	mov	r1, r6
 800afcc:	4642      	mov	r2, r8
 800afce:	4628      	mov	r0, r5
 800afd0:	47b8      	blx	r7
 800afd2:	3001      	adds	r0, #1
 800afd4:	d1c0      	bne.n	800af58 <_printf_float+0x300>
 800afd6:	e69e      	b.n	800ad16 <_printf_float+0xbe>
 800afd8:	2301      	movs	r3, #1
 800afda:	4631      	mov	r1, r6
 800afdc:	4628      	mov	r0, r5
 800afde:	9205      	str	r2, [sp, #20]
 800afe0:	47b8      	blx	r7
 800afe2:	3001      	adds	r0, #1
 800afe4:	f43f ae97 	beq.w	800ad16 <_printf_float+0xbe>
 800afe8:	9a05      	ldr	r2, [sp, #20]
 800afea:	f10b 0b01 	add.w	fp, fp, #1
 800afee:	e7b9      	b.n	800af64 <_printf_float+0x30c>
 800aff0:	ee18 3a10 	vmov	r3, s16
 800aff4:	4652      	mov	r2, sl
 800aff6:	4631      	mov	r1, r6
 800aff8:	4628      	mov	r0, r5
 800affa:	47b8      	blx	r7
 800affc:	3001      	adds	r0, #1
 800affe:	d1be      	bne.n	800af7e <_printf_float+0x326>
 800b000:	e689      	b.n	800ad16 <_printf_float+0xbe>
 800b002:	9a05      	ldr	r2, [sp, #20]
 800b004:	464b      	mov	r3, r9
 800b006:	4442      	add	r2, r8
 800b008:	4631      	mov	r1, r6
 800b00a:	4628      	mov	r0, r5
 800b00c:	47b8      	blx	r7
 800b00e:	3001      	adds	r0, #1
 800b010:	d1c1      	bne.n	800af96 <_printf_float+0x33e>
 800b012:	e680      	b.n	800ad16 <_printf_float+0xbe>
 800b014:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b016:	2a01      	cmp	r2, #1
 800b018:	dc01      	bgt.n	800b01e <_printf_float+0x3c6>
 800b01a:	07db      	lsls	r3, r3, #31
 800b01c:	d53a      	bpl.n	800b094 <_printf_float+0x43c>
 800b01e:	2301      	movs	r3, #1
 800b020:	4642      	mov	r2, r8
 800b022:	4631      	mov	r1, r6
 800b024:	4628      	mov	r0, r5
 800b026:	47b8      	blx	r7
 800b028:	3001      	adds	r0, #1
 800b02a:	f43f ae74 	beq.w	800ad16 <_printf_float+0xbe>
 800b02e:	ee18 3a10 	vmov	r3, s16
 800b032:	4652      	mov	r2, sl
 800b034:	4631      	mov	r1, r6
 800b036:	4628      	mov	r0, r5
 800b038:	47b8      	blx	r7
 800b03a:	3001      	adds	r0, #1
 800b03c:	f43f ae6b 	beq.w	800ad16 <_printf_float+0xbe>
 800b040:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b044:	2200      	movs	r2, #0
 800b046:	2300      	movs	r3, #0
 800b048:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b04c:	f7f5 fd3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b050:	b9d8      	cbnz	r0, 800b08a <_printf_float+0x432>
 800b052:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b056:	f108 0201 	add.w	r2, r8, #1
 800b05a:	4631      	mov	r1, r6
 800b05c:	4628      	mov	r0, r5
 800b05e:	47b8      	blx	r7
 800b060:	3001      	adds	r0, #1
 800b062:	d10e      	bne.n	800b082 <_printf_float+0x42a>
 800b064:	e657      	b.n	800ad16 <_printf_float+0xbe>
 800b066:	2301      	movs	r3, #1
 800b068:	4652      	mov	r2, sl
 800b06a:	4631      	mov	r1, r6
 800b06c:	4628      	mov	r0, r5
 800b06e:	47b8      	blx	r7
 800b070:	3001      	adds	r0, #1
 800b072:	f43f ae50 	beq.w	800ad16 <_printf_float+0xbe>
 800b076:	f108 0801 	add.w	r8, r8, #1
 800b07a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b07c:	3b01      	subs	r3, #1
 800b07e:	4543      	cmp	r3, r8
 800b080:	dcf1      	bgt.n	800b066 <_printf_float+0x40e>
 800b082:	464b      	mov	r3, r9
 800b084:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b088:	e6da      	b.n	800ae40 <_printf_float+0x1e8>
 800b08a:	f04f 0800 	mov.w	r8, #0
 800b08e:	f104 0a1a 	add.w	sl, r4, #26
 800b092:	e7f2      	b.n	800b07a <_printf_float+0x422>
 800b094:	2301      	movs	r3, #1
 800b096:	4642      	mov	r2, r8
 800b098:	e7df      	b.n	800b05a <_printf_float+0x402>
 800b09a:	2301      	movs	r3, #1
 800b09c:	464a      	mov	r2, r9
 800b09e:	4631      	mov	r1, r6
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	47b8      	blx	r7
 800b0a4:	3001      	adds	r0, #1
 800b0a6:	f43f ae36 	beq.w	800ad16 <_printf_float+0xbe>
 800b0aa:	f108 0801 	add.w	r8, r8, #1
 800b0ae:	68e3      	ldr	r3, [r4, #12]
 800b0b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0b2:	1a5b      	subs	r3, r3, r1
 800b0b4:	4543      	cmp	r3, r8
 800b0b6:	dcf0      	bgt.n	800b09a <_printf_float+0x442>
 800b0b8:	e6f8      	b.n	800aeac <_printf_float+0x254>
 800b0ba:	f04f 0800 	mov.w	r8, #0
 800b0be:	f104 0919 	add.w	r9, r4, #25
 800b0c2:	e7f4      	b.n	800b0ae <_printf_float+0x456>

0800b0c4 <_printf_common>:
 800b0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0c8:	4616      	mov	r6, r2
 800b0ca:	4699      	mov	r9, r3
 800b0cc:	688a      	ldr	r2, [r1, #8]
 800b0ce:	690b      	ldr	r3, [r1, #16]
 800b0d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	bfb8      	it	lt
 800b0d8:	4613      	movlt	r3, r2
 800b0da:	6033      	str	r3, [r6, #0]
 800b0dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0e0:	4607      	mov	r7, r0
 800b0e2:	460c      	mov	r4, r1
 800b0e4:	b10a      	cbz	r2, 800b0ea <_printf_common+0x26>
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	6033      	str	r3, [r6, #0]
 800b0ea:	6823      	ldr	r3, [r4, #0]
 800b0ec:	0699      	lsls	r1, r3, #26
 800b0ee:	bf42      	ittt	mi
 800b0f0:	6833      	ldrmi	r3, [r6, #0]
 800b0f2:	3302      	addmi	r3, #2
 800b0f4:	6033      	strmi	r3, [r6, #0]
 800b0f6:	6825      	ldr	r5, [r4, #0]
 800b0f8:	f015 0506 	ands.w	r5, r5, #6
 800b0fc:	d106      	bne.n	800b10c <_printf_common+0x48>
 800b0fe:	f104 0a19 	add.w	sl, r4, #25
 800b102:	68e3      	ldr	r3, [r4, #12]
 800b104:	6832      	ldr	r2, [r6, #0]
 800b106:	1a9b      	subs	r3, r3, r2
 800b108:	42ab      	cmp	r3, r5
 800b10a:	dc26      	bgt.n	800b15a <_printf_common+0x96>
 800b10c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b110:	1e13      	subs	r3, r2, #0
 800b112:	6822      	ldr	r2, [r4, #0]
 800b114:	bf18      	it	ne
 800b116:	2301      	movne	r3, #1
 800b118:	0692      	lsls	r2, r2, #26
 800b11a:	d42b      	bmi.n	800b174 <_printf_common+0xb0>
 800b11c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b120:	4649      	mov	r1, r9
 800b122:	4638      	mov	r0, r7
 800b124:	47c0      	blx	r8
 800b126:	3001      	adds	r0, #1
 800b128:	d01e      	beq.n	800b168 <_printf_common+0xa4>
 800b12a:	6823      	ldr	r3, [r4, #0]
 800b12c:	6922      	ldr	r2, [r4, #16]
 800b12e:	f003 0306 	and.w	r3, r3, #6
 800b132:	2b04      	cmp	r3, #4
 800b134:	bf02      	ittt	eq
 800b136:	68e5      	ldreq	r5, [r4, #12]
 800b138:	6833      	ldreq	r3, [r6, #0]
 800b13a:	1aed      	subeq	r5, r5, r3
 800b13c:	68a3      	ldr	r3, [r4, #8]
 800b13e:	bf0c      	ite	eq
 800b140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b144:	2500      	movne	r5, #0
 800b146:	4293      	cmp	r3, r2
 800b148:	bfc4      	itt	gt
 800b14a:	1a9b      	subgt	r3, r3, r2
 800b14c:	18ed      	addgt	r5, r5, r3
 800b14e:	2600      	movs	r6, #0
 800b150:	341a      	adds	r4, #26
 800b152:	42b5      	cmp	r5, r6
 800b154:	d11a      	bne.n	800b18c <_printf_common+0xc8>
 800b156:	2000      	movs	r0, #0
 800b158:	e008      	b.n	800b16c <_printf_common+0xa8>
 800b15a:	2301      	movs	r3, #1
 800b15c:	4652      	mov	r2, sl
 800b15e:	4649      	mov	r1, r9
 800b160:	4638      	mov	r0, r7
 800b162:	47c0      	blx	r8
 800b164:	3001      	adds	r0, #1
 800b166:	d103      	bne.n	800b170 <_printf_common+0xac>
 800b168:	f04f 30ff 	mov.w	r0, #4294967295
 800b16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b170:	3501      	adds	r5, #1
 800b172:	e7c6      	b.n	800b102 <_printf_common+0x3e>
 800b174:	18e1      	adds	r1, r4, r3
 800b176:	1c5a      	adds	r2, r3, #1
 800b178:	2030      	movs	r0, #48	; 0x30
 800b17a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b17e:	4422      	add	r2, r4
 800b180:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b184:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b188:	3302      	adds	r3, #2
 800b18a:	e7c7      	b.n	800b11c <_printf_common+0x58>
 800b18c:	2301      	movs	r3, #1
 800b18e:	4622      	mov	r2, r4
 800b190:	4649      	mov	r1, r9
 800b192:	4638      	mov	r0, r7
 800b194:	47c0      	blx	r8
 800b196:	3001      	adds	r0, #1
 800b198:	d0e6      	beq.n	800b168 <_printf_common+0xa4>
 800b19a:	3601      	adds	r6, #1
 800b19c:	e7d9      	b.n	800b152 <_printf_common+0x8e>
	...

0800b1a0 <_printf_i>:
 800b1a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1a4:	7e0f      	ldrb	r7, [r1, #24]
 800b1a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b1a8:	2f78      	cmp	r7, #120	; 0x78
 800b1aa:	4691      	mov	r9, r2
 800b1ac:	4680      	mov	r8, r0
 800b1ae:	460c      	mov	r4, r1
 800b1b0:	469a      	mov	sl, r3
 800b1b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b1b6:	d807      	bhi.n	800b1c8 <_printf_i+0x28>
 800b1b8:	2f62      	cmp	r7, #98	; 0x62
 800b1ba:	d80a      	bhi.n	800b1d2 <_printf_i+0x32>
 800b1bc:	2f00      	cmp	r7, #0
 800b1be:	f000 80d4 	beq.w	800b36a <_printf_i+0x1ca>
 800b1c2:	2f58      	cmp	r7, #88	; 0x58
 800b1c4:	f000 80c0 	beq.w	800b348 <_printf_i+0x1a8>
 800b1c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1d0:	e03a      	b.n	800b248 <_printf_i+0xa8>
 800b1d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1d6:	2b15      	cmp	r3, #21
 800b1d8:	d8f6      	bhi.n	800b1c8 <_printf_i+0x28>
 800b1da:	a101      	add	r1, pc, #4	; (adr r1, 800b1e0 <_printf_i+0x40>)
 800b1dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1e0:	0800b239 	.word	0x0800b239
 800b1e4:	0800b24d 	.word	0x0800b24d
 800b1e8:	0800b1c9 	.word	0x0800b1c9
 800b1ec:	0800b1c9 	.word	0x0800b1c9
 800b1f0:	0800b1c9 	.word	0x0800b1c9
 800b1f4:	0800b1c9 	.word	0x0800b1c9
 800b1f8:	0800b24d 	.word	0x0800b24d
 800b1fc:	0800b1c9 	.word	0x0800b1c9
 800b200:	0800b1c9 	.word	0x0800b1c9
 800b204:	0800b1c9 	.word	0x0800b1c9
 800b208:	0800b1c9 	.word	0x0800b1c9
 800b20c:	0800b351 	.word	0x0800b351
 800b210:	0800b279 	.word	0x0800b279
 800b214:	0800b30b 	.word	0x0800b30b
 800b218:	0800b1c9 	.word	0x0800b1c9
 800b21c:	0800b1c9 	.word	0x0800b1c9
 800b220:	0800b373 	.word	0x0800b373
 800b224:	0800b1c9 	.word	0x0800b1c9
 800b228:	0800b279 	.word	0x0800b279
 800b22c:	0800b1c9 	.word	0x0800b1c9
 800b230:	0800b1c9 	.word	0x0800b1c9
 800b234:	0800b313 	.word	0x0800b313
 800b238:	682b      	ldr	r3, [r5, #0]
 800b23a:	1d1a      	adds	r2, r3, #4
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	602a      	str	r2, [r5, #0]
 800b240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b248:	2301      	movs	r3, #1
 800b24a:	e09f      	b.n	800b38c <_printf_i+0x1ec>
 800b24c:	6820      	ldr	r0, [r4, #0]
 800b24e:	682b      	ldr	r3, [r5, #0]
 800b250:	0607      	lsls	r7, r0, #24
 800b252:	f103 0104 	add.w	r1, r3, #4
 800b256:	6029      	str	r1, [r5, #0]
 800b258:	d501      	bpl.n	800b25e <_printf_i+0xbe>
 800b25a:	681e      	ldr	r6, [r3, #0]
 800b25c:	e003      	b.n	800b266 <_printf_i+0xc6>
 800b25e:	0646      	lsls	r6, r0, #25
 800b260:	d5fb      	bpl.n	800b25a <_printf_i+0xba>
 800b262:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b266:	2e00      	cmp	r6, #0
 800b268:	da03      	bge.n	800b272 <_printf_i+0xd2>
 800b26a:	232d      	movs	r3, #45	; 0x2d
 800b26c:	4276      	negs	r6, r6
 800b26e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b272:	485a      	ldr	r0, [pc, #360]	; (800b3dc <_printf_i+0x23c>)
 800b274:	230a      	movs	r3, #10
 800b276:	e012      	b.n	800b29e <_printf_i+0xfe>
 800b278:	682b      	ldr	r3, [r5, #0]
 800b27a:	6820      	ldr	r0, [r4, #0]
 800b27c:	1d19      	adds	r1, r3, #4
 800b27e:	6029      	str	r1, [r5, #0]
 800b280:	0605      	lsls	r5, r0, #24
 800b282:	d501      	bpl.n	800b288 <_printf_i+0xe8>
 800b284:	681e      	ldr	r6, [r3, #0]
 800b286:	e002      	b.n	800b28e <_printf_i+0xee>
 800b288:	0641      	lsls	r1, r0, #25
 800b28a:	d5fb      	bpl.n	800b284 <_printf_i+0xe4>
 800b28c:	881e      	ldrh	r6, [r3, #0]
 800b28e:	4853      	ldr	r0, [pc, #332]	; (800b3dc <_printf_i+0x23c>)
 800b290:	2f6f      	cmp	r7, #111	; 0x6f
 800b292:	bf0c      	ite	eq
 800b294:	2308      	moveq	r3, #8
 800b296:	230a      	movne	r3, #10
 800b298:	2100      	movs	r1, #0
 800b29a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b29e:	6865      	ldr	r5, [r4, #4]
 800b2a0:	60a5      	str	r5, [r4, #8]
 800b2a2:	2d00      	cmp	r5, #0
 800b2a4:	bfa2      	ittt	ge
 800b2a6:	6821      	ldrge	r1, [r4, #0]
 800b2a8:	f021 0104 	bicge.w	r1, r1, #4
 800b2ac:	6021      	strge	r1, [r4, #0]
 800b2ae:	b90e      	cbnz	r6, 800b2b4 <_printf_i+0x114>
 800b2b0:	2d00      	cmp	r5, #0
 800b2b2:	d04b      	beq.n	800b34c <_printf_i+0x1ac>
 800b2b4:	4615      	mov	r5, r2
 800b2b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b2ba:	fb03 6711 	mls	r7, r3, r1, r6
 800b2be:	5dc7      	ldrb	r7, [r0, r7]
 800b2c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b2c4:	4637      	mov	r7, r6
 800b2c6:	42bb      	cmp	r3, r7
 800b2c8:	460e      	mov	r6, r1
 800b2ca:	d9f4      	bls.n	800b2b6 <_printf_i+0x116>
 800b2cc:	2b08      	cmp	r3, #8
 800b2ce:	d10b      	bne.n	800b2e8 <_printf_i+0x148>
 800b2d0:	6823      	ldr	r3, [r4, #0]
 800b2d2:	07de      	lsls	r6, r3, #31
 800b2d4:	d508      	bpl.n	800b2e8 <_printf_i+0x148>
 800b2d6:	6923      	ldr	r3, [r4, #16]
 800b2d8:	6861      	ldr	r1, [r4, #4]
 800b2da:	4299      	cmp	r1, r3
 800b2dc:	bfde      	ittt	le
 800b2de:	2330      	movle	r3, #48	; 0x30
 800b2e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2e8:	1b52      	subs	r2, r2, r5
 800b2ea:	6122      	str	r2, [r4, #16]
 800b2ec:	f8cd a000 	str.w	sl, [sp]
 800b2f0:	464b      	mov	r3, r9
 800b2f2:	aa03      	add	r2, sp, #12
 800b2f4:	4621      	mov	r1, r4
 800b2f6:	4640      	mov	r0, r8
 800b2f8:	f7ff fee4 	bl	800b0c4 <_printf_common>
 800b2fc:	3001      	adds	r0, #1
 800b2fe:	d14a      	bne.n	800b396 <_printf_i+0x1f6>
 800b300:	f04f 30ff 	mov.w	r0, #4294967295
 800b304:	b004      	add	sp, #16
 800b306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b30a:	6823      	ldr	r3, [r4, #0]
 800b30c:	f043 0320 	orr.w	r3, r3, #32
 800b310:	6023      	str	r3, [r4, #0]
 800b312:	4833      	ldr	r0, [pc, #204]	; (800b3e0 <_printf_i+0x240>)
 800b314:	2778      	movs	r7, #120	; 0x78
 800b316:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b31a:	6823      	ldr	r3, [r4, #0]
 800b31c:	6829      	ldr	r1, [r5, #0]
 800b31e:	061f      	lsls	r7, r3, #24
 800b320:	f851 6b04 	ldr.w	r6, [r1], #4
 800b324:	d402      	bmi.n	800b32c <_printf_i+0x18c>
 800b326:	065f      	lsls	r7, r3, #25
 800b328:	bf48      	it	mi
 800b32a:	b2b6      	uxthmi	r6, r6
 800b32c:	07df      	lsls	r7, r3, #31
 800b32e:	bf48      	it	mi
 800b330:	f043 0320 	orrmi.w	r3, r3, #32
 800b334:	6029      	str	r1, [r5, #0]
 800b336:	bf48      	it	mi
 800b338:	6023      	strmi	r3, [r4, #0]
 800b33a:	b91e      	cbnz	r6, 800b344 <_printf_i+0x1a4>
 800b33c:	6823      	ldr	r3, [r4, #0]
 800b33e:	f023 0320 	bic.w	r3, r3, #32
 800b342:	6023      	str	r3, [r4, #0]
 800b344:	2310      	movs	r3, #16
 800b346:	e7a7      	b.n	800b298 <_printf_i+0xf8>
 800b348:	4824      	ldr	r0, [pc, #144]	; (800b3dc <_printf_i+0x23c>)
 800b34a:	e7e4      	b.n	800b316 <_printf_i+0x176>
 800b34c:	4615      	mov	r5, r2
 800b34e:	e7bd      	b.n	800b2cc <_printf_i+0x12c>
 800b350:	682b      	ldr	r3, [r5, #0]
 800b352:	6826      	ldr	r6, [r4, #0]
 800b354:	6961      	ldr	r1, [r4, #20]
 800b356:	1d18      	adds	r0, r3, #4
 800b358:	6028      	str	r0, [r5, #0]
 800b35a:	0635      	lsls	r5, r6, #24
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	d501      	bpl.n	800b364 <_printf_i+0x1c4>
 800b360:	6019      	str	r1, [r3, #0]
 800b362:	e002      	b.n	800b36a <_printf_i+0x1ca>
 800b364:	0670      	lsls	r0, r6, #25
 800b366:	d5fb      	bpl.n	800b360 <_printf_i+0x1c0>
 800b368:	8019      	strh	r1, [r3, #0]
 800b36a:	2300      	movs	r3, #0
 800b36c:	6123      	str	r3, [r4, #16]
 800b36e:	4615      	mov	r5, r2
 800b370:	e7bc      	b.n	800b2ec <_printf_i+0x14c>
 800b372:	682b      	ldr	r3, [r5, #0]
 800b374:	1d1a      	adds	r2, r3, #4
 800b376:	602a      	str	r2, [r5, #0]
 800b378:	681d      	ldr	r5, [r3, #0]
 800b37a:	6862      	ldr	r2, [r4, #4]
 800b37c:	2100      	movs	r1, #0
 800b37e:	4628      	mov	r0, r5
 800b380:	f7f4 ff26 	bl	80001d0 <memchr>
 800b384:	b108      	cbz	r0, 800b38a <_printf_i+0x1ea>
 800b386:	1b40      	subs	r0, r0, r5
 800b388:	6060      	str	r0, [r4, #4]
 800b38a:	6863      	ldr	r3, [r4, #4]
 800b38c:	6123      	str	r3, [r4, #16]
 800b38e:	2300      	movs	r3, #0
 800b390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b394:	e7aa      	b.n	800b2ec <_printf_i+0x14c>
 800b396:	6923      	ldr	r3, [r4, #16]
 800b398:	462a      	mov	r2, r5
 800b39a:	4649      	mov	r1, r9
 800b39c:	4640      	mov	r0, r8
 800b39e:	47d0      	blx	sl
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	d0ad      	beq.n	800b300 <_printf_i+0x160>
 800b3a4:	6823      	ldr	r3, [r4, #0]
 800b3a6:	079b      	lsls	r3, r3, #30
 800b3a8:	d413      	bmi.n	800b3d2 <_printf_i+0x232>
 800b3aa:	68e0      	ldr	r0, [r4, #12]
 800b3ac:	9b03      	ldr	r3, [sp, #12]
 800b3ae:	4298      	cmp	r0, r3
 800b3b0:	bfb8      	it	lt
 800b3b2:	4618      	movlt	r0, r3
 800b3b4:	e7a6      	b.n	800b304 <_printf_i+0x164>
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	4632      	mov	r2, r6
 800b3ba:	4649      	mov	r1, r9
 800b3bc:	4640      	mov	r0, r8
 800b3be:	47d0      	blx	sl
 800b3c0:	3001      	adds	r0, #1
 800b3c2:	d09d      	beq.n	800b300 <_printf_i+0x160>
 800b3c4:	3501      	adds	r5, #1
 800b3c6:	68e3      	ldr	r3, [r4, #12]
 800b3c8:	9903      	ldr	r1, [sp, #12]
 800b3ca:	1a5b      	subs	r3, r3, r1
 800b3cc:	42ab      	cmp	r3, r5
 800b3ce:	dcf2      	bgt.n	800b3b6 <_printf_i+0x216>
 800b3d0:	e7eb      	b.n	800b3aa <_printf_i+0x20a>
 800b3d2:	2500      	movs	r5, #0
 800b3d4:	f104 0619 	add.w	r6, r4, #25
 800b3d8:	e7f5      	b.n	800b3c6 <_printf_i+0x226>
 800b3da:	bf00      	nop
 800b3dc:	0800dc92 	.word	0x0800dc92
 800b3e0:	0800dca3 	.word	0x0800dca3

0800b3e4 <std>:
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	b510      	push	{r4, lr}
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	e9c0 3300 	strd	r3, r3, [r0]
 800b3ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3f2:	6083      	str	r3, [r0, #8]
 800b3f4:	8181      	strh	r1, [r0, #12]
 800b3f6:	6643      	str	r3, [r0, #100]	; 0x64
 800b3f8:	81c2      	strh	r2, [r0, #14]
 800b3fa:	6183      	str	r3, [r0, #24]
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	2208      	movs	r2, #8
 800b400:	305c      	adds	r0, #92	; 0x5c
 800b402:	f000 fa09 	bl	800b818 <memset>
 800b406:	4b0d      	ldr	r3, [pc, #52]	; (800b43c <std+0x58>)
 800b408:	6263      	str	r3, [r4, #36]	; 0x24
 800b40a:	4b0d      	ldr	r3, [pc, #52]	; (800b440 <std+0x5c>)
 800b40c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b40e:	4b0d      	ldr	r3, [pc, #52]	; (800b444 <std+0x60>)
 800b410:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b412:	4b0d      	ldr	r3, [pc, #52]	; (800b448 <std+0x64>)
 800b414:	6323      	str	r3, [r4, #48]	; 0x30
 800b416:	4b0d      	ldr	r3, [pc, #52]	; (800b44c <std+0x68>)
 800b418:	6224      	str	r4, [r4, #32]
 800b41a:	429c      	cmp	r4, r3
 800b41c:	d006      	beq.n	800b42c <std+0x48>
 800b41e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b422:	4294      	cmp	r4, r2
 800b424:	d002      	beq.n	800b42c <std+0x48>
 800b426:	33d0      	adds	r3, #208	; 0xd0
 800b428:	429c      	cmp	r4, r3
 800b42a:	d105      	bne.n	800b438 <std+0x54>
 800b42c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b434:	f000 ba6c 	b.w	800b910 <__retarget_lock_init_recursive>
 800b438:	bd10      	pop	{r4, pc}
 800b43a:	bf00      	nop
 800b43c:	0800b669 	.word	0x0800b669
 800b440:	0800b68b 	.word	0x0800b68b
 800b444:	0800b6c3 	.word	0x0800b6c3
 800b448:	0800b6e7 	.word	0x0800b6e7
 800b44c:	200026d4 	.word	0x200026d4

0800b450 <stdio_exit_handler>:
 800b450:	4a02      	ldr	r2, [pc, #8]	; (800b45c <stdio_exit_handler+0xc>)
 800b452:	4903      	ldr	r1, [pc, #12]	; (800b460 <stdio_exit_handler+0x10>)
 800b454:	4803      	ldr	r0, [pc, #12]	; (800b464 <stdio_exit_handler+0x14>)
 800b456:	f000 b87b 	b.w	800b550 <_fwalk_sglue>
 800b45a:	bf00      	nop
 800b45c:	200000c8 	.word	0x200000c8
 800b460:	0800d2c1 	.word	0x0800d2c1
 800b464:	200000d4 	.word	0x200000d4

0800b468 <cleanup_stdio>:
 800b468:	6841      	ldr	r1, [r0, #4]
 800b46a:	4b0c      	ldr	r3, [pc, #48]	; (800b49c <cleanup_stdio+0x34>)
 800b46c:	4299      	cmp	r1, r3
 800b46e:	b510      	push	{r4, lr}
 800b470:	4604      	mov	r4, r0
 800b472:	d001      	beq.n	800b478 <cleanup_stdio+0x10>
 800b474:	f001 ff24 	bl	800d2c0 <_fflush_r>
 800b478:	68a1      	ldr	r1, [r4, #8]
 800b47a:	4b09      	ldr	r3, [pc, #36]	; (800b4a0 <cleanup_stdio+0x38>)
 800b47c:	4299      	cmp	r1, r3
 800b47e:	d002      	beq.n	800b486 <cleanup_stdio+0x1e>
 800b480:	4620      	mov	r0, r4
 800b482:	f001 ff1d 	bl	800d2c0 <_fflush_r>
 800b486:	68e1      	ldr	r1, [r4, #12]
 800b488:	4b06      	ldr	r3, [pc, #24]	; (800b4a4 <cleanup_stdio+0x3c>)
 800b48a:	4299      	cmp	r1, r3
 800b48c:	d004      	beq.n	800b498 <cleanup_stdio+0x30>
 800b48e:	4620      	mov	r0, r4
 800b490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b494:	f001 bf14 	b.w	800d2c0 <_fflush_r>
 800b498:	bd10      	pop	{r4, pc}
 800b49a:	bf00      	nop
 800b49c:	200026d4 	.word	0x200026d4
 800b4a0:	2000273c 	.word	0x2000273c
 800b4a4:	200027a4 	.word	0x200027a4

0800b4a8 <global_stdio_init.part.0>:
 800b4a8:	b510      	push	{r4, lr}
 800b4aa:	4b0b      	ldr	r3, [pc, #44]	; (800b4d8 <global_stdio_init.part.0+0x30>)
 800b4ac:	4c0b      	ldr	r4, [pc, #44]	; (800b4dc <global_stdio_init.part.0+0x34>)
 800b4ae:	4a0c      	ldr	r2, [pc, #48]	; (800b4e0 <global_stdio_init.part.0+0x38>)
 800b4b0:	601a      	str	r2, [r3, #0]
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	2104      	movs	r1, #4
 800b4b8:	f7ff ff94 	bl	800b3e4 <std>
 800b4bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	2109      	movs	r1, #9
 800b4c4:	f7ff ff8e 	bl	800b3e4 <std>
 800b4c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b4cc:	2202      	movs	r2, #2
 800b4ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4d2:	2112      	movs	r1, #18
 800b4d4:	f7ff bf86 	b.w	800b3e4 <std>
 800b4d8:	2000280c 	.word	0x2000280c
 800b4dc:	200026d4 	.word	0x200026d4
 800b4e0:	0800b451 	.word	0x0800b451

0800b4e4 <__sfp_lock_acquire>:
 800b4e4:	4801      	ldr	r0, [pc, #4]	; (800b4ec <__sfp_lock_acquire+0x8>)
 800b4e6:	f000 ba14 	b.w	800b912 <__retarget_lock_acquire_recursive>
 800b4ea:	bf00      	nop
 800b4ec:	20002815 	.word	0x20002815

0800b4f0 <__sfp_lock_release>:
 800b4f0:	4801      	ldr	r0, [pc, #4]	; (800b4f8 <__sfp_lock_release+0x8>)
 800b4f2:	f000 ba0f 	b.w	800b914 <__retarget_lock_release_recursive>
 800b4f6:	bf00      	nop
 800b4f8:	20002815 	.word	0x20002815

0800b4fc <__sinit>:
 800b4fc:	b510      	push	{r4, lr}
 800b4fe:	4604      	mov	r4, r0
 800b500:	f7ff fff0 	bl	800b4e4 <__sfp_lock_acquire>
 800b504:	6a23      	ldr	r3, [r4, #32]
 800b506:	b11b      	cbz	r3, 800b510 <__sinit+0x14>
 800b508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b50c:	f7ff bff0 	b.w	800b4f0 <__sfp_lock_release>
 800b510:	4b04      	ldr	r3, [pc, #16]	; (800b524 <__sinit+0x28>)
 800b512:	6223      	str	r3, [r4, #32]
 800b514:	4b04      	ldr	r3, [pc, #16]	; (800b528 <__sinit+0x2c>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d1f5      	bne.n	800b508 <__sinit+0xc>
 800b51c:	f7ff ffc4 	bl	800b4a8 <global_stdio_init.part.0>
 800b520:	e7f2      	b.n	800b508 <__sinit+0xc>
 800b522:	bf00      	nop
 800b524:	0800b469 	.word	0x0800b469
 800b528:	2000280c 	.word	0x2000280c

0800b52c <fiprintf>:
 800b52c:	b40e      	push	{r1, r2, r3}
 800b52e:	b503      	push	{r0, r1, lr}
 800b530:	4601      	mov	r1, r0
 800b532:	ab03      	add	r3, sp, #12
 800b534:	4805      	ldr	r0, [pc, #20]	; (800b54c <fiprintf+0x20>)
 800b536:	f853 2b04 	ldr.w	r2, [r3], #4
 800b53a:	6800      	ldr	r0, [r0, #0]
 800b53c:	9301      	str	r3, [sp, #4]
 800b53e:	f001 fd1f 	bl	800cf80 <_vfiprintf_r>
 800b542:	b002      	add	sp, #8
 800b544:	f85d eb04 	ldr.w	lr, [sp], #4
 800b548:	b003      	add	sp, #12
 800b54a:	4770      	bx	lr
 800b54c:	20000120 	.word	0x20000120

0800b550 <_fwalk_sglue>:
 800b550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b554:	4607      	mov	r7, r0
 800b556:	4688      	mov	r8, r1
 800b558:	4614      	mov	r4, r2
 800b55a:	2600      	movs	r6, #0
 800b55c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b560:	f1b9 0901 	subs.w	r9, r9, #1
 800b564:	d505      	bpl.n	800b572 <_fwalk_sglue+0x22>
 800b566:	6824      	ldr	r4, [r4, #0]
 800b568:	2c00      	cmp	r4, #0
 800b56a:	d1f7      	bne.n	800b55c <_fwalk_sglue+0xc>
 800b56c:	4630      	mov	r0, r6
 800b56e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b572:	89ab      	ldrh	r3, [r5, #12]
 800b574:	2b01      	cmp	r3, #1
 800b576:	d907      	bls.n	800b588 <_fwalk_sglue+0x38>
 800b578:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b57c:	3301      	adds	r3, #1
 800b57e:	d003      	beq.n	800b588 <_fwalk_sglue+0x38>
 800b580:	4629      	mov	r1, r5
 800b582:	4638      	mov	r0, r7
 800b584:	47c0      	blx	r8
 800b586:	4306      	orrs	r6, r0
 800b588:	3568      	adds	r5, #104	; 0x68
 800b58a:	e7e9      	b.n	800b560 <_fwalk_sglue+0x10>

0800b58c <iprintf>:
 800b58c:	b40f      	push	{r0, r1, r2, r3}
 800b58e:	b507      	push	{r0, r1, r2, lr}
 800b590:	4906      	ldr	r1, [pc, #24]	; (800b5ac <iprintf+0x20>)
 800b592:	ab04      	add	r3, sp, #16
 800b594:	6808      	ldr	r0, [r1, #0]
 800b596:	f853 2b04 	ldr.w	r2, [r3], #4
 800b59a:	6881      	ldr	r1, [r0, #8]
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	f001 fcef 	bl	800cf80 <_vfiprintf_r>
 800b5a2:	b003      	add	sp, #12
 800b5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5a8:	b004      	add	sp, #16
 800b5aa:	4770      	bx	lr
 800b5ac:	20000120 	.word	0x20000120

0800b5b0 <_puts_r>:
 800b5b0:	6a03      	ldr	r3, [r0, #32]
 800b5b2:	b570      	push	{r4, r5, r6, lr}
 800b5b4:	6884      	ldr	r4, [r0, #8]
 800b5b6:	4605      	mov	r5, r0
 800b5b8:	460e      	mov	r6, r1
 800b5ba:	b90b      	cbnz	r3, 800b5c0 <_puts_r+0x10>
 800b5bc:	f7ff ff9e 	bl	800b4fc <__sinit>
 800b5c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5c2:	07db      	lsls	r3, r3, #31
 800b5c4:	d405      	bmi.n	800b5d2 <_puts_r+0x22>
 800b5c6:	89a3      	ldrh	r3, [r4, #12]
 800b5c8:	0598      	lsls	r0, r3, #22
 800b5ca:	d402      	bmi.n	800b5d2 <_puts_r+0x22>
 800b5cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5ce:	f000 f9a0 	bl	800b912 <__retarget_lock_acquire_recursive>
 800b5d2:	89a3      	ldrh	r3, [r4, #12]
 800b5d4:	0719      	lsls	r1, r3, #28
 800b5d6:	d513      	bpl.n	800b600 <_puts_r+0x50>
 800b5d8:	6923      	ldr	r3, [r4, #16]
 800b5da:	b18b      	cbz	r3, 800b600 <_puts_r+0x50>
 800b5dc:	3e01      	subs	r6, #1
 800b5de:	68a3      	ldr	r3, [r4, #8]
 800b5e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b5e4:	3b01      	subs	r3, #1
 800b5e6:	60a3      	str	r3, [r4, #8]
 800b5e8:	b9e9      	cbnz	r1, 800b626 <_puts_r+0x76>
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	da2e      	bge.n	800b64c <_puts_r+0x9c>
 800b5ee:	4622      	mov	r2, r4
 800b5f0:	210a      	movs	r1, #10
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	f000 f87b 	bl	800b6ee <__swbuf_r>
 800b5f8:	3001      	adds	r0, #1
 800b5fa:	d007      	beq.n	800b60c <_puts_r+0x5c>
 800b5fc:	250a      	movs	r5, #10
 800b5fe:	e007      	b.n	800b610 <_puts_r+0x60>
 800b600:	4621      	mov	r1, r4
 800b602:	4628      	mov	r0, r5
 800b604:	f000 f8b0 	bl	800b768 <__swsetup_r>
 800b608:	2800      	cmp	r0, #0
 800b60a:	d0e7      	beq.n	800b5dc <_puts_r+0x2c>
 800b60c:	f04f 35ff 	mov.w	r5, #4294967295
 800b610:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b612:	07da      	lsls	r2, r3, #31
 800b614:	d405      	bmi.n	800b622 <_puts_r+0x72>
 800b616:	89a3      	ldrh	r3, [r4, #12]
 800b618:	059b      	lsls	r3, r3, #22
 800b61a:	d402      	bmi.n	800b622 <_puts_r+0x72>
 800b61c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b61e:	f000 f979 	bl	800b914 <__retarget_lock_release_recursive>
 800b622:	4628      	mov	r0, r5
 800b624:	bd70      	pop	{r4, r5, r6, pc}
 800b626:	2b00      	cmp	r3, #0
 800b628:	da04      	bge.n	800b634 <_puts_r+0x84>
 800b62a:	69a2      	ldr	r2, [r4, #24]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	dc06      	bgt.n	800b63e <_puts_r+0x8e>
 800b630:	290a      	cmp	r1, #10
 800b632:	d004      	beq.n	800b63e <_puts_r+0x8e>
 800b634:	6823      	ldr	r3, [r4, #0]
 800b636:	1c5a      	adds	r2, r3, #1
 800b638:	6022      	str	r2, [r4, #0]
 800b63a:	7019      	strb	r1, [r3, #0]
 800b63c:	e7cf      	b.n	800b5de <_puts_r+0x2e>
 800b63e:	4622      	mov	r2, r4
 800b640:	4628      	mov	r0, r5
 800b642:	f000 f854 	bl	800b6ee <__swbuf_r>
 800b646:	3001      	adds	r0, #1
 800b648:	d1c9      	bne.n	800b5de <_puts_r+0x2e>
 800b64a:	e7df      	b.n	800b60c <_puts_r+0x5c>
 800b64c:	6823      	ldr	r3, [r4, #0]
 800b64e:	250a      	movs	r5, #10
 800b650:	1c5a      	adds	r2, r3, #1
 800b652:	6022      	str	r2, [r4, #0]
 800b654:	701d      	strb	r5, [r3, #0]
 800b656:	e7db      	b.n	800b610 <_puts_r+0x60>

0800b658 <puts>:
 800b658:	4b02      	ldr	r3, [pc, #8]	; (800b664 <puts+0xc>)
 800b65a:	4601      	mov	r1, r0
 800b65c:	6818      	ldr	r0, [r3, #0]
 800b65e:	f7ff bfa7 	b.w	800b5b0 <_puts_r>
 800b662:	bf00      	nop
 800b664:	20000120 	.word	0x20000120

0800b668 <__sread>:
 800b668:	b510      	push	{r4, lr}
 800b66a:	460c      	mov	r4, r1
 800b66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b670:	f000 f900 	bl	800b874 <_read_r>
 800b674:	2800      	cmp	r0, #0
 800b676:	bfab      	itete	ge
 800b678:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b67a:	89a3      	ldrhlt	r3, [r4, #12]
 800b67c:	181b      	addge	r3, r3, r0
 800b67e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b682:	bfac      	ite	ge
 800b684:	6563      	strge	r3, [r4, #84]	; 0x54
 800b686:	81a3      	strhlt	r3, [r4, #12]
 800b688:	bd10      	pop	{r4, pc}

0800b68a <__swrite>:
 800b68a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b68e:	461f      	mov	r7, r3
 800b690:	898b      	ldrh	r3, [r1, #12]
 800b692:	05db      	lsls	r3, r3, #23
 800b694:	4605      	mov	r5, r0
 800b696:	460c      	mov	r4, r1
 800b698:	4616      	mov	r6, r2
 800b69a:	d505      	bpl.n	800b6a8 <__swrite+0x1e>
 800b69c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f000 f8d4 	bl	800b850 <_lseek_r>
 800b6a8:	89a3      	ldrh	r3, [r4, #12]
 800b6aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6b2:	81a3      	strh	r3, [r4, #12]
 800b6b4:	4632      	mov	r2, r6
 800b6b6:	463b      	mov	r3, r7
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6be:	f000 b8eb 	b.w	800b898 <_write_r>

0800b6c2 <__sseek>:
 800b6c2:	b510      	push	{r4, lr}
 800b6c4:	460c      	mov	r4, r1
 800b6c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ca:	f000 f8c1 	bl	800b850 <_lseek_r>
 800b6ce:	1c43      	adds	r3, r0, #1
 800b6d0:	89a3      	ldrh	r3, [r4, #12]
 800b6d2:	bf15      	itete	ne
 800b6d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6de:	81a3      	strheq	r3, [r4, #12]
 800b6e0:	bf18      	it	ne
 800b6e2:	81a3      	strhne	r3, [r4, #12]
 800b6e4:	bd10      	pop	{r4, pc}

0800b6e6 <__sclose>:
 800b6e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ea:	f000 b8a1 	b.w	800b830 <_close_r>

0800b6ee <__swbuf_r>:
 800b6ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6f0:	460e      	mov	r6, r1
 800b6f2:	4614      	mov	r4, r2
 800b6f4:	4605      	mov	r5, r0
 800b6f6:	b118      	cbz	r0, 800b700 <__swbuf_r+0x12>
 800b6f8:	6a03      	ldr	r3, [r0, #32]
 800b6fa:	b90b      	cbnz	r3, 800b700 <__swbuf_r+0x12>
 800b6fc:	f7ff fefe 	bl	800b4fc <__sinit>
 800b700:	69a3      	ldr	r3, [r4, #24]
 800b702:	60a3      	str	r3, [r4, #8]
 800b704:	89a3      	ldrh	r3, [r4, #12]
 800b706:	071a      	lsls	r2, r3, #28
 800b708:	d525      	bpl.n	800b756 <__swbuf_r+0x68>
 800b70a:	6923      	ldr	r3, [r4, #16]
 800b70c:	b31b      	cbz	r3, 800b756 <__swbuf_r+0x68>
 800b70e:	6823      	ldr	r3, [r4, #0]
 800b710:	6922      	ldr	r2, [r4, #16]
 800b712:	1a98      	subs	r0, r3, r2
 800b714:	6963      	ldr	r3, [r4, #20]
 800b716:	b2f6      	uxtb	r6, r6
 800b718:	4283      	cmp	r3, r0
 800b71a:	4637      	mov	r7, r6
 800b71c:	dc04      	bgt.n	800b728 <__swbuf_r+0x3a>
 800b71e:	4621      	mov	r1, r4
 800b720:	4628      	mov	r0, r5
 800b722:	f001 fdcd 	bl	800d2c0 <_fflush_r>
 800b726:	b9e0      	cbnz	r0, 800b762 <__swbuf_r+0x74>
 800b728:	68a3      	ldr	r3, [r4, #8]
 800b72a:	3b01      	subs	r3, #1
 800b72c:	60a3      	str	r3, [r4, #8]
 800b72e:	6823      	ldr	r3, [r4, #0]
 800b730:	1c5a      	adds	r2, r3, #1
 800b732:	6022      	str	r2, [r4, #0]
 800b734:	701e      	strb	r6, [r3, #0]
 800b736:	6962      	ldr	r2, [r4, #20]
 800b738:	1c43      	adds	r3, r0, #1
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d004      	beq.n	800b748 <__swbuf_r+0x5a>
 800b73e:	89a3      	ldrh	r3, [r4, #12]
 800b740:	07db      	lsls	r3, r3, #31
 800b742:	d506      	bpl.n	800b752 <__swbuf_r+0x64>
 800b744:	2e0a      	cmp	r6, #10
 800b746:	d104      	bne.n	800b752 <__swbuf_r+0x64>
 800b748:	4621      	mov	r1, r4
 800b74a:	4628      	mov	r0, r5
 800b74c:	f001 fdb8 	bl	800d2c0 <_fflush_r>
 800b750:	b938      	cbnz	r0, 800b762 <__swbuf_r+0x74>
 800b752:	4638      	mov	r0, r7
 800b754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b756:	4621      	mov	r1, r4
 800b758:	4628      	mov	r0, r5
 800b75a:	f000 f805 	bl	800b768 <__swsetup_r>
 800b75e:	2800      	cmp	r0, #0
 800b760:	d0d5      	beq.n	800b70e <__swbuf_r+0x20>
 800b762:	f04f 37ff 	mov.w	r7, #4294967295
 800b766:	e7f4      	b.n	800b752 <__swbuf_r+0x64>

0800b768 <__swsetup_r>:
 800b768:	b538      	push	{r3, r4, r5, lr}
 800b76a:	4b2a      	ldr	r3, [pc, #168]	; (800b814 <__swsetup_r+0xac>)
 800b76c:	4605      	mov	r5, r0
 800b76e:	6818      	ldr	r0, [r3, #0]
 800b770:	460c      	mov	r4, r1
 800b772:	b118      	cbz	r0, 800b77c <__swsetup_r+0x14>
 800b774:	6a03      	ldr	r3, [r0, #32]
 800b776:	b90b      	cbnz	r3, 800b77c <__swsetup_r+0x14>
 800b778:	f7ff fec0 	bl	800b4fc <__sinit>
 800b77c:	89a3      	ldrh	r3, [r4, #12]
 800b77e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b782:	0718      	lsls	r0, r3, #28
 800b784:	d422      	bmi.n	800b7cc <__swsetup_r+0x64>
 800b786:	06d9      	lsls	r1, r3, #27
 800b788:	d407      	bmi.n	800b79a <__swsetup_r+0x32>
 800b78a:	2309      	movs	r3, #9
 800b78c:	602b      	str	r3, [r5, #0]
 800b78e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b792:	81a3      	strh	r3, [r4, #12]
 800b794:	f04f 30ff 	mov.w	r0, #4294967295
 800b798:	e034      	b.n	800b804 <__swsetup_r+0x9c>
 800b79a:	0758      	lsls	r0, r3, #29
 800b79c:	d512      	bpl.n	800b7c4 <__swsetup_r+0x5c>
 800b79e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7a0:	b141      	cbz	r1, 800b7b4 <__swsetup_r+0x4c>
 800b7a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7a6:	4299      	cmp	r1, r3
 800b7a8:	d002      	beq.n	800b7b0 <__swsetup_r+0x48>
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	f000 ff42 	bl	800c634 <_free_r>
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	6363      	str	r3, [r4, #52]	; 0x34
 800b7b4:	89a3      	ldrh	r3, [r4, #12]
 800b7b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7ba:	81a3      	strh	r3, [r4, #12]
 800b7bc:	2300      	movs	r3, #0
 800b7be:	6063      	str	r3, [r4, #4]
 800b7c0:	6923      	ldr	r3, [r4, #16]
 800b7c2:	6023      	str	r3, [r4, #0]
 800b7c4:	89a3      	ldrh	r3, [r4, #12]
 800b7c6:	f043 0308 	orr.w	r3, r3, #8
 800b7ca:	81a3      	strh	r3, [r4, #12]
 800b7cc:	6923      	ldr	r3, [r4, #16]
 800b7ce:	b94b      	cbnz	r3, 800b7e4 <__swsetup_r+0x7c>
 800b7d0:	89a3      	ldrh	r3, [r4, #12]
 800b7d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7da:	d003      	beq.n	800b7e4 <__swsetup_r+0x7c>
 800b7dc:	4621      	mov	r1, r4
 800b7de:	4628      	mov	r0, r5
 800b7e0:	f001 fdbc 	bl	800d35c <__smakebuf_r>
 800b7e4:	89a0      	ldrh	r0, [r4, #12]
 800b7e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7ea:	f010 0301 	ands.w	r3, r0, #1
 800b7ee:	d00a      	beq.n	800b806 <__swsetup_r+0x9e>
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	60a3      	str	r3, [r4, #8]
 800b7f4:	6963      	ldr	r3, [r4, #20]
 800b7f6:	425b      	negs	r3, r3
 800b7f8:	61a3      	str	r3, [r4, #24]
 800b7fa:	6923      	ldr	r3, [r4, #16]
 800b7fc:	b943      	cbnz	r3, 800b810 <__swsetup_r+0xa8>
 800b7fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b802:	d1c4      	bne.n	800b78e <__swsetup_r+0x26>
 800b804:	bd38      	pop	{r3, r4, r5, pc}
 800b806:	0781      	lsls	r1, r0, #30
 800b808:	bf58      	it	pl
 800b80a:	6963      	ldrpl	r3, [r4, #20]
 800b80c:	60a3      	str	r3, [r4, #8]
 800b80e:	e7f4      	b.n	800b7fa <__swsetup_r+0x92>
 800b810:	2000      	movs	r0, #0
 800b812:	e7f7      	b.n	800b804 <__swsetup_r+0x9c>
 800b814:	20000120 	.word	0x20000120

0800b818 <memset>:
 800b818:	4402      	add	r2, r0
 800b81a:	4603      	mov	r3, r0
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d100      	bne.n	800b822 <memset+0xa>
 800b820:	4770      	bx	lr
 800b822:	f803 1b01 	strb.w	r1, [r3], #1
 800b826:	e7f9      	b.n	800b81c <memset+0x4>

0800b828 <_localeconv_r>:
 800b828:	4800      	ldr	r0, [pc, #0]	; (800b82c <_localeconv_r+0x4>)
 800b82a:	4770      	bx	lr
 800b82c:	20000214 	.word	0x20000214

0800b830 <_close_r>:
 800b830:	b538      	push	{r3, r4, r5, lr}
 800b832:	4d06      	ldr	r5, [pc, #24]	; (800b84c <_close_r+0x1c>)
 800b834:	2300      	movs	r3, #0
 800b836:	4604      	mov	r4, r0
 800b838:	4608      	mov	r0, r1
 800b83a:	602b      	str	r3, [r5, #0]
 800b83c:	f7f6 fc49 	bl	80020d2 <_close>
 800b840:	1c43      	adds	r3, r0, #1
 800b842:	d102      	bne.n	800b84a <_close_r+0x1a>
 800b844:	682b      	ldr	r3, [r5, #0]
 800b846:	b103      	cbz	r3, 800b84a <_close_r+0x1a>
 800b848:	6023      	str	r3, [r4, #0]
 800b84a:	bd38      	pop	{r3, r4, r5, pc}
 800b84c:	20002810 	.word	0x20002810

0800b850 <_lseek_r>:
 800b850:	b538      	push	{r3, r4, r5, lr}
 800b852:	4d07      	ldr	r5, [pc, #28]	; (800b870 <_lseek_r+0x20>)
 800b854:	4604      	mov	r4, r0
 800b856:	4608      	mov	r0, r1
 800b858:	4611      	mov	r1, r2
 800b85a:	2200      	movs	r2, #0
 800b85c:	602a      	str	r2, [r5, #0]
 800b85e:	461a      	mov	r2, r3
 800b860:	f7f6 fc5e 	bl	8002120 <_lseek>
 800b864:	1c43      	adds	r3, r0, #1
 800b866:	d102      	bne.n	800b86e <_lseek_r+0x1e>
 800b868:	682b      	ldr	r3, [r5, #0]
 800b86a:	b103      	cbz	r3, 800b86e <_lseek_r+0x1e>
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	bd38      	pop	{r3, r4, r5, pc}
 800b870:	20002810 	.word	0x20002810

0800b874 <_read_r>:
 800b874:	b538      	push	{r3, r4, r5, lr}
 800b876:	4d07      	ldr	r5, [pc, #28]	; (800b894 <_read_r+0x20>)
 800b878:	4604      	mov	r4, r0
 800b87a:	4608      	mov	r0, r1
 800b87c:	4611      	mov	r1, r2
 800b87e:	2200      	movs	r2, #0
 800b880:	602a      	str	r2, [r5, #0]
 800b882:	461a      	mov	r2, r3
 800b884:	f7f6 fc08 	bl	8002098 <_read>
 800b888:	1c43      	adds	r3, r0, #1
 800b88a:	d102      	bne.n	800b892 <_read_r+0x1e>
 800b88c:	682b      	ldr	r3, [r5, #0]
 800b88e:	b103      	cbz	r3, 800b892 <_read_r+0x1e>
 800b890:	6023      	str	r3, [r4, #0]
 800b892:	bd38      	pop	{r3, r4, r5, pc}
 800b894:	20002810 	.word	0x20002810

0800b898 <_write_r>:
 800b898:	b538      	push	{r3, r4, r5, lr}
 800b89a:	4d07      	ldr	r5, [pc, #28]	; (800b8b8 <_write_r+0x20>)
 800b89c:	4604      	mov	r4, r0
 800b89e:	4608      	mov	r0, r1
 800b8a0:	4611      	mov	r1, r2
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	602a      	str	r2, [r5, #0]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	f7f5 fe50 	bl	800154c <_write>
 800b8ac:	1c43      	adds	r3, r0, #1
 800b8ae:	d102      	bne.n	800b8b6 <_write_r+0x1e>
 800b8b0:	682b      	ldr	r3, [r5, #0]
 800b8b2:	b103      	cbz	r3, 800b8b6 <_write_r+0x1e>
 800b8b4:	6023      	str	r3, [r4, #0]
 800b8b6:	bd38      	pop	{r3, r4, r5, pc}
 800b8b8:	20002810 	.word	0x20002810

0800b8bc <__errno>:
 800b8bc:	4b01      	ldr	r3, [pc, #4]	; (800b8c4 <__errno+0x8>)
 800b8be:	6818      	ldr	r0, [r3, #0]
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	20000120 	.word	0x20000120

0800b8c8 <__libc_init_array>:
 800b8c8:	b570      	push	{r4, r5, r6, lr}
 800b8ca:	4d0d      	ldr	r5, [pc, #52]	; (800b900 <__libc_init_array+0x38>)
 800b8cc:	4c0d      	ldr	r4, [pc, #52]	; (800b904 <__libc_init_array+0x3c>)
 800b8ce:	1b64      	subs	r4, r4, r5
 800b8d0:	10a4      	asrs	r4, r4, #2
 800b8d2:	2600      	movs	r6, #0
 800b8d4:	42a6      	cmp	r6, r4
 800b8d6:	d109      	bne.n	800b8ec <__libc_init_array+0x24>
 800b8d8:	4d0b      	ldr	r5, [pc, #44]	; (800b908 <__libc_init_array+0x40>)
 800b8da:	4c0c      	ldr	r4, [pc, #48]	; (800b90c <__libc_init_array+0x44>)
 800b8dc:	f001 fe26 	bl	800d52c <_init>
 800b8e0:	1b64      	subs	r4, r4, r5
 800b8e2:	10a4      	asrs	r4, r4, #2
 800b8e4:	2600      	movs	r6, #0
 800b8e6:	42a6      	cmp	r6, r4
 800b8e8:	d105      	bne.n	800b8f6 <__libc_init_array+0x2e>
 800b8ea:	bd70      	pop	{r4, r5, r6, pc}
 800b8ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8f0:	4798      	blx	r3
 800b8f2:	3601      	adds	r6, #1
 800b8f4:	e7ee      	b.n	800b8d4 <__libc_init_array+0xc>
 800b8f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8fa:	4798      	blx	r3
 800b8fc:	3601      	adds	r6, #1
 800b8fe:	e7f2      	b.n	800b8e6 <__libc_init_array+0x1e>
 800b900:	0800dfc0 	.word	0x0800dfc0
 800b904:	0800dfc0 	.word	0x0800dfc0
 800b908:	0800dfc0 	.word	0x0800dfc0
 800b90c:	0800dfc4 	.word	0x0800dfc4

0800b910 <__retarget_lock_init_recursive>:
 800b910:	4770      	bx	lr

0800b912 <__retarget_lock_acquire_recursive>:
 800b912:	4770      	bx	lr

0800b914 <__retarget_lock_release_recursive>:
 800b914:	4770      	bx	lr

0800b916 <memcpy>:
 800b916:	440a      	add	r2, r1
 800b918:	4291      	cmp	r1, r2
 800b91a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b91e:	d100      	bne.n	800b922 <memcpy+0xc>
 800b920:	4770      	bx	lr
 800b922:	b510      	push	{r4, lr}
 800b924:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b928:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b92c:	4291      	cmp	r1, r2
 800b92e:	d1f9      	bne.n	800b924 <memcpy+0xe>
 800b930:	bd10      	pop	{r4, pc}

0800b932 <abort>:
 800b932:	b508      	push	{r3, lr}
 800b934:	2006      	movs	r0, #6
 800b936:	f001 fd75 	bl	800d424 <raise>
 800b93a:	2001      	movs	r0, #1
 800b93c:	f7f6 fba2 	bl	8002084 <_exit>

0800b940 <quorem>:
 800b940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b944:	6903      	ldr	r3, [r0, #16]
 800b946:	690c      	ldr	r4, [r1, #16]
 800b948:	42a3      	cmp	r3, r4
 800b94a:	4607      	mov	r7, r0
 800b94c:	db7e      	blt.n	800ba4c <quorem+0x10c>
 800b94e:	3c01      	subs	r4, #1
 800b950:	f101 0814 	add.w	r8, r1, #20
 800b954:	f100 0514 	add.w	r5, r0, #20
 800b958:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b95c:	9301      	str	r3, [sp, #4]
 800b95e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b962:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b966:	3301      	adds	r3, #1
 800b968:	429a      	cmp	r2, r3
 800b96a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b96e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b972:	fbb2 f6f3 	udiv	r6, r2, r3
 800b976:	d331      	bcc.n	800b9dc <quorem+0x9c>
 800b978:	f04f 0e00 	mov.w	lr, #0
 800b97c:	4640      	mov	r0, r8
 800b97e:	46ac      	mov	ip, r5
 800b980:	46f2      	mov	sl, lr
 800b982:	f850 2b04 	ldr.w	r2, [r0], #4
 800b986:	b293      	uxth	r3, r2
 800b988:	fb06 e303 	mla	r3, r6, r3, lr
 800b98c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b990:	0c1a      	lsrs	r2, r3, #16
 800b992:	b29b      	uxth	r3, r3
 800b994:	ebaa 0303 	sub.w	r3, sl, r3
 800b998:	f8dc a000 	ldr.w	sl, [ip]
 800b99c:	fa13 f38a 	uxtah	r3, r3, sl
 800b9a0:	fb06 220e 	mla	r2, r6, lr, r2
 800b9a4:	9300      	str	r3, [sp, #0]
 800b9a6:	9b00      	ldr	r3, [sp, #0]
 800b9a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b9ac:	b292      	uxth	r2, r2
 800b9ae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b9b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b9b6:	f8bd 3000 	ldrh.w	r3, [sp]
 800b9ba:	4581      	cmp	r9, r0
 800b9bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9c0:	f84c 3b04 	str.w	r3, [ip], #4
 800b9c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b9c8:	d2db      	bcs.n	800b982 <quorem+0x42>
 800b9ca:	f855 300b 	ldr.w	r3, [r5, fp]
 800b9ce:	b92b      	cbnz	r3, 800b9dc <quorem+0x9c>
 800b9d0:	9b01      	ldr	r3, [sp, #4]
 800b9d2:	3b04      	subs	r3, #4
 800b9d4:	429d      	cmp	r5, r3
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	d32c      	bcc.n	800ba34 <quorem+0xf4>
 800b9da:	613c      	str	r4, [r7, #16]
 800b9dc:	4638      	mov	r0, r7
 800b9de:	f001 f9a5 	bl	800cd2c <__mcmp>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	db22      	blt.n	800ba2c <quorem+0xec>
 800b9e6:	3601      	adds	r6, #1
 800b9e8:	4629      	mov	r1, r5
 800b9ea:	2000      	movs	r0, #0
 800b9ec:	f858 2b04 	ldr.w	r2, [r8], #4
 800b9f0:	f8d1 c000 	ldr.w	ip, [r1]
 800b9f4:	b293      	uxth	r3, r2
 800b9f6:	1ac3      	subs	r3, r0, r3
 800b9f8:	0c12      	lsrs	r2, r2, #16
 800b9fa:	fa13 f38c 	uxtah	r3, r3, ip
 800b9fe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ba02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba0c:	45c1      	cmp	r9, r8
 800ba0e:	f841 3b04 	str.w	r3, [r1], #4
 800ba12:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ba16:	d2e9      	bcs.n	800b9ec <quorem+0xac>
 800ba18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba20:	b922      	cbnz	r2, 800ba2c <quorem+0xec>
 800ba22:	3b04      	subs	r3, #4
 800ba24:	429d      	cmp	r5, r3
 800ba26:	461a      	mov	r2, r3
 800ba28:	d30a      	bcc.n	800ba40 <quorem+0x100>
 800ba2a:	613c      	str	r4, [r7, #16]
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	b003      	add	sp, #12
 800ba30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba34:	6812      	ldr	r2, [r2, #0]
 800ba36:	3b04      	subs	r3, #4
 800ba38:	2a00      	cmp	r2, #0
 800ba3a:	d1ce      	bne.n	800b9da <quorem+0x9a>
 800ba3c:	3c01      	subs	r4, #1
 800ba3e:	e7c9      	b.n	800b9d4 <quorem+0x94>
 800ba40:	6812      	ldr	r2, [r2, #0]
 800ba42:	3b04      	subs	r3, #4
 800ba44:	2a00      	cmp	r2, #0
 800ba46:	d1f0      	bne.n	800ba2a <quorem+0xea>
 800ba48:	3c01      	subs	r4, #1
 800ba4a:	e7eb      	b.n	800ba24 <quorem+0xe4>
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	e7ee      	b.n	800ba2e <quorem+0xee>

0800ba50 <_dtoa_r>:
 800ba50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba54:	ed2d 8b04 	vpush	{d8-d9}
 800ba58:	69c5      	ldr	r5, [r0, #28]
 800ba5a:	b093      	sub	sp, #76	; 0x4c
 800ba5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ba60:	ec57 6b10 	vmov	r6, r7, d0
 800ba64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ba68:	9107      	str	r1, [sp, #28]
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	920a      	str	r2, [sp, #40]	; 0x28
 800ba6e:	930d      	str	r3, [sp, #52]	; 0x34
 800ba70:	b975      	cbnz	r5, 800ba90 <_dtoa_r+0x40>
 800ba72:	2010      	movs	r0, #16
 800ba74:	f000 fe2a 	bl	800c6cc <malloc>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	61e0      	str	r0, [r4, #28]
 800ba7c:	b920      	cbnz	r0, 800ba88 <_dtoa_r+0x38>
 800ba7e:	4bae      	ldr	r3, [pc, #696]	; (800bd38 <_dtoa_r+0x2e8>)
 800ba80:	21ef      	movs	r1, #239	; 0xef
 800ba82:	48ae      	ldr	r0, [pc, #696]	; (800bd3c <_dtoa_r+0x2ec>)
 800ba84:	f7ff f82a 	bl	800aadc <__assert_func>
 800ba88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ba8c:	6005      	str	r5, [r0, #0]
 800ba8e:	60c5      	str	r5, [r0, #12]
 800ba90:	69e3      	ldr	r3, [r4, #28]
 800ba92:	6819      	ldr	r1, [r3, #0]
 800ba94:	b151      	cbz	r1, 800baac <_dtoa_r+0x5c>
 800ba96:	685a      	ldr	r2, [r3, #4]
 800ba98:	604a      	str	r2, [r1, #4]
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	4093      	lsls	r3, r2
 800ba9e:	608b      	str	r3, [r1, #8]
 800baa0:	4620      	mov	r0, r4
 800baa2:	f000 ff07 	bl	800c8b4 <_Bfree>
 800baa6:	69e3      	ldr	r3, [r4, #28]
 800baa8:	2200      	movs	r2, #0
 800baaa:	601a      	str	r2, [r3, #0]
 800baac:	1e3b      	subs	r3, r7, #0
 800baae:	bfbb      	ittet	lt
 800bab0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bab4:	9303      	strlt	r3, [sp, #12]
 800bab6:	2300      	movge	r3, #0
 800bab8:	2201      	movlt	r2, #1
 800baba:	bfac      	ite	ge
 800babc:	f8c8 3000 	strge.w	r3, [r8]
 800bac0:	f8c8 2000 	strlt.w	r2, [r8]
 800bac4:	4b9e      	ldr	r3, [pc, #632]	; (800bd40 <_dtoa_r+0x2f0>)
 800bac6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800baca:	ea33 0308 	bics.w	r3, r3, r8
 800bace:	d11b      	bne.n	800bb08 <_dtoa_r+0xb8>
 800bad0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bad2:	f242 730f 	movw	r3, #9999	; 0x270f
 800bad6:	6013      	str	r3, [r2, #0]
 800bad8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800badc:	4333      	orrs	r3, r6
 800bade:	f000 8593 	beq.w	800c608 <_dtoa_r+0xbb8>
 800bae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bae4:	b963      	cbnz	r3, 800bb00 <_dtoa_r+0xb0>
 800bae6:	4b97      	ldr	r3, [pc, #604]	; (800bd44 <_dtoa_r+0x2f4>)
 800bae8:	e027      	b.n	800bb3a <_dtoa_r+0xea>
 800baea:	4b97      	ldr	r3, [pc, #604]	; (800bd48 <_dtoa_r+0x2f8>)
 800baec:	9300      	str	r3, [sp, #0]
 800baee:	3308      	adds	r3, #8
 800baf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800baf2:	6013      	str	r3, [r2, #0]
 800baf4:	9800      	ldr	r0, [sp, #0]
 800baf6:	b013      	add	sp, #76	; 0x4c
 800baf8:	ecbd 8b04 	vpop	{d8-d9}
 800bafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb00:	4b90      	ldr	r3, [pc, #576]	; (800bd44 <_dtoa_r+0x2f4>)
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	3303      	adds	r3, #3
 800bb06:	e7f3      	b.n	800baf0 <_dtoa_r+0xa0>
 800bb08:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	ec51 0b17 	vmov	r0, r1, d7
 800bb12:	eeb0 8a47 	vmov.f32	s16, s14
 800bb16:	eef0 8a67 	vmov.f32	s17, s15
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	f7f4 ffd4 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb20:	4681      	mov	r9, r0
 800bb22:	b160      	cbz	r0, 800bb3e <_dtoa_r+0xee>
 800bb24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb26:	2301      	movs	r3, #1
 800bb28:	6013      	str	r3, [r2, #0]
 800bb2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f000 8568 	beq.w	800c602 <_dtoa_r+0xbb2>
 800bb32:	4b86      	ldr	r3, [pc, #536]	; (800bd4c <_dtoa_r+0x2fc>)
 800bb34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bb36:	6013      	str	r3, [r2, #0]
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	9300      	str	r3, [sp, #0]
 800bb3c:	e7da      	b.n	800baf4 <_dtoa_r+0xa4>
 800bb3e:	aa10      	add	r2, sp, #64	; 0x40
 800bb40:	a911      	add	r1, sp, #68	; 0x44
 800bb42:	4620      	mov	r0, r4
 800bb44:	eeb0 0a48 	vmov.f32	s0, s16
 800bb48:	eef0 0a68 	vmov.f32	s1, s17
 800bb4c:	f001 f994 	bl	800ce78 <__d2b>
 800bb50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bb54:	4682      	mov	sl, r0
 800bb56:	2d00      	cmp	r5, #0
 800bb58:	d07f      	beq.n	800bc5a <_dtoa_r+0x20a>
 800bb5a:	ee18 3a90 	vmov	r3, s17
 800bb5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb62:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bb66:	ec51 0b18 	vmov	r0, r1, d8
 800bb6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bb6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bb72:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bb76:	4619      	mov	r1, r3
 800bb78:	2200      	movs	r2, #0
 800bb7a:	4b75      	ldr	r3, [pc, #468]	; (800bd50 <_dtoa_r+0x300>)
 800bb7c:	f7f4 fb84 	bl	8000288 <__aeabi_dsub>
 800bb80:	a367      	add	r3, pc, #412	; (adr r3, 800bd20 <_dtoa_r+0x2d0>)
 800bb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb86:	f7f4 fd37 	bl	80005f8 <__aeabi_dmul>
 800bb8a:	a367      	add	r3, pc, #412	; (adr r3, 800bd28 <_dtoa_r+0x2d8>)
 800bb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb90:	f7f4 fb7c 	bl	800028c <__adddf3>
 800bb94:	4606      	mov	r6, r0
 800bb96:	4628      	mov	r0, r5
 800bb98:	460f      	mov	r7, r1
 800bb9a:	f7f4 fcc3 	bl	8000524 <__aeabi_i2d>
 800bb9e:	a364      	add	r3, pc, #400	; (adr r3, 800bd30 <_dtoa_r+0x2e0>)
 800bba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba4:	f7f4 fd28 	bl	80005f8 <__aeabi_dmul>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	460b      	mov	r3, r1
 800bbac:	4630      	mov	r0, r6
 800bbae:	4639      	mov	r1, r7
 800bbb0:	f7f4 fb6c 	bl	800028c <__adddf3>
 800bbb4:	4606      	mov	r6, r0
 800bbb6:	460f      	mov	r7, r1
 800bbb8:	f7f4 ffce 	bl	8000b58 <__aeabi_d2iz>
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	4683      	mov	fp, r0
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	4639      	mov	r1, r7
 800bbc6:	f7f4 ff89 	bl	8000adc <__aeabi_dcmplt>
 800bbca:	b148      	cbz	r0, 800bbe0 <_dtoa_r+0x190>
 800bbcc:	4658      	mov	r0, fp
 800bbce:	f7f4 fca9 	bl	8000524 <__aeabi_i2d>
 800bbd2:	4632      	mov	r2, r6
 800bbd4:	463b      	mov	r3, r7
 800bbd6:	f7f4 ff77 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbda:	b908      	cbnz	r0, 800bbe0 <_dtoa_r+0x190>
 800bbdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bbe0:	f1bb 0f16 	cmp.w	fp, #22
 800bbe4:	d857      	bhi.n	800bc96 <_dtoa_r+0x246>
 800bbe6:	4b5b      	ldr	r3, [pc, #364]	; (800bd54 <_dtoa_r+0x304>)
 800bbe8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf0:	ec51 0b18 	vmov	r0, r1, d8
 800bbf4:	f7f4 ff72 	bl	8000adc <__aeabi_dcmplt>
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	d04e      	beq.n	800bc9a <_dtoa_r+0x24a>
 800bbfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc00:	2300      	movs	r3, #0
 800bc02:	930c      	str	r3, [sp, #48]	; 0x30
 800bc04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc06:	1b5b      	subs	r3, r3, r5
 800bc08:	1e5a      	subs	r2, r3, #1
 800bc0a:	bf45      	ittet	mi
 800bc0c:	f1c3 0301 	rsbmi	r3, r3, #1
 800bc10:	9305      	strmi	r3, [sp, #20]
 800bc12:	2300      	movpl	r3, #0
 800bc14:	2300      	movmi	r3, #0
 800bc16:	9206      	str	r2, [sp, #24]
 800bc18:	bf54      	ite	pl
 800bc1a:	9305      	strpl	r3, [sp, #20]
 800bc1c:	9306      	strmi	r3, [sp, #24]
 800bc1e:	f1bb 0f00 	cmp.w	fp, #0
 800bc22:	db3c      	blt.n	800bc9e <_dtoa_r+0x24e>
 800bc24:	9b06      	ldr	r3, [sp, #24]
 800bc26:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bc2a:	445b      	add	r3, fp
 800bc2c:	9306      	str	r3, [sp, #24]
 800bc2e:	2300      	movs	r3, #0
 800bc30:	9308      	str	r3, [sp, #32]
 800bc32:	9b07      	ldr	r3, [sp, #28]
 800bc34:	2b09      	cmp	r3, #9
 800bc36:	d868      	bhi.n	800bd0a <_dtoa_r+0x2ba>
 800bc38:	2b05      	cmp	r3, #5
 800bc3a:	bfc4      	itt	gt
 800bc3c:	3b04      	subgt	r3, #4
 800bc3e:	9307      	strgt	r3, [sp, #28]
 800bc40:	9b07      	ldr	r3, [sp, #28]
 800bc42:	f1a3 0302 	sub.w	r3, r3, #2
 800bc46:	bfcc      	ite	gt
 800bc48:	2500      	movgt	r5, #0
 800bc4a:	2501      	movle	r5, #1
 800bc4c:	2b03      	cmp	r3, #3
 800bc4e:	f200 8085 	bhi.w	800bd5c <_dtoa_r+0x30c>
 800bc52:	e8df f003 	tbb	[pc, r3]
 800bc56:	3b2e      	.short	0x3b2e
 800bc58:	5839      	.short	0x5839
 800bc5a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bc5e:	441d      	add	r5, r3
 800bc60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bc64:	2b20      	cmp	r3, #32
 800bc66:	bfc1      	itttt	gt
 800bc68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bc6c:	fa08 f803 	lslgt.w	r8, r8, r3
 800bc70:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bc74:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bc78:	bfd6      	itet	le
 800bc7a:	f1c3 0320 	rsble	r3, r3, #32
 800bc7e:	ea48 0003 	orrgt.w	r0, r8, r3
 800bc82:	fa06 f003 	lslle.w	r0, r6, r3
 800bc86:	f7f4 fc3d 	bl	8000504 <__aeabi_ui2d>
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bc90:	3d01      	subs	r5, #1
 800bc92:	920e      	str	r2, [sp, #56]	; 0x38
 800bc94:	e76f      	b.n	800bb76 <_dtoa_r+0x126>
 800bc96:	2301      	movs	r3, #1
 800bc98:	e7b3      	b.n	800bc02 <_dtoa_r+0x1b2>
 800bc9a:	900c      	str	r0, [sp, #48]	; 0x30
 800bc9c:	e7b2      	b.n	800bc04 <_dtoa_r+0x1b4>
 800bc9e:	9b05      	ldr	r3, [sp, #20]
 800bca0:	eba3 030b 	sub.w	r3, r3, fp
 800bca4:	9305      	str	r3, [sp, #20]
 800bca6:	f1cb 0300 	rsb	r3, fp, #0
 800bcaa:	9308      	str	r3, [sp, #32]
 800bcac:	2300      	movs	r3, #0
 800bcae:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcb0:	e7bf      	b.n	800bc32 <_dtoa_r+0x1e2>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	9309      	str	r3, [sp, #36]	; 0x24
 800bcb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	dc52      	bgt.n	800bd62 <_dtoa_r+0x312>
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	9301      	str	r3, [sp, #4]
 800bcc0:	9304      	str	r3, [sp, #16]
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	920a      	str	r2, [sp, #40]	; 0x28
 800bcc6:	e00b      	b.n	800bce0 <_dtoa_r+0x290>
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e7f3      	b.n	800bcb4 <_dtoa_r+0x264>
 800bccc:	2300      	movs	r3, #0
 800bcce:	9309      	str	r3, [sp, #36]	; 0x24
 800bcd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcd2:	445b      	add	r3, fp
 800bcd4:	9301      	str	r3, [sp, #4]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	9304      	str	r3, [sp, #16]
 800bcdc:	bfb8      	it	lt
 800bcde:	2301      	movlt	r3, #1
 800bce0:	69e0      	ldr	r0, [r4, #28]
 800bce2:	2100      	movs	r1, #0
 800bce4:	2204      	movs	r2, #4
 800bce6:	f102 0614 	add.w	r6, r2, #20
 800bcea:	429e      	cmp	r6, r3
 800bcec:	d93d      	bls.n	800bd6a <_dtoa_r+0x31a>
 800bcee:	6041      	str	r1, [r0, #4]
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f000 fd9f 	bl	800c834 <_Balloc>
 800bcf6:	9000      	str	r0, [sp, #0]
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	d139      	bne.n	800bd70 <_dtoa_r+0x320>
 800bcfc:	4b16      	ldr	r3, [pc, #88]	; (800bd58 <_dtoa_r+0x308>)
 800bcfe:	4602      	mov	r2, r0
 800bd00:	f240 11af 	movw	r1, #431	; 0x1af
 800bd04:	e6bd      	b.n	800ba82 <_dtoa_r+0x32>
 800bd06:	2301      	movs	r3, #1
 800bd08:	e7e1      	b.n	800bcce <_dtoa_r+0x27e>
 800bd0a:	2501      	movs	r5, #1
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	9307      	str	r3, [sp, #28]
 800bd10:	9509      	str	r5, [sp, #36]	; 0x24
 800bd12:	f04f 33ff 	mov.w	r3, #4294967295
 800bd16:	9301      	str	r3, [sp, #4]
 800bd18:	9304      	str	r3, [sp, #16]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	2312      	movs	r3, #18
 800bd1e:	e7d1      	b.n	800bcc4 <_dtoa_r+0x274>
 800bd20:	636f4361 	.word	0x636f4361
 800bd24:	3fd287a7 	.word	0x3fd287a7
 800bd28:	8b60c8b3 	.word	0x8b60c8b3
 800bd2c:	3fc68a28 	.word	0x3fc68a28
 800bd30:	509f79fb 	.word	0x509f79fb
 800bd34:	3fd34413 	.word	0x3fd34413
 800bd38:	0800dcc1 	.word	0x0800dcc1
 800bd3c:	0800dcd8 	.word	0x0800dcd8
 800bd40:	7ff00000 	.word	0x7ff00000
 800bd44:	0800dcbd 	.word	0x0800dcbd
 800bd48:	0800dcb4 	.word	0x0800dcb4
 800bd4c:	0800dc91 	.word	0x0800dc91
 800bd50:	3ff80000 	.word	0x3ff80000
 800bd54:	0800ddc8 	.word	0x0800ddc8
 800bd58:	0800dd30 	.word	0x0800dd30
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd60:	e7d7      	b.n	800bd12 <_dtoa_r+0x2c2>
 800bd62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd64:	9301      	str	r3, [sp, #4]
 800bd66:	9304      	str	r3, [sp, #16]
 800bd68:	e7ba      	b.n	800bce0 <_dtoa_r+0x290>
 800bd6a:	3101      	adds	r1, #1
 800bd6c:	0052      	lsls	r2, r2, #1
 800bd6e:	e7ba      	b.n	800bce6 <_dtoa_r+0x296>
 800bd70:	69e3      	ldr	r3, [r4, #28]
 800bd72:	9a00      	ldr	r2, [sp, #0]
 800bd74:	601a      	str	r2, [r3, #0]
 800bd76:	9b04      	ldr	r3, [sp, #16]
 800bd78:	2b0e      	cmp	r3, #14
 800bd7a:	f200 80a8 	bhi.w	800bece <_dtoa_r+0x47e>
 800bd7e:	2d00      	cmp	r5, #0
 800bd80:	f000 80a5 	beq.w	800bece <_dtoa_r+0x47e>
 800bd84:	f1bb 0f00 	cmp.w	fp, #0
 800bd88:	dd38      	ble.n	800bdfc <_dtoa_r+0x3ac>
 800bd8a:	4bc0      	ldr	r3, [pc, #768]	; (800c08c <_dtoa_r+0x63c>)
 800bd8c:	f00b 020f 	and.w	r2, fp, #15
 800bd90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bd98:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bd9c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bda0:	d019      	beq.n	800bdd6 <_dtoa_r+0x386>
 800bda2:	4bbb      	ldr	r3, [pc, #748]	; (800c090 <_dtoa_r+0x640>)
 800bda4:	ec51 0b18 	vmov	r0, r1, d8
 800bda8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bdac:	f7f4 fd4e 	bl	800084c <__aeabi_ddiv>
 800bdb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdb4:	f008 080f 	and.w	r8, r8, #15
 800bdb8:	2503      	movs	r5, #3
 800bdba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c090 <_dtoa_r+0x640>
 800bdbe:	f1b8 0f00 	cmp.w	r8, #0
 800bdc2:	d10a      	bne.n	800bdda <_dtoa_r+0x38a>
 800bdc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdc8:	4632      	mov	r2, r6
 800bdca:	463b      	mov	r3, r7
 800bdcc:	f7f4 fd3e 	bl	800084c <__aeabi_ddiv>
 800bdd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdd4:	e02b      	b.n	800be2e <_dtoa_r+0x3de>
 800bdd6:	2502      	movs	r5, #2
 800bdd8:	e7ef      	b.n	800bdba <_dtoa_r+0x36a>
 800bdda:	f018 0f01 	tst.w	r8, #1
 800bdde:	d008      	beq.n	800bdf2 <_dtoa_r+0x3a2>
 800bde0:	4630      	mov	r0, r6
 800bde2:	4639      	mov	r1, r7
 800bde4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bde8:	f7f4 fc06 	bl	80005f8 <__aeabi_dmul>
 800bdec:	3501      	adds	r5, #1
 800bdee:	4606      	mov	r6, r0
 800bdf0:	460f      	mov	r7, r1
 800bdf2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bdf6:	f109 0908 	add.w	r9, r9, #8
 800bdfa:	e7e0      	b.n	800bdbe <_dtoa_r+0x36e>
 800bdfc:	f000 809f 	beq.w	800bf3e <_dtoa_r+0x4ee>
 800be00:	f1cb 0600 	rsb	r6, fp, #0
 800be04:	4ba1      	ldr	r3, [pc, #644]	; (800c08c <_dtoa_r+0x63c>)
 800be06:	4fa2      	ldr	r7, [pc, #648]	; (800c090 <_dtoa_r+0x640>)
 800be08:	f006 020f 	and.w	r2, r6, #15
 800be0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be14:	ec51 0b18 	vmov	r0, r1, d8
 800be18:	f7f4 fbee 	bl	80005f8 <__aeabi_dmul>
 800be1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be20:	1136      	asrs	r6, r6, #4
 800be22:	2300      	movs	r3, #0
 800be24:	2502      	movs	r5, #2
 800be26:	2e00      	cmp	r6, #0
 800be28:	d17e      	bne.n	800bf28 <_dtoa_r+0x4d8>
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d1d0      	bne.n	800bdd0 <_dtoa_r+0x380>
 800be2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be30:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800be34:	2b00      	cmp	r3, #0
 800be36:	f000 8084 	beq.w	800bf42 <_dtoa_r+0x4f2>
 800be3a:	4b96      	ldr	r3, [pc, #600]	; (800c094 <_dtoa_r+0x644>)
 800be3c:	2200      	movs	r2, #0
 800be3e:	4640      	mov	r0, r8
 800be40:	4649      	mov	r1, r9
 800be42:	f7f4 fe4b 	bl	8000adc <__aeabi_dcmplt>
 800be46:	2800      	cmp	r0, #0
 800be48:	d07b      	beq.n	800bf42 <_dtoa_r+0x4f2>
 800be4a:	9b04      	ldr	r3, [sp, #16]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d078      	beq.n	800bf42 <_dtoa_r+0x4f2>
 800be50:	9b01      	ldr	r3, [sp, #4]
 800be52:	2b00      	cmp	r3, #0
 800be54:	dd39      	ble.n	800beca <_dtoa_r+0x47a>
 800be56:	4b90      	ldr	r3, [pc, #576]	; (800c098 <_dtoa_r+0x648>)
 800be58:	2200      	movs	r2, #0
 800be5a:	4640      	mov	r0, r8
 800be5c:	4649      	mov	r1, r9
 800be5e:	f7f4 fbcb 	bl	80005f8 <__aeabi_dmul>
 800be62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be66:	9e01      	ldr	r6, [sp, #4]
 800be68:	f10b 37ff 	add.w	r7, fp, #4294967295
 800be6c:	3501      	adds	r5, #1
 800be6e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800be72:	4628      	mov	r0, r5
 800be74:	f7f4 fb56 	bl	8000524 <__aeabi_i2d>
 800be78:	4642      	mov	r2, r8
 800be7a:	464b      	mov	r3, r9
 800be7c:	f7f4 fbbc 	bl	80005f8 <__aeabi_dmul>
 800be80:	4b86      	ldr	r3, [pc, #536]	; (800c09c <_dtoa_r+0x64c>)
 800be82:	2200      	movs	r2, #0
 800be84:	f7f4 fa02 	bl	800028c <__adddf3>
 800be88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800be8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be90:	9303      	str	r3, [sp, #12]
 800be92:	2e00      	cmp	r6, #0
 800be94:	d158      	bne.n	800bf48 <_dtoa_r+0x4f8>
 800be96:	4b82      	ldr	r3, [pc, #520]	; (800c0a0 <_dtoa_r+0x650>)
 800be98:	2200      	movs	r2, #0
 800be9a:	4640      	mov	r0, r8
 800be9c:	4649      	mov	r1, r9
 800be9e:	f7f4 f9f3 	bl	8000288 <__aeabi_dsub>
 800bea2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bea6:	4680      	mov	r8, r0
 800bea8:	4689      	mov	r9, r1
 800beaa:	f7f4 fe35 	bl	8000b18 <__aeabi_dcmpgt>
 800beae:	2800      	cmp	r0, #0
 800beb0:	f040 8296 	bne.w	800c3e0 <_dtoa_r+0x990>
 800beb4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800beb8:	4640      	mov	r0, r8
 800beba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bebe:	4649      	mov	r1, r9
 800bec0:	f7f4 fe0c 	bl	8000adc <__aeabi_dcmplt>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	f040 8289 	bne.w	800c3dc <_dtoa_r+0x98c>
 800beca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bece:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	f2c0 814e 	blt.w	800c172 <_dtoa_r+0x722>
 800bed6:	f1bb 0f0e 	cmp.w	fp, #14
 800beda:	f300 814a 	bgt.w	800c172 <_dtoa_r+0x722>
 800bede:	4b6b      	ldr	r3, [pc, #428]	; (800c08c <_dtoa_r+0x63c>)
 800bee0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bee4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beea:	2b00      	cmp	r3, #0
 800beec:	f280 80dc 	bge.w	800c0a8 <_dtoa_r+0x658>
 800bef0:	9b04      	ldr	r3, [sp, #16]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f300 80d8 	bgt.w	800c0a8 <_dtoa_r+0x658>
 800bef8:	f040 826f 	bne.w	800c3da <_dtoa_r+0x98a>
 800befc:	4b68      	ldr	r3, [pc, #416]	; (800c0a0 <_dtoa_r+0x650>)
 800befe:	2200      	movs	r2, #0
 800bf00:	4640      	mov	r0, r8
 800bf02:	4649      	mov	r1, r9
 800bf04:	f7f4 fb78 	bl	80005f8 <__aeabi_dmul>
 800bf08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf0c:	f7f4 fdfa 	bl	8000b04 <__aeabi_dcmpge>
 800bf10:	9e04      	ldr	r6, [sp, #16]
 800bf12:	4637      	mov	r7, r6
 800bf14:	2800      	cmp	r0, #0
 800bf16:	f040 8245 	bne.w	800c3a4 <_dtoa_r+0x954>
 800bf1a:	9d00      	ldr	r5, [sp, #0]
 800bf1c:	2331      	movs	r3, #49	; 0x31
 800bf1e:	f805 3b01 	strb.w	r3, [r5], #1
 800bf22:	f10b 0b01 	add.w	fp, fp, #1
 800bf26:	e241      	b.n	800c3ac <_dtoa_r+0x95c>
 800bf28:	07f2      	lsls	r2, r6, #31
 800bf2a:	d505      	bpl.n	800bf38 <_dtoa_r+0x4e8>
 800bf2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf30:	f7f4 fb62 	bl	80005f8 <__aeabi_dmul>
 800bf34:	3501      	adds	r5, #1
 800bf36:	2301      	movs	r3, #1
 800bf38:	1076      	asrs	r6, r6, #1
 800bf3a:	3708      	adds	r7, #8
 800bf3c:	e773      	b.n	800be26 <_dtoa_r+0x3d6>
 800bf3e:	2502      	movs	r5, #2
 800bf40:	e775      	b.n	800be2e <_dtoa_r+0x3de>
 800bf42:	9e04      	ldr	r6, [sp, #16]
 800bf44:	465f      	mov	r7, fp
 800bf46:	e792      	b.n	800be6e <_dtoa_r+0x41e>
 800bf48:	9900      	ldr	r1, [sp, #0]
 800bf4a:	4b50      	ldr	r3, [pc, #320]	; (800c08c <_dtoa_r+0x63c>)
 800bf4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf50:	4431      	add	r1, r6
 800bf52:	9102      	str	r1, [sp, #8]
 800bf54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf56:	eeb0 9a47 	vmov.f32	s18, s14
 800bf5a:	eef0 9a67 	vmov.f32	s19, s15
 800bf5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bf62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bf66:	2900      	cmp	r1, #0
 800bf68:	d044      	beq.n	800bff4 <_dtoa_r+0x5a4>
 800bf6a:	494e      	ldr	r1, [pc, #312]	; (800c0a4 <_dtoa_r+0x654>)
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	f7f4 fc6d 	bl	800084c <__aeabi_ddiv>
 800bf72:	ec53 2b19 	vmov	r2, r3, d9
 800bf76:	f7f4 f987 	bl	8000288 <__aeabi_dsub>
 800bf7a:	9d00      	ldr	r5, [sp, #0]
 800bf7c:	ec41 0b19 	vmov	d9, r0, r1
 800bf80:	4649      	mov	r1, r9
 800bf82:	4640      	mov	r0, r8
 800bf84:	f7f4 fde8 	bl	8000b58 <__aeabi_d2iz>
 800bf88:	4606      	mov	r6, r0
 800bf8a:	f7f4 facb 	bl	8000524 <__aeabi_i2d>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	460b      	mov	r3, r1
 800bf92:	4640      	mov	r0, r8
 800bf94:	4649      	mov	r1, r9
 800bf96:	f7f4 f977 	bl	8000288 <__aeabi_dsub>
 800bf9a:	3630      	adds	r6, #48	; 0x30
 800bf9c:	f805 6b01 	strb.w	r6, [r5], #1
 800bfa0:	ec53 2b19 	vmov	r2, r3, d9
 800bfa4:	4680      	mov	r8, r0
 800bfa6:	4689      	mov	r9, r1
 800bfa8:	f7f4 fd98 	bl	8000adc <__aeabi_dcmplt>
 800bfac:	2800      	cmp	r0, #0
 800bfae:	d164      	bne.n	800c07a <_dtoa_r+0x62a>
 800bfb0:	4642      	mov	r2, r8
 800bfb2:	464b      	mov	r3, r9
 800bfb4:	4937      	ldr	r1, [pc, #220]	; (800c094 <_dtoa_r+0x644>)
 800bfb6:	2000      	movs	r0, #0
 800bfb8:	f7f4 f966 	bl	8000288 <__aeabi_dsub>
 800bfbc:	ec53 2b19 	vmov	r2, r3, d9
 800bfc0:	f7f4 fd8c 	bl	8000adc <__aeabi_dcmplt>
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	f040 80b6 	bne.w	800c136 <_dtoa_r+0x6e6>
 800bfca:	9b02      	ldr	r3, [sp, #8]
 800bfcc:	429d      	cmp	r5, r3
 800bfce:	f43f af7c 	beq.w	800beca <_dtoa_r+0x47a>
 800bfd2:	4b31      	ldr	r3, [pc, #196]	; (800c098 <_dtoa_r+0x648>)
 800bfd4:	ec51 0b19 	vmov	r0, r1, d9
 800bfd8:	2200      	movs	r2, #0
 800bfda:	f7f4 fb0d 	bl	80005f8 <__aeabi_dmul>
 800bfde:	4b2e      	ldr	r3, [pc, #184]	; (800c098 <_dtoa_r+0x648>)
 800bfe0:	ec41 0b19 	vmov	d9, r0, r1
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	4640      	mov	r0, r8
 800bfe8:	4649      	mov	r1, r9
 800bfea:	f7f4 fb05 	bl	80005f8 <__aeabi_dmul>
 800bfee:	4680      	mov	r8, r0
 800bff0:	4689      	mov	r9, r1
 800bff2:	e7c5      	b.n	800bf80 <_dtoa_r+0x530>
 800bff4:	ec51 0b17 	vmov	r0, r1, d7
 800bff8:	f7f4 fafe 	bl	80005f8 <__aeabi_dmul>
 800bffc:	9b02      	ldr	r3, [sp, #8]
 800bffe:	9d00      	ldr	r5, [sp, #0]
 800c000:	930f      	str	r3, [sp, #60]	; 0x3c
 800c002:	ec41 0b19 	vmov	d9, r0, r1
 800c006:	4649      	mov	r1, r9
 800c008:	4640      	mov	r0, r8
 800c00a:	f7f4 fda5 	bl	8000b58 <__aeabi_d2iz>
 800c00e:	4606      	mov	r6, r0
 800c010:	f7f4 fa88 	bl	8000524 <__aeabi_i2d>
 800c014:	3630      	adds	r6, #48	; 0x30
 800c016:	4602      	mov	r2, r0
 800c018:	460b      	mov	r3, r1
 800c01a:	4640      	mov	r0, r8
 800c01c:	4649      	mov	r1, r9
 800c01e:	f7f4 f933 	bl	8000288 <__aeabi_dsub>
 800c022:	f805 6b01 	strb.w	r6, [r5], #1
 800c026:	9b02      	ldr	r3, [sp, #8]
 800c028:	429d      	cmp	r5, r3
 800c02a:	4680      	mov	r8, r0
 800c02c:	4689      	mov	r9, r1
 800c02e:	f04f 0200 	mov.w	r2, #0
 800c032:	d124      	bne.n	800c07e <_dtoa_r+0x62e>
 800c034:	4b1b      	ldr	r3, [pc, #108]	; (800c0a4 <_dtoa_r+0x654>)
 800c036:	ec51 0b19 	vmov	r0, r1, d9
 800c03a:	f7f4 f927 	bl	800028c <__adddf3>
 800c03e:	4602      	mov	r2, r0
 800c040:	460b      	mov	r3, r1
 800c042:	4640      	mov	r0, r8
 800c044:	4649      	mov	r1, r9
 800c046:	f7f4 fd67 	bl	8000b18 <__aeabi_dcmpgt>
 800c04a:	2800      	cmp	r0, #0
 800c04c:	d173      	bne.n	800c136 <_dtoa_r+0x6e6>
 800c04e:	ec53 2b19 	vmov	r2, r3, d9
 800c052:	4914      	ldr	r1, [pc, #80]	; (800c0a4 <_dtoa_r+0x654>)
 800c054:	2000      	movs	r0, #0
 800c056:	f7f4 f917 	bl	8000288 <__aeabi_dsub>
 800c05a:	4602      	mov	r2, r0
 800c05c:	460b      	mov	r3, r1
 800c05e:	4640      	mov	r0, r8
 800c060:	4649      	mov	r1, r9
 800c062:	f7f4 fd3b 	bl	8000adc <__aeabi_dcmplt>
 800c066:	2800      	cmp	r0, #0
 800c068:	f43f af2f 	beq.w	800beca <_dtoa_r+0x47a>
 800c06c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c06e:	1e6b      	subs	r3, r5, #1
 800c070:	930f      	str	r3, [sp, #60]	; 0x3c
 800c072:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c076:	2b30      	cmp	r3, #48	; 0x30
 800c078:	d0f8      	beq.n	800c06c <_dtoa_r+0x61c>
 800c07a:	46bb      	mov	fp, r7
 800c07c:	e04a      	b.n	800c114 <_dtoa_r+0x6c4>
 800c07e:	4b06      	ldr	r3, [pc, #24]	; (800c098 <_dtoa_r+0x648>)
 800c080:	f7f4 faba 	bl	80005f8 <__aeabi_dmul>
 800c084:	4680      	mov	r8, r0
 800c086:	4689      	mov	r9, r1
 800c088:	e7bd      	b.n	800c006 <_dtoa_r+0x5b6>
 800c08a:	bf00      	nop
 800c08c:	0800ddc8 	.word	0x0800ddc8
 800c090:	0800dda0 	.word	0x0800dda0
 800c094:	3ff00000 	.word	0x3ff00000
 800c098:	40240000 	.word	0x40240000
 800c09c:	401c0000 	.word	0x401c0000
 800c0a0:	40140000 	.word	0x40140000
 800c0a4:	3fe00000 	.word	0x3fe00000
 800c0a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c0ac:	9d00      	ldr	r5, [sp, #0]
 800c0ae:	4642      	mov	r2, r8
 800c0b0:	464b      	mov	r3, r9
 800c0b2:	4630      	mov	r0, r6
 800c0b4:	4639      	mov	r1, r7
 800c0b6:	f7f4 fbc9 	bl	800084c <__aeabi_ddiv>
 800c0ba:	f7f4 fd4d 	bl	8000b58 <__aeabi_d2iz>
 800c0be:	9001      	str	r0, [sp, #4]
 800c0c0:	f7f4 fa30 	bl	8000524 <__aeabi_i2d>
 800c0c4:	4642      	mov	r2, r8
 800c0c6:	464b      	mov	r3, r9
 800c0c8:	f7f4 fa96 	bl	80005f8 <__aeabi_dmul>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	4639      	mov	r1, r7
 800c0d4:	f7f4 f8d8 	bl	8000288 <__aeabi_dsub>
 800c0d8:	9e01      	ldr	r6, [sp, #4]
 800c0da:	9f04      	ldr	r7, [sp, #16]
 800c0dc:	3630      	adds	r6, #48	; 0x30
 800c0de:	f805 6b01 	strb.w	r6, [r5], #1
 800c0e2:	9e00      	ldr	r6, [sp, #0]
 800c0e4:	1bae      	subs	r6, r5, r6
 800c0e6:	42b7      	cmp	r7, r6
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	d134      	bne.n	800c158 <_dtoa_r+0x708>
 800c0ee:	f7f4 f8cd 	bl	800028c <__adddf3>
 800c0f2:	4642      	mov	r2, r8
 800c0f4:	464b      	mov	r3, r9
 800c0f6:	4606      	mov	r6, r0
 800c0f8:	460f      	mov	r7, r1
 800c0fa:	f7f4 fd0d 	bl	8000b18 <__aeabi_dcmpgt>
 800c0fe:	b9c8      	cbnz	r0, 800c134 <_dtoa_r+0x6e4>
 800c100:	4642      	mov	r2, r8
 800c102:	464b      	mov	r3, r9
 800c104:	4630      	mov	r0, r6
 800c106:	4639      	mov	r1, r7
 800c108:	f7f4 fcde 	bl	8000ac8 <__aeabi_dcmpeq>
 800c10c:	b110      	cbz	r0, 800c114 <_dtoa_r+0x6c4>
 800c10e:	9b01      	ldr	r3, [sp, #4]
 800c110:	07db      	lsls	r3, r3, #31
 800c112:	d40f      	bmi.n	800c134 <_dtoa_r+0x6e4>
 800c114:	4651      	mov	r1, sl
 800c116:	4620      	mov	r0, r4
 800c118:	f000 fbcc 	bl	800c8b4 <_Bfree>
 800c11c:	2300      	movs	r3, #0
 800c11e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c120:	702b      	strb	r3, [r5, #0]
 800c122:	f10b 0301 	add.w	r3, fp, #1
 800c126:	6013      	str	r3, [r2, #0]
 800c128:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	f43f ace2 	beq.w	800baf4 <_dtoa_r+0xa4>
 800c130:	601d      	str	r5, [r3, #0]
 800c132:	e4df      	b.n	800baf4 <_dtoa_r+0xa4>
 800c134:	465f      	mov	r7, fp
 800c136:	462b      	mov	r3, r5
 800c138:	461d      	mov	r5, r3
 800c13a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c13e:	2a39      	cmp	r2, #57	; 0x39
 800c140:	d106      	bne.n	800c150 <_dtoa_r+0x700>
 800c142:	9a00      	ldr	r2, [sp, #0]
 800c144:	429a      	cmp	r2, r3
 800c146:	d1f7      	bne.n	800c138 <_dtoa_r+0x6e8>
 800c148:	9900      	ldr	r1, [sp, #0]
 800c14a:	2230      	movs	r2, #48	; 0x30
 800c14c:	3701      	adds	r7, #1
 800c14e:	700a      	strb	r2, [r1, #0]
 800c150:	781a      	ldrb	r2, [r3, #0]
 800c152:	3201      	adds	r2, #1
 800c154:	701a      	strb	r2, [r3, #0]
 800c156:	e790      	b.n	800c07a <_dtoa_r+0x62a>
 800c158:	4ba3      	ldr	r3, [pc, #652]	; (800c3e8 <_dtoa_r+0x998>)
 800c15a:	2200      	movs	r2, #0
 800c15c:	f7f4 fa4c 	bl	80005f8 <__aeabi_dmul>
 800c160:	2200      	movs	r2, #0
 800c162:	2300      	movs	r3, #0
 800c164:	4606      	mov	r6, r0
 800c166:	460f      	mov	r7, r1
 800c168:	f7f4 fcae 	bl	8000ac8 <__aeabi_dcmpeq>
 800c16c:	2800      	cmp	r0, #0
 800c16e:	d09e      	beq.n	800c0ae <_dtoa_r+0x65e>
 800c170:	e7d0      	b.n	800c114 <_dtoa_r+0x6c4>
 800c172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c174:	2a00      	cmp	r2, #0
 800c176:	f000 80ca 	beq.w	800c30e <_dtoa_r+0x8be>
 800c17a:	9a07      	ldr	r2, [sp, #28]
 800c17c:	2a01      	cmp	r2, #1
 800c17e:	f300 80ad 	bgt.w	800c2dc <_dtoa_r+0x88c>
 800c182:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c184:	2a00      	cmp	r2, #0
 800c186:	f000 80a5 	beq.w	800c2d4 <_dtoa_r+0x884>
 800c18a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c18e:	9e08      	ldr	r6, [sp, #32]
 800c190:	9d05      	ldr	r5, [sp, #20]
 800c192:	9a05      	ldr	r2, [sp, #20]
 800c194:	441a      	add	r2, r3
 800c196:	9205      	str	r2, [sp, #20]
 800c198:	9a06      	ldr	r2, [sp, #24]
 800c19a:	2101      	movs	r1, #1
 800c19c:	441a      	add	r2, r3
 800c19e:	4620      	mov	r0, r4
 800c1a0:	9206      	str	r2, [sp, #24]
 800c1a2:	f000 fc3d 	bl	800ca20 <__i2b>
 800c1a6:	4607      	mov	r7, r0
 800c1a8:	b165      	cbz	r5, 800c1c4 <_dtoa_r+0x774>
 800c1aa:	9b06      	ldr	r3, [sp, #24]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	dd09      	ble.n	800c1c4 <_dtoa_r+0x774>
 800c1b0:	42ab      	cmp	r3, r5
 800c1b2:	9a05      	ldr	r2, [sp, #20]
 800c1b4:	bfa8      	it	ge
 800c1b6:	462b      	movge	r3, r5
 800c1b8:	1ad2      	subs	r2, r2, r3
 800c1ba:	9205      	str	r2, [sp, #20]
 800c1bc:	9a06      	ldr	r2, [sp, #24]
 800c1be:	1aed      	subs	r5, r5, r3
 800c1c0:	1ad3      	subs	r3, r2, r3
 800c1c2:	9306      	str	r3, [sp, #24]
 800c1c4:	9b08      	ldr	r3, [sp, #32]
 800c1c6:	b1f3      	cbz	r3, 800c206 <_dtoa_r+0x7b6>
 800c1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	f000 80a3 	beq.w	800c316 <_dtoa_r+0x8c6>
 800c1d0:	2e00      	cmp	r6, #0
 800c1d2:	dd10      	ble.n	800c1f6 <_dtoa_r+0x7a6>
 800c1d4:	4639      	mov	r1, r7
 800c1d6:	4632      	mov	r2, r6
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f000 fce1 	bl	800cba0 <__pow5mult>
 800c1de:	4652      	mov	r2, sl
 800c1e0:	4601      	mov	r1, r0
 800c1e2:	4607      	mov	r7, r0
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	f000 fc31 	bl	800ca4c <__multiply>
 800c1ea:	4651      	mov	r1, sl
 800c1ec:	4680      	mov	r8, r0
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f000 fb60 	bl	800c8b4 <_Bfree>
 800c1f4:	46c2      	mov	sl, r8
 800c1f6:	9b08      	ldr	r3, [sp, #32]
 800c1f8:	1b9a      	subs	r2, r3, r6
 800c1fa:	d004      	beq.n	800c206 <_dtoa_r+0x7b6>
 800c1fc:	4651      	mov	r1, sl
 800c1fe:	4620      	mov	r0, r4
 800c200:	f000 fcce 	bl	800cba0 <__pow5mult>
 800c204:	4682      	mov	sl, r0
 800c206:	2101      	movs	r1, #1
 800c208:	4620      	mov	r0, r4
 800c20a:	f000 fc09 	bl	800ca20 <__i2b>
 800c20e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c210:	2b00      	cmp	r3, #0
 800c212:	4606      	mov	r6, r0
 800c214:	f340 8081 	ble.w	800c31a <_dtoa_r+0x8ca>
 800c218:	461a      	mov	r2, r3
 800c21a:	4601      	mov	r1, r0
 800c21c:	4620      	mov	r0, r4
 800c21e:	f000 fcbf 	bl	800cba0 <__pow5mult>
 800c222:	9b07      	ldr	r3, [sp, #28]
 800c224:	2b01      	cmp	r3, #1
 800c226:	4606      	mov	r6, r0
 800c228:	dd7a      	ble.n	800c320 <_dtoa_r+0x8d0>
 800c22a:	f04f 0800 	mov.w	r8, #0
 800c22e:	6933      	ldr	r3, [r6, #16]
 800c230:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c234:	6918      	ldr	r0, [r3, #16]
 800c236:	f000 fba5 	bl	800c984 <__hi0bits>
 800c23a:	f1c0 0020 	rsb	r0, r0, #32
 800c23e:	9b06      	ldr	r3, [sp, #24]
 800c240:	4418      	add	r0, r3
 800c242:	f010 001f 	ands.w	r0, r0, #31
 800c246:	f000 8094 	beq.w	800c372 <_dtoa_r+0x922>
 800c24a:	f1c0 0320 	rsb	r3, r0, #32
 800c24e:	2b04      	cmp	r3, #4
 800c250:	f340 8085 	ble.w	800c35e <_dtoa_r+0x90e>
 800c254:	9b05      	ldr	r3, [sp, #20]
 800c256:	f1c0 001c 	rsb	r0, r0, #28
 800c25a:	4403      	add	r3, r0
 800c25c:	9305      	str	r3, [sp, #20]
 800c25e:	9b06      	ldr	r3, [sp, #24]
 800c260:	4403      	add	r3, r0
 800c262:	4405      	add	r5, r0
 800c264:	9306      	str	r3, [sp, #24]
 800c266:	9b05      	ldr	r3, [sp, #20]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	dd05      	ble.n	800c278 <_dtoa_r+0x828>
 800c26c:	4651      	mov	r1, sl
 800c26e:	461a      	mov	r2, r3
 800c270:	4620      	mov	r0, r4
 800c272:	f000 fcef 	bl	800cc54 <__lshift>
 800c276:	4682      	mov	sl, r0
 800c278:	9b06      	ldr	r3, [sp, #24]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	dd05      	ble.n	800c28a <_dtoa_r+0x83a>
 800c27e:	4631      	mov	r1, r6
 800c280:	461a      	mov	r2, r3
 800c282:	4620      	mov	r0, r4
 800c284:	f000 fce6 	bl	800cc54 <__lshift>
 800c288:	4606      	mov	r6, r0
 800c28a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d072      	beq.n	800c376 <_dtoa_r+0x926>
 800c290:	4631      	mov	r1, r6
 800c292:	4650      	mov	r0, sl
 800c294:	f000 fd4a 	bl	800cd2c <__mcmp>
 800c298:	2800      	cmp	r0, #0
 800c29a:	da6c      	bge.n	800c376 <_dtoa_r+0x926>
 800c29c:	2300      	movs	r3, #0
 800c29e:	4651      	mov	r1, sl
 800c2a0:	220a      	movs	r2, #10
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	f000 fb28 	bl	800c8f8 <__multadd>
 800c2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c2ae:	4682      	mov	sl, r0
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	f000 81b0 	beq.w	800c616 <_dtoa_r+0xbc6>
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	4639      	mov	r1, r7
 800c2ba:	220a      	movs	r2, #10
 800c2bc:	4620      	mov	r0, r4
 800c2be:	f000 fb1b 	bl	800c8f8 <__multadd>
 800c2c2:	9b01      	ldr	r3, [sp, #4]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	4607      	mov	r7, r0
 800c2c8:	f300 8096 	bgt.w	800c3f8 <_dtoa_r+0x9a8>
 800c2cc:	9b07      	ldr	r3, [sp, #28]
 800c2ce:	2b02      	cmp	r3, #2
 800c2d0:	dc59      	bgt.n	800c386 <_dtoa_r+0x936>
 800c2d2:	e091      	b.n	800c3f8 <_dtoa_r+0x9a8>
 800c2d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c2d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c2da:	e758      	b.n	800c18e <_dtoa_r+0x73e>
 800c2dc:	9b04      	ldr	r3, [sp, #16]
 800c2de:	1e5e      	subs	r6, r3, #1
 800c2e0:	9b08      	ldr	r3, [sp, #32]
 800c2e2:	42b3      	cmp	r3, r6
 800c2e4:	bfbf      	itttt	lt
 800c2e6:	9b08      	ldrlt	r3, [sp, #32]
 800c2e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c2ea:	9608      	strlt	r6, [sp, #32]
 800c2ec:	1af3      	sublt	r3, r6, r3
 800c2ee:	bfb4      	ite	lt
 800c2f0:	18d2      	addlt	r2, r2, r3
 800c2f2:	1b9e      	subge	r6, r3, r6
 800c2f4:	9b04      	ldr	r3, [sp, #16]
 800c2f6:	bfbc      	itt	lt
 800c2f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c2fa:	2600      	movlt	r6, #0
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	bfb7      	itett	lt
 800c300:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c304:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c308:	1a9d      	sublt	r5, r3, r2
 800c30a:	2300      	movlt	r3, #0
 800c30c:	e741      	b.n	800c192 <_dtoa_r+0x742>
 800c30e:	9e08      	ldr	r6, [sp, #32]
 800c310:	9d05      	ldr	r5, [sp, #20]
 800c312:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c314:	e748      	b.n	800c1a8 <_dtoa_r+0x758>
 800c316:	9a08      	ldr	r2, [sp, #32]
 800c318:	e770      	b.n	800c1fc <_dtoa_r+0x7ac>
 800c31a:	9b07      	ldr	r3, [sp, #28]
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	dc19      	bgt.n	800c354 <_dtoa_r+0x904>
 800c320:	9b02      	ldr	r3, [sp, #8]
 800c322:	b9bb      	cbnz	r3, 800c354 <_dtoa_r+0x904>
 800c324:	9b03      	ldr	r3, [sp, #12]
 800c326:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c32a:	b99b      	cbnz	r3, 800c354 <_dtoa_r+0x904>
 800c32c:	9b03      	ldr	r3, [sp, #12]
 800c32e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c332:	0d1b      	lsrs	r3, r3, #20
 800c334:	051b      	lsls	r3, r3, #20
 800c336:	b183      	cbz	r3, 800c35a <_dtoa_r+0x90a>
 800c338:	9b05      	ldr	r3, [sp, #20]
 800c33a:	3301      	adds	r3, #1
 800c33c:	9305      	str	r3, [sp, #20]
 800c33e:	9b06      	ldr	r3, [sp, #24]
 800c340:	3301      	adds	r3, #1
 800c342:	9306      	str	r3, [sp, #24]
 800c344:	f04f 0801 	mov.w	r8, #1
 800c348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	f47f af6f 	bne.w	800c22e <_dtoa_r+0x7de>
 800c350:	2001      	movs	r0, #1
 800c352:	e774      	b.n	800c23e <_dtoa_r+0x7ee>
 800c354:	f04f 0800 	mov.w	r8, #0
 800c358:	e7f6      	b.n	800c348 <_dtoa_r+0x8f8>
 800c35a:	4698      	mov	r8, r3
 800c35c:	e7f4      	b.n	800c348 <_dtoa_r+0x8f8>
 800c35e:	d082      	beq.n	800c266 <_dtoa_r+0x816>
 800c360:	9a05      	ldr	r2, [sp, #20]
 800c362:	331c      	adds	r3, #28
 800c364:	441a      	add	r2, r3
 800c366:	9205      	str	r2, [sp, #20]
 800c368:	9a06      	ldr	r2, [sp, #24]
 800c36a:	441a      	add	r2, r3
 800c36c:	441d      	add	r5, r3
 800c36e:	9206      	str	r2, [sp, #24]
 800c370:	e779      	b.n	800c266 <_dtoa_r+0x816>
 800c372:	4603      	mov	r3, r0
 800c374:	e7f4      	b.n	800c360 <_dtoa_r+0x910>
 800c376:	9b04      	ldr	r3, [sp, #16]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	dc37      	bgt.n	800c3ec <_dtoa_r+0x99c>
 800c37c:	9b07      	ldr	r3, [sp, #28]
 800c37e:	2b02      	cmp	r3, #2
 800c380:	dd34      	ble.n	800c3ec <_dtoa_r+0x99c>
 800c382:	9b04      	ldr	r3, [sp, #16]
 800c384:	9301      	str	r3, [sp, #4]
 800c386:	9b01      	ldr	r3, [sp, #4]
 800c388:	b963      	cbnz	r3, 800c3a4 <_dtoa_r+0x954>
 800c38a:	4631      	mov	r1, r6
 800c38c:	2205      	movs	r2, #5
 800c38e:	4620      	mov	r0, r4
 800c390:	f000 fab2 	bl	800c8f8 <__multadd>
 800c394:	4601      	mov	r1, r0
 800c396:	4606      	mov	r6, r0
 800c398:	4650      	mov	r0, sl
 800c39a:	f000 fcc7 	bl	800cd2c <__mcmp>
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	f73f adbb 	bgt.w	800bf1a <_dtoa_r+0x4ca>
 800c3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3a6:	9d00      	ldr	r5, [sp, #0]
 800c3a8:	ea6f 0b03 	mvn.w	fp, r3
 800c3ac:	f04f 0800 	mov.w	r8, #0
 800c3b0:	4631      	mov	r1, r6
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f000 fa7e 	bl	800c8b4 <_Bfree>
 800c3b8:	2f00      	cmp	r7, #0
 800c3ba:	f43f aeab 	beq.w	800c114 <_dtoa_r+0x6c4>
 800c3be:	f1b8 0f00 	cmp.w	r8, #0
 800c3c2:	d005      	beq.n	800c3d0 <_dtoa_r+0x980>
 800c3c4:	45b8      	cmp	r8, r7
 800c3c6:	d003      	beq.n	800c3d0 <_dtoa_r+0x980>
 800c3c8:	4641      	mov	r1, r8
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	f000 fa72 	bl	800c8b4 <_Bfree>
 800c3d0:	4639      	mov	r1, r7
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	f000 fa6e 	bl	800c8b4 <_Bfree>
 800c3d8:	e69c      	b.n	800c114 <_dtoa_r+0x6c4>
 800c3da:	2600      	movs	r6, #0
 800c3dc:	4637      	mov	r7, r6
 800c3de:	e7e1      	b.n	800c3a4 <_dtoa_r+0x954>
 800c3e0:	46bb      	mov	fp, r7
 800c3e2:	4637      	mov	r7, r6
 800c3e4:	e599      	b.n	800bf1a <_dtoa_r+0x4ca>
 800c3e6:	bf00      	nop
 800c3e8:	40240000 	.word	0x40240000
 800c3ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	f000 80c8 	beq.w	800c584 <_dtoa_r+0xb34>
 800c3f4:	9b04      	ldr	r3, [sp, #16]
 800c3f6:	9301      	str	r3, [sp, #4]
 800c3f8:	2d00      	cmp	r5, #0
 800c3fa:	dd05      	ble.n	800c408 <_dtoa_r+0x9b8>
 800c3fc:	4639      	mov	r1, r7
 800c3fe:	462a      	mov	r2, r5
 800c400:	4620      	mov	r0, r4
 800c402:	f000 fc27 	bl	800cc54 <__lshift>
 800c406:	4607      	mov	r7, r0
 800c408:	f1b8 0f00 	cmp.w	r8, #0
 800c40c:	d05b      	beq.n	800c4c6 <_dtoa_r+0xa76>
 800c40e:	6879      	ldr	r1, [r7, #4]
 800c410:	4620      	mov	r0, r4
 800c412:	f000 fa0f 	bl	800c834 <_Balloc>
 800c416:	4605      	mov	r5, r0
 800c418:	b928      	cbnz	r0, 800c426 <_dtoa_r+0x9d6>
 800c41a:	4b83      	ldr	r3, [pc, #524]	; (800c628 <_dtoa_r+0xbd8>)
 800c41c:	4602      	mov	r2, r0
 800c41e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c422:	f7ff bb2e 	b.w	800ba82 <_dtoa_r+0x32>
 800c426:	693a      	ldr	r2, [r7, #16]
 800c428:	3202      	adds	r2, #2
 800c42a:	0092      	lsls	r2, r2, #2
 800c42c:	f107 010c 	add.w	r1, r7, #12
 800c430:	300c      	adds	r0, #12
 800c432:	f7ff fa70 	bl	800b916 <memcpy>
 800c436:	2201      	movs	r2, #1
 800c438:	4629      	mov	r1, r5
 800c43a:	4620      	mov	r0, r4
 800c43c:	f000 fc0a 	bl	800cc54 <__lshift>
 800c440:	9b00      	ldr	r3, [sp, #0]
 800c442:	3301      	adds	r3, #1
 800c444:	9304      	str	r3, [sp, #16]
 800c446:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c44a:	4413      	add	r3, r2
 800c44c:	9308      	str	r3, [sp, #32]
 800c44e:	9b02      	ldr	r3, [sp, #8]
 800c450:	f003 0301 	and.w	r3, r3, #1
 800c454:	46b8      	mov	r8, r7
 800c456:	9306      	str	r3, [sp, #24]
 800c458:	4607      	mov	r7, r0
 800c45a:	9b04      	ldr	r3, [sp, #16]
 800c45c:	4631      	mov	r1, r6
 800c45e:	3b01      	subs	r3, #1
 800c460:	4650      	mov	r0, sl
 800c462:	9301      	str	r3, [sp, #4]
 800c464:	f7ff fa6c 	bl	800b940 <quorem>
 800c468:	4641      	mov	r1, r8
 800c46a:	9002      	str	r0, [sp, #8]
 800c46c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c470:	4650      	mov	r0, sl
 800c472:	f000 fc5b 	bl	800cd2c <__mcmp>
 800c476:	463a      	mov	r2, r7
 800c478:	9005      	str	r0, [sp, #20]
 800c47a:	4631      	mov	r1, r6
 800c47c:	4620      	mov	r0, r4
 800c47e:	f000 fc71 	bl	800cd64 <__mdiff>
 800c482:	68c2      	ldr	r2, [r0, #12]
 800c484:	4605      	mov	r5, r0
 800c486:	bb02      	cbnz	r2, 800c4ca <_dtoa_r+0xa7a>
 800c488:	4601      	mov	r1, r0
 800c48a:	4650      	mov	r0, sl
 800c48c:	f000 fc4e 	bl	800cd2c <__mcmp>
 800c490:	4602      	mov	r2, r0
 800c492:	4629      	mov	r1, r5
 800c494:	4620      	mov	r0, r4
 800c496:	9209      	str	r2, [sp, #36]	; 0x24
 800c498:	f000 fa0c 	bl	800c8b4 <_Bfree>
 800c49c:	9b07      	ldr	r3, [sp, #28]
 800c49e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4a0:	9d04      	ldr	r5, [sp, #16]
 800c4a2:	ea43 0102 	orr.w	r1, r3, r2
 800c4a6:	9b06      	ldr	r3, [sp, #24]
 800c4a8:	4319      	orrs	r1, r3
 800c4aa:	d110      	bne.n	800c4ce <_dtoa_r+0xa7e>
 800c4ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c4b0:	d029      	beq.n	800c506 <_dtoa_r+0xab6>
 800c4b2:	9b05      	ldr	r3, [sp, #20]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	dd02      	ble.n	800c4be <_dtoa_r+0xa6e>
 800c4b8:	9b02      	ldr	r3, [sp, #8]
 800c4ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c4be:	9b01      	ldr	r3, [sp, #4]
 800c4c0:	f883 9000 	strb.w	r9, [r3]
 800c4c4:	e774      	b.n	800c3b0 <_dtoa_r+0x960>
 800c4c6:	4638      	mov	r0, r7
 800c4c8:	e7ba      	b.n	800c440 <_dtoa_r+0x9f0>
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	e7e1      	b.n	800c492 <_dtoa_r+0xa42>
 800c4ce:	9b05      	ldr	r3, [sp, #20]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	db04      	blt.n	800c4de <_dtoa_r+0xa8e>
 800c4d4:	9907      	ldr	r1, [sp, #28]
 800c4d6:	430b      	orrs	r3, r1
 800c4d8:	9906      	ldr	r1, [sp, #24]
 800c4da:	430b      	orrs	r3, r1
 800c4dc:	d120      	bne.n	800c520 <_dtoa_r+0xad0>
 800c4de:	2a00      	cmp	r2, #0
 800c4e0:	dded      	ble.n	800c4be <_dtoa_r+0xa6e>
 800c4e2:	4651      	mov	r1, sl
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	f000 fbb4 	bl	800cc54 <__lshift>
 800c4ec:	4631      	mov	r1, r6
 800c4ee:	4682      	mov	sl, r0
 800c4f0:	f000 fc1c 	bl	800cd2c <__mcmp>
 800c4f4:	2800      	cmp	r0, #0
 800c4f6:	dc03      	bgt.n	800c500 <_dtoa_r+0xab0>
 800c4f8:	d1e1      	bne.n	800c4be <_dtoa_r+0xa6e>
 800c4fa:	f019 0f01 	tst.w	r9, #1
 800c4fe:	d0de      	beq.n	800c4be <_dtoa_r+0xa6e>
 800c500:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c504:	d1d8      	bne.n	800c4b8 <_dtoa_r+0xa68>
 800c506:	9a01      	ldr	r2, [sp, #4]
 800c508:	2339      	movs	r3, #57	; 0x39
 800c50a:	7013      	strb	r3, [r2, #0]
 800c50c:	462b      	mov	r3, r5
 800c50e:	461d      	mov	r5, r3
 800c510:	3b01      	subs	r3, #1
 800c512:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c516:	2a39      	cmp	r2, #57	; 0x39
 800c518:	d06c      	beq.n	800c5f4 <_dtoa_r+0xba4>
 800c51a:	3201      	adds	r2, #1
 800c51c:	701a      	strb	r2, [r3, #0]
 800c51e:	e747      	b.n	800c3b0 <_dtoa_r+0x960>
 800c520:	2a00      	cmp	r2, #0
 800c522:	dd07      	ble.n	800c534 <_dtoa_r+0xae4>
 800c524:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c528:	d0ed      	beq.n	800c506 <_dtoa_r+0xab6>
 800c52a:	9a01      	ldr	r2, [sp, #4]
 800c52c:	f109 0301 	add.w	r3, r9, #1
 800c530:	7013      	strb	r3, [r2, #0]
 800c532:	e73d      	b.n	800c3b0 <_dtoa_r+0x960>
 800c534:	9b04      	ldr	r3, [sp, #16]
 800c536:	9a08      	ldr	r2, [sp, #32]
 800c538:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d043      	beq.n	800c5c8 <_dtoa_r+0xb78>
 800c540:	4651      	mov	r1, sl
 800c542:	2300      	movs	r3, #0
 800c544:	220a      	movs	r2, #10
 800c546:	4620      	mov	r0, r4
 800c548:	f000 f9d6 	bl	800c8f8 <__multadd>
 800c54c:	45b8      	cmp	r8, r7
 800c54e:	4682      	mov	sl, r0
 800c550:	f04f 0300 	mov.w	r3, #0
 800c554:	f04f 020a 	mov.w	r2, #10
 800c558:	4641      	mov	r1, r8
 800c55a:	4620      	mov	r0, r4
 800c55c:	d107      	bne.n	800c56e <_dtoa_r+0xb1e>
 800c55e:	f000 f9cb 	bl	800c8f8 <__multadd>
 800c562:	4680      	mov	r8, r0
 800c564:	4607      	mov	r7, r0
 800c566:	9b04      	ldr	r3, [sp, #16]
 800c568:	3301      	adds	r3, #1
 800c56a:	9304      	str	r3, [sp, #16]
 800c56c:	e775      	b.n	800c45a <_dtoa_r+0xa0a>
 800c56e:	f000 f9c3 	bl	800c8f8 <__multadd>
 800c572:	4639      	mov	r1, r7
 800c574:	4680      	mov	r8, r0
 800c576:	2300      	movs	r3, #0
 800c578:	220a      	movs	r2, #10
 800c57a:	4620      	mov	r0, r4
 800c57c:	f000 f9bc 	bl	800c8f8 <__multadd>
 800c580:	4607      	mov	r7, r0
 800c582:	e7f0      	b.n	800c566 <_dtoa_r+0xb16>
 800c584:	9b04      	ldr	r3, [sp, #16]
 800c586:	9301      	str	r3, [sp, #4]
 800c588:	9d00      	ldr	r5, [sp, #0]
 800c58a:	4631      	mov	r1, r6
 800c58c:	4650      	mov	r0, sl
 800c58e:	f7ff f9d7 	bl	800b940 <quorem>
 800c592:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c596:	9b00      	ldr	r3, [sp, #0]
 800c598:	f805 9b01 	strb.w	r9, [r5], #1
 800c59c:	1aea      	subs	r2, r5, r3
 800c59e:	9b01      	ldr	r3, [sp, #4]
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	dd07      	ble.n	800c5b4 <_dtoa_r+0xb64>
 800c5a4:	4651      	mov	r1, sl
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	220a      	movs	r2, #10
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	f000 f9a4 	bl	800c8f8 <__multadd>
 800c5b0:	4682      	mov	sl, r0
 800c5b2:	e7ea      	b.n	800c58a <_dtoa_r+0xb3a>
 800c5b4:	9b01      	ldr	r3, [sp, #4]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	bfc8      	it	gt
 800c5ba:	461d      	movgt	r5, r3
 800c5bc:	9b00      	ldr	r3, [sp, #0]
 800c5be:	bfd8      	it	le
 800c5c0:	2501      	movle	r5, #1
 800c5c2:	441d      	add	r5, r3
 800c5c4:	f04f 0800 	mov.w	r8, #0
 800c5c8:	4651      	mov	r1, sl
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f000 fb41 	bl	800cc54 <__lshift>
 800c5d2:	4631      	mov	r1, r6
 800c5d4:	4682      	mov	sl, r0
 800c5d6:	f000 fba9 	bl	800cd2c <__mcmp>
 800c5da:	2800      	cmp	r0, #0
 800c5dc:	dc96      	bgt.n	800c50c <_dtoa_r+0xabc>
 800c5de:	d102      	bne.n	800c5e6 <_dtoa_r+0xb96>
 800c5e0:	f019 0f01 	tst.w	r9, #1
 800c5e4:	d192      	bne.n	800c50c <_dtoa_r+0xabc>
 800c5e6:	462b      	mov	r3, r5
 800c5e8:	461d      	mov	r5, r3
 800c5ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5ee:	2a30      	cmp	r2, #48	; 0x30
 800c5f0:	d0fa      	beq.n	800c5e8 <_dtoa_r+0xb98>
 800c5f2:	e6dd      	b.n	800c3b0 <_dtoa_r+0x960>
 800c5f4:	9a00      	ldr	r2, [sp, #0]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d189      	bne.n	800c50e <_dtoa_r+0xabe>
 800c5fa:	f10b 0b01 	add.w	fp, fp, #1
 800c5fe:	2331      	movs	r3, #49	; 0x31
 800c600:	e796      	b.n	800c530 <_dtoa_r+0xae0>
 800c602:	4b0a      	ldr	r3, [pc, #40]	; (800c62c <_dtoa_r+0xbdc>)
 800c604:	f7ff ba99 	b.w	800bb3a <_dtoa_r+0xea>
 800c608:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	f47f aa6d 	bne.w	800baea <_dtoa_r+0x9a>
 800c610:	4b07      	ldr	r3, [pc, #28]	; (800c630 <_dtoa_r+0xbe0>)
 800c612:	f7ff ba92 	b.w	800bb3a <_dtoa_r+0xea>
 800c616:	9b01      	ldr	r3, [sp, #4]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	dcb5      	bgt.n	800c588 <_dtoa_r+0xb38>
 800c61c:	9b07      	ldr	r3, [sp, #28]
 800c61e:	2b02      	cmp	r3, #2
 800c620:	f73f aeb1 	bgt.w	800c386 <_dtoa_r+0x936>
 800c624:	e7b0      	b.n	800c588 <_dtoa_r+0xb38>
 800c626:	bf00      	nop
 800c628:	0800dd30 	.word	0x0800dd30
 800c62c:	0800dc90 	.word	0x0800dc90
 800c630:	0800dcb4 	.word	0x0800dcb4

0800c634 <_free_r>:
 800c634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c636:	2900      	cmp	r1, #0
 800c638:	d044      	beq.n	800c6c4 <_free_r+0x90>
 800c63a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c63e:	9001      	str	r0, [sp, #4]
 800c640:	2b00      	cmp	r3, #0
 800c642:	f1a1 0404 	sub.w	r4, r1, #4
 800c646:	bfb8      	it	lt
 800c648:	18e4      	addlt	r4, r4, r3
 800c64a:	f000 f8e7 	bl	800c81c <__malloc_lock>
 800c64e:	4a1e      	ldr	r2, [pc, #120]	; (800c6c8 <_free_r+0x94>)
 800c650:	9801      	ldr	r0, [sp, #4]
 800c652:	6813      	ldr	r3, [r2, #0]
 800c654:	b933      	cbnz	r3, 800c664 <_free_r+0x30>
 800c656:	6063      	str	r3, [r4, #4]
 800c658:	6014      	str	r4, [r2, #0]
 800c65a:	b003      	add	sp, #12
 800c65c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c660:	f000 b8e2 	b.w	800c828 <__malloc_unlock>
 800c664:	42a3      	cmp	r3, r4
 800c666:	d908      	bls.n	800c67a <_free_r+0x46>
 800c668:	6825      	ldr	r5, [r4, #0]
 800c66a:	1961      	adds	r1, r4, r5
 800c66c:	428b      	cmp	r3, r1
 800c66e:	bf01      	itttt	eq
 800c670:	6819      	ldreq	r1, [r3, #0]
 800c672:	685b      	ldreq	r3, [r3, #4]
 800c674:	1949      	addeq	r1, r1, r5
 800c676:	6021      	streq	r1, [r4, #0]
 800c678:	e7ed      	b.n	800c656 <_free_r+0x22>
 800c67a:	461a      	mov	r2, r3
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	b10b      	cbz	r3, 800c684 <_free_r+0x50>
 800c680:	42a3      	cmp	r3, r4
 800c682:	d9fa      	bls.n	800c67a <_free_r+0x46>
 800c684:	6811      	ldr	r1, [r2, #0]
 800c686:	1855      	adds	r5, r2, r1
 800c688:	42a5      	cmp	r5, r4
 800c68a:	d10b      	bne.n	800c6a4 <_free_r+0x70>
 800c68c:	6824      	ldr	r4, [r4, #0]
 800c68e:	4421      	add	r1, r4
 800c690:	1854      	adds	r4, r2, r1
 800c692:	42a3      	cmp	r3, r4
 800c694:	6011      	str	r1, [r2, #0]
 800c696:	d1e0      	bne.n	800c65a <_free_r+0x26>
 800c698:	681c      	ldr	r4, [r3, #0]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	6053      	str	r3, [r2, #4]
 800c69e:	440c      	add	r4, r1
 800c6a0:	6014      	str	r4, [r2, #0]
 800c6a2:	e7da      	b.n	800c65a <_free_r+0x26>
 800c6a4:	d902      	bls.n	800c6ac <_free_r+0x78>
 800c6a6:	230c      	movs	r3, #12
 800c6a8:	6003      	str	r3, [r0, #0]
 800c6aa:	e7d6      	b.n	800c65a <_free_r+0x26>
 800c6ac:	6825      	ldr	r5, [r4, #0]
 800c6ae:	1961      	adds	r1, r4, r5
 800c6b0:	428b      	cmp	r3, r1
 800c6b2:	bf04      	itt	eq
 800c6b4:	6819      	ldreq	r1, [r3, #0]
 800c6b6:	685b      	ldreq	r3, [r3, #4]
 800c6b8:	6063      	str	r3, [r4, #4]
 800c6ba:	bf04      	itt	eq
 800c6bc:	1949      	addeq	r1, r1, r5
 800c6be:	6021      	streq	r1, [r4, #0]
 800c6c0:	6054      	str	r4, [r2, #4]
 800c6c2:	e7ca      	b.n	800c65a <_free_r+0x26>
 800c6c4:	b003      	add	sp, #12
 800c6c6:	bd30      	pop	{r4, r5, pc}
 800c6c8:	20002818 	.word	0x20002818

0800c6cc <malloc>:
 800c6cc:	4b02      	ldr	r3, [pc, #8]	; (800c6d8 <malloc+0xc>)
 800c6ce:	4601      	mov	r1, r0
 800c6d0:	6818      	ldr	r0, [r3, #0]
 800c6d2:	f000 b823 	b.w	800c71c <_malloc_r>
 800c6d6:	bf00      	nop
 800c6d8:	20000120 	.word	0x20000120

0800c6dc <sbrk_aligned>:
 800c6dc:	b570      	push	{r4, r5, r6, lr}
 800c6de:	4e0e      	ldr	r6, [pc, #56]	; (800c718 <sbrk_aligned+0x3c>)
 800c6e0:	460c      	mov	r4, r1
 800c6e2:	6831      	ldr	r1, [r6, #0]
 800c6e4:	4605      	mov	r5, r0
 800c6e6:	b911      	cbnz	r1, 800c6ee <sbrk_aligned+0x12>
 800c6e8:	f000 feda 	bl	800d4a0 <_sbrk_r>
 800c6ec:	6030      	str	r0, [r6, #0]
 800c6ee:	4621      	mov	r1, r4
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	f000 fed5 	bl	800d4a0 <_sbrk_r>
 800c6f6:	1c43      	adds	r3, r0, #1
 800c6f8:	d00a      	beq.n	800c710 <sbrk_aligned+0x34>
 800c6fa:	1cc4      	adds	r4, r0, #3
 800c6fc:	f024 0403 	bic.w	r4, r4, #3
 800c700:	42a0      	cmp	r0, r4
 800c702:	d007      	beq.n	800c714 <sbrk_aligned+0x38>
 800c704:	1a21      	subs	r1, r4, r0
 800c706:	4628      	mov	r0, r5
 800c708:	f000 feca 	bl	800d4a0 <_sbrk_r>
 800c70c:	3001      	adds	r0, #1
 800c70e:	d101      	bne.n	800c714 <sbrk_aligned+0x38>
 800c710:	f04f 34ff 	mov.w	r4, #4294967295
 800c714:	4620      	mov	r0, r4
 800c716:	bd70      	pop	{r4, r5, r6, pc}
 800c718:	2000281c 	.word	0x2000281c

0800c71c <_malloc_r>:
 800c71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c720:	1ccd      	adds	r5, r1, #3
 800c722:	f025 0503 	bic.w	r5, r5, #3
 800c726:	3508      	adds	r5, #8
 800c728:	2d0c      	cmp	r5, #12
 800c72a:	bf38      	it	cc
 800c72c:	250c      	movcc	r5, #12
 800c72e:	2d00      	cmp	r5, #0
 800c730:	4607      	mov	r7, r0
 800c732:	db01      	blt.n	800c738 <_malloc_r+0x1c>
 800c734:	42a9      	cmp	r1, r5
 800c736:	d905      	bls.n	800c744 <_malloc_r+0x28>
 800c738:	230c      	movs	r3, #12
 800c73a:	603b      	str	r3, [r7, #0]
 800c73c:	2600      	movs	r6, #0
 800c73e:	4630      	mov	r0, r6
 800c740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c744:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c818 <_malloc_r+0xfc>
 800c748:	f000 f868 	bl	800c81c <__malloc_lock>
 800c74c:	f8d8 3000 	ldr.w	r3, [r8]
 800c750:	461c      	mov	r4, r3
 800c752:	bb5c      	cbnz	r4, 800c7ac <_malloc_r+0x90>
 800c754:	4629      	mov	r1, r5
 800c756:	4638      	mov	r0, r7
 800c758:	f7ff ffc0 	bl	800c6dc <sbrk_aligned>
 800c75c:	1c43      	adds	r3, r0, #1
 800c75e:	4604      	mov	r4, r0
 800c760:	d155      	bne.n	800c80e <_malloc_r+0xf2>
 800c762:	f8d8 4000 	ldr.w	r4, [r8]
 800c766:	4626      	mov	r6, r4
 800c768:	2e00      	cmp	r6, #0
 800c76a:	d145      	bne.n	800c7f8 <_malloc_r+0xdc>
 800c76c:	2c00      	cmp	r4, #0
 800c76e:	d048      	beq.n	800c802 <_malloc_r+0xe6>
 800c770:	6823      	ldr	r3, [r4, #0]
 800c772:	4631      	mov	r1, r6
 800c774:	4638      	mov	r0, r7
 800c776:	eb04 0903 	add.w	r9, r4, r3
 800c77a:	f000 fe91 	bl	800d4a0 <_sbrk_r>
 800c77e:	4581      	cmp	r9, r0
 800c780:	d13f      	bne.n	800c802 <_malloc_r+0xe6>
 800c782:	6821      	ldr	r1, [r4, #0]
 800c784:	1a6d      	subs	r5, r5, r1
 800c786:	4629      	mov	r1, r5
 800c788:	4638      	mov	r0, r7
 800c78a:	f7ff ffa7 	bl	800c6dc <sbrk_aligned>
 800c78e:	3001      	adds	r0, #1
 800c790:	d037      	beq.n	800c802 <_malloc_r+0xe6>
 800c792:	6823      	ldr	r3, [r4, #0]
 800c794:	442b      	add	r3, r5
 800c796:	6023      	str	r3, [r4, #0]
 800c798:	f8d8 3000 	ldr.w	r3, [r8]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d038      	beq.n	800c812 <_malloc_r+0xf6>
 800c7a0:	685a      	ldr	r2, [r3, #4]
 800c7a2:	42a2      	cmp	r2, r4
 800c7a4:	d12b      	bne.n	800c7fe <_malloc_r+0xe2>
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	605a      	str	r2, [r3, #4]
 800c7aa:	e00f      	b.n	800c7cc <_malloc_r+0xb0>
 800c7ac:	6822      	ldr	r2, [r4, #0]
 800c7ae:	1b52      	subs	r2, r2, r5
 800c7b0:	d41f      	bmi.n	800c7f2 <_malloc_r+0xd6>
 800c7b2:	2a0b      	cmp	r2, #11
 800c7b4:	d917      	bls.n	800c7e6 <_malloc_r+0xca>
 800c7b6:	1961      	adds	r1, r4, r5
 800c7b8:	42a3      	cmp	r3, r4
 800c7ba:	6025      	str	r5, [r4, #0]
 800c7bc:	bf18      	it	ne
 800c7be:	6059      	strne	r1, [r3, #4]
 800c7c0:	6863      	ldr	r3, [r4, #4]
 800c7c2:	bf08      	it	eq
 800c7c4:	f8c8 1000 	streq.w	r1, [r8]
 800c7c8:	5162      	str	r2, [r4, r5]
 800c7ca:	604b      	str	r3, [r1, #4]
 800c7cc:	4638      	mov	r0, r7
 800c7ce:	f104 060b 	add.w	r6, r4, #11
 800c7d2:	f000 f829 	bl	800c828 <__malloc_unlock>
 800c7d6:	f026 0607 	bic.w	r6, r6, #7
 800c7da:	1d23      	adds	r3, r4, #4
 800c7dc:	1af2      	subs	r2, r6, r3
 800c7de:	d0ae      	beq.n	800c73e <_malloc_r+0x22>
 800c7e0:	1b9b      	subs	r3, r3, r6
 800c7e2:	50a3      	str	r3, [r4, r2]
 800c7e4:	e7ab      	b.n	800c73e <_malloc_r+0x22>
 800c7e6:	42a3      	cmp	r3, r4
 800c7e8:	6862      	ldr	r2, [r4, #4]
 800c7ea:	d1dd      	bne.n	800c7a8 <_malloc_r+0x8c>
 800c7ec:	f8c8 2000 	str.w	r2, [r8]
 800c7f0:	e7ec      	b.n	800c7cc <_malloc_r+0xb0>
 800c7f2:	4623      	mov	r3, r4
 800c7f4:	6864      	ldr	r4, [r4, #4]
 800c7f6:	e7ac      	b.n	800c752 <_malloc_r+0x36>
 800c7f8:	4634      	mov	r4, r6
 800c7fa:	6876      	ldr	r6, [r6, #4]
 800c7fc:	e7b4      	b.n	800c768 <_malloc_r+0x4c>
 800c7fe:	4613      	mov	r3, r2
 800c800:	e7cc      	b.n	800c79c <_malloc_r+0x80>
 800c802:	230c      	movs	r3, #12
 800c804:	603b      	str	r3, [r7, #0]
 800c806:	4638      	mov	r0, r7
 800c808:	f000 f80e 	bl	800c828 <__malloc_unlock>
 800c80c:	e797      	b.n	800c73e <_malloc_r+0x22>
 800c80e:	6025      	str	r5, [r4, #0]
 800c810:	e7dc      	b.n	800c7cc <_malloc_r+0xb0>
 800c812:	605b      	str	r3, [r3, #4]
 800c814:	deff      	udf	#255	; 0xff
 800c816:	bf00      	nop
 800c818:	20002818 	.word	0x20002818

0800c81c <__malloc_lock>:
 800c81c:	4801      	ldr	r0, [pc, #4]	; (800c824 <__malloc_lock+0x8>)
 800c81e:	f7ff b878 	b.w	800b912 <__retarget_lock_acquire_recursive>
 800c822:	bf00      	nop
 800c824:	20002814 	.word	0x20002814

0800c828 <__malloc_unlock>:
 800c828:	4801      	ldr	r0, [pc, #4]	; (800c830 <__malloc_unlock+0x8>)
 800c82a:	f7ff b873 	b.w	800b914 <__retarget_lock_release_recursive>
 800c82e:	bf00      	nop
 800c830:	20002814 	.word	0x20002814

0800c834 <_Balloc>:
 800c834:	b570      	push	{r4, r5, r6, lr}
 800c836:	69c6      	ldr	r6, [r0, #28]
 800c838:	4604      	mov	r4, r0
 800c83a:	460d      	mov	r5, r1
 800c83c:	b976      	cbnz	r6, 800c85c <_Balloc+0x28>
 800c83e:	2010      	movs	r0, #16
 800c840:	f7ff ff44 	bl	800c6cc <malloc>
 800c844:	4602      	mov	r2, r0
 800c846:	61e0      	str	r0, [r4, #28]
 800c848:	b920      	cbnz	r0, 800c854 <_Balloc+0x20>
 800c84a:	4b18      	ldr	r3, [pc, #96]	; (800c8ac <_Balloc+0x78>)
 800c84c:	4818      	ldr	r0, [pc, #96]	; (800c8b0 <_Balloc+0x7c>)
 800c84e:	216b      	movs	r1, #107	; 0x6b
 800c850:	f7fe f944 	bl	800aadc <__assert_func>
 800c854:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c858:	6006      	str	r6, [r0, #0]
 800c85a:	60c6      	str	r6, [r0, #12]
 800c85c:	69e6      	ldr	r6, [r4, #28]
 800c85e:	68f3      	ldr	r3, [r6, #12]
 800c860:	b183      	cbz	r3, 800c884 <_Balloc+0x50>
 800c862:	69e3      	ldr	r3, [r4, #28]
 800c864:	68db      	ldr	r3, [r3, #12]
 800c866:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c86a:	b9b8      	cbnz	r0, 800c89c <_Balloc+0x68>
 800c86c:	2101      	movs	r1, #1
 800c86e:	fa01 f605 	lsl.w	r6, r1, r5
 800c872:	1d72      	adds	r2, r6, #5
 800c874:	0092      	lsls	r2, r2, #2
 800c876:	4620      	mov	r0, r4
 800c878:	f000 fe22 	bl	800d4c0 <_calloc_r>
 800c87c:	b160      	cbz	r0, 800c898 <_Balloc+0x64>
 800c87e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c882:	e00e      	b.n	800c8a2 <_Balloc+0x6e>
 800c884:	2221      	movs	r2, #33	; 0x21
 800c886:	2104      	movs	r1, #4
 800c888:	4620      	mov	r0, r4
 800c88a:	f000 fe19 	bl	800d4c0 <_calloc_r>
 800c88e:	69e3      	ldr	r3, [r4, #28]
 800c890:	60f0      	str	r0, [r6, #12]
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d1e4      	bne.n	800c862 <_Balloc+0x2e>
 800c898:	2000      	movs	r0, #0
 800c89a:	bd70      	pop	{r4, r5, r6, pc}
 800c89c:	6802      	ldr	r2, [r0, #0]
 800c89e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c8a8:	e7f7      	b.n	800c89a <_Balloc+0x66>
 800c8aa:	bf00      	nop
 800c8ac:	0800dcc1 	.word	0x0800dcc1
 800c8b0:	0800dd41 	.word	0x0800dd41

0800c8b4 <_Bfree>:
 800c8b4:	b570      	push	{r4, r5, r6, lr}
 800c8b6:	69c6      	ldr	r6, [r0, #28]
 800c8b8:	4605      	mov	r5, r0
 800c8ba:	460c      	mov	r4, r1
 800c8bc:	b976      	cbnz	r6, 800c8dc <_Bfree+0x28>
 800c8be:	2010      	movs	r0, #16
 800c8c0:	f7ff ff04 	bl	800c6cc <malloc>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	61e8      	str	r0, [r5, #28]
 800c8c8:	b920      	cbnz	r0, 800c8d4 <_Bfree+0x20>
 800c8ca:	4b09      	ldr	r3, [pc, #36]	; (800c8f0 <_Bfree+0x3c>)
 800c8cc:	4809      	ldr	r0, [pc, #36]	; (800c8f4 <_Bfree+0x40>)
 800c8ce:	218f      	movs	r1, #143	; 0x8f
 800c8d0:	f7fe f904 	bl	800aadc <__assert_func>
 800c8d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c8d8:	6006      	str	r6, [r0, #0]
 800c8da:	60c6      	str	r6, [r0, #12]
 800c8dc:	b13c      	cbz	r4, 800c8ee <_Bfree+0x3a>
 800c8de:	69eb      	ldr	r3, [r5, #28]
 800c8e0:	6862      	ldr	r2, [r4, #4]
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8e8:	6021      	str	r1, [r4, #0]
 800c8ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c8ee:	bd70      	pop	{r4, r5, r6, pc}
 800c8f0:	0800dcc1 	.word	0x0800dcc1
 800c8f4:	0800dd41 	.word	0x0800dd41

0800c8f8 <__multadd>:
 800c8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8fc:	690d      	ldr	r5, [r1, #16]
 800c8fe:	4607      	mov	r7, r0
 800c900:	460c      	mov	r4, r1
 800c902:	461e      	mov	r6, r3
 800c904:	f101 0c14 	add.w	ip, r1, #20
 800c908:	2000      	movs	r0, #0
 800c90a:	f8dc 3000 	ldr.w	r3, [ip]
 800c90e:	b299      	uxth	r1, r3
 800c910:	fb02 6101 	mla	r1, r2, r1, r6
 800c914:	0c1e      	lsrs	r6, r3, #16
 800c916:	0c0b      	lsrs	r3, r1, #16
 800c918:	fb02 3306 	mla	r3, r2, r6, r3
 800c91c:	b289      	uxth	r1, r1
 800c91e:	3001      	adds	r0, #1
 800c920:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c924:	4285      	cmp	r5, r0
 800c926:	f84c 1b04 	str.w	r1, [ip], #4
 800c92a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c92e:	dcec      	bgt.n	800c90a <__multadd+0x12>
 800c930:	b30e      	cbz	r6, 800c976 <__multadd+0x7e>
 800c932:	68a3      	ldr	r3, [r4, #8]
 800c934:	42ab      	cmp	r3, r5
 800c936:	dc19      	bgt.n	800c96c <__multadd+0x74>
 800c938:	6861      	ldr	r1, [r4, #4]
 800c93a:	4638      	mov	r0, r7
 800c93c:	3101      	adds	r1, #1
 800c93e:	f7ff ff79 	bl	800c834 <_Balloc>
 800c942:	4680      	mov	r8, r0
 800c944:	b928      	cbnz	r0, 800c952 <__multadd+0x5a>
 800c946:	4602      	mov	r2, r0
 800c948:	4b0c      	ldr	r3, [pc, #48]	; (800c97c <__multadd+0x84>)
 800c94a:	480d      	ldr	r0, [pc, #52]	; (800c980 <__multadd+0x88>)
 800c94c:	21ba      	movs	r1, #186	; 0xba
 800c94e:	f7fe f8c5 	bl	800aadc <__assert_func>
 800c952:	6922      	ldr	r2, [r4, #16]
 800c954:	3202      	adds	r2, #2
 800c956:	f104 010c 	add.w	r1, r4, #12
 800c95a:	0092      	lsls	r2, r2, #2
 800c95c:	300c      	adds	r0, #12
 800c95e:	f7fe ffda 	bl	800b916 <memcpy>
 800c962:	4621      	mov	r1, r4
 800c964:	4638      	mov	r0, r7
 800c966:	f7ff ffa5 	bl	800c8b4 <_Bfree>
 800c96a:	4644      	mov	r4, r8
 800c96c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c970:	3501      	adds	r5, #1
 800c972:	615e      	str	r6, [r3, #20]
 800c974:	6125      	str	r5, [r4, #16]
 800c976:	4620      	mov	r0, r4
 800c978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c97c:	0800dd30 	.word	0x0800dd30
 800c980:	0800dd41 	.word	0x0800dd41

0800c984 <__hi0bits>:
 800c984:	0c03      	lsrs	r3, r0, #16
 800c986:	041b      	lsls	r3, r3, #16
 800c988:	b9d3      	cbnz	r3, 800c9c0 <__hi0bits+0x3c>
 800c98a:	0400      	lsls	r0, r0, #16
 800c98c:	2310      	movs	r3, #16
 800c98e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c992:	bf04      	itt	eq
 800c994:	0200      	lsleq	r0, r0, #8
 800c996:	3308      	addeq	r3, #8
 800c998:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c99c:	bf04      	itt	eq
 800c99e:	0100      	lsleq	r0, r0, #4
 800c9a0:	3304      	addeq	r3, #4
 800c9a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c9a6:	bf04      	itt	eq
 800c9a8:	0080      	lsleq	r0, r0, #2
 800c9aa:	3302      	addeq	r3, #2
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	db05      	blt.n	800c9bc <__hi0bits+0x38>
 800c9b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c9b4:	f103 0301 	add.w	r3, r3, #1
 800c9b8:	bf08      	it	eq
 800c9ba:	2320      	moveq	r3, #32
 800c9bc:	4618      	mov	r0, r3
 800c9be:	4770      	bx	lr
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	e7e4      	b.n	800c98e <__hi0bits+0xa>

0800c9c4 <__lo0bits>:
 800c9c4:	6803      	ldr	r3, [r0, #0]
 800c9c6:	f013 0207 	ands.w	r2, r3, #7
 800c9ca:	d00c      	beq.n	800c9e6 <__lo0bits+0x22>
 800c9cc:	07d9      	lsls	r1, r3, #31
 800c9ce:	d422      	bmi.n	800ca16 <__lo0bits+0x52>
 800c9d0:	079a      	lsls	r2, r3, #30
 800c9d2:	bf49      	itett	mi
 800c9d4:	085b      	lsrmi	r3, r3, #1
 800c9d6:	089b      	lsrpl	r3, r3, #2
 800c9d8:	6003      	strmi	r3, [r0, #0]
 800c9da:	2201      	movmi	r2, #1
 800c9dc:	bf5c      	itt	pl
 800c9de:	6003      	strpl	r3, [r0, #0]
 800c9e0:	2202      	movpl	r2, #2
 800c9e2:	4610      	mov	r0, r2
 800c9e4:	4770      	bx	lr
 800c9e6:	b299      	uxth	r1, r3
 800c9e8:	b909      	cbnz	r1, 800c9ee <__lo0bits+0x2a>
 800c9ea:	0c1b      	lsrs	r3, r3, #16
 800c9ec:	2210      	movs	r2, #16
 800c9ee:	b2d9      	uxtb	r1, r3
 800c9f0:	b909      	cbnz	r1, 800c9f6 <__lo0bits+0x32>
 800c9f2:	3208      	adds	r2, #8
 800c9f4:	0a1b      	lsrs	r3, r3, #8
 800c9f6:	0719      	lsls	r1, r3, #28
 800c9f8:	bf04      	itt	eq
 800c9fa:	091b      	lsreq	r3, r3, #4
 800c9fc:	3204      	addeq	r2, #4
 800c9fe:	0799      	lsls	r1, r3, #30
 800ca00:	bf04      	itt	eq
 800ca02:	089b      	lsreq	r3, r3, #2
 800ca04:	3202      	addeq	r2, #2
 800ca06:	07d9      	lsls	r1, r3, #31
 800ca08:	d403      	bmi.n	800ca12 <__lo0bits+0x4e>
 800ca0a:	085b      	lsrs	r3, r3, #1
 800ca0c:	f102 0201 	add.w	r2, r2, #1
 800ca10:	d003      	beq.n	800ca1a <__lo0bits+0x56>
 800ca12:	6003      	str	r3, [r0, #0]
 800ca14:	e7e5      	b.n	800c9e2 <__lo0bits+0x1e>
 800ca16:	2200      	movs	r2, #0
 800ca18:	e7e3      	b.n	800c9e2 <__lo0bits+0x1e>
 800ca1a:	2220      	movs	r2, #32
 800ca1c:	e7e1      	b.n	800c9e2 <__lo0bits+0x1e>
	...

0800ca20 <__i2b>:
 800ca20:	b510      	push	{r4, lr}
 800ca22:	460c      	mov	r4, r1
 800ca24:	2101      	movs	r1, #1
 800ca26:	f7ff ff05 	bl	800c834 <_Balloc>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	b928      	cbnz	r0, 800ca3a <__i2b+0x1a>
 800ca2e:	4b05      	ldr	r3, [pc, #20]	; (800ca44 <__i2b+0x24>)
 800ca30:	4805      	ldr	r0, [pc, #20]	; (800ca48 <__i2b+0x28>)
 800ca32:	f240 1145 	movw	r1, #325	; 0x145
 800ca36:	f7fe f851 	bl	800aadc <__assert_func>
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	6144      	str	r4, [r0, #20]
 800ca3e:	6103      	str	r3, [r0, #16]
 800ca40:	bd10      	pop	{r4, pc}
 800ca42:	bf00      	nop
 800ca44:	0800dd30 	.word	0x0800dd30
 800ca48:	0800dd41 	.word	0x0800dd41

0800ca4c <__multiply>:
 800ca4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca50:	4691      	mov	r9, r2
 800ca52:	690a      	ldr	r2, [r1, #16]
 800ca54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	bfb8      	it	lt
 800ca5c:	460b      	movlt	r3, r1
 800ca5e:	460c      	mov	r4, r1
 800ca60:	bfbc      	itt	lt
 800ca62:	464c      	movlt	r4, r9
 800ca64:	4699      	movlt	r9, r3
 800ca66:	6927      	ldr	r7, [r4, #16]
 800ca68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ca6c:	68a3      	ldr	r3, [r4, #8]
 800ca6e:	6861      	ldr	r1, [r4, #4]
 800ca70:	eb07 060a 	add.w	r6, r7, sl
 800ca74:	42b3      	cmp	r3, r6
 800ca76:	b085      	sub	sp, #20
 800ca78:	bfb8      	it	lt
 800ca7a:	3101      	addlt	r1, #1
 800ca7c:	f7ff feda 	bl	800c834 <_Balloc>
 800ca80:	b930      	cbnz	r0, 800ca90 <__multiply+0x44>
 800ca82:	4602      	mov	r2, r0
 800ca84:	4b44      	ldr	r3, [pc, #272]	; (800cb98 <__multiply+0x14c>)
 800ca86:	4845      	ldr	r0, [pc, #276]	; (800cb9c <__multiply+0x150>)
 800ca88:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ca8c:	f7fe f826 	bl	800aadc <__assert_func>
 800ca90:	f100 0514 	add.w	r5, r0, #20
 800ca94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ca98:	462b      	mov	r3, r5
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	4543      	cmp	r3, r8
 800ca9e:	d321      	bcc.n	800cae4 <__multiply+0x98>
 800caa0:	f104 0314 	add.w	r3, r4, #20
 800caa4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800caa8:	f109 0314 	add.w	r3, r9, #20
 800caac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cab0:	9202      	str	r2, [sp, #8]
 800cab2:	1b3a      	subs	r2, r7, r4
 800cab4:	3a15      	subs	r2, #21
 800cab6:	f022 0203 	bic.w	r2, r2, #3
 800caba:	3204      	adds	r2, #4
 800cabc:	f104 0115 	add.w	r1, r4, #21
 800cac0:	428f      	cmp	r7, r1
 800cac2:	bf38      	it	cc
 800cac4:	2204      	movcc	r2, #4
 800cac6:	9201      	str	r2, [sp, #4]
 800cac8:	9a02      	ldr	r2, [sp, #8]
 800caca:	9303      	str	r3, [sp, #12]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d80c      	bhi.n	800caea <__multiply+0x9e>
 800cad0:	2e00      	cmp	r6, #0
 800cad2:	dd03      	ble.n	800cadc <__multiply+0x90>
 800cad4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d05b      	beq.n	800cb94 <__multiply+0x148>
 800cadc:	6106      	str	r6, [r0, #16]
 800cade:	b005      	add	sp, #20
 800cae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae4:	f843 2b04 	str.w	r2, [r3], #4
 800cae8:	e7d8      	b.n	800ca9c <__multiply+0x50>
 800caea:	f8b3 a000 	ldrh.w	sl, [r3]
 800caee:	f1ba 0f00 	cmp.w	sl, #0
 800caf2:	d024      	beq.n	800cb3e <__multiply+0xf2>
 800caf4:	f104 0e14 	add.w	lr, r4, #20
 800caf8:	46a9      	mov	r9, r5
 800cafa:	f04f 0c00 	mov.w	ip, #0
 800cafe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cb02:	f8d9 1000 	ldr.w	r1, [r9]
 800cb06:	fa1f fb82 	uxth.w	fp, r2
 800cb0a:	b289      	uxth	r1, r1
 800cb0c:	fb0a 110b 	mla	r1, sl, fp, r1
 800cb10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cb14:	f8d9 2000 	ldr.w	r2, [r9]
 800cb18:	4461      	add	r1, ip
 800cb1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cb1e:	fb0a c20b 	mla	r2, sl, fp, ip
 800cb22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cb26:	b289      	uxth	r1, r1
 800cb28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cb2c:	4577      	cmp	r7, lr
 800cb2e:	f849 1b04 	str.w	r1, [r9], #4
 800cb32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cb36:	d8e2      	bhi.n	800cafe <__multiply+0xb2>
 800cb38:	9a01      	ldr	r2, [sp, #4]
 800cb3a:	f845 c002 	str.w	ip, [r5, r2]
 800cb3e:	9a03      	ldr	r2, [sp, #12]
 800cb40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cb44:	3304      	adds	r3, #4
 800cb46:	f1b9 0f00 	cmp.w	r9, #0
 800cb4a:	d021      	beq.n	800cb90 <__multiply+0x144>
 800cb4c:	6829      	ldr	r1, [r5, #0]
 800cb4e:	f104 0c14 	add.w	ip, r4, #20
 800cb52:	46ae      	mov	lr, r5
 800cb54:	f04f 0a00 	mov.w	sl, #0
 800cb58:	f8bc b000 	ldrh.w	fp, [ip]
 800cb5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cb60:	fb09 220b 	mla	r2, r9, fp, r2
 800cb64:	4452      	add	r2, sl
 800cb66:	b289      	uxth	r1, r1
 800cb68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cb6c:	f84e 1b04 	str.w	r1, [lr], #4
 800cb70:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cb74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cb78:	f8be 1000 	ldrh.w	r1, [lr]
 800cb7c:	fb09 110a 	mla	r1, r9, sl, r1
 800cb80:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800cb84:	4567      	cmp	r7, ip
 800cb86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cb8a:	d8e5      	bhi.n	800cb58 <__multiply+0x10c>
 800cb8c:	9a01      	ldr	r2, [sp, #4]
 800cb8e:	50a9      	str	r1, [r5, r2]
 800cb90:	3504      	adds	r5, #4
 800cb92:	e799      	b.n	800cac8 <__multiply+0x7c>
 800cb94:	3e01      	subs	r6, #1
 800cb96:	e79b      	b.n	800cad0 <__multiply+0x84>
 800cb98:	0800dd30 	.word	0x0800dd30
 800cb9c:	0800dd41 	.word	0x0800dd41

0800cba0 <__pow5mult>:
 800cba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cba4:	4615      	mov	r5, r2
 800cba6:	f012 0203 	ands.w	r2, r2, #3
 800cbaa:	4606      	mov	r6, r0
 800cbac:	460f      	mov	r7, r1
 800cbae:	d007      	beq.n	800cbc0 <__pow5mult+0x20>
 800cbb0:	4c25      	ldr	r4, [pc, #148]	; (800cc48 <__pow5mult+0xa8>)
 800cbb2:	3a01      	subs	r2, #1
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cbba:	f7ff fe9d 	bl	800c8f8 <__multadd>
 800cbbe:	4607      	mov	r7, r0
 800cbc0:	10ad      	asrs	r5, r5, #2
 800cbc2:	d03d      	beq.n	800cc40 <__pow5mult+0xa0>
 800cbc4:	69f4      	ldr	r4, [r6, #28]
 800cbc6:	b97c      	cbnz	r4, 800cbe8 <__pow5mult+0x48>
 800cbc8:	2010      	movs	r0, #16
 800cbca:	f7ff fd7f 	bl	800c6cc <malloc>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	61f0      	str	r0, [r6, #28]
 800cbd2:	b928      	cbnz	r0, 800cbe0 <__pow5mult+0x40>
 800cbd4:	4b1d      	ldr	r3, [pc, #116]	; (800cc4c <__pow5mult+0xac>)
 800cbd6:	481e      	ldr	r0, [pc, #120]	; (800cc50 <__pow5mult+0xb0>)
 800cbd8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cbdc:	f7fd ff7e 	bl	800aadc <__assert_func>
 800cbe0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cbe4:	6004      	str	r4, [r0, #0]
 800cbe6:	60c4      	str	r4, [r0, #12]
 800cbe8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cbec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cbf0:	b94c      	cbnz	r4, 800cc06 <__pow5mult+0x66>
 800cbf2:	f240 2171 	movw	r1, #625	; 0x271
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	f7ff ff12 	bl	800ca20 <__i2b>
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc02:	4604      	mov	r4, r0
 800cc04:	6003      	str	r3, [r0, #0]
 800cc06:	f04f 0900 	mov.w	r9, #0
 800cc0a:	07eb      	lsls	r3, r5, #31
 800cc0c:	d50a      	bpl.n	800cc24 <__pow5mult+0x84>
 800cc0e:	4639      	mov	r1, r7
 800cc10:	4622      	mov	r2, r4
 800cc12:	4630      	mov	r0, r6
 800cc14:	f7ff ff1a 	bl	800ca4c <__multiply>
 800cc18:	4639      	mov	r1, r7
 800cc1a:	4680      	mov	r8, r0
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	f7ff fe49 	bl	800c8b4 <_Bfree>
 800cc22:	4647      	mov	r7, r8
 800cc24:	106d      	asrs	r5, r5, #1
 800cc26:	d00b      	beq.n	800cc40 <__pow5mult+0xa0>
 800cc28:	6820      	ldr	r0, [r4, #0]
 800cc2a:	b938      	cbnz	r0, 800cc3c <__pow5mult+0x9c>
 800cc2c:	4622      	mov	r2, r4
 800cc2e:	4621      	mov	r1, r4
 800cc30:	4630      	mov	r0, r6
 800cc32:	f7ff ff0b 	bl	800ca4c <__multiply>
 800cc36:	6020      	str	r0, [r4, #0]
 800cc38:	f8c0 9000 	str.w	r9, [r0]
 800cc3c:	4604      	mov	r4, r0
 800cc3e:	e7e4      	b.n	800cc0a <__pow5mult+0x6a>
 800cc40:	4638      	mov	r0, r7
 800cc42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc46:	bf00      	nop
 800cc48:	0800de90 	.word	0x0800de90
 800cc4c:	0800dcc1 	.word	0x0800dcc1
 800cc50:	0800dd41 	.word	0x0800dd41

0800cc54 <__lshift>:
 800cc54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc58:	460c      	mov	r4, r1
 800cc5a:	6849      	ldr	r1, [r1, #4]
 800cc5c:	6923      	ldr	r3, [r4, #16]
 800cc5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc62:	68a3      	ldr	r3, [r4, #8]
 800cc64:	4607      	mov	r7, r0
 800cc66:	4691      	mov	r9, r2
 800cc68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc6c:	f108 0601 	add.w	r6, r8, #1
 800cc70:	42b3      	cmp	r3, r6
 800cc72:	db0b      	blt.n	800cc8c <__lshift+0x38>
 800cc74:	4638      	mov	r0, r7
 800cc76:	f7ff fddd 	bl	800c834 <_Balloc>
 800cc7a:	4605      	mov	r5, r0
 800cc7c:	b948      	cbnz	r0, 800cc92 <__lshift+0x3e>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	4b28      	ldr	r3, [pc, #160]	; (800cd24 <__lshift+0xd0>)
 800cc82:	4829      	ldr	r0, [pc, #164]	; (800cd28 <__lshift+0xd4>)
 800cc84:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cc88:	f7fd ff28 	bl	800aadc <__assert_func>
 800cc8c:	3101      	adds	r1, #1
 800cc8e:	005b      	lsls	r3, r3, #1
 800cc90:	e7ee      	b.n	800cc70 <__lshift+0x1c>
 800cc92:	2300      	movs	r3, #0
 800cc94:	f100 0114 	add.w	r1, r0, #20
 800cc98:	f100 0210 	add.w	r2, r0, #16
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	4553      	cmp	r3, sl
 800cca0:	db33      	blt.n	800cd0a <__lshift+0xb6>
 800cca2:	6920      	ldr	r0, [r4, #16]
 800cca4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cca8:	f104 0314 	add.w	r3, r4, #20
 800ccac:	f019 091f 	ands.w	r9, r9, #31
 800ccb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ccb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ccb8:	d02b      	beq.n	800cd12 <__lshift+0xbe>
 800ccba:	f1c9 0e20 	rsb	lr, r9, #32
 800ccbe:	468a      	mov	sl, r1
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	6818      	ldr	r0, [r3, #0]
 800ccc4:	fa00 f009 	lsl.w	r0, r0, r9
 800ccc8:	4310      	orrs	r0, r2
 800ccca:	f84a 0b04 	str.w	r0, [sl], #4
 800ccce:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccd2:	459c      	cmp	ip, r3
 800ccd4:	fa22 f20e 	lsr.w	r2, r2, lr
 800ccd8:	d8f3      	bhi.n	800ccc2 <__lshift+0x6e>
 800ccda:	ebac 0304 	sub.w	r3, ip, r4
 800ccde:	3b15      	subs	r3, #21
 800cce0:	f023 0303 	bic.w	r3, r3, #3
 800cce4:	3304      	adds	r3, #4
 800cce6:	f104 0015 	add.w	r0, r4, #21
 800ccea:	4584      	cmp	ip, r0
 800ccec:	bf38      	it	cc
 800ccee:	2304      	movcc	r3, #4
 800ccf0:	50ca      	str	r2, [r1, r3]
 800ccf2:	b10a      	cbz	r2, 800ccf8 <__lshift+0xa4>
 800ccf4:	f108 0602 	add.w	r6, r8, #2
 800ccf8:	3e01      	subs	r6, #1
 800ccfa:	4638      	mov	r0, r7
 800ccfc:	612e      	str	r6, [r5, #16]
 800ccfe:	4621      	mov	r1, r4
 800cd00:	f7ff fdd8 	bl	800c8b4 <_Bfree>
 800cd04:	4628      	mov	r0, r5
 800cd06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cd0e:	3301      	adds	r3, #1
 800cd10:	e7c5      	b.n	800cc9e <__lshift+0x4a>
 800cd12:	3904      	subs	r1, #4
 800cd14:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd18:	f841 2f04 	str.w	r2, [r1, #4]!
 800cd1c:	459c      	cmp	ip, r3
 800cd1e:	d8f9      	bhi.n	800cd14 <__lshift+0xc0>
 800cd20:	e7ea      	b.n	800ccf8 <__lshift+0xa4>
 800cd22:	bf00      	nop
 800cd24:	0800dd30 	.word	0x0800dd30
 800cd28:	0800dd41 	.word	0x0800dd41

0800cd2c <__mcmp>:
 800cd2c:	b530      	push	{r4, r5, lr}
 800cd2e:	6902      	ldr	r2, [r0, #16]
 800cd30:	690c      	ldr	r4, [r1, #16]
 800cd32:	1b12      	subs	r2, r2, r4
 800cd34:	d10e      	bne.n	800cd54 <__mcmp+0x28>
 800cd36:	f100 0314 	add.w	r3, r0, #20
 800cd3a:	3114      	adds	r1, #20
 800cd3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cd40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cd44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cd48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cd4c:	42a5      	cmp	r5, r4
 800cd4e:	d003      	beq.n	800cd58 <__mcmp+0x2c>
 800cd50:	d305      	bcc.n	800cd5e <__mcmp+0x32>
 800cd52:	2201      	movs	r2, #1
 800cd54:	4610      	mov	r0, r2
 800cd56:	bd30      	pop	{r4, r5, pc}
 800cd58:	4283      	cmp	r3, r0
 800cd5a:	d3f3      	bcc.n	800cd44 <__mcmp+0x18>
 800cd5c:	e7fa      	b.n	800cd54 <__mcmp+0x28>
 800cd5e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd62:	e7f7      	b.n	800cd54 <__mcmp+0x28>

0800cd64 <__mdiff>:
 800cd64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd68:	460c      	mov	r4, r1
 800cd6a:	4606      	mov	r6, r0
 800cd6c:	4611      	mov	r1, r2
 800cd6e:	4620      	mov	r0, r4
 800cd70:	4690      	mov	r8, r2
 800cd72:	f7ff ffdb 	bl	800cd2c <__mcmp>
 800cd76:	1e05      	subs	r5, r0, #0
 800cd78:	d110      	bne.n	800cd9c <__mdiff+0x38>
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	4630      	mov	r0, r6
 800cd7e:	f7ff fd59 	bl	800c834 <_Balloc>
 800cd82:	b930      	cbnz	r0, 800cd92 <__mdiff+0x2e>
 800cd84:	4b3a      	ldr	r3, [pc, #232]	; (800ce70 <__mdiff+0x10c>)
 800cd86:	4602      	mov	r2, r0
 800cd88:	f240 2137 	movw	r1, #567	; 0x237
 800cd8c:	4839      	ldr	r0, [pc, #228]	; (800ce74 <__mdiff+0x110>)
 800cd8e:	f7fd fea5 	bl	800aadc <__assert_func>
 800cd92:	2301      	movs	r3, #1
 800cd94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cd98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd9c:	bfa4      	itt	ge
 800cd9e:	4643      	movge	r3, r8
 800cda0:	46a0      	movge	r8, r4
 800cda2:	4630      	mov	r0, r6
 800cda4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cda8:	bfa6      	itte	ge
 800cdaa:	461c      	movge	r4, r3
 800cdac:	2500      	movge	r5, #0
 800cdae:	2501      	movlt	r5, #1
 800cdb0:	f7ff fd40 	bl	800c834 <_Balloc>
 800cdb4:	b920      	cbnz	r0, 800cdc0 <__mdiff+0x5c>
 800cdb6:	4b2e      	ldr	r3, [pc, #184]	; (800ce70 <__mdiff+0x10c>)
 800cdb8:	4602      	mov	r2, r0
 800cdba:	f240 2145 	movw	r1, #581	; 0x245
 800cdbe:	e7e5      	b.n	800cd8c <__mdiff+0x28>
 800cdc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cdc4:	6926      	ldr	r6, [r4, #16]
 800cdc6:	60c5      	str	r5, [r0, #12]
 800cdc8:	f104 0914 	add.w	r9, r4, #20
 800cdcc:	f108 0514 	add.w	r5, r8, #20
 800cdd0:	f100 0e14 	add.w	lr, r0, #20
 800cdd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cdd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cddc:	f108 0210 	add.w	r2, r8, #16
 800cde0:	46f2      	mov	sl, lr
 800cde2:	2100      	movs	r1, #0
 800cde4:	f859 3b04 	ldr.w	r3, [r9], #4
 800cde8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cdec:	fa11 f88b 	uxtah	r8, r1, fp
 800cdf0:	b299      	uxth	r1, r3
 800cdf2:	0c1b      	lsrs	r3, r3, #16
 800cdf4:	eba8 0801 	sub.w	r8, r8, r1
 800cdf8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cdfc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ce00:	fa1f f888 	uxth.w	r8, r8
 800ce04:	1419      	asrs	r1, r3, #16
 800ce06:	454e      	cmp	r6, r9
 800ce08:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ce0c:	f84a 3b04 	str.w	r3, [sl], #4
 800ce10:	d8e8      	bhi.n	800cde4 <__mdiff+0x80>
 800ce12:	1b33      	subs	r3, r6, r4
 800ce14:	3b15      	subs	r3, #21
 800ce16:	f023 0303 	bic.w	r3, r3, #3
 800ce1a:	3304      	adds	r3, #4
 800ce1c:	3415      	adds	r4, #21
 800ce1e:	42a6      	cmp	r6, r4
 800ce20:	bf38      	it	cc
 800ce22:	2304      	movcc	r3, #4
 800ce24:	441d      	add	r5, r3
 800ce26:	4473      	add	r3, lr
 800ce28:	469e      	mov	lr, r3
 800ce2a:	462e      	mov	r6, r5
 800ce2c:	4566      	cmp	r6, ip
 800ce2e:	d30e      	bcc.n	800ce4e <__mdiff+0xea>
 800ce30:	f10c 0203 	add.w	r2, ip, #3
 800ce34:	1b52      	subs	r2, r2, r5
 800ce36:	f022 0203 	bic.w	r2, r2, #3
 800ce3a:	3d03      	subs	r5, #3
 800ce3c:	45ac      	cmp	ip, r5
 800ce3e:	bf38      	it	cc
 800ce40:	2200      	movcc	r2, #0
 800ce42:	4413      	add	r3, r2
 800ce44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ce48:	b17a      	cbz	r2, 800ce6a <__mdiff+0x106>
 800ce4a:	6107      	str	r7, [r0, #16]
 800ce4c:	e7a4      	b.n	800cd98 <__mdiff+0x34>
 800ce4e:	f856 8b04 	ldr.w	r8, [r6], #4
 800ce52:	fa11 f288 	uxtah	r2, r1, r8
 800ce56:	1414      	asrs	r4, r2, #16
 800ce58:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ce5c:	b292      	uxth	r2, r2
 800ce5e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ce62:	f84e 2b04 	str.w	r2, [lr], #4
 800ce66:	1421      	asrs	r1, r4, #16
 800ce68:	e7e0      	b.n	800ce2c <__mdiff+0xc8>
 800ce6a:	3f01      	subs	r7, #1
 800ce6c:	e7ea      	b.n	800ce44 <__mdiff+0xe0>
 800ce6e:	bf00      	nop
 800ce70:	0800dd30 	.word	0x0800dd30
 800ce74:	0800dd41 	.word	0x0800dd41

0800ce78 <__d2b>:
 800ce78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce7c:	460f      	mov	r7, r1
 800ce7e:	2101      	movs	r1, #1
 800ce80:	ec59 8b10 	vmov	r8, r9, d0
 800ce84:	4616      	mov	r6, r2
 800ce86:	f7ff fcd5 	bl	800c834 <_Balloc>
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	b930      	cbnz	r0, 800ce9c <__d2b+0x24>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	4b24      	ldr	r3, [pc, #144]	; (800cf24 <__d2b+0xac>)
 800ce92:	4825      	ldr	r0, [pc, #148]	; (800cf28 <__d2b+0xb0>)
 800ce94:	f240 310f 	movw	r1, #783	; 0x30f
 800ce98:	f7fd fe20 	bl	800aadc <__assert_func>
 800ce9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cea0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cea4:	bb2d      	cbnz	r5, 800cef2 <__d2b+0x7a>
 800cea6:	9301      	str	r3, [sp, #4]
 800cea8:	f1b8 0300 	subs.w	r3, r8, #0
 800ceac:	d026      	beq.n	800cefc <__d2b+0x84>
 800ceae:	4668      	mov	r0, sp
 800ceb0:	9300      	str	r3, [sp, #0]
 800ceb2:	f7ff fd87 	bl	800c9c4 <__lo0bits>
 800ceb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ceba:	b1e8      	cbz	r0, 800cef8 <__d2b+0x80>
 800cebc:	f1c0 0320 	rsb	r3, r0, #32
 800cec0:	fa02 f303 	lsl.w	r3, r2, r3
 800cec4:	430b      	orrs	r3, r1
 800cec6:	40c2      	lsrs	r2, r0
 800cec8:	6163      	str	r3, [r4, #20]
 800ceca:	9201      	str	r2, [sp, #4]
 800cecc:	9b01      	ldr	r3, [sp, #4]
 800cece:	61a3      	str	r3, [r4, #24]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	bf14      	ite	ne
 800ced4:	2202      	movne	r2, #2
 800ced6:	2201      	moveq	r2, #1
 800ced8:	6122      	str	r2, [r4, #16]
 800ceda:	b1bd      	cbz	r5, 800cf0c <__d2b+0x94>
 800cedc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cee0:	4405      	add	r5, r0
 800cee2:	603d      	str	r5, [r7, #0]
 800cee4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cee8:	6030      	str	r0, [r6, #0]
 800ceea:	4620      	mov	r0, r4
 800ceec:	b003      	add	sp, #12
 800ceee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cef2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cef6:	e7d6      	b.n	800cea6 <__d2b+0x2e>
 800cef8:	6161      	str	r1, [r4, #20]
 800cefa:	e7e7      	b.n	800cecc <__d2b+0x54>
 800cefc:	a801      	add	r0, sp, #4
 800cefe:	f7ff fd61 	bl	800c9c4 <__lo0bits>
 800cf02:	9b01      	ldr	r3, [sp, #4]
 800cf04:	6163      	str	r3, [r4, #20]
 800cf06:	3020      	adds	r0, #32
 800cf08:	2201      	movs	r2, #1
 800cf0a:	e7e5      	b.n	800ced8 <__d2b+0x60>
 800cf0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cf10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cf14:	6038      	str	r0, [r7, #0]
 800cf16:	6918      	ldr	r0, [r3, #16]
 800cf18:	f7ff fd34 	bl	800c984 <__hi0bits>
 800cf1c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cf20:	e7e2      	b.n	800cee8 <__d2b+0x70>
 800cf22:	bf00      	nop
 800cf24:	0800dd30 	.word	0x0800dd30
 800cf28:	0800dd41 	.word	0x0800dd41

0800cf2c <__sfputc_r>:
 800cf2c:	6893      	ldr	r3, [r2, #8]
 800cf2e:	3b01      	subs	r3, #1
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	b410      	push	{r4}
 800cf34:	6093      	str	r3, [r2, #8]
 800cf36:	da08      	bge.n	800cf4a <__sfputc_r+0x1e>
 800cf38:	6994      	ldr	r4, [r2, #24]
 800cf3a:	42a3      	cmp	r3, r4
 800cf3c:	db01      	blt.n	800cf42 <__sfputc_r+0x16>
 800cf3e:	290a      	cmp	r1, #10
 800cf40:	d103      	bne.n	800cf4a <__sfputc_r+0x1e>
 800cf42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf46:	f7fe bbd2 	b.w	800b6ee <__swbuf_r>
 800cf4a:	6813      	ldr	r3, [r2, #0]
 800cf4c:	1c58      	adds	r0, r3, #1
 800cf4e:	6010      	str	r0, [r2, #0]
 800cf50:	7019      	strb	r1, [r3, #0]
 800cf52:	4608      	mov	r0, r1
 800cf54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf58:	4770      	bx	lr

0800cf5a <__sfputs_r>:
 800cf5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf5c:	4606      	mov	r6, r0
 800cf5e:	460f      	mov	r7, r1
 800cf60:	4614      	mov	r4, r2
 800cf62:	18d5      	adds	r5, r2, r3
 800cf64:	42ac      	cmp	r4, r5
 800cf66:	d101      	bne.n	800cf6c <__sfputs_r+0x12>
 800cf68:	2000      	movs	r0, #0
 800cf6a:	e007      	b.n	800cf7c <__sfputs_r+0x22>
 800cf6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf70:	463a      	mov	r2, r7
 800cf72:	4630      	mov	r0, r6
 800cf74:	f7ff ffda 	bl	800cf2c <__sfputc_r>
 800cf78:	1c43      	adds	r3, r0, #1
 800cf7a:	d1f3      	bne.n	800cf64 <__sfputs_r+0xa>
 800cf7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf80 <_vfiprintf_r>:
 800cf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf84:	460d      	mov	r5, r1
 800cf86:	b09d      	sub	sp, #116	; 0x74
 800cf88:	4614      	mov	r4, r2
 800cf8a:	4698      	mov	r8, r3
 800cf8c:	4606      	mov	r6, r0
 800cf8e:	b118      	cbz	r0, 800cf98 <_vfiprintf_r+0x18>
 800cf90:	6a03      	ldr	r3, [r0, #32]
 800cf92:	b90b      	cbnz	r3, 800cf98 <_vfiprintf_r+0x18>
 800cf94:	f7fe fab2 	bl	800b4fc <__sinit>
 800cf98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf9a:	07d9      	lsls	r1, r3, #31
 800cf9c:	d405      	bmi.n	800cfaa <_vfiprintf_r+0x2a>
 800cf9e:	89ab      	ldrh	r3, [r5, #12]
 800cfa0:	059a      	lsls	r2, r3, #22
 800cfa2:	d402      	bmi.n	800cfaa <_vfiprintf_r+0x2a>
 800cfa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfa6:	f7fe fcb4 	bl	800b912 <__retarget_lock_acquire_recursive>
 800cfaa:	89ab      	ldrh	r3, [r5, #12]
 800cfac:	071b      	lsls	r3, r3, #28
 800cfae:	d501      	bpl.n	800cfb4 <_vfiprintf_r+0x34>
 800cfb0:	692b      	ldr	r3, [r5, #16]
 800cfb2:	b99b      	cbnz	r3, 800cfdc <_vfiprintf_r+0x5c>
 800cfb4:	4629      	mov	r1, r5
 800cfb6:	4630      	mov	r0, r6
 800cfb8:	f7fe fbd6 	bl	800b768 <__swsetup_r>
 800cfbc:	b170      	cbz	r0, 800cfdc <_vfiprintf_r+0x5c>
 800cfbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfc0:	07dc      	lsls	r4, r3, #31
 800cfc2:	d504      	bpl.n	800cfce <_vfiprintf_r+0x4e>
 800cfc4:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc8:	b01d      	add	sp, #116	; 0x74
 800cfca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfce:	89ab      	ldrh	r3, [r5, #12]
 800cfd0:	0598      	lsls	r0, r3, #22
 800cfd2:	d4f7      	bmi.n	800cfc4 <_vfiprintf_r+0x44>
 800cfd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfd6:	f7fe fc9d 	bl	800b914 <__retarget_lock_release_recursive>
 800cfda:	e7f3      	b.n	800cfc4 <_vfiprintf_r+0x44>
 800cfdc:	2300      	movs	r3, #0
 800cfde:	9309      	str	r3, [sp, #36]	; 0x24
 800cfe0:	2320      	movs	r3, #32
 800cfe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfe6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfea:	2330      	movs	r3, #48	; 0x30
 800cfec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d1a0 <_vfiprintf_r+0x220>
 800cff0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cff4:	f04f 0901 	mov.w	r9, #1
 800cff8:	4623      	mov	r3, r4
 800cffa:	469a      	mov	sl, r3
 800cffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d000:	b10a      	cbz	r2, 800d006 <_vfiprintf_r+0x86>
 800d002:	2a25      	cmp	r2, #37	; 0x25
 800d004:	d1f9      	bne.n	800cffa <_vfiprintf_r+0x7a>
 800d006:	ebba 0b04 	subs.w	fp, sl, r4
 800d00a:	d00b      	beq.n	800d024 <_vfiprintf_r+0xa4>
 800d00c:	465b      	mov	r3, fp
 800d00e:	4622      	mov	r2, r4
 800d010:	4629      	mov	r1, r5
 800d012:	4630      	mov	r0, r6
 800d014:	f7ff ffa1 	bl	800cf5a <__sfputs_r>
 800d018:	3001      	adds	r0, #1
 800d01a:	f000 80a9 	beq.w	800d170 <_vfiprintf_r+0x1f0>
 800d01e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d020:	445a      	add	r2, fp
 800d022:	9209      	str	r2, [sp, #36]	; 0x24
 800d024:	f89a 3000 	ldrb.w	r3, [sl]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f000 80a1 	beq.w	800d170 <_vfiprintf_r+0x1f0>
 800d02e:	2300      	movs	r3, #0
 800d030:	f04f 32ff 	mov.w	r2, #4294967295
 800d034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d038:	f10a 0a01 	add.w	sl, sl, #1
 800d03c:	9304      	str	r3, [sp, #16]
 800d03e:	9307      	str	r3, [sp, #28]
 800d040:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d044:	931a      	str	r3, [sp, #104]	; 0x68
 800d046:	4654      	mov	r4, sl
 800d048:	2205      	movs	r2, #5
 800d04a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d04e:	4854      	ldr	r0, [pc, #336]	; (800d1a0 <_vfiprintf_r+0x220>)
 800d050:	f7f3 f8be 	bl	80001d0 <memchr>
 800d054:	9a04      	ldr	r2, [sp, #16]
 800d056:	b9d8      	cbnz	r0, 800d090 <_vfiprintf_r+0x110>
 800d058:	06d1      	lsls	r1, r2, #27
 800d05a:	bf44      	itt	mi
 800d05c:	2320      	movmi	r3, #32
 800d05e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d062:	0713      	lsls	r3, r2, #28
 800d064:	bf44      	itt	mi
 800d066:	232b      	movmi	r3, #43	; 0x2b
 800d068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d06c:	f89a 3000 	ldrb.w	r3, [sl]
 800d070:	2b2a      	cmp	r3, #42	; 0x2a
 800d072:	d015      	beq.n	800d0a0 <_vfiprintf_r+0x120>
 800d074:	9a07      	ldr	r2, [sp, #28]
 800d076:	4654      	mov	r4, sl
 800d078:	2000      	movs	r0, #0
 800d07a:	f04f 0c0a 	mov.w	ip, #10
 800d07e:	4621      	mov	r1, r4
 800d080:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d084:	3b30      	subs	r3, #48	; 0x30
 800d086:	2b09      	cmp	r3, #9
 800d088:	d94d      	bls.n	800d126 <_vfiprintf_r+0x1a6>
 800d08a:	b1b0      	cbz	r0, 800d0ba <_vfiprintf_r+0x13a>
 800d08c:	9207      	str	r2, [sp, #28]
 800d08e:	e014      	b.n	800d0ba <_vfiprintf_r+0x13a>
 800d090:	eba0 0308 	sub.w	r3, r0, r8
 800d094:	fa09 f303 	lsl.w	r3, r9, r3
 800d098:	4313      	orrs	r3, r2
 800d09a:	9304      	str	r3, [sp, #16]
 800d09c:	46a2      	mov	sl, r4
 800d09e:	e7d2      	b.n	800d046 <_vfiprintf_r+0xc6>
 800d0a0:	9b03      	ldr	r3, [sp, #12]
 800d0a2:	1d19      	adds	r1, r3, #4
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	9103      	str	r1, [sp, #12]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	bfbb      	ittet	lt
 800d0ac:	425b      	neglt	r3, r3
 800d0ae:	f042 0202 	orrlt.w	r2, r2, #2
 800d0b2:	9307      	strge	r3, [sp, #28]
 800d0b4:	9307      	strlt	r3, [sp, #28]
 800d0b6:	bfb8      	it	lt
 800d0b8:	9204      	strlt	r2, [sp, #16]
 800d0ba:	7823      	ldrb	r3, [r4, #0]
 800d0bc:	2b2e      	cmp	r3, #46	; 0x2e
 800d0be:	d10c      	bne.n	800d0da <_vfiprintf_r+0x15a>
 800d0c0:	7863      	ldrb	r3, [r4, #1]
 800d0c2:	2b2a      	cmp	r3, #42	; 0x2a
 800d0c4:	d134      	bne.n	800d130 <_vfiprintf_r+0x1b0>
 800d0c6:	9b03      	ldr	r3, [sp, #12]
 800d0c8:	1d1a      	adds	r2, r3, #4
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	9203      	str	r2, [sp, #12]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	bfb8      	it	lt
 800d0d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0d6:	3402      	adds	r4, #2
 800d0d8:	9305      	str	r3, [sp, #20]
 800d0da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d1b0 <_vfiprintf_r+0x230>
 800d0de:	7821      	ldrb	r1, [r4, #0]
 800d0e0:	2203      	movs	r2, #3
 800d0e2:	4650      	mov	r0, sl
 800d0e4:	f7f3 f874 	bl	80001d0 <memchr>
 800d0e8:	b138      	cbz	r0, 800d0fa <_vfiprintf_r+0x17a>
 800d0ea:	9b04      	ldr	r3, [sp, #16]
 800d0ec:	eba0 000a 	sub.w	r0, r0, sl
 800d0f0:	2240      	movs	r2, #64	; 0x40
 800d0f2:	4082      	lsls	r2, r0
 800d0f4:	4313      	orrs	r3, r2
 800d0f6:	3401      	adds	r4, #1
 800d0f8:	9304      	str	r3, [sp, #16]
 800d0fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0fe:	4829      	ldr	r0, [pc, #164]	; (800d1a4 <_vfiprintf_r+0x224>)
 800d100:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d104:	2206      	movs	r2, #6
 800d106:	f7f3 f863 	bl	80001d0 <memchr>
 800d10a:	2800      	cmp	r0, #0
 800d10c:	d03f      	beq.n	800d18e <_vfiprintf_r+0x20e>
 800d10e:	4b26      	ldr	r3, [pc, #152]	; (800d1a8 <_vfiprintf_r+0x228>)
 800d110:	bb1b      	cbnz	r3, 800d15a <_vfiprintf_r+0x1da>
 800d112:	9b03      	ldr	r3, [sp, #12]
 800d114:	3307      	adds	r3, #7
 800d116:	f023 0307 	bic.w	r3, r3, #7
 800d11a:	3308      	adds	r3, #8
 800d11c:	9303      	str	r3, [sp, #12]
 800d11e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d120:	443b      	add	r3, r7
 800d122:	9309      	str	r3, [sp, #36]	; 0x24
 800d124:	e768      	b.n	800cff8 <_vfiprintf_r+0x78>
 800d126:	fb0c 3202 	mla	r2, ip, r2, r3
 800d12a:	460c      	mov	r4, r1
 800d12c:	2001      	movs	r0, #1
 800d12e:	e7a6      	b.n	800d07e <_vfiprintf_r+0xfe>
 800d130:	2300      	movs	r3, #0
 800d132:	3401      	adds	r4, #1
 800d134:	9305      	str	r3, [sp, #20]
 800d136:	4619      	mov	r1, r3
 800d138:	f04f 0c0a 	mov.w	ip, #10
 800d13c:	4620      	mov	r0, r4
 800d13e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d142:	3a30      	subs	r2, #48	; 0x30
 800d144:	2a09      	cmp	r2, #9
 800d146:	d903      	bls.n	800d150 <_vfiprintf_r+0x1d0>
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d0c6      	beq.n	800d0da <_vfiprintf_r+0x15a>
 800d14c:	9105      	str	r1, [sp, #20]
 800d14e:	e7c4      	b.n	800d0da <_vfiprintf_r+0x15a>
 800d150:	fb0c 2101 	mla	r1, ip, r1, r2
 800d154:	4604      	mov	r4, r0
 800d156:	2301      	movs	r3, #1
 800d158:	e7f0      	b.n	800d13c <_vfiprintf_r+0x1bc>
 800d15a:	ab03      	add	r3, sp, #12
 800d15c:	9300      	str	r3, [sp, #0]
 800d15e:	462a      	mov	r2, r5
 800d160:	4b12      	ldr	r3, [pc, #72]	; (800d1ac <_vfiprintf_r+0x22c>)
 800d162:	a904      	add	r1, sp, #16
 800d164:	4630      	mov	r0, r6
 800d166:	f7fd fd77 	bl	800ac58 <_printf_float>
 800d16a:	4607      	mov	r7, r0
 800d16c:	1c78      	adds	r0, r7, #1
 800d16e:	d1d6      	bne.n	800d11e <_vfiprintf_r+0x19e>
 800d170:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d172:	07d9      	lsls	r1, r3, #31
 800d174:	d405      	bmi.n	800d182 <_vfiprintf_r+0x202>
 800d176:	89ab      	ldrh	r3, [r5, #12]
 800d178:	059a      	lsls	r2, r3, #22
 800d17a:	d402      	bmi.n	800d182 <_vfiprintf_r+0x202>
 800d17c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d17e:	f7fe fbc9 	bl	800b914 <__retarget_lock_release_recursive>
 800d182:	89ab      	ldrh	r3, [r5, #12]
 800d184:	065b      	lsls	r3, r3, #25
 800d186:	f53f af1d 	bmi.w	800cfc4 <_vfiprintf_r+0x44>
 800d18a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d18c:	e71c      	b.n	800cfc8 <_vfiprintf_r+0x48>
 800d18e:	ab03      	add	r3, sp, #12
 800d190:	9300      	str	r3, [sp, #0]
 800d192:	462a      	mov	r2, r5
 800d194:	4b05      	ldr	r3, [pc, #20]	; (800d1ac <_vfiprintf_r+0x22c>)
 800d196:	a904      	add	r1, sp, #16
 800d198:	4630      	mov	r0, r6
 800d19a:	f7fe f801 	bl	800b1a0 <_printf_i>
 800d19e:	e7e4      	b.n	800d16a <_vfiprintf_r+0x1ea>
 800d1a0:	0800de9c 	.word	0x0800de9c
 800d1a4:	0800dea6 	.word	0x0800dea6
 800d1a8:	0800ac59 	.word	0x0800ac59
 800d1ac:	0800cf5b 	.word	0x0800cf5b
 800d1b0:	0800dea2 	.word	0x0800dea2

0800d1b4 <__sflush_r>:
 800d1b4:	898a      	ldrh	r2, [r1, #12]
 800d1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ba:	4605      	mov	r5, r0
 800d1bc:	0710      	lsls	r0, r2, #28
 800d1be:	460c      	mov	r4, r1
 800d1c0:	d458      	bmi.n	800d274 <__sflush_r+0xc0>
 800d1c2:	684b      	ldr	r3, [r1, #4]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	dc05      	bgt.n	800d1d4 <__sflush_r+0x20>
 800d1c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	dc02      	bgt.n	800d1d4 <__sflush_r+0x20>
 800d1ce:	2000      	movs	r0, #0
 800d1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1d6:	2e00      	cmp	r6, #0
 800d1d8:	d0f9      	beq.n	800d1ce <__sflush_r+0x1a>
 800d1da:	2300      	movs	r3, #0
 800d1dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d1e0:	682f      	ldr	r7, [r5, #0]
 800d1e2:	6a21      	ldr	r1, [r4, #32]
 800d1e4:	602b      	str	r3, [r5, #0]
 800d1e6:	d032      	beq.n	800d24e <__sflush_r+0x9a>
 800d1e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d1ea:	89a3      	ldrh	r3, [r4, #12]
 800d1ec:	075a      	lsls	r2, r3, #29
 800d1ee:	d505      	bpl.n	800d1fc <__sflush_r+0x48>
 800d1f0:	6863      	ldr	r3, [r4, #4]
 800d1f2:	1ac0      	subs	r0, r0, r3
 800d1f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1f6:	b10b      	cbz	r3, 800d1fc <__sflush_r+0x48>
 800d1f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d1fa:	1ac0      	subs	r0, r0, r3
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	4602      	mov	r2, r0
 800d200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d202:	6a21      	ldr	r1, [r4, #32]
 800d204:	4628      	mov	r0, r5
 800d206:	47b0      	blx	r6
 800d208:	1c43      	adds	r3, r0, #1
 800d20a:	89a3      	ldrh	r3, [r4, #12]
 800d20c:	d106      	bne.n	800d21c <__sflush_r+0x68>
 800d20e:	6829      	ldr	r1, [r5, #0]
 800d210:	291d      	cmp	r1, #29
 800d212:	d82b      	bhi.n	800d26c <__sflush_r+0xb8>
 800d214:	4a29      	ldr	r2, [pc, #164]	; (800d2bc <__sflush_r+0x108>)
 800d216:	410a      	asrs	r2, r1
 800d218:	07d6      	lsls	r6, r2, #31
 800d21a:	d427      	bmi.n	800d26c <__sflush_r+0xb8>
 800d21c:	2200      	movs	r2, #0
 800d21e:	6062      	str	r2, [r4, #4]
 800d220:	04d9      	lsls	r1, r3, #19
 800d222:	6922      	ldr	r2, [r4, #16]
 800d224:	6022      	str	r2, [r4, #0]
 800d226:	d504      	bpl.n	800d232 <__sflush_r+0x7e>
 800d228:	1c42      	adds	r2, r0, #1
 800d22a:	d101      	bne.n	800d230 <__sflush_r+0x7c>
 800d22c:	682b      	ldr	r3, [r5, #0]
 800d22e:	b903      	cbnz	r3, 800d232 <__sflush_r+0x7e>
 800d230:	6560      	str	r0, [r4, #84]	; 0x54
 800d232:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d234:	602f      	str	r7, [r5, #0]
 800d236:	2900      	cmp	r1, #0
 800d238:	d0c9      	beq.n	800d1ce <__sflush_r+0x1a>
 800d23a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d23e:	4299      	cmp	r1, r3
 800d240:	d002      	beq.n	800d248 <__sflush_r+0x94>
 800d242:	4628      	mov	r0, r5
 800d244:	f7ff f9f6 	bl	800c634 <_free_r>
 800d248:	2000      	movs	r0, #0
 800d24a:	6360      	str	r0, [r4, #52]	; 0x34
 800d24c:	e7c0      	b.n	800d1d0 <__sflush_r+0x1c>
 800d24e:	2301      	movs	r3, #1
 800d250:	4628      	mov	r0, r5
 800d252:	47b0      	blx	r6
 800d254:	1c41      	adds	r1, r0, #1
 800d256:	d1c8      	bne.n	800d1ea <__sflush_r+0x36>
 800d258:	682b      	ldr	r3, [r5, #0]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d0c5      	beq.n	800d1ea <__sflush_r+0x36>
 800d25e:	2b1d      	cmp	r3, #29
 800d260:	d001      	beq.n	800d266 <__sflush_r+0xb2>
 800d262:	2b16      	cmp	r3, #22
 800d264:	d101      	bne.n	800d26a <__sflush_r+0xb6>
 800d266:	602f      	str	r7, [r5, #0]
 800d268:	e7b1      	b.n	800d1ce <__sflush_r+0x1a>
 800d26a:	89a3      	ldrh	r3, [r4, #12]
 800d26c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d270:	81a3      	strh	r3, [r4, #12]
 800d272:	e7ad      	b.n	800d1d0 <__sflush_r+0x1c>
 800d274:	690f      	ldr	r7, [r1, #16]
 800d276:	2f00      	cmp	r7, #0
 800d278:	d0a9      	beq.n	800d1ce <__sflush_r+0x1a>
 800d27a:	0793      	lsls	r3, r2, #30
 800d27c:	680e      	ldr	r6, [r1, #0]
 800d27e:	bf08      	it	eq
 800d280:	694b      	ldreq	r3, [r1, #20]
 800d282:	600f      	str	r7, [r1, #0]
 800d284:	bf18      	it	ne
 800d286:	2300      	movne	r3, #0
 800d288:	eba6 0807 	sub.w	r8, r6, r7
 800d28c:	608b      	str	r3, [r1, #8]
 800d28e:	f1b8 0f00 	cmp.w	r8, #0
 800d292:	dd9c      	ble.n	800d1ce <__sflush_r+0x1a>
 800d294:	6a21      	ldr	r1, [r4, #32]
 800d296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d298:	4643      	mov	r3, r8
 800d29a:	463a      	mov	r2, r7
 800d29c:	4628      	mov	r0, r5
 800d29e:	47b0      	blx	r6
 800d2a0:	2800      	cmp	r0, #0
 800d2a2:	dc06      	bgt.n	800d2b2 <__sflush_r+0xfe>
 800d2a4:	89a3      	ldrh	r3, [r4, #12]
 800d2a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2aa:	81a3      	strh	r3, [r4, #12]
 800d2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d2b0:	e78e      	b.n	800d1d0 <__sflush_r+0x1c>
 800d2b2:	4407      	add	r7, r0
 800d2b4:	eba8 0800 	sub.w	r8, r8, r0
 800d2b8:	e7e9      	b.n	800d28e <__sflush_r+0xda>
 800d2ba:	bf00      	nop
 800d2bc:	dfbffffe 	.word	0xdfbffffe

0800d2c0 <_fflush_r>:
 800d2c0:	b538      	push	{r3, r4, r5, lr}
 800d2c2:	690b      	ldr	r3, [r1, #16]
 800d2c4:	4605      	mov	r5, r0
 800d2c6:	460c      	mov	r4, r1
 800d2c8:	b913      	cbnz	r3, 800d2d0 <_fflush_r+0x10>
 800d2ca:	2500      	movs	r5, #0
 800d2cc:	4628      	mov	r0, r5
 800d2ce:	bd38      	pop	{r3, r4, r5, pc}
 800d2d0:	b118      	cbz	r0, 800d2da <_fflush_r+0x1a>
 800d2d2:	6a03      	ldr	r3, [r0, #32]
 800d2d4:	b90b      	cbnz	r3, 800d2da <_fflush_r+0x1a>
 800d2d6:	f7fe f911 	bl	800b4fc <__sinit>
 800d2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d0f3      	beq.n	800d2ca <_fflush_r+0xa>
 800d2e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d2e4:	07d0      	lsls	r0, r2, #31
 800d2e6:	d404      	bmi.n	800d2f2 <_fflush_r+0x32>
 800d2e8:	0599      	lsls	r1, r3, #22
 800d2ea:	d402      	bmi.n	800d2f2 <_fflush_r+0x32>
 800d2ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2ee:	f7fe fb10 	bl	800b912 <__retarget_lock_acquire_recursive>
 800d2f2:	4628      	mov	r0, r5
 800d2f4:	4621      	mov	r1, r4
 800d2f6:	f7ff ff5d 	bl	800d1b4 <__sflush_r>
 800d2fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2fc:	07da      	lsls	r2, r3, #31
 800d2fe:	4605      	mov	r5, r0
 800d300:	d4e4      	bmi.n	800d2cc <_fflush_r+0xc>
 800d302:	89a3      	ldrh	r3, [r4, #12]
 800d304:	059b      	lsls	r3, r3, #22
 800d306:	d4e1      	bmi.n	800d2cc <_fflush_r+0xc>
 800d308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d30a:	f7fe fb03 	bl	800b914 <__retarget_lock_release_recursive>
 800d30e:	e7dd      	b.n	800d2cc <_fflush_r+0xc>

0800d310 <__swhatbuf_r>:
 800d310:	b570      	push	{r4, r5, r6, lr}
 800d312:	460c      	mov	r4, r1
 800d314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d318:	2900      	cmp	r1, #0
 800d31a:	b096      	sub	sp, #88	; 0x58
 800d31c:	4615      	mov	r5, r2
 800d31e:	461e      	mov	r6, r3
 800d320:	da0d      	bge.n	800d33e <__swhatbuf_r+0x2e>
 800d322:	89a3      	ldrh	r3, [r4, #12]
 800d324:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d328:	f04f 0100 	mov.w	r1, #0
 800d32c:	bf0c      	ite	eq
 800d32e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d332:	2340      	movne	r3, #64	; 0x40
 800d334:	2000      	movs	r0, #0
 800d336:	6031      	str	r1, [r6, #0]
 800d338:	602b      	str	r3, [r5, #0]
 800d33a:	b016      	add	sp, #88	; 0x58
 800d33c:	bd70      	pop	{r4, r5, r6, pc}
 800d33e:	466a      	mov	r2, sp
 800d340:	f000 f878 	bl	800d434 <_fstat_r>
 800d344:	2800      	cmp	r0, #0
 800d346:	dbec      	blt.n	800d322 <__swhatbuf_r+0x12>
 800d348:	9901      	ldr	r1, [sp, #4]
 800d34a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d34e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d352:	4259      	negs	r1, r3
 800d354:	4159      	adcs	r1, r3
 800d356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d35a:	e7eb      	b.n	800d334 <__swhatbuf_r+0x24>

0800d35c <__smakebuf_r>:
 800d35c:	898b      	ldrh	r3, [r1, #12]
 800d35e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d360:	079d      	lsls	r5, r3, #30
 800d362:	4606      	mov	r6, r0
 800d364:	460c      	mov	r4, r1
 800d366:	d507      	bpl.n	800d378 <__smakebuf_r+0x1c>
 800d368:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d36c:	6023      	str	r3, [r4, #0]
 800d36e:	6123      	str	r3, [r4, #16]
 800d370:	2301      	movs	r3, #1
 800d372:	6163      	str	r3, [r4, #20]
 800d374:	b002      	add	sp, #8
 800d376:	bd70      	pop	{r4, r5, r6, pc}
 800d378:	ab01      	add	r3, sp, #4
 800d37a:	466a      	mov	r2, sp
 800d37c:	f7ff ffc8 	bl	800d310 <__swhatbuf_r>
 800d380:	9900      	ldr	r1, [sp, #0]
 800d382:	4605      	mov	r5, r0
 800d384:	4630      	mov	r0, r6
 800d386:	f7ff f9c9 	bl	800c71c <_malloc_r>
 800d38a:	b948      	cbnz	r0, 800d3a0 <__smakebuf_r+0x44>
 800d38c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d390:	059a      	lsls	r2, r3, #22
 800d392:	d4ef      	bmi.n	800d374 <__smakebuf_r+0x18>
 800d394:	f023 0303 	bic.w	r3, r3, #3
 800d398:	f043 0302 	orr.w	r3, r3, #2
 800d39c:	81a3      	strh	r3, [r4, #12]
 800d39e:	e7e3      	b.n	800d368 <__smakebuf_r+0xc>
 800d3a0:	89a3      	ldrh	r3, [r4, #12]
 800d3a2:	6020      	str	r0, [r4, #0]
 800d3a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3a8:	81a3      	strh	r3, [r4, #12]
 800d3aa:	9b00      	ldr	r3, [sp, #0]
 800d3ac:	6163      	str	r3, [r4, #20]
 800d3ae:	9b01      	ldr	r3, [sp, #4]
 800d3b0:	6120      	str	r0, [r4, #16]
 800d3b2:	b15b      	cbz	r3, 800d3cc <__smakebuf_r+0x70>
 800d3b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	f000 f84d 	bl	800d458 <_isatty_r>
 800d3be:	b128      	cbz	r0, 800d3cc <__smakebuf_r+0x70>
 800d3c0:	89a3      	ldrh	r3, [r4, #12]
 800d3c2:	f023 0303 	bic.w	r3, r3, #3
 800d3c6:	f043 0301 	orr.w	r3, r3, #1
 800d3ca:	81a3      	strh	r3, [r4, #12]
 800d3cc:	89a3      	ldrh	r3, [r4, #12]
 800d3ce:	431d      	orrs	r5, r3
 800d3d0:	81a5      	strh	r5, [r4, #12]
 800d3d2:	e7cf      	b.n	800d374 <__smakebuf_r+0x18>

0800d3d4 <_raise_r>:
 800d3d4:	291f      	cmp	r1, #31
 800d3d6:	b538      	push	{r3, r4, r5, lr}
 800d3d8:	4604      	mov	r4, r0
 800d3da:	460d      	mov	r5, r1
 800d3dc:	d904      	bls.n	800d3e8 <_raise_r+0x14>
 800d3de:	2316      	movs	r3, #22
 800d3e0:	6003      	str	r3, [r0, #0]
 800d3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d3e6:	bd38      	pop	{r3, r4, r5, pc}
 800d3e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d3ea:	b112      	cbz	r2, 800d3f2 <_raise_r+0x1e>
 800d3ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3f0:	b94b      	cbnz	r3, 800d406 <_raise_r+0x32>
 800d3f2:	4620      	mov	r0, r4
 800d3f4:	f000 f852 	bl	800d49c <_getpid_r>
 800d3f8:	462a      	mov	r2, r5
 800d3fa:	4601      	mov	r1, r0
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d402:	f000 b839 	b.w	800d478 <_kill_r>
 800d406:	2b01      	cmp	r3, #1
 800d408:	d00a      	beq.n	800d420 <_raise_r+0x4c>
 800d40a:	1c59      	adds	r1, r3, #1
 800d40c:	d103      	bne.n	800d416 <_raise_r+0x42>
 800d40e:	2316      	movs	r3, #22
 800d410:	6003      	str	r3, [r0, #0]
 800d412:	2001      	movs	r0, #1
 800d414:	e7e7      	b.n	800d3e6 <_raise_r+0x12>
 800d416:	2400      	movs	r4, #0
 800d418:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d41c:	4628      	mov	r0, r5
 800d41e:	4798      	blx	r3
 800d420:	2000      	movs	r0, #0
 800d422:	e7e0      	b.n	800d3e6 <_raise_r+0x12>

0800d424 <raise>:
 800d424:	4b02      	ldr	r3, [pc, #8]	; (800d430 <raise+0xc>)
 800d426:	4601      	mov	r1, r0
 800d428:	6818      	ldr	r0, [r3, #0]
 800d42a:	f7ff bfd3 	b.w	800d3d4 <_raise_r>
 800d42e:	bf00      	nop
 800d430:	20000120 	.word	0x20000120

0800d434 <_fstat_r>:
 800d434:	b538      	push	{r3, r4, r5, lr}
 800d436:	4d07      	ldr	r5, [pc, #28]	; (800d454 <_fstat_r+0x20>)
 800d438:	2300      	movs	r3, #0
 800d43a:	4604      	mov	r4, r0
 800d43c:	4608      	mov	r0, r1
 800d43e:	4611      	mov	r1, r2
 800d440:	602b      	str	r3, [r5, #0]
 800d442:	f7f4 fe52 	bl	80020ea <_fstat>
 800d446:	1c43      	adds	r3, r0, #1
 800d448:	d102      	bne.n	800d450 <_fstat_r+0x1c>
 800d44a:	682b      	ldr	r3, [r5, #0]
 800d44c:	b103      	cbz	r3, 800d450 <_fstat_r+0x1c>
 800d44e:	6023      	str	r3, [r4, #0]
 800d450:	bd38      	pop	{r3, r4, r5, pc}
 800d452:	bf00      	nop
 800d454:	20002810 	.word	0x20002810

0800d458 <_isatty_r>:
 800d458:	b538      	push	{r3, r4, r5, lr}
 800d45a:	4d06      	ldr	r5, [pc, #24]	; (800d474 <_isatty_r+0x1c>)
 800d45c:	2300      	movs	r3, #0
 800d45e:	4604      	mov	r4, r0
 800d460:	4608      	mov	r0, r1
 800d462:	602b      	str	r3, [r5, #0]
 800d464:	f7f4 fe51 	bl	800210a <_isatty>
 800d468:	1c43      	adds	r3, r0, #1
 800d46a:	d102      	bne.n	800d472 <_isatty_r+0x1a>
 800d46c:	682b      	ldr	r3, [r5, #0]
 800d46e:	b103      	cbz	r3, 800d472 <_isatty_r+0x1a>
 800d470:	6023      	str	r3, [r4, #0]
 800d472:	bd38      	pop	{r3, r4, r5, pc}
 800d474:	20002810 	.word	0x20002810

0800d478 <_kill_r>:
 800d478:	b538      	push	{r3, r4, r5, lr}
 800d47a:	4d07      	ldr	r5, [pc, #28]	; (800d498 <_kill_r+0x20>)
 800d47c:	2300      	movs	r3, #0
 800d47e:	4604      	mov	r4, r0
 800d480:	4608      	mov	r0, r1
 800d482:	4611      	mov	r1, r2
 800d484:	602b      	str	r3, [r5, #0]
 800d486:	f7f4 fded 	bl	8002064 <_kill>
 800d48a:	1c43      	adds	r3, r0, #1
 800d48c:	d102      	bne.n	800d494 <_kill_r+0x1c>
 800d48e:	682b      	ldr	r3, [r5, #0]
 800d490:	b103      	cbz	r3, 800d494 <_kill_r+0x1c>
 800d492:	6023      	str	r3, [r4, #0]
 800d494:	bd38      	pop	{r3, r4, r5, pc}
 800d496:	bf00      	nop
 800d498:	20002810 	.word	0x20002810

0800d49c <_getpid_r>:
 800d49c:	f7f4 bdda 	b.w	8002054 <_getpid>

0800d4a0 <_sbrk_r>:
 800d4a0:	b538      	push	{r3, r4, r5, lr}
 800d4a2:	4d06      	ldr	r5, [pc, #24]	; (800d4bc <_sbrk_r+0x1c>)
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	4604      	mov	r4, r0
 800d4a8:	4608      	mov	r0, r1
 800d4aa:	602b      	str	r3, [r5, #0]
 800d4ac:	f7f4 fe46 	bl	800213c <_sbrk>
 800d4b0:	1c43      	adds	r3, r0, #1
 800d4b2:	d102      	bne.n	800d4ba <_sbrk_r+0x1a>
 800d4b4:	682b      	ldr	r3, [r5, #0]
 800d4b6:	b103      	cbz	r3, 800d4ba <_sbrk_r+0x1a>
 800d4b8:	6023      	str	r3, [r4, #0]
 800d4ba:	bd38      	pop	{r3, r4, r5, pc}
 800d4bc:	20002810 	.word	0x20002810

0800d4c0 <_calloc_r>:
 800d4c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d4c2:	fba1 2402 	umull	r2, r4, r1, r2
 800d4c6:	b94c      	cbnz	r4, 800d4dc <_calloc_r+0x1c>
 800d4c8:	4611      	mov	r1, r2
 800d4ca:	9201      	str	r2, [sp, #4]
 800d4cc:	f7ff f926 	bl	800c71c <_malloc_r>
 800d4d0:	9a01      	ldr	r2, [sp, #4]
 800d4d2:	4605      	mov	r5, r0
 800d4d4:	b930      	cbnz	r0, 800d4e4 <_calloc_r+0x24>
 800d4d6:	4628      	mov	r0, r5
 800d4d8:	b003      	add	sp, #12
 800d4da:	bd30      	pop	{r4, r5, pc}
 800d4dc:	220c      	movs	r2, #12
 800d4de:	6002      	str	r2, [r0, #0]
 800d4e0:	2500      	movs	r5, #0
 800d4e2:	e7f8      	b.n	800d4d6 <_calloc_r+0x16>
 800d4e4:	4621      	mov	r1, r4
 800d4e6:	f7fe f997 	bl	800b818 <memset>
 800d4ea:	e7f4      	b.n	800d4d6 <_calloc_r+0x16>

0800d4ec <__ascii_mbtowc>:
 800d4ec:	b082      	sub	sp, #8
 800d4ee:	b901      	cbnz	r1, 800d4f2 <__ascii_mbtowc+0x6>
 800d4f0:	a901      	add	r1, sp, #4
 800d4f2:	b142      	cbz	r2, 800d506 <__ascii_mbtowc+0x1a>
 800d4f4:	b14b      	cbz	r3, 800d50a <__ascii_mbtowc+0x1e>
 800d4f6:	7813      	ldrb	r3, [r2, #0]
 800d4f8:	600b      	str	r3, [r1, #0]
 800d4fa:	7812      	ldrb	r2, [r2, #0]
 800d4fc:	1e10      	subs	r0, r2, #0
 800d4fe:	bf18      	it	ne
 800d500:	2001      	movne	r0, #1
 800d502:	b002      	add	sp, #8
 800d504:	4770      	bx	lr
 800d506:	4610      	mov	r0, r2
 800d508:	e7fb      	b.n	800d502 <__ascii_mbtowc+0x16>
 800d50a:	f06f 0001 	mvn.w	r0, #1
 800d50e:	e7f8      	b.n	800d502 <__ascii_mbtowc+0x16>

0800d510 <__ascii_wctomb>:
 800d510:	b149      	cbz	r1, 800d526 <__ascii_wctomb+0x16>
 800d512:	2aff      	cmp	r2, #255	; 0xff
 800d514:	bf85      	ittet	hi
 800d516:	238a      	movhi	r3, #138	; 0x8a
 800d518:	6003      	strhi	r3, [r0, #0]
 800d51a:	700a      	strbls	r2, [r1, #0]
 800d51c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d520:	bf98      	it	ls
 800d522:	2001      	movls	r0, #1
 800d524:	4770      	bx	lr
 800d526:	4608      	mov	r0, r1
 800d528:	4770      	bx	lr
	...

0800d52c <_init>:
 800d52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d52e:	bf00      	nop
 800d530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d532:	bc08      	pop	{r3}
 800d534:	469e      	mov	lr, r3
 800d536:	4770      	bx	lr

0800d538 <_fini>:
 800d538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d53a:	bf00      	nop
 800d53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d53e:	bc08      	pop	{r3}
 800d540:	469e      	mov	lr, r3
 800d542:	4770      	bx	lr
