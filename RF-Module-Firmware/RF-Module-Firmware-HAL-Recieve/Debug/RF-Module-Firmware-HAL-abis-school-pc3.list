
RF-Module-Firmware-HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  0800c098  0800c098  0001c098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6f0  0800c6f0  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6f0  0800c6f0  0001c6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6f8  0800c6f8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6f8  0800c6f8  0001c6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6fc  0800c6fc  0001c6fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002578  200001d8  0800c8d8  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002750  0800c8d8  00022750  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fb3e  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048ce  00000000  00000000  0003fd89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b78  00000000  00000000  00044658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000153a  00000000  00000000  000461d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024960  00000000  00000000  0004770a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020388  00000000  00000000  0006c06a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000daafe  00000000  00000000  0008c3f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000836c  00000000  00000000  00166ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  0016f25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c07c 	.word	0x0800c07c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800c07c 	.word	0x0800c07c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000eaa:	4a19      	ldr	r2, [pc, #100]	; (8000f10 <MX_CAN1_Init+0x6c>)
 8000eac:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000eb0:	2210      	movs	r2, #16
 8000eb2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000eb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eba:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000ec4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ec8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000ecc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ed0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000ef8:	f001 f950 	bl	800219c <HAL_CAN_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000f02:	f000 fbb3 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000210 	.word	0x20000210
 8000f10:	40006400 	.word	0x40006400

08000f14 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a24      	ldr	r2, [pc, #144]	; (8000fc4 <HAL_CAN_MspInit+0xb0>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d141      	bne.n	8000fba <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f36:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <HAL_CAN_MspInit+0xb4>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3a:	4a23      	ldr	r2, [pc, #140]	; (8000fc8 <HAL_CAN_MspInit+0xb4>)
 8000f3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f40:	6593      	str	r3, [r2, #88]	; 0x58
 8000f42:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <HAL_CAN_MspInit+0xb4>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <HAL_CAN_MspInit+0xb4>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a1d      	ldr	r2, [pc, #116]	; (8000fc8 <HAL_CAN_MspInit+0xb4>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <HAL_CAN_MspInit+0xb4>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f78:	2309      	movs	r3, #9
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f86:	f002 f803 	bl	8002f90 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2105      	movs	r1, #5
 8000f8e:	2013      	movs	r0, #19
 8000f90:	f001 ffd4 	bl	8002f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f94:	2013      	movs	r0, #19
 8000f96:	f001 ffed 	bl	8002f74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2105      	movs	r1, #5
 8000f9e:	2014      	movs	r0, #20
 8000fa0:	f001 ffcc 	bl	8002f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000fa4:	2014      	movs	r0, #20
 8000fa6:	f001 ffe5 	bl	8002f74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2105      	movs	r1, #5
 8000fae:	2015      	movs	r0, #21
 8000fb0:	f001 ffc4 	bl	8002f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000fb4:	2015      	movs	r0, #21
 8000fb6:	f001 ffdd 	bl	8002f74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	; 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40006400 	.word	0x40006400
 8000fc8:	40021000 	.word	0x40021000

08000fcc <CAN_Initialize>:
  }
}

/* USER CODE BEGIN 1 */

void CAN_Initialize() {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
	MX_CAN1_Init();
 8000fd2:	f7ff ff67 	bl	8000ea4 <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	CAN_FilterTypeDef sf;
	sf.FilterIdHigh = 0x100 << 5;
 8000fd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fda:	603b      	str	r3, [r7, #0]
	sf.FilterMaskIdHigh = 0x700 << 5;
 8000fdc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000fe0:	60bb      	str	r3, [r7, #8]
	sf.FilterIdLow = 0x0000;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
	sf.FilterMaskIdLow = 0x0000;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
	sf.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
	sf.FilterBank = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
	sf.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61bb      	str	r3, [r7, #24]
	sf.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	61fb      	str	r3, [r7, #28]
	sf.FilterActivation = CAN_FILTER_ENABLE;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	623b      	str	r3, [r7, #32]

	if (HAL_CAN_ConfigFilter(&hcan1, &sf) != HAL_OK) {
 8000ffe:	463b      	mov	r3, r7
 8001000:	4619      	mov	r1, r3
 8001002:	4819      	ldr	r0, [pc, #100]	; (8001068 <CAN_Initialize+0x9c>)
 8001004:	f001 f9c5 	bl	8002392 <HAL_CAN_ConfigFilter>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <CAN_Initialize+0x46>
		/* Filter configuration Error */
		Error_Handler();
 800100e:	f000 fb2d 	bl	800166c <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001012:	4815      	ldr	r0, [pc, #84]	; (8001068 <CAN_Initialize+0x9c>)
 8001014:	f001 fa87 	bl	8002526 <HAL_CAN_Start>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <CAN_Initialize+0x56>
		Error_Handler();
 800101e:	f000 fb25 	bl	800166c <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8001022:	2102      	movs	r1, #2
 8001024:	4810      	ldr	r0, [pc, #64]	; (8001068 <CAN_Initialize+0x9c>)
 8001026:	f001 fca4 	bl	8002972 <HAL_CAN_ActivateNotification>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <CAN_Initialize+0x68>
			!= HAL_OK) {
		Error_Handler();
 8001030:	f000 fb1c 	bl	800166c <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY)
 8001034:	2101      	movs	r1, #1
 8001036:	480c      	ldr	r0, [pc, #48]	; (8001068 <CAN_Initialize+0x9c>)
 8001038:	f001 fc9b 	bl	8002972 <HAL_CAN_ActivateNotification>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <CAN_Initialize+0x7a>
			!= HAL_OK) {
		Error_Handler();
 8001042:	f000 fb13 	bl	800166c <Error_Handler>

//	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR))
//	!= HAL_OK) {
//		Error_Handler();
//	}
	TxHeader.RTR = CAN_RTR_DATA;
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <CAN_Initialize+0xa0>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <CAN_Initialize+0xa0>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <CAN_Initialize+0xa0>)
 8001054:	2208      	movs	r2, #8
 8001056:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <CAN_Initialize+0xa0>)
 800105a:	2200      	movs	r2, #0
 800105c:	751a      	strb	r2, [r3, #20]
}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	; 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000210 	.word	0x20000210
 800106c:	200001f4 	.word	0x200001f4

08001070 <CAN_Transmit>:

/**
 * Send 8 bytes at a time, with standard id size.
 */
int CAN_Transmit(uint32_t _device_address, uint32_t *_buffer_pointer,
		int _buffer_length, uint32_t _RTR) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	603b      	str	r3, [r7, #0]

	TxHeader.StdId = _device_address;
 800107e:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <CAN_Transmit+0x44>)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6013      	str	r3, [r2, #0]
	TxHeader.RTR = _RTR;
 8001084:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <CAN_Transmit+0x44>)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	60d3      	str	r3, [r2, #12]
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, _buffer_pointer, &TxMailbox)
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <CAN_Transmit+0x48>)
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	4909      	ldr	r1, [pc, #36]	; (80010b4 <CAN_Transmit+0x44>)
 8001090:	480a      	ldr	r0, [pc, #40]	; (80010bc <CAN_Transmit+0x4c>)
 8001092:	f001 fa8c 	bl	80025ae <HAL_CAN_AddTxMessage>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d006      	beq.n	80010aa <CAN_Transmit+0x3a>
			!= HAL_OK) {
		printf(
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	68f9      	ldr	r1, [r7, #12]
 80010a0:	4807      	ldr	r0, [pc, #28]	; (80010c0 <CAN_Transmit+0x50>)
 80010a2:	f009 f81b 	bl	800a0dc <iprintf>
				"Can transmission error on packet id: %hu and containing data: %u\r\n",
				_device_address, _buffer_pointer);
		Error_Handler();
 80010a6:	f000 fae1 	bl	800166c <Error_Handler>
	}

	return 1;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200001f4 	.word	0x200001f4
 80010b8:	2000020c 	.word	0x2000020c
 80010bc:	20000210 	.word	0x20000210
 80010c0:	0800c098 	.word	0x0800c098

080010c4 <configureTimerForRunTimeStats>:
void configureTimerForRunTimeStats(void);
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
	return 0;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	CAN_Initialize();
 80010e8:	f7ff ff70 	bl	8000fcc <CAN_Initialize>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CAN_Transmission_Complete */
  CAN_Transmission_CompleteHandle = osSemaphoreNew(1, 0, &CAN_Transmission_Complete_attributes);
 80010ec:	4a28      	ldr	r2, [pc, #160]	; (8001190 <MX_FREERTOS_Init+0xac>)
 80010ee:	2100      	movs	r1, #0
 80010f0:	2001      	movs	r0, #1
 80010f2:	f005 fa2a 	bl	800654a <osSemaphoreNew>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a26      	ldr	r2, [pc, #152]	; (8001194 <MX_FREERTOS_Init+0xb0>)
 80010fa:	6013      	str	r3, [r2, #0]

  /* creation of CAN_Recieve_Complete */
  CAN_Recieve_CompleteHandle = osSemaphoreNew(1, 0, &CAN_Recieve_Complete_attributes);
 80010fc:	4a26      	ldr	r2, [pc, #152]	; (8001198 <MX_FREERTOS_Init+0xb4>)
 80010fe:	2100      	movs	r1, #0
 8001100:	2001      	movs	r0, #1
 8001102:	f005 fa22 	bl	800654a <osSemaphoreNew>
 8001106:	4603      	mov	r3, r0
 8001108:	4a24      	ldr	r2, [pc, #144]	; (800119c <MX_FREERTOS_Init+0xb8>)
 800110a:	6013      	str	r3, [r2, #0]

  /* creation of RELEASE_JERMA_GAS */
  RELEASE_JERMA_GASHandle = osSemaphoreNew(1, 0, &RELEASE_JERMA_GAS_attributes);
 800110c:	4a24      	ldr	r2, [pc, #144]	; (80011a0 <MX_FREERTOS_Init+0xbc>)
 800110e:	2100      	movs	r1, #0
 8001110:	2001      	movs	r0, #1
 8001112:	f005 fa1a 	bl	800654a <osSemaphoreNew>
 8001116:	4603      	mov	r3, r0
 8001118:	4a22      	ldr	r2, [pc, #136]	; (80011a4 <MX_FREERTOS_Init+0xc0>)
 800111a:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CAN_Transmission_Queue */
  CAN_Transmission_QueueHandle = osMessageQueueNew (16, 8, &CAN_Transmission_Queue_attributes);
 800111c:	4a22      	ldr	r2, [pc, #136]	; (80011a8 <MX_FREERTOS_Init+0xc4>)
 800111e:	2108      	movs	r1, #8
 8001120:	2010      	movs	r0, #16
 8001122:	f005 fadf 	bl	80066e4 <osMessageQueueNew>
 8001126:	4603      	mov	r3, r0
 8001128:	4a20      	ldr	r2, [pc, #128]	; (80011ac <MX_FREERTOS_Init+0xc8>)
 800112a:	6013      	str	r3, [r2, #0]

  /* creation of CAN_HIGHPrio_Reci_Queue */
  CAN_HIGHPrio_Reci_QueueHandle = osMessageQueueNew (16, 8, &CAN_HIGHPrio_Reci_Queue_attributes);
 800112c:	4a20      	ldr	r2, [pc, #128]	; (80011b0 <MX_FREERTOS_Init+0xcc>)
 800112e:	2108      	movs	r1, #8
 8001130:	2010      	movs	r0, #16
 8001132:	f005 fad7 	bl	80066e4 <osMessageQueueNew>
 8001136:	4603      	mov	r3, r0
 8001138:	4a1e      	ldr	r2, [pc, #120]	; (80011b4 <MX_FREERTOS_Init+0xd0>)
 800113a:	6013      	str	r3, [r2, #0]

  /* creation of CAN_LOWPrio_Reci_Queue */
  CAN_LOWPrio_Reci_QueueHandle = osMessageQueueNew (16, 8, &CAN_LOWPrio_Reci_Queue_attributes);
 800113c:	4a1e      	ldr	r2, [pc, #120]	; (80011b8 <MX_FREERTOS_Init+0xd4>)
 800113e:	2108      	movs	r1, #8
 8001140:	2010      	movs	r0, #16
 8001142:	f005 facf 	bl	80066e4 <osMessageQueueNew>
 8001146:	4603      	mov	r3, r0
 8001148:	4a1c      	ldr	r2, [pc, #112]	; (80011bc <MX_FREERTOS_Init+0xd8>)
 800114a:	6013      	str	r3, [r2, #0]

  /* creation of CAN_JERMA_GAS_LEAK */
  CAN_JERMA_GAS_LEAKHandle = osMessageQueueNew (16, 8, &CAN_JERMA_GAS_LEAK_attributes);
 800114c:	4a1c      	ldr	r2, [pc, #112]	; (80011c0 <MX_FREERTOS_Init+0xdc>)
 800114e:	2108      	movs	r1, #8
 8001150:	2010      	movs	r0, #16
 8001152:	f005 fac7 	bl	80066e4 <osMessageQueueNew>
 8001156:	4603      	mov	r3, r0
 8001158:	4a1a      	ldr	r2, [pc, #104]	; (80011c4 <MX_FREERTOS_Init+0xe0>)
 800115a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of JERMAMainThread */
  JERMAMainThreadHandle = osThreadNew(startMainThread, NULL, &JERMAMainThread_attributes);
 800115c:	4a1a      	ldr	r2, [pc, #104]	; (80011c8 <MX_FREERTOS_Init+0xe4>)
 800115e:	2100      	movs	r1, #0
 8001160:	481a      	ldr	r0, [pc, #104]	; (80011cc <MX_FREERTOS_Init+0xe8>)
 8001162:	f005 f945 	bl	80063f0 <osThreadNew>
 8001166:	4603      	mov	r3, r0
 8001168:	4a19      	ldr	r2, [pc, #100]	; (80011d0 <MX_FREERTOS_Init+0xec>)
 800116a:	6013      	str	r3, [r2, #0]

  /* creation of CANThread */
  CANThreadHandle = osThreadNew(startCANThread, NULL, &CANThread_attributes);
 800116c:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <MX_FREERTOS_Init+0xf0>)
 800116e:	2100      	movs	r1, #0
 8001170:	4819      	ldr	r0, [pc, #100]	; (80011d8 <MX_FREERTOS_Init+0xf4>)
 8001172:	f005 f93d 	bl	80063f0 <osThreadNew>
 8001176:	4603      	mov	r3, r0
 8001178:	4a18      	ldr	r2, [pc, #96]	; (80011dc <MX_FREERTOS_Init+0xf8>)
 800117a:	6013      	str	r3, [r2, #0]

  /* creation of RFThread */
  RFThreadHandle = osThreadNew(startRFThread, NULL, &RFThread_attributes);
 800117c:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <MX_FREERTOS_Init+0xfc>)
 800117e:	2100      	movs	r1, #0
 8001180:	4818      	ldr	r0, [pc, #96]	; (80011e4 <MX_FREERTOS_Init+0x100>)
 8001182:	f005 f935 	bl	80063f0 <osThreadNew>
 8001186:	4603      	mov	r3, r0
 8001188:	4a17      	ldr	r2, [pc, #92]	; (80011e8 <MX_FREERTOS_Init+0x104>)
 800118a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	0800c304 	.word	0x0800c304
 8001194:	2000029c 	.word	0x2000029c
 8001198:	0800c314 	.word	0x0800c314
 800119c:	200002f0 	.word	0x200002f0
 80011a0:	0800c324 	.word	0x0800c324
 80011a4:	20000344 	.word	0x20000344
 80011a8:	0800c2a4 	.word	0x0800c2a4
 80011ac:	2000028c 	.word	0x2000028c
 80011b0:	0800c2bc 	.word	0x0800c2bc
 80011b4:	20000290 	.word	0x20000290
 80011b8:	0800c2d4 	.word	0x0800c2d4
 80011bc:	20000294 	.word	0x20000294
 80011c0:	0800c2ec 	.word	0x0800c2ec
 80011c4:	20000298 	.word	0x20000298
 80011c8:	0800c238 	.word	0x0800c238
 80011cc:	080011ed 	.word	0x080011ed
 80011d0:	20000280 	.word	0x20000280
 80011d4:	0800c25c 	.word	0x0800c25c
 80011d8:	08001201 	.word	0x08001201
 80011dc:	20000284 	.word	0x20000284
 80011e0:	0800c280 	.word	0x0800c280
 80011e4:	0800128d 	.word	0x0800128d
 80011e8:	20000288 	.word	0x20000288

080011ec <startMainThread>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startMainThread */
void startMainThread(void *argument)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMainThread */
	/* Infinite loop */
	HardFault_Handler();
 80011f4:	f000 fba6 	bl	8001944 <HardFault_Handler>
	for (;;) {
		//osSemaphoreWait(RELEASE_JERMA_GASHandle, 0);
		osDelay(1);
 80011f8:	2001      	movs	r0, #1
 80011fa:	f005 f98b 	bl	8006514 <osDelay>
 80011fe:	e7fb      	b.n	80011f8 <startMainThread+0xc>

08001200 <startCANThread>:

uint8_t data[8] = { 0 };

/* USER CODE END Header_startCANThread */
void startCANThread(void *argument)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startCANThread */
	uint8_t message[8] = { 1, 2, 3, 4, 5, 6, 7, 8 };
 8001208:	4a1b      	ldr	r2, [pc, #108]	; (8001278 <startCANThread+0x78>)
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001212:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t message2[8] = { 0 };
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
	/* Infinite loop */
	for (;;) {

		CAN_Transmit(0x101, &message, 8, CAN_RTR_DATA);
 800121e:	f107 0114 	add.w	r1, r7, #20
 8001222:	2300      	movs	r3, #0
 8001224:	2208      	movs	r2, #8
 8001226:	f240 1001 	movw	r0, #257	; 0x101
 800122a:	f7ff ff21 	bl	8001070 <CAN_Transmit>
		osMessageQueueGet(CAN_Transmission_QueueHandle, &message2, NULL, 0);
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <startCANThread+0x7c>)
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	f107 010c 	add.w	r1, r7, #12
 8001236:	2300      	movs	r3, #0
 8001238:	2200      	movs	r2, #0
 800123a:	f005 fb27 	bl	800688c <osMessageQueueGet>
		printf("Got message: ");
 800123e:	4810      	ldr	r0, [pc, #64]	; (8001280 <startCANThread+0x80>)
 8001240:	f008 ff4c 	bl	800a0dc <iprintf>
		for (int i = 0; i < 8; i++)
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	e00b      	b.n	8001262 <startCANThread+0x62>
			printf("%u", message2[i]);
 800124a:	f107 020c 	add.w	r2, r7, #12
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	480b      	ldr	r0, [pc, #44]	; (8001284 <startCANThread+0x84>)
 8001258:	f008 ff40 	bl	800a0dc <iprintf>
		for (int i = 0; i < 8; i++)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	3301      	adds	r3, #1
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	2b07      	cmp	r3, #7
 8001266:	ddf0      	ble.n	800124a <startCANThread+0x4a>

		printf("\r\n");
 8001268:	4807      	ldr	r0, [pc, #28]	; (8001288 <startCANThread+0x88>)
 800126a:	f008 ff9d 	bl	800a1a8 <puts>
		//CAN_Transmit(0x101, &data, sizeof(data));
		osDelay(500);
 800126e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001272:	f005 f94f 	bl	8006514 <osDelay>
		CAN_Transmit(0x101, &message, 8, CAN_RTR_DATA);
 8001276:	e7d2      	b.n	800121e <startCANThread+0x1e>
 8001278:	0800c1c0 	.word	0x0800c1c0
 800127c:	2000028c 	.word	0x2000028c
 8001280:	0800c1a8 	.word	0x0800c1a8
 8001284:	0800c1b8 	.word	0x0800c1b8
 8001288:	0800c1bc 	.word	0x0800c1bc

0800128c <startRFThread>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startRFThread */
void startRFThread(void *argument)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startRFThread */
	uint8_t message[8] = { 1, 2, 3, 4, 5, 6, 7, 8 };
 8001294:	4a05      	ldr	r2, [pc, #20]	; (80012ac <startRFThread+0x20>)
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800129e:	e883 0003 	stmia.w	r3, {r0, r1}
	/* Infinite loop */
	for (;;) {
		//osMessageQueuePut(CAN_Transmission_QueueHandle, &message, 0,
		//osWaitForever);
		osDelay(100);
 80012a2:	2064      	movs	r0, #100	; 0x64
 80012a4:	f005 f936 	bl	8006514 <osDelay>
 80012a8:	e7fb      	b.n	80012a2 <startRFThread+0x16>
 80012aa:	bf00      	nop
 80012ac:	0800c1c0 	.word	0x0800c1c0

080012b0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  /* USER CODE END startRFThread */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80012b8:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80012ba:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80012bc:	2100      	movs	r1, #0
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f001 fa45 	bl	800274e <HAL_CAN_GetRxMessage>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 80012ca:	f000 f9cf 	bl	800166c <Error_Handler>
	}
	//printf("Callback called for message: %d", RxData[0]);
	osMessageQueuePut(CAN_Transmission_QueueHandle, RxData, 0, 0);
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	2300      	movs	r3, #0
 80012d4:	2200      	movs	r2, #0
 80012d6:	4906      	ldr	r1, [pc, #24]	; (80012f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80012d8:	f005 fa78 	bl	80067cc <osMessageQueuePut>
	osSemaphoreRelease(CAN_Recieve_CompleteHandle);
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f005 f9bb 	bl	800665c <osSemaphoreRelease>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000270 	.word	0x20000270
 80012f4:	20000238 	.word	0x20000238
 80012f8:	2000028c 	.word	0x2000028c
 80012fc:	200002f0 	.word	0x200002f0

08001300 <HAL_CAN_RxFifo1MsgPendingCallback>:
struct Hydrogen_Board_Leak_Emergency_Transmission {
	float h2_concentration;
};

/** HIGH PRIORITY ONLY TALKS TO H2 Board. */
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader_Reserved,
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_CAN_RxFifo1MsgPendingCallback+0x50>)
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 800130c:	2101      	movs	r1, #1
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f001 fa1d 	bl	800274e <HAL_CAN_GetRxMessage>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_CAN_RxFifo1MsgPendingCallback+0x1e>
			RxData_Reserved) != HAL_OK) {
		Error_Handler();
 800131a:	f000 f9a7 	bl	800166c <Error_Handler>
	}
	if (RxHeader_Reserved.StdId == 0x000) {
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10f      	bne.n	8001346 <HAL_CAN_RxFifo1MsgPendingCallback+0x46>
		// Emergency Release JERMA. GAS GAS GAS
		printf("[!HYDROGEN BOARD]: LEAK!!! Releasing JERMAAA");
 8001326:	480c      	ldr	r0, [pc, #48]	; (8001358 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 8001328:	f008 fed8 	bl	800a0dc <iprintf>
		osSemaphoreRelease(RELEASE_JERMA_GASHandle);
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f005 f993 	bl	800665c <osSemaphoreRelease>
		osMessageQueuePut(CAN_JERMA_GAS_LEAKHandle, RxData_Reserved, 0,
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 8001338:	6818      	ldr	r0, [r3, #0]
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	2200      	movs	r2, #0
 8001340:	4903      	ldr	r1, [pc, #12]	; (8001350 <HAL_CAN_RxFifo1MsgPendingCallback+0x50>)
 8001342:	f005 fa43 	bl	80067cc <osMessageQueuePut>
		osWaitForever);
	}

}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000278 	.word	0x20000278
 8001354:	20000254 	.word	0x20000254
 8001358:	0800c1c8 	.word	0x0800c1c8
 800135c:	20000344 	.word	0x20000344
 8001360:	20000298 	.word	0x20000298

08001364 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(CAN_Transmission_CompleteHandle);
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f005 f973 	bl	800665c <osSemaphoreRelease>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000029c 	.word	0x2000029c

08001384 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(CAN_Transmission_CompleteHandle);
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f005 f963 	bl	800665c <osSemaphoreRelease>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2000029c 	.word	0x2000029c

080013a4 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(CAN_Transmission_CompleteHandle);
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f005 f953 	bl	800665c <osSemaphoreRelease>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2000029c 	.word	0x2000029c

080013c4 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	4b50      	ldr	r3, [pc, #320]	; (800151c <MX_GPIO_Init+0x158>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	4a4f      	ldr	r2, [pc, #316]	; (800151c <MX_GPIO_Init+0x158>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e6:	4b4d      	ldr	r3, [pc, #308]	; (800151c <MX_GPIO_Init+0x158>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	4b4a      	ldr	r3, [pc, #296]	; (800151c <MX_GPIO_Init+0x158>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	4a49      	ldr	r2, [pc, #292]	; (800151c <MX_GPIO_Init+0x158>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fe:	4b47      	ldr	r3, [pc, #284]	; (800151c <MX_GPIO_Init+0x158>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	4b44      	ldr	r3, [pc, #272]	; (800151c <MX_GPIO_Init+0x158>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	4a43      	ldr	r2, [pc, #268]	; (800151c <MX_GPIO_Init+0x158>)
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001416:	4b41      	ldr	r3, [pc, #260]	; (800151c <MX_GPIO_Init+0x158>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001428:	483d      	ldr	r0, [pc, #244]	; (8001520 <MX_GPIO_Init+0x15c>)
 800142a:	f001 ff1b 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_NSS_GPIO_GPIO_Port, SPI_NSS_GPIO_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2110      	movs	r1, #16
 8001432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001436:	f001 ff15 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_NRST_GPIO_Port, RF_NRST_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2120      	movs	r1, #32
 800143e:	4839      	ldr	r0, [pc, #228]	; (8001524 <MX_GPIO_Init+0x160>)
 8001440:	f001 ff10 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO5_Pin;
 8001444:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001448:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800144a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800144e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO5_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	4619      	mov	r1, r3
 800145a:	4831      	ldr	r0, [pc, #196]	; (8001520 <MX_GPIO_Init+0x15c>)
 800145c:	f001 fd98 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8001460:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001464:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001466:	2301      	movs	r3, #1
 8001468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	4619      	mov	r1, r3
 8001478:	4829      	ldr	r0, [pc, #164]	; (8001520 <MX_GPIO_Init+0x15c>)
 800147a:	f001 fd89 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_NSS_GPIO_Pin;
 800147e:	2310      	movs	r3, #16
 8001480:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_NSS_GPIO_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	4619      	mov	r1, r3
 8001494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001498:	f001 fd7a 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin|DIO2_Pin|DIO3_Pin;
 800149c:	23c3      	movs	r3, #195	; 0xc3
 800149e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014aa:	f107 030c 	add.w	r3, r7, #12
 80014ae:	4619      	mov	r1, r3
 80014b0:	481c      	ldr	r0, [pc, #112]	; (8001524 <MX_GPIO_Init+0x160>)
 80014b2:	f001 fd6d 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	4619      	mov	r1, r3
 80014d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d6:	f001 fd5b 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO4_Pin;
 80014da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO4_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	4619      	mov	r1, r3
 80014f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f4:	f001 fd4c 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_NRST_Pin;
 80014f8:	2320      	movs	r3, #32
 80014fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_NRST_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	4619      	mov	r1, r3
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_GPIO_Init+0x160>)
 8001510:	f001 fd3e 	bl	8002f90 <HAL_GPIO_Init>

}
 8001514:	bf00      	nop
 8001516:	3720      	adds	r7, #32
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021000 	.word	0x40021000
 8001520:	48000800 	.word	0x48000800
 8001524:	48000400 	.word	0x48000400

08001528 <_write>:
int _write(int file, char *ptr, int len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	b29a      	uxth	r2, r3
 8001538:	f04f 33ff 	mov.w	r3, #4294967295
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	4804      	ldr	r0, [pc, #16]	; (8001550 <_write+0x28>)
 8001540:	f004 fa58 	bl	80059f4 <HAL_UART_Transmit>
	return len;
 8001544:	687b      	ldr	r3, [r7, #4]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000494 	.word	0x20000494

08001554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001558:	f000 fdc3 	bl	80020e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155c:	f000 f81b 	bl	8001596 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001560:	f7ff ff30 	bl	80013c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001564:	f000 fd0c 	bl	8001f80 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001568:	f7ff fc9c 	bl	8000ea4 <MX_CAN1_Init>
  MX_TIM1_Init();
 800156c:	f000 fb4e 	bl	8001c0c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001570:	f000 fc04 	bl	8001d7c <MX_TIM2_Init>
  MX_SPI1_Init();
 8001574:	f000 f8be 	bl	80016f4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001578:	f004 fef0 	bl	800635c <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800157c:	f7ff fdb2 	bl	80010e4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001580:	f004 ff10 	bl	80063a4 <osKernelStart>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_Delay(500);
 8001584:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001588:	f000 fde4 	bl	8002154 <HAL_Delay>
		//HAL_GPIO_WritePin(GPIOA, LED_D1_Pin, GPIO_PIN_SET);

		//CAN_Transmit(TxData, sizeof(TxData));
		//CAN_Write_Hello();
		HAL_Delay(500);
 800158c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001590:	f000 fde0 	bl	8002154 <HAL_Delay>
		HAL_Delay(500);
 8001594:	e7f6      	b.n	8001584 <main+0x30>

08001596 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b096      	sub	sp, #88	; 0x58
 800159a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2244      	movs	r2, #68	; 0x44
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f008 fedf 	bl	800a368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015aa:	463b      	mov	r3, r7
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015bc:	f001 fe78 	bl	80032b0 <HAL_PWREx_ControlVoltageScaling>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015c6:	f000 f851 	bl	800166c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015ca:	2301      	movs	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015ce:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015d2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d4:	2302      	movs	r3, #2
 80015d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d8:	2303      	movs	r3, #3
 80015da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015dc:	2301      	movs	r3, #1
 80015de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80015e0:	2314      	movs	r3, #20
 80015e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015e4:	2307      	movs	r3, #7
 80015e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015e8:	2302      	movs	r3, #2
 80015ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015ec:	2302      	movs	r3, #2
 80015ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4618      	mov	r0, r3
 80015f6:	f001 feb1 	bl	800335c <HAL_RCC_OscConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001600:	f000 f834 	bl	800166c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001604:	230f      	movs	r3, #15
 8001606:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001608:	2303      	movs	r3, #3
 800160a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001614:	2300      	movs	r3, #0
 8001616:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001618:	463b      	mov	r3, r7
 800161a:	2104      	movs	r1, #4
 800161c:	4618      	mov	r0, r3
 800161e:	f002 fab1 	bl	8003b84 <HAL_RCC_ClockConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001628:	f000 f820 	bl	800166c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_16);
 800162c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001630:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001634:	2000      	movs	r0, #0
 8001636:	f002 fba5 	bl	8003d84 <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800163a:	f002 fccd 	bl	8003fd8 <HAL_RCC_EnableCSS>
}
 800163e:	bf00      	nop
 8001640:	3758      	adds	r7, #88	; 0x58
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d101      	bne.n	800165e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800165a:	f000 fd5b 	bl	8002114 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40001000 	.word	0x40001000

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001672:	b672      	cpsid	i
}
 8001674:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e002      	b.n	8001682 <Error_Handler+0x16>
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3301      	adds	r3, #1
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <Error_Handler+0x84>)
 8001686:	4293      	cmp	r3, r2
 8001688:	ddf8      	ble.n	800167c <Error_Handler+0x10>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D1_PWM_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	e002      	b.n	8001696 <Error_Handler+0x2a>
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	3301      	adds	r3, #1
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <Error_Handler+0x84>)
 800169a:	4293      	cmp	r3, r2
 800169c:	ddf8      	ble.n	8001690 <Error_Handler+0x24>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D2_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	e002      	b.n	80016aa <Error_Handler+0x3e>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3301      	adds	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4a10      	ldr	r2, [pc, #64]	; (80016f0 <Error_Handler+0x84>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	ddf8      	ble.n	80016a4 <Error_Handler+0x38>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D3_Pin, GPIO_PIN_SET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	e002      	b.n	80016be <Error_Handler+0x52>
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	3301      	adds	r3, #1
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <Error_Handler+0x84>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	ddf8      	ble.n	80016b8 <Error_Handler+0x4c>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D1_Pin, GPIO_PIN_RESET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	e002      	b.n	80016d2 <Error_Handler+0x66>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3301      	adds	r3, #1
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <Error_Handler+0x84>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	ddf8      	ble.n	80016cc <Error_Handler+0x60>
			;
		//HAL_GPIO_WritePin(GPIOA, LED_D2_Pin, GPIO_PIN_RESET);
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80016da:	2300      	movs	r3, #0
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	e002      	b.n	80016e6 <Error_Handler+0x7a>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	4a01      	ldr	r2, [pc, #4]	; (80016f0 <Error_Handler+0x84>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	ddf8      	ble.n	80016e0 <Error_Handler+0x74>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80016ee:	e7c2      	b.n	8001676 <Error_Handler+0xa>
 80016f0:	0003d08f 	.word	0x0003d08f

080016f4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <MX_SPI1_Init+0x74>)
 80016fa:	4a1c      	ldr	r2, [pc, #112]	; (800176c <MX_SPI1_Init+0x78>)
 80016fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <MX_SPI1_Init+0x74>)
 8001700:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001704:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <MX_SPI1_Init+0x74>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <MX_SPI1_Init+0x74>)
 800170e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001712:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <MX_SPI1_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <MX_SPI1_Init+0x74>)
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_SPI1_Init+0x74>)
 8001722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001726:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <MX_SPI1_Init+0x74>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_SPI1_Init+0x74>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_SPI1_Init+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <MX_SPI1_Init+0x74>)
 800173c:	2200      	movs	r2, #0
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_SPI1_Init+0x74>)
 8001742:	2207      	movs	r2, #7
 8001744:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <MX_SPI1_Init+0x74>)
 8001748:	2200      	movs	r2, #0
 800174a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_SPI1_Init+0x74>)
 800174e:	2208      	movs	r2, #8
 8001750:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <MX_SPI1_Init+0x74>)
 8001754:	f002 ffb4 	bl	80046c0 <HAL_SPI_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800175e:	f7ff ff85 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000348 	.word	0x20000348
 800176c:	40013000 	.word	0x40013000

08001770 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a17      	ldr	r2, [pc, #92]	; (80017ec <HAL_SPI_MspInit+0x7c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d128      	bne.n	80017e4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001792:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <HAL_SPI_MspInit+0x80>)
 8001794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001796:	4a16      	ldr	r2, [pc, #88]	; (80017f0 <HAL_SPI_MspInit+0x80>)
 8001798:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800179c:	6613      	str	r3, [r2, #96]	; 0x60
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <HAL_SPI_MspInit+0x80>)
 80017a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <HAL_SPI_MspInit+0x80>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	4a10      	ldr	r2, [pc, #64]	; (80017f0 <HAL_SPI_MspInit+0x80>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <HAL_SPI_MspInit+0x80>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017c2:	23e0      	movs	r3, #224	; 0xe0
 80017c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ce:	2303      	movs	r3, #3
 80017d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017d2:	2305      	movs	r3, #5
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e0:	f001 fbd6 	bl	8002f90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80017e4:	bf00      	nop
 80017e6:	3728      	adds	r7, #40	; 0x28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40013000 	.word	0x40013000
 80017f0:	40021000 	.word	0x40021000

080017f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_MspInit+0x4c>)
 80017fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fe:	4a10      	ldr	r2, [pc, #64]	; (8001840 <HAL_MspInit+0x4c>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6613      	str	r3, [r2, #96]	; 0x60
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_MspInit+0x4c>)
 8001808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_MspInit+0x4c>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_MspInit+0x4c>)
 8001818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181c:	6593      	str	r3, [r2, #88]	; 0x58
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_MspInit+0x4c>)
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	210f      	movs	r1, #15
 800182e:	f06f 0001 	mvn.w	r0, #1
 8001832:	f001 fb83 	bl	8002f3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000

08001844 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08e      	sub	sp, #56	; 0x38
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001852:	4b34      	ldr	r3, [pc, #208]	; (8001924 <HAL_InitTick+0xe0>)
 8001854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001856:	4a33      	ldr	r2, [pc, #204]	; (8001924 <HAL_InitTick+0xe0>)
 8001858:	f043 0310 	orr.w	r3, r3, #16
 800185c:	6593      	str	r3, [r2, #88]	; 0x58
 800185e:	4b31      	ldr	r3, [pc, #196]	; (8001924 <HAL_InitTick+0xe0>)
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	f003 0310 	and.w	r3, r3, #16
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800186a:	f107 0210 	add.w	r2, r7, #16
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f002 fb7d 	bl	8003f74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800187e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001880:	2b00      	cmp	r3, #0
 8001882:	d103      	bne.n	800188c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001884:	f002 fb4a 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 8001888:	6378      	str	r0, [r7, #52]	; 0x34
 800188a:	e004      	b.n	8001896 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800188c:	f002 fb46 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 8001890:	4603      	mov	r3, r0
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001898:	4a23      	ldr	r2, [pc, #140]	; (8001928 <HAL_InitTick+0xe4>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	0c9b      	lsrs	r3, r3, #18
 80018a0:	3b01      	subs	r3, #1
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018a4:	4b21      	ldr	r3, [pc, #132]	; (800192c <HAL_InitTick+0xe8>)
 80018a6:	4a22      	ldr	r2, [pc, #136]	; (8001930 <HAL_InitTick+0xec>)
 80018a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <HAL_InitTick+0xe8>)
 80018ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018b0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018b2:	4a1e      	ldr	r2, [pc, #120]	; (800192c <HAL_InitTick+0xe8>)
 80018b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018b8:	4b1c      	ldr	r3, [pc, #112]	; (800192c <HAL_InitTick+0xe8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018be:	4b1b      	ldr	r3, [pc, #108]	; (800192c <HAL_InitTick+0xe8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_InitTick+0xe8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80018ca:	4818      	ldr	r0, [pc, #96]	; (800192c <HAL_InitTick+0xe8>)
 80018cc:	f002 ff9b 	bl	8004806 <HAL_TIM_Base_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80018d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d11b      	bne.n	8001916 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80018de:	4813      	ldr	r0, [pc, #76]	; (800192c <HAL_InitTick+0xe8>)
 80018e0:	f002 ffe8 	bl	80048b4 <HAL_TIM_Base_Start_IT>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80018ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d111      	bne.n	8001916 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018f2:	2036      	movs	r0, #54	; 0x36
 80018f4:	f001 fb3e 	bl	8002f74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b0f      	cmp	r3, #15
 80018fc:	d808      	bhi.n	8001910 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80018fe:	2200      	movs	r2, #0
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	2036      	movs	r0, #54	; 0x36
 8001904:	f001 fb1a 	bl	8002f3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001908:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <HAL_InitTick+0xf0>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e002      	b.n	8001916 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001916:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800191a:	4618      	mov	r0, r3
 800191c:	3738      	adds	r7, #56	; 0x38
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	431bde83 	.word	0x431bde83
 800192c:	200003ac 	.word	0x200003ac
 8001930:	40001000 	.word	0x40001000
 8001934:	20000004 	.word	0x20000004

08001938 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	HAL_RCC_NMI_IRQHandler();
 800193c:	f002 fb5c 	bl	8003ff8 <HAL_RCC_NMI_IRQHandler>
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001940:	e7fe      	b.n	8001940 <NMI_Handler+0x8>
	...

08001944 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pins : PBPin PBPin PBPin PBPin */
	GPIO_InitStruct.Pin = LED_D1_PWM_Pin;
 8001958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800195c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D1_PWM_GPIO_Port, &GPIO_InitStruct);
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	4619      	mov	r1, r3
 800196a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196e:	f001 fb0f 	bl	8002f90 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D2_PWM_Pin;
 8001972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001976:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001978:	2301      	movs	r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D2_PWM_GPIO_Port, &GPIO_InitStruct);
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	4619      	mov	r1, r3
 8001984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001988:	f001 fb02 	bl	8002f90 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D3_PWM_Pin;
 800198c:	2302      	movs	r3, #2
 800198e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	4619      	mov	r1, r3
 800199c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a0:	f001 faf6 	bl	8002f90 <HAL_GPIO_Init>
	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
		/* USER CODE BEGIN W1_HardFault_IRQn 0 */
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
 80019a8:	e002      	b.n	80019b0 <HardFault_Handler+0x6c>
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3301      	adds	r3, #1
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	4a1b      	ldr	r2, [pc, #108]	; (8001a20 <HardFault_Handler+0xdc>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	ddf8      	ble.n	80019aa <HardFault_Handler+0x66>
			;
		HAL_GPIO_WritePin(LED_D1_PWM_GPIO_Port, LED_D1_PWM_Pin, GPIO_PIN_SET);
 80019b8:	2201      	movs	r2, #1
 80019ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c2:	f001 fc4f 	bl	8003264 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D2_PWM_GPIO_Port, LED_D2_PWM_Pin, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d0:	f001 fc48 	bl	8003264 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D3_PWM_GPIO_Port, LED_D3_PWM_Pin, GPIO_PIN_SET);
 80019d4:	2201      	movs	r2, #1
 80019d6:	2102      	movs	r1, #2
 80019d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019dc:	f001 fc42 	bl	8003264 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	61bb      	str	r3, [r7, #24]
 80019e4:	e002      	b.n	80019ec <HardFault_Handler+0xa8>
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	3301      	adds	r3, #1
 80019ea:	61bb      	str	r3, [r7, #24]
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	4a0c      	ldr	r2, [pc, #48]	; (8001a20 <HardFault_Handler+0xdc>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	ddf8      	ble.n	80019e6 <HardFault_Handler+0xa2>
			;
		HAL_GPIO_WritePin(LED_D1_PWM_GPIO_Port, LED_D1_PWM_Pin, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019fe:	f001 fc31 	bl	8003264 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D2_PWM_GPIO_Port, LED_D2_PWM_Pin, GPIO_PIN_SET);
 8001a02:	2201      	movs	r2, #1
 8001a04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0c:	f001 fc2a 	bl	8003264 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D3_PWM_GPIO_Port, LED_D3_PWM_Pin, GPIO_PIN_RESET);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2102      	movs	r1, #2
 8001a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a18:	f001 fc24 	bl	8003264 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8001a1c:	e7c2      	b.n	80019a4 <HardFault_Handler+0x60>
 8001a1e:	bf00      	nop
 8001a20:	0003d08f 	.word	0x0003d08f

08001a24 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001a28:	e7fe      	b.n	8001a28 <MemManage_Handler+0x4>

08001a2a <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8001a2e:	e7fe      	b.n	8001a2e <BusFault_Handler+0x4>

08001a30 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001a34:	e7fe      	b.n	8001a34 <UsageFault_Handler+0x4>

08001a36 <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <CAN1_TX_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles CAN1 TX interrupt.
 */
void CAN1_TX_IRQHandler(void) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_TX_IRQn 0 */

	/* USER CODE END CAN1_TX_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <CAN1_TX_IRQHandler+0x10>)
 8001a4a:	f000 ffb8 	bl	80029be <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_TX_IRQn 1 */

	/* USER CODE END CAN1_TX_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000210 	.word	0x20000210

08001a58 <CAN1_RX0_IRQHandler>:

/**
 * @brief This function handles CAN1 RX0 interrupt.
 */
void CAN1_RX0_IRQHandler(void) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_RX0_IRQn 0 */

	/* USER CODE END CAN1_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <CAN1_RX0_IRQHandler+0x10>)
 8001a5e:	f000 ffae 	bl	80029be <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_RX0_IRQn 1 */

	/* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000210 	.word	0x20000210

08001a6c <CAN1_RX1_IRQHandler>:

/**
 * @brief This function handles CAN1 RX1 interrupt.
 */
void CAN1_RX1_IRQHandler(void) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_RX1_IRQn 0 */

	/* USER CODE END CAN1_RX1_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <CAN1_RX1_IRQHandler+0x10>)
 8001a72:	f000 ffa4 	bl	80029be <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_RX1_IRQn 1 */

	/* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000210 	.word	0x20000210

08001a80 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <TIM6_DAC_IRQHandler+0x10>)
 8001a86:	f002 ffca 	bl	8004a1e <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200003ac 	.word	0x200003ac

08001a94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return 1;
 8001a98:	2301      	movs	r3, #1
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <_kill>:

int _kill(int pid, int sig)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aae:	f008 fcad 	bl	800a40c <__errno>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2216      	movs	r2, #22
 8001ab6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <_exit>:

void _exit (int status)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ffe7 	bl	8001aa4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ad6:	e7fe      	b.n	8001ad6 <_exit+0x12>

08001ad8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	e00a      	b.n	8001b00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aea:	f3af 8000 	nop.w
 8001aee:	4601      	mov	r1, r0
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	60ba      	str	r2, [r7, #8]
 8001af6:	b2ca      	uxtb	r2, r1
 8001af8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	3301      	adds	r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dbf0      	blt.n	8001aea <_read+0x12>
  }

  return len;
 8001b08:	687b      	ldr	r3, [r7, #4]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b3a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <_isatty>:

int _isatty(int file)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b84:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <_sbrk+0x5c>)
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <_sbrk+0x60>)
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <_sbrk+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d102      	bne.n	8001b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <_sbrk+0x64>)
 8001b9a:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <_sbrk+0x68>)
 8001b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d207      	bcs.n	8001bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bac:	f008 fc2e 	bl	800a40c <__errno>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bba:	e009      	b.n	8001bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <_sbrk+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <_sbrk+0x64>)
 8001bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bce:	68fb      	ldr	r3, [r7, #12]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20010000 	.word	0x20010000
 8001bdc:	00000400 	.word	0x00000400
 8001be0:	200003f8 	.word	0x200003f8
 8001be4:	20002750 	.word	0x20002750

08001be8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <SystemInit+0x20>)
 8001bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf2:	4a05      	ldr	r2, [pc, #20]	; (8001c08 <SystemInit+0x20>)
 8001bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b09a      	sub	sp, #104	; 0x68
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
 8001c3c:	615a      	str	r2, [r3, #20]
 8001c3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	222c      	movs	r2, #44	; 0x2c
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f008 fb8e 	bl	800a368 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c4c:	4b49      	ldr	r3, [pc, #292]	; (8001d74 <MX_TIM1_Init+0x168>)
 8001c4e:	4a4a      	ldr	r2, [pc, #296]	; (8001d78 <MX_TIM1_Init+0x16c>)
 8001c50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 8001c52:	4b48      	ldr	r3, [pc, #288]	; (8001d74 <MX_TIM1_Init+0x168>)
 8001c54:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001c58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5a:	4b46      	ldr	r3, [pc, #280]	; (8001d74 <MX_TIM1_Init+0x168>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001c60:	4b44      	ldr	r3, [pc, #272]	; (8001d74 <MX_TIM1_Init+0x168>)
 8001c62:	2263      	movs	r2, #99	; 0x63
 8001c64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c66:	4b43      	ldr	r3, [pc, #268]	; (8001d74 <MX_TIM1_Init+0x168>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c6c:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <MX_TIM1_Init+0x168>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c72:	4b40      	ldr	r3, [pc, #256]	; (8001d74 <MX_TIM1_Init+0x168>)
 8001c74:	2280      	movs	r2, #128	; 0x80
 8001c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c78:	483e      	ldr	r0, [pc, #248]	; (8001d74 <MX_TIM1_Init+0x168>)
 8001c7a:	f002 fdc4 	bl	8004806 <HAL_TIM_Base_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001c84:	f7ff fcf2 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c92:	4619      	mov	r1, r3
 8001c94:	4837      	ldr	r0, [pc, #220]	; (8001d74 <MX_TIM1_Init+0x168>)
 8001c96:	f003 f8f5 	bl	8004e84 <HAL_TIM_ConfigClockSource>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001ca0:	f7ff fce4 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ca4:	4833      	ldr	r0, [pc, #204]	; (8001d74 <MX_TIM1_Init+0x168>)
 8001ca6:	f002 fe59 	bl	800495c <HAL_TIM_PWM_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001cb0:	f7ff fcdc 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cc0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	482b      	ldr	r0, [pc, #172]	; (8001d74 <MX_TIM1_Init+0x168>)
 8001cc8:	f003 fd4a 	bl	8005760 <HAL_TIMEx_MasterConfigSynchronization>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001cd2:	f7ff fccb 	bl	800166c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cd6:	2360      	movs	r3, #96	; 0x60
 8001cd8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cf2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	481e      	ldr	r0, [pc, #120]	; (8001d74 <MX_TIM1_Init+0x168>)
 8001cfc:	f002 ffae 	bl	8004c5c <HAL_TIM_PWM_ConfigChannel>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001d06:	f7ff fcb1 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d0e:	2208      	movs	r2, #8
 8001d10:	4619      	mov	r1, r3
 8001d12:	4818      	ldr	r0, [pc, #96]	; (8001d74 <MX_TIM1_Init+0x168>)
 8001d14:	f002 ffa2 	bl	8004c5c <HAL_TIM_PWM_ConfigChannel>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001d1e:	f7ff fca5 	bl	800166c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d3a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	4619      	mov	r1, r3
 8001d56:	4807      	ldr	r0, [pc, #28]	; (8001d74 <MX_TIM1_Init+0x168>)
 8001d58:	f003 fd68 	bl	800582c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001d62:	f7ff fc83 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d66:	4803      	ldr	r0, [pc, #12]	; (8001d74 <MX_TIM1_Init+0x168>)
 8001d68:	f000 f8b0 	bl	8001ecc <HAL_TIM_MspPostInit>

}
 8001d6c:	bf00      	nop
 8001d6e:	3768      	adds	r7, #104	; 0x68
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	200003fc 	.word	0x200003fc
 8001d78:	40012c00 	.word	0x40012c00

08001d7c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08e      	sub	sp, #56	; 0x38
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d9c:	463b      	mov	r3, r7
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	611a      	str	r2, [r3, #16]
 8001daa:	615a      	str	r2, [r3, #20]
 8001dac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dae:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <MX_TIM2_Init+0xe8>)
 8001db0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001db4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001db6:	4b2b      	ldr	r3, [pc, #172]	; (8001e64 <MX_TIM2_Init+0xe8>)
 8001db8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001dbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbe:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <MX_TIM2_Init+0xe8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001dc4:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <MX_TIM2_Init+0xe8>)
 8001dc6:	2263      	movs	r2, #99	; 0x63
 8001dc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dca:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <MX_TIM2_Init+0xe8>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dd0:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <MX_TIM2_Init+0xe8>)
 8001dd2:	2280      	movs	r2, #128	; 0x80
 8001dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dd6:	4823      	ldr	r0, [pc, #140]	; (8001e64 <MX_TIM2_Init+0xe8>)
 8001dd8:	f002 fd15 	bl	8004806 <HAL_TIM_Base_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001de2:	f7ff fc43 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001df0:	4619      	mov	r1, r3
 8001df2:	481c      	ldr	r0, [pc, #112]	; (8001e64 <MX_TIM2_Init+0xe8>)
 8001df4:	f003 f846 	bl	8004e84 <HAL_TIM_ConfigClockSource>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001dfe:	f7ff fc35 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e02:	4818      	ldr	r0, [pc, #96]	; (8001e64 <MX_TIM2_Init+0xe8>)
 8001e04:	f002 fdaa 	bl	800495c <HAL_TIM_PWM_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001e0e:	f7ff fc2d 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e1a:	f107 031c 	add.w	r3, r7, #28
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4810      	ldr	r0, [pc, #64]	; (8001e64 <MX_TIM2_Init+0xe8>)
 8001e22:	f003 fc9d 	bl	8005760 <HAL_TIMEx_MasterConfigSynchronization>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001e2c:	f7ff fc1e 	bl	800166c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e30:	2360      	movs	r3, #96	; 0x60
 8001e32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e40:	463b      	mov	r3, r7
 8001e42:	2204      	movs	r2, #4
 8001e44:	4619      	mov	r1, r3
 8001e46:	4807      	ldr	r0, [pc, #28]	; (8001e64 <MX_TIM2_Init+0xe8>)
 8001e48:	f002 ff08 	bl	8004c5c <HAL_TIM_PWM_ConfigChannel>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001e52:	f7ff fc0b 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e56:	4803      	ldr	r0, [pc, #12]	; (8001e64 <MX_TIM2_Init+0xe8>)
 8001e58:	f000 f838 	bl	8001ecc <HAL_TIM_MspPostInit>

}
 8001e5c:	bf00      	nop
 8001e5e:	3738      	adds	r7, #56	; 0x38
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000448 	.word	0x20000448

08001e68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a13      	ldr	r2, [pc, #76]	; (8001ec4 <HAL_TIM_Base_MspInit+0x5c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d10c      	bne.n	8001e94 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <HAL_TIM_Base_MspInit+0x60>)
 8001e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7e:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <HAL_TIM_Base_MspInit+0x60>)
 8001e80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e84:	6613      	str	r3, [r2, #96]	; 0x60
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HAL_TIM_Base_MspInit+0x60>)
 8001e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e92:	e010      	b.n	8001eb6 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e9c:	d10b      	bne.n	8001eb6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_TIM_Base_MspInit+0x60>)
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea2:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <HAL_TIM_Base_MspInit+0x60>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <HAL_TIM_Base_MspInit+0x60>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
}
 8001eb6:	bf00      	nop
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40012c00 	.word	0x40012c00
 8001ec8:	40021000 	.word	0x40021000

08001ecc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a23      	ldr	r2, [pc, #140]	; (8001f78 <HAL_TIM_MspPostInit+0xac>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d11e      	bne.n	8001f2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eee:	4b23      	ldr	r3, [pc, #140]	; (8001f7c <HAL_TIM_MspPostInit+0xb0>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	4a22      	ldr	r2, [pc, #136]	; (8001f7c <HAL_TIM_MspPostInit+0xb0>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001efa:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <HAL_TIM_MspPostInit+0xb0>)
 8001efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LED_D2_PWM_Pin|LED_D1_PWM_Pin;
 8001f06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f14:	2300      	movs	r3, #0
 8001f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	4619      	mov	r1, r3
 8001f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f26:	f001 f833 	bl	8002f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f2a:	e021      	b.n	8001f70 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f34:	d11c      	bne.n	8001f70 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_TIM_MspPostInit+0xb0>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	4a10      	ldr	r2, [pc, #64]	; (8001f7c <HAL_TIM_MspPostInit+0xb0>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <HAL_TIM_MspPostInit+0xb0>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_D3_PWM_Pin;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f6c:	f001 f810 	bl	8002f90 <HAL_GPIO_Init>
}
 8001f70:	bf00      	nop
 8001f72:	3728      	adds	r7, #40	; 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40012c00 	.word	0x40012c00
 8001f7c:	40021000 	.word	0x40021000

08001f80 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f84:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001f86:	4a15      	ldr	r2, [pc, #84]	; (8001fdc <MX_USART2_UART_Init+0x5c>)
 8001f88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f8a:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001f8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001fc4:	f003 fcc8 	bl	8005958 <HAL_UART_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001fce:	f7ff fb4d 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000494 	.word	0x20000494
 8001fdc:	40004400 	.word	0x40004400

08001fe0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b09e      	sub	sp, #120	; 0x78
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	2254      	movs	r2, #84	; 0x54
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f008 f9b1 	bl	800a368 <memset>
  if(uartHandle->Instance==USART2)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a1f      	ldr	r2, [pc, #124]	; (8002088 <HAL_UART_MspInit+0xa8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d136      	bne.n	800207e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002010:	2302      	movs	r3, #2
 8002012:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002014:	2300      	movs	r3, #0
 8002016:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002018:	f107 0310 	add.w	r3, r7, #16
 800201c:	4618      	mov	r0, r3
 800201e:	f002 f867 	bl	80040f0 <HAL_RCCEx_PeriphCLKConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002028:	f7ff fb20 	bl	800166c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800202c:	4b17      	ldr	r3, [pc, #92]	; (800208c <HAL_UART_MspInit+0xac>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	4a16      	ldr	r2, [pc, #88]	; (800208c <HAL_UART_MspInit+0xac>)
 8002032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002036:	6593      	str	r3, [r2, #88]	; 0x58
 8002038:	4b14      	ldr	r3, [pc, #80]	; (800208c <HAL_UART_MspInit+0xac>)
 800203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_UART_MspInit+0xac>)
 8002046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002048:	4a10      	ldr	r2, [pc, #64]	; (800208c <HAL_UART_MspInit+0xac>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002050:	4b0e      	ldr	r3, [pc, #56]	; (800208c <HAL_UART_MspInit+0xac>)
 8002052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800205c:	230c      	movs	r3, #12
 800205e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	2302      	movs	r3, #2
 8002062:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002068:	2303      	movs	r3, #3
 800206a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800206c:	2307      	movs	r3, #7
 800206e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002070:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002074:	4619      	mov	r1, r3
 8002076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207a:	f000 ff89 	bl	8002f90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800207e:	bf00      	nop
 8002080:	3778      	adds	r7, #120	; 0x78
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40004400 	.word	0x40004400
 800208c:	40021000 	.word	0x40021000

08002090 <Reset_Handler>:
 8002090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020c8 <LoopForever+0x2>
 8002094:	f7ff fda8 	bl	8001be8 <SystemInit>
 8002098:	480c      	ldr	r0, [pc, #48]	; (80020cc <LoopForever+0x6>)
 800209a:	490d      	ldr	r1, [pc, #52]	; (80020d0 <LoopForever+0xa>)
 800209c:	4a0d      	ldr	r2, [pc, #52]	; (80020d4 <LoopForever+0xe>)
 800209e:	2300      	movs	r3, #0
 80020a0:	e002      	b.n	80020a8 <LoopCopyDataInit>

080020a2 <CopyDataInit>:
 80020a2:	58d4      	ldr	r4, [r2, r3]
 80020a4:	50c4      	str	r4, [r0, r3]
 80020a6:	3304      	adds	r3, #4

080020a8 <LoopCopyDataInit>:
 80020a8:	18c4      	adds	r4, r0, r3
 80020aa:	428c      	cmp	r4, r1
 80020ac:	d3f9      	bcc.n	80020a2 <CopyDataInit>
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <LoopForever+0x12>)
 80020b0:	4c0a      	ldr	r4, [pc, #40]	; (80020dc <LoopForever+0x16>)
 80020b2:	2300      	movs	r3, #0
 80020b4:	e001      	b.n	80020ba <LoopFillZerobss>

080020b6 <FillZerobss>:
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	3204      	adds	r2, #4

080020ba <LoopFillZerobss>:
 80020ba:	42a2      	cmp	r2, r4
 80020bc:	d3fb      	bcc.n	80020b6 <FillZerobss>
 80020be:	f008 f9ab 	bl	800a418 <__libc_init_array>
 80020c2:	f7ff fa47 	bl	8001554 <main>

080020c6 <LoopForever>:
 80020c6:	e7fe      	b.n	80020c6 <LoopForever>
 80020c8:	20010000 	.word	0x20010000
 80020cc:	20000000 	.word	0x20000000
 80020d0:	200001d8 	.word	0x200001d8
 80020d4:	0800c700 	.word	0x0800c700
 80020d8:	200001d8 	.word	0x200001d8
 80020dc:	20002750 	.word	0x20002750

080020e0 <ADC1_IRQHandler>:
 80020e0:	e7fe      	b.n	80020e0 <ADC1_IRQHandler>

080020e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ec:	2003      	movs	r0, #3
 80020ee:	f000 ff1a 	bl	8002f26 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020f2:	200f      	movs	r0, #15
 80020f4:	f7ff fba6 	bl	8001844 <HAL_InitTick>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	71fb      	strb	r3, [r7, #7]
 8002102:	e001      	b.n	8002108 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002104:	f7ff fb76 	bl	80017f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002108:	79fb      	ldrb	r3, [r7, #7]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_IncTick+0x20>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_IncTick+0x24>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4413      	add	r3, r2
 8002124:	4a04      	ldr	r2, [pc, #16]	; (8002138 <HAL_IncTick+0x24>)
 8002126:	6013      	str	r3, [r2, #0]
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20000008 	.word	0x20000008
 8002138:	20000518 	.word	0x20000518

0800213c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return uwTick;
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <HAL_GetTick+0x14>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000518 	.word	0x20000518

08002154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff ffee 	bl	800213c <HAL_GetTick>
 8002160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216c:	d005      	beq.n	800217a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800216e:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_Delay+0x44>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800217a:	bf00      	nop
 800217c:	f7ff ffde 	bl	800213c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	429a      	cmp	r2, r3
 800218a:	d8f7      	bhi.n	800217c <HAL_Delay+0x28>
  {
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000008 	.word	0x20000008

0800219c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e0ed      	b.n	800238a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d102      	bne.n	80021c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe feaa 	bl	8000f14 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0201 	orr.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021d0:	f7ff ffb4 	bl	800213c <HAL_GetTick>
 80021d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021d6:	e012      	b.n	80021fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021d8:	f7ff ffb0 	bl	800213c <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b0a      	cmp	r3, #10
 80021e4:	d90b      	bls.n	80021fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2205      	movs	r2, #5
 80021f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0c5      	b.n	800238a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0e5      	beq.n	80021d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0202 	bic.w	r2, r2, #2
 800221a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800221c:	f7ff ff8e 	bl	800213c <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002222:	e012      	b.n	800224a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002224:	f7ff ff8a 	bl	800213c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b0a      	cmp	r3, #10
 8002230:	d90b      	bls.n	800224a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2205      	movs	r2, #5
 8002242:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e09f      	b.n	800238a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e5      	bne.n	8002224 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7e1b      	ldrb	r3, [r3, #24]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d108      	bne.n	8002272 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	e007      	b.n	8002282 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002280:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7e5b      	ldrb	r3, [r3, #25]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d108      	bne.n	800229c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	e007      	b.n	80022ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	7e9b      	ldrb	r3, [r3, #26]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d108      	bne.n	80022c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0220 	orr.w	r2, r2, #32
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	e007      	b.n	80022d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0220 	bic.w	r2, r2, #32
 80022d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	7edb      	ldrb	r3, [r3, #27]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d108      	bne.n	80022f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0210 	bic.w	r2, r2, #16
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	e007      	b.n	8002300 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0210 	orr.w	r2, r2, #16
 80022fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7f1b      	ldrb	r3, [r3, #28]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d108      	bne.n	800231a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0208 	orr.w	r2, r2, #8
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	e007      	b.n	800232a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0208 	bic.w	r2, r2, #8
 8002328:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	7f5b      	ldrb	r3, [r3, #29]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d108      	bne.n	8002344 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f042 0204 	orr.w	r2, r2, #4
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	e007      	b.n	8002354 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0204 	bic.w	r2, r2, #4
 8002352:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	ea42 0103 	orr.w	r1, r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	1e5a      	subs	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002392:	b480      	push	{r7}
 8002394:	b087      	sub	sp, #28
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023a8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80023aa:	7cfb      	ldrb	r3, [r7, #19]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d003      	beq.n	80023b8 <HAL_CAN_ConfigFilter+0x26>
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	f040 80aa 	bne.w	800250c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023be:	f043 0201 	orr.w	r2, r3, #1
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	2201      	movs	r2, #1
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	401a      	ands	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d123      	bne.n	800243a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	401a      	ands	r2, r3
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002414:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	3248      	adds	r2, #72	; 0x48
 800241a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800242e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002430:	6979      	ldr	r1, [r7, #20]
 8002432:	3348      	adds	r3, #72	; 0x48
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	440b      	add	r3, r1
 8002438:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d122      	bne.n	8002488 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	431a      	orrs	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002462:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	3248      	adds	r2, #72	; 0x48
 8002468:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800247c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800247e:	6979      	ldr	r1, [r7, #20]
 8002480:	3348      	adds	r3, #72	; 0x48
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d109      	bne.n	80024a4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	43db      	mvns	r3, r3
 800249a:	401a      	ands	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80024a2:	e007      	b.n	80024b4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d109      	bne.n	80024d0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	401a      	ands	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80024ce:	e007      	b.n	80024e0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	431a      	orrs	r2, r3
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d107      	bne.n	80024f8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024fe:	f023 0201 	bic.w	r2, r3, #1
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	e006      	b.n	800251a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
  }
}
 800251a:	4618      	mov	r0, r3
 800251c:	371c      	adds	r7, #28
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b01      	cmp	r3, #1
 8002538:	d12e      	bne.n	8002598 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2202      	movs	r2, #2
 800253e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0201 	bic.w	r2, r2, #1
 8002550:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002552:	f7ff fdf3 	bl	800213c <HAL_GetTick>
 8002556:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002558:	e012      	b.n	8002580 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800255a:	f7ff fdef 	bl	800213c <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b0a      	cmp	r3, #10
 8002566:	d90b      	bls.n	8002580 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2205      	movs	r2, #5
 8002578:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e012      	b.n	80025a6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1e5      	bne.n	800255a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	e006      	b.n	80025a6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
  }
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b089      	sub	sp, #36	; 0x24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80025cc:	7ffb      	ldrb	r3, [r7, #31]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d003      	beq.n	80025da <HAL_CAN_AddTxMessage+0x2c>
 80025d2:	7ffb      	ldrb	r3, [r7, #31]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	f040 80ad 	bne.w	8002734 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10a      	bne.n	80025fa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d105      	bne.n	80025fa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 8095 	beq.w	8002724 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	0e1b      	lsrs	r3, r3, #24
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002604:	2201      	movs	r2, #1
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	409a      	lsls	r2, r3
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10d      	bne.n	8002632 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002620:	68f9      	ldr	r1, [r7, #12]
 8002622:	6809      	ldr	r1, [r1, #0]
 8002624:	431a      	orrs	r2, r3
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	3318      	adds	r3, #24
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	440b      	add	r3, r1
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	e00f      	b.n	8002652 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800263c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002642:	68f9      	ldr	r1, [r7, #12]
 8002644:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002646:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	3318      	adds	r3, #24
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	440b      	add	r3, r1
 8002650:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6819      	ldr	r1, [r3, #0]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	3318      	adds	r3, #24
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	440b      	add	r3, r1
 8002662:	3304      	adds	r3, #4
 8002664:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	7d1b      	ldrb	r3, [r3, #20]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d111      	bne.n	8002692 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	3318      	adds	r3, #24
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	4413      	add	r3, r2
 800267a:	3304      	adds	r3, #4
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	6811      	ldr	r1, [r2, #0]
 8002682:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	3318      	adds	r3, #24
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	440b      	add	r3, r1
 800268e:	3304      	adds	r3, #4
 8002690:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3307      	adds	r3, #7
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	061a      	lsls	r2, r3, #24
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3306      	adds	r3, #6
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	041b      	lsls	r3, r3, #16
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3305      	adds	r3, #5
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	4313      	orrs	r3, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	3204      	adds	r2, #4
 80026b2:	7812      	ldrb	r2, [r2, #0]
 80026b4:	4610      	mov	r0, r2
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	6811      	ldr	r1, [r2, #0]
 80026ba:	ea43 0200 	orr.w	r2, r3, r0
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	440b      	add	r3, r1
 80026c4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80026c8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3303      	adds	r3, #3
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	061a      	lsls	r2, r3, #24
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3302      	adds	r3, #2
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	041b      	lsls	r3, r3, #16
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3301      	adds	r3, #1
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	4313      	orrs	r3, r2
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	7812      	ldrb	r2, [r2, #0]
 80026ea:	4610      	mov	r0, r2
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	6811      	ldr	r1, [r2, #0]
 80026f0:	ea43 0200 	orr.w	r2, r3, r0
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	440b      	add	r3, r1
 80026fa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80026fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	3318      	adds	r3, #24
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	4413      	add	r3, r2
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	6811      	ldr	r1, [r2, #0]
 8002712:	f043 0201 	orr.w	r2, r3, #1
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	3318      	adds	r3, #24
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	440b      	add	r3, r1
 800271e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	e00e      	b.n	8002742 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e006      	b.n	8002742 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
  }
}
 8002742:	4618      	mov	r0, r3
 8002744:	3724      	adds	r7, #36	; 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800274e:	b480      	push	{r7}
 8002750:	b087      	sub	sp, #28
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002762:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002764:	7dfb      	ldrb	r3, [r7, #23]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d003      	beq.n	8002772 <HAL_CAN_GetRxMessage+0x24>
 800276a:	7dfb      	ldrb	r3, [r7, #23]
 800276c:	2b02      	cmp	r3, #2
 800276e:	f040 80f3 	bne.w	8002958 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10e      	bne.n	8002796 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d116      	bne.n	80027b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e0e7      	b.n	8002966 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d107      	bne.n	80027b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0d8      	b.n	8002966 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	331b      	adds	r3, #27
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	4413      	add	r3, r2
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0204 	and.w	r2, r3, #4
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10c      	bne.n	80027ec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	331b      	adds	r3, #27
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	4413      	add	r3, r2
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	0d5b      	lsrs	r3, r3, #21
 80027e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	e00b      	b.n	8002804 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	331b      	adds	r3, #27
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	4413      	add	r3, r2
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	08db      	lsrs	r3, r3, #3
 80027fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	331b      	adds	r3, #27
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	4413      	add	r3, r2
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0202 	and.w	r2, r3, #2
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	331b      	adds	r3, #27
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	4413      	add	r3, r2
 8002826:	3304      	adds	r3, #4
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 020f 	and.w	r2, r3, #15
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	331b      	adds	r3, #27
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	4413      	add	r3, r2
 800283e:	3304      	adds	r3, #4
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	b2da      	uxtb	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	331b      	adds	r3, #27
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	4413      	add	r3, r2
 8002856:	3304      	adds	r3, #4
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	0c1b      	lsrs	r3, r3, #16
 800285c:	b29a      	uxth	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	4413      	add	r3, r2
 800286c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	4413      	add	r3, r2
 8002882:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0a1a      	lsrs	r2, r3, #8
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	3301      	adds	r3, #1
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	4413      	add	r3, r2
 800289c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	0c1a      	lsrs	r2, r3, #16
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	3302      	adds	r3, #2
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0e1a      	lsrs	r2, r3, #24
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	3303      	adds	r3, #3
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	3304      	adds	r3, #4
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	0a1a      	lsrs	r2, r3, #8
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	3305      	adds	r3, #5
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	4413      	add	r3, r2
 8002902:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	0c1a      	lsrs	r2, r3, #16
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	3306      	adds	r3, #6
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	011b      	lsls	r3, r3, #4
 800291a:	4413      	add	r3, r2
 800291c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	0e1a      	lsrs	r2, r3, #24
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	3307      	adds	r3, #7
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d108      	bne.n	8002944 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f042 0220 	orr.w	r2, r2, #32
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	e007      	b.n	8002954 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691a      	ldr	r2, [r3, #16]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0220 	orr.w	r2, r2, #32
 8002952:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	e006      	b.n	8002966 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
  }
}
 8002966:	4618      	mov	r0, r3
 8002968:	371c      	adds	r7, #28
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002972:	b480      	push	{r7}
 8002974:	b085      	sub	sp, #20
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002982:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d002      	beq.n	8002990 <HAL_CAN_ActivateNotification+0x1e>
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d109      	bne.n	80029a4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6959      	ldr	r1, [r3, #20]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	e006      	b.n	80029b2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
  }
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b08a      	sub	sp, #40	; 0x28
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d07c      	beq.n	8002afe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d023      	beq.n	8002a56 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2201      	movs	r2, #1
 8002a14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7fe fc9f 	bl	8001364 <HAL_CAN_TxMailbox0CompleteCallback>
 8002a26:	e016      	b.n	8002a56 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d004      	beq.n	8002a3c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3a:	e00c      	b.n	8002a56 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d004      	beq.n	8002a50 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4e:	e002      	b.n	8002a56 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f96b 	bl	8002d2c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d024      	beq.n	8002aaa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a68:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7fe fc85 	bl	8001384 <HAL_CAN_TxMailbox1CompleteCallback>
 8002a7a:	e016      	b.n	8002aaa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d004      	beq.n	8002a90 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8e:	e00c      	b.n	8002aaa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d004      	beq.n	8002aa4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa2:	e002      	b.n	8002aaa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f94b 	bl	8002d40 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d024      	beq.n	8002afe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002abc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7fe fc6b 	bl	80013a4 <HAL_CAN_TxMailbox2CompleteCallback>
 8002ace:	e016      	b.n	8002afe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d004      	beq.n	8002ae4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae2:	e00c      	b.n	8002afe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d004      	beq.n	8002af8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
 8002af6:	e002      	b.n	8002afe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f92b 	bl	8002d54 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00c      	beq.n	8002b22 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d007      	beq.n	8002b22 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2210      	movs	r2, #16
 8002b20:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00b      	beq.n	8002b44 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d006      	beq.n	8002b44 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2208      	movs	r2, #8
 8002b3c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f912 	bl	8002d68 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7fe fba7 	bl	80012b0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00c      	beq.n	8002b86 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d007      	beq.n	8002b86 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2210      	movs	r2, #16
 8002b84:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00b      	beq.n	8002ba8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d006      	beq.n	8002ba8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2208      	movs	r2, #8
 8002ba0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f8ea 	bl	8002d7c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d009      	beq.n	8002bc6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7fe fb9d 	bl	8001300 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00b      	beq.n	8002be8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d006      	beq.n	8002be8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2210      	movs	r2, #16
 8002be0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f8d4 	bl	8002d90 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00b      	beq.n	8002c0a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d006      	beq.n	8002c0a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2208      	movs	r2, #8
 8002c02:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f8cd 	bl	8002da4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d07b      	beq.n	8002d0c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d072      	beq.n	8002d04 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	f043 0302 	orr.w	r3, r3, #2
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	f043 0304 	orr.w	r3, r3, #4
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d043      	beq.n	8002d04 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d03e      	beq.n	8002d04 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c8c:	2b60      	cmp	r3, #96	; 0x60
 8002c8e:	d02b      	beq.n	8002ce8 <HAL_CAN_IRQHandler+0x32a>
 8002c90:	2b60      	cmp	r3, #96	; 0x60
 8002c92:	d82e      	bhi.n	8002cf2 <HAL_CAN_IRQHandler+0x334>
 8002c94:	2b50      	cmp	r3, #80	; 0x50
 8002c96:	d022      	beq.n	8002cde <HAL_CAN_IRQHandler+0x320>
 8002c98:	2b50      	cmp	r3, #80	; 0x50
 8002c9a:	d82a      	bhi.n	8002cf2 <HAL_CAN_IRQHandler+0x334>
 8002c9c:	2b40      	cmp	r3, #64	; 0x40
 8002c9e:	d019      	beq.n	8002cd4 <HAL_CAN_IRQHandler+0x316>
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d826      	bhi.n	8002cf2 <HAL_CAN_IRQHandler+0x334>
 8002ca4:	2b30      	cmp	r3, #48	; 0x30
 8002ca6:	d010      	beq.n	8002cca <HAL_CAN_IRQHandler+0x30c>
 8002ca8:	2b30      	cmp	r3, #48	; 0x30
 8002caa:	d822      	bhi.n	8002cf2 <HAL_CAN_IRQHandler+0x334>
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d002      	beq.n	8002cb6 <HAL_CAN_IRQHandler+0x2f8>
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	d005      	beq.n	8002cc0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002cb4:	e01d      	b.n	8002cf2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	f043 0308 	orr.w	r3, r3, #8
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cbe:	e019      	b.n	8002cf4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	f043 0310 	orr.w	r3, r3, #16
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cc8:	e014      	b.n	8002cf4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	f043 0320 	orr.w	r3, r3, #32
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cd2:	e00f      	b.n	8002cf4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cdc:	e00a      	b.n	8002cf4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ce6:	e005      	b.n	8002cf4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cf0:	e000      	b.n	8002cf4 <HAL_CAN_IRQHandler+0x336>
            break;
 8002cf2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d02:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2204      	movs	r2, #4
 8002d0a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d008      	beq.n	8002d24 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f84a 	bl	8002db8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d24:	bf00      	nop
 8002d26:	3728      	adds	r7, #40	; 0x28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <__NVIC_SetPriorityGrouping+0x44>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002de8:	4013      	ands	r3, r2
 8002dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dfe:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <__NVIC_SetPriorityGrouping+0x44>)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	60d3      	str	r3, [r2, #12]
}
 8002e04:	bf00      	nop
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e18:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <__NVIC_GetPriorityGrouping+0x18>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	0a1b      	lsrs	r3, r3, #8
 8002e1e:	f003 0307 	and.w	r3, r3, #7
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	db0b      	blt.n	8002e5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	f003 021f 	and.w	r2, r3, #31
 8002e48:	4907      	ldr	r1, [pc, #28]	; (8002e68 <__NVIC_EnableIRQ+0x38>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	2001      	movs	r0, #1
 8002e52:	fa00 f202 	lsl.w	r2, r0, r2
 8002e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	e000e100 	.word	0xe000e100

08002e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	6039      	str	r1, [r7, #0]
 8002e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	db0a      	blt.n	8002e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	490c      	ldr	r1, [pc, #48]	; (8002eb8 <__NVIC_SetPriority+0x4c>)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	0112      	lsls	r2, r2, #4
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	440b      	add	r3, r1
 8002e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e94:	e00a      	b.n	8002eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	4908      	ldr	r1, [pc, #32]	; (8002ebc <__NVIC_SetPriority+0x50>)
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	3b04      	subs	r3, #4
 8002ea4:	0112      	lsls	r2, r2, #4
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	761a      	strb	r2, [r3, #24]
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000e100 	.word	0xe000e100
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	; 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f1c3 0307 	rsb	r3, r3, #7
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	bf28      	it	cs
 8002ede:	2304      	movcs	r3, #4
 8002ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	2b06      	cmp	r3, #6
 8002ee8:	d902      	bls.n	8002ef0 <NVIC_EncodePriority+0x30>
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3b03      	subs	r3, #3
 8002eee:	e000      	b.n	8002ef2 <NVIC_EncodePriority+0x32>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43da      	mvns	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	401a      	ands	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f08:	f04f 31ff 	mov.w	r1, #4294967295
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f12:	43d9      	mvns	r1, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f18:	4313      	orrs	r3, r2
         );
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3724      	adds	r7, #36	; 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff ff4c 	bl	8002dcc <__NVIC_SetPriorityGrouping>
}
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f4e:	f7ff ff61 	bl	8002e14 <__NVIC_GetPriorityGrouping>
 8002f52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	6978      	ldr	r0, [r7, #20]
 8002f5a:	f7ff ffb1 	bl	8002ec0 <NVIC_EncodePriority>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff ff80 	bl	8002e6c <__NVIC_SetPriority>
}
 8002f6c:	bf00      	nop
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff ff54 	bl	8002e30 <__NVIC_EnableIRQ>
}
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f9e:	e148      	b.n	8003232 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fac:	4013      	ands	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 813a 	beq.w	800322c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d005      	beq.n	8002fd0 <HAL_GPIO_Init+0x40>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d130      	bne.n	8003032 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	2203      	movs	r2, #3
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003006:	2201      	movs	r2, #1
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	091b      	lsrs	r3, r3, #4
 800301c:	f003 0201 	and.w	r2, r3, #1
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	2b03      	cmp	r3, #3
 800303c:	d017      	beq.n	800306e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	2203      	movs	r2, #3
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4013      	ands	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d123      	bne.n	80030c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	08da      	lsrs	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3208      	adds	r2, #8
 8003082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003086:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	220f      	movs	r2, #15
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	691a      	ldr	r2, [r3, #16]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	08da      	lsrs	r2, r3, #3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3208      	adds	r2, #8
 80030bc:	6939      	ldr	r1, [r7, #16]
 80030be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	2203      	movs	r2, #3
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4013      	ands	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 0203 	and.w	r2, r3, #3
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8094 	beq.w	800322c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003104:	4b52      	ldr	r3, [pc, #328]	; (8003250 <HAL_GPIO_Init+0x2c0>)
 8003106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003108:	4a51      	ldr	r2, [pc, #324]	; (8003250 <HAL_GPIO_Init+0x2c0>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6613      	str	r3, [r2, #96]	; 0x60
 8003110:	4b4f      	ldr	r3, [pc, #316]	; (8003250 <HAL_GPIO_Init+0x2c0>)
 8003112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800311c:	4a4d      	ldr	r2, [pc, #308]	; (8003254 <HAL_GPIO_Init+0x2c4>)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	3302      	adds	r3, #2
 8003124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003128:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	220f      	movs	r2, #15
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4013      	ands	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003146:	d00d      	beq.n	8003164 <HAL_GPIO_Init+0x1d4>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a43      	ldr	r2, [pc, #268]	; (8003258 <HAL_GPIO_Init+0x2c8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d007      	beq.n	8003160 <HAL_GPIO_Init+0x1d0>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a42      	ldr	r2, [pc, #264]	; (800325c <HAL_GPIO_Init+0x2cc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d101      	bne.n	800315c <HAL_GPIO_Init+0x1cc>
 8003158:	2302      	movs	r3, #2
 800315a:	e004      	b.n	8003166 <HAL_GPIO_Init+0x1d6>
 800315c:	2307      	movs	r3, #7
 800315e:	e002      	b.n	8003166 <HAL_GPIO_Init+0x1d6>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <HAL_GPIO_Init+0x1d6>
 8003164:	2300      	movs	r3, #0
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	f002 0203 	and.w	r2, r2, #3
 800316c:	0092      	lsls	r2, r2, #2
 800316e:	4093      	lsls	r3, r2
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003176:	4937      	ldr	r1, [pc, #220]	; (8003254 <HAL_GPIO_Init+0x2c4>)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	089b      	lsrs	r3, r3, #2
 800317c:	3302      	adds	r3, #2
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003184:	4b36      	ldr	r3, [pc, #216]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	43db      	mvns	r3, r3
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4013      	ands	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031a8:	4a2d      	ldr	r2, [pc, #180]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031ae:	4b2c      	ldr	r3, [pc, #176]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4013      	ands	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031d2:	4a23      	ldr	r2, [pc, #140]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031d8:	4b21      	ldr	r3, [pc, #132]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4013      	ands	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031fc:	4a18      	ldr	r2, [pc, #96]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003202:	4b17      	ldr	r3, [pc, #92]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	43db      	mvns	r3, r3
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4013      	ands	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003226:	4a0e      	ldr	r2, [pc, #56]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	3301      	adds	r3, #1
 8003230:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	fa22 f303 	lsr.w	r3, r2, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	f47f aeaf 	bne.w	8002fa0 <HAL_GPIO_Init+0x10>
  }
}
 8003242:	bf00      	nop
 8003244:	bf00      	nop
 8003246:	371c      	adds	r7, #28
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	40021000 	.word	0x40021000
 8003254:	40010000 	.word	0x40010000
 8003258:	48000400 	.word	0x48000400
 800325c:	48000800 	.word	0x48000800
 8003260:	40010400 	.word	0x40010400

08003264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
 8003270:	4613      	mov	r3, r2
 8003272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003274:	787b      	ldrb	r3, [r7, #1]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800327a:	887a      	ldrh	r2, [r7, #2]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003280:	e002      	b.n	8003288 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003282:	887a      	ldrh	r2, [r7, #2]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003298:	4b04      	ldr	r3, [pc, #16]	; (80032ac <HAL_PWREx_GetVoltageRange+0x18>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40007000 	.word	0x40007000

080032b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032be:	d130      	bne.n	8003322 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032c0:	4b23      	ldr	r3, [pc, #140]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032cc:	d038      	beq.n	8003340 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032ce:	4b20      	ldr	r3, [pc, #128]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032d6:	4a1e      	ldr	r2, [pc, #120]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032de:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2232      	movs	r2, #50	; 0x32
 80032e4:	fb02 f303 	mul.w	r3, r2, r3
 80032e8:	4a1b      	ldr	r2, [pc, #108]	; (8003358 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	0c9b      	lsrs	r3, r3, #18
 80032f0:	3301      	adds	r3, #1
 80032f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032f4:	e002      	b.n	80032fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032fc:	4b14      	ldr	r3, [pc, #80]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003308:	d102      	bne.n	8003310 <HAL_PWREx_ControlVoltageScaling+0x60>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f2      	bne.n	80032f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331c:	d110      	bne.n	8003340 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e00f      	b.n	8003342 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003322:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800332a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332e:	d007      	beq.n	8003340 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003330:	4b07      	ldr	r3, [pc, #28]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003338:	4a05      	ldr	r2, [pc, #20]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800333a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800333e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40007000 	.word	0x40007000
 8003354:	20000000 	.word	0x20000000
 8003358:	431bde83 	.word	0x431bde83

0800335c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d102      	bne.n	8003370 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	f000 bc02 	b.w	8003b74 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003370:	4b96      	ldr	r3, [pc, #600]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 030c 	and.w	r3, r3, #12
 8003378:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800337a:	4b94      	ldr	r3, [pc, #592]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80e4 	beq.w	800355a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d007      	beq.n	80033a8 <HAL_RCC_OscConfig+0x4c>
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	2b0c      	cmp	r3, #12
 800339c:	f040 808b 	bne.w	80034b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	f040 8087 	bne.w	80034b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033a8:	4b88      	ldr	r3, [pc, #544]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_OscConfig+0x64>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e3d9      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1a      	ldr	r2, [r3, #32]
 80033c4:	4b81      	ldr	r3, [pc, #516]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d004      	beq.n	80033da <HAL_RCC_OscConfig+0x7e>
 80033d0:	4b7e      	ldr	r3, [pc, #504]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033d8:	e005      	b.n	80033e6 <HAL_RCC_OscConfig+0x8a>
 80033da:	4b7c      	ldr	r3, [pc, #496]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80033dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d223      	bcs.n	8003432 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fe1e 	bl	8004030 <RCC_SetFlashLatencyFromMSIRange>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e3ba      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033fe:	4b73      	ldr	r3, [pc, #460]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a72      	ldr	r2, [pc, #456]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003404:	f043 0308 	orr.w	r3, r3, #8
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	4b70      	ldr	r3, [pc, #448]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	496d      	ldr	r1, [pc, #436]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003418:	4313      	orrs	r3, r2
 800341a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800341c:	4b6b      	ldr	r3, [pc, #428]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	021b      	lsls	r3, r3, #8
 800342a:	4968      	ldr	r1, [pc, #416]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800342c:	4313      	orrs	r3, r2
 800342e:	604b      	str	r3, [r1, #4]
 8003430:	e025      	b.n	800347e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003432:	4b66      	ldr	r3, [pc, #408]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a65      	ldr	r2, [pc, #404]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003438:	f043 0308 	orr.w	r3, r3, #8
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	4b63      	ldr	r3, [pc, #396]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	4960      	ldr	r1, [pc, #384]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800344c:	4313      	orrs	r3, r2
 800344e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003450:	4b5e      	ldr	r3, [pc, #376]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	495b      	ldr	r1, [pc, #364]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003460:	4313      	orrs	r3, r2
 8003462:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fdde 	bl	8004030 <RCC_SetFlashLatencyFromMSIRange>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e37a      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800347e:	f000 fcb5 	bl	8003dec <HAL_RCC_GetSysClockFreq>
 8003482:	4602      	mov	r2, r0
 8003484:	4b51      	ldr	r3, [pc, #324]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	4950      	ldr	r1, [pc, #320]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 8003490:	5ccb      	ldrb	r3, [r1, r3]
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	fa22 f303 	lsr.w	r3, r2, r3
 800349a:	4a4e      	ldr	r2, [pc, #312]	; (80035d4 <HAL_RCC_OscConfig+0x278>)
 800349c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800349e:	4b4e      	ldr	r3, [pc, #312]	; (80035d8 <HAL_RCC_OscConfig+0x27c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe f9ce 	bl	8001844 <HAL_InitTick>
 80034a8:	4603      	mov	r3, r0
 80034aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d052      	beq.n	8003558 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	e35e      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d032      	beq.n	8003524 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034be:	4b43      	ldr	r3, [pc, #268]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a42      	ldr	r2, [pc, #264]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034ca:	f7fe fe37 	bl	800213c <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034d2:	f7fe fe33 	bl	800213c <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e347      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034e4:	4b39      	ldr	r3, [pc, #228]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034f0:	4b36      	ldr	r3, [pc, #216]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a35      	ldr	r2, [pc, #212]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80034f6:	f043 0308 	orr.w	r3, r3, #8
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	4b33      	ldr	r3, [pc, #204]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	4930      	ldr	r1, [pc, #192]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800350e:	4b2f      	ldr	r3, [pc, #188]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	492b      	ldr	r1, [pc, #172]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800351e:	4313      	orrs	r3, r2
 8003520:	604b      	str	r3, [r1, #4]
 8003522:	e01a      	b.n	800355a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003524:	4b29      	ldr	r3, [pc, #164]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a28      	ldr	r2, [pc, #160]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800352a:	f023 0301 	bic.w	r3, r3, #1
 800352e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003530:	f7fe fe04 	bl	800213c <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003538:	f7fe fe00 	bl	800213c <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e314      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800354a:	4b20      	ldr	r3, [pc, #128]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x1dc>
 8003556:	e000      	b.n	800355a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003558:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d073      	beq.n	800364e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	2b08      	cmp	r3, #8
 800356a:	d005      	beq.n	8003578 <HAL_RCC_OscConfig+0x21c>
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d10e      	bne.n	8003590 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b03      	cmp	r3, #3
 8003576:	d10b      	bne.n	8003590 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003578:	4b14      	ldr	r3, [pc, #80]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d063      	beq.n	800364c <HAL_RCC_OscConfig+0x2f0>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d15f      	bne.n	800364c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e2f1      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003598:	d106      	bne.n	80035a8 <HAL_RCC_OscConfig+0x24c>
 800359a:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a0b      	ldr	r2, [pc, #44]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e025      	b.n	80035f4 <HAL_RCC_OscConfig+0x298>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035b0:	d114      	bne.n	80035dc <HAL_RCC_OscConfig+0x280>
 80035b2:	4b06      	ldr	r3, [pc, #24]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a05      	ldr	r2, [pc, #20]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80035b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a02      	ldr	r2, [pc, #8]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80035c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	e013      	b.n	80035f4 <HAL_RCC_OscConfig+0x298>
 80035cc:	40021000 	.word	0x40021000
 80035d0:	0800c334 	.word	0x0800c334
 80035d4:	20000000 	.word	0x20000000
 80035d8:	20000004 	.word	0x20000004
 80035dc:	4ba0      	ldr	r3, [pc, #640]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a9f      	ldr	r2, [pc, #636]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80035e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	4b9d      	ldr	r3, [pc, #628]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a9c      	ldr	r2, [pc, #624]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80035ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d013      	beq.n	8003624 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fc:	f7fe fd9e 	bl	800213c <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003604:	f7fe fd9a 	bl	800213c <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	; 0x64
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e2ae      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003616:	4b92      	ldr	r3, [pc, #584]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0x2a8>
 8003622:	e014      	b.n	800364e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7fe fd8a 	bl	800213c <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800362c:	f7fe fd86 	bl	800213c <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b64      	cmp	r3, #100	; 0x64
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e29a      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800363e:	4b88      	ldr	r3, [pc, #544]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x2d0>
 800364a:	e000      	b.n	800364e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d060      	beq.n	800371c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	2b04      	cmp	r3, #4
 800365e:	d005      	beq.n	800366c <HAL_RCC_OscConfig+0x310>
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d119      	bne.n	800369a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d116      	bne.n	800369a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800366c:	4b7c      	ldr	r3, [pc, #496]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_OscConfig+0x328>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e277      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003684:	4b76      	ldr	r3, [pc, #472]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	061b      	lsls	r3, r3, #24
 8003692:	4973      	ldr	r1, [pc, #460]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003694:	4313      	orrs	r3, r2
 8003696:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003698:	e040      	b.n	800371c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d023      	beq.n	80036ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a2:	4b6f      	ldr	r3, [pc, #444]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a6e      	ldr	r2, [pc, #440]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80036a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ae:	f7fe fd45 	bl	800213c <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b6:	f7fe fd41 	bl	800213c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e255      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036c8:	4b65      	ldr	r3, [pc, #404]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d4:	4b62      	ldr	r3, [pc, #392]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	061b      	lsls	r3, r3, #24
 80036e2:	495f      	ldr	r1, [pc, #380]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	604b      	str	r3, [r1, #4]
 80036e8:	e018      	b.n	800371c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ea:	4b5d      	ldr	r3, [pc, #372]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a5c      	ldr	r2, [pc, #368]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80036f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7fe fd21 	bl	800213c <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fe:	f7fe fd1d 	bl	800213c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e231      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003710:	4b53      	ldr	r3, [pc, #332]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f0      	bne.n	80036fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d03c      	beq.n	80037a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01c      	beq.n	800376a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003730:	4b4b      	ldr	r3, [pc, #300]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003736:	4a4a      	ldr	r2, [pc, #296]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003740:	f7fe fcfc 	bl	800213c <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003748:	f7fe fcf8 	bl	800213c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e20c      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800375a:	4b41      	ldr	r3, [pc, #260]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 800375c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0ef      	beq.n	8003748 <HAL_RCC_OscConfig+0x3ec>
 8003768:	e01b      	b.n	80037a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800376a:	4b3d      	ldr	r3, [pc, #244]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 800376c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003770:	4a3b      	ldr	r2, [pc, #236]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003772:	f023 0301 	bic.w	r3, r3, #1
 8003776:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377a:	f7fe fcdf 	bl	800213c <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003782:	f7fe fcdb 	bl	800213c <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e1ef      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003794:	4b32      	ldr	r3, [pc, #200]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1ef      	bne.n	8003782 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 80a6 	beq.w	80038fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037b0:	2300      	movs	r3, #0
 80037b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037b4:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10d      	bne.n	80037dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c0:	4b27      	ldr	r3, [pc, #156]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	4a26      	ldr	r2, [pc, #152]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80037c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ca:	6593      	str	r3, [r2, #88]	; 0x58
 80037cc:	4b24      	ldr	r3, [pc, #144]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80037ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d8:	2301      	movs	r3, #1
 80037da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037dc:	4b21      	ldr	r3, [pc, #132]	; (8003864 <HAL_RCC_OscConfig+0x508>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d118      	bne.n	800381a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037e8:	4b1e      	ldr	r3, [pc, #120]	; (8003864 <HAL_RCC_OscConfig+0x508>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a1d      	ldr	r2, [pc, #116]	; (8003864 <HAL_RCC_OscConfig+0x508>)
 80037ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f4:	f7fe fca2 	bl	800213c <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fc:	f7fe fc9e 	bl	800213c <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e1b2      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800380e:	4b15      	ldr	r3, [pc, #84]	; (8003864 <HAL_RCC_OscConfig+0x508>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d108      	bne.n	8003834 <HAL_RCC_OscConfig+0x4d8>
 8003822:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	4a0d      	ldr	r2, [pc, #52]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003832:	e029      	b.n	8003888 <HAL_RCC_OscConfig+0x52c>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b05      	cmp	r3, #5
 800383a:	d115      	bne.n	8003868 <HAL_RCC_OscConfig+0x50c>
 800383c:	4b08      	ldr	r3, [pc, #32]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	4a07      	ldr	r2, [pc, #28]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003844:	f043 0304 	orr.w	r3, r3, #4
 8003848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800384c:	4b04      	ldr	r3, [pc, #16]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003852:	4a03      	ldr	r2, [pc, #12]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800385c:	e014      	b.n	8003888 <HAL_RCC_OscConfig+0x52c>
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000
 8003864:	40007000 	.word	0x40007000
 8003868:	4b9a      	ldr	r3, [pc, #616]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386e:	4a99      	ldr	r2, [pc, #612]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003878:	4b96      	ldr	r3, [pc, #600]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387e:	4a95      	ldr	r2, [pc, #596]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 8003880:	f023 0304 	bic.w	r3, r3, #4
 8003884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d016      	beq.n	80038be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003890:	f7fe fc54 	bl	800213c <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003896:	e00a      	b.n	80038ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003898:	f7fe fc50 	bl	800213c <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e162      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ae:	4b89      	ldr	r3, [pc, #548]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 80038b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0ed      	beq.n	8003898 <HAL_RCC_OscConfig+0x53c>
 80038bc:	e015      	b.n	80038ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038be:	f7fe fc3d 	bl	800213c <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038c4:	e00a      	b.n	80038dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c6:	f7fe fc39 	bl	800213c <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e14b      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038dc:	4b7d      	ldr	r3, [pc, #500]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 80038de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1ed      	bne.n	80038c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ea:	7ffb      	ldrb	r3, [r7, #31]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d105      	bne.n	80038fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f0:	4b78      	ldr	r3, [pc, #480]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 80038f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f4:	4a77      	ldr	r2, [pc, #476]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 80038f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d03c      	beq.n	8003982 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	2b00      	cmp	r3, #0
 800390e:	d01c      	beq.n	800394a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003910:	4b70      	ldr	r3, [pc, #448]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 8003912:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003916:	4a6f      	ldr	r2, [pc, #444]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003920:	f7fe fc0c 	bl	800213c <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003928:	f7fe fc08 	bl	800213c <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e11c      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800393a:	4b66      	ldr	r3, [pc, #408]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 800393c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0ef      	beq.n	8003928 <HAL_RCC_OscConfig+0x5cc>
 8003948:	e01b      	b.n	8003982 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800394a:	4b62      	ldr	r3, [pc, #392]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 800394c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003950:	4a60      	ldr	r2, [pc, #384]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 8003952:	f023 0301 	bic.w	r3, r3, #1
 8003956:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395a:	f7fe fbef 	bl	800213c <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003962:	f7fe fbeb 	bl	800213c <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e0ff      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003974:	4b57      	ldr	r3, [pc, #348]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 8003976:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1ef      	bne.n	8003962 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80f3 	beq.w	8003b72 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003990:	2b02      	cmp	r3, #2
 8003992:	f040 80c9 	bne.w	8003b28 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003996:	4b4f      	ldr	r3, [pc, #316]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f003 0203 	and.w	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d12c      	bne.n	8003a04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	3b01      	subs	r3, #1
 80039b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d123      	bne.n	8003a04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d11b      	bne.n	8003a04 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039d8:	429a      	cmp	r2, r3
 80039da:	d113      	bne.n	8003a04 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e6:	085b      	lsrs	r3, r3, #1
 80039e8:	3b01      	subs	r3, #1
 80039ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d109      	bne.n	8003a04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	3b01      	subs	r3, #1
 80039fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d06b      	beq.n	8003adc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	2b0c      	cmp	r3, #12
 8003a08:	d062      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a0a:	4b32      	ldr	r3, [pc, #200]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e0ac      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a1a:	4b2e      	ldr	r3, [pc, #184]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a2d      	ldr	r2, [pc, #180]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 8003a20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a24:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a26:	f7fe fb89 	bl	800213c <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a2e:	f7fe fb85 	bl	800213c <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e099      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a40:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f0      	bne.n	8003a2e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a4c:	4b21      	ldr	r3, [pc, #132]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	4b21      	ldr	r3, [pc, #132]	; (8003ad8 <HAL_RCC_OscConfig+0x77c>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a5c:	3a01      	subs	r2, #1
 8003a5e:	0112      	lsls	r2, r2, #4
 8003a60:	4311      	orrs	r1, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a66:	0212      	lsls	r2, r2, #8
 8003a68:	4311      	orrs	r1, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a6e:	0852      	lsrs	r2, r2, #1
 8003a70:	3a01      	subs	r2, #1
 8003a72:	0552      	lsls	r2, r2, #21
 8003a74:	4311      	orrs	r1, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a7a:	0852      	lsrs	r2, r2, #1
 8003a7c:	3a01      	subs	r2, #1
 8003a7e:	0652      	lsls	r2, r2, #25
 8003a80:	4311      	orrs	r1, r2
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a86:	06d2      	lsls	r2, r2, #27
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	4912      	ldr	r1, [pc, #72]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a90:	4b10      	ldr	r3, [pc, #64]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a0f      	ldr	r2, [pc, #60]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 8003a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a9c:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	4a0c      	ldr	r2, [pc, #48]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 8003aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aa6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003aa8:	f7fe fb48 	bl	800213c <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab0:	f7fe fb44 	bl	800213c <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e058      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ac2:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <HAL_RCC_OscConfig+0x778>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ace:	e050      	b.n	8003b72 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e04f      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003adc:	4b27      	ldr	r3, [pc, #156]	; (8003b7c <HAL_RCC_OscConfig+0x820>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d144      	bne.n	8003b72 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ae8:	4b24      	ldr	r3, [pc, #144]	; (8003b7c <HAL_RCC_OscConfig+0x820>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a23      	ldr	r2, [pc, #140]	; (8003b7c <HAL_RCC_OscConfig+0x820>)
 8003aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003af2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003af4:	4b21      	ldr	r3, [pc, #132]	; (8003b7c <HAL_RCC_OscConfig+0x820>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4a20      	ldr	r2, [pc, #128]	; (8003b7c <HAL_RCC_OscConfig+0x820>)
 8003afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003afe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b00:	f7fe fb1c 	bl	800213c <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b08:	f7fe fb18 	bl	800213c <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e02c      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b1a:	4b18      	ldr	r3, [pc, #96]	; (8003b7c <HAL_RCC_OscConfig+0x820>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0x7ac>
 8003b26:	e024      	b.n	8003b72 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b0c      	cmp	r3, #12
 8003b2c:	d01f      	beq.n	8003b6e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b2e:	4b13      	ldr	r3, [pc, #76]	; (8003b7c <HAL_RCC_OscConfig+0x820>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a12      	ldr	r2, [pc, #72]	; (8003b7c <HAL_RCC_OscConfig+0x820>)
 8003b34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3a:	f7fe faff 	bl	800213c <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b42:	f7fe fafb 	bl	800213c <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e00f      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b54:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <HAL_RCC_OscConfig+0x820>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1f0      	bne.n	8003b42 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003b60:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <HAL_RCC_OscConfig+0x820>)
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	4905      	ldr	r1, [pc, #20]	; (8003b7c <HAL_RCC_OscConfig+0x820>)
 8003b66:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_RCC_OscConfig+0x824>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	60cb      	str	r3, [r1, #12]
 8003b6c:	e001      	b.n	8003b72 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3720      	adds	r7, #32
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	feeefffc 	.word	0xfeeefffc

08003b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0e7      	b.n	8003d68 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b98:	4b75      	ldr	r3, [pc, #468]	; (8003d70 <HAL_RCC_ClockConfig+0x1ec>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d910      	bls.n	8003bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba6:	4b72      	ldr	r3, [pc, #456]	; (8003d70 <HAL_RCC_ClockConfig+0x1ec>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 0207 	bic.w	r2, r3, #7
 8003bae:	4970      	ldr	r1, [pc, #448]	; (8003d70 <HAL_RCC_ClockConfig+0x1ec>)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb6:	4b6e      	ldr	r3, [pc, #440]	; (8003d70 <HAL_RCC_ClockConfig+0x1ec>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e0cf      	b.n	8003d68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d010      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	4b66      	ldr	r3, [pc, #408]	; (8003d74 <HAL_RCC_ClockConfig+0x1f0>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d908      	bls.n	8003bf6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be4:	4b63      	ldr	r3, [pc, #396]	; (8003d74 <HAL_RCC_ClockConfig+0x1f0>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	4960      	ldr	r1, [pc, #384]	; (8003d74 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d04c      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d107      	bne.n	8003c1a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c0a:	4b5a      	ldr	r3, [pc, #360]	; (8003d74 <HAL_RCC_ClockConfig+0x1f0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d121      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e0a6      	b.n	8003d68 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d107      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c22:	4b54      	ldr	r3, [pc, #336]	; (8003d74 <HAL_RCC_ClockConfig+0x1f0>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d115      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e09a      	b.n	8003d68 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d107      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c3a:	4b4e      	ldr	r3, [pc, #312]	; (8003d74 <HAL_RCC_ClockConfig+0x1f0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d109      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e08e      	b.n	8003d68 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c4a:	4b4a      	ldr	r3, [pc, #296]	; (8003d74 <HAL_RCC_ClockConfig+0x1f0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e086      	b.n	8003d68 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c5a:	4b46      	ldr	r3, [pc, #280]	; (8003d74 <HAL_RCC_ClockConfig+0x1f0>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f023 0203 	bic.w	r2, r3, #3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4943      	ldr	r1, [pc, #268]	; (8003d74 <HAL_RCC_ClockConfig+0x1f0>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c6c:	f7fe fa66 	bl	800213c <HAL_GetTick>
 8003c70:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c72:	e00a      	b.n	8003c8a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c74:	f7fe fa62 	bl	800213c <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e06e      	b.n	8003d68 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8a:	4b3a      	ldr	r3, [pc, #232]	; (8003d74 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 020c 	and.w	r2, r3, #12
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d1eb      	bne.n	8003c74 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d010      	beq.n	8003cca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	4b31      	ldr	r3, [pc, #196]	; (8003d74 <HAL_RCC_ClockConfig+0x1f0>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d208      	bcs.n	8003cca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb8:	4b2e      	ldr	r3, [pc, #184]	; (8003d74 <HAL_RCC_ClockConfig+0x1f0>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	492b      	ldr	r1, [pc, #172]	; (8003d74 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cca:	4b29      	ldr	r3, [pc, #164]	; (8003d70 <HAL_RCC_ClockConfig+0x1ec>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d210      	bcs.n	8003cfa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd8:	4b25      	ldr	r3, [pc, #148]	; (8003d70 <HAL_RCC_ClockConfig+0x1ec>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f023 0207 	bic.w	r2, r3, #7
 8003ce0:	4923      	ldr	r1, [pc, #140]	; (8003d70 <HAL_RCC_ClockConfig+0x1ec>)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce8:	4b21      	ldr	r3, [pc, #132]	; (8003d70 <HAL_RCC_ClockConfig+0x1ec>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d001      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e036      	b.n	8003d68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d008      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d06:	4b1b      	ldr	r3, [pc, #108]	; (8003d74 <HAL_RCC_ClockConfig+0x1f0>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	4918      	ldr	r1, [pc, #96]	; (8003d74 <HAL_RCC_ClockConfig+0x1f0>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d009      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d24:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <HAL_RCC_ClockConfig+0x1f0>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	4910      	ldr	r1, [pc, #64]	; (8003d74 <HAL_RCC_ClockConfig+0x1f0>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d38:	f000 f858 	bl	8003dec <HAL_RCC_GetSysClockFreq>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	4b0d      	ldr	r3, [pc, #52]	; (8003d74 <HAL_RCC_ClockConfig+0x1f0>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	091b      	lsrs	r3, r3, #4
 8003d44:	f003 030f 	and.w	r3, r3, #15
 8003d48:	490b      	ldr	r1, [pc, #44]	; (8003d78 <HAL_RCC_ClockConfig+0x1f4>)
 8003d4a:	5ccb      	ldrb	r3, [r1, r3]
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	fa22 f303 	lsr.w	r3, r2, r3
 8003d54:	4a09      	ldr	r2, [pc, #36]	; (8003d7c <HAL_RCC_ClockConfig+0x1f8>)
 8003d56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d58:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <HAL_RCC_ClockConfig+0x1fc>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fd fd71 	bl	8001844 <HAL_InitTick>
 8003d62:	4603      	mov	r3, r0
 8003d64:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d66:	7afb      	ldrb	r3, [r7, #11]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40022000 	.word	0x40022000
 8003d74:	40021000 	.word	0x40021000
 8003d78:	0800c334 	.word	0x0800c334
 8003d7c:	20000000 	.word	0x20000000
 8003d80:	20000004 	.word	0x20000004

08003d84 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08a      	sub	sp, #40	; 0x28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8003d90:	4b15      	ldr	r3, [pc, #84]	; (8003de8 <HAL_RCC_MCOConfig+0x64>)
 8003d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d94:	4a14      	ldr	r2, [pc, #80]	; (8003de8 <HAL_RCC_MCOConfig+0x64>)
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d9c:	4b12      	ldr	r3, [pc, #72]	; (8003de8 <HAL_RCC_MCOConfig+0x64>)
 8003d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8003da8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dae:	2302      	movs	r3, #2
 8003db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003db2:	2302      	movs	r3, #2
 8003db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003dbe:	f107 0314 	add.w	r3, r7, #20
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dc8:	f7ff f8e2 	bl	8002f90 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8003dcc:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_RCC_MCOConfig+0x64>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003dd4:	68b9      	ldr	r1, [r7, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	4903      	ldr	r1, [pc, #12]	; (8003de8 <HAL_RCC_MCOConfig+0x64>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	608b      	str	r3, [r1, #8]
}
 8003de0:	bf00      	nop
 8003de2:	3728      	adds	r7, #40	; 0x28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40021000 	.word	0x40021000

08003dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b089      	sub	sp, #36	; 0x24
 8003df0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	2300      	movs	r3, #0
 8003df8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dfa:	4b3e      	ldr	r3, [pc, #248]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
 8003e02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e04:	4b3b      	ldr	r3, [pc, #236]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f003 0303 	and.w	r3, r3, #3
 8003e0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_RCC_GetSysClockFreq+0x34>
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	2b0c      	cmp	r3, #12
 8003e18:	d121      	bne.n	8003e5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d11e      	bne.n	8003e5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e20:	4b34      	ldr	r3, [pc, #208]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d107      	bne.n	8003e3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e2c:	4b31      	ldr	r3, [pc, #196]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e32:	0a1b      	lsrs	r3, r3, #8
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	61fb      	str	r3, [r7, #28]
 8003e3a:	e005      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e3c:	4b2d      	ldr	r3, [pc, #180]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e48:	4a2b      	ldr	r2, [pc, #172]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10d      	bne.n	8003e74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e5c:	e00a      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d102      	bne.n	8003e6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e64:	4b25      	ldr	r3, [pc, #148]	; (8003efc <HAL_RCC_GetSysClockFreq+0x110>)
 8003e66:	61bb      	str	r3, [r7, #24]
 8003e68:	e004      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d101      	bne.n	8003e74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e70:	4b23      	ldr	r3, [pc, #140]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	2b0c      	cmp	r3, #12
 8003e78:	d134      	bne.n	8003ee4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e7a:	4b1e      	ldr	r3, [pc, #120]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d003      	beq.n	8003e92 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d003      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0xac>
 8003e90:	e005      	b.n	8003e9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e92:	4b1a      	ldr	r3, [pc, #104]	; (8003efc <HAL_RCC_GetSysClockFreq+0x110>)
 8003e94:	617b      	str	r3, [r7, #20]
      break;
 8003e96:	e005      	b.n	8003ea4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e98:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e9a:	617b      	str	r3, [r7, #20]
      break;
 8003e9c:	e002      	b.n	8003ea4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	617b      	str	r3, [r7, #20]
      break;
 8003ea2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ea4:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	091b      	lsrs	r3, r3, #4
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	3301      	adds	r3, #1
 8003eb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003eb2:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	fb03 f202 	mul.w	r2, r3, r2
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003eca:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	0e5b      	lsrs	r3, r3, #25
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ee4:	69bb      	ldr	r3, [r7, #24]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3724      	adds	r7, #36	; 0x24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	0800c34c 	.word	0x0800c34c
 8003efc:	00f42400 	.word	0x00f42400
 8003f00:	007a1200 	.word	0x007a1200

08003f04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f08:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	20000000 	.word	0x20000000

08003f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f20:	f7ff fff0 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8003f24:	4602      	mov	r2, r0
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	0a1b      	lsrs	r3, r3, #8
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	4904      	ldr	r1, [pc, #16]	; (8003f44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f32:	5ccb      	ldrb	r3, [r1, r3]
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40021000 	.word	0x40021000
 8003f44:	0800c344 	.word	0x0800c344

08003f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f4c:	f7ff ffda 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8003f50:	4602      	mov	r2, r0
 8003f52:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	0adb      	lsrs	r3, r3, #11
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	4904      	ldr	r1, [pc, #16]	; (8003f70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f5e:	5ccb      	ldrb	r3, [r1, r3]
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	0800c344 	.word	0x0800c344

08003f74 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	220f      	movs	r2, #15
 8003f82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003f84:	4b12      	ldr	r3, [pc, #72]	; (8003fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 0203 	and.w	r2, r3, #3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003f90:	4b0f      	ldr	r3, [pc, #60]	; (8003fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003fa8:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	08db      	lsrs	r3, r3, #3
 8003fae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003fb6:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <HAL_RCC_GetClockConfig+0x60>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0207 	and.w	r2, r3, #7
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	601a      	str	r2, [r3, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40022000 	.word	0x40022000

08003fd8 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003fdc:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <HAL_RCC_EnableCSS+0x1c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a04      	ldr	r2, [pc, #16]	; (8003ff4 <HAL_RCC_EnableCSS+0x1c>)
 8003fe2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fe6:	6013      	str	r3, [r2, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40021000 	.word	0x40021000

08003ff8 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003ffc:	4b07      	ldr	r3, [pc, #28]	; (800401c <HAL_RCC_NMI_IRQHandler+0x24>)
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004008:	d105      	bne.n	8004016 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800400a:	f000 f809 	bl	8004020 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800400e:	4b03      	ldr	r3, [pc, #12]	; (800401c <HAL_RCC_NMI_IRQHandler+0x24>)
 8004010:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004014:	621a      	str	r2, [r3, #32]
  }
}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40021000 	.word	0x40021000

08004020 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004038:	2300      	movs	r3, #0
 800403a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800403c:	4b2a      	ldr	r3, [pc, #168]	; (80040e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800403e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004048:	f7ff f924 	bl	8003294 <HAL_PWREx_GetVoltageRange>
 800404c:	6178      	str	r0, [r7, #20]
 800404e:	e014      	b.n	800407a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004050:	4b25      	ldr	r3, [pc, #148]	; (80040e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	4a24      	ldr	r2, [pc, #144]	; (80040e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800405a:	6593      	str	r3, [r2, #88]	; 0x58
 800405c:	4b22      	ldr	r3, [pc, #136]	; (80040e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800405e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004068:	f7ff f914 	bl	8003294 <HAL_PWREx_GetVoltageRange>
 800406c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800406e:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004072:	4a1d      	ldr	r2, [pc, #116]	; (80040e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004078:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004080:	d10b      	bne.n	800409a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b80      	cmp	r3, #128	; 0x80
 8004086:	d919      	bls.n	80040bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2ba0      	cmp	r3, #160	; 0xa0
 800408c:	d902      	bls.n	8004094 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800408e:	2302      	movs	r3, #2
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	e013      	b.n	80040bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004094:	2301      	movs	r3, #1
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	e010      	b.n	80040bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b80      	cmp	r3, #128	; 0x80
 800409e:	d902      	bls.n	80040a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040a0:	2303      	movs	r3, #3
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	e00a      	b.n	80040bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b80      	cmp	r3, #128	; 0x80
 80040aa:	d102      	bne.n	80040b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040ac:	2302      	movs	r3, #2
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	e004      	b.n	80040bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b70      	cmp	r3, #112	; 0x70
 80040b6:	d101      	bne.n	80040bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040b8:	2301      	movs	r3, #1
 80040ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040bc:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f023 0207 	bic.w	r2, r3, #7
 80040c4:	4909      	ldr	r1, [pc, #36]	; (80040ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040cc:	4b07      	ldr	r3, [pc, #28]	; (80040ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d001      	beq.n	80040de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40022000 	.word	0x40022000

080040f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040f8:	2300      	movs	r3, #0
 80040fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040fc:	2300      	movs	r3, #0
 80040fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004108:	2b00      	cmp	r3, #0
 800410a:	d031      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004110:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004114:	d01a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004116:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800411a:	d814      	bhi.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800411c:	2b00      	cmp	r3, #0
 800411e:	d009      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004120:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004124:	d10f      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004126:	4b5d      	ldr	r3, [pc, #372]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	4a5c      	ldr	r2, [pc, #368]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800412c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004130:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004132:	e00c      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3304      	adds	r3, #4
 8004138:	2100      	movs	r1, #0
 800413a:	4618      	mov	r0, r3
 800413c:	f000 f9ce 	bl	80044dc <RCCEx_PLLSAI1_Config>
 8004140:	4603      	mov	r3, r0
 8004142:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004144:	e003      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	74fb      	strb	r3, [r7, #19]
      break;
 800414a:	e000      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800414c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800414e:	7cfb      	ldrb	r3, [r7, #19]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10b      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004154:	4b51      	ldr	r3, [pc, #324]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004162:	494e      	ldr	r1, [pc, #312]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800416a:	e001      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416c:	7cfb      	ldrb	r3, [r7, #19]
 800416e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 809e 	beq.w	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417e:	2300      	movs	r3, #0
 8004180:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004182:	4b46      	ldr	r3, [pc, #280]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004192:	2300      	movs	r3, #0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00d      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004198:	4b40      	ldr	r3, [pc, #256]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800419a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419c:	4a3f      	ldr	r2, [pc, #252]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800419e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a2:	6593      	str	r3, [r2, #88]	; 0x58
 80041a4:	4b3d      	ldr	r3, [pc, #244]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041b0:	2301      	movs	r3, #1
 80041b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041b4:	4b3a      	ldr	r3, [pc, #232]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a39      	ldr	r2, [pc, #228]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80041ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041c0:	f7fd ffbc 	bl	800213c <HAL_GetTick>
 80041c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041c6:	e009      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c8:	f7fd ffb8 	bl	800213c <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d902      	bls.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	74fb      	strb	r3, [r7, #19]
        break;
 80041da:	e005      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041dc:	4b30      	ldr	r3, [pc, #192]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0ef      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80041e8:	7cfb      	ldrb	r3, [r7, #19]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d15a      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041ee:	4b2b      	ldr	r3, [pc, #172]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01e      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	429a      	cmp	r2, r3
 8004208:	d019      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800420a:	4b24      	ldr	r3, [pc, #144]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800420c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004214:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004216:	4b21      	ldr	r3, [pc, #132]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421c:	4a1f      	ldr	r2, [pc, #124]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800421e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004222:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004226:	4b1d      	ldr	r3, [pc, #116]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422c:	4a1b      	ldr	r2, [pc, #108]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800422e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004236:	4a19      	ldr	r2, [pc, #100]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d016      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004248:	f7fd ff78 	bl	800213c <HAL_GetTick>
 800424c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800424e:	e00b      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004250:	f7fd ff74 	bl	800213c <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	f241 3288 	movw	r2, #5000	; 0x1388
 800425e:	4293      	cmp	r3, r2
 8004260:	d902      	bls.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	74fb      	strb	r3, [r7, #19]
            break;
 8004266:	e006      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004268:	4b0c      	ldr	r3, [pc, #48]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0ec      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004276:	7cfb      	ldrb	r3, [r7, #19]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10b      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800427c:	4b07      	ldr	r3, [pc, #28]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004282:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428a:	4904      	ldr	r1, [pc, #16]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004292:	e009      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004294:	7cfb      	ldrb	r3, [r7, #19]
 8004296:	74bb      	strb	r3, [r7, #18]
 8004298:	e006      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800429a:	bf00      	nop
 800429c:	40021000 	.word	0x40021000
 80042a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a4:	7cfb      	ldrb	r3, [r7, #19]
 80042a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042a8:	7c7b      	ldrb	r3, [r7, #17]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d105      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ae:	4b8a      	ldr	r3, [pc, #552]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b2:	4a89      	ldr	r2, [pc, #548]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042c6:	4b84      	ldr	r3, [pc, #528]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042cc:	f023 0203 	bic.w	r2, r3, #3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	4980      	ldr	r1, [pc, #512]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042e8:	4b7b      	ldr	r3, [pc, #492]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ee:	f023 020c 	bic.w	r2, r3, #12
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	4978      	ldr	r1, [pc, #480]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800430a:	4b73      	ldr	r3, [pc, #460]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800430c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004310:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004318:	496f      	ldr	r1, [pc, #444]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800432c:	4b6a      	ldr	r3, [pc, #424]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800432e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004332:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433a:	4967      	ldr	r1, [pc, #412]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800434e:	4b62      	ldr	r3, [pc, #392]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004354:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	495e      	ldr	r1, [pc, #376]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004370:	4b59      	ldr	r3, [pc, #356]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004376:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	4956      	ldr	r1, [pc, #344]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004392:	4b51      	ldr	r3, [pc, #324]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	494d      	ldr	r1, [pc, #308]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d028      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043b4:	4b48      	ldr	r3, [pc, #288]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	4945      	ldr	r1, [pc, #276]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043d2:	d106      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043d4:	4b40      	ldr	r3, [pc, #256]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	4a3f      	ldr	r2, [pc, #252]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043de:	60d3      	str	r3, [r2, #12]
 80043e0:	e011      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043ea:	d10c      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3304      	adds	r3, #4
 80043f0:	2101      	movs	r1, #1
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 f872 	bl	80044dc <RCCEx_PLLSAI1_Config>
 80043f8:	4603      	mov	r3, r0
 80043fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043fc:	7cfb      	ldrb	r3, [r7, #19]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004402:	7cfb      	ldrb	r3, [r7, #19]
 8004404:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d028      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004412:	4b31      	ldr	r3, [pc, #196]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004418:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004420:	492d      	ldr	r1, [pc, #180]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004430:	d106      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004432:	4b29      	ldr	r3, [pc, #164]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	4a28      	ldr	r2, [pc, #160]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004438:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800443c:	60d3      	str	r3, [r2, #12]
 800443e:	e011      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004444:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004448:	d10c      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3304      	adds	r3, #4
 800444e:	2101      	movs	r1, #1
 8004450:	4618      	mov	r0, r3
 8004452:	f000 f843 	bl	80044dc <RCCEx_PLLSAI1_Config>
 8004456:	4603      	mov	r3, r0
 8004458:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800445a:	7cfb      	ldrb	r3, [r7, #19]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004460:	7cfb      	ldrb	r3, [r7, #19]
 8004462:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d01c      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004470:	4b19      	ldr	r3, [pc, #100]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004476:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800447e:	4916      	ldr	r1, [pc, #88]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800448a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800448e:	d10c      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3304      	adds	r3, #4
 8004494:	2102      	movs	r1, #2
 8004496:	4618      	mov	r0, r3
 8004498:	f000 f820 	bl	80044dc <RCCEx_PLLSAI1_Config>
 800449c:	4603      	mov	r3, r0
 800449e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044a0:	7cfb      	ldrb	r3, [r7, #19]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80044a6:	7cfb      	ldrb	r3, [r7, #19]
 80044a8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044b6:	4b08      	ldr	r3, [pc, #32]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044bc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c4:	4904      	ldr	r1, [pc, #16]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40021000 	.word	0x40021000

080044dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044ea:	4b74      	ldr	r3, [pc, #464]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d018      	beq.n	8004528 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044f6:	4b71      	ldr	r3, [pc, #452]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f003 0203 	and.w	r2, r3, #3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d10d      	bne.n	8004522 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
       ||
 800450a:	2b00      	cmp	r3, #0
 800450c:	d009      	beq.n	8004522 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800450e:	4b6b      	ldr	r3, [pc, #428]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	091b      	lsrs	r3, r3, #4
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
       ||
 800451e:	429a      	cmp	r2, r3
 8004520:	d047      	beq.n	80045b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	73fb      	strb	r3, [r7, #15]
 8004526:	e044      	b.n	80045b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b03      	cmp	r3, #3
 800452e:	d018      	beq.n	8004562 <RCCEx_PLLSAI1_Config+0x86>
 8004530:	2b03      	cmp	r3, #3
 8004532:	d825      	bhi.n	8004580 <RCCEx_PLLSAI1_Config+0xa4>
 8004534:	2b01      	cmp	r3, #1
 8004536:	d002      	beq.n	800453e <RCCEx_PLLSAI1_Config+0x62>
 8004538:	2b02      	cmp	r3, #2
 800453a:	d009      	beq.n	8004550 <RCCEx_PLLSAI1_Config+0x74>
 800453c:	e020      	b.n	8004580 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800453e:	4b5f      	ldr	r3, [pc, #380]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d11d      	bne.n	8004586 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800454e:	e01a      	b.n	8004586 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004550:	4b5a      	ldr	r3, [pc, #360]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004558:	2b00      	cmp	r3, #0
 800455a:	d116      	bne.n	800458a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004560:	e013      	b.n	800458a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004562:	4b56      	ldr	r3, [pc, #344]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10f      	bne.n	800458e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800456e:	4b53      	ldr	r3, [pc, #332]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800457e:	e006      	b.n	800458e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	73fb      	strb	r3, [r7, #15]
      break;
 8004584:	e004      	b.n	8004590 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004586:	bf00      	nop
 8004588:	e002      	b.n	8004590 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800458a:	bf00      	nop
 800458c:	e000      	b.n	8004590 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800458e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10d      	bne.n	80045b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004596:	4b49      	ldr	r3, [pc, #292]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6819      	ldr	r1, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	430b      	orrs	r3, r1
 80045ac:	4943      	ldr	r1, [pc, #268]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d17c      	bne.n	80046b2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045b8:	4b40      	ldr	r3, [pc, #256]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a3f      	ldr	r2, [pc, #252]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80045be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c4:	f7fd fdba 	bl	800213c <HAL_GetTick>
 80045c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045ca:	e009      	b.n	80045e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045cc:	f7fd fdb6 	bl	800213c <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d902      	bls.n	80045e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	73fb      	strb	r3, [r7, #15]
        break;
 80045de:	e005      	b.n	80045ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045e0:	4b36      	ldr	r3, [pc, #216]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1ef      	bne.n	80045cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d15f      	bne.n	80046b2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d110      	bne.n	800461a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045f8:	4b30      	ldr	r3, [pc, #192]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004600:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6892      	ldr	r2, [r2, #8]
 8004608:	0211      	lsls	r1, r2, #8
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	68d2      	ldr	r2, [r2, #12]
 800460e:	06d2      	lsls	r2, r2, #27
 8004610:	430a      	orrs	r2, r1
 8004612:	492a      	ldr	r1, [pc, #168]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004614:	4313      	orrs	r3, r2
 8004616:	610b      	str	r3, [r1, #16]
 8004618:	e027      	b.n	800466a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d112      	bne.n	8004646 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004620:	4b26      	ldr	r3, [pc, #152]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004628:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6892      	ldr	r2, [r2, #8]
 8004630:	0211      	lsls	r1, r2, #8
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6912      	ldr	r2, [r2, #16]
 8004636:	0852      	lsrs	r2, r2, #1
 8004638:	3a01      	subs	r2, #1
 800463a:	0552      	lsls	r2, r2, #21
 800463c:	430a      	orrs	r2, r1
 800463e:	491f      	ldr	r1, [pc, #124]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004640:	4313      	orrs	r3, r2
 8004642:	610b      	str	r3, [r1, #16]
 8004644:	e011      	b.n	800466a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004646:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800464e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6892      	ldr	r2, [r2, #8]
 8004656:	0211      	lsls	r1, r2, #8
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6952      	ldr	r2, [r2, #20]
 800465c:	0852      	lsrs	r2, r2, #1
 800465e:	3a01      	subs	r2, #1
 8004660:	0652      	lsls	r2, r2, #25
 8004662:	430a      	orrs	r2, r1
 8004664:	4915      	ldr	r1, [pc, #84]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004666:	4313      	orrs	r3, r2
 8004668:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800466a:	4b14      	ldr	r3, [pc, #80]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a13      	ldr	r2, [pc, #76]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004670:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004674:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004676:	f7fd fd61 	bl	800213c <HAL_GetTick>
 800467a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800467c:	e009      	b.n	8004692 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800467e:	f7fd fd5d 	bl	800213c <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d902      	bls.n	8004692 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	73fb      	strb	r3, [r7, #15]
          break;
 8004690:	e005      	b.n	800469e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004692:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0ef      	beq.n	800467e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d106      	bne.n	80046b2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	4903      	ldr	r1, [pc, #12]	; (80046bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40021000 	.word	0x40021000

080046c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e095      	b.n	80047fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d108      	bne.n	80046ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046e2:	d009      	beq.n	80046f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	61da      	str	r2, [r3, #28]
 80046ea:	e005      	b.n	80046f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fd f82c 	bl	8001770 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800472e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004738:	d902      	bls.n	8004740 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	e002      	b.n	8004746 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004744:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800474e:	d007      	beq.n	8004760 <HAL_SPI_Init+0xa0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004758:	d002      	beq.n	8004760 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a2:	ea42 0103 	orr.w	r1, r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	0c1b      	lsrs	r3, r3, #16
 80047bc:	f003 0204 	and.w	r2, r3, #4
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	f003 0310 	and.w	r3, r3, #16
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80047dc:	ea42 0103 	orr.w	r1, r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e049      	b.n	80048ac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d106      	bne.n	8004832 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7fd fb1b 	bl	8001e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2202      	movs	r2, #2
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3304      	adds	r3, #4
 8004842:	4619      	mov	r1, r3
 8004844:	4610      	mov	r0, r2
 8004846:	f000 fc0f 	bl	8005068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d001      	beq.n	80048cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e03b      	b.n	8004944 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a19      	ldr	r2, [pc, #100]	; (8004950 <HAL_TIM_Base_Start_IT+0x9c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d009      	beq.n	8004902 <HAL_TIM_Base_Start_IT+0x4e>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f6:	d004      	beq.n	8004902 <HAL_TIM_Base_Start_IT+0x4e>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a15      	ldr	r2, [pc, #84]	; (8004954 <HAL_TIM_Base_Start_IT+0xa0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d115      	bne.n	800492e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	4b13      	ldr	r3, [pc, #76]	; (8004958 <HAL_TIM_Base_Start_IT+0xa4>)
 800490a:	4013      	ands	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b06      	cmp	r3, #6
 8004912:	d015      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x8c>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800491a:	d011      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492c:	e008      	b.n	8004940 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0201 	orr.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	e000      	b.n	8004942 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004940:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	40012c00 	.word	0x40012c00
 8004954:	40014000 	.word	0x40014000
 8004958:	00010007 	.word	0x00010007

0800495c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e049      	b.n	8004a02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f841 	bl	8004a0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3304      	adds	r3, #4
 8004998:	4619      	mov	r1, r3
 800499a:	4610      	mov	r0, r2
 800499c:	f000 fb64 	bl	8005068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b082      	sub	sp, #8
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d122      	bne.n	8004a7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d11b      	bne.n	8004a7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f06f 0202 	mvn.w	r2, #2
 8004a4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	f003 0303 	and.w	r3, r3, #3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fae2 	bl	800502a <HAL_TIM_IC_CaptureCallback>
 8004a66:	e005      	b.n	8004a74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fad4 	bl	8005016 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fae5 	bl	800503e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d122      	bne.n	8004ace <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d11b      	bne.n	8004ace <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f06f 0204 	mvn.w	r2, #4
 8004a9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fab8 	bl	800502a <HAL_TIM_IC_CaptureCallback>
 8004aba:	e005      	b.n	8004ac8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 faaa 	bl	8005016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fabb 	bl	800503e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d122      	bne.n	8004b22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d11b      	bne.n	8004b22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f06f 0208 	mvn.w	r2, #8
 8004af2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2204      	movs	r2, #4
 8004af8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fa8e 	bl	800502a <HAL_TIM_IC_CaptureCallback>
 8004b0e:	e005      	b.n	8004b1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fa80 	bl	8005016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fa91 	bl	800503e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f003 0310 	and.w	r3, r3, #16
 8004b2c:	2b10      	cmp	r3, #16
 8004b2e:	d122      	bne.n	8004b76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f003 0310 	and.w	r3, r3, #16
 8004b3a:	2b10      	cmp	r3, #16
 8004b3c:	d11b      	bne.n	8004b76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f06f 0210 	mvn.w	r2, #16
 8004b46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2208      	movs	r2, #8
 8004b4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fa64 	bl	800502a <HAL_TIM_IC_CaptureCallback>
 8004b62:	e005      	b.n	8004b70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fa56 	bl	8005016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fa67 	bl	800503e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d10e      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d107      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f06f 0201 	mvn.w	r2, #1
 8004b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7fc fd53 	bl	8001648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bac:	2b80      	cmp	r3, #128	; 0x80
 8004bae:	d10e      	bne.n	8004bce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bba:	2b80      	cmp	r3, #128	; 0x80
 8004bbc:	d107      	bne.n	8004bce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 feb1 	bl	8005930 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bdc:	d10e      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be8:	2b80      	cmp	r3, #128	; 0x80
 8004bea:	d107      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fea4 	bl	8005944 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c06:	2b40      	cmp	r3, #64	; 0x40
 8004c08:	d10e      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d107      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fa15 	bl	8005052 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	d10e      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f003 0320 	and.w	r3, r3, #32
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d107      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f06f 0220 	mvn.w	r2, #32
 8004c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fe64 	bl	800591c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c54:	bf00      	nop
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c76:	2302      	movs	r3, #2
 8004c78:	e0ff      	b.n	8004e7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b14      	cmp	r3, #20
 8004c86:	f200 80f0 	bhi.w	8004e6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004c8a:	a201      	add	r2, pc, #4	; (adr r2, 8004c90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c90:	08004ce5 	.word	0x08004ce5
 8004c94:	08004e6b 	.word	0x08004e6b
 8004c98:	08004e6b 	.word	0x08004e6b
 8004c9c:	08004e6b 	.word	0x08004e6b
 8004ca0:	08004d25 	.word	0x08004d25
 8004ca4:	08004e6b 	.word	0x08004e6b
 8004ca8:	08004e6b 	.word	0x08004e6b
 8004cac:	08004e6b 	.word	0x08004e6b
 8004cb0:	08004d67 	.word	0x08004d67
 8004cb4:	08004e6b 	.word	0x08004e6b
 8004cb8:	08004e6b 	.word	0x08004e6b
 8004cbc:	08004e6b 	.word	0x08004e6b
 8004cc0:	08004da7 	.word	0x08004da7
 8004cc4:	08004e6b 	.word	0x08004e6b
 8004cc8:	08004e6b 	.word	0x08004e6b
 8004ccc:	08004e6b 	.word	0x08004e6b
 8004cd0:	08004de9 	.word	0x08004de9
 8004cd4:	08004e6b 	.word	0x08004e6b
 8004cd8:	08004e6b 	.word	0x08004e6b
 8004cdc:	08004e6b 	.word	0x08004e6b
 8004ce0:	08004e29 	.word	0x08004e29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fa20 	bl	8005130 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699a      	ldr	r2, [r3, #24]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0208 	orr.w	r2, r2, #8
 8004cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699a      	ldr	r2, [r3, #24]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0204 	bic.w	r2, r2, #4
 8004d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6999      	ldr	r1, [r3, #24]
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	691a      	ldr	r2, [r3, #16]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	619a      	str	r2, [r3, #24]
      break;
 8004d22:	e0a5      	b.n	8004e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68b9      	ldr	r1, [r7, #8]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 fa7c 	bl	8005228 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699a      	ldr	r2, [r3, #24]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699a      	ldr	r2, [r3, #24]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6999      	ldr	r1, [r3, #24]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	021a      	lsls	r2, r3, #8
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	619a      	str	r2, [r3, #24]
      break;
 8004d64:	e084      	b.n	8004e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68b9      	ldr	r1, [r7, #8]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 fad5 	bl	800531c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69da      	ldr	r2, [r3, #28]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f042 0208 	orr.w	r2, r2, #8
 8004d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0204 	bic.w	r2, r2, #4
 8004d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69d9      	ldr	r1, [r3, #28]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	691a      	ldr	r2, [r3, #16]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	61da      	str	r2, [r3, #28]
      break;
 8004da4:	e064      	b.n	8004e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68b9      	ldr	r1, [r7, #8]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 fb2d 	bl	800540c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69da      	ldr	r2, [r3, #28]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69da      	ldr	r2, [r3, #28]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69d9      	ldr	r1, [r3, #28]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	021a      	lsls	r2, r3, #8
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	61da      	str	r2, [r3, #28]
      break;
 8004de6:	e043      	b.n	8004e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68b9      	ldr	r1, [r7, #8]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 fb6a 	bl	80054c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0208 	orr.w	r2, r2, #8
 8004e02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0204 	bic.w	r2, r2, #4
 8004e12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e26:	e023      	b.n	8004e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68b9      	ldr	r1, [r7, #8]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 fba2 	bl	8005578 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	021a      	lsls	r2, r3, #8
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e68:	e002      	b.n	8004e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop

08004e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_TIM_ConfigClockSource+0x1c>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e0b6      	b.n	800500e <HAL_TIM_ConfigClockSource+0x18a>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ebe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004edc:	d03e      	beq.n	8004f5c <HAL_TIM_ConfigClockSource+0xd8>
 8004ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ee2:	f200 8087 	bhi.w	8004ff4 <HAL_TIM_ConfigClockSource+0x170>
 8004ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eea:	f000 8086 	beq.w	8004ffa <HAL_TIM_ConfigClockSource+0x176>
 8004eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef2:	d87f      	bhi.n	8004ff4 <HAL_TIM_ConfigClockSource+0x170>
 8004ef4:	2b70      	cmp	r3, #112	; 0x70
 8004ef6:	d01a      	beq.n	8004f2e <HAL_TIM_ConfigClockSource+0xaa>
 8004ef8:	2b70      	cmp	r3, #112	; 0x70
 8004efa:	d87b      	bhi.n	8004ff4 <HAL_TIM_ConfigClockSource+0x170>
 8004efc:	2b60      	cmp	r3, #96	; 0x60
 8004efe:	d050      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0x11e>
 8004f00:	2b60      	cmp	r3, #96	; 0x60
 8004f02:	d877      	bhi.n	8004ff4 <HAL_TIM_ConfigClockSource+0x170>
 8004f04:	2b50      	cmp	r3, #80	; 0x50
 8004f06:	d03c      	beq.n	8004f82 <HAL_TIM_ConfigClockSource+0xfe>
 8004f08:	2b50      	cmp	r3, #80	; 0x50
 8004f0a:	d873      	bhi.n	8004ff4 <HAL_TIM_ConfigClockSource+0x170>
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d058      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x13e>
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	d86f      	bhi.n	8004ff4 <HAL_TIM_ConfigClockSource+0x170>
 8004f14:	2b30      	cmp	r3, #48	; 0x30
 8004f16:	d064      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x15e>
 8004f18:	2b30      	cmp	r3, #48	; 0x30
 8004f1a:	d86b      	bhi.n	8004ff4 <HAL_TIM_ConfigClockSource+0x170>
 8004f1c:	2b20      	cmp	r3, #32
 8004f1e:	d060      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x15e>
 8004f20:	2b20      	cmp	r3, #32
 8004f22:	d867      	bhi.n	8004ff4 <HAL_TIM_ConfigClockSource+0x170>
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d05c      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x15e>
 8004f28:	2b10      	cmp	r3, #16
 8004f2a:	d05a      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x15e>
 8004f2c:	e062      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f3e:	f000 fbef 	bl	8005720 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	609a      	str	r2, [r3, #8]
      break;
 8004f5a:	e04f      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f6c:	f000 fbd8 	bl	8005720 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689a      	ldr	r2, [r3, #8]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f7e:	609a      	str	r2, [r3, #8]
      break;
 8004f80:	e03c      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f000 fb4c 	bl	800562c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2150      	movs	r1, #80	; 0x50
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fba5 	bl	80056ea <TIM_ITRx_SetConfig>
      break;
 8004fa0:	e02c      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f000 fb6b 	bl	800568a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2160      	movs	r1, #96	; 0x60
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fb95 	bl	80056ea <TIM_ITRx_SetConfig>
      break;
 8004fc0:	e01c      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f000 fb2c 	bl	800562c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2140      	movs	r1, #64	; 0x40
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fb85 	bl	80056ea <TIM_ITRx_SetConfig>
      break;
 8004fe0:	e00c      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4619      	mov	r1, r3
 8004fec:	4610      	mov	r0, r2
 8004fee:	f000 fb7c 	bl	80056ea <TIM_ITRx_SetConfig>
      break;
 8004ff2:	e003      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff8:	e000      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ffa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800500c:	7bfb      	ldrb	r3, [r7, #15]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
	...

08005068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a2a      	ldr	r2, [pc, #168]	; (8005124 <TIM_Base_SetConfig+0xbc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d003      	beq.n	8005088 <TIM_Base_SetConfig+0x20>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005086:	d108      	bne.n	800509a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a21      	ldr	r2, [pc, #132]	; (8005124 <TIM_Base_SetConfig+0xbc>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00b      	beq.n	80050ba <TIM_Base_SetConfig+0x52>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a8:	d007      	beq.n	80050ba <TIM_Base_SetConfig+0x52>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a1e      	ldr	r2, [pc, #120]	; (8005128 <TIM_Base_SetConfig+0xc0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d003      	beq.n	80050ba <TIM_Base_SetConfig+0x52>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a1d      	ldr	r2, [pc, #116]	; (800512c <TIM_Base_SetConfig+0xc4>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d108      	bne.n	80050cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a0c      	ldr	r2, [pc, #48]	; (8005124 <TIM_Base_SetConfig+0xbc>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d007      	beq.n	8005108 <TIM_Base_SetConfig+0xa0>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a0b      	ldr	r2, [pc, #44]	; (8005128 <TIM_Base_SetConfig+0xc0>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d003      	beq.n	8005108 <TIM_Base_SetConfig+0xa0>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a0a      	ldr	r2, [pc, #40]	; (800512c <TIM_Base_SetConfig+0xc4>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d103      	bne.n	8005110 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	615a      	str	r2, [r3, #20]
}
 8005116:	bf00      	nop
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40012c00 	.word	0x40012c00
 8005128:	40014000 	.word	0x40014000
 800512c:	40014400 	.word	0x40014400

08005130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	f023 0201 	bic.w	r2, r3, #1
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800515e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0303 	bic.w	r3, r3, #3
 800516a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f023 0302 	bic.w	r3, r3, #2
 800517c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a24      	ldr	r2, [pc, #144]	; (800521c <TIM_OC1_SetConfig+0xec>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d007      	beq.n	80051a0 <TIM_OC1_SetConfig+0x70>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a23      	ldr	r2, [pc, #140]	; (8005220 <TIM_OC1_SetConfig+0xf0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d003      	beq.n	80051a0 <TIM_OC1_SetConfig+0x70>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a22      	ldr	r2, [pc, #136]	; (8005224 <TIM_OC1_SetConfig+0xf4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d10c      	bne.n	80051ba <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f023 0308 	bic.w	r3, r3, #8
 80051a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f023 0304 	bic.w	r3, r3, #4
 80051b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a17      	ldr	r2, [pc, #92]	; (800521c <TIM_OC1_SetConfig+0xec>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d007      	beq.n	80051d2 <TIM_OC1_SetConfig+0xa2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a16      	ldr	r2, [pc, #88]	; (8005220 <TIM_OC1_SetConfig+0xf0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d003      	beq.n	80051d2 <TIM_OC1_SetConfig+0xa2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a15      	ldr	r2, [pc, #84]	; (8005224 <TIM_OC1_SetConfig+0xf4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d111      	bne.n	80051f6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	621a      	str	r2, [r3, #32]
}
 8005210:	bf00      	nop
 8005212:	371c      	adds	r7, #28
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	40012c00 	.word	0x40012c00
 8005220:	40014000 	.word	0x40014000
 8005224:	40014400 	.word	0x40014400

08005228 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	f023 0210 	bic.w	r2, r3, #16
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800525a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	021b      	lsls	r3, r3, #8
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f023 0320 	bic.w	r3, r3, #32
 8005276:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a22      	ldr	r2, [pc, #136]	; (8005310 <TIM_OC2_SetConfig+0xe8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d10d      	bne.n	80052a8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a19      	ldr	r2, [pc, #100]	; (8005310 <TIM_OC2_SetConfig+0xe8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d007      	beq.n	80052c0 <TIM_OC2_SetConfig+0x98>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a18      	ldr	r2, [pc, #96]	; (8005314 <TIM_OC2_SetConfig+0xec>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_OC2_SetConfig+0x98>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a17      	ldr	r2, [pc, #92]	; (8005318 <TIM_OC2_SetConfig+0xf0>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d113      	bne.n	80052e8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	621a      	str	r2, [r3, #32]
}
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40012c00 	.word	0x40012c00
 8005314:	40014000 	.word	0x40014000
 8005318:	40014400 	.word	0x40014400

0800531c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800534a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0303 	bic.w	r3, r3, #3
 8005356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	021b      	lsls	r3, r3, #8
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a21      	ldr	r2, [pc, #132]	; (8005400 <TIM_OC3_SetConfig+0xe4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d10d      	bne.n	800539a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005384:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	021b      	lsls	r3, r3, #8
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	4313      	orrs	r3, r2
 8005390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a18      	ldr	r2, [pc, #96]	; (8005400 <TIM_OC3_SetConfig+0xe4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d007      	beq.n	80053b2 <TIM_OC3_SetConfig+0x96>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a17      	ldr	r2, [pc, #92]	; (8005404 <TIM_OC3_SetConfig+0xe8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d003      	beq.n	80053b2 <TIM_OC3_SetConfig+0x96>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a16      	ldr	r2, [pc, #88]	; (8005408 <TIM_OC3_SetConfig+0xec>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d113      	bne.n	80053da <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	621a      	str	r2, [r3, #32]
}
 80053f4:	bf00      	nop
 80053f6:	371c      	adds	r7, #28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	40012c00 	.word	0x40012c00
 8005404:	40014000 	.word	0x40014000
 8005408:	40014400 	.word	0x40014400

0800540c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800543a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800545a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	031b      	lsls	r3, r3, #12
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a14      	ldr	r2, [pc, #80]	; (80054bc <TIM_OC4_SetConfig+0xb0>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d007      	beq.n	8005480 <TIM_OC4_SetConfig+0x74>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a13      	ldr	r2, [pc, #76]	; (80054c0 <TIM_OC4_SetConfig+0xb4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d003      	beq.n	8005480 <TIM_OC4_SetConfig+0x74>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a12      	ldr	r2, [pc, #72]	; (80054c4 <TIM_OC4_SetConfig+0xb8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d109      	bne.n	8005494 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005486:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	019b      	lsls	r3, r3, #6
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	621a      	str	r2, [r3, #32]
}
 80054ae:	bf00      	nop
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40012c00 	.word	0x40012c00
 80054c0:	40014000 	.word	0x40014000
 80054c4:	40014400 	.word	0x40014400

080054c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800550c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	041b      	lsls	r3, r3, #16
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a13      	ldr	r2, [pc, #76]	; (800556c <TIM_OC5_SetConfig+0xa4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d007      	beq.n	8005532 <TIM_OC5_SetConfig+0x6a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a12      	ldr	r2, [pc, #72]	; (8005570 <TIM_OC5_SetConfig+0xa8>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d003      	beq.n	8005532 <TIM_OC5_SetConfig+0x6a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a11      	ldr	r2, [pc, #68]	; (8005574 <TIM_OC5_SetConfig+0xac>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d109      	bne.n	8005546 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005538:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	021b      	lsls	r3, r3, #8
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	4313      	orrs	r3, r2
 8005544:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	621a      	str	r2, [r3, #32]
}
 8005560:	bf00      	nop
 8005562:	371c      	adds	r7, #28
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	40012c00 	.word	0x40012c00
 8005570:	40014000 	.word	0x40014000
 8005574:	40014400 	.word	0x40014400

08005578 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	021b      	lsls	r3, r3, #8
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	051b      	lsls	r3, r3, #20
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a14      	ldr	r2, [pc, #80]	; (8005620 <TIM_OC6_SetConfig+0xa8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d007      	beq.n	80055e4 <TIM_OC6_SetConfig+0x6c>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a13      	ldr	r2, [pc, #76]	; (8005624 <TIM_OC6_SetConfig+0xac>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d003      	beq.n	80055e4 <TIM_OC6_SetConfig+0x6c>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a12      	ldr	r2, [pc, #72]	; (8005628 <TIM_OC6_SetConfig+0xb0>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d109      	bne.n	80055f8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	029b      	lsls	r3, r3, #10
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	621a      	str	r2, [r3, #32]
}
 8005612:	bf00      	nop
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40014000 	.word	0x40014000
 8005628:	40014400 	.word	0x40014400

0800562c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f023 0201 	bic.w	r2, r3, #1
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	4313      	orrs	r3, r2
 8005660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f023 030a 	bic.w	r3, r3, #10
 8005668:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4313      	orrs	r3, r2
 8005670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	621a      	str	r2, [r3, #32]
}
 800567e:	bf00      	nop
 8005680:	371c      	adds	r7, #28
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800568a:	b480      	push	{r7}
 800568c:	b087      	sub	sp, #28
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	f023 0210 	bic.w	r2, r3, #16
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	031b      	lsls	r3, r3, #12
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	011b      	lsls	r3, r3, #4
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	621a      	str	r2, [r3, #32]
}
 80056de:	bf00      	nop
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b085      	sub	sp, #20
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005700:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4313      	orrs	r3, r2
 8005708:	f043 0307 	orr.w	r3, r3, #7
 800570c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	609a      	str	r2, [r3, #8]
}
 8005714:	bf00      	nop
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
 800572c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800573a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	021a      	lsls	r2, r3, #8
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	431a      	orrs	r2, r3
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	4313      	orrs	r3, r2
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	609a      	str	r2, [r3, #8]
}
 8005754:	bf00      	nop
 8005756:	371c      	adds	r7, #28
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005774:	2302      	movs	r3, #2
 8005776:	e04f      	b.n	8005818 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a21      	ldr	r2, [pc, #132]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d108      	bne.n	80057b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a14      	ldr	r2, [pc, #80]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d009      	beq.n	80057ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e0:	d004      	beq.n	80057ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a10      	ldr	r2, [pc, #64]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d10c      	bne.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40014000 	.word	0x40014000

0800582c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005844:	2302      	movs	r3, #2
 8005846:	e060      	b.n	800590a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	4313      	orrs	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	041b      	lsls	r3, r3, #16
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a14      	ldr	r2, [pc, #80]	; (8005918 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d115      	bne.n	80058f8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	051b      	lsls	r3, r3, #20
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40012c00 	.word	0x40012c00

0800591c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e040      	b.n	80059ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fc fb30 	bl	8001fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2224      	movs	r2, #36	; 0x24
 8005984:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0201 	bic.w	r2, r2, #1
 8005994:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f8c0 	bl	8005b1c <UART_SetConfig>
 800599c:	4603      	mov	r3, r0
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e022      	b.n	80059ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fae0 	bl	8005f74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0201 	orr.w	r2, r2, #1
 80059e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fb67 	bl	80060b8 <UART_CheckIdleState>
 80059ea:	4603      	mov	r3, r0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08a      	sub	sp, #40	; 0x28
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	603b      	str	r3, [r7, #0]
 8005a00:	4613      	mov	r3, r2
 8005a02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	f040 8082 	bne.w	8005b12 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <HAL_UART_Transmit+0x26>
 8005a14:	88fb      	ldrh	r3, [r7, #6]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e07a      	b.n	8005b14 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_UART_Transmit+0x38>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e073      	b.n	8005b14 <HAL_UART_Transmit+0x120>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2221      	movs	r2, #33	; 0x21
 8005a40:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a42:	f7fc fb7b 	bl	800213c <HAL_GetTick>
 8005a46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	88fa      	ldrh	r2, [r7, #6]
 8005a4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	88fa      	ldrh	r2, [r7, #6]
 8005a54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a60:	d108      	bne.n	8005a74 <HAL_UART_Transmit+0x80>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d104      	bne.n	8005a74 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	61bb      	str	r3, [r7, #24]
 8005a72:	e003      	b.n	8005a7c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005a84:	e02d      	b.n	8005ae2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2180      	movs	r1, #128	; 0x80
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 fb5a 	bl	800614a <UART_WaitOnFlagUntilTimeout>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e039      	b.n	8005b14 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10b      	bne.n	8005abe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	881a      	ldrh	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ab2:	b292      	uxth	r2, r2
 8005ab4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	3302      	adds	r3, #2
 8005aba:	61bb      	str	r3, [r7, #24]
 8005abc:	e008      	b.n	8005ad0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	781a      	ldrb	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	b292      	uxth	r2, r2
 8005ac8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	3301      	adds	r3, #1
 8005ace:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1cb      	bne.n	8005a86 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2200      	movs	r2, #0
 8005af6:	2140      	movs	r1, #64	; 0x40
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 fb26 	bl	800614a <UART_WaitOnFlagUntilTimeout>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e005      	b.n	8005b14 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e000      	b.n	8005b14 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005b12:	2302      	movs	r3, #2
  }
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3720      	adds	r7, #32
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b20:	b08a      	sub	sp, #40	; 0x28
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	431a      	orrs	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	4bb4      	ldr	r3, [pc, #720]	; (8005e1c <UART_SetConfig+0x300>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	6812      	ldr	r2, [r2, #0]
 8005b52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b54:	430b      	orrs	r3, r1
 8005b56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4aa9      	ldr	r2, [pc, #676]	; (8005e20 <UART_SetConfig+0x304>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d004      	beq.n	8005b88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b84:	4313      	orrs	r3, r2
 8005b86:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4aa0      	ldr	r2, [pc, #640]	; (8005e24 <UART_SetConfig+0x308>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d126      	bne.n	8005bf4 <UART_SetConfig+0xd8>
 8005ba6:	4ba0      	ldr	r3, [pc, #640]	; (8005e28 <UART_SetConfig+0x30c>)
 8005ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bac:	f003 0303 	and.w	r3, r3, #3
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d81b      	bhi.n	8005bec <UART_SetConfig+0xd0>
 8005bb4:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <UART_SetConfig+0xa0>)
 8005bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bba:	bf00      	nop
 8005bbc:	08005bcd 	.word	0x08005bcd
 8005bc0:	08005bdd 	.word	0x08005bdd
 8005bc4:	08005bd5 	.word	0x08005bd5
 8005bc8:	08005be5 	.word	0x08005be5
 8005bcc:	2301      	movs	r3, #1
 8005bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bd2:	e080      	b.n	8005cd6 <UART_SetConfig+0x1ba>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bda:	e07c      	b.n	8005cd6 <UART_SetConfig+0x1ba>
 8005bdc:	2304      	movs	r3, #4
 8005bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005be2:	e078      	b.n	8005cd6 <UART_SetConfig+0x1ba>
 8005be4:	2308      	movs	r3, #8
 8005be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bea:	e074      	b.n	8005cd6 <UART_SetConfig+0x1ba>
 8005bec:	2310      	movs	r3, #16
 8005bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bf2:	e070      	b.n	8005cd6 <UART_SetConfig+0x1ba>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a8c      	ldr	r2, [pc, #560]	; (8005e2c <UART_SetConfig+0x310>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d138      	bne.n	8005c70 <UART_SetConfig+0x154>
 8005bfe:	4b8a      	ldr	r3, [pc, #552]	; (8005e28 <UART_SetConfig+0x30c>)
 8005c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c04:	f003 030c 	and.w	r3, r3, #12
 8005c08:	2b0c      	cmp	r3, #12
 8005c0a:	d82d      	bhi.n	8005c68 <UART_SetConfig+0x14c>
 8005c0c:	a201      	add	r2, pc, #4	; (adr r2, 8005c14 <UART_SetConfig+0xf8>)
 8005c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c12:	bf00      	nop
 8005c14:	08005c49 	.word	0x08005c49
 8005c18:	08005c69 	.word	0x08005c69
 8005c1c:	08005c69 	.word	0x08005c69
 8005c20:	08005c69 	.word	0x08005c69
 8005c24:	08005c59 	.word	0x08005c59
 8005c28:	08005c69 	.word	0x08005c69
 8005c2c:	08005c69 	.word	0x08005c69
 8005c30:	08005c69 	.word	0x08005c69
 8005c34:	08005c51 	.word	0x08005c51
 8005c38:	08005c69 	.word	0x08005c69
 8005c3c:	08005c69 	.word	0x08005c69
 8005c40:	08005c69 	.word	0x08005c69
 8005c44:	08005c61 	.word	0x08005c61
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c4e:	e042      	b.n	8005cd6 <UART_SetConfig+0x1ba>
 8005c50:	2302      	movs	r3, #2
 8005c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c56:	e03e      	b.n	8005cd6 <UART_SetConfig+0x1ba>
 8005c58:	2304      	movs	r3, #4
 8005c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c5e:	e03a      	b.n	8005cd6 <UART_SetConfig+0x1ba>
 8005c60:	2308      	movs	r3, #8
 8005c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c66:	e036      	b.n	8005cd6 <UART_SetConfig+0x1ba>
 8005c68:	2310      	movs	r3, #16
 8005c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c6e:	e032      	b.n	8005cd6 <UART_SetConfig+0x1ba>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a6a      	ldr	r2, [pc, #424]	; (8005e20 <UART_SetConfig+0x304>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d12a      	bne.n	8005cd0 <UART_SetConfig+0x1b4>
 8005c7a:	4b6b      	ldr	r3, [pc, #428]	; (8005e28 <UART_SetConfig+0x30c>)
 8005c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c88:	d01a      	beq.n	8005cc0 <UART_SetConfig+0x1a4>
 8005c8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c8e:	d81b      	bhi.n	8005cc8 <UART_SetConfig+0x1ac>
 8005c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c94:	d00c      	beq.n	8005cb0 <UART_SetConfig+0x194>
 8005c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c9a:	d815      	bhi.n	8005cc8 <UART_SetConfig+0x1ac>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <UART_SetConfig+0x18c>
 8005ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca4:	d008      	beq.n	8005cb8 <UART_SetConfig+0x19c>
 8005ca6:	e00f      	b.n	8005cc8 <UART_SetConfig+0x1ac>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cae:	e012      	b.n	8005cd6 <UART_SetConfig+0x1ba>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cb6:	e00e      	b.n	8005cd6 <UART_SetConfig+0x1ba>
 8005cb8:	2304      	movs	r3, #4
 8005cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cbe:	e00a      	b.n	8005cd6 <UART_SetConfig+0x1ba>
 8005cc0:	2308      	movs	r3, #8
 8005cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cc6:	e006      	b.n	8005cd6 <UART_SetConfig+0x1ba>
 8005cc8:	2310      	movs	r3, #16
 8005cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cce:	e002      	b.n	8005cd6 <UART_SetConfig+0x1ba>
 8005cd0:	2310      	movs	r3, #16
 8005cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a51      	ldr	r2, [pc, #324]	; (8005e20 <UART_SetConfig+0x304>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d17a      	bne.n	8005dd6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ce0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d824      	bhi.n	8005d32 <UART_SetConfig+0x216>
 8005ce8:	a201      	add	r2, pc, #4	; (adr r2, 8005cf0 <UART_SetConfig+0x1d4>)
 8005cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cee:	bf00      	nop
 8005cf0:	08005d15 	.word	0x08005d15
 8005cf4:	08005d33 	.word	0x08005d33
 8005cf8:	08005d1d 	.word	0x08005d1d
 8005cfc:	08005d33 	.word	0x08005d33
 8005d00:	08005d23 	.word	0x08005d23
 8005d04:	08005d33 	.word	0x08005d33
 8005d08:	08005d33 	.word	0x08005d33
 8005d0c:	08005d33 	.word	0x08005d33
 8005d10:	08005d2b 	.word	0x08005d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d14:	f7fe f902 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 8005d18:	61f8      	str	r0, [r7, #28]
        break;
 8005d1a:	e010      	b.n	8005d3e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d1c:	4b44      	ldr	r3, [pc, #272]	; (8005e30 <UART_SetConfig+0x314>)
 8005d1e:	61fb      	str	r3, [r7, #28]
        break;
 8005d20:	e00d      	b.n	8005d3e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d22:	f7fe f863 	bl	8003dec <HAL_RCC_GetSysClockFreq>
 8005d26:	61f8      	str	r0, [r7, #28]
        break;
 8005d28:	e009      	b.n	8005d3e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d2e:	61fb      	str	r3, [r7, #28]
        break;
 8005d30:	e005      	b.n	8005d3e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 8107 	beq.w	8005f54 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	4413      	add	r3, r2
 8005d50:	69fa      	ldr	r2, [r7, #28]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d305      	bcc.n	8005d62 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d5c:	69fa      	ldr	r2, [r7, #28]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d903      	bls.n	8005d6a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d68:	e0f4      	b.n	8005f54 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	461c      	mov	r4, r3
 8005d70:	4615      	mov	r5, r2
 8005d72:	f04f 0200 	mov.w	r2, #0
 8005d76:	f04f 0300 	mov.w	r3, #0
 8005d7a:	022b      	lsls	r3, r5, #8
 8005d7c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005d80:	0222      	lsls	r2, r4, #8
 8005d82:	68f9      	ldr	r1, [r7, #12]
 8005d84:	6849      	ldr	r1, [r1, #4]
 8005d86:	0849      	lsrs	r1, r1, #1
 8005d88:	2000      	movs	r0, #0
 8005d8a:	4688      	mov	r8, r1
 8005d8c:	4681      	mov	r9, r0
 8005d8e:	eb12 0a08 	adds.w	sl, r2, r8
 8005d92:	eb43 0b09 	adc.w	fp, r3, r9
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	603b      	str	r3, [r7, #0]
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005da4:	4650      	mov	r0, sl
 8005da6:	4659      	mov	r1, fp
 8005da8:	f7fa fefe 	bl	8000ba8 <__aeabi_uldivmod>
 8005dac:	4602      	mov	r2, r0
 8005dae:	460b      	mov	r3, r1
 8005db0:	4613      	mov	r3, r2
 8005db2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dba:	d308      	bcc.n	8005dce <UART_SetConfig+0x2b2>
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dc2:	d204      	bcs.n	8005dce <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	60da      	str	r2, [r3, #12]
 8005dcc:	e0c2      	b.n	8005f54 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005dd4:	e0be      	b.n	8005f54 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dde:	d16a      	bne.n	8005eb6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005de0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d834      	bhi.n	8005e52 <UART_SetConfig+0x336>
 8005de8:	a201      	add	r2, pc, #4	; (adr r2, 8005df0 <UART_SetConfig+0x2d4>)
 8005dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dee:	bf00      	nop
 8005df0:	08005e15 	.word	0x08005e15
 8005df4:	08005e35 	.word	0x08005e35
 8005df8:	08005e3d 	.word	0x08005e3d
 8005dfc:	08005e53 	.word	0x08005e53
 8005e00:	08005e43 	.word	0x08005e43
 8005e04:	08005e53 	.word	0x08005e53
 8005e08:	08005e53 	.word	0x08005e53
 8005e0c:	08005e53 	.word	0x08005e53
 8005e10:	08005e4b 	.word	0x08005e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e14:	f7fe f882 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 8005e18:	61f8      	str	r0, [r7, #28]
        break;
 8005e1a:	e020      	b.n	8005e5e <UART_SetConfig+0x342>
 8005e1c:	efff69f3 	.word	0xefff69f3
 8005e20:	40008000 	.word	0x40008000
 8005e24:	40013800 	.word	0x40013800
 8005e28:	40021000 	.word	0x40021000
 8005e2c:	40004400 	.word	0x40004400
 8005e30:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e34:	f7fe f888 	bl	8003f48 <HAL_RCC_GetPCLK2Freq>
 8005e38:	61f8      	str	r0, [r7, #28]
        break;
 8005e3a:	e010      	b.n	8005e5e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e3c:	4b4c      	ldr	r3, [pc, #304]	; (8005f70 <UART_SetConfig+0x454>)
 8005e3e:	61fb      	str	r3, [r7, #28]
        break;
 8005e40:	e00d      	b.n	8005e5e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e42:	f7fd ffd3 	bl	8003dec <HAL_RCC_GetSysClockFreq>
 8005e46:	61f8      	str	r0, [r7, #28]
        break;
 8005e48:	e009      	b.n	8005e5e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e4e:	61fb      	str	r3, [r7, #28]
        break;
 8005e50:	e005      	b.n	8005e5e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d077      	beq.n	8005f54 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	005a      	lsls	r2, r3, #1
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	085b      	lsrs	r3, r3, #1
 8005e6e:	441a      	add	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e78:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	2b0f      	cmp	r3, #15
 8005e7e:	d916      	bls.n	8005eae <UART_SetConfig+0x392>
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e86:	d212      	bcs.n	8005eae <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	f023 030f 	bic.w	r3, r3, #15
 8005e90:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	085b      	lsrs	r3, r3, #1
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	8afb      	ldrh	r3, [r7, #22]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	8afa      	ldrh	r2, [r7, #22]
 8005eaa:	60da      	str	r2, [r3, #12]
 8005eac:	e052      	b.n	8005f54 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005eb4:	e04e      	b.n	8005f54 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005eb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d827      	bhi.n	8005f0e <UART_SetConfig+0x3f2>
 8005ebe:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <UART_SetConfig+0x3a8>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005ee9 	.word	0x08005ee9
 8005ec8:	08005ef1 	.word	0x08005ef1
 8005ecc:	08005ef9 	.word	0x08005ef9
 8005ed0:	08005f0f 	.word	0x08005f0f
 8005ed4:	08005eff 	.word	0x08005eff
 8005ed8:	08005f0f 	.word	0x08005f0f
 8005edc:	08005f0f 	.word	0x08005f0f
 8005ee0:	08005f0f 	.word	0x08005f0f
 8005ee4:	08005f07 	.word	0x08005f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ee8:	f7fe f818 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 8005eec:	61f8      	str	r0, [r7, #28]
        break;
 8005eee:	e014      	b.n	8005f1a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ef0:	f7fe f82a 	bl	8003f48 <HAL_RCC_GetPCLK2Freq>
 8005ef4:	61f8      	str	r0, [r7, #28]
        break;
 8005ef6:	e010      	b.n	8005f1a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ef8:	4b1d      	ldr	r3, [pc, #116]	; (8005f70 <UART_SetConfig+0x454>)
 8005efa:	61fb      	str	r3, [r7, #28]
        break;
 8005efc:	e00d      	b.n	8005f1a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005efe:	f7fd ff75 	bl	8003dec <HAL_RCC_GetSysClockFreq>
 8005f02:	61f8      	str	r0, [r7, #28]
        break;
 8005f04:	e009      	b.n	8005f1a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f0a:	61fb      	str	r3, [r7, #28]
        break;
 8005f0c:	e005      	b.n	8005f1a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f18:	bf00      	nop
    }

    if (pclk != 0U)
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d019      	beq.n	8005f54 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	085a      	lsrs	r2, r3, #1
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	441a      	add	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f32:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	2b0f      	cmp	r3, #15
 8005f38:	d909      	bls.n	8005f4e <UART_SetConfig+0x432>
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f40:	d205      	bcs.n	8005f4e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	60da      	str	r2, [r3, #12]
 8005f4c:	e002      	b.n	8005f54 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3728      	adds	r7, #40	; 0x28
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f6e:	bf00      	nop
 8005f70:	00f42400 	.word	0x00f42400

08005f74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00a      	beq.n	8005f9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00a      	beq.n	8005fe2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	f003 0310 	and.w	r3, r3, #16
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	f003 0320 	and.w	r3, r3, #32
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006050:	2b00      	cmp	r3, #0
 8006052:	d01a      	beq.n	800608a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006072:	d10a      	bne.n	800608a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	605a      	str	r2, [r3, #4]
  }
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af02      	add	r7, sp, #8
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060c8:	f7fc f838 	bl	800213c <HAL_GetTick>
 80060cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0308 	and.w	r3, r3, #8
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d10e      	bne.n	80060fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f82d 	bl	800614a <UART_WaitOnFlagUntilTimeout>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e023      	b.n	8006142 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b04      	cmp	r3, #4
 8006106:	d10e      	bne.n	8006126 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006108:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f817 	bl	800614a <UART_WaitOnFlagUntilTimeout>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e00d      	b.n	8006142 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2220      	movs	r2, #32
 800612a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b09c      	sub	sp, #112	; 0x70
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	603b      	str	r3, [r7, #0]
 8006156:	4613      	mov	r3, r2
 8006158:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800615a:	e0a5      	b.n	80062a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800615c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800615e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006162:	f000 80a1 	beq.w	80062a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006166:	f7fb ffe9 	bl	800213c <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006172:	429a      	cmp	r2, r3
 8006174:	d302      	bcc.n	800617c <UART_WaitOnFlagUntilTimeout+0x32>
 8006176:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006178:	2b00      	cmp	r3, #0
 800617a:	d13e      	bne.n	80061fa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800618a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800618c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006190:	667b      	str	r3, [r7, #100]	; 0x64
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	461a      	mov	r2, r3
 8006198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800619a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800619c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80061a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e6      	bne.n	800617c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3308      	adds	r3, #8
 80061b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c0:	f023 0301 	bic.w	r3, r3, #1
 80061c4:	663b      	str	r3, [r7, #96]	; 0x60
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3308      	adds	r3, #8
 80061cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80061d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e5      	bne.n	80061ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2220      	movs	r2, #32
 80061e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e067      	b.n	80062ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d04f      	beq.n	80062a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006216:	d147      	bne.n	80062a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006220:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622a:	e853 3f00 	ldrex	r3, [r3]
 800622e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006236:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	461a      	mov	r2, r3
 800623e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006240:	637b      	str	r3, [r7, #52]	; 0x34
 8006242:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006244:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006248:	e841 2300 	strex	r3, r2, [r1]
 800624c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800624e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1e6      	bne.n	8006222 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3308      	adds	r3, #8
 800625a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	e853 3f00 	ldrex	r3, [r3]
 8006262:	613b      	str	r3, [r7, #16]
   return(result);
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f023 0301 	bic.w	r3, r3, #1
 800626a:	66bb      	str	r3, [r7, #104]	; 0x68
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3308      	adds	r3, #8
 8006272:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006274:	623a      	str	r2, [r7, #32]
 8006276:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006278:	69f9      	ldr	r1, [r7, #28]
 800627a:	6a3a      	ldr	r2, [r7, #32]
 800627c:	e841 2300 	strex	r3, r2, [r1]
 8006280:	61bb      	str	r3, [r7, #24]
   return(result);
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e5      	bne.n	8006254 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2220      	movs	r2, #32
 800628c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2220      	movs	r2, #32
 8006292:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2220      	movs	r2, #32
 8006298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e010      	b.n	80062ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	69da      	ldr	r2, [r3, #28]
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	4013      	ands	r3, r2
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	bf0c      	ite	eq
 80062b8:	2301      	moveq	r3, #1
 80062ba:	2300      	movne	r3, #0
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	461a      	mov	r2, r3
 80062c0:	79fb      	ldrb	r3, [r7, #7]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	f43f af4a 	beq.w	800615c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3770      	adds	r7, #112	; 0x70
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
	...

080062d4 <__NVIC_SetPriority>:
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	4603      	mov	r3, r0
 80062dc:	6039      	str	r1, [r7, #0]
 80062de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	db0a      	blt.n	80062fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	490c      	ldr	r1, [pc, #48]	; (8006320 <__NVIC_SetPriority+0x4c>)
 80062ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062f2:	0112      	lsls	r2, r2, #4
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	440b      	add	r3, r1
 80062f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80062fc:	e00a      	b.n	8006314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	b2da      	uxtb	r2, r3
 8006302:	4908      	ldr	r1, [pc, #32]	; (8006324 <__NVIC_SetPriority+0x50>)
 8006304:	79fb      	ldrb	r3, [r7, #7]
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	3b04      	subs	r3, #4
 800630c:	0112      	lsls	r2, r2, #4
 800630e:	b2d2      	uxtb	r2, r2
 8006310:	440b      	add	r3, r1
 8006312:	761a      	strb	r2, [r3, #24]
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	e000e100 	.word	0xe000e100
 8006324:	e000ed00 	.word	0xe000ed00

08006328 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006328:	b580      	push	{r7, lr}
 800632a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800632c:	4b05      	ldr	r3, [pc, #20]	; (8006344 <SysTick_Handler+0x1c>)
 800632e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006330:	f002 f918 	bl	8008564 <xTaskGetSchedulerState>
 8006334:	4603      	mov	r3, r0
 8006336:	2b01      	cmp	r3, #1
 8006338:	d001      	beq.n	800633e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800633a:	f002 fefd 	bl	8009138 <xPortSysTickHandler>
  }
}
 800633e:	bf00      	nop
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	e000e010 	.word	0xe000e010

08006348 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006348:	b580      	push	{r7, lr}
 800634a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800634c:	2100      	movs	r1, #0
 800634e:	f06f 0004 	mvn.w	r0, #4
 8006352:	f7ff ffbf 	bl	80062d4 <__NVIC_SetPriority>
#endif
}
 8006356:	bf00      	nop
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006362:	f3ef 8305 	mrs	r3, IPSR
 8006366:	603b      	str	r3, [r7, #0]
  return(result);
 8006368:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800636e:	f06f 0305 	mvn.w	r3, #5
 8006372:	607b      	str	r3, [r7, #4]
 8006374:	e00c      	b.n	8006390 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006376:	4b0a      	ldr	r3, [pc, #40]	; (80063a0 <osKernelInitialize+0x44>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d105      	bne.n	800638a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800637e:	4b08      	ldr	r3, [pc, #32]	; (80063a0 <osKernelInitialize+0x44>)
 8006380:	2201      	movs	r2, #1
 8006382:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006384:	2300      	movs	r3, #0
 8006386:	607b      	str	r3, [r7, #4]
 8006388:	e002      	b.n	8006390 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800638a:	f04f 33ff 	mov.w	r3, #4294967295
 800638e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006390:	687b      	ldr	r3, [r7, #4]
}
 8006392:	4618      	mov	r0, r3
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	2000051c 	.word	0x2000051c

080063a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063aa:	f3ef 8305 	mrs	r3, IPSR
 80063ae:	603b      	str	r3, [r7, #0]
  return(result);
 80063b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <osKernelStart+0x1a>
    stat = osErrorISR;
 80063b6:	f06f 0305 	mvn.w	r3, #5
 80063ba:	607b      	str	r3, [r7, #4]
 80063bc:	e010      	b.n	80063e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80063be:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <osKernelStart+0x48>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d109      	bne.n	80063da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80063c6:	f7ff ffbf 	bl	8006348 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80063ca:	4b08      	ldr	r3, [pc, #32]	; (80063ec <osKernelStart+0x48>)
 80063cc:	2202      	movs	r2, #2
 80063ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80063d0:	f001 fc64 	bl	8007c9c <vTaskStartScheduler>
      stat = osOK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	607b      	str	r3, [r7, #4]
 80063d8:	e002      	b.n	80063e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80063da:	f04f 33ff 	mov.w	r3, #4294967295
 80063de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80063e0:	687b      	ldr	r3, [r7, #4]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	2000051c 	.word	0x2000051c

080063f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08e      	sub	sp, #56	; 0x38
 80063f4:	af04      	add	r7, sp, #16
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80063fc:	2300      	movs	r3, #0
 80063fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006400:	f3ef 8305 	mrs	r3, IPSR
 8006404:	617b      	str	r3, [r7, #20]
  return(result);
 8006406:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006408:	2b00      	cmp	r3, #0
 800640a:	d17e      	bne.n	800650a <osThreadNew+0x11a>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d07b      	beq.n	800650a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006412:	2380      	movs	r3, #128	; 0x80
 8006414:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006416:	2318      	movs	r3, #24
 8006418:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800641a:	2300      	movs	r3, #0
 800641c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800641e:	f04f 33ff 	mov.w	r3, #4294967295
 8006422:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d045      	beq.n	80064b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <osThreadNew+0x48>
        name = attr->name;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d008      	beq.n	800645e <osThreadNew+0x6e>
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	2b38      	cmp	r3, #56	; 0x38
 8006450:	d805      	bhi.n	800645e <osThreadNew+0x6e>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <osThreadNew+0x72>
        return (NULL);
 800645e:	2300      	movs	r3, #0
 8006460:	e054      	b.n	800650c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	089b      	lsrs	r3, r3, #2
 8006470:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00e      	beq.n	8006498 <osThreadNew+0xa8>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	2b5f      	cmp	r3, #95	; 0x5f
 8006480:	d90a      	bls.n	8006498 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006486:	2b00      	cmp	r3, #0
 8006488:	d006      	beq.n	8006498 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <osThreadNew+0xa8>
        mem = 1;
 8006492:	2301      	movs	r3, #1
 8006494:	61bb      	str	r3, [r7, #24]
 8006496:	e010      	b.n	80064ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10c      	bne.n	80064ba <osThreadNew+0xca>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d108      	bne.n	80064ba <osThreadNew+0xca>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d104      	bne.n	80064ba <osThreadNew+0xca>
          mem = 0;
 80064b0:	2300      	movs	r3, #0
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	e001      	b.n	80064ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d110      	bne.n	80064e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064c8:	9202      	str	r2, [sp, #8]
 80064ca:	9301      	str	r3, [sp, #4]
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	6a3a      	ldr	r2, [r7, #32]
 80064d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f001 fa08 	bl	80078ec <xTaskCreateStatic>
 80064dc:	4603      	mov	r3, r0
 80064de:	613b      	str	r3, [r7, #16]
 80064e0:	e013      	b.n	800650a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d110      	bne.n	800650a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	f107 0310 	add.w	r3, r7, #16
 80064f0:	9301      	str	r3, [sp, #4]
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f001 fa53 	bl	80079a6 <xTaskCreate>
 8006500:	4603      	mov	r3, r0
 8006502:	2b01      	cmp	r3, #1
 8006504:	d001      	beq.n	800650a <osThreadNew+0x11a>
            hTask = NULL;
 8006506:	2300      	movs	r3, #0
 8006508:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800650a:	693b      	ldr	r3, [r7, #16]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3728      	adds	r7, #40	; 0x28
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800651c:	f3ef 8305 	mrs	r3, IPSR
 8006520:	60bb      	str	r3, [r7, #8]
  return(result);
 8006522:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <osDelay+0x1c>
    stat = osErrorISR;
 8006528:	f06f 0305 	mvn.w	r3, #5
 800652c:	60fb      	str	r3, [r7, #12]
 800652e:	e007      	b.n	8006540 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006530:	2300      	movs	r3, #0
 8006532:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d002      	beq.n	8006540 <osDelay+0x2c>
      vTaskDelay(ticks);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f001 fb7a 	bl	8007c34 <vTaskDelay>
    }
  }

  return (stat);
 8006540:	68fb      	ldr	r3, [r7, #12]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800654a:	b580      	push	{r7, lr}
 800654c:	b08a      	sub	sp, #40	; 0x28
 800654e:	af02      	add	r7, sp, #8
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006556:	2300      	movs	r3, #0
 8006558:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800655a:	f3ef 8305 	mrs	r3, IPSR
 800655e:	613b      	str	r3, [r7, #16]
  return(result);
 8006560:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006562:	2b00      	cmp	r3, #0
 8006564:	d175      	bne.n	8006652 <osSemaphoreNew+0x108>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d072      	beq.n	8006652 <osSemaphoreNew+0x108>
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	429a      	cmp	r2, r3
 8006572:	d86e      	bhi.n	8006652 <osSemaphoreNew+0x108>
    mem = -1;
 8006574:	f04f 33ff 	mov.w	r3, #4294967295
 8006578:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d015      	beq.n	80065ac <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d006      	beq.n	8006596 <osSemaphoreNew+0x4c>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	2b4f      	cmp	r3, #79	; 0x4f
 800658e:	d902      	bls.n	8006596 <osSemaphoreNew+0x4c>
        mem = 1;
 8006590:	2301      	movs	r3, #1
 8006592:	61bb      	str	r3, [r7, #24]
 8006594:	e00c      	b.n	80065b0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d108      	bne.n	80065b0 <osSemaphoreNew+0x66>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d104      	bne.n	80065b0 <osSemaphoreNew+0x66>
          mem = 0;
 80065a6:	2300      	movs	r3, #0
 80065a8:	61bb      	str	r3, [r7, #24]
 80065aa:	e001      	b.n	80065b0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80065ac:	2300      	movs	r3, #0
 80065ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b6:	d04c      	beq.n	8006652 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d128      	bne.n	8006610 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d10a      	bne.n	80065da <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	2203      	movs	r2, #3
 80065ca:	9200      	str	r2, [sp, #0]
 80065cc:	2200      	movs	r2, #0
 80065ce:	2100      	movs	r1, #0
 80065d0:	2001      	movs	r0, #1
 80065d2:	f000 fb09 	bl	8006be8 <xQueueGenericCreateStatic>
 80065d6:	61f8      	str	r0, [r7, #28]
 80065d8:	e005      	b.n	80065e6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80065da:	2203      	movs	r2, #3
 80065dc:	2100      	movs	r1, #0
 80065de:	2001      	movs	r0, #1
 80065e0:	f000 fb7a 	bl	8006cd8 <xQueueGenericCreate>
 80065e4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d022      	beq.n	8006632 <osSemaphoreNew+0xe8>
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d01f      	beq.n	8006632 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80065f2:	2300      	movs	r3, #0
 80065f4:	2200      	movs	r2, #0
 80065f6:	2100      	movs	r1, #0
 80065f8:	69f8      	ldr	r0, [r7, #28]
 80065fa:	f000 fc35 	bl	8006e68 <xQueueGenericSend>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b01      	cmp	r3, #1
 8006602:	d016      	beq.n	8006632 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006604:	69f8      	ldr	r0, [r7, #28]
 8006606:	f000 ffb5 	bl	8007574 <vQueueDelete>
            hSemaphore = NULL;
 800660a:	2300      	movs	r3, #0
 800660c:	61fb      	str	r3, [r7, #28]
 800660e:	e010      	b.n	8006632 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d108      	bne.n	8006628 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	461a      	mov	r2, r3
 800661c:	68b9      	ldr	r1, [r7, #8]
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 fbb7 	bl	8006d92 <xQueueCreateCountingSemaphoreStatic>
 8006624:	61f8      	str	r0, [r7, #28]
 8006626:	e004      	b.n	8006632 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006628:	68b9      	ldr	r1, [r7, #8]
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 fbe8 	bl	8006e00 <xQueueCreateCountingSemaphore>
 8006630:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00c      	beq.n	8006652 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <osSemaphoreNew+0xfc>
          name = attr->name;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	e001      	b.n	800664a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006646:	2300      	movs	r3, #0
 8006648:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800664a:	6979      	ldr	r1, [r7, #20]
 800664c:	69f8      	ldr	r0, [r7, #28]
 800664e:	f001 f8c5 	bl	80077dc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006652:	69fb      	ldr	r3, [r7, #28]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3720      	adds	r7, #32
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006668:	2300      	movs	r3, #0
 800666a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d103      	bne.n	800667a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006672:	f06f 0303 	mvn.w	r3, #3
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	e02c      	b.n	80066d4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800667a:	f3ef 8305 	mrs	r3, IPSR
 800667e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006680:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006682:	2b00      	cmp	r3, #0
 8006684:	d01a      	beq.n	80066bc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006686:	2300      	movs	r3, #0
 8006688:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800668a:	f107 0308 	add.w	r3, r7, #8
 800668e:	4619      	mov	r1, r3
 8006690:	6938      	ldr	r0, [r7, #16]
 8006692:	f000 fd82 	bl	800719a <xQueueGiveFromISR>
 8006696:	4603      	mov	r3, r0
 8006698:	2b01      	cmp	r3, #1
 800669a:	d003      	beq.n	80066a4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800669c:	f06f 0302 	mvn.w	r3, #2
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	e017      	b.n	80066d4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d014      	beq.n	80066d4 <osSemaphoreRelease+0x78>
 80066aa:	4b0d      	ldr	r3, [pc, #52]	; (80066e0 <osSemaphoreRelease+0x84>)
 80066ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	e00b      	b.n	80066d4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80066bc:	2300      	movs	r3, #0
 80066be:	2200      	movs	r2, #0
 80066c0:	2100      	movs	r1, #0
 80066c2:	6938      	ldr	r0, [r7, #16]
 80066c4:	f000 fbd0 	bl	8006e68 <xQueueGenericSend>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d002      	beq.n	80066d4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80066ce:	f06f 0302 	mvn.w	r3, #2
 80066d2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80066d4:	697b      	ldr	r3, [r7, #20]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	e000ed04 	.word	0xe000ed04

080066e4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b08a      	sub	sp, #40	; 0x28
 80066e8:	af02      	add	r7, sp, #8
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80066f0:	2300      	movs	r3, #0
 80066f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066f4:	f3ef 8305 	mrs	r3, IPSR
 80066f8:	613b      	str	r3, [r7, #16]
  return(result);
 80066fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d15f      	bne.n	80067c0 <osMessageQueueNew+0xdc>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d05c      	beq.n	80067c0 <osMessageQueueNew+0xdc>
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d059      	beq.n	80067c0 <osMessageQueueNew+0xdc>
    mem = -1;
 800670c:	f04f 33ff 	mov.w	r3, #4294967295
 8006710:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d029      	beq.n	800676c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d012      	beq.n	8006746 <osMessageQueueNew+0x62>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	2b4f      	cmp	r3, #79	; 0x4f
 8006726:	d90e      	bls.n	8006746 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00a      	beq.n	8006746 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	695a      	ldr	r2, [r3, #20]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	68b9      	ldr	r1, [r7, #8]
 8006738:	fb01 f303 	mul.w	r3, r1, r3
 800673c:	429a      	cmp	r2, r3
 800673e:	d302      	bcc.n	8006746 <osMessageQueueNew+0x62>
        mem = 1;
 8006740:	2301      	movs	r3, #1
 8006742:	61bb      	str	r3, [r7, #24]
 8006744:	e014      	b.n	8006770 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d110      	bne.n	8006770 <osMessageQueueNew+0x8c>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10c      	bne.n	8006770 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800675a:	2b00      	cmp	r3, #0
 800675c:	d108      	bne.n	8006770 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d104      	bne.n	8006770 <osMessageQueueNew+0x8c>
          mem = 0;
 8006766:	2300      	movs	r3, #0
 8006768:	61bb      	str	r3, [r7, #24]
 800676a:	e001      	b.n	8006770 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d10b      	bne.n	800678e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	691a      	ldr	r2, [r3, #16]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	2100      	movs	r1, #0
 8006780:	9100      	str	r1, [sp, #0]
 8006782:	68b9      	ldr	r1, [r7, #8]
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 fa2f 	bl	8006be8 <xQueueGenericCreateStatic>
 800678a:	61f8      	str	r0, [r7, #28]
 800678c:	e008      	b.n	80067a0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d105      	bne.n	80067a0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006794:	2200      	movs	r2, #0
 8006796:	68b9      	ldr	r1, [r7, #8]
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 fa9d 	bl	8006cd8 <xQueueGenericCreate>
 800679e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00c      	beq.n	80067c0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	617b      	str	r3, [r7, #20]
 80067b2:	e001      	b.n	80067b8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80067b4:	2300      	movs	r3, #0
 80067b6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80067b8:	6979      	ldr	r1, [r7, #20]
 80067ba:	69f8      	ldr	r0, [r7, #28]
 80067bc:	f001 f80e 	bl	80077dc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80067c0:	69fb      	ldr	r3, [r7, #28]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3720      	adds	r7, #32
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b088      	sub	sp, #32
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	603b      	str	r3, [r7, #0]
 80067d8:	4613      	mov	r3, r2
 80067da:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80067e0:	2300      	movs	r3, #0
 80067e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067e4:	f3ef 8305 	mrs	r3, IPSR
 80067e8:	617b      	str	r3, [r7, #20]
  return(result);
 80067ea:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d028      	beq.n	8006842 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d005      	beq.n	8006802 <osMessageQueuePut+0x36>
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <osMessageQueuePut+0x36>
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006802:	f06f 0303 	mvn.w	r3, #3
 8006806:	61fb      	str	r3, [r7, #28]
 8006808:	e038      	b.n	800687c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800680a:	2300      	movs	r3, #0
 800680c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800680e:	f107 0210 	add.w	r2, r7, #16
 8006812:	2300      	movs	r3, #0
 8006814:	68b9      	ldr	r1, [r7, #8]
 8006816:	69b8      	ldr	r0, [r7, #24]
 8006818:	f000 fc24 	bl	8007064 <xQueueGenericSendFromISR>
 800681c:	4603      	mov	r3, r0
 800681e:	2b01      	cmp	r3, #1
 8006820:	d003      	beq.n	800682a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006822:	f06f 0302 	mvn.w	r3, #2
 8006826:	61fb      	str	r3, [r7, #28]
 8006828:	e028      	b.n	800687c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d025      	beq.n	800687c <osMessageQueuePut+0xb0>
 8006830:	4b15      	ldr	r3, [pc, #84]	; (8006888 <osMessageQueuePut+0xbc>)
 8006832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	e01c      	b.n	800687c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <osMessageQueuePut+0x82>
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d103      	bne.n	8006856 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800684e:	f06f 0303 	mvn.w	r3, #3
 8006852:	61fb      	str	r3, [r7, #28]
 8006854:	e012      	b.n	800687c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006856:	2300      	movs	r3, #0
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	68b9      	ldr	r1, [r7, #8]
 800685c:	69b8      	ldr	r0, [r7, #24]
 800685e:	f000 fb03 	bl	8006e68 <xQueueGenericSend>
 8006862:	4603      	mov	r3, r0
 8006864:	2b01      	cmp	r3, #1
 8006866:	d009      	beq.n	800687c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800686e:	f06f 0301 	mvn.w	r3, #1
 8006872:	61fb      	str	r3, [r7, #28]
 8006874:	e002      	b.n	800687c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006876:	f06f 0302 	mvn.w	r3, #2
 800687a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800687c:	69fb      	ldr	r3, [r7, #28]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3720      	adds	r7, #32
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	e000ed04 	.word	0xe000ed04

0800688c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800688c:	b580      	push	{r7, lr}
 800688e:	b088      	sub	sp, #32
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800689e:	2300      	movs	r3, #0
 80068a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068a2:	f3ef 8305 	mrs	r3, IPSR
 80068a6:	617b      	str	r3, [r7, #20]
  return(result);
 80068a8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d028      	beq.n	8006900 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d005      	beq.n	80068c0 <osMessageQueueGet+0x34>
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <osMessageQueueGet+0x34>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80068c0:	f06f 0303 	mvn.w	r3, #3
 80068c4:	61fb      	str	r3, [r7, #28]
 80068c6:	e037      	b.n	8006938 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80068c8:	2300      	movs	r3, #0
 80068ca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80068cc:	f107 0310 	add.w	r3, r7, #16
 80068d0:	461a      	mov	r2, r3
 80068d2:	68b9      	ldr	r1, [r7, #8]
 80068d4:	69b8      	ldr	r0, [r7, #24]
 80068d6:	f000 fdcd 	bl	8007474 <xQueueReceiveFromISR>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d003      	beq.n	80068e8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80068e0:	f06f 0302 	mvn.w	r3, #2
 80068e4:	61fb      	str	r3, [r7, #28]
 80068e6:	e027      	b.n	8006938 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d024      	beq.n	8006938 <osMessageQueueGet+0xac>
 80068ee:	4b15      	ldr	r3, [pc, #84]	; (8006944 <osMessageQueueGet+0xb8>)
 80068f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	e01b      	b.n	8006938 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <osMessageQueueGet+0x80>
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d103      	bne.n	8006914 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800690c:	f06f 0303 	mvn.w	r3, #3
 8006910:	61fb      	str	r3, [r7, #28]
 8006912:	e011      	b.n	8006938 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	69b8      	ldr	r0, [r7, #24]
 800691a:	f000 fccb 	bl	80072b4 <xQueueReceive>
 800691e:	4603      	mov	r3, r0
 8006920:	2b01      	cmp	r3, #1
 8006922:	d009      	beq.n	8006938 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800692a:	f06f 0301 	mvn.w	r3, #1
 800692e:	61fb      	str	r3, [r7, #28]
 8006930:	e002      	b.n	8006938 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006932:	f06f 0302 	mvn.w	r3, #2
 8006936:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006938:	69fb      	ldr	r3, [r7, #28]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3720      	adds	r7, #32
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	e000ed04 	.word	0xe000ed04

08006948 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4a07      	ldr	r2, [pc, #28]	; (8006974 <vApplicationGetIdleTaskMemory+0x2c>)
 8006958:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	4a06      	ldr	r2, [pc, #24]	; (8006978 <vApplicationGetIdleTaskMemory+0x30>)
 800695e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2280      	movs	r2, #128	; 0x80
 8006964:	601a      	str	r2, [r3, #0]
}
 8006966:	bf00      	nop
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	20000520 	.word	0x20000520
 8006978:	20000580 	.word	0x20000580

0800697c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4a07      	ldr	r2, [pc, #28]	; (80069a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800698c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	4a06      	ldr	r2, [pc, #24]	; (80069ac <vApplicationGetTimerTaskMemory+0x30>)
 8006992:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800699a:	601a      	str	r2, [r3, #0]
}
 800699c:	bf00      	nop
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	20000780 	.word	0x20000780
 80069ac:	200007e0 	.word	0x200007e0

080069b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f103 0208 	add.w	r2, r3, #8
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f04f 32ff 	mov.w	r2, #4294967295
 80069c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f103 0208 	add.w	r2, r3, #8
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f103 0208 	add.w	r2, r3, #8
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80069fe:	bf00      	nop
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b085      	sub	sp, #20
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	601a      	str	r2, [r3, #0]
}
 8006a46:	bf00      	nop
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a52:	b480      	push	{r7}
 8006a54:	b085      	sub	sp, #20
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a68:	d103      	bne.n	8006a72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	e00c      	b.n	8006a8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	3308      	adds	r3, #8
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	e002      	b.n	8006a80 <vListInsert+0x2e>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d2f6      	bcs.n	8006a7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	1c5a      	adds	r2, r3, #1
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	601a      	str	r2, [r3, #0]
}
 8006ab8:	bf00      	nop
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	6892      	ldr	r2, [r2, #8]
 8006ada:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	6852      	ldr	r2, [r2, #4]
 8006ae4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d103      	bne.n	8006af8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	1e5a      	subs	r2, r3, #1
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3714      	adds	r7, #20
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10a      	bne.n	8006b42 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b3e:	bf00      	nop
 8006b40:	e7fe      	b.n	8006b40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006b42:	f002 fa67 	bl	8009014 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4e:	68f9      	ldr	r1, [r7, #12]
 8006b50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b52:	fb01 f303 	mul.w	r3, r1, r3
 8006b56:	441a      	add	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b72:	3b01      	subs	r3, #1
 8006b74:	68f9      	ldr	r1, [r7, #12]
 8006b76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b78:	fb01 f303 	mul.w	r3, r1, r3
 8006b7c:	441a      	add	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	22ff      	movs	r2, #255	; 0xff
 8006b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	22ff      	movs	r2, #255	; 0xff
 8006b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d114      	bne.n	8006bc2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01a      	beq.n	8006bd6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	3310      	adds	r3, #16
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f001 fb1f 	bl	80081e8 <xTaskRemoveFromEventList>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d012      	beq.n	8006bd6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006bb0:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <xQueueGenericReset+0xcc>)
 8006bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	e009      	b.n	8006bd6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3310      	adds	r3, #16
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7ff fef2 	bl	80069b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3324      	adds	r3, #36	; 0x24
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7ff feed 	bl	80069b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006bd6:	f002 fa4d 	bl	8009074 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006bda:	2301      	movs	r3, #1
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	e000ed04 	.word	0xe000ed04

08006be8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08e      	sub	sp, #56	; 0x38
 8006bec:	af02      	add	r7, sp, #8
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
 8006bf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10a      	bne.n	8006c12 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c0e:	bf00      	nop
 8006c10:	e7fe      	b.n	8006c10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10a      	bne.n	8006c2e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	f3bf 8f6f 	isb	sy
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c2a:	bf00      	nop
 8006c2c:	e7fe      	b.n	8006c2c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <xQueueGenericCreateStatic+0x52>
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <xQueueGenericCreateStatic+0x56>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e000      	b.n	8006c40 <xQueueGenericCreateStatic+0x58>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10a      	bne.n	8006c5a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	623b      	str	r3, [r7, #32]
}
 8006c56:	bf00      	nop
 8006c58:	e7fe      	b.n	8006c58 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d102      	bne.n	8006c66 <xQueueGenericCreateStatic+0x7e>
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <xQueueGenericCreateStatic+0x82>
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <xQueueGenericCreateStatic+0x84>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10a      	bne.n	8006c86 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	61fb      	str	r3, [r7, #28]
}
 8006c82:	bf00      	nop
 8006c84:	e7fe      	b.n	8006c84 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c86:	2350      	movs	r3, #80	; 0x50
 8006c88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	2b50      	cmp	r3, #80	; 0x50
 8006c8e:	d00a      	beq.n	8006ca6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	61bb      	str	r3, [r7, #24]
}
 8006ca2:	bf00      	nop
 8006ca4:	e7fe      	b.n	8006ca4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006ca6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00d      	beq.n	8006cce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006cba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	68b9      	ldr	r1, [r7, #8]
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 f83f 	bl	8006d4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3730      	adds	r7, #48	; 0x30
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b08a      	sub	sp, #40	; 0x28
 8006cdc:	af02      	add	r7, sp, #8
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10a      	bne.n	8006d02 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	613b      	str	r3, [r7, #16]
}
 8006cfe:	bf00      	nop
 8006d00:	e7fe      	b.n	8006d00 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	fb02 f303 	mul.w	r3, r2, r3
 8006d0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	3350      	adds	r3, #80	; 0x50
 8006d10:	4618      	mov	r0, r3
 8006d12:	f002 faa1 	bl	8009258 <pvPortMalloc>
 8006d16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d011      	beq.n	8006d42 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	3350      	adds	r3, #80	; 0x50
 8006d26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d30:	79fa      	ldrb	r2, [r7, #7]
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	4613      	mov	r3, r2
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	68b9      	ldr	r1, [r7, #8]
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 f805 	bl	8006d4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d42:	69bb      	ldr	r3, [r7, #24]
	}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3720      	adds	r7, #32
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
 8006d58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d103      	bne.n	8006d68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	e002      	b.n	8006d6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	69b8      	ldr	r0, [r7, #24]
 8006d7e:	f7ff fecb 	bl	8006b18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	78fa      	ldrb	r2, [r7, #3]
 8006d86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d8a:	bf00      	nop
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b08a      	sub	sp, #40	; 0x28
 8006d96:	af02      	add	r7, sp, #8
 8006d98:	60f8      	str	r0, [r7, #12]
 8006d9a:	60b9      	str	r1, [r7, #8]
 8006d9c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10a      	bne.n	8006dba <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	61bb      	str	r3, [r7, #24]
}
 8006db6:	bf00      	nop
 8006db8:	e7fe      	b.n	8006db8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d90a      	bls.n	8006dd8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	617b      	str	r3, [r7, #20]
}
 8006dd4:	bf00      	nop
 8006dd6:	e7fe      	b.n	8006dd6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006dd8:	2302      	movs	r3, #2
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	2100      	movs	r1, #0
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f7ff ff00 	bl	8006be8 <xQueueGenericCreateStatic>
 8006de8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006df6:	69fb      	ldr	r3, [r7, #28]
	}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3720      	adds	r7, #32
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10a      	bne.n	8006e26 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	613b      	str	r3, [r7, #16]
}
 8006e22:	bf00      	nop
 8006e24:	e7fe      	b.n	8006e24 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d90a      	bls.n	8006e44 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	60fb      	str	r3, [r7, #12]
}
 8006e40:	bf00      	nop
 8006e42:	e7fe      	b.n	8006e42 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006e44:	2202      	movs	r2, #2
 8006e46:	2100      	movs	r1, #0
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f7ff ff45 	bl	8006cd8 <xQueueGenericCreate>
 8006e4e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d002      	beq.n	8006e5c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006e5c:	697b      	ldr	r3, [r7, #20]
	}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08e      	sub	sp, #56	; 0x38
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e76:	2300      	movs	r3, #0
 8006e78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10a      	bne.n	8006e9a <xQueueGenericSend+0x32>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e96:	bf00      	nop
 8006e98:	e7fe      	b.n	8006e98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d103      	bne.n	8006ea8 <xQueueGenericSend+0x40>
 8006ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d101      	bne.n	8006eac <xQueueGenericSend+0x44>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e000      	b.n	8006eae <xQueueGenericSend+0x46>
 8006eac:	2300      	movs	r3, #0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10a      	bne.n	8006ec8 <xQueueGenericSend+0x60>
	__asm volatile
 8006eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb6:	f383 8811 	msr	BASEPRI, r3
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ec4:	bf00      	nop
 8006ec6:	e7fe      	b.n	8006ec6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d103      	bne.n	8006ed6 <xQueueGenericSend+0x6e>
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d101      	bne.n	8006eda <xQueueGenericSend+0x72>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e000      	b.n	8006edc <xQueueGenericSend+0x74>
 8006eda:	2300      	movs	r3, #0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10a      	bne.n	8006ef6 <xQueueGenericSend+0x8e>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	623b      	str	r3, [r7, #32]
}
 8006ef2:	bf00      	nop
 8006ef4:	e7fe      	b.n	8006ef4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ef6:	f001 fb35 	bl	8008564 <xTaskGetSchedulerState>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d102      	bne.n	8006f06 <xQueueGenericSend+0x9e>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <xQueueGenericSend+0xa2>
 8006f06:	2301      	movs	r3, #1
 8006f08:	e000      	b.n	8006f0c <xQueueGenericSend+0xa4>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10a      	bne.n	8006f26 <xQueueGenericSend+0xbe>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	61fb      	str	r3, [r7, #28]
}
 8006f22:	bf00      	nop
 8006f24:	e7fe      	b.n	8006f24 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f26:	f002 f875 	bl	8009014 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d302      	bcc.n	8006f3c <xQueueGenericSend+0xd4>
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d129      	bne.n	8006f90 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f42:	f000 fb3a 	bl	80075ba <prvCopyDataToQueue>
 8006f46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d010      	beq.n	8006f72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f52:	3324      	adds	r3, #36	; 0x24
 8006f54:	4618      	mov	r0, r3
 8006f56:	f001 f947 	bl	80081e8 <xTaskRemoveFromEventList>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d013      	beq.n	8006f88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f60:	4b3f      	ldr	r3, [pc, #252]	; (8007060 <xQueueGenericSend+0x1f8>)
 8006f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	e00a      	b.n	8006f88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d007      	beq.n	8006f88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f78:	4b39      	ldr	r3, [pc, #228]	; (8007060 <xQueueGenericSend+0x1f8>)
 8006f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f88:	f002 f874 	bl	8009074 <vPortExitCritical>
				return pdPASS;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e063      	b.n	8007058 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d103      	bne.n	8006f9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f96:	f002 f86d 	bl	8009074 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e05c      	b.n	8007058 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d106      	bne.n	8006fb2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fa4:	f107 0314 	add.w	r3, r7, #20
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f001 f981 	bl	80082b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fb2:	f002 f85f 	bl	8009074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fb6:	f000 fed9 	bl	8007d6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fba:	f002 f82b 	bl	8009014 <vPortEnterCritical>
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fc4:	b25b      	sxtb	r3, r3
 8006fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fca:	d103      	bne.n	8006fd4 <xQueueGenericSend+0x16c>
 8006fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fda:	b25b      	sxtb	r3, r3
 8006fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe0:	d103      	bne.n	8006fea <xQueueGenericSend+0x182>
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fea:	f002 f843 	bl	8009074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fee:	1d3a      	adds	r2, r7, #4
 8006ff0:	f107 0314 	add.w	r3, r7, #20
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f001 f970 	bl	80082dc <xTaskCheckForTimeOut>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d124      	bne.n	800704c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007002:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007004:	f000 fbd1 	bl	80077aa <prvIsQueueFull>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d018      	beq.n	8007040 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800700e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007010:	3310      	adds	r3, #16
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	4611      	mov	r1, r2
 8007016:	4618      	mov	r0, r3
 8007018:	f001 f896 	bl	8008148 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800701c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800701e:	f000 fb5c 	bl	80076da <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007022:	f000 feb1 	bl	8007d88 <xTaskResumeAll>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	f47f af7c 	bne.w	8006f26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800702e:	4b0c      	ldr	r3, [pc, #48]	; (8007060 <xQueueGenericSend+0x1f8>)
 8007030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	e772      	b.n	8006f26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007042:	f000 fb4a 	bl	80076da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007046:	f000 fe9f 	bl	8007d88 <xTaskResumeAll>
 800704a:	e76c      	b.n	8006f26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800704c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800704e:	f000 fb44 	bl	80076da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007052:	f000 fe99 	bl	8007d88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007056:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007058:	4618      	mov	r0, r3
 800705a:	3738      	adds	r7, #56	; 0x38
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	e000ed04 	.word	0xe000ed04

08007064 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b090      	sub	sp, #64	; 0x40
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10a      	bne.n	8007092 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800707c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800708e:	bf00      	nop
 8007090:	e7fe      	b.n	8007090 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d103      	bne.n	80070a0 <xQueueGenericSendFromISR+0x3c>
 8007098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <xQueueGenericSendFromISR+0x40>
 80070a0:	2301      	movs	r3, #1
 80070a2:	e000      	b.n	80070a6 <xQueueGenericSendFromISR+0x42>
 80070a4:	2300      	movs	r3, #0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10a      	bne.n	80070c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070bc:	bf00      	nop
 80070be:	e7fe      	b.n	80070be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d103      	bne.n	80070ce <xQueueGenericSendFromISR+0x6a>
 80070c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d101      	bne.n	80070d2 <xQueueGenericSendFromISR+0x6e>
 80070ce:	2301      	movs	r3, #1
 80070d0:	e000      	b.n	80070d4 <xQueueGenericSendFromISR+0x70>
 80070d2:	2300      	movs	r3, #0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10a      	bne.n	80070ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80070d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070dc:	f383 8811 	msr	BASEPRI, r3
 80070e0:	f3bf 8f6f 	isb	sy
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	623b      	str	r3, [r7, #32]
}
 80070ea:	bf00      	nop
 80070ec:	e7fe      	b.n	80070ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070ee:	f002 f873 	bl	80091d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80070f2:	f3ef 8211 	mrs	r2, BASEPRI
 80070f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	61fa      	str	r2, [r7, #28]
 8007108:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800710a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800710c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800710e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007116:	429a      	cmp	r2, r3
 8007118:	d302      	bcc.n	8007120 <xQueueGenericSendFromISR+0xbc>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b02      	cmp	r3, #2
 800711e:	d12f      	bne.n	8007180 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800712a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	68b9      	ldr	r1, [r7, #8]
 8007134:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007136:	f000 fa40 	bl	80075ba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800713a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800713e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007142:	d112      	bne.n	800716a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007148:	2b00      	cmp	r3, #0
 800714a:	d016      	beq.n	800717a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800714c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714e:	3324      	adds	r3, #36	; 0x24
 8007150:	4618      	mov	r0, r3
 8007152:	f001 f849 	bl	80081e8 <xTaskRemoveFromEventList>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00e      	beq.n	800717a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00b      	beq.n	800717a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	e007      	b.n	800717a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800716a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800716e:	3301      	adds	r3, #1
 8007170:	b2db      	uxtb	r3, r3
 8007172:	b25a      	sxtb	r2, r3
 8007174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800717a:	2301      	movs	r3, #1
 800717c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800717e:	e001      	b.n	8007184 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007180:	2300      	movs	r3, #0
 8007182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007186:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800718e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007192:	4618      	mov	r0, r3
 8007194:	3740      	adds	r7, #64	; 0x40
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b08e      	sub	sp, #56	; 0x38
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	623b      	str	r3, [r7, #32]
}
 80071c0:	bf00      	nop
 80071c2:	e7fe      	b.n	80071c2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00a      	beq.n	80071e2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	61fb      	str	r3, [r7, #28]
}
 80071de:	bf00      	nop
 80071e0:	e7fe      	b.n	80071e0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d103      	bne.n	80071f2 <xQueueGiveFromISR+0x58>
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <xQueueGiveFromISR+0x5c>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e000      	b.n	80071f8 <xQueueGiveFromISR+0x5e>
 80071f6:	2300      	movs	r3, #0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10a      	bne.n	8007212 <xQueueGiveFromISR+0x78>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	61bb      	str	r3, [r7, #24]
}
 800720e:	bf00      	nop
 8007210:	e7fe      	b.n	8007210 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007212:	f001 ffe1 	bl	80091d8 <vPortValidateInterruptPriority>
	__asm volatile
 8007216:	f3ef 8211 	mrs	r2, BASEPRI
 800721a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721e:	f383 8811 	msr	BASEPRI, r3
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	617a      	str	r2, [r7, #20]
 800722c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800722e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007230:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007236:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800723e:	429a      	cmp	r2, r3
 8007240:	d22b      	bcs.n	800729a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800724c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007252:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007254:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725c:	d112      	bne.n	8007284 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800725e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007262:	2b00      	cmp	r3, #0
 8007264:	d016      	beq.n	8007294 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007268:	3324      	adds	r3, #36	; 0x24
 800726a:	4618      	mov	r0, r3
 800726c:	f000 ffbc 	bl	80081e8 <xTaskRemoveFromEventList>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00e      	beq.n	8007294 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00b      	beq.n	8007294 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2201      	movs	r2, #1
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	e007      	b.n	8007294 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007288:	3301      	adds	r3, #1
 800728a:	b2db      	uxtb	r3, r3
 800728c:	b25a      	sxtb	r2, r3
 800728e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007294:	2301      	movs	r3, #1
 8007296:	637b      	str	r3, [r7, #52]	; 0x34
 8007298:	e001      	b.n	800729e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800729a:	2300      	movs	r3, #0
 800729c:	637b      	str	r3, [r7, #52]	; 0x34
 800729e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f383 8811 	msr	BASEPRI, r3
}
 80072a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3738      	adds	r7, #56	; 0x38
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b08c      	sub	sp, #48	; 0x30
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80072c0:	2300      	movs	r3, #0
 80072c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80072c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10a      	bne.n	80072e4 <xQueueReceive+0x30>
	__asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	623b      	str	r3, [r7, #32]
}
 80072e0:	bf00      	nop
 80072e2:	e7fe      	b.n	80072e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d103      	bne.n	80072f2 <xQueueReceive+0x3e>
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <xQueueReceive+0x42>
 80072f2:	2301      	movs	r3, #1
 80072f4:	e000      	b.n	80072f8 <xQueueReceive+0x44>
 80072f6:	2300      	movs	r3, #0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10a      	bne.n	8007312 <xQueueReceive+0x5e>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	61fb      	str	r3, [r7, #28]
}
 800730e:	bf00      	nop
 8007310:	e7fe      	b.n	8007310 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007312:	f001 f927 	bl	8008564 <xTaskGetSchedulerState>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d102      	bne.n	8007322 <xQueueReceive+0x6e>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <xQueueReceive+0x72>
 8007322:	2301      	movs	r3, #1
 8007324:	e000      	b.n	8007328 <xQueueReceive+0x74>
 8007326:	2300      	movs	r3, #0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10a      	bne.n	8007342 <xQueueReceive+0x8e>
	__asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	61bb      	str	r3, [r7, #24]
}
 800733e:	bf00      	nop
 8007340:	e7fe      	b.n	8007340 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007342:	f001 fe67 	bl	8009014 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	2b00      	cmp	r3, #0
 8007350:	d01f      	beq.n	8007392 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007352:	68b9      	ldr	r1, [r7, #8]
 8007354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007356:	f000 f99a 	bl	800768e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	1e5a      	subs	r2, r3, #1
 800735e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007360:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00f      	beq.n	800738a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800736a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736c:	3310      	adds	r3, #16
 800736e:	4618      	mov	r0, r3
 8007370:	f000 ff3a 	bl	80081e8 <xTaskRemoveFromEventList>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d007      	beq.n	800738a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800737a:	4b3d      	ldr	r3, [pc, #244]	; (8007470 <xQueueReceive+0x1bc>)
 800737c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800738a:	f001 fe73 	bl	8009074 <vPortExitCritical>
				return pdPASS;
 800738e:	2301      	movs	r3, #1
 8007390:	e069      	b.n	8007466 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d103      	bne.n	80073a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007398:	f001 fe6c 	bl	8009074 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800739c:	2300      	movs	r3, #0
 800739e:	e062      	b.n	8007466 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d106      	bne.n	80073b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073a6:	f107 0310 	add.w	r3, r7, #16
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 ff80 	bl	80082b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073b0:	2301      	movs	r3, #1
 80073b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073b4:	f001 fe5e 	bl	8009074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073b8:	f000 fcd8 	bl	8007d6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073bc:	f001 fe2a 	bl	8009014 <vPortEnterCritical>
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073c6:	b25b      	sxtb	r3, r3
 80073c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073cc:	d103      	bne.n	80073d6 <xQueueReceive+0x122>
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073dc:	b25b      	sxtb	r3, r3
 80073de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e2:	d103      	bne.n	80073ec <xQueueReceive+0x138>
 80073e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073ec:	f001 fe42 	bl	8009074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073f0:	1d3a      	adds	r2, r7, #4
 80073f2:	f107 0310 	add.w	r3, r7, #16
 80073f6:	4611      	mov	r1, r2
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 ff6f 	bl	80082dc <xTaskCheckForTimeOut>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d123      	bne.n	800744c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007406:	f000 f9ba 	bl	800777e <prvIsQueueEmpty>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d017      	beq.n	8007440 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007412:	3324      	adds	r3, #36	; 0x24
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	4611      	mov	r1, r2
 8007418:	4618      	mov	r0, r3
 800741a:	f000 fe95 	bl	8008148 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800741e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007420:	f000 f95b 	bl	80076da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007424:	f000 fcb0 	bl	8007d88 <xTaskResumeAll>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d189      	bne.n	8007342 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800742e:	4b10      	ldr	r3, [pc, #64]	; (8007470 <xQueueReceive+0x1bc>)
 8007430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	e780      	b.n	8007342 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007442:	f000 f94a 	bl	80076da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007446:	f000 fc9f 	bl	8007d88 <xTaskResumeAll>
 800744a:	e77a      	b.n	8007342 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800744c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800744e:	f000 f944 	bl	80076da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007452:	f000 fc99 	bl	8007d88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007458:	f000 f991 	bl	800777e <prvIsQueueEmpty>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	f43f af6f 	beq.w	8007342 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007464:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007466:	4618      	mov	r0, r3
 8007468:	3730      	adds	r7, #48	; 0x30
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	e000ed04 	.word	0xe000ed04

08007474 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b08e      	sub	sp, #56	; 0x38
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10a      	bne.n	80074a0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	623b      	str	r3, [r7, #32]
}
 800749c:	bf00      	nop
 800749e:	e7fe      	b.n	800749e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d103      	bne.n	80074ae <xQueueReceiveFromISR+0x3a>
 80074a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <xQueueReceiveFromISR+0x3e>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e000      	b.n	80074b4 <xQueueReceiveFromISR+0x40>
 80074b2:	2300      	movs	r3, #0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10a      	bne.n	80074ce <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	61fb      	str	r3, [r7, #28]
}
 80074ca:	bf00      	nop
 80074cc:	e7fe      	b.n	80074cc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074ce:	f001 fe83 	bl	80091d8 <vPortValidateInterruptPriority>
	__asm volatile
 80074d2:	f3ef 8211 	mrs	r2, BASEPRI
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	61ba      	str	r2, [r7, #24]
 80074e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80074ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d02f      	beq.n	800755a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007504:	68b9      	ldr	r1, [r7, #8]
 8007506:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007508:	f000 f8c1 	bl	800768e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	1e5a      	subs	r2, r3, #1
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007514:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751c:	d112      	bne.n	8007544 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d016      	beq.n	8007554 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007528:	3310      	adds	r3, #16
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fe5c 	bl	80081e8 <xTaskRemoveFromEventList>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00e      	beq.n	8007554 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00b      	beq.n	8007554 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	e007      	b.n	8007554 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007548:	3301      	adds	r3, #1
 800754a:	b2db      	uxtb	r3, r3
 800754c:	b25a      	sxtb	r2, r3
 800754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007554:	2301      	movs	r3, #1
 8007556:	637b      	str	r3, [r7, #52]	; 0x34
 8007558:	e001      	b.n	800755e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800755a:	2300      	movs	r3, #0
 800755c:	637b      	str	r3, [r7, #52]	; 0x34
 800755e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007560:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	f383 8811 	msr	BASEPRI, r3
}
 8007568:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800756a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800756c:	4618      	mov	r0, r3
 800756e:	3738      	adds	r7, #56	; 0x38
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10a      	bne.n	800759c <vQueueDelete+0x28>
	__asm volatile
 8007586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	60bb      	str	r3, [r7, #8]
}
 8007598:	bf00      	nop
 800759a:	e7fe      	b.n	800759a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 f947 	bl	8007830 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d102      	bne.n	80075b2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f001 ff1f 	bl	80093f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80075b2:	bf00      	nop
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b086      	sub	sp, #24
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075c6:	2300      	movs	r3, #0
 80075c8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10d      	bne.n	80075f4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d14d      	bne.n	800767c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 ffdb 	bl	80085a0 <xTaskPriorityDisinherit>
 80075ea:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	609a      	str	r2, [r3, #8]
 80075f2:	e043      	b.n	800767c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d119      	bne.n	800762e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6858      	ldr	r0, [r3, #4]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007602:	461a      	mov	r2, r3
 8007604:	68b9      	ldr	r1, [r7, #8]
 8007606:	f002 ff2e 	bl	800a466 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	441a      	add	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	429a      	cmp	r2, r3
 8007622:	d32b      	bcc.n	800767c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	605a      	str	r2, [r3, #4]
 800762c:	e026      	b.n	800767c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	68d8      	ldr	r0, [r3, #12]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007636:	461a      	mov	r2, r3
 8007638:	68b9      	ldr	r1, [r7, #8]
 800763a:	f002 ff14 	bl	800a466 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007646:	425b      	negs	r3, r3
 8007648:	441a      	add	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	429a      	cmp	r2, r3
 8007658:	d207      	bcs.n	800766a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	689a      	ldr	r2, [r3, #8]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007662:	425b      	negs	r3, r3
 8007664:	441a      	add	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b02      	cmp	r3, #2
 800766e:	d105      	bne.n	800767c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d002      	beq.n	800767c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	3b01      	subs	r3, #1
 800767a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007684:	697b      	ldr	r3, [r7, #20]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3718      	adds	r7, #24
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b082      	sub	sp, #8
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769c:	2b00      	cmp	r3, #0
 800769e:	d018      	beq.n	80076d2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68da      	ldr	r2, [r3, #12]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a8:	441a      	add	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	68da      	ldr	r2, [r3, #12]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d303      	bcc.n	80076c2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68d9      	ldr	r1, [r3, #12]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ca:	461a      	mov	r2, r3
 80076cc:	6838      	ldr	r0, [r7, #0]
 80076ce:	f002 feca 	bl	800a466 <memcpy>
	}
}
 80076d2:	bf00      	nop
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b084      	sub	sp, #16
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076e2:	f001 fc97 	bl	8009014 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076ec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076ee:	e011      	b.n	8007714 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d012      	beq.n	800771e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	3324      	adds	r3, #36	; 0x24
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 fd73 	bl	80081e8 <xTaskRemoveFromEventList>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007708:	f000 fe4a 	bl	80083a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800770c:	7bfb      	ldrb	r3, [r7, #15]
 800770e:	3b01      	subs	r3, #1
 8007710:	b2db      	uxtb	r3, r3
 8007712:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007718:	2b00      	cmp	r3, #0
 800771a:	dce9      	bgt.n	80076f0 <prvUnlockQueue+0x16>
 800771c:	e000      	b.n	8007720 <prvUnlockQueue+0x46>
					break;
 800771e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	22ff      	movs	r2, #255	; 0xff
 8007724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007728:	f001 fca4 	bl	8009074 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800772c:	f001 fc72 	bl	8009014 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007736:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007738:	e011      	b.n	800775e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d012      	beq.n	8007768 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3310      	adds	r3, #16
 8007746:	4618      	mov	r0, r3
 8007748:	f000 fd4e 	bl	80081e8 <xTaskRemoveFromEventList>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007752:	f000 fe25 	bl	80083a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007756:	7bbb      	ldrb	r3, [r7, #14]
 8007758:	3b01      	subs	r3, #1
 800775a:	b2db      	uxtb	r3, r3
 800775c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800775e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007762:	2b00      	cmp	r3, #0
 8007764:	dce9      	bgt.n	800773a <prvUnlockQueue+0x60>
 8007766:	e000      	b.n	800776a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007768:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	22ff      	movs	r2, #255	; 0xff
 800776e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007772:	f001 fc7f 	bl	8009074 <vPortExitCritical>
}
 8007776:	bf00      	nop
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b084      	sub	sp, #16
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007786:	f001 fc45 	bl	8009014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778e:	2b00      	cmp	r3, #0
 8007790:	d102      	bne.n	8007798 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007792:	2301      	movs	r3, #1
 8007794:	60fb      	str	r3, [r7, #12]
 8007796:	e001      	b.n	800779c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007798:	2300      	movs	r3, #0
 800779a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800779c:	f001 fc6a 	bl	8009074 <vPortExitCritical>

	return xReturn;
 80077a0:	68fb      	ldr	r3, [r7, #12]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077b2:	f001 fc2f 	bl	8009014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077be:	429a      	cmp	r2, r3
 80077c0:	d102      	bne.n	80077c8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80077c2:	2301      	movs	r3, #1
 80077c4:	60fb      	str	r3, [r7, #12]
 80077c6:	e001      	b.n	80077cc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80077c8:	2300      	movs	r3, #0
 80077ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077cc:	f001 fc52 	bl	8009074 <vPortExitCritical>

	return xReturn;
 80077d0:	68fb      	ldr	r3, [r7, #12]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
	...

080077dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077e6:	2300      	movs	r3, #0
 80077e8:	60fb      	str	r3, [r7, #12]
 80077ea:	e014      	b.n	8007816 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80077ec:	4a0f      	ldr	r2, [pc, #60]	; (800782c <vQueueAddToRegistry+0x50>)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10b      	bne.n	8007810 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80077f8:	490c      	ldr	r1, [pc, #48]	; (800782c <vQueueAddToRegistry+0x50>)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007802:	4a0a      	ldr	r2, [pc, #40]	; (800782c <vQueueAddToRegistry+0x50>)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	00db      	lsls	r3, r3, #3
 8007808:	4413      	add	r3, r2
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800780e:	e006      	b.n	800781e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	3301      	adds	r3, #1
 8007814:	60fb      	str	r3, [r7, #12]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2b07      	cmp	r3, #7
 800781a:	d9e7      	bls.n	80077ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800781c:	bf00      	nop
 800781e:	bf00      	nop
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	20000be0 	.word	0x20000be0

08007830 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007838:	2300      	movs	r3, #0
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	e016      	b.n	800786c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800783e:	4a10      	ldr	r2, [pc, #64]	; (8007880 <vQueueUnregisterQueue+0x50>)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	00db      	lsls	r3, r3, #3
 8007844:	4413      	add	r3, r2
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	429a      	cmp	r2, r3
 800784c:	d10b      	bne.n	8007866 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800784e:	4a0c      	ldr	r2, [pc, #48]	; (8007880 <vQueueUnregisterQueue+0x50>)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2100      	movs	r1, #0
 8007854:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007858:	4a09      	ldr	r2, [pc, #36]	; (8007880 <vQueueUnregisterQueue+0x50>)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	00db      	lsls	r3, r3, #3
 800785e:	4413      	add	r3, r2
 8007860:	2200      	movs	r2, #0
 8007862:	605a      	str	r2, [r3, #4]
				break;
 8007864:	e006      	b.n	8007874 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	3301      	adds	r3, #1
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2b07      	cmp	r3, #7
 8007870:	d9e5      	bls.n	800783e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007872:	bf00      	nop
 8007874:	bf00      	nop
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	20000be0 	.word	0x20000be0

08007884 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007894:	f001 fbbe 	bl	8009014 <vPortEnterCritical>
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800789e:	b25b      	sxtb	r3, r3
 80078a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a4:	d103      	bne.n	80078ae <vQueueWaitForMessageRestricted+0x2a>
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078b4:	b25b      	sxtb	r3, r3
 80078b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ba:	d103      	bne.n	80078c4 <vQueueWaitForMessageRestricted+0x40>
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078c4:	f001 fbd6 	bl	8009074 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d106      	bne.n	80078de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	3324      	adds	r3, #36	; 0x24
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	68b9      	ldr	r1, [r7, #8]
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 fc59 	bl	8008190 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80078de:	6978      	ldr	r0, [r7, #20]
 80078e0:	f7ff fefb 	bl	80076da <prvUnlockQueue>
	}
 80078e4:	bf00      	nop
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08e      	sub	sp, #56	; 0x38
 80078f0:	af04      	add	r7, sp, #16
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
 80078f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80078fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10a      	bne.n	8007916 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	623b      	str	r3, [r7, #32]
}
 8007912:	bf00      	nop
 8007914:	e7fe      	b.n	8007914 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10a      	bne.n	8007932 <xTaskCreateStatic+0x46>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	61fb      	str	r3, [r7, #28]
}
 800792e:	bf00      	nop
 8007930:	e7fe      	b.n	8007930 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007932:	2360      	movs	r3, #96	; 0x60
 8007934:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	2b60      	cmp	r3, #96	; 0x60
 800793a:	d00a      	beq.n	8007952 <xTaskCreateStatic+0x66>
	__asm volatile
 800793c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007940:	f383 8811 	msr	BASEPRI, r3
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	61bb      	str	r3, [r7, #24]
}
 800794e:	bf00      	nop
 8007950:	e7fe      	b.n	8007950 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007952:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007956:	2b00      	cmp	r3, #0
 8007958:	d01e      	beq.n	8007998 <xTaskCreateStatic+0xac>
 800795a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795c:	2b00      	cmp	r3, #0
 800795e:	d01b      	beq.n	8007998 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007962:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007968:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	2202      	movs	r2, #2
 800796e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007972:	2300      	movs	r3, #0
 8007974:	9303      	str	r3, [sp, #12]
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	9302      	str	r3, [sp, #8]
 800797a:	f107 0314 	add.w	r3, r7, #20
 800797e:	9301      	str	r3, [sp, #4]
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	68b9      	ldr	r1, [r7, #8]
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f000 f850 	bl	8007a30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007992:	f000 f8df 	bl	8007b54 <prvAddNewTaskToReadyList>
 8007996:	e001      	b.n	800799c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007998:	2300      	movs	r3, #0
 800799a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800799c:	697b      	ldr	r3, [r7, #20]
	}
 800799e:	4618      	mov	r0, r3
 80079a0:	3728      	adds	r7, #40	; 0x28
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b08c      	sub	sp, #48	; 0x30
 80079aa:	af04      	add	r7, sp, #16
 80079ac:	60f8      	str	r0, [r7, #12]
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	603b      	str	r3, [r7, #0]
 80079b2:	4613      	mov	r3, r2
 80079b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80079b6:	88fb      	ldrh	r3, [r7, #6]
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f001 fc4c 	bl	8009258 <pvPortMalloc>
 80079c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00e      	beq.n	80079e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80079c8:	2060      	movs	r0, #96	; 0x60
 80079ca:	f001 fc45 	bl	8009258 <pvPortMalloc>
 80079ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	631a      	str	r2, [r3, #48]	; 0x30
 80079dc:	e005      	b.n	80079ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80079de:	6978      	ldr	r0, [r7, #20]
 80079e0:	f001 fd06 	bl	80093f0 <vPortFree>
 80079e4:	e001      	b.n	80079ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d017      	beq.n	8007a20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80079f8:	88fa      	ldrh	r2, [r7, #6]
 80079fa:	2300      	movs	r3, #0
 80079fc:	9303      	str	r3, [sp, #12]
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	9302      	str	r3, [sp, #8]
 8007a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a04:	9301      	str	r3, [sp, #4]
 8007a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	68b9      	ldr	r1, [r7, #8]
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 f80e 	bl	8007a30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a14:	69f8      	ldr	r0, [r7, #28]
 8007a16:	f000 f89d 	bl	8007b54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	61bb      	str	r3, [r7, #24]
 8007a1e:	e002      	b.n	8007a26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a20:	f04f 33ff 	mov.w	r3, #4294967295
 8007a24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a26:	69bb      	ldr	r3, [r7, #24]
	}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3720      	adds	r7, #32
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b088      	sub	sp, #32
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
 8007a3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	461a      	mov	r2, r3
 8007a48:	21a5      	movs	r1, #165	; 0xa5
 8007a4a:	f002 fc8d 	bl	800a368 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4413      	add	r3, r2
 8007a5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	f023 0307 	bic.w	r3, r3, #7
 8007a66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	f003 0307 	and.w	r3, r3, #7
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	617b      	str	r3, [r7, #20]
}
 8007a84:	bf00      	nop
 8007a86:	e7fe      	b.n	8007a86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d01f      	beq.n	8007ace <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a8e:	2300      	movs	r3, #0
 8007a90:	61fb      	str	r3, [r7, #28]
 8007a92:	e012      	b.n	8007aba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	4413      	add	r3, r2
 8007a9a:	7819      	ldrb	r1, [r3, #0]
 8007a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	3334      	adds	r3, #52	; 0x34
 8007aa4:	460a      	mov	r2, r1
 8007aa6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	4413      	add	r3, r2
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d006      	beq.n	8007ac2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	61fb      	str	r3, [r7, #28]
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	2b0f      	cmp	r3, #15
 8007abe:	d9e9      	bls.n	8007a94 <prvInitialiseNewTask+0x64>
 8007ac0:	e000      	b.n	8007ac4 <prvInitialiseNewTask+0x94>
			{
				break;
 8007ac2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007acc:	e003      	b.n	8007ad6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad8:	2b37      	cmp	r3, #55	; 0x37
 8007ada:	d901      	bls.n	8007ae0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007adc:	2337      	movs	r3, #55	; 0x37
 8007ade:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ae4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aee:	2200      	movs	r2, #0
 8007af0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af4:	3304      	adds	r3, #4
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fe ff7a 	bl	80069f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afe:	3318      	adds	r3, #24
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7fe ff75 	bl	80069f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1e:	2200      	movs	r2, #0
 8007b20:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	2200      	movs	r2, #0
 8007b26:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b30:	683a      	ldr	r2, [r7, #0]
 8007b32:	68f9      	ldr	r1, [r7, #12]
 8007b34:	69b8      	ldr	r0, [r7, #24]
 8007b36:	f001 f943 	bl	8008dc0 <pxPortInitialiseStack>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d002      	beq.n	8007b4c <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b4c:	bf00      	nop
 8007b4e:	3720      	adds	r7, #32
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b5c:	f001 fa5a 	bl	8009014 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b60:	4b2d      	ldr	r3, [pc, #180]	; (8007c18 <prvAddNewTaskToReadyList+0xc4>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3301      	adds	r3, #1
 8007b66:	4a2c      	ldr	r2, [pc, #176]	; (8007c18 <prvAddNewTaskToReadyList+0xc4>)
 8007b68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b6a:	4b2c      	ldr	r3, [pc, #176]	; (8007c1c <prvAddNewTaskToReadyList+0xc8>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d109      	bne.n	8007b86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b72:	4a2a      	ldr	r2, [pc, #168]	; (8007c1c <prvAddNewTaskToReadyList+0xc8>)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b78:	4b27      	ldr	r3, [pc, #156]	; (8007c18 <prvAddNewTaskToReadyList+0xc4>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d110      	bne.n	8007ba2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b80:	f000 fc32 	bl	80083e8 <prvInitialiseTaskLists>
 8007b84:	e00d      	b.n	8007ba2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b86:	4b26      	ldr	r3, [pc, #152]	; (8007c20 <prvAddNewTaskToReadyList+0xcc>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d109      	bne.n	8007ba2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b8e:	4b23      	ldr	r3, [pc, #140]	; (8007c1c <prvAddNewTaskToReadyList+0xc8>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d802      	bhi.n	8007ba2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b9c:	4a1f      	ldr	r2, [pc, #124]	; (8007c1c <prvAddNewTaskToReadyList+0xc8>)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ba2:	4b20      	ldr	r3, [pc, #128]	; (8007c24 <prvAddNewTaskToReadyList+0xd0>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	4a1e      	ldr	r2, [pc, #120]	; (8007c24 <prvAddNewTaskToReadyList+0xd0>)
 8007baa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007bac:	4b1d      	ldr	r3, [pc, #116]	; (8007c24 <prvAddNewTaskToReadyList+0xd0>)
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb8:	4b1b      	ldr	r3, [pc, #108]	; (8007c28 <prvAddNewTaskToReadyList+0xd4>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d903      	bls.n	8007bc8 <prvAddNewTaskToReadyList+0x74>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc4:	4a18      	ldr	r2, [pc, #96]	; (8007c28 <prvAddNewTaskToReadyList+0xd4>)
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bcc:	4613      	mov	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4a15      	ldr	r2, [pc, #84]	; (8007c2c <prvAddNewTaskToReadyList+0xd8>)
 8007bd6:	441a      	add	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	3304      	adds	r3, #4
 8007bdc:	4619      	mov	r1, r3
 8007bde:	4610      	mov	r0, r2
 8007be0:	f7fe ff13 	bl	8006a0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007be4:	f001 fa46 	bl	8009074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007be8:	4b0d      	ldr	r3, [pc, #52]	; (8007c20 <prvAddNewTaskToReadyList+0xcc>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00e      	beq.n	8007c0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007bf0:	4b0a      	ldr	r3, [pc, #40]	; (8007c1c <prvAddNewTaskToReadyList+0xc8>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d207      	bcs.n	8007c0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007bfe:	4b0c      	ldr	r3, [pc, #48]	; (8007c30 <prvAddNewTaskToReadyList+0xdc>)
 8007c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c0e:	bf00      	nop
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	200010f4 	.word	0x200010f4
 8007c1c:	20000c20 	.word	0x20000c20
 8007c20:	20001100 	.word	0x20001100
 8007c24:	20001110 	.word	0x20001110
 8007c28:	200010fc 	.word	0x200010fc
 8007c2c:	20000c24 	.word	0x20000c24
 8007c30:	e000ed04 	.word	0xe000ed04

08007c34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d017      	beq.n	8007c76 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c46:	4b13      	ldr	r3, [pc, #76]	; (8007c94 <vTaskDelay+0x60>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00a      	beq.n	8007c64 <vTaskDelay+0x30>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	60bb      	str	r3, [r7, #8]
}
 8007c60:	bf00      	nop
 8007c62:	e7fe      	b.n	8007c62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007c64:	f000 f882 	bl	8007d6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c68:	2100      	movs	r1, #0
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fd06 	bl	800867c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c70:	f000 f88a 	bl	8007d88 <xTaskResumeAll>
 8007c74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d107      	bne.n	8007c8c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007c7c:	4b06      	ldr	r3, [pc, #24]	; (8007c98 <vTaskDelay+0x64>)
 8007c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c8c:	bf00      	nop
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	2000111c 	.word	0x2000111c
 8007c98:	e000ed04 	.word	0xe000ed04

08007c9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b08a      	sub	sp, #40	; 0x28
 8007ca0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007caa:	463a      	mov	r2, r7
 8007cac:	1d39      	adds	r1, r7, #4
 8007cae:	f107 0308 	add.w	r3, r7, #8
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fe fe48 	bl	8006948 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	9202      	str	r2, [sp, #8]
 8007cc0:	9301      	str	r3, [sp, #4]
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	460a      	mov	r2, r1
 8007cca:	4922      	ldr	r1, [pc, #136]	; (8007d54 <vTaskStartScheduler+0xb8>)
 8007ccc:	4822      	ldr	r0, [pc, #136]	; (8007d58 <vTaskStartScheduler+0xbc>)
 8007cce:	f7ff fe0d 	bl	80078ec <xTaskCreateStatic>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	4a21      	ldr	r2, [pc, #132]	; (8007d5c <vTaskStartScheduler+0xc0>)
 8007cd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007cd8:	4b20      	ldr	r3, [pc, #128]	; (8007d5c <vTaskStartScheduler+0xc0>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d002      	beq.n	8007ce6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	617b      	str	r3, [r7, #20]
 8007ce4:	e001      	b.n	8007cea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d102      	bne.n	8007cf6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007cf0:	f000 fd18 	bl	8008724 <xTimerCreateTimerTask>
 8007cf4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d118      	bne.n	8007d2e <vTaskStartScheduler+0x92>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	613b      	str	r3, [r7, #16]
}
 8007d0e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d10:	4b13      	ldr	r3, [pc, #76]	; (8007d60 <vTaskStartScheduler+0xc4>)
 8007d12:	f04f 32ff 	mov.w	r2, #4294967295
 8007d16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d18:	4b12      	ldr	r3, [pc, #72]	; (8007d64 <vTaskStartScheduler+0xc8>)
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007d1e:	4b12      	ldr	r3, [pc, #72]	; (8007d68 <vTaskStartScheduler+0xcc>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8007d24:	f7f9 f9ce 	bl	80010c4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d28:	f001 f8d2 	bl	8008ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007d2c:	e00e      	b.n	8007d4c <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d34:	d10a      	bne.n	8007d4c <vTaskStartScheduler+0xb0>
	__asm volatile
 8007d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3a:	f383 8811 	msr	BASEPRI, r3
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	60fb      	str	r3, [r7, #12]
}
 8007d48:	bf00      	nop
 8007d4a:	e7fe      	b.n	8007d4a <vTaskStartScheduler+0xae>
}
 8007d4c:	bf00      	nop
 8007d4e:	3718      	adds	r7, #24
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	0800c1f8 	.word	0x0800c1f8
 8007d58:	080083b9 	.word	0x080083b9
 8007d5c:	20001118 	.word	0x20001118
 8007d60:	20001114 	.word	0x20001114
 8007d64:	20001100 	.word	0x20001100
 8007d68:	200010f8 	.word	0x200010f8

08007d6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007d70:	4b04      	ldr	r3, [pc, #16]	; (8007d84 <vTaskSuspendAll+0x18>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3301      	adds	r3, #1
 8007d76:	4a03      	ldr	r2, [pc, #12]	; (8007d84 <vTaskSuspendAll+0x18>)
 8007d78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007d7a:	bf00      	nop
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	2000111c 	.word	0x2000111c

08007d88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d92:	2300      	movs	r3, #0
 8007d94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d96:	4b42      	ldr	r3, [pc, #264]	; (8007ea0 <xTaskResumeAll+0x118>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10a      	bne.n	8007db4 <xTaskResumeAll+0x2c>
	__asm volatile
 8007d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	603b      	str	r3, [r7, #0]
}
 8007db0:	bf00      	nop
 8007db2:	e7fe      	b.n	8007db2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007db4:	f001 f92e 	bl	8009014 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007db8:	4b39      	ldr	r3, [pc, #228]	; (8007ea0 <xTaskResumeAll+0x118>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	4a38      	ldr	r2, [pc, #224]	; (8007ea0 <xTaskResumeAll+0x118>)
 8007dc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dc2:	4b37      	ldr	r3, [pc, #220]	; (8007ea0 <xTaskResumeAll+0x118>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d162      	bne.n	8007e90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007dca:	4b36      	ldr	r3, [pc, #216]	; (8007ea4 <xTaskResumeAll+0x11c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d05e      	beq.n	8007e90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007dd2:	e02f      	b.n	8007e34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dd4:	4b34      	ldr	r3, [pc, #208]	; (8007ea8 <xTaskResumeAll+0x120>)
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3318      	adds	r3, #24
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fe fe6f 	bl	8006ac4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3304      	adds	r3, #4
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fe fe6a 	bl	8006ac4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df4:	4b2d      	ldr	r3, [pc, #180]	; (8007eac <xTaskResumeAll+0x124>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d903      	bls.n	8007e04 <xTaskResumeAll+0x7c>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e00:	4a2a      	ldr	r2, [pc, #168]	; (8007eac <xTaskResumeAll+0x124>)
 8007e02:	6013      	str	r3, [r2, #0]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e08:	4613      	mov	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4413      	add	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4a27      	ldr	r2, [pc, #156]	; (8007eb0 <xTaskResumeAll+0x128>)
 8007e12:	441a      	add	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	3304      	adds	r3, #4
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4610      	mov	r0, r2
 8007e1c:	f7fe fdf5 	bl	8006a0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e24:	4b23      	ldr	r3, [pc, #140]	; (8007eb4 <xTaskResumeAll+0x12c>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d302      	bcc.n	8007e34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007e2e:	4b22      	ldr	r3, [pc, #136]	; (8007eb8 <xTaskResumeAll+0x130>)
 8007e30:	2201      	movs	r2, #1
 8007e32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e34:	4b1c      	ldr	r3, [pc, #112]	; (8007ea8 <xTaskResumeAll+0x120>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1cb      	bne.n	8007dd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e42:	f000 fb6f 	bl	8008524 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007e46:	4b1d      	ldr	r3, [pc, #116]	; (8007ebc <xTaskResumeAll+0x134>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d010      	beq.n	8007e74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e52:	f000 f847 	bl	8007ee4 <xTaskIncrementTick>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007e5c:	4b16      	ldr	r3, [pc, #88]	; (8007eb8 <xTaskResumeAll+0x130>)
 8007e5e:	2201      	movs	r2, #1
 8007e60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	3b01      	subs	r3, #1
 8007e66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1f1      	bne.n	8007e52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007e6e:	4b13      	ldr	r3, [pc, #76]	; (8007ebc <xTaskResumeAll+0x134>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e74:	4b10      	ldr	r3, [pc, #64]	; (8007eb8 <xTaskResumeAll+0x130>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d009      	beq.n	8007e90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e80:	4b0f      	ldr	r3, [pc, #60]	; (8007ec0 <xTaskResumeAll+0x138>)
 8007e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e90:	f001 f8f0 	bl	8009074 <vPortExitCritical>

	return xAlreadyYielded;
 8007e94:	68bb      	ldr	r3, [r7, #8]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	2000111c 	.word	0x2000111c
 8007ea4:	200010f4 	.word	0x200010f4
 8007ea8:	200010b4 	.word	0x200010b4
 8007eac:	200010fc 	.word	0x200010fc
 8007eb0:	20000c24 	.word	0x20000c24
 8007eb4:	20000c20 	.word	0x20000c20
 8007eb8:	20001108 	.word	0x20001108
 8007ebc:	20001104 	.word	0x20001104
 8007ec0:	e000ed04 	.word	0xe000ed04

08007ec4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007eca:	4b05      	ldr	r3, [pc, #20]	; (8007ee0 <xTaskGetTickCount+0x1c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ed0:	687b      	ldr	r3, [r7, #4]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	370c      	adds	r7, #12
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	200010f8 	.word	0x200010f8

08007ee4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007eea:	2300      	movs	r3, #0
 8007eec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eee:	4b4f      	ldr	r3, [pc, #316]	; (800802c <xTaskIncrementTick+0x148>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f040 808f 	bne.w	8008016 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ef8:	4b4d      	ldr	r3, [pc, #308]	; (8008030 <xTaskIncrementTick+0x14c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	3301      	adds	r3, #1
 8007efe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f00:	4a4b      	ldr	r2, [pc, #300]	; (8008030 <xTaskIncrementTick+0x14c>)
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d120      	bne.n	8007f4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f0c:	4b49      	ldr	r3, [pc, #292]	; (8008034 <xTaskIncrementTick+0x150>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00a      	beq.n	8007f2c <xTaskIncrementTick+0x48>
	__asm volatile
 8007f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1a:	f383 8811 	msr	BASEPRI, r3
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f3bf 8f4f 	dsb	sy
 8007f26:	603b      	str	r3, [r7, #0]
}
 8007f28:	bf00      	nop
 8007f2a:	e7fe      	b.n	8007f2a <xTaskIncrementTick+0x46>
 8007f2c:	4b41      	ldr	r3, [pc, #260]	; (8008034 <xTaskIncrementTick+0x150>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	60fb      	str	r3, [r7, #12]
 8007f32:	4b41      	ldr	r3, [pc, #260]	; (8008038 <xTaskIncrementTick+0x154>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a3f      	ldr	r2, [pc, #252]	; (8008034 <xTaskIncrementTick+0x150>)
 8007f38:	6013      	str	r3, [r2, #0]
 8007f3a:	4a3f      	ldr	r2, [pc, #252]	; (8008038 <xTaskIncrementTick+0x154>)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6013      	str	r3, [r2, #0]
 8007f40:	4b3e      	ldr	r3, [pc, #248]	; (800803c <xTaskIncrementTick+0x158>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3301      	adds	r3, #1
 8007f46:	4a3d      	ldr	r2, [pc, #244]	; (800803c <xTaskIncrementTick+0x158>)
 8007f48:	6013      	str	r3, [r2, #0]
 8007f4a:	f000 faeb 	bl	8008524 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f4e:	4b3c      	ldr	r3, [pc, #240]	; (8008040 <xTaskIncrementTick+0x15c>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d349      	bcc.n	8007fec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f58:	4b36      	ldr	r3, [pc, #216]	; (8008034 <xTaskIncrementTick+0x150>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d104      	bne.n	8007f6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f62:	4b37      	ldr	r3, [pc, #220]	; (8008040 <xTaskIncrementTick+0x15c>)
 8007f64:	f04f 32ff 	mov.w	r2, #4294967295
 8007f68:	601a      	str	r2, [r3, #0]
					break;
 8007f6a:	e03f      	b.n	8007fec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f6c:	4b31      	ldr	r3, [pc, #196]	; (8008034 <xTaskIncrementTick+0x150>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d203      	bcs.n	8007f8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f84:	4a2e      	ldr	r2, [pc, #184]	; (8008040 <xTaskIncrementTick+0x15c>)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f8a:	e02f      	b.n	8007fec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	3304      	adds	r3, #4
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7fe fd97 	bl	8006ac4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d004      	beq.n	8007fa8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	3318      	adds	r3, #24
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fe fd8e 	bl	8006ac4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fac:	4b25      	ldr	r3, [pc, #148]	; (8008044 <xTaskIncrementTick+0x160>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d903      	bls.n	8007fbc <xTaskIncrementTick+0xd8>
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb8:	4a22      	ldr	r2, [pc, #136]	; (8008044 <xTaskIncrementTick+0x160>)
 8007fba:	6013      	str	r3, [r2, #0]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4413      	add	r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4a1f      	ldr	r2, [pc, #124]	; (8008048 <xTaskIncrementTick+0x164>)
 8007fca:	441a      	add	r2, r3
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	3304      	adds	r3, #4
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	4610      	mov	r0, r2
 8007fd4:	f7fe fd19 	bl	8006a0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fdc:	4b1b      	ldr	r3, [pc, #108]	; (800804c <xTaskIncrementTick+0x168>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d3b8      	bcc.n	8007f58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fea:	e7b5      	b.n	8007f58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fec:	4b17      	ldr	r3, [pc, #92]	; (800804c <xTaskIncrementTick+0x168>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff2:	4915      	ldr	r1, [pc, #84]	; (8008048 <xTaskIncrementTick+0x164>)
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	440b      	add	r3, r1
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d901      	bls.n	8008008 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008004:	2301      	movs	r3, #1
 8008006:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008008:	4b11      	ldr	r3, [pc, #68]	; (8008050 <xTaskIncrementTick+0x16c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d007      	beq.n	8008020 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008010:	2301      	movs	r3, #1
 8008012:	617b      	str	r3, [r7, #20]
 8008014:	e004      	b.n	8008020 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008016:	4b0f      	ldr	r3, [pc, #60]	; (8008054 <xTaskIncrementTick+0x170>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3301      	adds	r3, #1
 800801c:	4a0d      	ldr	r2, [pc, #52]	; (8008054 <xTaskIncrementTick+0x170>)
 800801e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008020:	697b      	ldr	r3, [r7, #20]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	2000111c 	.word	0x2000111c
 8008030:	200010f8 	.word	0x200010f8
 8008034:	200010ac 	.word	0x200010ac
 8008038:	200010b0 	.word	0x200010b0
 800803c:	2000110c 	.word	0x2000110c
 8008040:	20001114 	.word	0x20001114
 8008044:	200010fc 	.word	0x200010fc
 8008048:	20000c24 	.word	0x20000c24
 800804c:	20000c20 	.word	0x20000c20
 8008050:	20001108 	.word	0x20001108
 8008054:	20001104 	.word	0x20001104

08008058 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800805e:	4b33      	ldr	r3, [pc, #204]	; (800812c <vTaskSwitchContext+0xd4>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d003      	beq.n	800806e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008066:	4b32      	ldr	r3, [pc, #200]	; (8008130 <vTaskSwitchContext+0xd8>)
 8008068:	2201      	movs	r2, #1
 800806a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800806c:	e05a      	b.n	8008124 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 800806e:	4b30      	ldr	r3, [pc, #192]	; (8008130 <vTaskSwitchContext+0xd8>)
 8008070:	2200      	movs	r2, #0
 8008072:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8008074:	f7f9 f82d 	bl	80010d2 <getRunTimeCounterValue>
 8008078:	4603      	mov	r3, r0
 800807a:	4a2e      	ldr	r2, [pc, #184]	; (8008134 <vTaskSwitchContext+0xdc>)
 800807c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800807e:	4b2d      	ldr	r3, [pc, #180]	; (8008134 <vTaskSwitchContext+0xdc>)
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	4b2d      	ldr	r3, [pc, #180]	; (8008138 <vTaskSwitchContext+0xe0>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	429a      	cmp	r2, r3
 8008088:	d909      	bls.n	800809e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800808a:	4b2c      	ldr	r3, [pc, #176]	; (800813c <vTaskSwitchContext+0xe4>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008090:	4a28      	ldr	r2, [pc, #160]	; (8008134 <vTaskSwitchContext+0xdc>)
 8008092:	6810      	ldr	r0, [r2, #0]
 8008094:	4a28      	ldr	r2, [pc, #160]	; (8008138 <vTaskSwitchContext+0xe0>)
 8008096:	6812      	ldr	r2, [r2, #0]
 8008098:	1a82      	subs	r2, r0, r2
 800809a:	440a      	add	r2, r1
 800809c:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800809e:	4b25      	ldr	r3, [pc, #148]	; (8008134 <vTaskSwitchContext+0xdc>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a25      	ldr	r2, [pc, #148]	; (8008138 <vTaskSwitchContext+0xe0>)
 80080a4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080a6:	4b26      	ldr	r3, [pc, #152]	; (8008140 <vTaskSwitchContext+0xe8>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	60fb      	str	r3, [r7, #12]
 80080ac:	e010      	b.n	80080d0 <vTaskSwitchContext+0x78>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10a      	bne.n	80080ca <vTaskSwitchContext+0x72>
	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	607b      	str	r3, [r7, #4]
}
 80080c6:	bf00      	nop
 80080c8:	e7fe      	b.n	80080c8 <vTaskSwitchContext+0x70>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	3b01      	subs	r3, #1
 80080ce:	60fb      	str	r3, [r7, #12]
 80080d0:	491c      	ldr	r1, [pc, #112]	; (8008144 <vTaskSwitchContext+0xec>)
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	4613      	mov	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	440b      	add	r3, r1
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d0e4      	beq.n	80080ae <vTaskSwitchContext+0x56>
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	4613      	mov	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4a15      	ldr	r2, [pc, #84]	; (8008144 <vTaskSwitchContext+0xec>)
 80080f0:	4413      	add	r3, r2
 80080f2:	60bb      	str	r3, [r7, #8]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	685a      	ldr	r2, [r3, #4]
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	605a      	str	r2, [r3, #4]
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	685a      	ldr	r2, [r3, #4]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	3308      	adds	r3, #8
 8008106:	429a      	cmp	r2, r3
 8008108:	d104      	bne.n	8008114 <vTaskSwitchContext+0xbc>
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	605a      	str	r2, [r3, #4]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	4a08      	ldr	r2, [pc, #32]	; (800813c <vTaskSwitchContext+0xe4>)
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	4a08      	ldr	r2, [pc, #32]	; (8008140 <vTaskSwitchContext+0xe8>)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6013      	str	r3, [r2, #0]
}
 8008124:	bf00      	nop
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	2000111c 	.word	0x2000111c
 8008130:	20001108 	.word	0x20001108
 8008134:	20001124 	.word	0x20001124
 8008138:	20001120 	.word	0x20001120
 800813c:	20000c20 	.word	0x20000c20
 8008140:	200010fc 	.word	0x200010fc
 8008144:	20000c24 	.word	0x20000c24

08008148 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10a      	bne.n	800816e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	60fb      	str	r3, [r7, #12]
}
 800816a:	bf00      	nop
 800816c:	e7fe      	b.n	800816c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800816e:	4b07      	ldr	r3, [pc, #28]	; (800818c <vTaskPlaceOnEventList+0x44>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3318      	adds	r3, #24
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7fe fc6b 	bl	8006a52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800817c:	2101      	movs	r1, #1
 800817e:	6838      	ldr	r0, [r7, #0]
 8008180:	f000 fa7c 	bl	800867c <prvAddCurrentTaskToDelayedList>
}
 8008184:	bf00      	nop
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	20000c20 	.word	0x20000c20

08008190 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10a      	bne.n	80081b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80081a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a6:	f383 8811 	msr	BASEPRI, r3
 80081aa:	f3bf 8f6f 	isb	sy
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	617b      	str	r3, [r7, #20]
}
 80081b4:	bf00      	nop
 80081b6:	e7fe      	b.n	80081b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081b8:	4b0a      	ldr	r3, [pc, #40]	; (80081e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3318      	adds	r3, #24
 80081be:	4619      	mov	r1, r3
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f7fe fc22 	bl	8006a0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d002      	beq.n	80081d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80081cc:	f04f 33ff 	mov.w	r3, #4294967295
 80081d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80081d2:	6879      	ldr	r1, [r7, #4]
 80081d4:	68b8      	ldr	r0, [r7, #8]
 80081d6:	f000 fa51 	bl	800867c <prvAddCurrentTaskToDelayedList>
	}
 80081da:	bf00      	nop
 80081dc:	3718      	adds	r7, #24
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	20000c20 	.word	0x20000c20

080081e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10a      	bne.n	8008214 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	60fb      	str	r3, [r7, #12]
}
 8008210:	bf00      	nop
 8008212:	e7fe      	b.n	8008212 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	3318      	adds	r3, #24
 8008218:	4618      	mov	r0, r3
 800821a:	f7fe fc53 	bl	8006ac4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800821e:	4b1e      	ldr	r3, [pc, #120]	; (8008298 <xTaskRemoveFromEventList+0xb0>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d11d      	bne.n	8008262 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	3304      	adds	r3, #4
 800822a:	4618      	mov	r0, r3
 800822c:	f7fe fc4a 	bl	8006ac4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008234:	4b19      	ldr	r3, [pc, #100]	; (800829c <xTaskRemoveFromEventList+0xb4>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	429a      	cmp	r2, r3
 800823a:	d903      	bls.n	8008244 <xTaskRemoveFromEventList+0x5c>
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008240:	4a16      	ldr	r2, [pc, #88]	; (800829c <xTaskRemoveFromEventList+0xb4>)
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008248:	4613      	mov	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	4413      	add	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4a13      	ldr	r2, [pc, #76]	; (80082a0 <xTaskRemoveFromEventList+0xb8>)
 8008252:	441a      	add	r2, r3
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	3304      	adds	r3, #4
 8008258:	4619      	mov	r1, r3
 800825a:	4610      	mov	r0, r2
 800825c:	f7fe fbd5 	bl	8006a0a <vListInsertEnd>
 8008260:	e005      	b.n	800826e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	3318      	adds	r3, #24
 8008266:	4619      	mov	r1, r3
 8008268:	480e      	ldr	r0, [pc, #56]	; (80082a4 <xTaskRemoveFromEventList+0xbc>)
 800826a:	f7fe fbce 	bl	8006a0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008272:	4b0d      	ldr	r3, [pc, #52]	; (80082a8 <xTaskRemoveFromEventList+0xc0>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008278:	429a      	cmp	r2, r3
 800827a:	d905      	bls.n	8008288 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800827c:	2301      	movs	r3, #1
 800827e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008280:	4b0a      	ldr	r3, [pc, #40]	; (80082ac <xTaskRemoveFromEventList+0xc4>)
 8008282:	2201      	movs	r2, #1
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	e001      	b.n	800828c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008288:	2300      	movs	r3, #0
 800828a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800828c:	697b      	ldr	r3, [r7, #20]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3718      	adds	r7, #24
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	2000111c 	.word	0x2000111c
 800829c:	200010fc 	.word	0x200010fc
 80082a0:	20000c24 	.word	0x20000c24
 80082a4:	200010b4 	.word	0x200010b4
 80082a8:	20000c20 	.word	0x20000c20
 80082ac:	20001108 	.word	0x20001108

080082b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80082b8:	4b06      	ldr	r3, [pc, #24]	; (80082d4 <vTaskInternalSetTimeOutState+0x24>)
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80082c0:	4b05      	ldr	r3, [pc, #20]	; (80082d8 <vTaskInternalSetTimeOutState+0x28>)
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	605a      	str	r2, [r3, #4]
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr
 80082d4:	2000110c 	.word	0x2000110c
 80082d8:	200010f8 	.word	0x200010f8

080082dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b088      	sub	sp, #32
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10a      	bne.n	8008302 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80082ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	613b      	str	r3, [r7, #16]
}
 80082fe:	bf00      	nop
 8008300:	e7fe      	b.n	8008300 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10a      	bne.n	800831e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	60fb      	str	r3, [r7, #12]
}
 800831a:	bf00      	nop
 800831c:	e7fe      	b.n	800831c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800831e:	f000 fe79 	bl	8009014 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008322:	4b1d      	ldr	r3, [pc, #116]	; (8008398 <xTaskCheckForTimeOut+0xbc>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	69ba      	ldr	r2, [r7, #24]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800833a:	d102      	bne.n	8008342 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800833c:	2300      	movs	r3, #0
 800833e:	61fb      	str	r3, [r7, #28]
 8008340:	e023      	b.n	800838a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	4b15      	ldr	r3, [pc, #84]	; (800839c <xTaskCheckForTimeOut+0xc0>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	429a      	cmp	r2, r3
 800834c:	d007      	beq.n	800835e <xTaskCheckForTimeOut+0x82>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	429a      	cmp	r2, r3
 8008356:	d302      	bcc.n	800835e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008358:	2301      	movs	r3, #1
 800835a:	61fb      	str	r3, [r7, #28]
 800835c:	e015      	b.n	800838a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	429a      	cmp	r2, r3
 8008366:	d20b      	bcs.n	8008380 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	1ad2      	subs	r2, r2, r3
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7ff ff9b 	bl	80082b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800837a:	2300      	movs	r3, #0
 800837c:	61fb      	str	r3, [r7, #28]
 800837e:	e004      	b.n	800838a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008386:	2301      	movs	r3, #1
 8008388:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800838a:	f000 fe73 	bl	8009074 <vPortExitCritical>

	return xReturn;
 800838e:	69fb      	ldr	r3, [r7, #28]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3720      	adds	r7, #32
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	200010f8 	.word	0x200010f8
 800839c:	2000110c 	.word	0x2000110c

080083a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80083a0:	b480      	push	{r7}
 80083a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80083a4:	4b03      	ldr	r3, [pc, #12]	; (80083b4 <vTaskMissedYield+0x14>)
 80083a6:	2201      	movs	r2, #1
 80083a8:	601a      	str	r2, [r3, #0]
}
 80083aa:	bf00      	nop
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	20001108 	.word	0x20001108

080083b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80083c0:	f000 f852 	bl	8008468 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083c4:	4b06      	ldr	r3, [pc, #24]	; (80083e0 <prvIdleTask+0x28>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d9f9      	bls.n	80083c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80083cc:	4b05      	ldr	r3, [pc, #20]	; (80083e4 <prvIdleTask+0x2c>)
 80083ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80083dc:	e7f0      	b.n	80083c0 <prvIdleTask+0x8>
 80083de:	bf00      	nop
 80083e0:	20000c24 	.word	0x20000c24
 80083e4:	e000ed04 	.word	0xe000ed04

080083e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083ee:	2300      	movs	r3, #0
 80083f0:	607b      	str	r3, [r7, #4]
 80083f2:	e00c      	b.n	800840e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	4613      	mov	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4a12      	ldr	r2, [pc, #72]	; (8008448 <prvInitialiseTaskLists+0x60>)
 8008400:	4413      	add	r3, r2
 8008402:	4618      	mov	r0, r3
 8008404:	f7fe fad4 	bl	80069b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3301      	adds	r3, #1
 800840c:	607b      	str	r3, [r7, #4]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2b37      	cmp	r3, #55	; 0x37
 8008412:	d9ef      	bls.n	80083f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008414:	480d      	ldr	r0, [pc, #52]	; (800844c <prvInitialiseTaskLists+0x64>)
 8008416:	f7fe facb 	bl	80069b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800841a:	480d      	ldr	r0, [pc, #52]	; (8008450 <prvInitialiseTaskLists+0x68>)
 800841c:	f7fe fac8 	bl	80069b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008420:	480c      	ldr	r0, [pc, #48]	; (8008454 <prvInitialiseTaskLists+0x6c>)
 8008422:	f7fe fac5 	bl	80069b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008426:	480c      	ldr	r0, [pc, #48]	; (8008458 <prvInitialiseTaskLists+0x70>)
 8008428:	f7fe fac2 	bl	80069b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800842c:	480b      	ldr	r0, [pc, #44]	; (800845c <prvInitialiseTaskLists+0x74>)
 800842e:	f7fe fabf 	bl	80069b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008432:	4b0b      	ldr	r3, [pc, #44]	; (8008460 <prvInitialiseTaskLists+0x78>)
 8008434:	4a05      	ldr	r2, [pc, #20]	; (800844c <prvInitialiseTaskLists+0x64>)
 8008436:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008438:	4b0a      	ldr	r3, [pc, #40]	; (8008464 <prvInitialiseTaskLists+0x7c>)
 800843a:	4a05      	ldr	r2, [pc, #20]	; (8008450 <prvInitialiseTaskLists+0x68>)
 800843c:	601a      	str	r2, [r3, #0]
}
 800843e:	bf00      	nop
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	20000c24 	.word	0x20000c24
 800844c:	20001084 	.word	0x20001084
 8008450:	20001098 	.word	0x20001098
 8008454:	200010b4 	.word	0x200010b4
 8008458:	200010c8 	.word	0x200010c8
 800845c:	200010e0 	.word	0x200010e0
 8008460:	200010ac 	.word	0x200010ac
 8008464:	200010b0 	.word	0x200010b0

08008468 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800846e:	e019      	b.n	80084a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008470:	f000 fdd0 	bl	8009014 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008474:	4b10      	ldr	r3, [pc, #64]	; (80084b8 <prvCheckTasksWaitingTermination+0x50>)
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	3304      	adds	r3, #4
 8008480:	4618      	mov	r0, r3
 8008482:	f7fe fb1f 	bl	8006ac4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008486:	4b0d      	ldr	r3, [pc, #52]	; (80084bc <prvCheckTasksWaitingTermination+0x54>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3b01      	subs	r3, #1
 800848c:	4a0b      	ldr	r2, [pc, #44]	; (80084bc <prvCheckTasksWaitingTermination+0x54>)
 800848e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008490:	4b0b      	ldr	r3, [pc, #44]	; (80084c0 <prvCheckTasksWaitingTermination+0x58>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	3b01      	subs	r3, #1
 8008496:	4a0a      	ldr	r2, [pc, #40]	; (80084c0 <prvCheckTasksWaitingTermination+0x58>)
 8008498:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800849a:	f000 fdeb 	bl	8009074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f810 	bl	80084c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084a4:	4b06      	ldr	r3, [pc, #24]	; (80084c0 <prvCheckTasksWaitingTermination+0x58>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1e1      	bne.n	8008470 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80084ac:	bf00      	nop
 80084ae:	bf00      	nop
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	200010c8 	.word	0x200010c8
 80084bc:	200010f4 	.word	0x200010f4
 80084c0:	200010dc 	.word	0x200010dc

080084c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d108      	bne.n	80084e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 ff88 	bl	80093f0 <vPortFree>
				vPortFree( pxTCB );
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 ff85 	bl	80093f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80084e6:	e018      	b.n	800851a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d103      	bne.n	80084fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 ff7c 	bl	80093f0 <vPortFree>
	}
 80084f8:	e00f      	b.n	800851a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008500:	2b02      	cmp	r3, #2
 8008502:	d00a      	beq.n	800851a <prvDeleteTCB+0x56>
	__asm volatile
 8008504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	60fb      	str	r3, [r7, #12]
}
 8008516:	bf00      	nop
 8008518:	e7fe      	b.n	8008518 <prvDeleteTCB+0x54>
	}
 800851a:	bf00      	nop
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800852a:	4b0c      	ldr	r3, [pc, #48]	; (800855c <prvResetNextTaskUnblockTime+0x38>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d104      	bne.n	800853e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008534:	4b0a      	ldr	r3, [pc, #40]	; (8008560 <prvResetNextTaskUnblockTime+0x3c>)
 8008536:	f04f 32ff 	mov.w	r2, #4294967295
 800853a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800853c:	e008      	b.n	8008550 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800853e:	4b07      	ldr	r3, [pc, #28]	; (800855c <prvResetNextTaskUnblockTime+0x38>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	4a04      	ldr	r2, [pc, #16]	; (8008560 <prvResetNextTaskUnblockTime+0x3c>)
 800854e:	6013      	str	r3, [r2, #0]
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	200010ac 	.word	0x200010ac
 8008560:	20001114 	.word	0x20001114

08008564 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800856a:	4b0b      	ldr	r3, [pc, #44]	; (8008598 <xTaskGetSchedulerState+0x34>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d102      	bne.n	8008578 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008572:	2301      	movs	r3, #1
 8008574:	607b      	str	r3, [r7, #4]
 8008576:	e008      	b.n	800858a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008578:	4b08      	ldr	r3, [pc, #32]	; (800859c <xTaskGetSchedulerState+0x38>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d102      	bne.n	8008586 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008580:	2302      	movs	r3, #2
 8008582:	607b      	str	r3, [r7, #4]
 8008584:	e001      	b.n	800858a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008586:	2300      	movs	r3, #0
 8008588:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800858a:	687b      	ldr	r3, [r7, #4]
	}
 800858c:	4618      	mov	r0, r3
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr
 8008598:	20001100 	.word	0x20001100
 800859c:	2000111c 	.word	0x2000111c

080085a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80085ac:	2300      	movs	r3, #0
 80085ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d056      	beq.n	8008664 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80085b6:	4b2e      	ldr	r3, [pc, #184]	; (8008670 <xTaskPriorityDisinherit+0xd0>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d00a      	beq.n	80085d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80085c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	60fb      	str	r3, [r7, #12]
}
 80085d2:	bf00      	nop
 80085d4:	e7fe      	b.n	80085d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10a      	bne.n	80085f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	60bb      	str	r3, [r7, #8]
}
 80085f0:	bf00      	nop
 80085f2:	e7fe      	b.n	80085f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085f8:	1e5a      	subs	r2, r3, #1
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008606:	429a      	cmp	r2, r3
 8008608:	d02c      	beq.n	8008664 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800860e:	2b00      	cmp	r3, #0
 8008610:	d128      	bne.n	8008664 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	3304      	adds	r3, #4
 8008616:	4618      	mov	r0, r3
 8008618:	f7fe fa54 	bl	8006ac4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008628:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008634:	4b0f      	ldr	r3, [pc, #60]	; (8008674 <xTaskPriorityDisinherit+0xd4>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	429a      	cmp	r2, r3
 800863a:	d903      	bls.n	8008644 <xTaskPriorityDisinherit+0xa4>
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	4a0c      	ldr	r2, [pc, #48]	; (8008674 <xTaskPriorityDisinherit+0xd4>)
 8008642:	6013      	str	r3, [r2, #0]
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008648:	4613      	mov	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4a09      	ldr	r2, [pc, #36]	; (8008678 <xTaskPriorityDisinherit+0xd8>)
 8008652:	441a      	add	r2, r3
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	3304      	adds	r3, #4
 8008658:	4619      	mov	r1, r3
 800865a:	4610      	mov	r0, r2
 800865c:	f7fe f9d5 	bl	8006a0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008660:	2301      	movs	r3, #1
 8008662:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008664:	697b      	ldr	r3, [r7, #20]
	}
 8008666:	4618      	mov	r0, r3
 8008668:	3718      	adds	r7, #24
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20000c20 	.word	0x20000c20
 8008674:	200010fc 	.word	0x200010fc
 8008678:	20000c24 	.word	0x20000c24

0800867c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008686:	4b21      	ldr	r3, [pc, #132]	; (800870c <prvAddCurrentTaskToDelayedList+0x90>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800868c:	4b20      	ldr	r3, [pc, #128]	; (8008710 <prvAddCurrentTaskToDelayedList+0x94>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	3304      	adds	r3, #4
 8008692:	4618      	mov	r0, r3
 8008694:	f7fe fa16 	bl	8006ac4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800869e:	d10a      	bne.n	80086b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d007      	beq.n	80086b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086a6:	4b1a      	ldr	r3, [pc, #104]	; (8008710 <prvAddCurrentTaskToDelayedList+0x94>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	3304      	adds	r3, #4
 80086ac:	4619      	mov	r1, r3
 80086ae:	4819      	ldr	r0, [pc, #100]	; (8008714 <prvAddCurrentTaskToDelayedList+0x98>)
 80086b0:	f7fe f9ab 	bl	8006a0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80086b4:	e026      	b.n	8008704 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4413      	add	r3, r2
 80086bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086be:	4b14      	ldr	r3, [pc, #80]	; (8008710 <prvAddCurrentTaskToDelayedList+0x94>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d209      	bcs.n	80086e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086ce:	4b12      	ldr	r3, [pc, #72]	; (8008718 <prvAddCurrentTaskToDelayedList+0x9c>)
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	4b0f      	ldr	r3, [pc, #60]	; (8008710 <prvAddCurrentTaskToDelayedList+0x94>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3304      	adds	r3, #4
 80086d8:	4619      	mov	r1, r3
 80086da:	4610      	mov	r0, r2
 80086dc:	f7fe f9b9 	bl	8006a52 <vListInsert>
}
 80086e0:	e010      	b.n	8008704 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086e2:	4b0e      	ldr	r3, [pc, #56]	; (800871c <prvAddCurrentTaskToDelayedList+0xa0>)
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	4b0a      	ldr	r3, [pc, #40]	; (8008710 <prvAddCurrentTaskToDelayedList+0x94>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	3304      	adds	r3, #4
 80086ec:	4619      	mov	r1, r3
 80086ee:	4610      	mov	r0, r2
 80086f0:	f7fe f9af 	bl	8006a52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80086f4:	4b0a      	ldr	r3, [pc, #40]	; (8008720 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68ba      	ldr	r2, [r7, #8]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d202      	bcs.n	8008704 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80086fe:	4a08      	ldr	r2, [pc, #32]	; (8008720 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	6013      	str	r3, [r2, #0]
}
 8008704:	bf00      	nop
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	200010f8 	.word	0x200010f8
 8008710:	20000c20 	.word	0x20000c20
 8008714:	200010e0 	.word	0x200010e0
 8008718:	200010b0 	.word	0x200010b0
 800871c:	200010ac 	.word	0x200010ac
 8008720:	20001114 	.word	0x20001114

08008724 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b08a      	sub	sp, #40	; 0x28
 8008728:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800872a:	2300      	movs	r3, #0
 800872c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800872e:	f000 fb07 	bl	8008d40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008732:	4b1c      	ldr	r3, [pc, #112]	; (80087a4 <xTimerCreateTimerTask+0x80>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d021      	beq.n	800877e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800873a:	2300      	movs	r3, #0
 800873c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800873e:	2300      	movs	r3, #0
 8008740:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008742:	1d3a      	adds	r2, r7, #4
 8008744:	f107 0108 	add.w	r1, r7, #8
 8008748:	f107 030c 	add.w	r3, r7, #12
 800874c:	4618      	mov	r0, r3
 800874e:	f7fe f915 	bl	800697c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008752:	6879      	ldr	r1, [r7, #4]
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	9202      	str	r2, [sp, #8]
 800875a:	9301      	str	r3, [sp, #4]
 800875c:	2302      	movs	r3, #2
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	2300      	movs	r3, #0
 8008762:	460a      	mov	r2, r1
 8008764:	4910      	ldr	r1, [pc, #64]	; (80087a8 <xTimerCreateTimerTask+0x84>)
 8008766:	4811      	ldr	r0, [pc, #68]	; (80087ac <xTimerCreateTimerTask+0x88>)
 8008768:	f7ff f8c0 	bl	80078ec <xTaskCreateStatic>
 800876c:	4603      	mov	r3, r0
 800876e:	4a10      	ldr	r2, [pc, #64]	; (80087b0 <xTimerCreateTimerTask+0x8c>)
 8008770:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008772:	4b0f      	ldr	r3, [pc, #60]	; (80087b0 <xTimerCreateTimerTask+0x8c>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800877a:	2301      	movs	r3, #1
 800877c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10a      	bne.n	800879a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008788:	f383 8811 	msr	BASEPRI, r3
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	613b      	str	r3, [r7, #16]
}
 8008796:	bf00      	nop
 8008798:	e7fe      	b.n	8008798 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800879a:	697b      	ldr	r3, [r7, #20]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3718      	adds	r7, #24
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	20001158 	.word	0x20001158
 80087a8:	0800c228 	.word	0x0800c228
 80087ac:	080088e9 	.word	0x080088e9
 80087b0:	2000115c 	.word	0x2000115c

080087b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b08a      	sub	sp, #40	; 0x28
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80087c2:	2300      	movs	r3, #0
 80087c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10a      	bne.n	80087e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	623b      	str	r3, [r7, #32]
}
 80087de:	bf00      	nop
 80087e0:	e7fe      	b.n	80087e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80087e2:	4b1a      	ldr	r3, [pc, #104]	; (800884c <xTimerGenericCommand+0x98>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d02a      	beq.n	8008840 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	2b05      	cmp	r3, #5
 80087fa:	dc18      	bgt.n	800882e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80087fc:	f7ff feb2 	bl	8008564 <xTaskGetSchedulerState>
 8008800:	4603      	mov	r3, r0
 8008802:	2b02      	cmp	r3, #2
 8008804:	d109      	bne.n	800881a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008806:	4b11      	ldr	r3, [pc, #68]	; (800884c <xTimerGenericCommand+0x98>)
 8008808:	6818      	ldr	r0, [r3, #0]
 800880a:	f107 0110 	add.w	r1, r7, #16
 800880e:	2300      	movs	r3, #0
 8008810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008812:	f7fe fb29 	bl	8006e68 <xQueueGenericSend>
 8008816:	6278      	str	r0, [r7, #36]	; 0x24
 8008818:	e012      	b.n	8008840 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800881a:	4b0c      	ldr	r3, [pc, #48]	; (800884c <xTimerGenericCommand+0x98>)
 800881c:	6818      	ldr	r0, [r3, #0]
 800881e:	f107 0110 	add.w	r1, r7, #16
 8008822:	2300      	movs	r3, #0
 8008824:	2200      	movs	r2, #0
 8008826:	f7fe fb1f 	bl	8006e68 <xQueueGenericSend>
 800882a:	6278      	str	r0, [r7, #36]	; 0x24
 800882c:	e008      	b.n	8008840 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800882e:	4b07      	ldr	r3, [pc, #28]	; (800884c <xTimerGenericCommand+0x98>)
 8008830:	6818      	ldr	r0, [r3, #0]
 8008832:	f107 0110 	add.w	r1, r7, #16
 8008836:	2300      	movs	r3, #0
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	f7fe fc13 	bl	8007064 <xQueueGenericSendFromISR>
 800883e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008842:	4618      	mov	r0, r3
 8008844:	3728      	adds	r7, #40	; 0x28
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	20001158 	.word	0x20001158

08008850 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b088      	sub	sp, #32
 8008854:	af02      	add	r7, sp, #8
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800885a:	4b22      	ldr	r3, [pc, #136]	; (80088e4 <prvProcessExpiredTimer+0x94>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	3304      	adds	r3, #4
 8008868:	4618      	mov	r0, r3
 800886a:	f7fe f92b 	bl	8006ac4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008874:	f003 0304 	and.w	r3, r3, #4
 8008878:	2b00      	cmp	r3, #0
 800887a:	d022      	beq.n	80088c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	699a      	ldr	r2, [r3, #24]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	18d1      	adds	r1, r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	6978      	ldr	r0, [r7, #20]
 800888a:	f000 f8d1 	bl	8008a30 <prvInsertTimerInActiveList>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d01f      	beq.n	80088d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008894:	2300      	movs	r3, #0
 8008896:	9300      	str	r3, [sp, #0]
 8008898:	2300      	movs	r3, #0
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	2100      	movs	r1, #0
 800889e:	6978      	ldr	r0, [r7, #20]
 80088a0:	f7ff ff88 	bl	80087b4 <xTimerGenericCommand>
 80088a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d113      	bne.n	80088d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	60fb      	str	r3, [r7, #12]
}
 80088be:	bf00      	nop
 80088c0:	e7fe      	b.n	80088c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088c8:	f023 0301 	bic.w	r3, r3, #1
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	6a1b      	ldr	r3, [r3, #32]
 80088d8:	6978      	ldr	r0, [r7, #20]
 80088da:	4798      	blx	r3
}
 80088dc:	bf00      	nop
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	20001150 	.word	0x20001150

080088e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088f0:	f107 0308 	add.w	r3, r7, #8
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 f857 	bl	80089a8 <prvGetNextExpireTime>
 80088fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	4619      	mov	r1, r3
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f000 f803 	bl	800890c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008906:	f000 f8d5 	bl	8008ab4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800890a:	e7f1      	b.n	80088f0 <prvTimerTask+0x8>

0800890c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008916:	f7ff fa29 	bl	8007d6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800891a:	f107 0308 	add.w	r3, r7, #8
 800891e:	4618      	mov	r0, r3
 8008920:	f000 f866 	bl	80089f0 <prvSampleTimeNow>
 8008924:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d130      	bne.n	800898e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10a      	bne.n	8008948 <prvProcessTimerOrBlockTask+0x3c>
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	429a      	cmp	r2, r3
 8008938:	d806      	bhi.n	8008948 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800893a:	f7ff fa25 	bl	8007d88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800893e:	68f9      	ldr	r1, [r7, #12]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7ff ff85 	bl	8008850 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008946:	e024      	b.n	8008992 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d008      	beq.n	8008960 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800894e:	4b13      	ldr	r3, [pc, #76]	; (800899c <prvProcessTimerOrBlockTask+0x90>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d101      	bne.n	800895c <prvProcessTimerOrBlockTask+0x50>
 8008958:	2301      	movs	r3, #1
 800895a:	e000      	b.n	800895e <prvProcessTimerOrBlockTask+0x52>
 800895c:	2300      	movs	r3, #0
 800895e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008960:	4b0f      	ldr	r3, [pc, #60]	; (80089a0 <prvProcessTimerOrBlockTask+0x94>)
 8008962:	6818      	ldr	r0, [r3, #0]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	683a      	ldr	r2, [r7, #0]
 800896c:	4619      	mov	r1, r3
 800896e:	f7fe ff89 	bl	8007884 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008972:	f7ff fa09 	bl	8007d88 <xTaskResumeAll>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10a      	bne.n	8008992 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800897c:	4b09      	ldr	r3, [pc, #36]	; (80089a4 <prvProcessTimerOrBlockTask+0x98>)
 800897e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	f3bf 8f6f 	isb	sy
}
 800898c:	e001      	b.n	8008992 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800898e:	f7ff f9fb 	bl	8007d88 <xTaskResumeAll>
}
 8008992:	bf00      	nop
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	20001154 	.word	0x20001154
 80089a0:	20001158 	.word	0x20001158
 80089a4:	e000ed04 	.word	0xe000ed04

080089a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80089b0:	4b0e      	ldr	r3, [pc, #56]	; (80089ec <prvGetNextExpireTime+0x44>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <prvGetNextExpireTime+0x16>
 80089ba:	2201      	movs	r2, #1
 80089bc:	e000      	b.n	80089c0 <prvGetNextExpireTime+0x18>
 80089be:	2200      	movs	r2, #0
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d105      	bne.n	80089d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089cc:	4b07      	ldr	r3, [pc, #28]	; (80089ec <prvGetNextExpireTime+0x44>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	60fb      	str	r3, [r7, #12]
 80089d6:	e001      	b.n	80089dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80089d8:	2300      	movs	r3, #0
 80089da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80089dc:	68fb      	ldr	r3, [r7, #12]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	20001150 	.word	0x20001150

080089f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80089f8:	f7ff fa64 	bl	8007ec4 <xTaskGetTickCount>
 80089fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80089fe:	4b0b      	ldr	r3, [pc, #44]	; (8008a2c <prvSampleTimeNow+0x3c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d205      	bcs.n	8008a14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a08:	f000 f936 	bl	8008c78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	601a      	str	r2, [r3, #0]
 8008a12:	e002      	b.n	8008a1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a1a:	4a04      	ldr	r2, [pc, #16]	; (8008a2c <prvSampleTimeNow+0x3c>)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a20:	68fb      	ldr	r3, [r7, #12]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	20001160 	.word	0x20001160

08008a30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
 8008a3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d812      	bhi.n	8008a7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	1ad2      	subs	r2, r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d302      	bcc.n	8008a6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a64:	2301      	movs	r3, #1
 8008a66:	617b      	str	r3, [r7, #20]
 8008a68:	e01b      	b.n	8008aa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a6a:	4b10      	ldr	r3, [pc, #64]	; (8008aac <prvInsertTimerInActiveList+0x7c>)
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	3304      	adds	r3, #4
 8008a72:	4619      	mov	r1, r3
 8008a74:	4610      	mov	r0, r2
 8008a76:	f7fd ffec 	bl	8006a52 <vListInsert>
 8008a7a:	e012      	b.n	8008aa2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d206      	bcs.n	8008a92 <prvInsertTimerInActiveList+0x62>
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d302      	bcc.n	8008a92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	617b      	str	r3, [r7, #20]
 8008a90:	e007      	b.n	8008aa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a92:	4b07      	ldr	r3, [pc, #28]	; (8008ab0 <prvInsertTimerInActiveList+0x80>)
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	3304      	adds	r3, #4
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	f7fd ffd8 	bl	8006a52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008aa2:	697b      	ldr	r3, [r7, #20]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3718      	adds	r7, #24
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	20001154 	.word	0x20001154
 8008ab0:	20001150 	.word	0x20001150

08008ab4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b08e      	sub	sp, #56	; 0x38
 8008ab8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008aba:	e0ca      	b.n	8008c52 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	da18      	bge.n	8008af4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008ac2:	1d3b      	adds	r3, r7, #4
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10a      	bne.n	8008ae4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	61fb      	str	r3, [r7, #28]
}
 8008ae0:	bf00      	nop
 8008ae2:	e7fe      	b.n	8008ae2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aea:	6850      	ldr	r0, [r2, #4]
 8008aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aee:	6892      	ldr	r2, [r2, #8]
 8008af0:	4611      	mov	r1, r2
 8008af2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f2c0 80ab 	blt.w	8008c52 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d004      	beq.n	8008b12 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fd ffd9 	bl	8006ac4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b12:	463b      	mov	r3, r7
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7ff ff6b 	bl	80089f0 <prvSampleTimeNow>
 8008b1a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b09      	cmp	r3, #9
 8008b20:	f200 8096 	bhi.w	8008c50 <prvProcessReceivedCommands+0x19c>
 8008b24:	a201      	add	r2, pc, #4	; (adr r2, 8008b2c <prvProcessReceivedCommands+0x78>)
 8008b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2a:	bf00      	nop
 8008b2c:	08008b55 	.word	0x08008b55
 8008b30:	08008b55 	.word	0x08008b55
 8008b34:	08008b55 	.word	0x08008b55
 8008b38:	08008bc9 	.word	0x08008bc9
 8008b3c:	08008bdd 	.word	0x08008bdd
 8008b40:	08008c27 	.word	0x08008c27
 8008b44:	08008b55 	.word	0x08008b55
 8008b48:	08008b55 	.word	0x08008b55
 8008b4c:	08008bc9 	.word	0x08008bc9
 8008b50:	08008bdd 	.word	0x08008bdd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b5a:	f043 0301 	orr.w	r3, r3, #1
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	18d1      	adds	r1, r2, r3
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b74:	f7ff ff5c 	bl	8008a30 <prvInsertTimerInActiveList>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d069      	beq.n	8008c52 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b8c:	f003 0304 	and.w	r3, r3, #4
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d05e      	beq.n	8008c52 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	441a      	add	r2, r3
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ba6:	f7ff fe05 	bl	80087b4 <xTimerGenericCommand>
 8008baa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d14f      	bne.n	8008c52 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	61bb      	str	r3, [r7, #24]
}
 8008bc4:	bf00      	nop
 8008bc6:	e7fe      	b.n	8008bc6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bce:	f023 0301 	bic.w	r3, r3, #1
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008bda:	e03a      	b.n	8008c52 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008be2:	f043 0301 	orr.w	r3, r3, #1
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10a      	bne.n	8008c12 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c00:	f383 8811 	msr	BASEPRI, r3
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	617b      	str	r3, [r7, #20]
}
 8008c0e:	bf00      	nop
 8008c10:	e7fe      	b.n	8008c10 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c14:	699a      	ldr	r2, [r3, #24]
 8008c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c18:	18d1      	adds	r1, r2, r3
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c20:	f7ff ff06 	bl	8008a30 <prvInsertTimerInActiveList>
					break;
 8008c24:	e015      	b.n	8008c52 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c2c:	f003 0302 	and.w	r3, r3, #2
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d103      	bne.n	8008c3c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c36:	f000 fbdb 	bl	80093f0 <vPortFree>
 8008c3a:	e00a      	b.n	8008c52 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c42:	f023 0301 	bic.w	r3, r3, #1
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c4e:	e000      	b.n	8008c52 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008c50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c52:	4b08      	ldr	r3, [pc, #32]	; (8008c74 <prvProcessReceivedCommands+0x1c0>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	1d39      	adds	r1, r7, #4
 8008c58:	2200      	movs	r2, #0
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fe fb2a 	bl	80072b4 <xQueueReceive>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f47f af2a 	bne.w	8008abc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008c68:	bf00      	nop
 8008c6a:	bf00      	nop
 8008c6c:	3730      	adds	r7, #48	; 0x30
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20001158 	.word	0x20001158

08008c78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b088      	sub	sp, #32
 8008c7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c7e:	e048      	b.n	8008d12 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c80:	4b2d      	ldr	r3, [pc, #180]	; (8008d38 <prvSwitchTimerLists+0xc0>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c8a:	4b2b      	ldr	r3, [pc, #172]	; (8008d38 <prvSwitchTimerLists+0xc0>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	3304      	adds	r3, #4
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fd ff13 	bl	8006ac4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cac:	f003 0304 	and.w	r3, r3, #4
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d02e      	beq.n	8008d12 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	4413      	add	r3, r2
 8008cbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d90e      	bls.n	8008ce4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cd2:	4b19      	ldr	r3, [pc, #100]	; (8008d38 <prvSwitchTimerLists+0xc0>)
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3304      	adds	r3, #4
 8008cda:	4619      	mov	r1, r3
 8008cdc:	4610      	mov	r0, r2
 8008cde:	f7fd feb8 	bl	8006a52 <vListInsert>
 8008ce2:	e016      	b.n	8008d12 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	2300      	movs	r3, #0
 8008cea:	693a      	ldr	r2, [r7, #16]
 8008cec:	2100      	movs	r1, #0
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f7ff fd60 	bl	80087b4 <xTimerGenericCommand>
 8008cf4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10a      	bne.n	8008d12 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	603b      	str	r3, [r7, #0]
}
 8008d0e:	bf00      	nop
 8008d10:	e7fe      	b.n	8008d10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d12:	4b09      	ldr	r3, [pc, #36]	; (8008d38 <prvSwitchTimerLists+0xc0>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1b1      	bne.n	8008c80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d1c:	4b06      	ldr	r3, [pc, #24]	; (8008d38 <prvSwitchTimerLists+0xc0>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d22:	4b06      	ldr	r3, [pc, #24]	; (8008d3c <prvSwitchTimerLists+0xc4>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a04      	ldr	r2, [pc, #16]	; (8008d38 <prvSwitchTimerLists+0xc0>)
 8008d28:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d2a:	4a04      	ldr	r2, [pc, #16]	; (8008d3c <prvSwitchTimerLists+0xc4>)
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	6013      	str	r3, [r2, #0]
}
 8008d30:	bf00      	nop
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	20001150 	.word	0x20001150
 8008d3c:	20001154 	.word	0x20001154

08008d40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d46:	f000 f965 	bl	8009014 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d4a:	4b15      	ldr	r3, [pc, #84]	; (8008da0 <prvCheckForValidListAndQueue+0x60>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d120      	bne.n	8008d94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d52:	4814      	ldr	r0, [pc, #80]	; (8008da4 <prvCheckForValidListAndQueue+0x64>)
 8008d54:	f7fd fe2c 	bl	80069b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d58:	4813      	ldr	r0, [pc, #76]	; (8008da8 <prvCheckForValidListAndQueue+0x68>)
 8008d5a:	f7fd fe29 	bl	80069b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d5e:	4b13      	ldr	r3, [pc, #76]	; (8008dac <prvCheckForValidListAndQueue+0x6c>)
 8008d60:	4a10      	ldr	r2, [pc, #64]	; (8008da4 <prvCheckForValidListAndQueue+0x64>)
 8008d62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d64:	4b12      	ldr	r3, [pc, #72]	; (8008db0 <prvCheckForValidListAndQueue+0x70>)
 8008d66:	4a10      	ldr	r2, [pc, #64]	; (8008da8 <prvCheckForValidListAndQueue+0x68>)
 8008d68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	4b11      	ldr	r3, [pc, #68]	; (8008db4 <prvCheckForValidListAndQueue+0x74>)
 8008d70:	4a11      	ldr	r2, [pc, #68]	; (8008db8 <prvCheckForValidListAndQueue+0x78>)
 8008d72:	2110      	movs	r1, #16
 8008d74:	200a      	movs	r0, #10
 8008d76:	f7fd ff37 	bl	8006be8 <xQueueGenericCreateStatic>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	4a08      	ldr	r2, [pc, #32]	; (8008da0 <prvCheckForValidListAndQueue+0x60>)
 8008d7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d80:	4b07      	ldr	r3, [pc, #28]	; (8008da0 <prvCheckForValidListAndQueue+0x60>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d005      	beq.n	8008d94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d88:	4b05      	ldr	r3, [pc, #20]	; (8008da0 <prvCheckForValidListAndQueue+0x60>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	490b      	ldr	r1, [pc, #44]	; (8008dbc <prvCheckForValidListAndQueue+0x7c>)
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fe fd24 	bl	80077dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d94:	f000 f96e 	bl	8009074 <vPortExitCritical>
}
 8008d98:	bf00      	nop
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	20001158 	.word	0x20001158
 8008da4:	20001128 	.word	0x20001128
 8008da8:	2000113c 	.word	0x2000113c
 8008dac:	20001150 	.word	0x20001150
 8008db0:	20001154 	.word	0x20001154
 8008db4:	20001204 	.word	0x20001204
 8008db8:	20001164 	.word	0x20001164
 8008dbc:	0800c230 	.word	0x0800c230

08008dc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	3b04      	subs	r3, #4
 8008dd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3b04      	subs	r3, #4
 8008dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	f023 0201 	bic.w	r2, r3, #1
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	3b04      	subs	r3, #4
 8008dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008df0:	4a0c      	ldr	r2, [pc, #48]	; (8008e24 <pxPortInitialiseStack+0x64>)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	3b14      	subs	r3, #20
 8008dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	3b04      	subs	r3, #4
 8008e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f06f 0202 	mvn.w	r2, #2
 8008e0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	3b20      	subs	r3, #32
 8008e14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e16:	68fb      	ldr	r3, [r7, #12]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr
 8008e24:	08008e29 	.word	0x08008e29

08008e28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e32:	4b12      	ldr	r3, [pc, #72]	; (8008e7c <prvTaskExitError+0x54>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3a:	d00a      	beq.n	8008e52 <prvTaskExitError+0x2a>
	__asm volatile
 8008e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e40:	f383 8811 	msr	BASEPRI, r3
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	60fb      	str	r3, [r7, #12]
}
 8008e4e:	bf00      	nop
 8008e50:	e7fe      	b.n	8008e50 <prvTaskExitError+0x28>
	__asm volatile
 8008e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	60bb      	str	r3, [r7, #8]
}
 8008e64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e66:	bf00      	nop
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d0fc      	beq.n	8008e68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e6e:	bf00      	nop
 8008e70:	bf00      	nop
 8008e72:	3714      	adds	r7, #20
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	2000000c 	.word	0x2000000c

08008e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e80:	4b07      	ldr	r3, [pc, #28]	; (8008ea0 <pxCurrentTCBConst2>)
 8008e82:	6819      	ldr	r1, [r3, #0]
 8008e84:	6808      	ldr	r0, [r1, #0]
 8008e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8a:	f380 8809 	msr	PSP, r0
 8008e8e:	f3bf 8f6f 	isb	sy
 8008e92:	f04f 0000 	mov.w	r0, #0
 8008e96:	f380 8811 	msr	BASEPRI, r0
 8008e9a:	4770      	bx	lr
 8008e9c:	f3af 8000 	nop.w

08008ea0 <pxCurrentTCBConst2>:
 8008ea0:	20000c20 	.word	0x20000c20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ea4:	bf00      	nop
 8008ea6:	bf00      	nop

08008ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ea8:	4808      	ldr	r0, [pc, #32]	; (8008ecc <prvPortStartFirstTask+0x24>)
 8008eaa:	6800      	ldr	r0, [r0, #0]
 8008eac:	6800      	ldr	r0, [r0, #0]
 8008eae:	f380 8808 	msr	MSP, r0
 8008eb2:	f04f 0000 	mov.w	r0, #0
 8008eb6:	f380 8814 	msr	CONTROL, r0
 8008eba:	b662      	cpsie	i
 8008ebc:	b661      	cpsie	f
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	df00      	svc	0
 8008ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008eca:	bf00      	nop
 8008ecc:	e000ed08 	.word	0xe000ed08

08008ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ed6:	4b46      	ldr	r3, [pc, #280]	; (8008ff0 <xPortStartScheduler+0x120>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a46      	ldr	r2, [pc, #280]	; (8008ff4 <xPortStartScheduler+0x124>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d10a      	bne.n	8008ef6 <xPortStartScheduler+0x26>
	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	613b      	str	r3, [r7, #16]
}
 8008ef2:	bf00      	nop
 8008ef4:	e7fe      	b.n	8008ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ef6:	4b3e      	ldr	r3, [pc, #248]	; (8008ff0 <xPortStartScheduler+0x120>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a3f      	ldr	r2, [pc, #252]	; (8008ff8 <xPortStartScheduler+0x128>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d10a      	bne.n	8008f16 <xPortStartScheduler+0x46>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	60fb      	str	r3, [r7, #12]
}
 8008f12:	bf00      	nop
 8008f14:	e7fe      	b.n	8008f14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f16:	4b39      	ldr	r3, [pc, #228]	; (8008ffc <xPortStartScheduler+0x12c>)
 8008f18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	22ff      	movs	r2, #255	; 0xff
 8008f26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f30:	78fb      	ldrb	r3, [r7, #3]
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f38:	b2da      	uxtb	r2, r3
 8008f3a:	4b31      	ldr	r3, [pc, #196]	; (8009000 <xPortStartScheduler+0x130>)
 8008f3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f3e:	4b31      	ldr	r3, [pc, #196]	; (8009004 <xPortStartScheduler+0x134>)
 8008f40:	2207      	movs	r2, #7
 8008f42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f44:	e009      	b.n	8008f5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008f46:	4b2f      	ldr	r3, [pc, #188]	; (8009004 <xPortStartScheduler+0x134>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	4a2d      	ldr	r2, [pc, #180]	; (8009004 <xPortStartScheduler+0x134>)
 8008f4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f50:	78fb      	ldrb	r3, [r7, #3]
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	005b      	lsls	r3, r3, #1
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f5a:	78fb      	ldrb	r3, [r7, #3]
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f62:	2b80      	cmp	r3, #128	; 0x80
 8008f64:	d0ef      	beq.n	8008f46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f66:	4b27      	ldr	r3, [pc, #156]	; (8009004 <xPortStartScheduler+0x134>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f1c3 0307 	rsb	r3, r3, #7
 8008f6e:	2b04      	cmp	r3, #4
 8008f70:	d00a      	beq.n	8008f88 <xPortStartScheduler+0xb8>
	__asm volatile
 8008f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	60bb      	str	r3, [r7, #8]
}
 8008f84:	bf00      	nop
 8008f86:	e7fe      	b.n	8008f86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f88:	4b1e      	ldr	r3, [pc, #120]	; (8009004 <xPortStartScheduler+0x134>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	021b      	lsls	r3, r3, #8
 8008f8e:	4a1d      	ldr	r2, [pc, #116]	; (8009004 <xPortStartScheduler+0x134>)
 8008f90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f92:	4b1c      	ldr	r3, [pc, #112]	; (8009004 <xPortStartScheduler+0x134>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f9a:	4a1a      	ldr	r2, [pc, #104]	; (8009004 <xPortStartScheduler+0x134>)
 8008f9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fa6:	4b18      	ldr	r3, [pc, #96]	; (8009008 <xPortStartScheduler+0x138>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a17      	ldr	r2, [pc, #92]	; (8009008 <xPortStartScheduler+0x138>)
 8008fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fb2:	4b15      	ldr	r3, [pc, #84]	; (8009008 <xPortStartScheduler+0x138>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a14      	ldr	r2, [pc, #80]	; (8009008 <xPortStartScheduler+0x138>)
 8008fb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008fbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fbe:	f000 f8dd 	bl	800917c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fc2:	4b12      	ldr	r3, [pc, #72]	; (800900c <xPortStartScheduler+0x13c>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008fc8:	f000 f8fc 	bl	80091c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008fcc:	4b10      	ldr	r3, [pc, #64]	; (8009010 <xPortStartScheduler+0x140>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a0f      	ldr	r2, [pc, #60]	; (8009010 <xPortStartScheduler+0x140>)
 8008fd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008fd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008fd8:	f7ff ff66 	bl	8008ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008fdc:	f7ff f83c 	bl	8008058 <vTaskSwitchContext>
	prvTaskExitError();
 8008fe0:	f7ff ff22 	bl	8008e28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3718      	adds	r7, #24
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	e000ed00 	.word	0xe000ed00
 8008ff4:	410fc271 	.word	0x410fc271
 8008ff8:	410fc270 	.word	0x410fc270
 8008ffc:	e000e400 	.word	0xe000e400
 8009000:	20001254 	.word	0x20001254
 8009004:	20001258 	.word	0x20001258
 8009008:	e000ed20 	.word	0xe000ed20
 800900c:	2000000c 	.word	0x2000000c
 8009010:	e000ef34 	.word	0xe000ef34

08009014 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
	__asm volatile
 800901a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	607b      	str	r3, [r7, #4]
}
 800902c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800902e:	4b0f      	ldr	r3, [pc, #60]	; (800906c <vPortEnterCritical+0x58>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	3301      	adds	r3, #1
 8009034:	4a0d      	ldr	r2, [pc, #52]	; (800906c <vPortEnterCritical+0x58>)
 8009036:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009038:	4b0c      	ldr	r3, [pc, #48]	; (800906c <vPortEnterCritical+0x58>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d10f      	bne.n	8009060 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009040:	4b0b      	ldr	r3, [pc, #44]	; (8009070 <vPortEnterCritical+0x5c>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00a      	beq.n	8009060 <vPortEnterCritical+0x4c>
	__asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	603b      	str	r3, [r7, #0]
}
 800905c:	bf00      	nop
 800905e:	e7fe      	b.n	800905e <vPortEnterCritical+0x4a>
	}
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	2000000c 	.word	0x2000000c
 8009070:	e000ed04 	.word	0xe000ed04

08009074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800907a:	4b12      	ldr	r3, [pc, #72]	; (80090c4 <vPortExitCritical+0x50>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10a      	bne.n	8009098 <vPortExitCritical+0x24>
	__asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009086:	f383 8811 	msr	BASEPRI, r3
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	607b      	str	r3, [r7, #4]
}
 8009094:	bf00      	nop
 8009096:	e7fe      	b.n	8009096 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009098:	4b0a      	ldr	r3, [pc, #40]	; (80090c4 <vPortExitCritical+0x50>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3b01      	subs	r3, #1
 800909e:	4a09      	ldr	r2, [pc, #36]	; (80090c4 <vPortExitCritical+0x50>)
 80090a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090a2:	4b08      	ldr	r3, [pc, #32]	; (80090c4 <vPortExitCritical+0x50>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d105      	bne.n	80090b6 <vPortExitCritical+0x42>
 80090aa:	2300      	movs	r3, #0
 80090ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	f383 8811 	msr	BASEPRI, r3
}
 80090b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090b6:	bf00      	nop
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	2000000c 	.word	0x2000000c
	...

080090d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090d0:	f3ef 8009 	mrs	r0, PSP
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	4b15      	ldr	r3, [pc, #84]	; (8009130 <pxCurrentTCBConst>)
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	f01e 0f10 	tst.w	lr, #16
 80090e0:	bf08      	it	eq
 80090e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80090e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ea:	6010      	str	r0, [r2, #0]
 80090ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80090f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80090f4:	f380 8811 	msr	BASEPRI, r0
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f7fe ffaa 	bl	8008058 <vTaskSwitchContext>
 8009104:	f04f 0000 	mov.w	r0, #0
 8009108:	f380 8811 	msr	BASEPRI, r0
 800910c:	bc09      	pop	{r0, r3}
 800910e:	6819      	ldr	r1, [r3, #0]
 8009110:	6808      	ldr	r0, [r1, #0]
 8009112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009116:	f01e 0f10 	tst.w	lr, #16
 800911a:	bf08      	it	eq
 800911c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009120:	f380 8809 	msr	PSP, r0
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	f3af 8000 	nop.w

08009130 <pxCurrentTCBConst>:
 8009130:	20000c20 	.word	0x20000c20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009134:	bf00      	nop
 8009136:	bf00      	nop

08009138 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
	__asm volatile
 800913e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	607b      	str	r3, [r7, #4]
}
 8009150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009152:	f7fe fec7 	bl	8007ee4 <xTaskIncrementTick>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d003      	beq.n	8009164 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800915c:	4b06      	ldr	r3, [pc, #24]	; (8009178 <xPortSysTickHandler+0x40>)
 800915e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	2300      	movs	r3, #0
 8009166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	f383 8811 	msr	BASEPRI, r3
}
 800916e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009170:	bf00      	nop
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	e000ed04 	.word	0xe000ed04

0800917c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800917c:	b480      	push	{r7}
 800917e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009180:	4b0b      	ldr	r3, [pc, #44]	; (80091b0 <vPortSetupTimerInterrupt+0x34>)
 8009182:	2200      	movs	r2, #0
 8009184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009186:	4b0b      	ldr	r3, [pc, #44]	; (80091b4 <vPortSetupTimerInterrupt+0x38>)
 8009188:	2200      	movs	r2, #0
 800918a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800918c:	4b0a      	ldr	r3, [pc, #40]	; (80091b8 <vPortSetupTimerInterrupt+0x3c>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a0a      	ldr	r2, [pc, #40]	; (80091bc <vPortSetupTimerInterrupt+0x40>)
 8009192:	fba2 2303 	umull	r2, r3, r2, r3
 8009196:	099b      	lsrs	r3, r3, #6
 8009198:	4a09      	ldr	r2, [pc, #36]	; (80091c0 <vPortSetupTimerInterrupt+0x44>)
 800919a:	3b01      	subs	r3, #1
 800919c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800919e:	4b04      	ldr	r3, [pc, #16]	; (80091b0 <vPortSetupTimerInterrupt+0x34>)
 80091a0:	2207      	movs	r2, #7
 80091a2:	601a      	str	r2, [r3, #0]
}
 80091a4:	bf00      	nop
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	e000e010 	.word	0xe000e010
 80091b4:	e000e018 	.word	0xe000e018
 80091b8:	20000000 	.word	0x20000000
 80091bc:	10624dd3 	.word	0x10624dd3
 80091c0:	e000e014 	.word	0xe000e014

080091c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80091d4 <vPortEnableVFP+0x10>
 80091c8:	6801      	ldr	r1, [r0, #0]
 80091ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091ce:	6001      	str	r1, [r0, #0]
 80091d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80091d2:	bf00      	nop
 80091d4:	e000ed88 	.word	0xe000ed88

080091d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80091de:	f3ef 8305 	mrs	r3, IPSR
 80091e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2b0f      	cmp	r3, #15
 80091e8:	d914      	bls.n	8009214 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80091ea:	4a17      	ldr	r2, [pc, #92]	; (8009248 <vPortValidateInterruptPriority+0x70>)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	4413      	add	r3, r2
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80091f4:	4b15      	ldr	r3, [pc, #84]	; (800924c <vPortValidateInterruptPriority+0x74>)
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	7afa      	ldrb	r2, [r7, #11]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d20a      	bcs.n	8009214 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80091fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	607b      	str	r3, [r7, #4]
}
 8009210:	bf00      	nop
 8009212:	e7fe      	b.n	8009212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009214:	4b0e      	ldr	r3, [pc, #56]	; (8009250 <vPortValidateInterruptPriority+0x78>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800921c:	4b0d      	ldr	r3, [pc, #52]	; (8009254 <vPortValidateInterruptPriority+0x7c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	429a      	cmp	r2, r3
 8009222:	d90a      	bls.n	800923a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	603b      	str	r3, [r7, #0]
}
 8009236:	bf00      	nop
 8009238:	e7fe      	b.n	8009238 <vPortValidateInterruptPriority+0x60>
	}
 800923a:	bf00      	nop
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	e000e3f0 	.word	0xe000e3f0
 800924c:	20001254 	.word	0x20001254
 8009250:	e000ed0c 	.word	0xe000ed0c
 8009254:	20001258 	.word	0x20001258

08009258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b08a      	sub	sp, #40	; 0x28
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009260:	2300      	movs	r3, #0
 8009262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009264:	f7fe fd82 	bl	8007d6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009268:	4b5b      	ldr	r3, [pc, #364]	; (80093d8 <pvPortMalloc+0x180>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009270:	f000 f920 	bl	80094b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009274:	4b59      	ldr	r3, [pc, #356]	; (80093dc <pvPortMalloc+0x184>)
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4013      	ands	r3, r2
 800927c:	2b00      	cmp	r3, #0
 800927e:	f040 8093 	bne.w	80093a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d01d      	beq.n	80092c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009288:	2208      	movs	r2, #8
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4413      	add	r3, r2
 800928e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f003 0307 	and.w	r3, r3, #7
 8009296:	2b00      	cmp	r3, #0
 8009298:	d014      	beq.n	80092c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f023 0307 	bic.w	r3, r3, #7
 80092a0:	3308      	adds	r3, #8
 80092a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f003 0307 	and.w	r3, r3, #7
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00a      	beq.n	80092c4 <pvPortMalloc+0x6c>
	__asm volatile
 80092ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b2:	f383 8811 	msr	BASEPRI, r3
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	617b      	str	r3, [r7, #20]
}
 80092c0:	bf00      	nop
 80092c2:	e7fe      	b.n	80092c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d06e      	beq.n	80093a8 <pvPortMalloc+0x150>
 80092ca:	4b45      	ldr	r3, [pc, #276]	; (80093e0 <pvPortMalloc+0x188>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d869      	bhi.n	80093a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092d4:	4b43      	ldr	r3, [pc, #268]	; (80093e4 <pvPortMalloc+0x18c>)
 80092d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80092d8:	4b42      	ldr	r3, [pc, #264]	; (80093e4 <pvPortMalloc+0x18c>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092de:	e004      	b.n	80092ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80092e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d903      	bls.n	80092fc <pvPortMalloc+0xa4>
 80092f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1f1      	bne.n	80092e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80092fc:	4b36      	ldr	r3, [pc, #216]	; (80093d8 <pvPortMalloc+0x180>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009302:	429a      	cmp	r2, r3
 8009304:	d050      	beq.n	80093a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2208      	movs	r2, #8
 800930c:	4413      	add	r3, r2
 800930e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	6a3b      	ldr	r3, [r7, #32]
 8009316:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	1ad2      	subs	r2, r2, r3
 8009320:	2308      	movs	r3, #8
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	429a      	cmp	r2, r3
 8009326:	d91f      	bls.n	8009368 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4413      	add	r3, r2
 800932e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	f003 0307 	and.w	r3, r3, #7
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00a      	beq.n	8009350 <pvPortMalloc+0xf8>
	__asm volatile
 800933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	613b      	str	r3, [r7, #16]
}
 800934c:	bf00      	nop
 800934e:	e7fe      	b.n	800934e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	1ad2      	subs	r2, r2, r3
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800935c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009362:	69b8      	ldr	r0, [r7, #24]
 8009364:	f000 f908 	bl	8009578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009368:	4b1d      	ldr	r3, [pc, #116]	; (80093e0 <pvPortMalloc+0x188>)
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	4a1b      	ldr	r2, [pc, #108]	; (80093e0 <pvPortMalloc+0x188>)
 8009374:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009376:	4b1a      	ldr	r3, [pc, #104]	; (80093e0 <pvPortMalloc+0x188>)
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	4b1b      	ldr	r3, [pc, #108]	; (80093e8 <pvPortMalloc+0x190>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	429a      	cmp	r2, r3
 8009380:	d203      	bcs.n	800938a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009382:	4b17      	ldr	r3, [pc, #92]	; (80093e0 <pvPortMalloc+0x188>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a18      	ldr	r2, [pc, #96]	; (80093e8 <pvPortMalloc+0x190>)
 8009388:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	4b13      	ldr	r3, [pc, #76]	; (80093dc <pvPortMalloc+0x184>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	431a      	orrs	r2, r3
 8009394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009396:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	2200      	movs	r2, #0
 800939c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800939e:	4b13      	ldr	r3, [pc, #76]	; (80093ec <pvPortMalloc+0x194>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3301      	adds	r3, #1
 80093a4:	4a11      	ldr	r2, [pc, #68]	; (80093ec <pvPortMalloc+0x194>)
 80093a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093a8:	f7fe fcee 	bl	8007d88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	f003 0307 	and.w	r3, r3, #7
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00a      	beq.n	80093cc <pvPortMalloc+0x174>
	__asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	60fb      	str	r3, [r7, #12]
}
 80093c8:	bf00      	nop
 80093ca:	e7fe      	b.n	80093ca <pvPortMalloc+0x172>
	return pvReturn;
 80093cc:	69fb      	ldr	r3, [r7, #28]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3728      	adds	r7, #40	; 0x28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	200025ec 	.word	0x200025ec
 80093dc:	20002600 	.word	0x20002600
 80093e0:	200025f0 	.word	0x200025f0
 80093e4:	200025e4 	.word	0x200025e4
 80093e8:	200025f4 	.word	0x200025f4
 80093ec:	200025f8 	.word	0x200025f8

080093f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d04d      	beq.n	800949e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009402:	2308      	movs	r3, #8
 8009404:	425b      	negs	r3, r3
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	4413      	add	r3, r2
 800940a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	4b24      	ldr	r3, [pc, #144]	; (80094a8 <vPortFree+0xb8>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4013      	ands	r3, r2
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10a      	bne.n	8009434 <vPortFree+0x44>
	__asm volatile
 800941e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	60fb      	str	r3, [r7, #12]
}
 8009430:	bf00      	nop
 8009432:	e7fe      	b.n	8009432 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00a      	beq.n	8009452 <vPortFree+0x62>
	__asm volatile
 800943c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	60bb      	str	r3, [r7, #8]
}
 800944e:	bf00      	nop
 8009450:	e7fe      	b.n	8009450 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	685a      	ldr	r2, [r3, #4]
 8009456:	4b14      	ldr	r3, [pc, #80]	; (80094a8 <vPortFree+0xb8>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4013      	ands	r3, r2
 800945c:	2b00      	cmp	r3, #0
 800945e:	d01e      	beq.n	800949e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d11a      	bne.n	800949e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	685a      	ldr	r2, [r3, #4]
 800946c:	4b0e      	ldr	r3, [pc, #56]	; (80094a8 <vPortFree+0xb8>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	43db      	mvns	r3, r3
 8009472:	401a      	ands	r2, r3
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009478:	f7fe fc78 	bl	8007d6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	685a      	ldr	r2, [r3, #4]
 8009480:	4b0a      	ldr	r3, [pc, #40]	; (80094ac <vPortFree+0xbc>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4413      	add	r3, r2
 8009486:	4a09      	ldr	r2, [pc, #36]	; (80094ac <vPortFree+0xbc>)
 8009488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800948a:	6938      	ldr	r0, [r7, #16]
 800948c:	f000 f874 	bl	8009578 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009490:	4b07      	ldr	r3, [pc, #28]	; (80094b0 <vPortFree+0xc0>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	3301      	adds	r3, #1
 8009496:	4a06      	ldr	r2, [pc, #24]	; (80094b0 <vPortFree+0xc0>)
 8009498:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800949a:	f7fe fc75 	bl	8007d88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800949e:	bf00      	nop
 80094a0:	3718      	adds	r7, #24
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	20002600 	.word	0x20002600
 80094ac:	200025f0 	.word	0x200025f0
 80094b0:	200025fc 	.word	0x200025fc

080094b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80094be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094c0:	4b27      	ldr	r3, [pc, #156]	; (8009560 <prvHeapInit+0xac>)
 80094c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f003 0307 	and.w	r3, r3, #7
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00c      	beq.n	80094e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	3307      	adds	r3, #7
 80094d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f023 0307 	bic.w	r3, r3, #7
 80094da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	1ad3      	subs	r3, r2, r3
 80094e2:	4a1f      	ldr	r2, [pc, #124]	; (8009560 <prvHeapInit+0xac>)
 80094e4:	4413      	add	r3, r2
 80094e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094ec:	4a1d      	ldr	r2, [pc, #116]	; (8009564 <prvHeapInit+0xb0>)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094f2:	4b1c      	ldr	r3, [pc, #112]	; (8009564 <prvHeapInit+0xb0>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	4413      	add	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009500:	2208      	movs	r2, #8
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	1a9b      	subs	r3, r3, r2
 8009506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f023 0307 	bic.w	r3, r3, #7
 800950e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	4a15      	ldr	r2, [pc, #84]	; (8009568 <prvHeapInit+0xb4>)
 8009514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009516:	4b14      	ldr	r3, [pc, #80]	; (8009568 <prvHeapInit+0xb4>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2200      	movs	r2, #0
 800951c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800951e:	4b12      	ldr	r3, [pc, #72]	; (8009568 <prvHeapInit+0xb4>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2200      	movs	r2, #0
 8009524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	1ad2      	subs	r2, r2, r3
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009534:	4b0c      	ldr	r3, [pc, #48]	; (8009568 <prvHeapInit+0xb4>)
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	4a0a      	ldr	r2, [pc, #40]	; (800956c <prvHeapInit+0xb8>)
 8009542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	4a09      	ldr	r2, [pc, #36]	; (8009570 <prvHeapInit+0xbc>)
 800954a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800954c:	4b09      	ldr	r3, [pc, #36]	; (8009574 <prvHeapInit+0xc0>)
 800954e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009552:	601a      	str	r2, [r3, #0]
}
 8009554:	bf00      	nop
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr
 8009560:	2000125c 	.word	0x2000125c
 8009564:	200025e4 	.word	0x200025e4
 8009568:	200025ec 	.word	0x200025ec
 800956c:	200025f4 	.word	0x200025f4
 8009570:	200025f0 	.word	0x200025f0
 8009574:	20002600 	.word	0x20002600

08009578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009578:	b480      	push	{r7}
 800957a:	b085      	sub	sp, #20
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009580:	4b28      	ldr	r3, [pc, #160]	; (8009624 <prvInsertBlockIntoFreeList+0xac>)
 8009582:	60fb      	str	r3, [r7, #12]
 8009584:	e002      	b.n	800958c <prvInsertBlockIntoFreeList+0x14>
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	60fb      	str	r3, [r7, #12]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	429a      	cmp	r2, r3
 8009594:	d8f7      	bhi.n	8009586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	4413      	add	r3, r2
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d108      	bne.n	80095ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	441a      	add	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	441a      	add	r2, r3
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d118      	bne.n	8009600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	4b15      	ldr	r3, [pc, #84]	; (8009628 <prvInsertBlockIntoFreeList+0xb0>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d00d      	beq.n	80095f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	441a      	add	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	601a      	str	r2, [r3, #0]
 80095f4:	e008      	b.n	8009608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095f6:	4b0c      	ldr	r3, [pc, #48]	; (8009628 <prvInsertBlockIntoFreeList+0xb0>)
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	601a      	str	r2, [r3, #0]
 80095fe:	e003      	b.n	8009608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	429a      	cmp	r2, r3
 800960e:	d002      	beq.n	8009616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009616:	bf00      	nop
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	200025e4 	.word	0x200025e4
 8009628:	200025ec 	.word	0x200025ec

0800962c <__assert_func>:
 800962c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800962e:	4614      	mov	r4, r2
 8009630:	461a      	mov	r2, r3
 8009632:	4b09      	ldr	r3, [pc, #36]	; (8009658 <__assert_func+0x2c>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4605      	mov	r5, r0
 8009638:	68d8      	ldr	r0, [r3, #12]
 800963a:	b14c      	cbz	r4, 8009650 <__assert_func+0x24>
 800963c:	4b07      	ldr	r3, [pc, #28]	; (800965c <__assert_func+0x30>)
 800963e:	9100      	str	r1, [sp, #0]
 8009640:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009644:	4906      	ldr	r1, [pc, #24]	; (8009660 <__assert_func+0x34>)
 8009646:	462b      	mov	r3, r5
 8009648:	f000 fd18 	bl	800a07c <fiprintf>
 800964c:	f000 ff19 	bl	800a482 <abort>
 8009650:	4b04      	ldr	r3, [pc, #16]	; (8009664 <__assert_func+0x38>)
 8009652:	461c      	mov	r4, r3
 8009654:	e7f3      	b.n	800963e <__assert_func+0x12>
 8009656:	bf00      	nop
 8009658:	20000068 	.word	0x20000068
 800965c:	0800c37c 	.word	0x0800c37c
 8009660:	0800c389 	.word	0x0800c389
 8009664:	0800c3b7 	.word	0x0800c3b7

08009668 <__cvt>:
 8009668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800966c:	ec55 4b10 	vmov	r4, r5, d0
 8009670:	2d00      	cmp	r5, #0
 8009672:	460e      	mov	r6, r1
 8009674:	4619      	mov	r1, r3
 8009676:	462b      	mov	r3, r5
 8009678:	bfbb      	ittet	lt
 800967a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800967e:	461d      	movlt	r5, r3
 8009680:	2300      	movge	r3, #0
 8009682:	232d      	movlt	r3, #45	; 0x2d
 8009684:	700b      	strb	r3, [r1, #0]
 8009686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009688:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800968c:	4691      	mov	r9, r2
 800968e:	f023 0820 	bic.w	r8, r3, #32
 8009692:	bfbc      	itt	lt
 8009694:	4622      	movlt	r2, r4
 8009696:	4614      	movlt	r4, r2
 8009698:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800969c:	d005      	beq.n	80096aa <__cvt+0x42>
 800969e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80096a2:	d100      	bne.n	80096a6 <__cvt+0x3e>
 80096a4:	3601      	adds	r6, #1
 80096a6:	2102      	movs	r1, #2
 80096a8:	e000      	b.n	80096ac <__cvt+0x44>
 80096aa:	2103      	movs	r1, #3
 80096ac:	ab03      	add	r3, sp, #12
 80096ae:	9301      	str	r3, [sp, #4]
 80096b0:	ab02      	add	r3, sp, #8
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	ec45 4b10 	vmov	d0, r4, r5
 80096b8:	4653      	mov	r3, sl
 80096ba:	4632      	mov	r2, r6
 80096bc:	f000 ff70 	bl	800a5a0 <_dtoa_r>
 80096c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80096c4:	4607      	mov	r7, r0
 80096c6:	d102      	bne.n	80096ce <__cvt+0x66>
 80096c8:	f019 0f01 	tst.w	r9, #1
 80096cc:	d022      	beq.n	8009714 <__cvt+0xac>
 80096ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096d2:	eb07 0906 	add.w	r9, r7, r6
 80096d6:	d110      	bne.n	80096fa <__cvt+0x92>
 80096d8:	783b      	ldrb	r3, [r7, #0]
 80096da:	2b30      	cmp	r3, #48	; 0x30
 80096dc:	d10a      	bne.n	80096f4 <__cvt+0x8c>
 80096de:	2200      	movs	r2, #0
 80096e0:	2300      	movs	r3, #0
 80096e2:	4620      	mov	r0, r4
 80096e4:	4629      	mov	r1, r5
 80096e6:	f7f7 f9ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80096ea:	b918      	cbnz	r0, 80096f4 <__cvt+0x8c>
 80096ec:	f1c6 0601 	rsb	r6, r6, #1
 80096f0:	f8ca 6000 	str.w	r6, [sl]
 80096f4:	f8da 3000 	ldr.w	r3, [sl]
 80096f8:	4499      	add	r9, r3
 80096fa:	2200      	movs	r2, #0
 80096fc:	2300      	movs	r3, #0
 80096fe:	4620      	mov	r0, r4
 8009700:	4629      	mov	r1, r5
 8009702:	f7f7 f9e1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009706:	b108      	cbz	r0, 800970c <__cvt+0xa4>
 8009708:	f8cd 900c 	str.w	r9, [sp, #12]
 800970c:	2230      	movs	r2, #48	; 0x30
 800970e:	9b03      	ldr	r3, [sp, #12]
 8009710:	454b      	cmp	r3, r9
 8009712:	d307      	bcc.n	8009724 <__cvt+0xbc>
 8009714:	9b03      	ldr	r3, [sp, #12]
 8009716:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009718:	1bdb      	subs	r3, r3, r7
 800971a:	4638      	mov	r0, r7
 800971c:	6013      	str	r3, [r2, #0]
 800971e:	b004      	add	sp, #16
 8009720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009724:	1c59      	adds	r1, r3, #1
 8009726:	9103      	str	r1, [sp, #12]
 8009728:	701a      	strb	r2, [r3, #0]
 800972a:	e7f0      	b.n	800970e <__cvt+0xa6>

0800972c <__exponent>:
 800972c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800972e:	4603      	mov	r3, r0
 8009730:	2900      	cmp	r1, #0
 8009732:	bfb8      	it	lt
 8009734:	4249      	neglt	r1, r1
 8009736:	f803 2b02 	strb.w	r2, [r3], #2
 800973a:	bfb4      	ite	lt
 800973c:	222d      	movlt	r2, #45	; 0x2d
 800973e:	222b      	movge	r2, #43	; 0x2b
 8009740:	2909      	cmp	r1, #9
 8009742:	7042      	strb	r2, [r0, #1]
 8009744:	dd2a      	ble.n	800979c <__exponent+0x70>
 8009746:	f10d 0207 	add.w	r2, sp, #7
 800974a:	4617      	mov	r7, r2
 800974c:	260a      	movs	r6, #10
 800974e:	4694      	mov	ip, r2
 8009750:	fb91 f5f6 	sdiv	r5, r1, r6
 8009754:	fb06 1415 	mls	r4, r6, r5, r1
 8009758:	3430      	adds	r4, #48	; 0x30
 800975a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800975e:	460c      	mov	r4, r1
 8009760:	2c63      	cmp	r4, #99	; 0x63
 8009762:	f102 32ff 	add.w	r2, r2, #4294967295
 8009766:	4629      	mov	r1, r5
 8009768:	dcf1      	bgt.n	800974e <__exponent+0x22>
 800976a:	3130      	adds	r1, #48	; 0x30
 800976c:	f1ac 0402 	sub.w	r4, ip, #2
 8009770:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009774:	1c41      	adds	r1, r0, #1
 8009776:	4622      	mov	r2, r4
 8009778:	42ba      	cmp	r2, r7
 800977a:	d30a      	bcc.n	8009792 <__exponent+0x66>
 800977c:	f10d 0209 	add.w	r2, sp, #9
 8009780:	eba2 020c 	sub.w	r2, r2, ip
 8009784:	42bc      	cmp	r4, r7
 8009786:	bf88      	it	hi
 8009788:	2200      	movhi	r2, #0
 800978a:	4413      	add	r3, r2
 800978c:	1a18      	subs	r0, r3, r0
 800978e:	b003      	add	sp, #12
 8009790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009792:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009796:	f801 5f01 	strb.w	r5, [r1, #1]!
 800979a:	e7ed      	b.n	8009778 <__exponent+0x4c>
 800979c:	2330      	movs	r3, #48	; 0x30
 800979e:	3130      	adds	r1, #48	; 0x30
 80097a0:	7083      	strb	r3, [r0, #2]
 80097a2:	70c1      	strb	r1, [r0, #3]
 80097a4:	1d03      	adds	r3, r0, #4
 80097a6:	e7f1      	b.n	800978c <__exponent+0x60>

080097a8 <_printf_float>:
 80097a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ac:	ed2d 8b02 	vpush	{d8}
 80097b0:	b08d      	sub	sp, #52	; 0x34
 80097b2:	460c      	mov	r4, r1
 80097b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80097b8:	4616      	mov	r6, r2
 80097ba:	461f      	mov	r7, r3
 80097bc:	4605      	mov	r5, r0
 80097be:	f000 fddb 	bl	800a378 <_localeconv_r>
 80097c2:	f8d0 a000 	ldr.w	sl, [r0]
 80097c6:	4650      	mov	r0, sl
 80097c8:	f7f6 fd52 	bl	8000270 <strlen>
 80097cc:	2300      	movs	r3, #0
 80097ce:	930a      	str	r3, [sp, #40]	; 0x28
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	9305      	str	r3, [sp, #20]
 80097d4:	f8d8 3000 	ldr.w	r3, [r8]
 80097d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80097dc:	3307      	adds	r3, #7
 80097de:	f023 0307 	bic.w	r3, r3, #7
 80097e2:	f103 0208 	add.w	r2, r3, #8
 80097e6:	f8c8 2000 	str.w	r2, [r8]
 80097ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80097ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80097f2:	9307      	str	r3, [sp, #28]
 80097f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80097f8:	ee08 0a10 	vmov	s16, r0
 80097fc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009800:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009804:	4b9e      	ldr	r3, [pc, #632]	; (8009a80 <_printf_float+0x2d8>)
 8009806:	f04f 32ff 	mov.w	r2, #4294967295
 800980a:	f7f7 f98f 	bl	8000b2c <__aeabi_dcmpun>
 800980e:	bb88      	cbnz	r0, 8009874 <_printf_float+0xcc>
 8009810:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009814:	4b9a      	ldr	r3, [pc, #616]	; (8009a80 <_printf_float+0x2d8>)
 8009816:	f04f 32ff 	mov.w	r2, #4294967295
 800981a:	f7f7 f969 	bl	8000af0 <__aeabi_dcmple>
 800981e:	bb48      	cbnz	r0, 8009874 <_printf_float+0xcc>
 8009820:	2200      	movs	r2, #0
 8009822:	2300      	movs	r3, #0
 8009824:	4640      	mov	r0, r8
 8009826:	4649      	mov	r1, r9
 8009828:	f7f7 f958 	bl	8000adc <__aeabi_dcmplt>
 800982c:	b110      	cbz	r0, 8009834 <_printf_float+0x8c>
 800982e:	232d      	movs	r3, #45	; 0x2d
 8009830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009834:	4a93      	ldr	r2, [pc, #588]	; (8009a84 <_printf_float+0x2dc>)
 8009836:	4b94      	ldr	r3, [pc, #592]	; (8009a88 <_printf_float+0x2e0>)
 8009838:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800983c:	bf94      	ite	ls
 800983e:	4690      	movls	r8, r2
 8009840:	4698      	movhi	r8, r3
 8009842:	2303      	movs	r3, #3
 8009844:	6123      	str	r3, [r4, #16]
 8009846:	9b05      	ldr	r3, [sp, #20]
 8009848:	f023 0304 	bic.w	r3, r3, #4
 800984c:	6023      	str	r3, [r4, #0]
 800984e:	f04f 0900 	mov.w	r9, #0
 8009852:	9700      	str	r7, [sp, #0]
 8009854:	4633      	mov	r3, r6
 8009856:	aa0b      	add	r2, sp, #44	; 0x2c
 8009858:	4621      	mov	r1, r4
 800985a:	4628      	mov	r0, r5
 800985c:	f000 f9da 	bl	8009c14 <_printf_common>
 8009860:	3001      	adds	r0, #1
 8009862:	f040 8090 	bne.w	8009986 <_printf_float+0x1de>
 8009866:	f04f 30ff 	mov.w	r0, #4294967295
 800986a:	b00d      	add	sp, #52	; 0x34
 800986c:	ecbd 8b02 	vpop	{d8}
 8009870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009874:	4642      	mov	r2, r8
 8009876:	464b      	mov	r3, r9
 8009878:	4640      	mov	r0, r8
 800987a:	4649      	mov	r1, r9
 800987c:	f7f7 f956 	bl	8000b2c <__aeabi_dcmpun>
 8009880:	b140      	cbz	r0, 8009894 <_printf_float+0xec>
 8009882:	464b      	mov	r3, r9
 8009884:	2b00      	cmp	r3, #0
 8009886:	bfbc      	itt	lt
 8009888:	232d      	movlt	r3, #45	; 0x2d
 800988a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800988e:	4a7f      	ldr	r2, [pc, #508]	; (8009a8c <_printf_float+0x2e4>)
 8009890:	4b7f      	ldr	r3, [pc, #508]	; (8009a90 <_printf_float+0x2e8>)
 8009892:	e7d1      	b.n	8009838 <_printf_float+0x90>
 8009894:	6863      	ldr	r3, [r4, #4]
 8009896:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800989a:	9206      	str	r2, [sp, #24]
 800989c:	1c5a      	adds	r2, r3, #1
 800989e:	d13f      	bne.n	8009920 <_printf_float+0x178>
 80098a0:	2306      	movs	r3, #6
 80098a2:	6063      	str	r3, [r4, #4]
 80098a4:	9b05      	ldr	r3, [sp, #20]
 80098a6:	6861      	ldr	r1, [r4, #4]
 80098a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80098ac:	2300      	movs	r3, #0
 80098ae:	9303      	str	r3, [sp, #12]
 80098b0:	ab0a      	add	r3, sp, #40	; 0x28
 80098b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80098b6:	ab09      	add	r3, sp, #36	; 0x24
 80098b8:	ec49 8b10 	vmov	d0, r8, r9
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	6022      	str	r2, [r4, #0]
 80098c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80098c4:	4628      	mov	r0, r5
 80098c6:	f7ff fecf 	bl	8009668 <__cvt>
 80098ca:	9b06      	ldr	r3, [sp, #24]
 80098cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098ce:	2b47      	cmp	r3, #71	; 0x47
 80098d0:	4680      	mov	r8, r0
 80098d2:	d108      	bne.n	80098e6 <_printf_float+0x13e>
 80098d4:	1cc8      	adds	r0, r1, #3
 80098d6:	db02      	blt.n	80098de <_printf_float+0x136>
 80098d8:	6863      	ldr	r3, [r4, #4]
 80098da:	4299      	cmp	r1, r3
 80098dc:	dd41      	ble.n	8009962 <_printf_float+0x1ba>
 80098de:	f1ab 0302 	sub.w	r3, fp, #2
 80098e2:	fa5f fb83 	uxtb.w	fp, r3
 80098e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098ea:	d820      	bhi.n	800992e <_printf_float+0x186>
 80098ec:	3901      	subs	r1, #1
 80098ee:	465a      	mov	r2, fp
 80098f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80098f4:	9109      	str	r1, [sp, #36]	; 0x24
 80098f6:	f7ff ff19 	bl	800972c <__exponent>
 80098fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098fc:	1813      	adds	r3, r2, r0
 80098fe:	2a01      	cmp	r2, #1
 8009900:	4681      	mov	r9, r0
 8009902:	6123      	str	r3, [r4, #16]
 8009904:	dc02      	bgt.n	800990c <_printf_float+0x164>
 8009906:	6822      	ldr	r2, [r4, #0]
 8009908:	07d2      	lsls	r2, r2, #31
 800990a:	d501      	bpl.n	8009910 <_printf_float+0x168>
 800990c:	3301      	adds	r3, #1
 800990e:	6123      	str	r3, [r4, #16]
 8009910:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009914:	2b00      	cmp	r3, #0
 8009916:	d09c      	beq.n	8009852 <_printf_float+0xaa>
 8009918:	232d      	movs	r3, #45	; 0x2d
 800991a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800991e:	e798      	b.n	8009852 <_printf_float+0xaa>
 8009920:	9a06      	ldr	r2, [sp, #24]
 8009922:	2a47      	cmp	r2, #71	; 0x47
 8009924:	d1be      	bne.n	80098a4 <_printf_float+0xfc>
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1bc      	bne.n	80098a4 <_printf_float+0xfc>
 800992a:	2301      	movs	r3, #1
 800992c:	e7b9      	b.n	80098a2 <_printf_float+0xfa>
 800992e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009932:	d118      	bne.n	8009966 <_printf_float+0x1be>
 8009934:	2900      	cmp	r1, #0
 8009936:	6863      	ldr	r3, [r4, #4]
 8009938:	dd0b      	ble.n	8009952 <_printf_float+0x1aa>
 800993a:	6121      	str	r1, [r4, #16]
 800993c:	b913      	cbnz	r3, 8009944 <_printf_float+0x19c>
 800993e:	6822      	ldr	r2, [r4, #0]
 8009940:	07d0      	lsls	r0, r2, #31
 8009942:	d502      	bpl.n	800994a <_printf_float+0x1a2>
 8009944:	3301      	adds	r3, #1
 8009946:	440b      	add	r3, r1
 8009948:	6123      	str	r3, [r4, #16]
 800994a:	65a1      	str	r1, [r4, #88]	; 0x58
 800994c:	f04f 0900 	mov.w	r9, #0
 8009950:	e7de      	b.n	8009910 <_printf_float+0x168>
 8009952:	b913      	cbnz	r3, 800995a <_printf_float+0x1b2>
 8009954:	6822      	ldr	r2, [r4, #0]
 8009956:	07d2      	lsls	r2, r2, #31
 8009958:	d501      	bpl.n	800995e <_printf_float+0x1b6>
 800995a:	3302      	adds	r3, #2
 800995c:	e7f4      	b.n	8009948 <_printf_float+0x1a0>
 800995e:	2301      	movs	r3, #1
 8009960:	e7f2      	b.n	8009948 <_printf_float+0x1a0>
 8009962:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009968:	4299      	cmp	r1, r3
 800996a:	db05      	blt.n	8009978 <_printf_float+0x1d0>
 800996c:	6823      	ldr	r3, [r4, #0]
 800996e:	6121      	str	r1, [r4, #16]
 8009970:	07d8      	lsls	r0, r3, #31
 8009972:	d5ea      	bpl.n	800994a <_printf_float+0x1a2>
 8009974:	1c4b      	adds	r3, r1, #1
 8009976:	e7e7      	b.n	8009948 <_printf_float+0x1a0>
 8009978:	2900      	cmp	r1, #0
 800997a:	bfd4      	ite	le
 800997c:	f1c1 0202 	rsble	r2, r1, #2
 8009980:	2201      	movgt	r2, #1
 8009982:	4413      	add	r3, r2
 8009984:	e7e0      	b.n	8009948 <_printf_float+0x1a0>
 8009986:	6823      	ldr	r3, [r4, #0]
 8009988:	055a      	lsls	r2, r3, #21
 800998a:	d407      	bmi.n	800999c <_printf_float+0x1f4>
 800998c:	6923      	ldr	r3, [r4, #16]
 800998e:	4642      	mov	r2, r8
 8009990:	4631      	mov	r1, r6
 8009992:	4628      	mov	r0, r5
 8009994:	47b8      	blx	r7
 8009996:	3001      	adds	r0, #1
 8009998:	d12c      	bne.n	80099f4 <_printf_float+0x24c>
 800999a:	e764      	b.n	8009866 <_printf_float+0xbe>
 800999c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80099a0:	f240 80e0 	bls.w	8009b64 <_printf_float+0x3bc>
 80099a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099a8:	2200      	movs	r2, #0
 80099aa:	2300      	movs	r3, #0
 80099ac:	f7f7 f88c 	bl	8000ac8 <__aeabi_dcmpeq>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d034      	beq.n	8009a1e <_printf_float+0x276>
 80099b4:	4a37      	ldr	r2, [pc, #220]	; (8009a94 <_printf_float+0x2ec>)
 80099b6:	2301      	movs	r3, #1
 80099b8:	4631      	mov	r1, r6
 80099ba:	4628      	mov	r0, r5
 80099bc:	47b8      	blx	r7
 80099be:	3001      	adds	r0, #1
 80099c0:	f43f af51 	beq.w	8009866 <_printf_float+0xbe>
 80099c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099c8:	429a      	cmp	r2, r3
 80099ca:	db02      	blt.n	80099d2 <_printf_float+0x22a>
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	07d8      	lsls	r0, r3, #31
 80099d0:	d510      	bpl.n	80099f4 <_printf_float+0x24c>
 80099d2:	ee18 3a10 	vmov	r3, s16
 80099d6:	4652      	mov	r2, sl
 80099d8:	4631      	mov	r1, r6
 80099da:	4628      	mov	r0, r5
 80099dc:	47b8      	blx	r7
 80099de:	3001      	adds	r0, #1
 80099e0:	f43f af41 	beq.w	8009866 <_printf_float+0xbe>
 80099e4:	f04f 0800 	mov.w	r8, #0
 80099e8:	f104 091a 	add.w	r9, r4, #26
 80099ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ee:	3b01      	subs	r3, #1
 80099f0:	4543      	cmp	r3, r8
 80099f2:	dc09      	bgt.n	8009a08 <_printf_float+0x260>
 80099f4:	6823      	ldr	r3, [r4, #0]
 80099f6:	079b      	lsls	r3, r3, #30
 80099f8:	f100 8107 	bmi.w	8009c0a <_printf_float+0x462>
 80099fc:	68e0      	ldr	r0, [r4, #12]
 80099fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a00:	4298      	cmp	r0, r3
 8009a02:	bfb8      	it	lt
 8009a04:	4618      	movlt	r0, r3
 8009a06:	e730      	b.n	800986a <_printf_float+0xc2>
 8009a08:	2301      	movs	r3, #1
 8009a0a:	464a      	mov	r2, r9
 8009a0c:	4631      	mov	r1, r6
 8009a0e:	4628      	mov	r0, r5
 8009a10:	47b8      	blx	r7
 8009a12:	3001      	adds	r0, #1
 8009a14:	f43f af27 	beq.w	8009866 <_printf_float+0xbe>
 8009a18:	f108 0801 	add.w	r8, r8, #1
 8009a1c:	e7e6      	b.n	80099ec <_printf_float+0x244>
 8009a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	dc39      	bgt.n	8009a98 <_printf_float+0x2f0>
 8009a24:	4a1b      	ldr	r2, [pc, #108]	; (8009a94 <_printf_float+0x2ec>)
 8009a26:	2301      	movs	r3, #1
 8009a28:	4631      	mov	r1, r6
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	47b8      	blx	r7
 8009a2e:	3001      	adds	r0, #1
 8009a30:	f43f af19 	beq.w	8009866 <_printf_float+0xbe>
 8009a34:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	d102      	bne.n	8009a42 <_printf_float+0x29a>
 8009a3c:	6823      	ldr	r3, [r4, #0]
 8009a3e:	07d9      	lsls	r1, r3, #31
 8009a40:	d5d8      	bpl.n	80099f4 <_printf_float+0x24c>
 8009a42:	ee18 3a10 	vmov	r3, s16
 8009a46:	4652      	mov	r2, sl
 8009a48:	4631      	mov	r1, r6
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	47b8      	blx	r7
 8009a4e:	3001      	adds	r0, #1
 8009a50:	f43f af09 	beq.w	8009866 <_printf_float+0xbe>
 8009a54:	f04f 0900 	mov.w	r9, #0
 8009a58:	f104 0a1a 	add.w	sl, r4, #26
 8009a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a5e:	425b      	negs	r3, r3
 8009a60:	454b      	cmp	r3, r9
 8009a62:	dc01      	bgt.n	8009a68 <_printf_float+0x2c0>
 8009a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a66:	e792      	b.n	800998e <_printf_float+0x1e6>
 8009a68:	2301      	movs	r3, #1
 8009a6a:	4652      	mov	r2, sl
 8009a6c:	4631      	mov	r1, r6
 8009a6e:	4628      	mov	r0, r5
 8009a70:	47b8      	blx	r7
 8009a72:	3001      	adds	r0, #1
 8009a74:	f43f aef7 	beq.w	8009866 <_printf_float+0xbe>
 8009a78:	f109 0901 	add.w	r9, r9, #1
 8009a7c:	e7ee      	b.n	8009a5c <_printf_float+0x2b4>
 8009a7e:	bf00      	nop
 8009a80:	7fefffff 	.word	0x7fefffff
 8009a84:	0800c3b8 	.word	0x0800c3b8
 8009a88:	0800c3bc 	.word	0x0800c3bc
 8009a8c:	0800c3c0 	.word	0x0800c3c0
 8009a90:	0800c3c4 	.word	0x0800c3c4
 8009a94:	0800c3c8 	.word	0x0800c3c8
 8009a98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	bfa8      	it	ge
 8009aa0:	461a      	movge	r2, r3
 8009aa2:	2a00      	cmp	r2, #0
 8009aa4:	4691      	mov	r9, r2
 8009aa6:	dc37      	bgt.n	8009b18 <_printf_float+0x370>
 8009aa8:	f04f 0b00 	mov.w	fp, #0
 8009aac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ab0:	f104 021a 	add.w	r2, r4, #26
 8009ab4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ab6:	9305      	str	r3, [sp, #20]
 8009ab8:	eba3 0309 	sub.w	r3, r3, r9
 8009abc:	455b      	cmp	r3, fp
 8009abe:	dc33      	bgt.n	8009b28 <_printf_float+0x380>
 8009ac0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	db3b      	blt.n	8009b40 <_printf_float+0x398>
 8009ac8:	6823      	ldr	r3, [r4, #0]
 8009aca:	07da      	lsls	r2, r3, #31
 8009acc:	d438      	bmi.n	8009b40 <_printf_float+0x398>
 8009ace:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009ad2:	eba2 0903 	sub.w	r9, r2, r3
 8009ad6:	9b05      	ldr	r3, [sp, #20]
 8009ad8:	1ad2      	subs	r2, r2, r3
 8009ada:	4591      	cmp	r9, r2
 8009adc:	bfa8      	it	ge
 8009ade:	4691      	movge	r9, r2
 8009ae0:	f1b9 0f00 	cmp.w	r9, #0
 8009ae4:	dc35      	bgt.n	8009b52 <_printf_float+0x3aa>
 8009ae6:	f04f 0800 	mov.w	r8, #0
 8009aea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009aee:	f104 0a1a 	add.w	sl, r4, #26
 8009af2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009af6:	1a9b      	subs	r3, r3, r2
 8009af8:	eba3 0309 	sub.w	r3, r3, r9
 8009afc:	4543      	cmp	r3, r8
 8009afe:	f77f af79 	ble.w	80099f4 <_printf_float+0x24c>
 8009b02:	2301      	movs	r3, #1
 8009b04:	4652      	mov	r2, sl
 8009b06:	4631      	mov	r1, r6
 8009b08:	4628      	mov	r0, r5
 8009b0a:	47b8      	blx	r7
 8009b0c:	3001      	adds	r0, #1
 8009b0e:	f43f aeaa 	beq.w	8009866 <_printf_float+0xbe>
 8009b12:	f108 0801 	add.w	r8, r8, #1
 8009b16:	e7ec      	b.n	8009af2 <_printf_float+0x34a>
 8009b18:	4613      	mov	r3, r2
 8009b1a:	4631      	mov	r1, r6
 8009b1c:	4642      	mov	r2, r8
 8009b1e:	4628      	mov	r0, r5
 8009b20:	47b8      	blx	r7
 8009b22:	3001      	adds	r0, #1
 8009b24:	d1c0      	bne.n	8009aa8 <_printf_float+0x300>
 8009b26:	e69e      	b.n	8009866 <_printf_float+0xbe>
 8009b28:	2301      	movs	r3, #1
 8009b2a:	4631      	mov	r1, r6
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	9205      	str	r2, [sp, #20]
 8009b30:	47b8      	blx	r7
 8009b32:	3001      	adds	r0, #1
 8009b34:	f43f ae97 	beq.w	8009866 <_printf_float+0xbe>
 8009b38:	9a05      	ldr	r2, [sp, #20]
 8009b3a:	f10b 0b01 	add.w	fp, fp, #1
 8009b3e:	e7b9      	b.n	8009ab4 <_printf_float+0x30c>
 8009b40:	ee18 3a10 	vmov	r3, s16
 8009b44:	4652      	mov	r2, sl
 8009b46:	4631      	mov	r1, r6
 8009b48:	4628      	mov	r0, r5
 8009b4a:	47b8      	blx	r7
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	d1be      	bne.n	8009ace <_printf_float+0x326>
 8009b50:	e689      	b.n	8009866 <_printf_float+0xbe>
 8009b52:	9a05      	ldr	r2, [sp, #20]
 8009b54:	464b      	mov	r3, r9
 8009b56:	4442      	add	r2, r8
 8009b58:	4631      	mov	r1, r6
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	47b8      	blx	r7
 8009b5e:	3001      	adds	r0, #1
 8009b60:	d1c1      	bne.n	8009ae6 <_printf_float+0x33e>
 8009b62:	e680      	b.n	8009866 <_printf_float+0xbe>
 8009b64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b66:	2a01      	cmp	r2, #1
 8009b68:	dc01      	bgt.n	8009b6e <_printf_float+0x3c6>
 8009b6a:	07db      	lsls	r3, r3, #31
 8009b6c:	d53a      	bpl.n	8009be4 <_printf_float+0x43c>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	4642      	mov	r2, r8
 8009b72:	4631      	mov	r1, r6
 8009b74:	4628      	mov	r0, r5
 8009b76:	47b8      	blx	r7
 8009b78:	3001      	adds	r0, #1
 8009b7a:	f43f ae74 	beq.w	8009866 <_printf_float+0xbe>
 8009b7e:	ee18 3a10 	vmov	r3, s16
 8009b82:	4652      	mov	r2, sl
 8009b84:	4631      	mov	r1, r6
 8009b86:	4628      	mov	r0, r5
 8009b88:	47b8      	blx	r7
 8009b8a:	3001      	adds	r0, #1
 8009b8c:	f43f ae6b 	beq.w	8009866 <_printf_float+0xbe>
 8009b90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b94:	2200      	movs	r2, #0
 8009b96:	2300      	movs	r3, #0
 8009b98:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009b9c:	f7f6 ff94 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ba0:	b9d8      	cbnz	r0, 8009bda <_printf_float+0x432>
 8009ba2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009ba6:	f108 0201 	add.w	r2, r8, #1
 8009baa:	4631      	mov	r1, r6
 8009bac:	4628      	mov	r0, r5
 8009bae:	47b8      	blx	r7
 8009bb0:	3001      	adds	r0, #1
 8009bb2:	d10e      	bne.n	8009bd2 <_printf_float+0x42a>
 8009bb4:	e657      	b.n	8009866 <_printf_float+0xbe>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	4652      	mov	r2, sl
 8009bba:	4631      	mov	r1, r6
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	47b8      	blx	r7
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	f43f ae50 	beq.w	8009866 <_printf_float+0xbe>
 8009bc6:	f108 0801 	add.w	r8, r8, #1
 8009bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	4543      	cmp	r3, r8
 8009bd0:	dcf1      	bgt.n	8009bb6 <_printf_float+0x40e>
 8009bd2:	464b      	mov	r3, r9
 8009bd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009bd8:	e6da      	b.n	8009990 <_printf_float+0x1e8>
 8009bda:	f04f 0800 	mov.w	r8, #0
 8009bde:	f104 0a1a 	add.w	sl, r4, #26
 8009be2:	e7f2      	b.n	8009bca <_printf_float+0x422>
 8009be4:	2301      	movs	r3, #1
 8009be6:	4642      	mov	r2, r8
 8009be8:	e7df      	b.n	8009baa <_printf_float+0x402>
 8009bea:	2301      	movs	r3, #1
 8009bec:	464a      	mov	r2, r9
 8009bee:	4631      	mov	r1, r6
 8009bf0:	4628      	mov	r0, r5
 8009bf2:	47b8      	blx	r7
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	f43f ae36 	beq.w	8009866 <_printf_float+0xbe>
 8009bfa:	f108 0801 	add.w	r8, r8, #1
 8009bfe:	68e3      	ldr	r3, [r4, #12]
 8009c00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c02:	1a5b      	subs	r3, r3, r1
 8009c04:	4543      	cmp	r3, r8
 8009c06:	dcf0      	bgt.n	8009bea <_printf_float+0x442>
 8009c08:	e6f8      	b.n	80099fc <_printf_float+0x254>
 8009c0a:	f04f 0800 	mov.w	r8, #0
 8009c0e:	f104 0919 	add.w	r9, r4, #25
 8009c12:	e7f4      	b.n	8009bfe <_printf_float+0x456>

08009c14 <_printf_common>:
 8009c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c18:	4616      	mov	r6, r2
 8009c1a:	4699      	mov	r9, r3
 8009c1c:	688a      	ldr	r2, [r1, #8]
 8009c1e:	690b      	ldr	r3, [r1, #16]
 8009c20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c24:	4293      	cmp	r3, r2
 8009c26:	bfb8      	it	lt
 8009c28:	4613      	movlt	r3, r2
 8009c2a:	6033      	str	r3, [r6, #0]
 8009c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c30:	4607      	mov	r7, r0
 8009c32:	460c      	mov	r4, r1
 8009c34:	b10a      	cbz	r2, 8009c3a <_printf_common+0x26>
 8009c36:	3301      	adds	r3, #1
 8009c38:	6033      	str	r3, [r6, #0]
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	0699      	lsls	r1, r3, #26
 8009c3e:	bf42      	ittt	mi
 8009c40:	6833      	ldrmi	r3, [r6, #0]
 8009c42:	3302      	addmi	r3, #2
 8009c44:	6033      	strmi	r3, [r6, #0]
 8009c46:	6825      	ldr	r5, [r4, #0]
 8009c48:	f015 0506 	ands.w	r5, r5, #6
 8009c4c:	d106      	bne.n	8009c5c <_printf_common+0x48>
 8009c4e:	f104 0a19 	add.w	sl, r4, #25
 8009c52:	68e3      	ldr	r3, [r4, #12]
 8009c54:	6832      	ldr	r2, [r6, #0]
 8009c56:	1a9b      	subs	r3, r3, r2
 8009c58:	42ab      	cmp	r3, r5
 8009c5a:	dc26      	bgt.n	8009caa <_printf_common+0x96>
 8009c5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c60:	1e13      	subs	r3, r2, #0
 8009c62:	6822      	ldr	r2, [r4, #0]
 8009c64:	bf18      	it	ne
 8009c66:	2301      	movne	r3, #1
 8009c68:	0692      	lsls	r2, r2, #26
 8009c6a:	d42b      	bmi.n	8009cc4 <_printf_common+0xb0>
 8009c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c70:	4649      	mov	r1, r9
 8009c72:	4638      	mov	r0, r7
 8009c74:	47c0      	blx	r8
 8009c76:	3001      	adds	r0, #1
 8009c78:	d01e      	beq.n	8009cb8 <_printf_common+0xa4>
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	6922      	ldr	r2, [r4, #16]
 8009c7e:	f003 0306 	and.w	r3, r3, #6
 8009c82:	2b04      	cmp	r3, #4
 8009c84:	bf02      	ittt	eq
 8009c86:	68e5      	ldreq	r5, [r4, #12]
 8009c88:	6833      	ldreq	r3, [r6, #0]
 8009c8a:	1aed      	subeq	r5, r5, r3
 8009c8c:	68a3      	ldr	r3, [r4, #8]
 8009c8e:	bf0c      	ite	eq
 8009c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c94:	2500      	movne	r5, #0
 8009c96:	4293      	cmp	r3, r2
 8009c98:	bfc4      	itt	gt
 8009c9a:	1a9b      	subgt	r3, r3, r2
 8009c9c:	18ed      	addgt	r5, r5, r3
 8009c9e:	2600      	movs	r6, #0
 8009ca0:	341a      	adds	r4, #26
 8009ca2:	42b5      	cmp	r5, r6
 8009ca4:	d11a      	bne.n	8009cdc <_printf_common+0xc8>
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	e008      	b.n	8009cbc <_printf_common+0xa8>
 8009caa:	2301      	movs	r3, #1
 8009cac:	4652      	mov	r2, sl
 8009cae:	4649      	mov	r1, r9
 8009cb0:	4638      	mov	r0, r7
 8009cb2:	47c0      	blx	r8
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d103      	bne.n	8009cc0 <_printf_common+0xac>
 8009cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cc0:	3501      	adds	r5, #1
 8009cc2:	e7c6      	b.n	8009c52 <_printf_common+0x3e>
 8009cc4:	18e1      	adds	r1, r4, r3
 8009cc6:	1c5a      	adds	r2, r3, #1
 8009cc8:	2030      	movs	r0, #48	; 0x30
 8009cca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cce:	4422      	add	r2, r4
 8009cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cd8:	3302      	adds	r3, #2
 8009cda:	e7c7      	b.n	8009c6c <_printf_common+0x58>
 8009cdc:	2301      	movs	r3, #1
 8009cde:	4622      	mov	r2, r4
 8009ce0:	4649      	mov	r1, r9
 8009ce2:	4638      	mov	r0, r7
 8009ce4:	47c0      	blx	r8
 8009ce6:	3001      	adds	r0, #1
 8009ce8:	d0e6      	beq.n	8009cb8 <_printf_common+0xa4>
 8009cea:	3601      	adds	r6, #1
 8009cec:	e7d9      	b.n	8009ca2 <_printf_common+0x8e>
	...

08009cf0 <_printf_i>:
 8009cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf4:	7e0f      	ldrb	r7, [r1, #24]
 8009cf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009cf8:	2f78      	cmp	r7, #120	; 0x78
 8009cfa:	4691      	mov	r9, r2
 8009cfc:	4680      	mov	r8, r0
 8009cfe:	460c      	mov	r4, r1
 8009d00:	469a      	mov	sl, r3
 8009d02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d06:	d807      	bhi.n	8009d18 <_printf_i+0x28>
 8009d08:	2f62      	cmp	r7, #98	; 0x62
 8009d0a:	d80a      	bhi.n	8009d22 <_printf_i+0x32>
 8009d0c:	2f00      	cmp	r7, #0
 8009d0e:	f000 80d4 	beq.w	8009eba <_printf_i+0x1ca>
 8009d12:	2f58      	cmp	r7, #88	; 0x58
 8009d14:	f000 80c0 	beq.w	8009e98 <_printf_i+0x1a8>
 8009d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d20:	e03a      	b.n	8009d98 <_printf_i+0xa8>
 8009d22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d26:	2b15      	cmp	r3, #21
 8009d28:	d8f6      	bhi.n	8009d18 <_printf_i+0x28>
 8009d2a:	a101      	add	r1, pc, #4	; (adr r1, 8009d30 <_printf_i+0x40>)
 8009d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d30:	08009d89 	.word	0x08009d89
 8009d34:	08009d9d 	.word	0x08009d9d
 8009d38:	08009d19 	.word	0x08009d19
 8009d3c:	08009d19 	.word	0x08009d19
 8009d40:	08009d19 	.word	0x08009d19
 8009d44:	08009d19 	.word	0x08009d19
 8009d48:	08009d9d 	.word	0x08009d9d
 8009d4c:	08009d19 	.word	0x08009d19
 8009d50:	08009d19 	.word	0x08009d19
 8009d54:	08009d19 	.word	0x08009d19
 8009d58:	08009d19 	.word	0x08009d19
 8009d5c:	08009ea1 	.word	0x08009ea1
 8009d60:	08009dc9 	.word	0x08009dc9
 8009d64:	08009e5b 	.word	0x08009e5b
 8009d68:	08009d19 	.word	0x08009d19
 8009d6c:	08009d19 	.word	0x08009d19
 8009d70:	08009ec3 	.word	0x08009ec3
 8009d74:	08009d19 	.word	0x08009d19
 8009d78:	08009dc9 	.word	0x08009dc9
 8009d7c:	08009d19 	.word	0x08009d19
 8009d80:	08009d19 	.word	0x08009d19
 8009d84:	08009e63 	.word	0x08009e63
 8009d88:	682b      	ldr	r3, [r5, #0]
 8009d8a:	1d1a      	adds	r2, r3, #4
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	602a      	str	r2, [r5, #0]
 8009d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e09f      	b.n	8009edc <_printf_i+0x1ec>
 8009d9c:	6820      	ldr	r0, [r4, #0]
 8009d9e:	682b      	ldr	r3, [r5, #0]
 8009da0:	0607      	lsls	r7, r0, #24
 8009da2:	f103 0104 	add.w	r1, r3, #4
 8009da6:	6029      	str	r1, [r5, #0]
 8009da8:	d501      	bpl.n	8009dae <_printf_i+0xbe>
 8009daa:	681e      	ldr	r6, [r3, #0]
 8009dac:	e003      	b.n	8009db6 <_printf_i+0xc6>
 8009dae:	0646      	lsls	r6, r0, #25
 8009db0:	d5fb      	bpl.n	8009daa <_printf_i+0xba>
 8009db2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009db6:	2e00      	cmp	r6, #0
 8009db8:	da03      	bge.n	8009dc2 <_printf_i+0xd2>
 8009dba:	232d      	movs	r3, #45	; 0x2d
 8009dbc:	4276      	negs	r6, r6
 8009dbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dc2:	485a      	ldr	r0, [pc, #360]	; (8009f2c <_printf_i+0x23c>)
 8009dc4:	230a      	movs	r3, #10
 8009dc6:	e012      	b.n	8009dee <_printf_i+0xfe>
 8009dc8:	682b      	ldr	r3, [r5, #0]
 8009dca:	6820      	ldr	r0, [r4, #0]
 8009dcc:	1d19      	adds	r1, r3, #4
 8009dce:	6029      	str	r1, [r5, #0]
 8009dd0:	0605      	lsls	r5, r0, #24
 8009dd2:	d501      	bpl.n	8009dd8 <_printf_i+0xe8>
 8009dd4:	681e      	ldr	r6, [r3, #0]
 8009dd6:	e002      	b.n	8009dde <_printf_i+0xee>
 8009dd8:	0641      	lsls	r1, r0, #25
 8009dda:	d5fb      	bpl.n	8009dd4 <_printf_i+0xe4>
 8009ddc:	881e      	ldrh	r6, [r3, #0]
 8009dde:	4853      	ldr	r0, [pc, #332]	; (8009f2c <_printf_i+0x23c>)
 8009de0:	2f6f      	cmp	r7, #111	; 0x6f
 8009de2:	bf0c      	ite	eq
 8009de4:	2308      	moveq	r3, #8
 8009de6:	230a      	movne	r3, #10
 8009de8:	2100      	movs	r1, #0
 8009dea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dee:	6865      	ldr	r5, [r4, #4]
 8009df0:	60a5      	str	r5, [r4, #8]
 8009df2:	2d00      	cmp	r5, #0
 8009df4:	bfa2      	ittt	ge
 8009df6:	6821      	ldrge	r1, [r4, #0]
 8009df8:	f021 0104 	bicge.w	r1, r1, #4
 8009dfc:	6021      	strge	r1, [r4, #0]
 8009dfe:	b90e      	cbnz	r6, 8009e04 <_printf_i+0x114>
 8009e00:	2d00      	cmp	r5, #0
 8009e02:	d04b      	beq.n	8009e9c <_printf_i+0x1ac>
 8009e04:	4615      	mov	r5, r2
 8009e06:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e0a:	fb03 6711 	mls	r7, r3, r1, r6
 8009e0e:	5dc7      	ldrb	r7, [r0, r7]
 8009e10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e14:	4637      	mov	r7, r6
 8009e16:	42bb      	cmp	r3, r7
 8009e18:	460e      	mov	r6, r1
 8009e1a:	d9f4      	bls.n	8009e06 <_printf_i+0x116>
 8009e1c:	2b08      	cmp	r3, #8
 8009e1e:	d10b      	bne.n	8009e38 <_printf_i+0x148>
 8009e20:	6823      	ldr	r3, [r4, #0]
 8009e22:	07de      	lsls	r6, r3, #31
 8009e24:	d508      	bpl.n	8009e38 <_printf_i+0x148>
 8009e26:	6923      	ldr	r3, [r4, #16]
 8009e28:	6861      	ldr	r1, [r4, #4]
 8009e2a:	4299      	cmp	r1, r3
 8009e2c:	bfde      	ittt	le
 8009e2e:	2330      	movle	r3, #48	; 0x30
 8009e30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e38:	1b52      	subs	r2, r2, r5
 8009e3a:	6122      	str	r2, [r4, #16]
 8009e3c:	f8cd a000 	str.w	sl, [sp]
 8009e40:	464b      	mov	r3, r9
 8009e42:	aa03      	add	r2, sp, #12
 8009e44:	4621      	mov	r1, r4
 8009e46:	4640      	mov	r0, r8
 8009e48:	f7ff fee4 	bl	8009c14 <_printf_common>
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	d14a      	bne.n	8009ee6 <_printf_i+0x1f6>
 8009e50:	f04f 30ff 	mov.w	r0, #4294967295
 8009e54:	b004      	add	sp, #16
 8009e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e5a:	6823      	ldr	r3, [r4, #0]
 8009e5c:	f043 0320 	orr.w	r3, r3, #32
 8009e60:	6023      	str	r3, [r4, #0]
 8009e62:	4833      	ldr	r0, [pc, #204]	; (8009f30 <_printf_i+0x240>)
 8009e64:	2778      	movs	r7, #120	; 0x78
 8009e66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	6829      	ldr	r1, [r5, #0]
 8009e6e:	061f      	lsls	r7, r3, #24
 8009e70:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e74:	d402      	bmi.n	8009e7c <_printf_i+0x18c>
 8009e76:	065f      	lsls	r7, r3, #25
 8009e78:	bf48      	it	mi
 8009e7a:	b2b6      	uxthmi	r6, r6
 8009e7c:	07df      	lsls	r7, r3, #31
 8009e7e:	bf48      	it	mi
 8009e80:	f043 0320 	orrmi.w	r3, r3, #32
 8009e84:	6029      	str	r1, [r5, #0]
 8009e86:	bf48      	it	mi
 8009e88:	6023      	strmi	r3, [r4, #0]
 8009e8a:	b91e      	cbnz	r6, 8009e94 <_printf_i+0x1a4>
 8009e8c:	6823      	ldr	r3, [r4, #0]
 8009e8e:	f023 0320 	bic.w	r3, r3, #32
 8009e92:	6023      	str	r3, [r4, #0]
 8009e94:	2310      	movs	r3, #16
 8009e96:	e7a7      	b.n	8009de8 <_printf_i+0xf8>
 8009e98:	4824      	ldr	r0, [pc, #144]	; (8009f2c <_printf_i+0x23c>)
 8009e9a:	e7e4      	b.n	8009e66 <_printf_i+0x176>
 8009e9c:	4615      	mov	r5, r2
 8009e9e:	e7bd      	b.n	8009e1c <_printf_i+0x12c>
 8009ea0:	682b      	ldr	r3, [r5, #0]
 8009ea2:	6826      	ldr	r6, [r4, #0]
 8009ea4:	6961      	ldr	r1, [r4, #20]
 8009ea6:	1d18      	adds	r0, r3, #4
 8009ea8:	6028      	str	r0, [r5, #0]
 8009eaa:	0635      	lsls	r5, r6, #24
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	d501      	bpl.n	8009eb4 <_printf_i+0x1c4>
 8009eb0:	6019      	str	r1, [r3, #0]
 8009eb2:	e002      	b.n	8009eba <_printf_i+0x1ca>
 8009eb4:	0670      	lsls	r0, r6, #25
 8009eb6:	d5fb      	bpl.n	8009eb0 <_printf_i+0x1c0>
 8009eb8:	8019      	strh	r1, [r3, #0]
 8009eba:	2300      	movs	r3, #0
 8009ebc:	6123      	str	r3, [r4, #16]
 8009ebe:	4615      	mov	r5, r2
 8009ec0:	e7bc      	b.n	8009e3c <_printf_i+0x14c>
 8009ec2:	682b      	ldr	r3, [r5, #0]
 8009ec4:	1d1a      	adds	r2, r3, #4
 8009ec6:	602a      	str	r2, [r5, #0]
 8009ec8:	681d      	ldr	r5, [r3, #0]
 8009eca:	6862      	ldr	r2, [r4, #4]
 8009ecc:	2100      	movs	r1, #0
 8009ece:	4628      	mov	r0, r5
 8009ed0:	f7f6 f97e 	bl	80001d0 <memchr>
 8009ed4:	b108      	cbz	r0, 8009eda <_printf_i+0x1ea>
 8009ed6:	1b40      	subs	r0, r0, r5
 8009ed8:	6060      	str	r0, [r4, #4]
 8009eda:	6863      	ldr	r3, [r4, #4]
 8009edc:	6123      	str	r3, [r4, #16]
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ee4:	e7aa      	b.n	8009e3c <_printf_i+0x14c>
 8009ee6:	6923      	ldr	r3, [r4, #16]
 8009ee8:	462a      	mov	r2, r5
 8009eea:	4649      	mov	r1, r9
 8009eec:	4640      	mov	r0, r8
 8009eee:	47d0      	blx	sl
 8009ef0:	3001      	adds	r0, #1
 8009ef2:	d0ad      	beq.n	8009e50 <_printf_i+0x160>
 8009ef4:	6823      	ldr	r3, [r4, #0]
 8009ef6:	079b      	lsls	r3, r3, #30
 8009ef8:	d413      	bmi.n	8009f22 <_printf_i+0x232>
 8009efa:	68e0      	ldr	r0, [r4, #12]
 8009efc:	9b03      	ldr	r3, [sp, #12]
 8009efe:	4298      	cmp	r0, r3
 8009f00:	bfb8      	it	lt
 8009f02:	4618      	movlt	r0, r3
 8009f04:	e7a6      	b.n	8009e54 <_printf_i+0x164>
 8009f06:	2301      	movs	r3, #1
 8009f08:	4632      	mov	r2, r6
 8009f0a:	4649      	mov	r1, r9
 8009f0c:	4640      	mov	r0, r8
 8009f0e:	47d0      	blx	sl
 8009f10:	3001      	adds	r0, #1
 8009f12:	d09d      	beq.n	8009e50 <_printf_i+0x160>
 8009f14:	3501      	adds	r5, #1
 8009f16:	68e3      	ldr	r3, [r4, #12]
 8009f18:	9903      	ldr	r1, [sp, #12]
 8009f1a:	1a5b      	subs	r3, r3, r1
 8009f1c:	42ab      	cmp	r3, r5
 8009f1e:	dcf2      	bgt.n	8009f06 <_printf_i+0x216>
 8009f20:	e7eb      	b.n	8009efa <_printf_i+0x20a>
 8009f22:	2500      	movs	r5, #0
 8009f24:	f104 0619 	add.w	r6, r4, #25
 8009f28:	e7f5      	b.n	8009f16 <_printf_i+0x226>
 8009f2a:	bf00      	nop
 8009f2c:	0800c3ca 	.word	0x0800c3ca
 8009f30:	0800c3db 	.word	0x0800c3db

08009f34 <std>:
 8009f34:	2300      	movs	r3, #0
 8009f36:	b510      	push	{r4, lr}
 8009f38:	4604      	mov	r4, r0
 8009f3a:	e9c0 3300 	strd	r3, r3, [r0]
 8009f3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f42:	6083      	str	r3, [r0, #8]
 8009f44:	8181      	strh	r1, [r0, #12]
 8009f46:	6643      	str	r3, [r0, #100]	; 0x64
 8009f48:	81c2      	strh	r2, [r0, #14]
 8009f4a:	6183      	str	r3, [r0, #24]
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	2208      	movs	r2, #8
 8009f50:	305c      	adds	r0, #92	; 0x5c
 8009f52:	f000 fa09 	bl	800a368 <memset>
 8009f56:	4b0d      	ldr	r3, [pc, #52]	; (8009f8c <std+0x58>)
 8009f58:	6263      	str	r3, [r4, #36]	; 0x24
 8009f5a:	4b0d      	ldr	r3, [pc, #52]	; (8009f90 <std+0x5c>)
 8009f5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f5e:	4b0d      	ldr	r3, [pc, #52]	; (8009f94 <std+0x60>)
 8009f60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f62:	4b0d      	ldr	r3, [pc, #52]	; (8009f98 <std+0x64>)
 8009f64:	6323      	str	r3, [r4, #48]	; 0x30
 8009f66:	4b0d      	ldr	r3, [pc, #52]	; (8009f9c <std+0x68>)
 8009f68:	6224      	str	r4, [r4, #32]
 8009f6a:	429c      	cmp	r4, r3
 8009f6c:	d006      	beq.n	8009f7c <std+0x48>
 8009f6e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009f72:	4294      	cmp	r4, r2
 8009f74:	d002      	beq.n	8009f7c <std+0x48>
 8009f76:	33d0      	adds	r3, #208	; 0xd0
 8009f78:	429c      	cmp	r4, r3
 8009f7a:	d105      	bne.n	8009f88 <std+0x54>
 8009f7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f84:	f000 ba6c 	b.w	800a460 <__retarget_lock_init_recursive>
 8009f88:	bd10      	pop	{r4, pc}
 8009f8a:	bf00      	nop
 8009f8c:	0800a1b9 	.word	0x0800a1b9
 8009f90:	0800a1db 	.word	0x0800a1db
 8009f94:	0800a213 	.word	0x0800a213
 8009f98:	0800a237 	.word	0x0800a237
 8009f9c:	20002604 	.word	0x20002604

08009fa0 <stdio_exit_handler>:
 8009fa0:	4a02      	ldr	r2, [pc, #8]	; (8009fac <stdio_exit_handler+0xc>)
 8009fa2:	4903      	ldr	r1, [pc, #12]	; (8009fb0 <stdio_exit_handler+0x10>)
 8009fa4:	4803      	ldr	r0, [pc, #12]	; (8009fb4 <stdio_exit_handler+0x14>)
 8009fa6:	f000 b87b 	b.w	800a0a0 <_fwalk_sglue>
 8009faa:	bf00      	nop
 8009fac:	20000010 	.word	0x20000010
 8009fb0:	0800be11 	.word	0x0800be11
 8009fb4:	2000001c 	.word	0x2000001c

08009fb8 <cleanup_stdio>:
 8009fb8:	6841      	ldr	r1, [r0, #4]
 8009fba:	4b0c      	ldr	r3, [pc, #48]	; (8009fec <cleanup_stdio+0x34>)
 8009fbc:	4299      	cmp	r1, r3
 8009fbe:	b510      	push	{r4, lr}
 8009fc0:	4604      	mov	r4, r0
 8009fc2:	d001      	beq.n	8009fc8 <cleanup_stdio+0x10>
 8009fc4:	f001 ff24 	bl	800be10 <_fflush_r>
 8009fc8:	68a1      	ldr	r1, [r4, #8]
 8009fca:	4b09      	ldr	r3, [pc, #36]	; (8009ff0 <cleanup_stdio+0x38>)
 8009fcc:	4299      	cmp	r1, r3
 8009fce:	d002      	beq.n	8009fd6 <cleanup_stdio+0x1e>
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	f001 ff1d 	bl	800be10 <_fflush_r>
 8009fd6:	68e1      	ldr	r1, [r4, #12]
 8009fd8:	4b06      	ldr	r3, [pc, #24]	; (8009ff4 <cleanup_stdio+0x3c>)
 8009fda:	4299      	cmp	r1, r3
 8009fdc:	d004      	beq.n	8009fe8 <cleanup_stdio+0x30>
 8009fde:	4620      	mov	r0, r4
 8009fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fe4:	f001 bf14 	b.w	800be10 <_fflush_r>
 8009fe8:	bd10      	pop	{r4, pc}
 8009fea:	bf00      	nop
 8009fec:	20002604 	.word	0x20002604
 8009ff0:	2000266c 	.word	0x2000266c
 8009ff4:	200026d4 	.word	0x200026d4

08009ff8 <global_stdio_init.part.0>:
 8009ff8:	b510      	push	{r4, lr}
 8009ffa:	4b0b      	ldr	r3, [pc, #44]	; (800a028 <global_stdio_init.part.0+0x30>)
 8009ffc:	4c0b      	ldr	r4, [pc, #44]	; (800a02c <global_stdio_init.part.0+0x34>)
 8009ffe:	4a0c      	ldr	r2, [pc, #48]	; (800a030 <global_stdio_init.part.0+0x38>)
 800a000:	601a      	str	r2, [r3, #0]
 800a002:	4620      	mov	r0, r4
 800a004:	2200      	movs	r2, #0
 800a006:	2104      	movs	r1, #4
 800a008:	f7ff ff94 	bl	8009f34 <std>
 800a00c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a010:	2201      	movs	r2, #1
 800a012:	2109      	movs	r1, #9
 800a014:	f7ff ff8e 	bl	8009f34 <std>
 800a018:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a01c:	2202      	movs	r2, #2
 800a01e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a022:	2112      	movs	r1, #18
 800a024:	f7ff bf86 	b.w	8009f34 <std>
 800a028:	2000273c 	.word	0x2000273c
 800a02c:	20002604 	.word	0x20002604
 800a030:	08009fa1 	.word	0x08009fa1

0800a034 <__sfp_lock_acquire>:
 800a034:	4801      	ldr	r0, [pc, #4]	; (800a03c <__sfp_lock_acquire+0x8>)
 800a036:	f000 ba14 	b.w	800a462 <__retarget_lock_acquire_recursive>
 800a03a:	bf00      	nop
 800a03c:	20002745 	.word	0x20002745

0800a040 <__sfp_lock_release>:
 800a040:	4801      	ldr	r0, [pc, #4]	; (800a048 <__sfp_lock_release+0x8>)
 800a042:	f000 ba0f 	b.w	800a464 <__retarget_lock_release_recursive>
 800a046:	bf00      	nop
 800a048:	20002745 	.word	0x20002745

0800a04c <__sinit>:
 800a04c:	b510      	push	{r4, lr}
 800a04e:	4604      	mov	r4, r0
 800a050:	f7ff fff0 	bl	800a034 <__sfp_lock_acquire>
 800a054:	6a23      	ldr	r3, [r4, #32]
 800a056:	b11b      	cbz	r3, 800a060 <__sinit+0x14>
 800a058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a05c:	f7ff bff0 	b.w	800a040 <__sfp_lock_release>
 800a060:	4b04      	ldr	r3, [pc, #16]	; (800a074 <__sinit+0x28>)
 800a062:	6223      	str	r3, [r4, #32]
 800a064:	4b04      	ldr	r3, [pc, #16]	; (800a078 <__sinit+0x2c>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d1f5      	bne.n	800a058 <__sinit+0xc>
 800a06c:	f7ff ffc4 	bl	8009ff8 <global_stdio_init.part.0>
 800a070:	e7f2      	b.n	800a058 <__sinit+0xc>
 800a072:	bf00      	nop
 800a074:	08009fb9 	.word	0x08009fb9
 800a078:	2000273c 	.word	0x2000273c

0800a07c <fiprintf>:
 800a07c:	b40e      	push	{r1, r2, r3}
 800a07e:	b503      	push	{r0, r1, lr}
 800a080:	4601      	mov	r1, r0
 800a082:	ab03      	add	r3, sp, #12
 800a084:	4805      	ldr	r0, [pc, #20]	; (800a09c <fiprintf+0x20>)
 800a086:	f853 2b04 	ldr.w	r2, [r3], #4
 800a08a:	6800      	ldr	r0, [r0, #0]
 800a08c:	9301      	str	r3, [sp, #4]
 800a08e:	f001 fd1f 	bl	800bad0 <_vfiprintf_r>
 800a092:	b002      	add	sp, #8
 800a094:	f85d eb04 	ldr.w	lr, [sp], #4
 800a098:	b003      	add	sp, #12
 800a09a:	4770      	bx	lr
 800a09c:	20000068 	.word	0x20000068

0800a0a0 <_fwalk_sglue>:
 800a0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0a4:	4607      	mov	r7, r0
 800a0a6:	4688      	mov	r8, r1
 800a0a8:	4614      	mov	r4, r2
 800a0aa:	2600      	movs	r6, #0
 800a0ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0b0:	f1b9 0901 	subs.w	r9, r9, #1
 800a0b4:	d505      	bpl.n	800a0c2 <_fwalk_sglue+0x22>
 800a0b6:	6824      	ldr	r4, [r4, #0]
 800a0b8:	2c00      	cmp	r4, #0
 800a0ba:	d1f7      	bne.n	800a0ac <_fwalk_sglue+0xc>
 800a0bc:	4630      	mov	r0, r6
 800a0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0c2:	89ab      	ldrh	r3, [r5, #12]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d907      	bls.n	800a0d8 <_fwalk_sglue+0x38>
 800a0c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	d003      	beq.n	800a0d8 <_fwalk_sglue+0x38>
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	4638      	mov	r0, r7
 800a0d4:	47c0      	blx	r8
 800a0d6:	4306      	orrs	r6, r0
 800a0d8:	3568      	adds	r5, #104	; 0x68
 800a0da:	e7e9      	b.n	800a0b0 <_fwalk_sglue+0x10>

0800a0dc <iprintf>:
 800a0dc:	b40f      	push	{r0, r1, r2, r3}
 800a0de:	b507      	push	{r0, r1, r2, lr}
 800a0e0:	4906      	ldr	r1, [pc, #24]	; (800a0fc <iprintf+0x20>)
 800a0e2:	ab04      	add	r3, sp, #16
 800a0e4:	6808      	ldr	r0, [r1, #0]
 800a0e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0ea:	6881      	ldr	r1, [r0, #8]
 800a0ec:	9301      	str	r3, [sp, #4]
 800a0ee:	f001 fcef 	bl	800bad0 <_vfiprintf_r>
 800a0f2:	b003      	add	sp, #12
 800a0f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0f8:	b004      	add	sp, #16
 800a0fa:	4770      	bx	lr
 800a0fc:	20000068 	.word	0x20000068

0800a100 <_puts_r>:
 800a100:	6a03      	ldr	r3, [r0, #32]
 800a102:	b570      	push	{r4, r5, r6, lr}
 800a104:	6884      	ldr	r4, [r0, #8]
 800a106:	4605      	mov	r5, r0
 800a108:	460e      	mov	r6, r1
 800a10a:	b90b      	cbnz	r3, 800a110 <_puts_r+0x10>
 800a10c:	f7ff ff9e 	bl	800a04c <__sinit>
 800a110:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a112:	07db      	lsls	r3, r3, #31
 800a114:	d405      	bmi.n	800a122 <_puts_r+0x22>
 800a116:	89a3      	ldrh	r3, [r4, #12]
 800a118:	0598      	lsls	r0, r3, #22
 800a11a:	d402      	bmi.n	800a122 <_puts_r+0x22>
 800a11c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a11e:	f000 f9a0 	bl	800a462 <__retarget_lock_acquire_recursive>
 800a122:	89a3      	ldrh	r3, [r4, #12]
 800a124:	0719      	lsls	r1, r3, #28
 800a126:	d513      	bpl.n	800a150 <_puts_r+0x50>
 800a128:	6923      	ldr	r3, [r4, #16]
 800a12a:	b18b      	cbz	r3, 800a150 <_puts_r+0x50>
 800a12c:	3e01      	subs	r6, #1
 800a12e:	68a3      	ldr	r3, [r4, #8]
 800a130:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a134:	3b01      	subs	r3, #1
 800a136:	60a3      	str	r3, [r4, #8]
 800a138:	b9e9      	cbnz	r1, 800a176 <_puts_r+0x76>
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	da2e      	bge.n	800a19c <_puts_r+0x9c>
 800a13e:	4622      	mov	r2, r4
 800a140:	210a      	movs	r1, #10
 800a142:	4628      	mov	r0, r5
 800a144:	f000 f87b 	bl	800a23e <__swbuf_r>
 800a148:	3001      	adds	r0, #1
 800a14a:	d007      	beq.n	800a15c <_puts_r+0x5c>
 800a14c:	250a      	movs	r5, #10
 800a14e:	e007      	b.n	800a160 <_puts_r+0x60>
 800a150:	4621      	mov	r1, r4
 800a152:	4628      	mov	r0, r5
 800a154:	f000 f8b0 	bl	800a2b8 <__swsetup_r>
 800a158:	2800      	cmp	r0, #0
 800a15a:	d0e7      	beq.n	800a12c <_puts_r+0x2c>
 800a15c:	f04f 35ff 	mov.w	r5, #4294967295
 800a160:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a162:	07da      	lsls	r2, r3, #31
 800a164:	d405      	bmi.n	800a172 <_puts_r+0x72>
 800a166:	89a3      	ldrh	r3, [r4, #12]
 800a168:	059b      	lsls	r3, r3, #22
 800a16a:	d402      	bmi.n	800a172 <_puts_r+0x72>
 800a16c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a16e:	f000 f979 	bl	800a464 <__retarget_lock_release_recursive>
 800a172:	4628      	mov	r0, r5
 800a174:	bd70      	pop	{r4, r5, r6, pc}
 800a176:	2b00      	cmp	r3, #0
 800a178:	da04      	bge.n	800a184 <_puts_r+0x84>
 800a17a:	69a2      	ldr	r2, [r4, #24]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	dc06      	bgt.n	800a18e <_puts_r+0x8e>
 800a180:	290a      	cmp	r1, #10
 800a182:	d004      	beq.n	800a18e <_puts_r+0x8e>
 800a184:	6823      	ldr	r3, [r4, #0]
 800a186:	1c5a      	adds	r2, r3, #1
 800a188:	6022      	str	r2, [r4, #0]
 800a18a:	7019      	strb	r1, [r3, #0]
 800a18c:	e7cf      	b.n	800a12e <_puts_r+0x2e>
 800a18e:	4622      	mov	r2, r4
 800a190:	4628      	mov	r0, r5
 800a192:	f000 f854 	bl	800a23e <__swbuf_r>
 800a196:	3001      	adds	r0, #1
 800a198:	d1c9      	bne.n	800a12e <_puts_r+0x2e>
 800a19a:	e7df      	b.n	800a15c <_puts_r+0x5c>
 800a19c:	6823      	ldr	r3, [r4, #0]
 800a19e:	250a      	movs	r5, #10
 800a1a0:	1c5a      	adds	r2, r3, #1
 800a1a2:	6022      	str	r2, [r4, #0]
 800a1a4:	701d      	strb	r5, [r3, #0]
 800a1a6:	e7db      	b.n	800a160 <_puts_r+0x60>

0800a1a8 <puts>:
 800a1a8:	4b02      	ldr	r3, [pc, #8]	; (800a1b4 <puts+0xc>)
 800a1aa:	4601      	mov	r1, r0
 800a1ac:	6818      	ldr	r0, [r3, #0]
 800a1ae:	f7ff bfa7 	b.w	800a100 <_puts_r>
 800a1b2:	bf00      	nop
 800a1b4:	20000068 	.word	0x20000068

0800a1b8 <__sread>:
 800a1b8:	b510      	push	{r4, lr}
 800a1ba:	460c      	mov	r4, r1
 800a1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c0:	f000 f900 	bl	800a3c4 <_read_r>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	bfab      	itete	ge
 800a1c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1ca:	89a3      	ldrhlt	r3, [r4, #12]
 800a1cc:	181b      	addge	r3, r3, r0
 800a1ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1d2:	bfac      	ite	ge
 800a1d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1d6:	81a3      	strhlt	r3, [r4, #12]
 800a1d8:	bd10      	pop	{r4, pc}

0800a1da <__swrite>:
 800a1da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1de:	461f      	mov	r7, r3
 800a1e0:	898b      	ldrh	r3, [r1, #12]
 800a1e2:	05db      	lsls	r3, r3, #23
 800a1e4:	4605      	mov	r5, r0
 800a1e6:	460c      	mov	r4, r1
 800a1e8:	4616      	mov	r6, r2
 800a1ea:	d505      	bpl.n	800a1f8 <__swrite+0x1e>
 800a1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f000 f8d4 	bl	800a3a0 <_lseek_r>
 800a1f8:	89a3      	ldrh	r3, [r4, #12]
 800a1fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a202:	81a3      	strh	r3, [r4, #12]
 800a204:	4632      	mov	r2, r6
 800a206:	463b      	mov	r3, r7
 800a208:	4628      	mov	r0, r5
 800a20a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a20e:	f000 b8eb 	b.w	800a3e8 <_write_r>

0800a212 <__sseek>:
 800a212:	b510      	push	{r4, lr}
 800a214:	460c      	mov	r4, r1
 800a216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a21a:	f000 f8c1 	bl	800a3a0 <_lseek_r>
 800a21e:	1c43      	adds	r3, r0, #1
 800a220:	89a3      	ldrh	r3, [r4, #12]
 800a222:	bf15      	itete	ne
 800a224:	6560      	strne	r0, [r4, #84]	; 0x54
 800a226:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a22a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a22e:	81a3      	strheq	r3, [r4, #12]
 800a230:	bf18      	it	ne
 800a232:	81a3      	strhne	r3, [r4, #12]
 800a234:	bd10      	pop	{r4, pc}

0800a236 <__sclose>:
 800a236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a23a:	f000 b8a1 	b.w	800a380 <_close_r>

0800a23e <__swbuf_r>:
 800a23e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a240:	460e      	mov	r6, r1
 800a242:	4614      	mov	r4, r2
 800a244:	4605      	mov	r5, r0
 800a246:	b118      	cbz	r0, 800a250 <__swbuf_r+0x12>
 800a248:	6a03      	ldr	r3, [r0, #32]
 800a24a:	b90b      	cbnz	r3, 800a250 <__swbuf_r+0x12>
 800a24c:	f7ff fefe 	bl	800a04c <__sinit>
 800a250:	69a3      	ldr	r3, [r4, #24]
 800a252:	60a3      	str	r3, [r4, #8]
 800a254:	89a3      	ldrh	r3, [r4, #12]
 800a256:	071a      	lsls	r2, r3, #28
 800a258:	d525      	bpl.n	800a2a6 <__swbuf_r+0x68>
 800a25a:	6923      	ldr	r3, [r4, #16]
 800a25c:	b31b      	cbz	r3, 800a2a6 <__swbuf_r+0x68>
 800a25e:	6823      	ldr	r3, [r4, #0]
 800a260:	6922      	ldr	r2, [r4, #16]
 800a262:	1a98      	subs	r0, r3, r2
 800a264:	6963      	ldr	r3, [r4, #20]
 800a266:	b2f6      	uxtb	r6, r6
 800a268:	4283      	cmp	r3, r0
 800a26a:	4637      	mov	r7, r6
 800a26c:	dc04      	bgt.n	800a278 <__swbuf_r+0x3a>
 800a26e:	4621      	mov	r1, r4
 800a270:	4628      	mov	r0, r5
 800a272:	f001 fdcd 	bl	800be10 <_fflush_r>
 800a276:	b9e0      	cbnz	r0, 800a2b2 <__swbuf_r+0x74>
 800a278:	68a3      	ldr	r3, [r4, #8]
 800a27a:	3b01      	subs	r3, #1
 800a27c:	60a3      	str	r3, [r4, #8]
 800a27e:	6823      	ldr	r3, [r4, #0]
 800a280:	1c5a      	adds	r2, r3, #1
 800a282:	6022      	str	r2, [r4, #0]
 800a284:	701e      	strb	r6, [r3, #0]
 800a286:	6962      	ldr	r2, [r4, #20]
 800a288:	1c43      	adds	r3, r0, #1
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d004      	beq.n	800a298 <__swbuf_r+0x5a>
 800a28e:	89a3      	ldrh	r3, [r4, #12]
 800a290:	07db      	lsls	r3, r3, #31
 800a292:	d506      	bpl.n	800a2a2 <__swbuf_r+0x64>
 800a294:	2e0a      	cmp	r6, #10
 800a296:	d104      	bne.n	800a2a2 <__swbuf_r+0x64>
 800a298:	4621      	mov	r1, r4
 800a29a:	4628      	mov	r0, r5
 800a29c:	f001 fdb8 	bl	800be10 <_fflush_r>
 800a2a0:	b938      	cbnz	r0, 800a2b2 <__swbuf_r+0x74>
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	f000 f805 	bl	800a2b8 <__swsetup_r>
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d0d5      	beq.n	800a25e <__swbuf_r+0x20>
 800a2b2:	f04f 37ff 	mov.w	r7, #4294967295
 800a2b6:	e7f4      	b.n	800a2a2 <__swbuf_r+0x64>

0800a2b8 <__swsetup_r>:
 800a2b8:	b538      	push	{r3, r4, r5, lr}
 800a2ba:	4b2a      	ldr	r3, [pc, #168]	; (800a364 <__swsetup_r+0xac>)
 800a2bc:	4605      	mov	r5, r0
 800a2be:	6818      	ldr	r0, [r3, #0]
 800a2c0:	460c      	mov	r4, r1
 800a2c2:	b118      	cbz	r0, 800a2cc <__swsetup_r+0x14>
 800a2c4:	6a03      	ldr	r3, [r0, #32]
 800a2c6:	b90b      	cbnz	r3, 800a2cc <__swsetup_r+0x14>
 800a2c8:	f7ff fec0 	bl	800a04c <__sinit>
 800a2cc:	89a3      	ldrh	r3, [r4, #12]
 800a2ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2d2:	0718      	lsls	r0, r3, #28
 800a2d4:	d422      	bmi.n	800a31c <__swsetup_r+0x64>
 800a2d6:	06d9      	lsls	r1, r3, #27
 800a2d8:	d407      	bmi.n	800a2ea <__swsetup_r+0x32>
 800a2da:	2309      	movs	r3, #9
 800a2dc:	602b      	str	r3, [r5, #0]
 800a2de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2e2:	81a3      	strh	r3, [r4, #12]
 800a2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e8:	e034      	b.n	800a354 <__swsetup_r+0x9c>
 800a2ea:	0758      	lsls	r0, r3, #29
 800a2ec:	d512      	bpl.n	800a314 <__swsetup_r+0x5c>
 800a2ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2f0:	b141      	cbz	r1, 800a304 <__swsetup_r+0x4c>
 800a2f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2f6:	4299      	cmp	r1, r3
 800a2f8:	d002      	beq.n	800a300 <__swsetup_r+0x48>
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f000 ff42 	bl	800b184 <_free_r>
 800a300:	2300      	movs	r3, #0
 800a302:	6363      	str	r3, [r4, #52]	; 0x34
 800a304:	89a3      	ldrh	r3, [r4, #12]
 800a306:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a30a:	81a3      	strh	r3, [r4, #12]
 800a30c:	2300      	movs	r3, #0
 800a30e:	6063      	str	r3, [r4, #4]
 800a310:	6923      	ldr	r3, [r4, #16]
 800a312:	6023      	str	r3, [r4, #0]
 800a314:	89a3      	ldrh	r3, [r4, #12]
 800a316:	f043 0308 	orr.w	r3, r3, #8
 800a31a:	81a3      	strh	r3, [r4, #12]
 800a31c:	6923      	ldr	r3, [r4, #16]
 800a31e:	b94b      	cbnz	r3, 800a334 <__swsetup_r+0x7c>
 800a320:	89a3      	ldrh	r3, [r4, #12]
 800a322:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a32a:	d003      	beq.n	800a334 <__swsetup_r+0x7c>
 800a32c:	4621      	mov	r1, r4
 800a32e:	4628      	mov	r0, r5
 800a330:	f001 fdbc 	bl	800beac <__smakebuf_r>
 800a334:	89a0      	ldrh	r0, [r4, #12]
 800a336:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a33a:	f010 0301 	ands.w	r3, r0, #1
 800a33e:	d00a      	beq.n	800a356 <__swsetup_r+0x9e>
 800a340:	2300      	movs	r3, #0
 800a342:	60a3      	str	r3, [r4, #8]
 800a344:	6963      	ldr	r3, [r4, #20]
 800a346:	425b      	negs	r3, r3
 800a348:	61a3      	str	r3, [r4, #24]
 800a34a:	6923      	ldr	r3, [r4, #16]
 800a34c:	b943      	cbnz	r3, 800a360 <__swsetup_r+0xa8>
 800a34e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a352:	d1c4      	bne.n	800a2de <__swsetup_r+0x26>
 800a354:	bd38      	pop	{r3, r4, r5, pc}
 800a356:	0781      	lsls	r1, r0, #30
 800a358:	bf58      	it	pl
 800a35a:	6963      	ldrpl	r3, [r4, #20]
 800a35c:	60a3      	str	r3, [r4, #8]
 800a35e:	e7f4      	b.n	800a34a <__swsetup_r+0x92>
 800a360:	2000      	movs	r0, #0
 800a362:	e7f7      	b.n	800a354 <__swsetup_r+0x9c>
 800a364:	20000068 	.word	0x20000068

0800a368 <memset>:
 800a368:	4402      	add	r2, r0
 800a36a:	4603      	mov	r3, r0
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d100      	bne.n	800a372 <memset+0xa>
 800a370:	4770      	bx	lr
 800a372:	f803 1b01 	strb.w	r1, [r3], #1
 800a376:	e7f9      	b.n	800a36c <memset+0x4>

0800a378 <_localeconv_r>:
 800a378:	4800      	ldr	r0, [pc, #0]	; (800a37c <_localeconv_r+0x4>)
 800a37a:	4770      	bx	lr
 800a37c:	2000015c 	.word	0x2000015c

0800a380 <_close_r>:
 800a380:	b538      	push	{r3, r4, r5, lr}
 800a382:	4d06      	ldr	r5, [pc, #24]	; (800a39c <_close_r+0x1c>)
 800a384:	2300      	movs	r3, #0
 800a386:	4604      	mov	r4, r0
 800a388:	4608      	mov	r0, r1
 800a38a:	602b      	str	r3, [r5, #0]
 800a38c:	f7f7 fbc1 	bl	8001b12 <_close>
 800a390:	1c43      	adds	r3, r0, #1
 800a392:	d102      	bne.n	800a39a <_close_r+0x1a>
 800a394:	682b      	ldr	r3, [r5, #0]
 800a396:	b103      	cbz	r3, 800a39a <_close_r+0x1a>
 800a398:	6023      	str	r3, [r4, #0]
 800a39a:	bd38      	pop	{r3, r4, r5, pc}
 800a39c:	20002740 	.word	0x20002740

0800a3a0 <_lseek_r>:
 800a3a0:	b538      	push	{r3, r4, r5, lr}
 800a3a2:	4d07      	ldr	r5, [pc, #28]	; (800a3c0 <_lseek_r+0x20>)
 800a3a4:	4604      	mov	r4, r0
 800a3a6:	4608      	mov	r0, r1
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	602a      	str	r2, [r5, #0]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	f7f7 fbd6 	bl	8001b60 <_lseek>
 800a3b4:	1c43      	adds	r3, r0, #1
 800a3b6:	d102      	bne.n	800a3be <_lseek_r+0x1e>
 800a3b8:	682b      	ldr	r3, [r5, #0]
 800a3ba:	b103      	cbz	r3, 800a3be <_lseek_r+0x1e>
 800a3bc:	6023      	str	r3, [r4, #0]
 800a3be:	bd38      	pop	{r3, r4, r5, pc}
 800a3c0:	20002740 	.word	0x20002740

0800a3c4 <_read_r>:
 800a3c4:	b538      	push	{r3, r4, r5, lr}
 800a3c6:	4d07      	ldr	r5, [pc, #28]	; (800a3e4 <_read_r+0x20>)
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	4608      	mov	r0, r1
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	602a      	str	r2, [r5, #0]
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	f7f7 fb80 	bl	8001ad8 <_read>
 800a3d8:	1c43      	adds	r3, r0, #1
 800a3da:	d102      	bne.n	800a3e2 <_read_r+0x1e>
 800a3dc:	682b      	ldr	r3, [r5, #0]
 800a3de:	b103      	cbz	r3, 800a3e2 <_read_r+0x1e>
 800a3e0:	6023      	str	r3, [r4, #0]
 800a3e2:	bd38      	pop	{r3, r4, r5, pc}
 800a3e4:	20002740 	.word	0x20002740

0800a3e8 <_write_r>:
 800a3e8:	b538      	push	{r3, r4, r5, lr}
 800a3ea:	4d07      	ldr	r5, [pc, #28]	; (800a408 <_write_r+0x20>)
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	4608      	mov	r0, r1
 800a3f0:	4611      	mov	r1, r2
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	602a      	str	r2, [r5, #0]
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	f7f7 f896 	bl	8001528 <_write>
 800a3fc:	1c43      	adds	r3, r0, #1
 800a3fe:	d102      	bne.n	800a406 <_write_r+0x1e>
 800a400:	682b      	ldr	r3, [r5, #0]
 800a402:	b103      	cbz	r3, 800a406 <_write_r+0x1e>
 800a404:	6023      	str	r3, [r4, #0]
 800a406:	bd38      	pop	{r3, r4, r5, pc}
 800a408:	20002740 	.word	0x20002740

0800a40c <__errno>:
 800a40c:	4b01      	ldr	r3, [pc, #4]	; (800a414 <__errno+0x8>)
 800a40e:	6818      	ldr	r0, [r3, #0]
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	20000068 	.word	0x20000068

0800a418 <__libc_init_array>:
 800a418:	b570      	push	{r4, r5, r6, lr}
 800a41a:	4d0d      	ldr	r5, [pc, #52]	; (800a450 <__libc_init_array+0x38>)
 800a41c:	4c0d      	ldr	r4, [pc, #52]	; (800a454 <__libc_init_array+0x3c>)
 800a41e:	1b64      	subs	r4, r4, r5
 800a420:	10a4      	asrs	r4, r4, #2
 800a422:	2600      	movs	r6, #0
 800a424:	42a6      	cmp	r6, r4
 800a426:	d109      	bne.n	800a43c <__libc_init_array+0x24>
 800a428:	4d0b      	ldr	r5, [pc, #44]	; (800a458 <__libc_init_array+0x40>)
 800a42a:	4c0c      	ldr	r4, [pc, #48]	; (800a45c <__libc_init_array+0x44>)
 800a42c:	f001 fe26 	bl	800c07c <_init>
 800a430:	1b64      	subs	r4, r4, r5
 800a432:	10a4      	asrs	r4, r4, #2
 800a434:	2600      	movs	r6, #0
 800a436:	42a6      	cmp	r6, r4
 800a438:	d105      	bne.n	800a446 <__libc_init_array+0x2e>
 800a43a:	bd70      	pop	{r4, r5, r6, pc}
 800a43c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a440:	4798      	blx	r3
 800a442:	3601      	adds	r6, #1
 800a444:	e7ee      	b.n	800a424 <__libc_init_array+0xc>
 800a446:	f855 3b04 	ldr.w	r3, [r5], #4
 800a44a:	4798      	blx	r3
 800a44c:	3601      	adds	r6, #1
 800a44e:	e7f2      	b.n	800a436 <__libc_init_array+0x1e>
 800a450:	0800c6f8 	.word	0x0800c6f8
 800a454:	0800c6f8 	.word	0x0800c6f8
 800a458:	0800c6f8 	.word	0x0800c6f8
 800a45c:	0800c6fc 	.word	0x0800c6fc

0800a460 <__retarget_lock_init_recursive>:
 800a460:	4770      	bx	lr

0800a462 <__retarget_lock_acquire_recursive>:
 800a462:	4770      	bx	lr

0800a464 <__retarget_lock_release_recursive>:
 800a464:	4770      	bx	lr

0800a466 <memcpy>:
 800a466:	440a      	add	r2, r1
 800a468:	4291      	cmp	r1, r2
 800a46a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a46e:	d100      	bne.n	800a472 <memcpy+0xc>
 800a470:	4770      	bx	lr
 800a472:	b510      	push	{r4, lr}
 800a474:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a478:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a47c:	4291      	cmp	r1, r2
 800a47e:	d1f9      	bne.n	800a474 <memcpy+0xe>
 800a480:	bd10      	pop	{r4, pc}

0800a482 <abort>:
 800a482:	b508      	push	{r3, lr}
 800a484:	2006      	movs	r0, #6
 800a486:	f001 fd75 	bl	800bf74 <raise>
 800a48a:	2001      	movs	r0, #1
 800a48c:	f7f7 fb1a 	bl	8001ac4 <_exit>

0800a490 <quorem>:
 800a490:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a494:	6903      	ldr	r3, [r0, #16]
 800a496:	690c      	ldr	r4, [r1, #16]
 800a498:	42a3      	cmp	r3, r4
 800a49a:	4607      	mov	r7, r0
 800a49c:	db7e      	blt.n	800a59c <quorem+0x10c>
 800a49e:	3c01      	subs	r4, #1
 800a4a0:	f101 0814 	add.w	r8, r1, #20
 800a4a4:	f100 0514 	add.w	r5, r0, #20
 800a4a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4ac:	9301      	str	r3, [sp, #4]
 800a4ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a4b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a4be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a4c2:	fbb2 f6f3 	udiv	r6, r2, r3
 800a4c6:	d331      	bcc.n	800a52c <quorem+0x9c>
 800a4c8:	f04f 0e00 	mov.w	lr, #0
 800a4cc:	4640      	mov	r0, r8
 800a4ce:	46ac      	mov	ip, r5
 800a4d0:	46f2      	mov	sl, lr
 800a4d2:	f850 2b04 	ldr.w	r2, [r0], #4
 800a4d6:	b293      	uxth	r3, r2
 800a4d8:	fb06 e303 	mla	r3, r6, r3, lr
 800a4dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4e0:	0c1a      	lsrs	r2, r3, #16
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	ebaa 0303 	sub.w	r3, sl, r3
 800a4e8:	f8dc a000 	ldr.w	sl, [ip]
 800a4ec:	fa13 f38a 	uxtah	r3, r3, sl
 800a4f0:	fb06 220e 	mla	r2, r6, lr, r2
 800a4f4:	9300      	str	r3, [sp, #0]
 800a4f6:	9b00      	ldr	r3, [sp, #0]
 800a4f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4fc:	b292      	uxth	r2, r2
 800a4fe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a502:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a506:	f8bd 3000 	ldrh.w	r3, [sp]
 800a50a:	4581      	cmp	r9, r0
 800a50c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a510:	f84c 3b04 	str.w	r3, [ip], #4
 800a514:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a518:	d2db      	bcs.n	800a4d2 <quorem+0x42>
 800a51a:	f855 300b 	ldr.w	r3, [r5, fp]
 800a51e:	b92b      	cbnz	r3, 800a52c <quorem+0x9c>
 800a520:	9b01      	ldr	r3, [sp, #4]
 800a522:	3b04      	subs	r3, #4
 800a524:	429d      	cmp	r5, r3
 800a526:	461a      	mov	r2, r3
 800a528:	d32c      	bcc.n	800a584 <quorem+0xf4>
 800a52a:	613c      	str	r4, [r7, #16]
 800a52c:	4638      	mov	r0, r7
 800a52e:	f001 f9a5 	bl	800b87c <__mcmp>
 800a532:	2800      	cmp	r0, #0
 800a534:	db22      	blt.n	800a57c <quorem+0xec>
 800a536:	3601      	adds	r6, #1
 800a538:	4629      	mov	r1, r5
 800a53a:	2000      	movs	r0, #0
 800a53c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a540:	f8d1 c000 	ldr.w	ip, [r1]
 800a544:	b293      	uxth	r3, r2
 800a546:	1ac3      	subs	r3, r0, r3
 800a548:	0c12      	lsrs	r2, r2, #16
 800a54a:	fa13 f38c 	uxtah	r3, r3, ip
 800a54e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a552:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a556:	b29b      	uxth	r3, r3
 800a558:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a55c:	45c1      	cmp	r9, r8
 800a55e:	f841 3b04 	str.w	r3, [r1], #4
 800a562:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a566:	d2e9      	bcs.n	800a53c <quorem+0xac>
 800a568:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a56c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a570:	b922      	cbnz	r2, 800a57c <quorem+0xec>
 800a572:	3b04      	subs	r3, #4
 800a574:	429d      	cmp	r5, r3
 800a576:	461a      	mov	r2, r3
 800a578:	d30a      	bcc.n	800a590 <quorem+0x100>
 800a57a:	613c      	str	r4, [r7, #16]
 800a57c:	4630      	mov	r0, r6
 800a57e:	b003      	add	sp, #12
 800a580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a584:	6812      	ldr	r2, [r2, #0]
 800a586:	3b04      	subs	r3, #4
 800a588:	2a00      	cmp	r2, #0
 800a58a:	d1ce      	bne.n	800a52a <quorem+0x9a>
 800a58c:	3c01      	subs	r4, #1
 800a58e:	e7c9      	b.n	800a524 <quorem+0x94>
 800a590:	6812      	ldr	r2, [r2, #0]
 800a592:	3b04      	subs	r3, #4
 800a594:	2a00      	cmp	r2, #0
 800a596:	d1f0      	bne.n	800a57a <quorem+0xea>
 800a598:	3c01      	subs	r4, #1
 800a59a:	e7eb      	b.n	800a574 <quorem+0xe4>
 800a59c:	2000      	movs	r0, #0
 800a59e:	e7ee      	b.n	800a57e <quorem+0xee>

0800a5a0 <_dtoa_r>:
 800a5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a4:	ed2d 8b04 	vpush	{d8-d9}
 800a5a8:	69c5      	ldr	r5, [r0, #28]
 800a5aa:	b093      	sub	sp, #76	; 0x4c
 800a5ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a5b0:	ec57 6b10 	vmov	r6, r7, d0
 800a5b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a5b8:	9107      	str	r1, [sp, #28]
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	920a      	str	r2, [sp, #40]	; 0x28
 800a5be:	930d      	str	r3, [sp, #52]	; 0x34
 800a5c0:	b975      	cbnz	r5, 800a5e0 <_dtoa_r+0x40>
 800a5c2:	2010      	movs	r0, #16
 800a5c4:	f000 fe2a 	bl	800b21c <malloc>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	61e0      	str	r0, [r4, #28]
 800a5cc:	b920      	cbnz	r0, 800a5d8 <_dtoa_r+0x38>
 800a5ce:	4bae      	ldr	r3, [pc, #696]	; (800a888 <_dtoa_r+0x2e8>)
 800a5d0:	21ef      	movs	r1, #239	; 0xef
 800a5d2:	48ae      	ldr	r0, [pc, #696]	; (800a88c <_dtoa_r+0x2ec>)
 800a5d4:	f7ff f82a 	bl	800962c <__assert_func>
 800a5d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a5dc:	6005      	str	r5, [r0, #0]
 800a5de:	60c5      	str	r5, [r0, #12]
 800a5e0:	69e3      	ldr	r3, [r4, #28]
 800a5e2:	6819      	ldr	r1, [r3, #0]
 800a5e4:	b151      	cbz	r1, 800a5fc <_dtoa_r+0x5c>
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	604a      	str	r2, [r1, #4]
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	4093      	lsls	r3, r2
 800a5ee:	608b      	str	r3, [r1, #8]
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	f000 ff07 	bl	800b404 <_Bfree>
 800a5f6:	69e3      	ldr	r3, [r4, #28]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	601a      	str	r2, [r3, #0]
 800a5fc:	1e3b      	subs	r3, r7, #0
 800a5fe:	bfbb      	ittet	lt
 800a600:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a604:	9303      	strlt	r3, [sp, #12]
 800a606:	2300      	movge	r3, #0
 800a608:	2201      	movlt	r2, #1
 800a60a:	bfac      	ite	ge
 800a60c:	f8c8 3000 	strge.w	r3, [r8]
 800a610:	f8c8 2000 	strlt.w	r2, [r8]
 800a614:	4b9e      	ldr	r3, [pc, #632]	; (800a890 <_dtoa_r+0x2f0>)
 800a616:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a61a:	ea33 0308 	bics.w	r3, r3, r8
 800a61e:	d11b      	bne.n	800a658 <_dtoa_r+0xb8>
 800a620:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a622:	f242 730f 	movw	r3, #9999	; 0x270f
 800a626:	6013      	str	r3, [r2, #0]
 800a628:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a62c:	4333      	orrs	r3, r6
 800a62e:	f000 8593 	beq.w	800b158 <_dtoa_r+0xbb8>
 800a632:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a634:	b963      	cbnz	r3, 800a650 <_dtoa_r+0xb0>
 800a636:	4b97      	ldr	r3, [pc, #604]	; (800a894 <_dtoa_r+0x2f4>)
 800a638:	e027      	b.n	800a68a <_dtoa_r+0xea>
 800a63a:	4b97      	ldr	r3, [pc, #604]	; (800a898 <_dtoa_r+0x2f8>)
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	3308      	adds	r3, #8
 800a640:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a642:	6013      	str	r3, [r2, #0]
 800a644:	9800      	ldr	r0, [sp, #0]
 800a646:	b013      	add	sp, #76	; 0x4c
 800a648:	ecbd 8b04 	vpop	{d8-d9}
 800a64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a650:	4b90      	ldr	r3, [pc, #576]	; (800a894 <_dtoa_r+0x2f4>)
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	3303      	adds	r3, #3
 800a656:	e7f3      	b.n	800a640 <_dtoa_r+0xa0>
 800a658:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a65c:	2200      	movs	r2, #0
 800a65e:	ec51 0b17 	vmov	r0, r1, d7
 800a662:	eeb0 8a47 	vmov.f32	s16, s14
 800a666:	eef0 8a67 	vmov.f32	s17, s15
 800a66a:	2300      	movs	r3, #0
 800a66c:	f7f6 fa2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a670:	4681      	mov	r9, r0
 800a672:	b160      	cbz	r0, 800a68e <_dtoa_r+0xee>
 800a674:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a676:	2301      	movs	r3, #1
 800a678:	6013      	str	r3, [r2, #0]
 800a67a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f000 8568 	beq.w	800b152 <_dtoa_r+0xbb2>
 800a682:	4b86      	ldr	r3, [pc, #536]	; (800a89c <_dtoa_r+0x2fc>)
 800a684:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a686:	6013      	str	r3, [r2, #0]
 800a688:	3b01      	subs	r3, #1
 800a68a:	9300      	str	r3, [sp, #0]
 800a68c:	e7da      	b.n	800a644 <_dtoa_r+0xa4>
 800a68e:	aa10      	add	r2, sp, #64	; 0x40
 800a690:	a911      	add	r1, sp, #68	; 0x44
 800a692:	4620      	mov	r0, r4
 800a694:	eeb0 0a48 	vmov.f32	s0, s16
 800a698:	eef0 0a68 	vmov.f32	s1, s17
 800a69c:	f001 f994 	bl	800b9c8 <__d2b>
 800a6a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a6a4:	4682      	mov	sl, r0
 800a6a6:	2d00      	cmp	r5, #0
 800a6a8:	d07f      	beq.n	800a7aa <_dtoa_r+0x20a>
 800a6aa:	ee18 3a90 	vmov	r3, s17
 800a6ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a6b6:	ec51 0b18 	vmov	r0, r1, d8
 800a6ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a6be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a6c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	4b75      	ldr	r3, [pc, #468]	; (800a8a0 <_dtoa_r+0x300>)
 800a6cc:	f7f5 fddc 	bl	8000288 <__aeabi_dsub>
 800a6d0:	a367      	add	r3, pc, #412	; (adr r3, 800a870 <_dtoa_r+0x2d0>)
 800a6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d6:	f7f5 ff8f 	bl	80005f8 <__aeabi_dmul>
 800a6da:	a367      	add	r3, pc, #412	; (adr r3, 800a878 <_dtoa_r+0x2d8>)
 800a6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e0:	f7f5 fdd4 	bl	800028c <__adddf3>
 800a6e4:	4606      	mov	r6, r0
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	460f      	mov	r7, r1
 800a6ea:	f7f5 ff1b 	bl	8000524 <__aeabi_i2d>
 800a6ee:	a364      	add	r3, pc, #400	; (adr r3, 800a880 <_dtoa_r+0x2e0>)
 800a6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f4:	f7f5 ff80 	bl	80005f8 <__aeabi_dmul>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	4639      	mov	r1, r7
 800a700:	f7f5 fdc4 	bl	800028c <__adddf3>
 800a704:	4606      	mov	r6, r0
 800a706:	460f      	mov	r7, r1
 800a708:	f7f6 fa26 	bl	8000b58 <__aeabi_d2iz>
 800a70c:	2200      	movs	r2, #0
 800a70e:	4683      	mov	fp, r0
 800a710:	2300      	movs	r3, #0
 800a712:	4630      	mov	r0, r6
 800a714:	4639      	mov	r1, r7
 800a716:	f7f6 f9e1 	bl	8000adc <__aeabi_dcmplt>
 800a71a:	b148      	cbz	r0, 800a730 <_dtoa_r+0x190>
 800a71c:	4658      	mov	r0, fp
 800a71e:	f7f5 ff01 	bl	8000524 <__aeabi_i2d>
 800a722:	4632      	mov	r2, r6
 800a724:	463b      	mov	r3, r7
 800a726:	f7f6 f9cf 	bl	8000ac8 <__aeabi_dcmpeq>
 800a72a:	b908      	cbnz	r0, 800a730 <_dtoa_r+0x190>
 800a72c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a730:	f1bb 0f16 	cmp.w	fp, #22
 800a734:	d857      	bhi.n	800a7e6 <_dtoa_r+0x246>
 800a736:	4b5b      	ldr	r3, [pc, #364]	; (800a8a4 <_dtoa_r+0x304>)
 800a738:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a740:	ec51 0b18 	vmov	r0, r1, d8
 800a744:	f7f6 f9ca 	bl	8000adc <__aeabi_dcmplt>
 800a748:	2800      	cmp	r0, #0
 800a74a:	d04e      	beq.n	800a7ea <_dtoa_r+0x24a>
 800a74c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a750:	2300      	movs	r3, #0
 800a752:	930c      	str	r3, [sp, #48]	; 0x30
 800a754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a756:	1b5b      	subs	r3, r3, r5
 800a758:	1e5a      	subs	r2, r3, #1
 800a75a:	bf45      	ittet	mi
 800a75c:	f1c3 0301 	rsbmi	r3, r3, #1
 800a760:	9305      	strmi	r3, [sp, #20]
 800a762:	2300      	movpl	r3, #0
 800a764:	2300      	movmi	r3, #0
 800a766:	9206      	str	r2, [sp, #24]
 800a768:	bf54      	ite	pl
 800a76a:	9305      	strpl	r3, [sp, #20]
 800a76c:	9306      	strmi	r3, [sp, #24]
 800a76e:	f1bb 0f00 	cmp.w	fp, #0
 800a772:	db3c      	blt.n	800a7ee <_dtoa_r+0x24e>
 800a774:	9b06      	ldr	r3, [sp, #24]
 800a776:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a77a:	445b      	add	r3, fp
 800a77c:	9306      	str	r3, [sp, #24]
 800a77e:	2300      	movs	r3, #0
 800a780:	9308      	str	r3, [sp, #32]
 800a782:	9b07      	ldr	r3, [sp, #28]
 800a784:	2b09      	cmp	r3, #9
 800a786:	d868      	bhi.n	800a85a <_dtoa_r+0x2ba>
 800a788:	2b05      	cmp	r3, #5
 800a78a:	bfc4      	itt	gt
 800a78c:	3b04      	subgt	r3, #4
 800a78e:	9307      	strgt	r3, [sp, #28]
 800a790:	9b07      	ldr	r3, [sp, #28]
 800a792:	f1a3 0302 	sub.w	r3, r3, #2
 800a796:	bfcc      	ite	gt
 800a798:	2500      	movgt	r5, #0
 800a79a:	2501      	movle	r5, #1
 800a79c:	2b03      	cmp	r3, #3
 800a79e:	f200 8085 	bhi.w	800a8ac <_dtoa_r+0x30c>
 800a7a2:	e8df f003 	tbb	[pc, r3]
 800a7a6:	3b2e      	.short	0x3b2e
 800a7a8:	5839      	.short	0x5839
 800a7aa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a7ae:	441d      	add	r5, r3
 800a7b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a7b4:	2b20      	cmp	r3, #32
 800a7b6:	bfc1      	itttt	gt
 800a7b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a7bc:	fa08 f803 	lslgt.w	r8, r8, r3
 800a7c0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a7c4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a7c8:	bfd6      	itet	le
 800a7ca:	f1c3 0320 	rsble	r3, r3, #32
 800a7ce:	ea48 0003 	orrgt.w	r0, r8, r3
 800a7d2:	fa06 f003 	lslle.w	r0, r6, r3
 800a7d6:	f7f5 fe95 	bl	8000504 <__aeabi_ui2d>
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a7e0:	3d01      	subs	r5, #1
 800a7e2:	920e      	str	r2, [sp, #56]	; 0x38
 800a7e4:	e76f      	b.n	800a6c6 <_dtoa_r+0x126>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e7b3      	b.n	800a752 <_dtoa_r+0x1b2>
 800a7ea:	900c      	str	r0, [sp, #48]	; 0x30
 800a7ec:	e7b2      	b.n	800a754 <_dtoa_r+0x1b4>
 800a7ee:	9b05      	ldr	r3, [sp, #20]
 800a7f0:	eba3 030b 	sub.w	r3, r3, fp
 800a7f4:	9305      	str	r3, [sp, #20]
 800a7f6:	f1cb 0300 	rsb	r3, fp, #0
 800a7fa:	9308      	str	r3, [sp, #32]
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800a800:	e7bf      	b.n	800a782 <_dtoa_r+0x1e2>
 800a802:	2300      	movs	r3, #0
 800a804:	9309      	str	r3, [sp, #36]	; 0x24
 800a806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a808:	2b00      	cmp	r3, #0
 800a80a:	dc52      	bgt.n	800a8b2 <_dtoa_r+0x312>
 800a80c:	2301      	movs	r3, #1
 800a80e:	9301      	str	r3, [sp, #4]
 800a810:	9304      	str	r3, [sp, #16]
 800a812:	461a      	mov	r2, r3
 800a814:	920a      	str	r2, [sp, #40]	; 0x28
 800a816:	e00b      	b.n	800a830 <_dtoa_r+0x290>
 800a818:	2301      	movs	r3, #1
 800a81a:	e7f3      	b.n	800a804 <_dtoa_r+0x264>
 800a81c:	2300      	movs	r3, #0
 800a81e:	9309      	str	r3, [sp, #36]	; 0x24
 800a820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a822:	445b      	add	r3, fp
 800a824:	9301      	str	r3, [sp, #4]
 800a826:	3301      	adds	r3, #1
 800a828:	2b01      	cmp	r3, #1
 800a82a:	9304      	str	r3, [sp, #16]
 800a82c:	bfb8      	it	lt
 800a82e:	2301      	movlt	r3, #1
 800a830:	69e0      	ldr	r0, [r4, #28]
 800a832:	2100      	movs	r1, #0
 800a834:	2204      	movs	r2, #4
 800a836:	f102 0614 	add.w	r6, r2, #20
 800a83a:	429e      	cmp	r6, r3
 800a83c:	d93d      	bls.n	800a8ba <_dtoa_r+0x31a>
 800a83e:	6041      	str	r1, [r0, #4]
 800a840:	4620      	mov	r0, r4
 800a842:	f000 fd9f 	bl	800b384 <_Balloc>
 800a846:	9000      	str	r0, [sp, #0]
 800a848:	2800      	cmp	r0, #0
 800a84a:	d139      	bne.n	800a8c0 <_dtoa_r+0x320>
 800a84c:	4b16      	ldr	r3, [pc, #88]	; (800a8a8 <_dtoa_r+0x308>)
 800a84e:	4602      	mov	r2, r0
 800a850:	f240 11af 	movw	r1, #431	; 0x1af
 800a854:	e6bd      	b.n	800a5d2 <_dtoa_r+0x32>
 800a856:	2301      	movs	r3, #1
 800a858:	e7e1      	b.n	800a81e <_dtoa_r+0x27e>
 800a85a:	2501      	movs	r5, #1
 800a85c:	2300      	movs	r3, #0
 800a85e:	9307      	str	r3, [sp, #28]
 800a860:	9509      	str	r5, [sp, #36]	; 0x24
 800a862:	f04f 33ff 	mov.w	r3, #4294967295
 800a866:	9301      	str	r3, [sp, #4]
 800a868:	9304      	str	r3, [sp, #16]
 800a86a:	2200      	movs	r2, #0
 800a86c:	2312      	movs	r3, #18
 800a86e:	e7d1      	b.n	800a814 <_dtoa_r+0x274>
 800a870:	636f4361 	.word	0x636f4361
 800a874:	3fd287a7 	.word	0x3fd287a7
 800a878:	8b60c8b3 	.word	0x8b60c8b3
 800a87c:	3fc68a28 	.word	0x3fc68a28
 800a880:	509f79fb 	.word	0x509f79fb
 800a884:	3fd34413 	.word	0x3fd34413
 800a888:	0800c3f9 	.word	0x0800c3f9
 800a88c:	0800c410 	.word	0x0800c410
 800a890:	7ff00000 	.word	0x7ff00000
 800a894:	0800c3f5 	.word	0x0800c3f5
 800a898:	0800c3ec 	.word	0x0800c3ec
 800a89c:	0800c3c9 	.word	0x0800c3c9
 800a8a0:	3ff80000 	.word	0x3ff80000
 800a8a4:	0800c500 	.word	0x0800c500
 800a8a8:	0800c468 	.word	0x0800c468
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a8b0:	e7d7      	b.n	800a862 <_dtoa_r+0x2c2>
 800a8b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8b4:	9301      	str	r3, [sp, #4]
 800a8b6:	9304      	str	r3, [sp, #16]
 800a8b8:	e7ba      	b.n	800a830 <_dtoa_r+0x290>
 800a8ba:	3101      	adds	r1, #1
 800a8bc:	0052      	lsls	r2, r2, #1
 800a8be:	e7ba      	b.n	800a836 <_dtoa_r+0x296>
 800a8c0:	69e3      	ldr	r3, [r4, #28]
 800a8c2:	9a00      	ldr	r2, [sp, #0]
 800a8c4:	601a      	str	r2, [r3, #0]
 800a8c6:	9b04      	ldr	r3, [sp, #16]
 800a8c8:	2b0e      	cmp	r3, #14
 800a8ca:	f200 80a8 	bhi.w	800aa1e <_dtoa_r+0x47e>
 800a8ce:	2d00      	cmp	r5, #0
 800a8d0:	f000 80a5 	beq.w	800aa1e <_dtoa_r+0x47e>
 800a8d4:	f1bb 0f00 	cmp.w	fp, #0
 800a8d8:	dd38      	ble.n	800a94c <_dtoa_r+0x3ac>
 800a8da:	4bc0      	ldr	r3, [pc, #768]	; (800abdc <_dtoa_r+0x63c>)
 800a8dc:	f00b 020f 	and.w	r2, fp, #15
 800a8e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a8e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a8ec:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a8f0:	d019      	beq.n	800a926 <_dtoa_r+0x386>
 800a8f2:	4bbb      	ldr	r3, [pc, #748]	; (800abe0 <_dtoa_r+0x640>)
 800a8f4:	ec51 0b18 	vmov	r0, r1, d8
 800a8f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a8fc:	f7f5 ffa6 	bl	800084c <__aeabi_ddiv>
 800a900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a904:	f008 080f 	and.w	r8, r8, #15
 800a908:	2503      	movs	r5, #3
 800a90a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800abe0 <_dtoa_r+0x640>
 800a90e:	f1b8 0f00 	cmp.w	r8, #0
 800a912:	d10a      	bne.n	800a92a <_dtoa_r+0x38a>
 800a914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a918:	4632      	mov	r2, r6
 800a91a:	463b      	mov	r3, r7
 800a91c:	f7f5 ff96 	bl	800084c <__aeabi_ddiv>
 800a920:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a924:	e02b      	b.n	800a97e <_dtoa_r+0x3de>
 800a926:	2502      	movs	r5, #2
 800a928:	e7ef      	b.n	800a90a <_dtoa_r+0x36a>
 800a92a:	f018 0f01 	tst.w	r8, #1
 800a92e:	d008      	beq.n	800a942 <_dtoa_r+0x3a2>
 800a930:	4630      	mov	r0, r6
 800a932:	4639      	mov	r1, r7
 800a934:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a938:	f7f5 fe5e 	bl	80005f8 <__aeabi_dmul>
 800a93c:	3501      	adds	r5, #1
 800a93e:	4606      	mov	r6, r0
 800a940:	460f      	mov	r7, r1
 800a942:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a946:	f109 0908 	add.w	r9, r9, #8
 800a94a:	e7e0      	b.n	800a90e <_dtoa_r+0x36e>
 800a94c:	f000 809f 	beq.w	800aa8e <_dtoa_r+0x4ee>
 800a950:	f1cb 0600 	rsb	r6, fp, #0
 800a954:	4ba1      	ldr	r3, [pc, #644]	; (800abdc <_dtoa_r+0x63c>)
 800a956:	4fa2      	ldr	r7, [pc, #648]	; (800abe0 <_dtoa_r+0x640>)
 800a958:	f006 020f 	and.w	r2, r6, #15
 800a95c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a964:	ec51 0b18 	vmov	r0, r1, d8
 800a968:	f7f5 fe46 	bl	80005f8 <__aeabi_dmul>
 800a96c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a970:	1136      	asrs	r6, r6, #4
 800a972:	2300      	movs	r3, #0
 800a974:	2502      	movs	r5, #2
 800a976:	2e00      	cmp	r6, #0
 800a978:	d17e      	bne.n	800aa78 <_dtoa_r+0x4d8>
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1d0      	bne.n	800a920 <_dtoa_r+0x380>
 800a97e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a980:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 8084 	beq.w	800aa92 <_dtoa_r+0x4f2>
 800a98a:	4b96      	ldr	r3, [pc, #600]	; (800abe4 <_dtoa_r+0x644>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	4640      	mov	r0, r8
 800a990:	4649      	mov	r1, r9
 800a992:	f7f6 f8a3 	bl	8000adc <__aeabi_dcmplt>
 800a996:	2800      	cmp	r0, #0
 800a998:	d07b      	beq.n	800aa92 <_dtoa_r+0x4f2>
 800a99a:	9b04      	ldr	r3, [sp, #16]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d078      	beq.n	800aa92 <_dtoa_r+0x4f2>
 800a9a0:	9b01      	ldr	r3, [sp, #4]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	dd39      	ble.n	800aa1a <_dtoa_r+0x47a>
 800a9a6:	4b90      	ldr	r3, [pc, #576]	; (800abe8 <_dtoa_r+0x648>)
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	4640      	mov	r0, r8
 800a9ac:	4649      	mov	r1, r9
 800a9ae:	f7f5 fe23 	bl	80005f8 <__aeabi_dmul>
 800a9b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9b6:	9e01      	ldr	r6, [sp, #4]
 800a9b8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a9bc:	3501      	adds	r5, #1
 800a9be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	f7f5 fdae 	bl	8000524 <__aeabi_i2d>
 800a9c8:	4642      	mov	r2, r8
 800a9ca:	464b      	mov	r3, r9
 800a9cc:	f7f5 fe14 	bl	80005f8 <__aeabi_dmul>
 800a9d0:	4b86      	ldr	r3, [pc, #536]	; (800abec <_dtoa_r+0x64c>)
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f7f5 fc5a 	bl	800028c <__adddf3>
 800a9d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a9dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9e0:	9303      	str	r3, [sp, #12]
 800a9e2:	2e00      	cmp	r6, #0
 800a9e4:	d158      	bne.n	800aa98 <_dtoa_r+0x4f8>
 800a9e6:	4b82      	ldr	r3, [pc, #520]	; (800abf0 <_dtoa_r+0x650>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	4640      	mov	r0, r8
 800a9ec:	4649      	mov	r1, r9
 800a9ee:	f7f5 fc4b 	bl	8000288 <__aeabi_dsub>
 800a9f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9f6:	4680      	mov	r8, r0
 800a9f8:	4689      	mov	r9, r1
 800a9fa:	f7f6 f88d 	bl	8000b18 <__aeabi_dcmpgt>
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	f040 8296 	bne.w	800af30 <_dtoa_r+0x990>
 800aa04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800aa08:	4640      	mov	r0, r8
 800aa0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa0e:	4649      	mov	r1, r9
 800aa10:	f7f6 f864 	bl	8000adc <__aeabi_dcmplt>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	f040 8289 	bne.w	800af2c <_dtoa_r+0x98c>
 800aa1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800aa1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f2c0 814e 	blt.w	800acc2 <_dtoa_r+0x722>
 800aa26:	f1bb 0f0e 	cmp.w	fp, #14
 800aa2a:	f300 814a 	bgt.w	800acc2 <_dtoa_r+0x722>
 800aa2e:	4b6b      	ldr	r3, [pc, #428]	; (800abdc <_dtoa_r+0x63c>)
 800aa30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aa34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f280 80dc 	bge.w	800abf8 <_dtoa_r+0x658>
 800aa40:	9b04      	ldr	r3, [sp, #16]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f300 80d8 	bgt.w	800abf8 <_dtoa_r+0x658>
 800aa48:	f040 826f 	bne.w	800af2a <_dtoa_r+0x98a>
 800aa4c:	4b68      	ldr	r3, [pc, #416]	; (800abf0 <_dtoa_r+0x650>)
 800aa4e:	2200      	movs	r2, #0
 800aa50:	4640      	mov	r0, r8
 800aa52:	4649      	mov	r1, r9
 800aa54:	f7f5 fdd0 	bl	80005f8 <__aeabi_dmul>
 800aa58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa5c:	f7f6 f852 	bl	8000b04 <__aeabi_dcmpge>
 800aa60:	9e04      	ldr	r6, [sp, #16]
 800aa62:	4637      	mov	r7, r6
 800aa64:	2800      	cmp	r0, #0
 800aa66:	f040 8245 	bne.w	800aef4 <_dtoa_r+0x954>
 800aa6a:	9d00      	ldr	r5, [sp, #0]
 800aa6c:	2331      	movs	r3, #49	; 0x31
 800aa6e:	f805 3b01 	strb.w	r3, [r5], #1
 800aa72:	f10b 0b01 	add.w	fp, fp, #1
 800aa76:	e241      	b.n	800aefc <_dtoa_r+0x95c>
 800aa78:	07f2      	lsls	r2, r6, #31
 800aa7a:	d505      	bpl.n	800aa88 <_dtoa_r+0x4e8>
 800aa7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa80:	f7f5 fdba 	bl	80005f8 <__aeabi_dmul>
 800aa84:	3501      	adds	r5, #1
 800aa86:	2301      	movs	r3, #1
 800aa88:	1076      	asrs	r6, r6, #1
 800aa8a:	3708      	adds	r7, #8
 800aa8c:	e773      	b.n	800a976 <_dtoa_r+0x3d6>
 800aa8e:	2502      	movs	r5, #2
 800aa90:	e775      	b.n	800a97e <_dtoa_r+0x3de>
 800aa92:	9e04      	ldr	r6, [sp, #16]
 800aa94:	465f      	mov	r7, fp
 800aa96:	e792      	b.n	800a9be <_dtoa_r+0x41e>
 800aa98:	9900      	ldr	r1, [sp, #0]
 800aa9a:	4b50      	ldr	r3, [pc, #320]	; (800abdc <_dtoa_r+0x63c>)
 800aa9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aaa0:	4431      	add	r1, r6
 800aaa2:	9102      	str	r1, [sp, #8]
 800aaa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aaa6:	eeb0 9a47 	vmov.f32	s18, s14
 800aaaa:	eef0 9a67 	vmov.f32	s19, s15
 800aaae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aab2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aab6:	2900      	cmp	r1, #0
 800aab8:	d044      	beq.n	800ab44 <_dtoa_r+0x5a4>
 800aaba:	494e      	ldr	r1, [pc, #312]	; (800abf4 <_dtoa_r+0x654>)
 800aabc:	2000      	movs	r0, #0
 800aabe:	f7f5 fec5 	bl	800084c <__aeabi_ddiv>
 800aac2:	ec53 2b19 	vmov	r2, r3, d9
 800aac6:	f7f5 fbdf 	bl	8000288 <__aeabi_dsub>
 800aaca:	9d00      	ldr	r5, [sp, #0]
 800aacc:	ec41 0b19 	vmov	d9, r0, r1
 800aad0:	4649      	mov	r1, r9
 800aad2:	4640      	mov	r0, r8
 800aad4:	f7f6 f840 	bl	8000b58 <__aeabi_d2iz>
 800aad8:	4606      	mov	r6, r0
 800aada:	f7f5 fd23 	bl	8000524 <__aeabi_i2d>
 800aade:	4602      	mov	r2, r0
 800aae0:	460b      	mov	r3, r1
 800aae2:	4640      	mov	r0, r8
 800aae4:	4649      	mov	r1, r9
 800aae6:	f7f5 fbcf 	bl	8000288 <__aeabi_dsub>
 800aaea:	3630      	adds	r6, #48	; 0x30
 800aaec:	f805 6b01 	strb.w	r6, [r5], #1
 800aaf0:	ec53 2b19 	vmov	r2, r3, d9
 800aaf4:	4680      	mov	r8, r0
 800aaf6:	4689      	mov	r9, r1
 800aaf8:	f7f5 fff0 	bl	8000adc <__aeabi_dcmplt>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	d164      	bne.n	800abca <_dtoa_r+0x62a>
 800ab00:	4642      	mov	r2, r8
 800ab02:	464b      	mov	r3, r9
 800ab04:	4937      	ldr	r1, [pc, #220]	; (800abe4 <_dtoa_r+0x644>)
 800ab06:	2000      	movs	r0, #0
 800ab08:	f7f5 fbbe 	bl	8000288 <__aeabi_dsub>
 800ab0c:	ec53 2b19 	vmov	r2, r3, d9
 800ab10:	f7f5 ffe4 	bl	8000adc <__aeabi_dcmplt>
 800ab14:	2800      	cmp	r0, #0
 800ab16:	f040 80b6 	bne.w	800ac86 <_dtoa_r+0x6e6>
 800ab1a:	9b02      	ldr	r3, [sp, #8]
 800ab1c:	429d      	cmp	r5, r3
 800ab1e:	f43f af7c 	beq.w	800aa1a <_dtoa_r+0x47a>
 800ab22:	4b31      	ldr	r3, [pc, #196]	; (800abe8 <_dtoa_r+0x648>)
 800ab24:	ec51 0b19 	vmov	r0, r1, d9
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f7f5 fd65 	bl	80005f8 <__aeabi_dmul>
 800ab2e:	4b2e      	ldr	r3, [pc, #184]	; (800abe8 <_dtoa_r+0x648>)
 800ab30:	ec41 0b19 	vmov	d9, r0, r1
 800ab34:	2200      	movs	r2, #0
 800ab36:	4640      	mov	r0, r8
 800ab38:	4649      	mov	r1, r9
 800ab3a:	f7f5 fd5d 	bl	80005f8 <__aeabi_dmul>
 800ab3e:	4680      	mov	r8, r0
 800ab40:	4689      	mov	r9, r1
 800ab42:	e7c5      	b.n	800aad0 <_dtoa_r+0x530>
 800ab44:	ec51 0b17 	vmov	r0, r1, d7
 800ab48:	f7f5 fd56 	bl	80005f8 <__aeabi_dmul>
 800ab4c:	9b02      	ldr	r3, [sp, #8]
 800ab4e:	9d00      	ldr	r5, [sp, #0]
 800ab50:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab52:	ec41 0b19 	vmov	d9, r0, r1
 800ab56:	4649      	mov	r1, r9
 800ab58:	4640      	mov	r0, r8
 800ab5a:	f7f5 fffd 	bl	8000b58 <__aeabi_d2iz>
 800ab5e:	4606      	mov	r6, r0
 800ab60:	f7f5 fce0 	bl	8000524 <__aeabi_i2d>
 800ab64:	3630      	adds	r6, #48	; 0x30
 800ab66:	4602      	mov	r2, r0
 800ab68:	460b      	mov	r3, r1
 800ab6a:	4640      	mov	r0, r8
 800ab6c:	4649      	mov	r1, r9
 800ab6e:	f7f5 fb8b 	bl	8000288 <__aeabi_dsub>
 800ab72:	f805 6b01 	strb.w	r6, [r5], #1
 800ab76:	9b02      	ldr	r3, [sp, #8]
 800ab78:	429d      	cmp	r5, r3
 800ab7a:	4680      	mov	r8, r0
 800ab7c:	4689      	mov	r9, r1
 800ab7e:	f04f 0200 	mov.w	r2, #0
 800ab82:	d124      	bne.n	800abce <_dtoa_r+0x62e>
 800ab84:	4b1b      	ldr	r3, [pc, #108]	; (800abf4 <_dtoa_r+0x654>)
 800ab86:	ec51 0b19 	vmov	r0, r1, d9
 800ab8a:	f7f5 fb7f 	bl	800028c <__adddf3>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	460b      	mov	r3, r1
 800ab92:	4640      	mov	r0, r8
 800ab94:	4649      	mov	r1, r9
 800ab96:	f7f5 ffbf 	bl	8000b18 <__aeabi_dcmpgt>
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	d173      	bne.n	800ac86 <_dtoa_r+0x6e6>
 800ab9e:	ec53 2b19 	vmov	r2, r3, d9
 800aba2:	4914      	ldr	r1, [pc, #80]	; (800abf4 <_dtoa_r+0x654>)
 800aba4:	2000      	movs	r0, #0
 800aba6:	f7f5 fb6f 	bl	8000288 <__aeabi_dsub>
 800abaa:	4602      	mov	r2, r0
 800abac:	460b      	mov	r3, r1
 800abae:	4640      	mov	r0, r8
 800abb0:	4649      	mov	r1, r9
 800abb2:	f7f5 ff93 	bl	8000adc <__aeabi_dcmplt>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	f43f af2f 	beq.w	800aa1a <_dtoa_r+0x47a>
 800abbc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800abbe:	1e6b      	subs	r3, r5, #1
 800abc0:	930f      	str	r3, [sp, #60]	; 0x3c
 800abc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abc6:	2b30      	cmp	r3, #48	; 0x30
 800abc8:	d0f8      	beq.n	800abbc <_dtoa_r+0x61c>
 800abca:	46bb      	mov	fp, r7
 800abcc:	e04a      	b.n	800ac64 <_dtoa_r+0x6c4>
 800abce:	4b06      	ldr	r3, [pc, #24]	; (800abe8 <_dtoa_r+0x648>)
 800abd0:	f7f5 fd12 	bl	80005f8 <__aeabi_dmul>
 800abd4:	4680      	mov	r8, r0
 800abd6:	4689      	mov	r9, r1
 800abd8:	e7bd      	b.n	800ab56 <_dtoa_r+0x5b6>
 800abda:	bf00      	nop
 800abdc:	0800c500 	.word	0x0800c500
 800abe0:	0800c4d8 	.word	0x0800c4d8
 800abe4:	3ff00000 	.word	0x3ff00000
 800abe8:	40240000 	.word	0x40240000
 800abec:	401c0000 	.word	0x401c0000
 800abf0:	40140000 	.word	0x40140000
 800abf4:	3fe00000 	.word	0x3fe00000
 800abf8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800abfc:	9d00      	ldr	r5, [sp, #0]
 800abfe:	4642      	mov	r2, r8
 800ac00:	464b      	mov	r3, r9
 800ac02:	4630      	mov	r0, r6
 800ac04:	4639      	mov	r1, r7
 800ac06:	f7f5 fe21 	bl	800084c <__aeabi_ddiv>
 800ac0a:	f7f5 ffa5 	bl	8000b58 <__aeabi_d2iz>
 800ac0e:	9001      	str	r0, [sp, #4]
 800ac10:	f7f5 fc88 	bl	8000524 <__aeabi_i2d>
 800ac14:	4642      	mov	r2, r8
 800ac16:	464b      	mov	r3, r9
 800ac18:	f7f5 fcee 	bl	80005f8 <__aeabi_dmul>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	460b      	mov	r3, r1
 800ac20:	4630      	mov	r0, r6
 800ac22:	4639      	mov	r1, r7
 800ac24:	f7f5 fb30 	bl	8000288 <__aeabi_dsub>
 800ac28:	9e01      	ldr	r6, [sp, #4]
 800ac2a:	9f04      	ldr	r7, [sp, #16]
 800ac2c:	3630      	adds	r6, #48	; 0x30
 800ac2e:	f805 6b01 	strb.w	r6, [r5], #1
 800ac32:	9e00      	ldr	r6, [sp, #0]
 800ac34:	1bae      	subs	r6, r5, r6
 800ac36:	42b7      	cmp	r7, r6
 800ac38:	4602      	mov	r2, r0
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	d134      	bne.n	800aca8 <_dtoa_r+0x708>
 800ac3e:	f7f5 fb25 	bl	800028c <__adddf3>
 800ac42:	4642      	mov	r2, r8
 800ac44:	464b      	mov	r3, r9
 800ac46:	4606      	mov	r6, r0
 800ac48:	460f      	mov	r7, r1
 800ac4a:	f7f5 ff65 	bl	8000b18 <__aeabi_dcmpgt>
 800ac4e:	b9c8      	cbnz	r0, 800ac84 <_dtoa_r+0x6e4>
 800ac50:	4642      	mov	r2, r8
 800ac52:	464b      	mov	r3, r9
 800ac54:	4630      	mov	r0, r6
 800ac56:	4639      	mov	r1, r7
 800ac58:	f7f5 ff36 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac5c:	b110      	cbz	r0, 800ac64 <_dtoa_r+0x6c4>
 800ac5e:	9b01      	ldr	r3, [sp, #4]
 800ac60:	07db      	lsls	r3, r3, #31
 800ac62:	d40f      	bmi.n	800ac84 <_dtoa_r+0x6e4>
 800ac64:	4651      	mov	r1, sl
 800ac66:	4620      	mov	r0, r4
 800ac68:	f000 fbcc 	bl	800b404 <_Bfree>
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac70:	702b      	strb	r3, [r5, #0]
 800ac72:	f10b 0301 	add.w	r3, fp, #1
 800ac76:	6013      	str	r3, [r2, #0]
 800ac78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f43f ace2 	beq.w	800a644 <_dtoa_r+0xa4>
 800ac80:	601d      	str	r5, [r3, #0]
 800ac82:	e4df      	b.n	800a644 <_dtoa_r+0xa4>
 800ac84:	465f      	mov	r7, fp
 800ac86:	462b      	mov	r3, r5
 800ac88:	461d      	mov	r5, r3
 800ac8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac8e:	2a39      	cmp	r2, #57	; 0x39
 800ac90:	d106      	bne.n	800aca0 <_dtoa_r+0x700>
 800ac92:	9a00      	ldr	r2, [sp, #0]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d1f7      	bne.n	800ac88 <_dtoa_r+0x6e8>
 800ac98:	9900      	ldr	r1, [sp, #0]
 800ac9a:	2230      	movs	r2, #48	; 0x30
 800ac9c:	3701      	adds	r7, #1
 800ac9e:	700a      	strb	r2, [r1, #0]
 800aca0:	781a      	ldrb	r2, [r3, #0]
 800aca2:	3201      	adds	r2, #1
 800aca4:	701a      	strb	r2, [r3, #0]
 800aca6:	e790      	b.n	800abca <_dtoa_r+0x62a>
 800aca8:	4ba3      	ldr	r3, [pc, #652]	; (800af38 <_dtoa_r+0x998>)
 800acaa:	2200      	movs	r2, #0
 800acac:	f7f5 fca4 	bl	80005f8 <__aeabi_dmul>
 800acb0:	2200      	movs	r2, #0
 800acb2:	2300      	movs	r3, #0
 800acb4:	4606      	mov	r6, r0
 800acb6:	460f      	mov	r7, r1
 800acb8:	f7f5 ff06 	bl	8000ac8 <__aeabi_dcmpeq>
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d09e      	beq.n	800abfe <_dtoa_r+0x65e>
 800acc0:	e7d0      	b.n	800ac64 <_dtoa_r+0x6c4>
 800acc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acc4:	2a00      	cmp	r2, #0
 800acc6:	f000 80ca 	beq.w	800ae5e <_dtoa_r+0x8be>
 800acca:	9a07      	ldr	r2, [sp, #28]
 800accc:	2a01      	cmp	r2, #1
 800acce:	f300 80ad 	bgt.w	800ae2c <_dtoa_r+0x88c>
 800acd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acd4:	2a00      	cmp	r2, #0
 800acd6:	f000 80a5 	beq.w	800ae24 <_dtoa_r+0x884>
 800acda:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800acde:	9e08      	ldr	r6, [sp, #32]
 800ace0:	9d05      	ldr	r5, [sp, #20]
 800ace2:	9a05      	ldr	r2, [sp, #20]
 800ace4:	441a      	add	r2, r3
 800ace6:	9205      	str	r2, [sp, #20]
 800ace8:	9a06      	ldr	r2, [sp, #24]
 800acea:	2101      	movs	r1, #1
 800acec:	441a      	add	r2, r3
 800acee:	4620      	mov	r0, r4
 800acf0:	9206      	str	r2, [sp, #24]
 800acf2:	f000 fc3d 	bl	800b570 <__i2b>
 800acf6:	4607      	mov	r7, r0
 800acf8:	b165      	cbz	r5, 800ad14 <_dtoa_r+0x774>
 800acfa:	9b06      	ldr	r3, [sp, #24]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	dd09      	ble.n	800ad14 <_dtoa_r+0x774>
 800ad00:	42ab      	cmp	r3, r5
 800ad02:	9a05      	ldr	r2, [sp, #20]
 800ad04:	bfa8      	it	ge
 800ad06:	462b      	movge	r3, r5
 800ad08:	1ad2      	subs	r2, r2, r3
 800ad0a:	9205      	str	r2, [sp, #20]
 800ad0c:	9a06      	ldr	r2, [sp, #24]
 800ad0e:	1aed      	subs	r5, r5, r3
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	9306      	str	r3, [sp, #24]
 800ad14:	9b08      	ldr	r3, [sp, #32]
 800ad16:	b1f3      	cbz	r3, 800ad56 <_dtoa_r+0x7b6>
 800ad18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f000 80a3 	beq.w	800ae66 <_dtoa_r+0x8c6>
 800ad20:	2e00      	cmp	r6, #0
 800ad22:	dd10      	ble.n	800ad46 <_dtoa_r+0x7a6>
 800ad24:	4639      	mov	r1, r7
 800ad26:	4632      	mov	r2, r6
 800ad28:	4620      	mov	r0, r4
 800ad2a:	f000 fce1 	bl	800b6f0 <__pow5mult>
 800ad2e:	4652      	mov	r2, sl
 800ad30:	4601      	mov	r1, r0
 800ad32:	4607      	mov	r7, r0
 800ad34:	4620      	mov	r0, r4
 800ad36:	f000 fc31 	bl	800b59c <__multiply>
 800ad3a:	4651      	mov	r1, sl
 800ad3c:	4680      	mov	r8, r0
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f000 fb60 	bl	800b404 <_Bfree>
 800ad44:	46c2      	mov	sl, r8
 800ad46:	9b08      	ldr	r3, [sp, #32]
 800ad48:	1b9a      	subs	r2, r3, r6
 800ad4a:	d004      	beq.n	800ad56 <_dtoa_r+0x7b6>
 800ad4c:	4651      	mov	r1, sl
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f000 fcce 	bl	800b6f0 <__pow5mult>
 800ad54:	4682      	mov	sl, r0
 800ad56:	2101      	movs	r1, #1
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f000 fc09 	bl	800b570 <__i2b>
 800ad5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	4606      	mov	r6, r0
 800ad64:	f340 8081 	ble.w	800ae6a <_dtoa_r+0x8ca>
 800ad68:	461a      	mov	r2, r3
 800ad6a:	4601      	mov	r1, r0
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f000 fcbf 	bl	800b6f0 <__pow5mult>
 800ad72:	9b07      	ldr	r3, [sp, #28]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	4606      	mov	r6, r0
 800ad78:	dd7a      	ble.n	800ae70 <_dtoa_r+0x8d0>
 800ad7a:	f04f 0800 	mov.w	r8, #0
 800ad7e:	6933      	ldr	r3, [r6, #16]
 800ad80:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad84:	6918      	ldr	r0, [r3, #16]
 800ad86:	f000 fba5 	bl	800b4d4 <__hi0bits>
 800ad8a:	f1c0 0020 	rsb	r0, r0, #32
 800ad8e:	9b06      	ldr	r3, [sp, #24]
 800ad90:	4418      	add	r0, r3
 800ad92:	f010 001f 	ands.w	r0, r0, #31
 800ad96:	f000 8094 	beq.w	800aec2 <_dtoa_r+0x922>
 800ad9a:	f1c0 0320 	rsb	r3, r0, #32
 800ad9e:	2b04      	cmp	r3, #4
 800ada0:	f340 8085 	ble.w	800aeae <_dtoa_r+0x90e>
 800ada4:	9b05      	ldr	r3, [sp, #20]
 800ada6:	f1c0 001c 	rsb	r0, r0, #28
 800adaa:	4403      	add	r3, r0
 800adac:	9305      	str	r3, [sp, #20]
 800adae:	9b06      	ldr	r3, [sp, #24]
 800adb0:	4403      	add	r3, r0
 800adb2:	4405      	add	r5, r0
 800adb4:	9306      	str	r3, [sp, #24]
 800adb6:	9b05      	ldr	r3, [sp, #20]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	dd05      	ble.n	800adc8 <_dtoa_r+0x828>
 800adbc:	4651      	mov	r1, sl
 800adbe:	461a      	mov	r2, r3
 800adc0:	4620      	mov	r0, r4
 800adc2:	f000 fcef 	bl	800b7a4 <__lshift>
 800adc6:	4682      	mov	sl, r0
 800adc8:	9b06      	ldr	r3, [sp, #24]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	dd05      	ble.n	800adda <_dtoa_r+0x83a>
 800adce:	4631      	mov	r1, r6
 800add0:	461a      	mov	r2, r3
 800add2:	4620      	mov	r0, r4
 800add4:	f000 fce6 	bl	800b7a4 <__lshift>
 800add8:	4606      	mov	r6, r0
 800adda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800addc:	2b00      	cmp	r3, #0
 800adde:	d072      	beq.n	800aec6 <_dtoa_r+0x926>
 800ade0:	4631      	mov	r1, r6
 800ade2:	4650      	mov	r0, sl
 800ade4:	f000 fd4a 	bl	800b87c <__mcmp>
 800ade8:	2800      	cmp	r0, #0
 800adea:	da6c      	bge.n	800aec6 <_dtoa_r+0x926>
 800adec:	2300      	movs	r3, #0
 800adee:	4651      	mov	r1, sl
 800adf0:	220a      	movs	r2, #10
 800adf2:	4620      	mov	r0, r4
 800adf4:	f000 fb28 	bl	800b448 <__multadd>
 800adf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800adfe:	4682      	mov	sl, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 81b0 	beq.w	800b166 <_dtoa_r+0xbc6>
 800ae06:	2300      	movs	r3, #0
 800ae08:	4639      	mov	r1, r7
 800ae0a:	220a      	movs	r2, #10
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	f000 fb1b 	bl	800b448 <__multadd>
 800ae12:	9b01      	ldr	r3, [sp, #4]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	4607      	mov	r7, r0
 800ae18:	f300 8096 	bgt.w	800af48 <_dtoa_r+0x9a8>
 800ae1c:	9b07      	ldr	r3, [sp, #28]
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	dc59      	bgt.n	800aed6 <_dtoa_r+0x936>
 800ae22:	e091      	b.n	800af48 <_dtoa_r+0x9a8>
 800ae24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae2a:	e758      	b.n	800acde <_dtoa_r+0x73e>
 800ae2c:	9b04      	ldr	r3, [sp, #16]
 800ae2e:	1e5e      	subs	r6, r3, #1
 800ae30:	9b08      	ldr	r3, [sp, #32]
 800ae32:	42b3      	cmp	r3, r6
 800ae34:	bfbf      	itttt	lt
 800ae36:	9b08      	ldrlt	r3, [sp, #32]
 800ae38:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ae3a:	9608      	strlt	r6, [sp, #32]
 800ae3c:	1af3      	sublt	r3, r6, r3
 800ae3e:	bfb4      	ite	lt
 800ae40:	18d2      	addlt	r2, r2, r3
 800ae42:	1b9e      	subge	r6, r3, r6
 800ae44:	9b04      	ldr	r3, [sp, #16]
 800ae46:	bfbc      	itt	lt
 800ae48:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ae4a:	2600      	movlt	r6, #0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	bfb7      	itett	lt
 800ae50:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ae54:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ae58:	1a9d      	sublt	r5, r3, r2
 800ae5a:	2300      	movlt	r3, #0
 800ae5c:	e741      	b.n	800ace2 <_dtoa_r+0x742>
 800ae5e:	9e08      	ldr	r6, [sp, #32]
 800ae60:	9d05      	ldr	r5, [sp, #20]
 800ae62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ae64:	e748      	b.n	800acf8 <_dtoa_r+0x758>
 800ae66:	9a08      	ldr	r2, [sp, #32]
 800ae68:	e770      	b.n	800ad4c <_dtoa_r+0x7ac>
 800ae6a:	9b07      	ldr	r3, [sp, #28]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	dc19      	bgt.n	800aea4 <_dtoa_r+0x904>
 800ae70:	9b02      	ldr	r3, [sp, #8]
 800ae72:	b9bb      	cbnz	r3, 800aea4 <_dtoa_r+0x904>
 800ae74:	9b03      	ldr	r3, [sp, #12]
 800ae76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae7a:	b99b      	cbnz	r3, 800aea4 <_dtoa_r+0x904>
 800ae7c:	9b03      	ldr	r3, [sp, #12]
 800ae7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae82:	0d1b      	lsrs	r3, r3, #20
 800ae84:	051b      	lsls	r3, r3, #20
 800ae86:	b183      	cbz	r3, 800aeaa <_dtoa_r+0x90a>
 800ae88:	9b05      	ldr	r3, [sp, #20]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	9305      	str	r3, [sp, #20]
 800ae8e:	9b06      	ldr	r3, [sp, #24]
 800ae90:	3301      	adds	r3, #1
 800ae92:	9306      	str	r3, [sp, #24]
 800ae94:	f04f 0801 	mov.w	r8, #1
 800ae98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f47f af6f 	bne.w	800ad7e <_dtoa_r+0x7de>
 800aea0:	2001      	movs	r0, #1
 800aea2:	e774      	b.n	800ad8e <_dtoa_r+0x7ee>
 800aea4:	f04f 0800 	mov.w	r8, #0
 800aea8:	e7f6      	b.n	800ae98 <_dtoa_r+0x8f8>
 800aeaa:	4698      	mov	r8, r3
 800aeac:	e7f4      	b.n	800ae98 <_dtoa_r+0x8f8>
 800aeae:	d082      	beq.n	800adb6 <_dtoa_r+0x816>
 800aeb0:	9a05      	ldr	r2, [sp, #20]
 800aeb2:	331c      	adds	r3, #28
 800aeb4:	441a      	add	r2, r3
 800aeb6:	9205      	str	r2, [sp, #20]
 800aeb8:	9a06      	ldr	r2, [sp, #24]
 800aeba:	441a      	add	r2, r3
 800aebc:	441d      	add	r5, r3
 800aebe:	9206      	str	r2, [sp, #24]
 800aec0:	e779      	b.n	800adb6 <_dtoa_r+0x816>
 800aec2:	4603      	mov	r3, r0
 800aec4:	e7f4      	b.n	800aeb0 <_dtoa_r+0x910>
 800aec6:	9b04      	ldr	r3, [sp, #16]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	dc37      	bgt.n	800af3c <_dtoa_r+0x99c>
 800aecc:	9b07      	ldr	r3, [sp, #28]
 800aece:	2b02      	cmp	r3, #2
 800aed0:	dd34      	ble.n	800af3c <_dtoa_r+0x99c>
 800aed2:	9b04      	ldr	r3, [sp, #16]
 800aed4:	9301      	str	r3, [sp, #4]
 800aed6:	9b01      	ldr	r3, [sp, #4]
 800aed8:	b963      	cbnz	r3, 800aef4 <_dtoa_r+0x954>
 800aeda:	4631      	mov	r1, r6
 800aedc:	2205      	movs	r2, #5
 800aede:	4620      	mov	r0, r4
 800aee0:	f000 fab2 	bl	800b448 <__multadd>
 800aee4:	4601      	mov	r1, r0
 800aee6:	4606      	mov	r6, r0
 800aee8:	4650      	mov	r0, sl
 800aeea:	f000 fcc7 	bl	800b87c <__mcmp>
 800aeee:	2800      	cmp	r0, #0
 800aef0:	f73f adbb 	bgt.w	800aa6a <_dtoa_r+0x4ca>
 800aef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aef6:	9d00      	ldr	r5, [sp, #0]
 800aef8:	ea6f 0b03 	mvn.w	fp, r3
 800aefc:	f04f 0800 	mov.w	r8, #0
 800af00:	4631      	mov	r1, r6
 800af02:	4620      	mov	r0, r4
 800af04:	f000 fa7e 	bl	800b404 <_Bfree>
 800af08:	2f00      	cmp	r7, #0
 800af0a:	f43f aeab 	beq.w	800ac64 <_dtoa_r+0x6c4>
 800af0e:	f1b8 0f00 	cmp.w	r8, #0
 800af12:	d005      	beq.n	800af20 <_dtoa_r+0x980>
 800af14:	45b8      	cmp	r8, r7
 800af16:	d003      	beq.n	800af20 <_dtoa_r+0x980>
 800af18:	4641      	mov	r1, r8
 800af1a:	4620      	mov	r0, r4
 800af1c:	f000 fa72 	bl	800b404 <_Bfree>
 800af20:	4639      	mov	r1, r7
 800af22:	4620      	mov	r0, r4
 800af24:	f000 fa6e 	bl	800b404 <_Bfree>
 800af28:	e69c      	b.n	800ac64 <_dtoa_r+0x6c4>
 800af2a:	2600      	movs	r6, #0
 800af2c:	4637      	mov	r7, r6
 800af2e:	e7e1      	b.n	800aef4 <_dtoa_r+0x954>
 800af30:	46bb      	mov	fp, r7
 800af32:	4637      	mov	r7, r6
 800af34:	e599      	b.n	800aa6a <_dtoa_r+0x4ca>
 800af36:	bf00      	nop
 800af38:	40240000 	.word	0x40240000
 800af3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f000 80c8 	beq.w	800b0d4 <_dtoa_r+0xb34>
 800af44:	9b04      	ldr	r3, [sp, #16]
 800af46:	9301      	str	r3, [sp, #4]
 800af48:	2d00      	cmp	r5, #0
 800af4a:	dd05      	ble.n	800af58 <_dtoa_r+0x9b8>
 800af4c:	4639      	mov	r1, r7
 800af4e:	462a      	mov	r2, r5
 800af50:	4620      	mov	r0, r4
 800af52:	f000 fc27 	bl	800b7a4 <__lshift>
 800af56:	4607      	mov	r7, r0
 800af58:	f1b8 0f00 	cmp.w	r8, #0
 800af5c:	d05b      	beq.n	800b016 <_dtoa_r+0xa76>
 800af5e:	6879      	ldr	r1, [r7, #4]
 800af60:	4620      	mov	r0, r4
 800af62:	f000 fa0f 	bl	800b384 <_Balloc>
 800af66:	4605      	mov	r5, r0
 800af68:	b928      	cbnz	r0, 800af76 <_dtoa_r+0x9d6>
 800af6a:	4b83      	ldr	r3, [pc, #524]	; (800b178 <_dtoa_r+0xbd8>)
 800af6c:	4602      	mov	r2, r0
 800af6e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800af72:	f7ff bb2e 	b.w	800a5d2 <_dtoa_r+0x32>
 800af76:	693a      	ldr	r2, [r7, #16]
 800af78:	3202      	adds	r2, #2
 800af7a:	0092      	lsls	r2, r2, #2
 800af7c:	f107 010c 	add.w	r1, r7, #12
 800af80:	300c      	adds	r0, #12
 800af82:	f7ff fa70 	bl	800a466 <memcpy>
 800af86:	2201      	movs	r2, #1
 800af88:	4629      	mov	r1, r5
 800af8a:	4620      	mov	r0, r4
 800af8c:	f000 fc0a 	bl	800b7a4 <__lshift>
 800af90:	9b00      	ldr	r3, [sp, #0]
 800af92:	3301      	adds	r3, #1
 800af94:	9304      	str	r3, [sp, #16]
 800af96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af9a:	4413      	add	r3, r2
 800af9c:	9308      	str	r3, [sp, #32]
 800af9e:	9b02      	ldr	r3, [sp, #8]
 800afa0:	f003 0301 	and.w	r3, r3, #1
 800afa4:	46b8      	mov	r8, r7
 800afa6:	9306      	str	r3, [sp, #24]
 800afa8:	4607      	mov	r7, r0
 800afaa:	9b04      	ldr	r3, [sp, #16]
 800afac:	4631      	mov	r1, r6
 800afae:	3b01      	subs	r3, #1
 800afb0:	4650      	mov	r0, sl
 800afb2:	9301      	str	r3, [sp, #4]
 800afb4:	f7ff fa6c 	bl	800a490 <quorem>
 800afb8:	4641      	mov	r1, r8
 800afba:	9002      	str	r0, [sp, #8]
 800afbc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800afc0:	4650      	mov	r0, sl
 800afc2:	f000 fc5b 	bl	800b87c <__mcmp>
 800afc6:	463a      	mov	r2, r7
 800afc8:	9005      	str	r0, [sp, #20]
 800afca:	4631      	mov	r1, r6
 800afcc:	4620      	mov	r0, r4
 800afce:	f000 fc71 	bl	800b8b4 <__mdiff>
 800afd2:	68c2      	ldr	r2, [r0, #12]
 800afd4:	4605      	mov	r5, r0
 800afd6:	bb02      	cbnz	r2, 800b01a <_dtoa_r+0xa7a>
 800afd8:	4601      	mov	r1, r0
 800afda:	4650      	mov	r0, sl
 800afdc:	f000 fc4e 	bl	800b87c <__mcmp>
 800afe0:	4602      	mov	r2, r0
 800afe2:	4629      	mov	r1, r5
 800afe4:	4620      	mov	r0, r4
 800afe6:	9209      	str	r2, [sp, #36]	; 0x24
 800afe8:	f000 fa0c 	bl	800b404 <_Bfree>
 800afec:	9b07      	ldr	r3, [sp, #28]
 800afee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aff0:	9d04      	ldr	r5, [sp, #16]
 800aff2:	ea43 0102 	orr.w	r1, r3, r2
 800aff6:	9b06      	ldr	r3, [sp, #24]
 800aff8:	4319      	orrs	r1, r3
 800affa:	d110      	bne.n	800b01e <_dtoa_r+0xa7e>
 800affc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b000:	d029      	beq.n	800b056 <_dtoa_r+0xab6>
 800b002:	9b05      	ldr	r3, [sp, #20]
 800b004:	2b00      	cmp	r3, #0
 800b006:	dd02      	ble.n	800b00e <_dtoa_r+0xa6e>
 800b008:	9b02      	ldr	r3, [sp, #8]
 800b00a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b00e:	9b01      	ldr	r3, [sp, #4]
 800b010:	f883 9000 	strb.w	r9, [r3]
 800b014:	e774      	b.n	800af00 <_dtoa_r+0x960>
 800b016:	4638      	mov	r0, r7
 800b018:	e7ba      	b.n	800af90 <_dtoa_r+0x9f0>
 800b01a:	2201      	movs	r2, #1
 800b01c:	e7e1      	b.n	800afe2 <_dtoa_r+0xa42>
 800b01e:	9b05      	ldr	r3, [sp, #20]
 800b020:	2b00      	cmp	r3, #0
 800b022:	db04      	blt.n	800b02e <_dtoa_r+0xa8e>
 800b024:	9907      	ldr	r1, [sp, #28]
 800b026:	430b      	orrs	r3, r1
 800b028:	9906      	ldr	r1, [sp, #24]
 800b02a:	430b      	orrs	r3, r1
 800b02c:	d120      	bne.n	800b070 <_dtoa_r+0xad0>
 800b02e:	2a00      	cmp	r2, #0
 800b030:	dded      	ble.n	800b00e <_dtoa_r+0xa6e>
 800b032:	4651      	mov	r1, sl
 800b034:	2201      	movs	r2, #1
 800b036:	4620      	mov	r0, r4
 800b038:	f000 fbb4 	bl	800b7a4 <__lshift>
 800b03c:	4631      	mov	r1, r6
 800b03e:	4682      	mov	sl, r0
 800b040:	f000 fc1c 	bl	800b87c <__mcmp>
 800b044:	2800      	cmp	r0, #0
 800b046:	dc03      	bgt.n	800b050 <_dtoa_r+0xab0>
 800b048:	d1e1      	bne.n	800b00e <_dtoa_r+0xa6e>
 800b04a:	f019 0f01 	tst.w	r9, #1
 800b04e:	d0de      	beq.n	800b00e <_dtoa_r+0xa6e>
 800b050:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b054:	d1d8      	bne.n	800b008 <_dtoa_r+0xa68>
 800b056:	9a01      	ldr	r2, [sp, #4]
 800b058:	2339      	movs	r3, #57	; 0x39
 800b05a:	7013      	strb	r3, [r2, #0]
 800b05c:	462b      	mov	r3, r5
 800b05e:	461d      	mov	r5, r3
 800b060:	3b01      	subs	r3, #1
 800b062:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b066:	2a39      	cmp	r2, #57	; 0x39
 800b068:	d06c      	beq.n	800b144 <_dtoa_r+0xba4>
 800b06a:	3201      	adds	r2, #1
 800b06c:	701a      	strb	r2, [r3, #0]
 800b06e:	e747      	b.n	800af00 <_dtoa_r+0x960>
 800b070:	2a00      	cmp	r2, #0
 800b072:	dd07      	ble.n	800b084 <_dtoa_r+0xae4>
 800b074:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b078:	d0ed      	beq.n	800b056 <_dtoa_r+0xab6>
 800b07a:	9a01      	ldr	r2, [sp, #4]
 800b07c:	f109 0301 	add.w	r3, r9, #1
 800b080:	7013      	strb	r3, [r2, #0]
 800b082:	e73d      	b.n	800af00 <_dtoa_r+0x960>
 800b084:	9b04      	ldr	r3, [sp, #16]
 800b086:	9a08      	ldr	r2, [sp, #32]
 800b088:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d043      	beq.n	800b118 <_dtoa_r+0xb78>
 800b090:	4651      	mov	r1, sl
 800b092:	2300      	movs	r3, #0
 800b094:	220a      	movs	r2, #10
 800b096:	4620      	mov	r0, r4
 800b098:	f000 f9d6 	bl	800b448 <__multadd>
 800b09c:	45b8      	cmp	r8, r7
 800b09e:	4682      	mov	sl, r0
 800b0a0:	f04f 0300 	mov.w	r3, #0
 800b0a4:	f04f 020a 	mov.w	r2, #10
 800b0a8:	4641      	mov	r1, r8
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	d107      	bne.n	800b0be <_dtoa_r+0xb1e>
 800b0ae:	f000 f9cb 	bl	800b448 <__multadd>
 800b0b2:	4680      	mov	r8, r0
 800b0b4:	4607      	mov	r7, r0
 800b0b6:	9b04      	ldr	r3, [sp, #16]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	9304      	str	r3, [sp, #16]
 800b0bc:	e775      	b.n	800afaa <_dtoa_r+0xa0a>
 800b0be:	f000 f9c3 	bl	800b448 <__multadd>
 800b0c2:	4639      	mov	r1, r7
 800b0c4:	4680      	mov	r8, r0
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	220a      	movs	r2, #10
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f000 f9bc 	bl	800b448 <__multadd>
 800b0d0:	4607      	mov	r7, r0
 800b0d2:	e7f0      	b.n	800b0b6 <_dtoa_r+0xb16>
 800b0d4:	9b04      	ldr	r3, [sp, #16]
 800b0d6:	9301      	str	r3, [sp, #4]
 800b0d8:	9d00      	ldr	r5, [sp, #0]
 800b0da:	4631      	mov	r1, r6
 800b0dc:	4650      	mov	r0, sl
 800b0de:	f7ff f9d7 	bl	800a490 <quorem>
 800b0e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b0e6:	9b00      	ldr	r3, [sp, #0]
 800b0e8:	f805 9b01 	strb.w	r9, [r5], #1
 800b0ec:	1aea      	subs	r2, r5, r3
 800b0ee:	9b01      	ldr	r3, [sp, #4]
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	dd07      	ble.n	800b104 <_dtoa_r+0xb64>
 800b0f4:	4651      	mov	r1, sl
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	220a      	movs	r2, #10
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f000 f9a4 	bl	800b448 <__multadd>
 800b100:	4682      	mov	sl, r0
 800b102:	e7ea      	b.n	800b0da <_dtoa_r+0xb3a>
 800b104:	9b01      	ldr	r3, [sp, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	bfc8      	it	gt
 800b10a:	461d      	movgt	r5, r3
 800b10c:	9b00      	ldr	r3, [sp, #0]
 800b10e:	bfd8      	it	le
 800b110:	2501      	movle	r5, #1
 800b112:	441d      	add	r5, r3
 800b114:	f04f 0800 	mov.w	r8, #0
 800b118:	4651      	mov	r1, sl
 800b11a:	2201      	movs	r2, #1
 800b11c:	4620      	mov	r0, r4
 800b11e:	f000 fb41 	bl	800b7a4 <__lshift>
 800b122:	4631      	mov	r1, r6
 800b124:	4682      	mov	sl, r0
 800b126:	f000 fba9 	bl	800b87c <__mcmp>
 800b12a:	2800      	cmp	r0, #0
 800b12c:	dc96      	bgt.n	800b05c <_dtoa_r+0xabc>
 800b12e:	d102      	bne.n	800b136 <_dtoa_r+0xb96>
 800b130:	f019 0f01 	tst.w	r9, #1
 800b134:	d192      	bne.n	800b05c <_dtoa_r+0xabc>
 800b136:	462b      	mov	r3, r5
 800b138:	461d      	mov	r5, r3
 800b13a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b13e:	2a30      	cmp	r2, #48	; 0x30
 800b140:	d0fa      	beq.n	800b138 <_dtoa_r+0xb98>
 800b142:	e6dd      	b.n	800af00 <_dtoa_r+0x960>
 800b144:	9a00      	ldr	r2, [sp, #0]
 800b146:	429a      	cmp	r2, r3
 800b148:	d189      	bne.n	800b05e <_dtoa_r+0xabe>
 800b14a:	f10b 0b01 	add.w	fp, fp, #1
 800b14e:	2331      	movs	r3, #49	; 0x31
 800b150:	e796      	b.n	800b080 <_dtoa_r+0xae0>
 800b152:	4b0a      	ldr	r3, [pc, #40]	; (800b17c <_dtoa_r+0xbdc>)
 800b154:	f7ff ba99 	b.w	800a68a <_dtoa_r+0xea>
 800b158:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f47f aa6d 	bne.w	800a63a <_dtoa_r+0x9a>
 800b160:	4b07      	ldr	r3, [pc, #28]	; (800b180 <_dtoa_r+0xbe0>)
 800b162:	f7ff ba92 	b.w	800a68a <_dtoa_r+0xea>
 800b166:	9b01      	ldr	r3, [sp, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	dcb5      	bgt.n	800b0d8 <_dtoa_r+0xb38>
 800b16c:	9b07      	ldr	r3, [sp, #28]
 800b16e:	2b02      	cmp	r3, #2
 800b170:	f73f aeb1 	bgt.w	800aed6 <_dtoa_r+0x936>
 800b174:	e7b0      	b.n	800b0d8 <_dtoa_r+0xb38>
 800b176:	bf00      	nop
 800b178:	0800c468 	.word	0x0800c468
 800b17c:	0800c3c8 	.word	0x0800c3c8
 800b180:	0800c3ec 	.word	0x0800c3ec

0800b184 <_free_r>:
 800b184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b186:	2900      	cmp	r1, #0
 800b188:	d044      	beq.n	800b214 <_free_r+0x90>
 800b18a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b18e:	9001      	str	r0, [sp, #4]
 800b190:	2b00      	cmp	r3, #0
 800b192:	f1a1 0404 	sub.w	r4, r1, #4
 800b196:	bfb8      	it	lt
 800b198:	18e4      	addlt	r4, r4, r3
 800b19a:	f000 f8e7 	bl	800b36c <__malloc_lock>
 800b19e:	4a1e      	ldr	r2, [pc, #120]	; (800b218 <_free_r+0x94>)
 800b1a0:	9801      	ldr	r0, [sp, #4]
 800b1a2:	6813      	ldr	r3, [r2, #0]
 800b1a4:	b933      	cbnz	r3, 800b1b4 <_free_r+0x30>
 800b1a6:	6063      	str	r3, [r4, #4]
 800b1a8:	6014      	str	r4, [r2, #0]
 800b1aa:	b003      	add	sp, #12
 800b1ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1b0:	f000 b8e2 	b.w	800b378 <__malloc_unlock>
 800b1b4:	42a3      	cmp	r3, r4
 800b1b6:	d908      	bls.n	800b1ca <_free_r+0x46>
 800b1b8:	6825      	ldr	r5, [r4, #0]
 800b1ba:	1961      	adds	r1, r4, r5
 800b1bc:	428b      	cmp	r3, r1
 800b1be:	bf01      	itttt	eq
 800b1c0:	6819      	ldreq	r1, [r3, #0]
 800b1c2:	685b      	ldreq	r3, [r3, #4]
 800b1c4:	1949      	addeq	r1, r1, r5
 800b1c6:	6021      	streq	r1, [r4, #0]
 800b1c8:	e7ed      	b.n	800b1a6 <_free_r+0x22>
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	b10b      	cbz	r3, 800b1d4 <_free_r+0x50>
 800b1d0:	42a3      	cmp	r3, r4
 800b1d2:	d9fa      	bls.n	800b1ca <_free_r+0x46>
 800b1d4:	6811      	ldr	r1, [r2, #0]
 800b1d6:	1855      	adds	r5, r2, r1
 800b1d8:	42a5      	cmp	r5, r4
 800b1da:	d10b      	bne.n	800b1f4 <_free_r+0x70>
 800b1dc:	6824      	ldr	r4, [r4, #0]
 800b1de:	4421      	add	r1, r4
 800b1e0:	1854      	adds	r4, r2, r1
 800b1e2:	42a3      	cmp	r3, r4
 800b1e4:	6011      	str	r1, [r2, #0]
 800b1e6:	d1e0      	bne.n	800b1aa <_free_r+0x26>
 800b1e8:	681c      	ldr	r4, [r3, #0]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	6053      	str	r3, [r2, #4]
 800b1ee:	440c      	add	r4, r1
 800b1f0:	6014      	str	r4, [r2, #0]
 800b1f2:	e7da      	b.n	800b1aa <_free_r+0x26>
 800b1f4:	d902      	bls.n	800b1fc <_free_r+0x78>
 800b1f6:	230c      	movs	r3, #12
 800b1f8:	6003      	str	r3, [r0, #0]
 800b1fa:	e7d6      	b.n	800b1aa <_free_r+0x26>
 800b1fc:	6825      	ldr	r5, [r4, #0]
 800b1fe:	1961      	adds	r1, r4, r5
 800b200:	428b      	cmp	r3, r1
 800b202:	bf04      	itt	eq
 800b204:	6819      	ldreq	r1, [r3, #0]
 800b206:	685b      	ldreq	r3, [r3, #4]
 800b208:	6063      	str	r3, [r4, #4]
 800b20a:	bf04      	itt	eq
 800b20c:	1949      	addeq	r1, r1, r5
 800b20e:	6021      	streq	r1, [r4, #0]
 800b210:	6054      	str	r4, [r2, #4]
 800b212:	e7ca      	b.n	800b1aa <_free_r+0x26>
 800b214:	b003      	add	sp, #12
 800b216:	bd30      	pop	{r4, r5, pc}
 800b218:	20002748 	.word	0x20002748

0800b21c <malloc>:
 800b21c:	4b02      	ldr	r3, [pc, #8]	; (800b228 <malloc+0xc>)
 800b21e:	4601      	mov	r1, r0
 800b220:	6818      	ldr	r0, [r3, #0]
 800b222:	f000 b823 	b.w	800b26c <_malloc_r>
 800b226:	bf00      	nop
 800b228:	20000068 	.word	0x20000068

0800b22c <sbrk_aligned>:
 800b22c:	b570      	push	{r4, r5, r6, lr}
 800b22e:	4e0e      	ldr	r6, [pc, #56]	; (800b268 <sbrk_aligned+0x3c>)
 800b230:	460c      	mov	r4, r1
 800b232:	6831      	ldr	r1, [r6, #0]
 800b234:	4605      	mov	r5, r0
 800b236:	b911      	cbnz	r1, 800b23e <sbrk_aligned+0x12>
 800b238:	f000 feda 	bl	800bff0 <_sbrk_r>
 800b23c:	6030      	str	r0, [r6, #0]
 800b23e:	4621      	mov	r1, r4
 800b240:	4628      	mov	r0, r5
 800b242:	f000 fed5 	bl	800bff0 <_sbrk_r>
 800b246:	1c43      	adds	r3, r0, #1
 800b248:	d00a      	beq.n	800b260 <sbrk_aligned+0x34>
 800b24a:	1cc4      	adds	r4, r0, #3
 800b24c:	f024 0403 	bic.w	r4, r4, #3
 800b250:	42a0      	cmp	r0, r4
 800b252:	d007      	beq.n	800b264 <sbrk_aligned+0x38>
 800b254:	1a21      	subs	r1, r4, r0
 800b256:	4628      	mov	r0, r5
 800b258:	f000 feca 	bl	800bff0 <_sbrk_r>
 800b25c:	3001      	adds	r0, #1
 800b25e:	d101      	bne.n	800b264 <sbrk_aligned+0x38>
 800b260:	f04f 34ff 	mov.w	r4, #4294967295
 800b264:	4620      	mov	r0, r4
 800b266:	bd70      	pop	{r4, r5, r6, pc}
 800b268:	2000274c 	.word	0x2000274c

0800b26c <_malloc_r>:
 800b26c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b270:	1ccd      	adds	r5, r1, #3
 800b272:	f025 0503 	bic.w	r5, r5, #3
 800b276:	3508      	adds	r5, #8
 800b278:	2d0c      	cmp	r5, #12
 800b27a:	bf38      	it	cc
 800b27c:	250c      	movcc	r5, #12
 800b27e:	2d00      	cmp	r5, #0
 800b280:	4607      	mov	r7, r0
 800b282:	db01      	blt.n	800b288 <_malloc_r+0x1c>
 800b284:	42a9      	cmp	r1, r5
 800b286:	d905      	bls.n	800b294 <_malloc_r+0x28>
 800b288:	230c      	movs	r3, #12
 800b28a:	603b      	str	r3, [r7, #0]
 800b28c:	2600      	movs	r6, #0
 800b28e:	4630      	mov	r0, r6
 800b290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b294:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b368 <_malloc_r+0xfc>
 800b298:	f000 f868 	bl	800b36c <__malloc_lock>
 800b29c:	f8d8 3000 	ldr.w	r3, [r8]
 800b2a0:	461c      	mov	r4, r3
 800b2a2:	bb5c      	cbnz	r4, 800b2fc <_malloc_r+0x90>
 800b2a4:	4629      	mov	r1, r5
 800b2a6:	4638      	mov	r0, r7
 800b2a8:	f7ff ffc0 	bl	800b22c <sbrk_aligned>
 800b2ac:	1c43      	adds	r3, r0, #1
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	d155      	bne.n	800b35e <_malloc_r+0xf2>
 800b2b2:	f8d8 4000 	ldr.w	r4, [r8]
 800b2b6:	4626      	mov	r6, r4
 800b2b8:	2e00      	cmp	r6, #0
 800b2ba:	d145      	bne.n	800b348 <_malloc_r+0xdc>
 800b2bc:	2c00      	cmp	r4, #0
 800b2be:	d048      	beq.n	800b352 <_malloc_r+0xe6>
 800b2c0:	6823      	ldr	r3, [r4, #0]
 800b2c2:	4631      	mov	r1, r6
 800b2c4:	4638      	mov	r0, r7
 800b2c6:	eb04 0903 	add.w	r9, r4, r3
 800b2ca:	f000 fe91 	bl	800bff0 <_sbrk_r>
 800b2ce:	4581      	cmp	r9, r0
 800b2d0:	d13f      	bne.n	800b352 <_malloc_r+0xe6>
 800b2d2:	6821      	ldr	r1, [r4, #0]
 800b2d4:	1a6d      	subs	r5, r5, r1
 800b2d6:	4629      	mov	r1, r5
 800b2d8:	4638      	mov	r0, r7
 800b2da:	f7ff ffa7 	bl	800b22c <sbrk_aligned>
 800b2de:	3001      	adds	r0, #1
 800b2e0:	d037      	beq.n	800b352 <_malloc_r+0xe6>
 800b2e2:	6823      	ldr	r3, [r4, #0]
 800b2e4:	442b      	add	r3, r5
 800b2e6:	6023      	str	r3, [r4, #0]
 800b2e8:	f8d8 3000 	ldr.w	r3, [r8]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d038      	beq.n	800b362 <_malloc_r+0xf6>
 800b2f0:	685a      	ldr	r2, [r3, #4]
 800b2f2:	42a2      	cmp	r2, r4
 800b2f4:	d12b      	bne.n	800b34e <_malloc_r+0xe2>
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	605a      	str	r2, [r3, #4]
 800b2fa:	e00f      	b.n	800b31c <_malloc_r+0xb0>
 800b2fc:	6822      	ldr	r2, [r4, #0]
 800b2fe:	1b52      	subs	r2, r2, r5
 800b300:	d41f      	bmi.n	800b342 <_malloc_r+0xd6>
 800b302:	2a0b      	cmp	r2, #11
 800b304:	d917      	bls.n	800b336 <_malloc_r+0xca>
 800b306:	1961      	adds	r1, r4, r5
 800b308:	42a3      	cmp	r3, r4
 800b30a:	6025      	str	r5, [r4, #0]
 800b30c:	bf18      	it	ne
 800b30e:	6059      	strne	r1, [r3, #4]
 800b310:	6863      	ldr	r3, [r4, #4]
 800b312:	bf08      	it	eq
 800b314:	f8c8 1000 	streq.w	r1, [r8]
 800b318:	5162      	str	r2, [r4, r5]
 800b31a:	604b      	str	r3, [r1, #4]
 800b31c:	4638      	mov	r0, r7
 800b31e:	f104 060b 	add.w	r6, r4, #11
 800b322:	f000 f829 	bl	800b378 <__malloc_unlock>
 800b326:	f026 0607 	bic.w	r6, r6, #7
 800b32a:	1d23      	adds	r3, r4, #4
 800b32c:	1af2      	subs	r2, r6, r3
 800b32e:	d0ae      	beq.n	800b28e <_malloc_r+0x22>
 800b330:	1b9b      	subs	r3, r3, r6
 800b332:	50a3      	str	r3, [r4, r2]
 800b334:	e7ab      	b.n	800b28e <_malloc_r+0x22>
 800b336:	42a3      	cmp	r3, r4
 800b338:	6862      	ldr	r2, [r4, #4]
 800b33a:	d1dd      	bne.n	800b2f8 <_malloc_r+0x8c>
 800b33c:	f8c8 2000 	str.w	r2, [r8]
 800b340:	e7ec      	b.n	800b31c <_malloc_r+0xb0>
 800b342:	4623      	mov	r3, r4
 800b344:	6864      	ldr	r4, [r4, #4]
 800b346:	e7ac      	b.n	800b2a2 <_malloc_r+0x36>
 800b348:	4634      	mov	r4, r6
 800b34a:	6876      	ldr	r6, [r6, #4]
 800b34c:	e7b4      	b.n	800b2b8 <_malloc_r+0x4c>
 800b34e:	4613      	mov	r3, r2
 800b350:	e7cc      	b.n	800b2ec <_malloc_r+0x80>
 800b352:	230c      	movs	r3, #12
 800b354:	603b      	str	r3, [r7, #0]
 800b356:	4638      	mov	r0, r7
 800b358:	f000 f80e 	bl	800b378 <__malloc_unlock>
 800b35c:	e797      	b.n	800b28e <_malloc_r+0x22>
 800b35e:	6025      	str	r5, [r4, #0]
 800b360:	e7dc      	b.n	800b31c <_malloc_r+0xb0>
 800b362:	605b      	str	r3, [r3, #4]
 800b364:	deff      	udf	#255	; 0xff
 800b366:	bf00      	nop
 800b368:	20002748 	.word	0x20002748

0800b36c <__malloc_lock>:
 800b36c:	4801      	ldr	r0, [pc, #4]	; (800b374 <__malloc_lock+0x8>)
 800b36e:	f7ff b878 	b.w	800a462 <__retarget_lock_acquire_recursive>
 800b372:	bf00      	nop
 800b374:	20002744 	.word	0x20002744

0800b378 <__malloc_unlock>:
 800b378:	4801      	ldr	r0, [pc, #4]	; (800b380 <__malloc_unlock+0x8>)
 800b37a:	f7ff b873 	b.w	800a464 <__retarget_lock_release_recursive>
 800b37e:	bf00      	nop
 800b380:	20002744 	.word	0x20002744

0800b384 <_Balloc>:
 800b384:	b570      	push	{r4, r5, r6, lr}
 800b386:	69c6      	ldr	r6, [r0, #28]
 800b388:	4604      	mov	r4, r0
 800b38a:	460d      	mov	r5, r1
 800b38c:	b976      	cbnz	r6, 800b3ac <_Balloc+0x28>
 800b38e:	2010      	movs	r0, #16
 800b390:	f7ff ff44 	bl	800b21c <malloc>
 800b394:	4602      	mov	r2, r0
 800b396:	61e0      	str	r0, [r4, #28]
 800b398:	b920      	cbnz	r0, 800b3a4 <_Balloc+0x20>
 800b39a:	4b18      	ldr	r3, [pc, #96]	; (800b3fc <_Balloc+0x78>)
 800b39c:	4818      	ldr	r0, [pc, #96]	; (800b400 <_Balloc+0x7c>)
 800b39e:	216b      	movs	r1, #107	; 0x6b
 800b3a0:	f7fe f944 	bl	800962c <__assert_func>
 800b3a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3a8:	6006      	str	r6, [r0, #0]
 800b3aa:	60c6      	str	r6, [r0, #12]
 800b3ac:	69e6      	ldr	r6, [r4, #28]
 800b3ae:	68f3      	ldr	r3, [r6, #12]
 800b3b0:	b183      	cbz	r3, 800b3d4 <_Balloc+0x50>
 800b3b2:	69e3      	ldr	r3, [r4, #28]
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3ba:	b9b8      	cbnz	r0, 800b3ec <_Balloc+0x68>
 800b3bc:	2101      	movs	r1, #1
 800b3be:	fa01 f605 	lsl.w	r6, r1, r5
 800b3c2:	1d72      	adds	r2, r6, #5
 800b3c4:	0092      	lsls	r2, r2, #2
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	f000 fe22 	bl	800c010 <_calloc_r>
 800b3cc:	b160      	cbz	r0, 800b3e8 <_Balloc+0x64>
 800b3ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3d2:	e00e      	b.n	800b3f2 <_Balloc+0x6e>
 800b3d4:	2221      	movs	r2, #33	; 0x21
 800b3d6:	2104      	movs	r1, #4
 800b3d8:	4620      	mov	r0, r4
 800b3da:	f000 fe19 	bl	800c010 <_calloc_r>
 800b3de:	69e3      	ldr	r3, [r4, #28]
 800b3e0:	60f0      	str	r0, [r6, #12]
 800b3e2:	68db      	ldr	r3, [r3, #12]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d1e4      	bne.n	800b3b2 <_Balloc+0x2e>
 800b3e8:	2000      	movs	r0, #0
 800b3ea:	bd70      	pop	{r4, r5, r6, pc}
 800b3ec:	6802      	ldr	r2, [r0, #0]
 800b3ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b3f8:	e7f7      	b.n	800b3ea <_Balloc+0x66>
 800b3fa:	bf00      	nop
 800b3fc:	0800c3f9 	.word	0x0800c3f9
 800b400:	0800c479 	.word	0x0800c479

0800b404 <_Bfree>:
 800b404:	b570      	push	{r4, r5, r6, lr}
 800b406:	69c6      	ldr	r6, [r0, #28]
 800b408:	4605      	mov	r5, r0
 800b40a:	460c      	mov	r4, r1
 800b40c:	b976      	cbnz	r6, 800b42c <_Bfree+0x28>
 800b40e:	2010      	movs	r0, #16
 800b410:	f7ff ff04 	bl	800b21c <malloc>
 800b414:	4602      	mov	r2, r0
 800b416:	61e8      	str	r0, [r5, #28]
 800b418:	b920      	cbnz	r0, 800b424 <_Bfree+0x20>
 800b41a:	4b09      	ldr	r3, [pc, #36]	; (800b440 <_Bfree+0x3c>)
 800b41c:	4809      	ldr	r0, [pc, #36]	; (800b444 <_Bfree+0x40>)
 800b41e:	218f      	movs	r1, #143	; 0x8f
 800b420:	f7fe f904 	bl	800962c <__assert_func>
 800b424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b428:	6006      	str	r6, [r0, #0]
 800b42a:	60c6      	str	r6, [r0, #12]
 800b42c:	b13c      	cbz	r4, 800b43e <_Bfree+0x3a>
 800b42e:	69eb      	ldr	r3, [r5, #28]
 800b430:	6862      	ldr	r2, [r4, #4]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b438:	6021      	str	r1, [r4, #0]
 800b43a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b43e:	bd70      	pop	{r4, r5, r6, pc}
 800b440:	0800c3f9 	.word	0x0800c3f9
 800b444:	0800c479 	.word	0x0800c479

0800b448 <__multadd>:
 800b448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b44c:	690d      	ldr	r5, [r1, #16]
 800b44e:	4607      	mov	r7, r0
 800b450:	460c      	mov	r4, r1
 800b452:	461e      	mov	r6, r3
 800b454:	f101 0c14 	add.w	ip, r1, #20
 800b458:	2000      	movs	r0, #0
 800b45a:	f8dc 3000 	ldr.w	r3, [ip]
 800b45e:	b299      	uxth	r1, r3
 800b460:	fb02 6101 	mla	r1, r2, r1, r6
 800b464:	0c1e      	lsrs	r6, r3, #16
 800b466:	0c0b      	lsrs	r3, r1, #16
 800b468:	fb02 3306 	mla	r3, r2, r6, r3
 800b46c:	b289      	uxth	r1, r1
 800b46e:	3001      	adds	r0, #1
 800b470:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b474:	4285      	cmp	r5, r0
 800b476:	f84c 1b04 	str.w	r1, [ip], #4
 800b47a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b47e:	dcec      	bgt.n	800b45a <__multadd+0x12>
 800b480:	b30e      	cbz	r6, 800b4c6 <__multadd+0x7e>
 800b482:	68a3      	ldr	r3, [r4, #8]
 800b484:	42ab      	cmp	r3, r5
 800b486:	dc19      	bgt.n	800b4bc <__multadd+0x74>
 800b488:	6861      	ldr	r1, [r4, #4]
 800b48a:	4638      	mov	r0, r7
 800b48c:	3101      	adds	r1, #1
 800b48e:	f7ff ff79 	bl	800b384 <_Balloc>
 800b492:	4680      	mov	r8, r0
 800b494:	b928      	cbnz	r0, 800b4a2 <__multadd+0x5a>
 800b496:	4602      	mov	r2, r0
 800b498:	4b0c      	ldr	r3, [pc, #48]	; (800b4cc <__multadd+0x84>)
 800b49a:	480d      	ldr	r0, [pc, #52]	; (800b4d0 <__multadd+0x88>)
 800b49c:	21ba      	movs	r1, #186	; 0xba
 800b49e:	f7fe f8c5 	bl	800962c <__assert_func>
 800b4a2:	6922      	ldr	r2, [r4, #16]
 800b4a4:	3202      	adds	r2, #2
 800b4a6:	f104 010c 	add.w	r1, r4, #12
 800b4aa:	0092      	lsls	r2, r2, #2
 800b4ac:	300c      	adds	r0, #12
 800b4ae:	f7fe ffda 	bl	800a466 <memcpy>
 800b4b2:	4621      	mov	r1, r4
 800b4b4:	4638      	mov	r0, r7
 800b4b6:	f7ff ffa5 	bl	800b404 <_Bfree>
 800b4ba:	4644      	mov	r4, r8
 800b4bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4c0:	3501      	adds	r5, #1
 800b4c2:	615e      	str	r6, [r3, #20]
 800b4c4:	6125      	str	r5, [r4, #16]
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4cc:	0800c468 	.word	0x0800c468
 800b4d0:	0800c479 	.word	0x0800c479

0800b4d4 <__hi0bits>:
 800b4d4:	0c03      	lsrs	r3, r0, #16
 800b4d6:	041b      	lsls	r3, r3, #16
 800b4d8:	b9d3      	cbnz	r3, 800b510 <__hi0bits+0x3c>
 800b4da:	0400      	lsls	r0, r0, #16
 800b4dc:	2310      	movs	r3, #16
 800b4de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b4e2:	bf04      	itt	eq
 800b4e4:	0200      	lsleq	r0, r0, #8
 800b4e6:	3308      	addeq	r3, #8
 800b4e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b4ec:	bf04      	itt	eq
 800b4ee:	0100      	lsleq	r0, r0, #4
 800b4f0:	3304      	addeq	r3, #4
 800b4f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b4f6:	bf04      	itt	eq
 800b4f8:	0080      	lsleq	r0, r0, #2
 800b4fa:	3302      	addeq	r3, #2
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	db05      	blt.n	800b50c <__hi0bits+0x38>
 800b500:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b504:	f103 0301 	add.w	r3, r3, #1
 800b508:	bf08      	it	eq
 800b50a:	2320      	moveq	r3, #32
 800b50c:	4618      	mov	r0, r3
 800b50e:	4770      	bx	lr
 800b510:	2300      	movs	r3, #0
 800b512:	e7e4      	b.n	800b4de <__hi0bits+0xa>

0800b514 <__lo0bits>:
 800b514:	6803      	ldr	r3, [r0, #0]
 800b516:	f013 0207 	ands.w	r2, r3, #7
 800b51a:	d00c      	beq.n	800b536 <__lo0bits+0x22>
 800b51c:	07d9      	lsls	r1, r3, #31
 800b51e:	d422      	bmi.n	800b566 <__lo0bits+0x52>
 800b520:	079a      	lsls	r2, r3, #30
 800b522:	bf49      	itett	mi
 800b524:	085b      	lsrmi	r3, r3, #1
 800b526:	089b      	lsrpl	r3, r3, #2
 800b528:	6003      	strmi	r3, [r0, #0]
 800b52a:	2201      	movmi	r2, #1
 800b52c:	bf5c      	itt	pl
 800b52e:	6003      	strpl	r3, [r0, #0]
 800b530:	2202      	movpl	r2, #2
 800b532:	4610      	mov	r0, r2
 800b534:	4770      	bx	lr
 800b536:	b299      	uxth	r1, r3
 800b538:	b909      	cbnz	r1, 800b53e <__lo0bits+0x2a>
 800b53a:	0c1b      	lsrs	r3, r3, #16
 800b53c:	2210      	movs	r2, #16
 800b53e:	b2d9      	uxtb	r1, r3
 800b540:	b909      	cbnz	r1, 800b546 <__lo0bits+0x32>
 800b542:	3208      	adds	r2, #8
 800b544:	0a1b      	lsrs	r3, r3, #8
 800b546:	0719      	lsls	r1, r3, #28
 800b548:	bf04      	itt	eq
 800b54a:	091b      	lsreq	r3, r3, #4
 800b54c:	3204      	addeq	r2, #4
 800b54e:	0799      	lsls	r1, r3, #30
 800b550:	bf04      	itt	eq
 800b552:	089b      	lsreq	r3, r3, #2
 800b554:	3202      	addeq	r2, #2
 800b556:	07d9      	lsls	r1, r3, #31
 800b558:	d403      	bmi.n	800b562 <__lo0bits+0x4e>
 800b55a:	085b      	lsrs	r3, r3, #1
 800b55c:	f102 0201 	add.w	r2, r2, #1
 800b560:	d003      	beq.n	800b56a <__lo0bits+0x56>
 800b562:	6003      	str	r3, [r0, #0]
 800b564:	e7e5      	b.n	800b532 <__lo0bits+0x1e>
 800b566:	2200      	movs	r2, #0
 800b568:	e7e3      	b.n	800b532 <__lo0bits+0x1e>
 800b56a:	2220      	movs	r2, #32
 800b56c:	e7e1      	b.n	800b532 <__lo0bits+0x1e>
	...

0800b570 <__i2b>:
 800b570:	b510      	push	{r4, lr}
 800b572:	460c      	mov	r4, r1
 800b574:	2101      	movs	r1, #1
 800b576:	f7ff ff05 	bl	800b384 <_Balloc>
 800b57a:	4602      	mov	r2, r0
 800b57c:	b928      	cbnz	r0, 800b58a <__i2b+0x1a>
 800b57e:	4b05      	ldr	r3, [pc, #20]	; (800b594 <__i2b+0x24>)
 800b580:	4805      	ldr	r0, [pc, #20]	; (800b598 <__i2b+0x28>)
 800b582:	f240 1145 	movw	r1, #325	; 0x145
 800b586:	f7fe f851 	bl	800962c <__assert_func>
 800b58a:	2301      	movs	r3, #1
 800b58c:	6144      	str	r4, [r0, #20]
 800b58e:	6103      	str	r3, [r0, #16]
 800b590:	bd10      	pop	{r4, pc}
 800b592:	bf00      	nop
 800b594:	0800c468 	.word	0x0800c468
 800b598:	0800c479 	.word	0x0800c479

0800b59c <__multiply>:
 800b59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a0:	4691      	mov	r9, r2
 800b5a2:	690a      	ldr	r2, [r1, #16]
 800b5a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	bfb8      	it	lt
 800b5ac:	460b      	movlt	r3, r1
 800b5ae:	460c      	mov	r4, r1
 800b5b0:	bfbc      	itt	lt
 800b5b2:	464c      	movlt	r4, r9
 800b5b4:	4699      	movlt	r9, r3
 800b5b6:	6927      	ldr	r7, [r4, #16]
 800b5b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b5bc:	68a3      	ldr	r3, [r4, #8]
 800b5be:	6861      	ldr	r1, [r4, #4]
 800b5c0:	eb07 060a 	add.w	r6, r7, sl
 800b5c4:	42b3      	cmp	r3, r6
 800b5c6:	b085      	sub	sp, #20
 800b5c8:	bfb8      	it	lt
 800b5ca:	3101      	addlt	r1, #1
 800b5cc:	f7ff feda 	bl	800b384 <_Balloc>
 800b5d0:	b930      	cbnz	r0, 800b5e0 <__multiply+0x44>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	4b44      	ldr	r3, [pc, #272]	; (800b6e8 <__multiply+0x14c>)
 800b5d6:	4845      	ldr	r0, [pc, #276]	; (800b6ec <__multiply+0x150>)
 800b5d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b5dc:	f7fe f826 	bl	800962c <__assert_func>
 800b5e0:	f100 0514 	add.w	r5, r0, #20
 800b5e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b5e8:	462b      	mov	r3, r5
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	4543      	cmp	r3, r8
 800b5ee:	d321      	bcc.n	800b634 <__multiply+0x98>
 800b5f0:	f104 0314 	add.w	r3, r4, #20
 800b5f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b5f8:	f109 0314 	add.w	r3, r9, #20
 800b5fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b600:	9202      	str	r2, [sp, #8]
 800b602:	1b3a      	subs	r2, r7, r4
 800b604:	3a15      	subs	r2, #21
 800b606:	f022 0203 	bic.w	r2, r2, #3
 800b60a:	3204      	adds	r2, #4
 800b60c:	f104 0115 	add.w	r1, r4, #21
 800b610:	428f      	cmp	r7, r1
 800b612:	bf38      	it	cc
 800b614:	2204      	movcc	r2, #4
 800b616:	9201      	str	r2, [sp, #4]
 800b618:	9a02      	ldr	r2, [sp, #8]
 800b61a:	9303      	str	r3, [sp, #12]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d80c      	bhi.n	800b63a <__multiply+0x9e>
 800b620:	2e00      	cmp	r6, #0
 800b622:	dd03      	ble.n	800b62c <__multiply+0x90>
 800b624:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d05b      	beq.n	800b6e4 <__multiply+0x148>
 800b62c:	6106      	str	r6, [r0, #16]
 800b62e:	b005      	add	sp, #20
 800b630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b634:	f843 2b04 	str.w	r2, [r3], #4
 800b638:	e7d8      	b.n	800b5ec <__multiply+0x50>
 800b63a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b63e:	f1ba 0f00 	cmp.w	sl, #0
 800b642:	d024      	beq.n	800b68e <__multiply+0xf2>
 800b644:	f104 0e14 	add.w	lr, r4, #20
 800b648:	46a9      	mov	r9, r5
 800b64a:	f04f 0c00 	mov.w	ip, #0
 800b64e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b652:	f8d9 1000 	ldr.w	r1, [r9]
 800b656:	fa1f fb82 	uxth.w	fp, r2
 800b65a:	b289      	uxth	r1, r1
 800b65c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b660:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b664:	f8d9 2000 	ldr.w	r2, [r9]
 800b668:	4461      	add	r1, ip
 800b66a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b66e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b672:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b676:	b289      	uxth	r1, r1
 800b678:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b67c:	4577      	cmp	r7, lr
 800b67e:	f849 1b04 	str.w	r1, [r9], #4
 800b682:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b686:	d8e2      	bhi.n	800b64e <__multiply+0xb2>
 800b688:	9a01      	ldr	r2, [sp, #4]
 800b68a:	f845 c002 	str.w	ip, [r5, r2]
 800b68e:	9a03      	ldr	r2, [sp, #12]
 800b690:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b694:	3304      	adds	r3, #4
 800b696:	f1b9 0f00 	cmp.w	r9, #0
 800b69a:	d021      	beq.n	800b6e0 <__multiply+0x144>
 800b69c:	6829      	ldr	r1, [r5, #0]
 800b69e:	f104 0c14 	add.w	ip, r4, #20
 800b6a2:	46ae      	mov	lr, r5
 800b6a4:	f04f 0a00 	mov.w	sl, #0
 800b6a8:	f8bc b000 	ldrh.w	fp, [ip]
 800b6ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b6b0:	fb09 220b 	mla	r2, r9, fp, r2
 800b6b4:	4452      	add	r2, sl
 800b6b6:	b289      	uxth	r1, r1
 800b6b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b6bc:	f84e 1b04 	str.w	r1, [lr], #4
 800b6c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b6c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b6c8:	f8be 1000 	ldrh.w	r1, [lr]
 800b6cc:	fb09 110a 	mla	r1, r9, sl, r1
 800b6d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b6d4:	4567      	cmp	r7, ip
 800b6d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b6da:	d8e5      	bhi.n	800b6a8 <__multiply+0x10c>
 800b6dc:	9a01      	ldr	r2, [sp, #4]
 800b6de:	50a9      	str	r1, [r5, r2]
 800b6e0:	3504      	adds	r5, #4
 800b6e2:	e799      	b.n	800b618 <__multiply+0x7c>
 800b6e4:	3e01      	subs	r6, #1
 800b6e6:	e79b      	b.n	800b620 <__multiply+0x84>
 800b6e8:	0800c468 	.word	0x0800c468
 800b6ec:	0800c479 	.word	0x0800c479

0800b6f0 <__pow5mult>:
 800b6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6f4:	4615      	mov	r5, r2
 800b6f6:	f012 0203 	ands.w	r2, r2, #3
 800b6fa:	4606      	mov	r6, r0
 800b6fc:	460f      	mov	r7, r1
 800b6fe:	d007      	beq.n	800b710 <__pow5mult+0x20>
 800b700:	4c25      	ldr	r4, [pc, #148]	; (800b798 <__pow5mult+0xa8>)
 800b702:	3a01      	subs	r2, #1
 800b704:	2300      	movs	r3, #0
 800b706:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b70a:	f7ff fe9d 	bl	800b448 <__multadd>
 800b70e:	4607      	mov	r7, r0
 800b710:	10ad      	asrs	r5, r5, #2
 800b712:	d03d      	beq.n	800b790 <__pow5mult+0xa0>
 800b714:	69f4      	ldr	r4, [r6, #28]
 800b716:	b97c      	cbnz	r4, 800b738 <__pow5mult+0x48>
 800b718:	2010      	movs	r0, #16
 800b71a:	f7ff fd7f 	bl	800b21c <malloc>
 800b71e:	4602      	mov	r2, r0
 800b720:	61f0      	str	r0, [r6, #28]
 800b722:	b928      	cbnz	r0, 800b730 <__pow5mult+0x40>
 800b724:	4b1d      	ldr	r3, [pc, #116]	; (800b79c <__pow5mult+0xac>)
 800b726:	481e      	ldr	r0, [pc, #120]	; (800b7a0 <__pow5mult+0xb0>)
 800b728:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b72c:	f7fd ff7e 	bl	800962c <__assert_func>
 800b730:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b734:	6004      	str	r4, [r0, #0]
 800b736:	60c4      	str	r4, [r0, #12]
 800b738:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b73c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b740:	b94c      	cbnz	r4, 800b756 <__pow5mult+0x66>
 800b742:	f240 2171 	movw	r1, #625	; 0x271
 800b746:	4630      	mov	r0, r6
 800b748:	f7ff ff12 	bl	800b570 <__i2b>
 800b74c:	2300      	movs	r3, #0
 800b74e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b752:	4604      	mov	r4, r0
 800b754:	6003      	str	r3, [r0, #0]
 800b756:	f04f 0900 	mov.w	r9, #0
 800b75a:	07eb      	lsls	r3, r5, #31
 800b75c:	d50a      	bpl.n	800b774 <__pow5mult+0x84>
 800b75e:	4639      	mov	r1, r7
 800b760:	4622      	mov	r2, r4
 800b762:	4630      	mov	r0, r6
 800b764:	f7ff ff1a 	bl	800b59c <__multiply>
 800b768:	4639      	mov	r1, r7
 800b76a:	4680      	mov	r8, r0
 800b76c:	4630      	mov	r0, r6
 800b76e:	f7ff fe49 	bl	800b404 <_Bfree>
 800b772:	4647      	mov	r7, r8
 800b774:	106d      	asrs	r5, r5, #1
 800b776:	d00b      	beq.n	800b790 <__pow5mult+0xa0>
 800b778:	6820      	ldr	r0, [r4, #0]
 800b77a:	b938      	cbnz	r0, 800b78c <__pow5mult+0x9c>
 800b77c:	4622      	mov	r2, r4
 800b77e:	4621      	mov	r1, r4
 800b780:	4630      	mov	r0, r6
 800b782:	f7ff ff0b 	bl	800b59c <__multiply>
 800b786:	6020      	str	r0, [r4, #0]
 800b788:	f8c0 9000 	str.w	r9, [r0]
 800b78c:	4604      	mov	r4, r0
 800b78e:	e7e4      	b.n	800b75a <__pow5mult+0x6a>
 800b790:	4638      	mov	r0, r7
 800b792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b796:	bf00      	nop
 800b798:	0800c5c8 	.word	0x0800c5c8
 800b79c:	0800c3f9 	.word	0x0800c3f9
 800b7a0:	0800c479 	.word	0x0800c479

0800b7a4 <__lshift>:
 800b7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a8:	460c      	mov	r4, r1
 800b7aa:	6849      	ldr	r1, [r1, #4]
 800b7ac:	6923      	ldr	r3, [r4, #16]
 800b7ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b7b2:	68a3      	ldr	r3, [r4, #8]
 800b7b4:	4607      	mov	r7, r0
 800b7b6:	4691      	mov	r9, r2
 800b7b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7bc:	f108 0601 	add.w	r6, r8, #1
 800b7c0:	42b3      	cmp	r3, r6
 800b7c2:	db0b      	blt.n	800b7dc <__lshift+0x38>
 800b7c4:	4638      	mov	r0, r7
 800b7c6:	f7ff fddd 	bl	800b384 <_Balloc>
 800b7ca:	4605      	mov	r5, r0
 800b7cc:	b948      	cbnz	r0, 800b7e2 <__lshift+0x3e>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	4b28      	ldr	r3, [pc, #160]	; (800b874 <__lshift+0xd0>)
 800b7d2:	4829      	ldr	r0, [pc, #164]	; (800b878 <__lshift+0xd4>)
 800b7d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b7d8:	f7fd ff28 	bl	800962c <__assert_func>
 800b7dc:	3101      	adds	r1, #1
 800b7de:	005b      	lsls	r3, r3, #1
 800b7e0:	e7ee      	b.n	800b7c0 <__lshift+0x1c>
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	f100 0114 	add.w	r1, r0, #20
 800b7e8:	f100 0210 	add.w	r2, r0, #16
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	4553      	cmp	r3, sl
 800b7f0:	db33      	blt.n	800b85a <__lshift+0xb6>
 800b7f2:	6920      	ldr	r0, [r4, #16]
 800b7f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7f8:	f104 0314 	add.w	r3, r4, #20
 800b7fc:	f019 091f 	ands.w	r9, r9, #31
 800b800:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b804:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b808:	d02b      	beq.n	800b862 <__lshift+0xbe>
 800b80a:	f1c9 0e20 	rsb	lr, r9, #32
 800b80e:	468a      	mov	sl, r1
 800b810:	2200      	movs	r2, #0
 800b812:	6818      	ldr	r0, [r3, #0]
 800b814:	fa00 f009 	lsl.w	r0, r0, r9
 800b818:	4310      	orrs	r0, r2
 800b81a:	f84a 0b04 	str.w	r0, [sl], #4
 800b81e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b822:	459c      	cmp	ip, r3
 800b824:	fa22 f20e 	lsr.w	r2, r2, lr
 800b828:	d8f3      	bhi.n	800b812 <__lshift+0x6e>
 800b82a:	ebac 0304 	sub.w	r3, ip, r4
 800b82e:	3b15      	subs	r3, #21
 800b830:	f023 0303 	bic.w	r3, r3, #3
 800b834:	3304      	adds	r3, #4
 800b836:	f104 0015 	add.w	r0, r4, #21
 800b83a:	4584      	cmp	ip, r0
 800b83c:	bf38      	it	cc
 800b83e:	2304      	movcc	r3, #4
 800b840:	50ca      	str	r2, [r1, r3]
 800b842:	b10a      	cbz	r2, 800b848 <__lshift+0xa4>
 800b844:	f108 0602 	add.w	r6, r8, #2
 800b848:	3e01      	subs	r6, #1
 800b84a:	4638      	mov	r0, r7
 800b84c:	612e      	str	r6, [r5, #16]
 800b84e:	4621      	mov	r1, r4
 800b850:	f7ff fdd8 	bl	800b404 <_Bfree>
 800b854:	4628      	mov	r0, r5
 800b856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b85a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b85e:	3301      	adds	r3, #1
 800b860:	e7c5      	b.n	800b7ee <__lshift+0x4a>
 800b862:	3904      	subs	r1, #4
 800b864:	f853 2b04 	ldr.w	r2, [r3], #4
 800b868:	f841 2f04 	str.w	r2, [r1, #4]!
 800b86c:	459c      	cmp	ip, r3
 800b86e:	d8f9      	bhi.n	800b864 <__lshift+0xc0>
 800b870:	e7ea      	b.n	800b848 <__lshift+0xa4>
 800b872:	bf00      	nop
 800b874:	0800c468 	.word	0x0800c468
 800b878:	0800c479 	.word	0x0800c479

0800b87c <__mcmp>:
 800b87c:	b530      	push	{r4, r5, lr}
 800b87e:	6902      	ldr	r2, [r0, #16]
 800b880:	690c      	ldr	r4, [r1, #16]
 800b882:	1b12      	subs	r2, r2, r4
 800b884:	d10e      	bne.n	800b8a4 <__mcmp+0x28>
 800b886:	f100 0314 	add.w	r3, r0, #20
 800b88a:	3114      	adds	r1, #20
 800b88c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b890:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b894:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b898:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b89c:	42a5      	cmp	r5, r4
 800b89e:	d003      	beq.n	800b8a8 <__mcmp+0x2c>
 800b8a0:	d305      	bcc.n	800b8ae <__mcmp+0x32>
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	4610      	mov	r0, r2
 800b8a6:	bd30      	pop	{r4, r5, pc}
 800b8a8:	4283      	cmp	r3, r0
 800b8aa:	d3f3      	bcc.n	800b894 <__mcmp+0x18>
 800b8ac:	e7fa      	b.n	800b8a4 <__mcmp+0x28>
 800b8ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b8b2:	e7f7      	b.n	800b8a4 <__mcmp+0x28>

0800b8b4 <__mdiff>:
 800b8b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b8:	460c      	mov	r4, r1
 800b8ba:	4606      	mov	r6, r0
 800b8bc:	4611      	mov	r1, r2
 800b8be:	4620      	mov	r0, r4
 800b8c0:	4690      	mov	r8, r2
 800b8c2:	f7ff ffdb 	bl	800b87c <__mcmp>
 800b8c6:	1e05      	subs	r5, r0, #0
 800b8c8:	d110      	bne.n	800b8ec <__mdiff+0x38>
 800b8ca:	4629      	mov	r1, r5
 800b8cc:	4630      	mov	r0, r6
 800b8ce:	f7ff fd59 	bl	800b384 <_Balloc>
 800b8d2:	b930      	cbnz	r0, 800b8e2 <__mdiff+0x2e>
 800b8d4:	4b3a      	ldr	r3, [pc, #232]	; (800b9c0 <__mdiff+0x10c>)
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	f240 2137 	movw	r1, #567	; 0x237
 800b8dc:	4839      	ldr	r0, [pc, #228]	; (800b9c4 <__mdiff+0x110>)
 800b8de:	f7fd fea5 	bl	800962c <__assert_func>
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b8e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ec:	bfa4      	itt	ge
 800b8ee:	4643      	movge	r3, r8
 800b8f0:	46a0      	movge	r8, r4
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b8f8:	bfa6      	itte	ge
 800b8fa:	461c      	movge	r4, r3
 800b8fc:	2500      	movge	r5, #0
 800b8fe:	2501      	movlt	r5, #1
 800b900:	f7ff fd40 	bl	800b384 <_Balloc>
 800b904:	b920      	cbnz	r0, 800b910 <__mdiff+0x5c>
 800b906:	4b2e      	ldr	r3, [pc, #184]	; (800b9c0 <__mdiff+0x10c>)
 800b908:	4602      	mov	r2, r0
 800b90a:	f240 2145 	movw	r1, #581	; 0x245
 800b90e:	e7e5      	b.n	800b8dc <__mdiff+0x28>
 800b910:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b914:	6926      	ldr	r6, [r4, #16]
 800b916:	60c5      	str	r5, [r0, #12]
 800b918:	f104 0914 	add.w	r9, r4, #20
 800b91c:	f108 0514 	add.w	r5, r8, #20
 800b920:	f100 0e14 	add.w	lr, r0, #20
 800b924:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b928:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b92c:	f108 0210 	add.w	r2, r8, #16
 800b930:	46f2      	mov	sl, lr
 800b932:	2100      	movs	r1, #0
 800b934:	f859 3b04 	ldr.w	r3, [r9], #4
 800b938:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b93c:	fa11 f88b 	uxtah	r8, r1, fp
 800b940:	b299      	uxth	r1, r3
 800b942:	0c1b      	lsrs	r3, r3, #16
 800b944:	eba8 0801 	sub.w	r8, r8, r1
 800b948:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b94c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b950:	fa1f f888 	uxth.w	r8, r8
 800b954:	1419      	asrs	r1, r3, #16
 800b956:	454e      	cmp	r6, r9
 800b958:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b95c:	f84a 3b04 	str.w	r3, [sl], #4
 800b960:	d8e8      	bhi.n	800b934 <__mdiff+0x80>
 800b962:	1b33      	subs	r3, r6, r4
 800b964:	3b15      	subs	r3, #21
 800b966:	f023 0303 	bic.w	r3, r3, #3
 800b96a:	3304      	adds	r3, #4
 800b96c:	3415      	adds	r4, #21
 800b96e:	42a6      	cmp	r6, r4
 800b970:	bf38      	it	cc
 800b972:	2304      	movcc	r3, #4
 800b974:	441d      	add	r5, r3
 800b976:	4473      	add	r3, lr
 800b978:	469e      	mov	lr, r3
 800b97a:	462e      	mov	r6, r5
 800b97c:	4566      	cmp	r6, ip
 800b97e:	d30e      	bcc.n	800b99e <__mdiff+0xea>
 800b980:	f10c 0203 	add.w	r2, ip, #3
 800b984:	1b52      	subs	r2, r2, r5
 800b986:	f022 0203 	bic.w	r2, r2, #3
 800b98a:	3d03      	subs	r5, #3
 800b98c:	45ac      	cmp	ip, r5
 800b98e:	bf38      	it	cc
 800b990:	2200      	movcc	r2, #0
 800b992:	4413      	add	r3, r2
 800b994:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b998:	b17a      	cbz	r2, 800b9ba <__mdiff+0x106>
 800b99a:	6107      	str	r7, [r0, #16]
 800b99c:	e7a4      	b.n	800b8e8 <__mdiff+0x34>
 800b99e:	f856 8b04 	ldr.w	r8, [r6], #4
 800b9a2:	fa11 f288 	uxtah	r2, r1, r8
 800b9a6:	1414      	asrs	r4, r2, #16
 800b9a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b9ac:	b292      	uxth	r2, r2
 800b9ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b9b2:	f84e 2b04 	str.w	r2, [lr], #4
 800b9b6:	1421      	asrs	r1, r4, #16
 800b9b8:	e7e0      	b.n	800b97c <__mdiff+0xc8>
 800b9ba:	3f01      	subs	r7, #1
 800b9bc:	e7ea      	b.n	800b994 <__mdiff+0xe0>
 800b9be:	bf00      	nop
 800b9c0:	0800c468 	.word	0x0800c468
 800b9c4:	0800c479 	.word	0x0800c479

0800b9c8 <__d2b>:
 800b9c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9cc:	460f      	mov	r7, r1
 800b9ce:	2101      	movs	r1, #1
 800b9d0:	ec59 8b10 	vmov	r8, r9, d0
 800b9d4:	4616      	mov	r6, r2
 800b9d6:	f7ff fcd5 	bl	800b384 <_Balloc>
 800b9da:	4604      	mov	r4, r0
 800b9dc:	b930      	cbnz	r0, 800b9ec <__d2b+0x24>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	4b24      	ldr	r3, [pc, #144]	; (800ba74 <__d2b+0xac>)
 800b9e2:	4825      	ldr	r0, [pc, #148]	; (800ba78 <__d2b+0xb0>)
 800b9e4:	f240 310f 	movw	r1, #783	; 0x30f
 800b9e8:	f7fd fe20 	bl	800962c <__assert_func>
 800b9ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b9f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b9f4:	bb2d      	cbnz	r5, 800ba42 <__d2b+0x7a>
 800b9f6:	9301      	str	r3, [sp, #4]
 800b9f8:	f1b8 0300 	subs.w	r3, r8, #0
 800b9fc:	d026      	beq.n	800ba4c <__d2b+0x84>
 800b9fe:	4668      	mov	r0, sp
 800ba00:	9300      	str	r3, [sp, #0]
 800ba02:	f7ff fd87 	bl	800b514 <__lo0bits>
 800ba06:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ba0a:	b1e8      	cbz	r0, 800ba48 <__d2b+0x80>
 800ba0c:	f1c0 0320 	rsb	r3, r0, #32
 800ba10:	fa02 f303 	lsl.w	r3, r2, r3
 800ba14:	430b      	orrs	r3, r1
 800ba16:	40c2      	lsrs	r2, r0
 800ba18:	6163      	str	r3, [r4, #20]
 800ba1a:	9201      	str	r2, [sp, #4]
 800ba1c:	9b01      	ldr	r3, [sp, #4]
 800ba1e:	61a3      	str	r3, [r4, #24]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	bf14      	ite	ne
 800ba24:	2202      	movne	r2, #2
 800ba26:	2201      	moveq	r2, #1
 800ba28:	6122      	str	r2, [r4, #16]
 800ba2a:	b1bd      	cbz	r5, 800ba5c <__d2b+0x94>
 800ba2c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ba30:	4405      	add	r5, r0
 800ba32:	603d      	str	r5, [r7, #0]
 800ba34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba38:	6030      	str	r0, [r6, #0]
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	b003      	add	sp, #12
 800ba3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba46:	e7d6      	b.n	800b9f6 <__d2b+0x2e>
 800ba48:	6161      	str	r1, [r4, #20]
 800ba4a:	e7e7      	b.n	800ba1c <__d2b+0x54>
 800ba4c:	a801      	add	r0, sp, #4
 800ba4e:	f7ff fd61 	bl	800b514 <__lo0bits>
 800ba52:	9b01      	ldr	r3, [sp, #4]
 800ba54:	6163      	str	r3, [r4, #20]
 800ba56:	3020      	adds	r0, #32
 800ba58:	2201      	movs	r2, #1
 800ba5a:	e7e5      	b.n	800ba28 <__d2b+0x60>
 800ba5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba64:	6038      	str	r0, [r7, #0]
 800ba66:	6918      	ldr	r0, [r3, #16]
 800ba68:	f7ff fd34 	bl	800b4d4 <__hi0bits>
 800ba6c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba70:	e7e2      	b.n	800ba38 <__d2b+0x70>
 800ba72:	bf00      	nop
 800ba74:	0800c468 	.word	0x0800c468
 800ba78:	0800c479 	.word	0x0800c479

0800ba7c <__sfputc_r>:
 800ba7c:	6893      	ldr	r3, [r2, #8]
 800ba7e:	3b01      	subs	r3, #1
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	b410      	push	{r4}
 800ba84:	6093      	str	r3, [r2, #8]
 800ba86:	da08      	bge.n	800ba9a <__sfputc_r+0x1e>
 800ba88:	6994      	ldr	r4, [r2, #24]
 800ba8a:	42a3      	cmp	r3, r4
 800ba8c:	db01      	blt.n	800ba92 <__sfputc_r+0x16>
 800ba8e:	290a      	cmp	r1, #10
 800ba90:	d103      	bne.n	800ba9a <__sfputc_r+0x1e>
 800ba92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba96:	f7fe bbd2 	b.w	800a23e <__swbuf_r>
 800ba9a:	6813      	ldr	r3, [r2, #0]
 800ba9c:	1c58      	adds	r0, r3, #1
 800ba9e:	6010      	str	r0, [r2, #0]
 800baa0:	7019      	strb	r1, [r3, #0]
 800baa2:	4608      	mov	r0, r1
 800baa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baa8:	4770      	bx	lr

0800baaa <__sfputs_r>:
 800baaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baac:	4606      	mov	r6, r0
 800baae:	460f      	mov	r7, r1
 800bab0:	4614      	mov	r4, r2
 800bab2:	18d5      	adds	r5, r2, r3
 800bab4:	42ac      	cmp	r4, r5
 800bab6:	d101      	bne.n	800babc <__sfputs_r+0x12>
 800bab8:	2000      	movs	r0, #0
 800baba:	e007      	b.n	800bacc <__sfputs_r+0x22>
 800babc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bac0:	463a      	mov	r2, r7
 800bac2:	4630      	mov	r0, r6
 800bac4:	f7ff ffda 	bl	800ba7c <__sfputc_r>
 800bac8:	1c43      	adds	r3, r0, #1
 800baca:	d1f3      	bne.n	800bab4 <__sfputs_r+0xa>
 800bacc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bad0 <_vfiprintf_r>:
 800bad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad4:	460d      	mov	r5, r1
 800bad6:	b09d      	sub	sp, #116	; 0x74
 800bad8:	4614      	mov	r4, r2
 800bada:	4698      	mov	r8, r3
 800badc:	4606      	mov	r6, r0
 800bade:	b118      	cbz	r0, 800bae8 <_vfiprintf_r+0x18>
 800bae0:	6a03      	ldr	r3, [r0, #32]
 800bae2:	b90b      	cbnz	r3, 800bae8 <_vfiprintf_r+0x18>
 800bae4:	f7fe fab2 	bl	800a04c <__sinit>
 800bae8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800baea:	07d9      	lsls	r1, r3, #31
 800baec:	d405      	bmi.n	800bafa <_vfiprintf_r+0x2a>
 800baee:	89ab      	ldrh	r3, [r5, #12]
 800baf0:	059a      	lsls	r2, r3, #22
 800baf2:	d402      	bmi.n	800bafa <_vfiprintf_r+0x2a>
 800baf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baf6:	f7fe fcb4 	bl	800a462 <__retarget_lock_acquire_recursive>
 800bafa:	89ab      	ldrh	r3, [r5, #12]
 800bafc:	071b      	lsls	r3, r3, #28
 800bafe:	d501      	bpl.n	800bb04 <_vfiprintf_r+0x34>
 800bb00:	692b      	ldr	r3, [r5, #16]
 800bb02:	b99b      	cbnz	r3, 800bb2c <_vfiprintf_r+0x5c>
 800bb04:	4629      	mov	r1, r5
 800bb06:	4630      	mov	r0, r6
 800bb08:	f7fe fbd6 	bl	800a2b8 <__swsetup_r>
 800bb0c:	b170      	cbz	r0, 800bb2c <_vfiprintf_r+0x5c>
 800bb0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb10:	07dc      	lsls	r4, r3, #31
 800bb12:	d504      	bpl.n	800bb1e <_vfiprintf_r+0x4e>
 800bb14:	f04f 30ff 	mov.w	r0, #4294967295
 800bb18:	b01d      	add	sp, #116	; 0x74
 800bb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb1e:	89ab      	ldrh	r3, [r5, #12]
 800bb20:	0598      	lsls	r0, r3, #22
 800bb22:	d4f7      	bmi.n	800bb14 <_vfiprintf_r+0x44>
 800bb24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb26:	f7fe fc9d 	bl	800a464 <__retarget_lock_release_recursive>
 800bb2a:	e7f3      	b.n	800bb14 <_vfiprintf_r+0x44>
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb30:	2320      	movs	r3, #32
 800bb32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb36:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb3a:	2330      	movs	r3, #48	; 0x30
 800bb3c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bcf0 <_vfiprintf_r+0x220>
 800bb40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb44:	f04f 0901 	mov.w	r9, #1
 800bb48:	4623      	mov	r3, r4
 800bb4a:	469a      	mov	sl, r3
 800bb4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb50:	b10a      	cbz	r2, 800bb56 <_vfiprintf_r+0x86>
 800bb52:	2a25      	cmp	r2, #37	; 0x25
 800bb54:	d1f9      	bne.n	800bb4a <_vfiprintf_r+0x7a>
 800bb56:	ebba 0b04 	subs.w	fp, sl, r4
 800bb5a:	d00b      	beq.n	800bb74 <_vfiprintf_r+0xa4>
 800bb5c:	465b      	mov	r3, fp
 800bb5e:	4622      	mov	r2, r4
 800bb60:	4629      	mov	r1, r5
 800bb62:	4630      	mov	r0, r6
 800bb64:	f7ff ffa1 	bl	800baaa <__sfputs_r>
 800bb68:	3001      	adds	r0, #1
 800bb6a:	f000 80a9 	beq.w	800bcc0 <_vfiprintf_r+0x1f0>
 800bb6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb70:	445a      	add	r2, fp
 800bb72:	9209      	str	r2, [sp, #36]	; 0x24
 800bb74:	f89a 3000 	ldrb.w	r3, [sl]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f000 80a1 	beq.w	800bcc0 <_vfiprintf_r+0x1f0>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	f04f 32ff 	mov.w	r2, #4294967295
 800bb84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb88:	f10a 0a01 	add.w	sl, sl, #1
 800bb8c:	9304      	str	r3, [sp, #16]
 800bb8e:	9307      	str	r3, [sp, #28]
 800bb90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb94:	931a      	str	r3, [sp, #104]	; 0x68
 800bb96:	4654      	mov	r4, sl
 800bb98:	2205      	movs	r2, #5
 800bb9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb9e:	4854      	ldr	r0, [pc, #336]	; (800bcf0 <_vfiprintf_r+0x220>)
 800bba0:	f7f4 fb16 	bl	80001d0 <memchr>
 800bba4:	9a04      	ldr	r2, [sp, #16]
 800bba6:	b9d8      	cbnz	r0, 800bbe0 <_vfiprintf_r+0x110>
 800bba8:	06d1      	lsls	r1, r2, #27
 800bbaa:	bf44      	itt	mi
 800bbac:	2320      	movmi	r3, #32
 800bbae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbb2:	0713      	lsls	r3, r2, #28
 800bbb4:	bf44      	itt	mi
 800bbb6:	232b      	movmi	r3, #43	; 0x2b
 800bbb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbbc:	f89a 3000 	ldrb.w	r3, [sl]
 800bbc0:	2b2a      	cmp	r3, #42	; 0x2a
 800bbc2:	d015      	beq.n	800bbf0 <_vfiprintf_r+0x120>
 800bbc4:	9a07      	ldr	r2, [sp, #28]
 800bbc6:	4654      	mov	r4, sl
 800bbc8:	2000      	movs	r0, #0
 800bbca:	f04f 0c0a 	mov.w	ip, #10
 800bbce:	4621      	mov	r1, r4
 800bbd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbd4:	3b30      	subs	r3, #48	; 0x30
 800bbd6:	2b09      	cmp	r3, #9
 800bbd8:	d94d      	bls.n	800bc76 <_vfiprintf_r+0x1a6>
 800bbda:	b1b0      	cbz	r0, 800bc0a <_vfiprintf_r+0x13a>
 800bbdc:	9207      	str	r2, [sp, #28]
 800bbde:	e014      	b.n	800bc0a <_vfiprintf_r+0x13a>
 800bbe0:	eba0 0308 	sub.w	r3, r0, r8
 800bbe4:	fa09 f303 	lsl.w	r3, r9, r3
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	9304      	str	r3, [sp, #16]
 800bbec:	46a2      	mov	sl, r4
 800bbee:	e7d2      	b.n	800bb96 <_vfiprintf_r+0xc6>
 800bbf0:	9b03      	ldr	r3, [sp, #12]
 800bbf2:	1d19      	adds	r1, r3, #4
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	9103      	str	r1, [sp, #12]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	bfbb      	ittet	lt
 800bbfc:	425b      	neglt	r3, r3
 800bbfe:	f042 0202 	orrlt.w	r2, r2, #2
 800bc02:	9307      	strge	r3, [sp, #28]
 800bc04:	9307      	strlt	r3, [sp, #28]
 800bc06:	bfb8      	it	lt
 800bc08:	9204      	strlt	r2, [sp, #16]
 800bc0a:	7823      	ldrb	r3, [r4, #0]
 800bc0c:	2b2e      	cmp	r3, #46	; 0x2e
 800bc0e:	d10c      	bne.n	800bc2a <_vfiprintf_r+0x15a>
 800bc10:	7863      	ldrb	r3, [r4, #1]
 800bc12:	2b2a      	cmp	r3, #42	; 0x2a
 800bc14:	d134      	bne.n	800bc80 <_vfiprintf_r+0x1b0>
 800bc16:	9b03      	ldr	r3, [sp, #12]
 800bc18:	1d1a      	adds	r2, r3, #4
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	9203      	str	r2, [sp, #12]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	bfb8      	it	lt
 800bc22:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc26:	3402      	adds	r4, #2
 800bc28:	9305      	str	r3, [sp, #20]
 800bc2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bd00 <_vfiprintf_r+0x230>
 800bc2e:	7821      	ldrb	r1, [r4, #0]
 800bc30:	2203      	movs	r2, #3
 800bc32:	4650      	mov	r0, sl
 800bc34:	f7f4 facc 	bl	80001d0 <memchr>
 800bc38:	b138      	cbz	r0, 800bc4a <_vfiprintf_r+0x17a>
 800bc3a:	9b04      	ldr	r3, [sp, #16]
 800bc3c:	eba0 000a 	sub.w	r0, r0, sl
 800bc40:	2240      	movs	r2, #64	; 0x40
 800bc42:	4082      	lsls	r2, r0
 800bc44:	4313      	orrs	r3, r2
 800bc46:	3401      	adds	r4, #1
 800bc48:	9304      	str	r3, [sp, #16]
 800bc4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc4e:	4829      	ldr	r0, [pc, #164]	; (800bcf4 <_vfiprintf_r+0x224>)
 800bc50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc54:	2206      	movs	r2, #6
 800bc56:	f7f4 fabb 	bl	80001d0 <memchr>
 800bc5a:	2800      	cmp	r0, #0
 800bc5c:	d03f      	beq.n	800bcde <_vfiprintf_r+0x20e>
 800bc5e:	4b26      	ldr	r3, [pc, #152]	; (800bcf8 <_vfiprintf_r+0x228>)
 800bc60:	bb1b      	cbnz	r3, 800bcaa <_vfiprintf_r+0x1da>
 800bc62:	9b03      	ldr	r3, [sp, #12]
 800bc64:	3307      	adds	r3, #7
 800bc66:	f023 0307 	bic.w	r3, r3, #7
 800bc6a:	3308      	adds	r3, #8
 800bc6c:	9303      	str	r3, [sp, #12]
 800bc6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc70:	443b      	add	r3, r7
 800bc72:	9309      	str	r3, [sp, #36]	; 0x24
 800bc74:	e768      	b.n	800bb48 <_vfiprintf_r+0x78>
 800bc76:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc7a:	460c      	mov	r4, r1
 800bc7c:	2001      	movs	r0, #1
 800bc7e:	e7a6      	b.n	800bbce <_vfiprintf_r+0xfe>
 800bc80:	2300      	movs	r3, #0
 800bc82:	3401      	adds	r4, #1
 800bc84:	9305      	str	r3, [sp, #20]
 800bc86:	4619      	mov	r1, r3
 800bc88:	f04f 0c0a 	mov.w	ip, #10
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc92:	3a30      	subs	r2, #48	; 0x30
 800bc94:	2a09      	cmp	r2, #9
 800bc96:	d903      	bls.n	800bca0 <_vfiprintf_r+0x1d0>
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d0c6      	beq.n	800bc2a <_vfiprintf_r+0x15a>
 800bc9c:	9105      	str	r1, [sp, #20]
 800bc9e:	e7c4      	b.n	800bc2a <_vfiprintf_r+0x15a>
 800bca0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bca4:	4604      	mov	r4, r0
 800bca6:	2301      	movs	r3, #1
 800bca8:	e7f0      	b.n	800bc8c <_vfiprintf_r+0x1bc>
 800bcaa:	ab03      	add	r3, sp, #12
 800bcac:	9300      	str	r3, [sp, #0]
 800bcae:	462a      	mov	r2, r5
 800bcb0:	4b12      	ldr	r3, [pc, #72]	; (800bcfc <_vfiprintf_r+0x22c>)
 800bcb2:	a904      	add	r1, sp, #16
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	f7fd fd77 	bl	80097a8 <_printf_float>
 800bcba:	4607      	mov	r7, r0
 800bcbc:	1c78      	adds	r0, r7, #1
 800bcbe:	d1d6      	bne.n	800bc6e <_vfiprintf_r+0x19e>
 800bcc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcc2:	07d9      	lsls	r1, r3, #31
 800bcc4:	d405      	bmi.n	800bcd2 <_vfiprintf_r+0x202>
 800bcc6:	89ab      	ldrh	r3, [r5, #12]
 800bcc8:	059a      	lsls	r2, r3, #22
 800bcca:	d402      	bmi.n	800bcd2 <_vfiprintf_r+0x202>
 800bccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcce:	f7fe fbc9 	bl	800a464 <__retarget_lock_release_recursive>
 800bcd2:	89ab      	ldrh	r3, [r5, #12]
 800bcd4:	065b      	lsls	r3, r3, #25
 800bcd6:	f53f af1d 	bmi.w	800bb14 <_vfiprintf_r+0x44>
 800bcda:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcdc:	e71c      	b.n	800bb18 <_vfiprintf_r+0x48>
 800bcde:	ab03      	add	r3, sp, #12
 800bce0:	9300      	str	r3, [sp, #0]
 800bce2:	462a      	mov	r2, r5
 800bce4:	4b05      	ldr	r3, [pc, #20]	; (800bcfc <_vfiprintf_r+0x22c>)
 800bce6:	a904      	add	r1, sp, #16
 800bce8:	4630      	mov	r0, r6
 800bcea:	f7fe f801 	bl	8009cf0 <_printf_i>
 800bcee:	e7e4      	b.n	800bcba <_vfiprintf_r+0x1ea>
 800bcf0:	0800c5d4 	.word	0x0800c5d4
 800bcf4:	0800c5de 	.word	0x0800c5de
 800bcf8:	080097a9 	.word	0x080097a9
 800bcfc:	0800baab 	.word	0x0800baab
 800bd00:	0800c5da 	.word	0x0800c5da

0800bd04 <__sflush_r>:
 800bd04:	898a      	ldrh	r2, [r1, #12]
 800bd06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd0a:	4605      	mov	r5, r0
 800bd0c:	0710      	lsls	r0, r2, #28
 800bd0e:	460c      	mov	r4, r1
 800bd10:	d458      	bmi.n	800bdc4 <__sflush_r+0xc0>
 800bd12:	684b      	ldr	r3, [r1, #4]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	dc05      	bgt.n	800bd24 <__sflush_r+0x20>
 800bd18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	dc02      	bgt.n	800bd24 <__sflush_r+0x20>
 800bd1e:	2000      	movs	r0, #0
 800bd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd26:	2e00      	cmp	r6, #0
 800bd28:	d0f9      	beq.n	800bd1e <__sflush_r+0x1a>
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd30:	682f      	ldr	r7, [r5, #0]
 800bd32:	6a21      	ldr	r1, [r4, #32]
 800bd34:	602b      	str	r3, [r5, #0]
 800bd36:	d032      	beq.n	800bd9e <__sflush_r+0x9a>
 800bd38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd3a:	89a3      	ldrh	r3, [r4, #12]
 800bd3c:	075a      	lsls	r2, r3, #29
 800bd3e:	d505      	bpl.n	800bd4c <__sflush_r+0x48>
 800bd40:	6863      	ldr	r3, [r4, #4]
 800bd42:	1ac0      	subs	r0, r0, r3
 800bd44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd46:	b10b      	cbz	r3, 800bd4c <__sflush_r+0x48>
 800bd48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd4a:	1ac0      	subs	r0, r0, r3
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	4602      	mov	r2, r0
 800bd50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd52:	6a21      	ldr	r1, [r4, #32]
 800bd54:	4628      	mov	r0, r5
 800bd56:	47b0      	blx	r6
 800bd58:	1c43      	adds	r3, r0, #1
 800bd5a:	89a3      	ldrh	r3, [r4, #12]
 800bd5c:	d106      	bne.n	800bd6c <__sflush_r+0x68>
 800bd5e:	6829      	ldr	r1, [r5, #0]
 800bd60:	291d      	cmp	r1, #29
 800bd62:	d82b      	bhi.n	800bdbc <__sflush_r+0xb8>
 800bd64:	4a29      	ldr	r2, [pc, #164]	; (800be0c <__sflush_r+0x108>)
 800bd66:	410a      	asrs	r2, r1
 800bd68:	07d6      	lsls	r6, r2, #31
 800bd6a:	d427      	bmi.n	800bdbc <__sflush_r+0xb8>
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	6062      	str	r2, [r4, #4]
 800bd70:	04d9      	lsls	r1, r3, #19
 800bd72:	6922      	ldr	r2, [r4, #16]
 800bd74:	6022      	str	r2, [r4, #0]
 800bd76:	d504      	bpl.n	800bd82 <__sflush_r+0x7e>
 800bd78:	1c42      	adds	r2, r0, #1
 800bd7a:	d101      	bne.n	800bd80 <__sflush_r+0x7c>
 800bd7c:	682b      	ldr	r3, [r5, #0]
 800bd7e:	b903      	cbnz	r3, 800bd82 <__sflush_r+0x7e>
 800bd80:	6560      	str	r0, [r4, #84]	; 0x54
 800bd82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd84:	602f      	str	r7, [r5, #0]
 800bd86:	2900      	cmp	r1, #0
 800bd88:	d0c9      	beq.n	800bd1e <__sflush_r+0x1a>
 800bd8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd8e:	4299      	cmp	r1, r3
 800bd90:	d002      	beq.n	800bd98 <__sflush_r+0x94>
 800bd92:	4628      	mov	r0, r5
 800bd94:	f7ff f9f6 	bl	800b184 <_free_r>
 800bd98:	2000      	movs	r0, #0
 800bd9a:	6360      	str	r0, [r4, #52]	; 0x34
 800bd9c:	e7c0      	b.n	800bd20 <__sflush_r+0x1c>
 800bd9e:	2301      	movs	r3, #1
 800bda0:	4628      	mov	r0, r5
 800bda2:	47b0      	blx	r6
 800bda4:	1c41      	adds	r1, r0, #1
 800bda6:	d1c8      	bne.n	800bd3a <__sflush_r+0x36>
 800bda8:	682b      	ldr	r3, [r5, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d0c5      	beq.n	800bd3a <__sflush_r+0x36>
 800bdae:	2b1d      	cmp	r3, #29
 800bdb0:	d001      	beq.n	800bdb6 <__sflush_r+0xb2>
 800bdb2:	2b16      	cmp	r3, #22
 800bdb4:	d101      	bne.n	800bdba <__sflush_r+0xb6>
 800bdb6:	602f      	str	r7, [r5, #0]
 800bdb8:	e7b1      	b.n	800bd1e <__sflush_r+0x1a>
 800bdba:	89a3      	ldrh	r3, [r4, #12]
 800bdbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdc0:	81a3      	strh	r3, [r4, #12]
 800bdc2:	e7ad      	b.n	800bd20 <__sflush_r+0x1c>
 800bdc4:	690f      	ldr	r7, [r1, #16]
 800bdc6:	2f00      	cmp	r7, #0
 800bdc8:	d0a9      	beq.n	800bd1e <__sflush_r+0x1a>
 800bdca:	0793      	lsls	r3, r2, #30
 800bdcc:	680e      	ldr	r6, [r1, #0]
 800bdce:	bf08      	it	eq
 800bdd0:	694b      	ldreq	r3, [r1, #20]
 800bdd2:	600f      	str	r7, [r1, #0]
 800bdd4:	bf18      	it	ne
 800bdd6:	2300      	movne	r3, #0
 800bdd8:	eba6 0807 	sub.w	r8, r6, r7
 800bddc:	608b      	str	r3, [r1, #8]
 800bdde:	f1b8 0f00 	cmp.w	r8, #0
 800bde2:	dd9c      	ble.n	800bd1e <__sflush_r+0x1a>
 800bde4:	6a21      	ldr	r1, [r4, #32]
 800bde6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bde8:	4643      	mov	r3, r8
 800bdea:	463a      	mov	r2, r7
 800bdec:	4628      	mov	r0, r5
 800bdee:	47b0      	blx	r6
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	dc06      	bgt.n	800be02 <__sflush_r+0xfe>
 800bdf4:	89a3      	ldrh	r3, [r4, #12]
 800bdf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdfa:	81a3      	strh	r3, [r4, #12]
 800bdfc:	f04f 30ff 	mov.w	r0, #4294967295
 800be00:	e78e      	b.n	800bd20 <__sflush_r+0x1c>
 800be02:	4407      	add	r7, r0
 800be04:	eba8 0800 	sub.w	r8, r8, r0
 800be08:	e7e9      	b.n	800bdde <__sflush_r+0xda>
 800be0a:	bf00      	nop
 800be0c:	dfbffffe 	.word	0xdfbffffe

0800be10 <_fflush_r>:
 800be10:	b538      	push	{r3, r4, r5, lr}
 800be12:	690b      	ldr	r3, [r1, #16]
 800be14:	4605      	mov	r5, r0
 800be16:	460c      	mov	r4, r1
 800be18:	b913      	cbnz	r3, 800be20 <_fflush_r+0x10>
 800be1a:	2500      	movs	r5, #0
 800be1c:	4628      	mov	r0, r5
 800be1e:	bd38      	pop	{r3, r4, r5, pc}
 800be20:	b118      	cbz	r0, 800be2a <_fflush_r+0x1a>
 800be22:	6a03      	ldr	r3, [r0, #32]
 800be24:	b90b      	cbnz	r3, 800be2a <_fflush_r+0x1a>
 800be26:	f7fe f911 	bl	800a04c <__sinit>
 800be2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d0f3      	beq.n	800be1a <_fflush_r+0xa>
 800be32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be34:	07d0      	lsls	r0, r2, #31
 800be36:	d404      	bmi.n	800be42 <_fflush_r+0x32>
 800be38:	0599      	lsls	r1, r3, #22
 800be3a:	d402      	bmi.n	800be42 <_fflush_r+0x32>
 800be3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be3e:	f7fe fb10 	bl	800a462 <__retarget_lock_acquire_recursive>
 800be42:	4628      	mov	r0, r5
 800be44:	4621      	mov	r1, r4
 800be46:	f7ff ff5d 	bl	800bd04 <__sflush_r>
 800be4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be4c:	07da      	lsls	r2, r3, #31
 800be4e:	4605      	mov	r5, r0
 800be50:	d4e4      	bmi.n	800be1c <_fflush_r+0xc>
 800be52:	89a3      	ldrh	r3, [r4, #12]
 800be54:	059b      	lsls	r3, r3, #22
 800be56:	d4e1      	bmi.n	800be1c <_fflush_r+0xc>
 800be58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be5a:	f7fe fb03 	bl	800a464 <__retarget_lock_release_recursive>
 800be5e:	e7dd      	b.n	800be1c <_fflush_r+0xc>

0800be60 <__swhatbuf_r>:
 800be60:	b570      	push	{r4, r5, r6, lr}
 800be62:	460c      	mov	r4, r1
 800be64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be68:	2900      	cmp	r1, #0
 800be6a:	b096      	sub	sp, #88	; 0x58
 800be6c:	4615      	mov	r5, r2
 800be6e:	461e      	mov	r6, r3
 800be70:	da0d      	bge.n	800be8e <__swhatbuf_r+0x2e>
 800be72:	89a3      	ldrh	r3, [r4, #12]
 800be74:	f013 0f80 	tst.w	r3, #128	; 0x80
 800be78:	f04f 0100 	mov.w	r1, #0
 800be7c:	bf0c      	ite	eq
 800be7e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800be82:	2340      	movne	r3, #64	; 0x40
 800be84:	2000      	movs	r0, #0
 800be86:	6031      	str	r1, [r6, #0]
 800be88:	602b      	str	r3, [r5, #0]
 800be8a:	b016      	add	sp, #88	; 0x58
 800be8c:	bd70      	pop	{r4, r5, r6, pc}
 800be8e:	466a      	mov	r2, sp
 800be90:	f000 f878 	bl	800bf84 <_fstat_r>
 800be94:	2800      	cmp	r0, #0
 800be96:	dbec      	blt.n	800be72 <__swhatbuf_r+0x12>
 800be98:	9901      	ldr	r1, [sp, #4]
 800be9a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800be9e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bea2:	4259      	negs	r1, r3
 800bea4:	4159      	adcs	r1, r3
 800bea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beaa:	e7eb      	b.n	800be84 <__swhatbuf_r+0x24>

0800beac <__smakebuf_r>:
 800beac:	898b      	ldrh	r3, [r1, #12]
 800beae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800beb0:	079d      	lsls	r5, r3, #30
 800beb2:	4606      	mov	r6, r0
 800beb4:	460c      	mov	r4, r1
 800beb6:	d507      	bpl.n	800bec8 <__smakebuf_r+0x1c>
 800beb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bebc:	6023      	str	r3, [r4, #0]
 800bebe:	6123      	str	r3, [r4, #16]
 800bec0:	2301      	movs	r3, #1
 800bec2:	6163      	str	r3, [r4, #20]
 800bec4:	b002      	add	sp, #8
 800bec6:	bd70      	pop	{r4, r5, r6, pc}
 800bec8:	ab01      	add	r3, sp, #4
 800beca:	466a      	mov	r2, sp
 800becc:	f7ff ffc8 	bl	800be60 <__swhatbuf_r>
 800bed0:	9900      	ldr	r1, [sp, #0]
 800bed2:	4605      	mov	r5, r0
 800bed4:	4630      	mov	r0, r6
 800bed6:	f7ff f9c9 	bl	800b26c <_malloc_r>
 800beda:	b948      	cbnz	r0, 800bef0 <__smakebuf_r+0x44>
 800bedc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bee0:	059a      	lsls	r2, r3, #22
 800bee2:	d4ef      	bmi.n	800bec4 <__smakebuf_r+0x18>
 800bee4:	f023 0303 	bic.w	r3, r3, #3
 800bee8:	f043 0302 	orr.w	r3, r3, #2
 800beec:	81a3      	strh	r3, [r4, #12]
 800beee:	e7e3      	b.n	800beb8 <__smakebuf_r+0xc>
 800bef0:	89a3      	ldrh	r3, [r4, #12]
 800bef2:	6020      	str	r0, [r4, #0]
 800bef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bef8:	81a3      	strh	r3, [r4, #12]
 800befa:	9b00      	ldr	r3, [sp, #0]
 800befc:	6163      	str	r3, [r4, #20]
 800befe:	9b01      	ldr	r3, [sp, #4]
 800bf00:	6120      	str	r0, [r4, #16]
 800bf02:	b15b      	cbz	r3, 800bf1c <__smakebuf_r+0x70>
 800bf04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf08:	4630      	mov	r0, r6
 800bf0a:	f000 f84d 	bl	800bfa8 <_isatty_r>
 800bf0e:	b128      	cbz	r0, 800bf1c <__smakebuf_r+0x70>
 800bf10:	89a3      	ldrh	r3, [r4, #12]
 800bf12:	f023 0303 	bic.w	r3, r3, #3
 800bf16:	f043 0301 	orr.w	r3, r3, #1
 800bf1a:	81a3      	strh	r3, [r4, #12]
 800bf1c:	89a3      	ldrh	r3, [r4, #12]
 800bf1e:	431d      	orrs	r5, r3
 800bf20:	81a5      	strh	r5, [r4, #12]
 800bf22:	e7cf      	b.n	800bec4 <__smakebuf_r+0x18>

0800bf24 <_raise_r>:
 800bf24:	291f      	cmp	r1, #31
 800bf26:	b538      	push	{r3, r4, r5, lr}
 800bf28:	4604      	mov	r4, r0
 800bf2a:	460d      	mov	r5, r1
 800bf2c:	d904      	bls.n	800bf38 <_raise_r+0x14>
 800bf2e:	2316      	movs	r3, #22
 800bf30:	6003      	str	r3, [r0, #0]
 800bf32:	f04f 30ff 	mov.w	r0, #4294967295
 800bf36:	bd38      	pop	{r3, r4, r5, pc}
 800bf38:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bf3a:	b112      	cbz	r2, 800bf42 <_raise_r+0x1e>
 800bf3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf40:	b94b      	cbnz	r3, 800bf56 <_raise_r+0x32>
 800bf42:	4620      	mov	r0, r4
 800bf44:	f000 f852 	bl	800bfec <_getpid_r>
 800bf48:	462a      	mov	r2, r5
 800bf4a:	4601      	mov	r1, r0
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf52:	f000 b839 	b.w	800bfc8 <_kill_r>
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d00a      	beq.n	800bf70 <_raise_r+0x4c>
 800bf5a:	1c59      	adds	r1, r3, #1
 800bf5c:	d103      	bne.n	800bf66 <_raise_r+0x42>
 800bf5e:	2316      	movs	r3, #22
 800bf60:	6003      	str	r3, [r0, #0]
 800bf62:	2001      	movs	r0, #1
 800bf64:	e7e7      	b.n	800bf36 <_raise_r+0x12>
 800bf66:	2400      	movs	r4, #0
 800bf68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	4798      	blx	r3
 800bf70:	2000      	movs	r0, #0
 800bf72:	e7e0      	b.n	800bf36 <_raise_r+0x12>

0800bf74 <raise>:
 800bf74:	4b02      	ldr	r3, [pc, #8]	; (800bf80 <raise+0xc>)
 800bf76:	4601      	mov	r1, r0
 800bf78:	6818      	ldr	r0, [r3, #0]
 800bf7a:	f7ff bfd3 	b.w	800bf24 <_raise_r>
 800bf7e:	bf00      	nop
 800bf80:	20000068 	.word	0x20000068

0800bf84 <_fstat_r>:
 800bf84:	b538      	push	{r3, r4, r5, lr}
 800bf86:	4d07      	ldr	r5, [pc, #28]	; (800bfa4 <_fstat_r+0x20>)
 800bf88:	2300      	movs	r3, #0
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	4608      	mov	r0, r1
 800bf8e:	4611      	mov	r1, r2
 800bf90:	602b      	str	r3, [r5, #0]
 800bf92:	f7f5 fdca 	bl	8001b2a <_fstat>
 800bf96:	1c43      	adds	r3, r0, #1
 800bf98:	d102      	bne.n	800bfa0 <_fstat_r+0x1c>
 800bf9a:	682b      	ldr	r3, [r5, #0]
 800bf9c:	b103      	cbz	r3, 800bfa0 <_fstat_r+0x1c>
 800bf9e:	6023      	str	r3, [r4, #0]
 800bfa0:	bd38      	pop	{r3, r4, r5, pc}
 800bfa2:	bf00      	nop
 800bfa4:	20002740 	.word	0x20002740

0800bfa8 <_isatty_r>:
 800bfa8:	b538      	push	{r3, r4, r5, lr}
 800bfaa:	4d06      	ldr	r5, [pc, #24]	; (800bfc4 <_isatty_r+0x1c>)
 800bfac:	2300      	movs	r3, #0
 800bfae:	4604      	mov	r4, r0
 800bfb0:	4608      	mov	r0, r1
 800bfb2:	602b      	str	r3, [r5, #0]
 800bfb4:	f7f5 fdc9 	bl	8001b4a <_isatty>
 800bfb8:	1c43      	adds	r3, r0, #1
 800bfba:	d102      	bne.n	800bfc2 <_isatty_r+0x1a>
 800bfbc:	682b      	ldr	r3, [r5, #0]
 800bfbe:	b103      	cbz	r3, 800bfc2 <_isatty_r+0x1a>
 800bfc0:	6023      	str	r3, [r4, #0]
 800bfc2:	bd38      	pop	{r3, r4, r5, pc}
 800bfc4:	20002740 	.word	0x20002740

0800bfc8 <_kill_r>:
 800bfc8:	b538      	push	{r3, r4, r5, lr}
 800bfca:	4d07      	ldr	r5, [pc, #28]	; (800bfe8 <_kill_r+0x20>)
 800bfcc:	2300      	movs	r3, #0
 800bfce:	4604      	mov	r4, r0
 800bfd0:	4608      	mov	r0, r1
 800bfd2:	4611      	mov	r1, r2
 800bfd4:	602b      	str	r3, [r5, #0]
 800bfd6:	f7f5 fd65 	bl	8001aa4 <_kill>
 800bfda:	1c43      	adds	r3, r0, #1
 800bfdc:	d102      	bne.n	800bfe4 <_kill_r+0x1c>
 800bfde:	682b      	ldr	r3, [r5, #0]
 800bfe0:	b103      	cbz	r3, 800bfe4 <_kill_r+0x1c>
 800bfe2:	6023      	str	r3, [r4, #0]
 800bfe4:	bd38      	pop	{r3, r4, r5, pc}
 800bfe6:	bf00      	nop
 800bfe8:	20002740 	.word	0x20002740

0800bfec <_getpid_r>:
 800bfec:	f7f5 bd52 	b.w	8001a94 <_getpid>

0800bff0 <_sbrk_r>:
 800bff0:	b538      	push	{r3, r4, r5, lr}
 800bff2:	4d06      	ldr	r5, [pc, #24]	; (800c00c <_sbrk_r+0x1c>)
 800bff4:	2300      	movs	r3, #0
 800bff6:	4604      	mov	r4, r0
 800bff8:	4608      	mov	r0, r1
 800bffa:	602b      	str	r3, [r5, #0]
 800bffc:	f7f5 fdbe 	bl	8001b7c <_sbrk>
 800c000:	1c43      	adds	r3, r0, #1
 800c002:	d102      	bne.n	800c00a <_sbrk_r+0x1a>
 800c004:	682b      	ldr	r3, [r5, #0]
 800c006:	b103      	cbz	r3, 800c00a <_sbrk_r+0x1a>
 800c008:	6023      	str	r3, [r4, #0]
 800c00a:	bd38      	pop	{r3, r4, r5, pc}
 800c00c:	20002740 	.word	0x20002740

0800c010 <_calloc_r>:
 800c010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c012:	fba1 2402 	umull	r2, r4, r1, r2
 800c016:	b94c      	cbnz	r4, 800c02c <_calloc_r+0x1c>
 800c018:	4611      	mov	r1, r2
 800c01a:	9201      	str	r2, [sp, #4]
 800c01c:	f7ff f926 	bl	800b26c <_malloc_r>
 800c020:	9a01      	ldr	r2, [sp, #4]
 800c022:	4605      	mov	r5, r0
 800c024:	b930      	cbnz	r0, 800c034 <_calloc_r+0x24>
 800c026:	4628      	mov	r0, r5
 800c028:	b003      	add	sp, #12
 800c02a:	bd30      	pop	{r4, r5, pc}
 800c02c:	220c      	movs	r2, #12
 800c02e:	6002      	str	r2, [r0, #0]
 800c030:	2500      	movs	r5, #0
 800c032:	e7f8      	b.n	800c026 <_calloc_r+0x16>
 800c034:	4621      	mov	r1, r4
 800c036:	f7fe f997 	bl	800a368 <memset>
 800c03a:	e7f4      	b.n	800c026 <_calloc_r+0x16>

0800c03c <__ascii_mbtowc>:
 800c03c:	b082      	sub	sp, #8
 800c03e:	b901      	cbnz	r1, 800c042 <__ascii_mbtowc+0x6>
 800c040:	a901      	add	r1, sp, #4
 800c042:	b142      	cbz	r2, 800c056 <__ascii_mbtowc+0x1a>
 800c044:	b14b      	cbz	r3, 800c05a <__ascii_mbtowc+0x1e>
 800c046:	7813      	ldrb	r3, [r2, #0]
 800c048:	600b      	str	r3, [r1, #0]
 800c04a:	7812      	ldrb	r2, [r2, #0]
 800c04c:	1e10      	subs	r0, r2, #0
 800c04e:	bf18      	it	ne
 800c050:	2001      	movne	r0, #1
 800c052:	b002      	add	sp, #8
 800c054:	4770      	bx	lr
 800c056:	4610      	mov	r0, r2
 800c058:	e7fb      	b.n	800c052 <__ascii_mbtowc+0x16>
 800c05a:	f06f 0001 	mvn.w	r0, #1
 800c05e:	e7f8      	b.n	800c052 <__ascii_mbtowc+0x16>

0800c060 <__ascii_wctomb>:
 800c060:	b149      	cbz	r1, 800c076 <__ascii_wctomb+0x16>
 800c062:	2aff      	cmp	r2, #255	; 0xff
 800c064:	bf85      	ittet	hi
 800c066:	238a      	movhi	r3, #138	; 0x8a
 800c068:	6003      	strhi	r3, [r0, #0]
 800c06a:	700a      	strbls	r2, [r1, #0]
 800c06c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c070:	bf98      	it	ls
 800c072:	2001      	movls	r0, #1
 800c074:	4770      	bx	lr
 800c076:	4608      	mov	r0, r1
 800c078:	4770      	bx	lr
	...

0800c07c <_init>:
 800c07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07e:	bf00      	nop
 800c080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c082:	bc08      	pop	{r3}
 800c084:	469e      	mov	lr, r3
 800c086:	4770      	bx	lr

0800c088 <_fini>:
 800c088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c08a:	bf00      	nop
 800c08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c08e:	bc08      	pop	{r3}
 800c090:	469e      	mov	lr, r3
 800c092:	4770      	bx	lr
